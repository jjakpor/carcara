(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nst69.0 (not (or (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (not (member @quantifiers_skolemize_3 b)) (not (not (member @quantifiers_skolemize_3 d))))))
(assume t68 (or (or (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (not (member @quantifiers_skolemize_3 b)) (not (not (member @quantifiers_skolemize_3 d)))) (or (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (not (member @quantifiers_skolemize_3 b)) (not (not (member @quantifiers_skolemize_3 d)))) (or (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (not (member @quantifiers_skolemize_3 b)) (not (not (member @quantifiers_skolemize_3 d))))))
(step t68' (cl (or (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (not (member @quantifiers_skolemize_3 b)) (not (not (member @quantifiers_skolemize_3 d)))) (or (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (not (member @quantifiers_skolemize_3 b)) (not (not (member @quantifiers_skolemize_3 d)))) (or (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (not (member @quantifiers_skolemize_3 b)) (not (not (member @quantifiers_skolemize_3 d))))) :rule or :premises (t68))
(step st69 (cl (or (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (not (member @quantifiers_skolemize_3 b)) (not (not (member @quantifiers_skolemize_3 d))))) :rule contraction :premises (t68'))
(step t.end (cl) :rule resolution :premises (nst69.0 st69))
