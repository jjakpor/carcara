(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nst3.0 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2))) (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a)))))
(assume nst3.1 (not (not (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a)))))
(step st3 (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2))) (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a))) (not (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a)))) :rule implies_neg2)
(step t.end (cl) :rule resolution :premises (nst3.0 nst3.1 st3))
