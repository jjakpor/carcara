(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nst83.0 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))))
(assume nst83.1 (not (not (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))))
(step st83 (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d)))) (not (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))) :rule implies_neg2)
(step t.end (cl) :rule resolution :premises (nst83.0 nst83.1 st83))
