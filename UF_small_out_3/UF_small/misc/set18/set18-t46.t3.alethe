(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nt46.0 (not (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))))
(assume nt46.1 (not (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 a))) (member @quantifiers_skolemize_3 (difference b a)))))
(anchor :step t46)
(assume t46.a0 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))
(anchor :step t46.t3 :args ((?x Elem) (?s1 Set) (?s2 Set) (:= (?x Elem) ?x) (:= (?s1 Set) ?s1) (:= (?s2 Set) ?s2)))
(anchor :step t46.t3 :args ((?x Elem) (?s1 Set) (?s2 Set) (:= (?x Elem) ?x) (:= (?s1 Set) ?s1) (:= (?s2 Set) ?s2)))
(step t46.t3.t0 (cl (= (= (member ?x (difference ?s1 ?s2)) (and (member ?x ?s1) (not (member ?x ?s2)))) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) :rule trust)
(step t46.t3 (cl (= (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (difference ?s1 ?s2)) (and (member ?x ?s1) (not (member ?x ?s2))))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))) :rule bind)
(step t46.t3.t0 (cl (= (= (member ?x (difference ?s1 ?s2)) (and (member ?x ?s1) (not (member ?x ?s2)))) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) :rule trust)
(step t46.t3 (cl (= (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (difference ?s1 ?s2)) (and (member ?x ?s1) (not (member ?x ?s2))))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))) :rule bind)
(step t46.t5 (cl (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 a))) (member @quantifiers_skolemize_3 (difference b a)))) :rule trust)
(step t46 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 a))) (member @quantifiers_skolemize_3 (difference b a)))) :rule subproof :discharge (t46.a0))
(step t.end (cl) :rule resolution :premises (nt46.0 nt46.1 t46))
