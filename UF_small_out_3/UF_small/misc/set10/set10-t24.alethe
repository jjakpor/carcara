(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union a b))) (member ?x c)))))
(assume nst24.0 (not (not (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c)))))
(assume t10 (or (not (= (not (forall ((?x Elem)) (or (not (member ?x (union a b))) (member ?x c)))) (not (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c))))) (not (not (forall ((?x Elem)) (or (not (member ?x (union a b))) (member ?x c))))) (not (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c)))))
(assume t12 (= (not (forall ((?x Elem)) (or (not (member ?x (union a b))) (member ?x c)))) (not (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c)))))
(assume t23 (not (forall ((?x Elem)) (or (not (member ?x (union a b))) (member ?x c)))))
(step t10' (cl (not (= (not (forall ((?x Elem)) (or (not (member ?x (union a b))) (member ?x c)))) (not (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c))))) (not (not (forall ((?x Elem)) (or (not (member ?x (union a b))) (member ?x c))))) (not (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c)))) :rule or :premises (t10))
(step st24 (cl (not (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c)))) :rule resolution :premises (t10' t12 t23))
(step t.end (cl) :rule resolution :premises (nst24.0 st24))
