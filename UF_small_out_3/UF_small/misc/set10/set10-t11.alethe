(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union a b))) (member ?x c)))))
(assume nt11.0 (not (= (forall ((?x Elem)) (or (not (member ?x (union a b))) (member ?x c))) (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c)))))
(anchor :step t11 :args ((:= (?x Elem) @quantifiers_skolemize_3)))
(anchor :step t11 :args ((:= (?x Elem) @quantifiers_skolemize_3)))
(step t11.t0 (cl (= (or (not (member ?x (union a b))) (member ?x c)) (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c)))) :rule trust)
(step t11 (cl (= (forall ((?x Elem)) (or (not (member ?x (union a b))) (member ?x c))) (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c)))) :rule sko_forall)
(step t11.t0 (cl (= (or (not (member ?x (union a b))) (member ?x c)) (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c)))) :rule trust)
(step t11 (cl (= (forall ((?x Elem)) (or (not (member ?x (union a b))) (member ?x c))) (or (not (member @quantifiers_skolemize_3 (union a b))) (member @quantifiers_skolemize_3 c)))) :rule sko_forall)
(step t.end (cl) :rule resolution :premises (nt11.0 t11))
