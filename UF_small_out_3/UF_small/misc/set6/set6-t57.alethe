(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst57.0 (not (not (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))))
(assume a8 (not (seteq (union (difference c a) (difference c b)) (difference c (intersection a b)))))
(assume t53 (or (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))) (not (= (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))))))
(assume t56 (= (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))))
(step t53' (cl (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))) (not (= (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))))) :rule or :premises (t53))
(step st57 (cl (not (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))) :rule resolution :premises (t53' a8 t56))
(step t.end (cl) :rule resolution :premises (nst57.0 st57))
