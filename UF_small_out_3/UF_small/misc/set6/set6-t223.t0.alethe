(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nt223.0 (not (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))))
(assume nt223.1 (not (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a)))))
(anchor :step t223)
(assume t223.a0 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))
(step st223.t0 (cl (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a))))) :rule forall_inst :args (@quantifiers_skolemize_4 c a))
(step t223.t2 (cl (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a)))) :rule trust)
(step t223 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a)))) :rule subproof :discharge (t223.a0))
(step t.end (cl) :rule resolution :premises (nt223.0 nt223.1 t223))
