(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst56.0 (not (= (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))))
(assume a4 (forall ((?s1 Set) (?s2 Set)) (= (seteq ?s1 ?s2) (and (subset ?s1 ?s2) (subset ?s2 ?s1)))))
(assume t55 (or (not (forall ((?s1 Set) (?s2 Set)) (= (seteq ?s1 ?s2) (and (subset ?s1 ?s2) (subset ?s2 ?s1))))) (= (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))))
(step t55' (cl (not (forall ((?s1 Set) (?s2 Set)) (= (seteq ?s1 ?s2) (and (subset ?s1 ?s2) (subset ?s2 ?s1))))) (= (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))) :rule or :premises (t55))
(step st56 (cl (= (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))) :rule resolution :premises (t55' a4))
(step t.end (cl) :rule resolution :premises (nst56.0 st56))
