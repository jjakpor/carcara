(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst71.0 (not (or (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))) (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b))))))))
(assume nst71.1 (not (not (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))))))
(step st71 (cl (or (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))) (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b)))))) (not (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))))) :rule or_neg :args (0))
(step t.end (cl) :rule resolution :premises (nst71.0 nst71.1 st71))
