(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst1.0 (not (not (member @quantifiers_skolemize_4 b))))
(assume nst1.1 (not (not (member @quantifiers_skolemize_4 a))))
(assume nst1.2 (not (and (member @quantifiers_skolemize_4 a) (member @quantifiers_skolemize_4 b))))
(assume t0 (or (and (member @quantifiers_skolemize_4 a) (member @quantifiers_skolemize_4 b)) (not (member @quantifiers_skolemize_4 a)) (not (member @quantifiers_skolemize_4 b))))
(step t0' (cl (and (member @quantifiers_skolemize_4 a) (member @quantifiers_skolemize_4 b)) (not (member @quantifiers_skolemize_4 a)) (not (member @quantifiers_skolemize_4 b))) :rule or :premises (t0))
(step st1 (cl (not (member @quantifiers_skolemize_4 b)) (not (member @quantifiers_skolemize_4 a)) (and (member @quantifiers_skolemize_4 a) (member @quantifiers_skolemize_4 b))) :rule reordering :premises (t0'))
(step t.end (cl) :rule resolution :premises (nst1.0 nst1.1 nst1.2 st1))
