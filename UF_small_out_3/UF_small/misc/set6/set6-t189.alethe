(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst189.0 (not (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))))
(assume t183 (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))))
(assume t188 (or (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))))
(step t188' (cl (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))) :rule or :premises (t188))
(step st189 (cl (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))) :rule resolution :premises (t188' t183))
(step t.end (cl) :rule resolution :premises (nst189.0 st189))
