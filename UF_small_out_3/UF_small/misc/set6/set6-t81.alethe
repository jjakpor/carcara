(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst81.0 (not (= (member @quantifiers_skolemize_3 (intersection a b)) (and (member @quantifiers_skolemize_3 a) (member @quantifiers_skolemize_3 b)))))
(assume a6 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (intersection ?s1 ?s2)) (and (member ?x ?s1) (member ?x ?s2)))))
(assume t80 (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (intersection ?s1 ?s2)) (and (member ?x ?s1) (member ?x ?s2))))) (= (member @quantifiers_skolemize_3 (intersection a b)) (and (member @quantifiers_skolemize_3 a) (member @quantifiers_skolemize_3 b)))))
(step t80' (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (intersection ?s1 ?s2)) (and (member ?x ?s1) (member ?x ?s2))))) (= (member @quantifiers_skolemize_3 (intersection a b)) (and (member @quantifiers_skolemize_3 a) (member @quantifiers_skolemize_3 b)))) :rule or :premises (t80))
(step st81 (cl (= (member @quantifiers_skolemize_3 (intersection a b)) (and (member @quantifiers_skolemize_3 a) (member @quantifiers_skolemize_3 b)))) :rule resolution :premises (t80' a6))
(step t.end (cl) :rule resolution :premises (nst81.0 st81))
