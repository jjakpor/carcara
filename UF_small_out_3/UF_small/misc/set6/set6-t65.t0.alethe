(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nt65.0 (not (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))))
(assume nt65.1 (not (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b)))))))
(anchor :step t65)
(assume t65.a0 (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(step st65.t0 (cl (not (= (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))) (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b))))))) (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))) (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b)))))) :rule equiv_pos2)
(step t65.t3 (cl (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b)))))) :rule trust)
(step t65 (cl (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))) (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b)))))) :rule subproof :discharge (t65.a0))
(step t.end (cl) :rule resolution :premises (nt65.0 nt65.1 t65))
