(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst79.0 (not (= (member @quantifiers_skolemize_3 (intersection a c)) (and (member @quantifiers_skolemize_3 a) (member @quantifiers_skolemize_3 c)))))
(assume a6 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (intersection ?s1 ?s2)) (and (member ?x ?s1) (member ?x ?s2)))))
(assume t78 (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (intersection ?s1 ?s2)) (and (member ?x ?s1) (member ?x ?s2))))) (= (member @quantifiers_skolemize_3 (intersection a c)) (and (member @quantifiers_skolemize_3 a) (member @quantifiers_skolemize_3 c)))))
(step t78' (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (intersection ?s1 ?s2)) (and (member ?x ?s1) (member ?x ?s2))))) (= (member @quantifiers_skolemize_3 (intersection a c)) (and (member @quantifiers_skolemize_3 a) (member @quantifiers_skolemize_3 c)))) :rule or :premises (t78))
(step st79 (cl (= (member @quantifiers_skolemize_3 (intersection a c)) (and (member @quantifiers_skolemize_3 a) (member @quantifiers_skolemize_3 c)))) :rule resolution :premises (t78' a6))
(step t.end (cl) :rule resolution :premises (nst79.0 st79))
