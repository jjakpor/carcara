(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst10.0 (not (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b)))))
(assume nst10.1 (not (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b)))))
(assume t8 (or (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))))
(assume t9 (or (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) (not (member @quantifiers_skolemize_4 (intersection a b)))))
(step t8' (cl (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) :rule or :premises (t8))
(step t9' (cl (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) (not (member @quantifiers_skolemize_4 (intersection a b)))) :rule or :premises (t9))
(step st10 (cl (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b)))) :rule resolution :premises (t8' t9'))
(step t.end (cl) :rule resolution :premises (nst10.0 nst10.1 st10))
