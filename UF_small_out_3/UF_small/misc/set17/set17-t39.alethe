(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst39.0 (not (not (= (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))))))))
(assume nst39.1 (not (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c)))))
(assume nst39.2 (not (not (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c)))))))
(step st39 (cl (not (= (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c)))))) (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c)))))) :rule equiv_pos1)
(step t.end (cl) :rule resolution :premises (nst39.0 nst39.1 nst39.2 st39))
