(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nst8.0 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b))))))
(assume nst8.1 (not (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))))
(assume t6 (or (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))))
(assume t7 (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))))
(step t7' (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))) :rule or :premises (t7))
(step t6' (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) :rule or :premises (t6))
(step st8 (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))) :rule resolution :premises (t6' t7'))
(step t.end (cl) :rule resolution :premises (nst8.0 nst8.1 st8))
