(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nst157.0 (not (subset (intersection a b) (difference a (difference a b)))))
(assume t63 (or (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))) (not (or (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b))))))))))
(assume t148 (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b))))))
(assume t156 (or (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b))))))))
(step t63' (cl (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))) (not (or (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b))))))))) :rule or :premises (t63))
(step st157 (cl (subset (intersection a b) (difference a (difference a b)))) :rule resolution :premises (t63' t148 t156))
(step t.end (cl) :rule resolution :premises (nst157.0 st157))
