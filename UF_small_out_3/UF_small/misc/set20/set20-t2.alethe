(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nst2.0 (not (not (= (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))) (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (member @quantifiers_skolemize_4 (difference a b)) (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b)))))))))
(assume nst2.1 (not (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))))))
(assume nst2.2 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (member @quantifiers_skolemize_4 (difference a b)) (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b)))))))
(step st2 (cl (not (= (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))) (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (member @quantifiers_skolemize_4 (difference a b)) (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))))))) (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b))))) (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (member @quantifiers_skolemize_4 (difference a b)) (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b)))))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nst2.0 nst2.1 nst2.2 st2))
