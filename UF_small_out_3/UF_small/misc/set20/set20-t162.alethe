(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nst162.0 (not (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b)))))))
(assume t54 (or (subset (difference a (difference a b)) (intersection a b)) (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))) (not (or (subset (difference a (difference a b)) (intersection a b)) (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b)))))))))
(assume t158 (not (subset (difference a (difference a b)) (intersection a b))))
(assume t161 (or (subset (difference a (difference a b)) (intersection a b)) (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b)))))))
(step t54' (cl (subset (difference a (difference a b)) (intersection a b)) (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))) (not (or (subset (difference a (difference a b)) (intersection a b)) (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b)))))))) :rule or :premises (t54))
(step st162 (cl (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b)))))) :rule resolution :premises (t54' t158 t161))
(step t.end (cl) :rule resolution :premises (nst162.0 st162))
