(assume nt56.0 (not (= (exists ((?v0 S51)) (and (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0) f1) (= (f75 f65 ?v0 f76) f1))) (exists ((?v0 S51)) (and (= f1 (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0)) (= f1 (f75 f65 ?v0 f76)))))))
(anchor :step t56 :args ((?v0 S51) (:= (?v0 S51) ?v0)))
(step t56.t0 (cl (= (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0) f1) (= f1 (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0)))) :rule trust)
(step t56.t1 (cl (= (= (f75 f65 ?v0 f76) f1) (= f1 (f75 f65 ?v0 f76)))) :rule trust)
(step st56.t2 (cl (= (and (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0) f1) (= (f75 f65 ?v0 f76) f1)) (and (= f1 (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0)) (= f1 (f75 f65 ?v0 f76))))) :rule cong :premises (t56.t0 t56.t1))
(step t56.t2 (cl (= (and (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0) f1) (= (f75 f65 ?v0 f76) f1)) (and (= f1 (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0)) (= f1 (f75 f65 ?v0 f76))))) :rule trust)
(step t56 (cl (= (exists ((?v0 S51)) (and (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0) f1) (= (f75 f65 ?v0 f76) f1))) (exists ((?v0 S51)) (and (= f1 (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0)) (= f1 (f75 f65 ?v0 f76)))))) :rule bind)
(step t.end (cl) :rule resolution :premises (nt56.0 t56))
