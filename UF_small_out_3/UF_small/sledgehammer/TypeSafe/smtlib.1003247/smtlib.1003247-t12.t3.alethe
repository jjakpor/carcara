(assume nt12.0 (not (not (forall ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51)) (or (not (= (f64 ?v0 ?v1 ?v2 ?v3 f78) (f64 f65 f66 f67 f72 f78))) (= (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6) (f64 f65 f66 f67 f72 f78)))))))
(assume nt12.1 (not (or (not (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 f72 f78))) (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76) (f64 f65 f66 f67 f72 f78)))))
(anchor :step t12)
(assume t12.a0 (forall ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51)) (or (not (= (f64 ?v0 ?v1 ?v2 ?v3 f78) (f64 f65 f66 f67 f72 f78))) (= (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6) (f64 f65 f66 f67 f72 f78)))))
(anchor :step t12.t3 :args ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51) (:= (?v0 S52) ?v0) (:= (?v1 S47) ?v1) (:= (?v2 S53) ?v2) (:= (?v3 S38) ?v3) (:= (?v4 S55) ?v4) (:= (?v5 S55) ?v5) (:= (?v6 S51) ?v6)))
(anchor :step t12.t3 :args ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51) (:= (?v0 S52) ?v0) (:= (?v1 S47) ?v1) (:= (?v2 S53) ?v2) (:= (?v3 S38) ?v3) (:= (?v4 S55) ?v4) (:= (?v5 S55) ?v5) (:= (?v6 S51) ?v6)))
(step t12.t3.t2 (cl (= (=> (= (f64 ?v0 ?v1 ?v2 ?v3 f78) f1) (= (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6) f1)) (=> (= f1 (f64 ?v0 ?v1 ?v2 ?v3 f78)) (= f1 (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6))))) :rule trust)
(step t12.t3 (cl (= (forall ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51)) (=> (= (f64 ?v0 ?v1 ?v2 ?v3 f78) f1) (= (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6) f1))) (forall ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51)) (=> (= f1 (f64 ?v0 ?v1 ?v2 ?v3 f78)) (= f1 (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6)))))) :rule bind)
(step t12.t3.t2 (cl (= (=> (= (f64 ?v0 ?v1 ?v2 ?v3 f78) f1) (= (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6) f1)) (=> (= f1 (f64 ?v0 ?v1 ?v2 ?v3 f78)) (= f1 (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6))))) :rule trust)
(step t12.t3 (cl (= (forall ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51)) (=> (= (f64 ?v0 ?v1 ?v2 ?v3 f78) f1) (= (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6) f1))) (forall ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51)) (=> (= f1 (f64 ?v0 ?v1 ?v2 ?v3 f78)) (= f1 (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6)))))) :rule bind)
(step t12.t11 (cl (or (not (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 f72 f78))) (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76) (f64 f65 f66 f67 f72 f78)))) :rule trust)
(step t12 (cl (not (forall ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51)) (or (not (= (f64 ?v0 ?v1 ?v2 ?v3 f78) (f64 f65 f66 f67 f72 f78))) (= (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6) (f64 f65 f66 f67 f72 f78))))) (or (not (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 f72 f78))) (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76) (f64 f65 f66 f67 f72 f78)))) :rule subproof :discharge (t12.a0))
(step t.end (cl) :rule resolution :premises (nt12.0 nt12.1 t12))
