(assume nt76.0 (not (= (forall ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51)) (or (not (= f1 (f64 ?v0 ?v1 ?v2 ?v3 f78))) (= f1 (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6)))) (forall ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51)) (or (not (= (f64 f65 f66 f67 f72 f78) (f64 ?v0 ?v1 ?v2 ?v3 f78))) (= (f64 f65 f66 f67 f72 f78) (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6)))))))
(assume a11 (= f77 f78))
(anchor :step t76 :args ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51) (:= (?v0 S52) ?v0) (:= (?v1 S47) ?v1) (:= (?v2 S53) ?v2) (:= (?v3 S38) ?v3) (:= (?v4 S55) ?v4) (:= (?v5 S55) ?v5) (:= (?v6 S51) ?v6)))
(step t76.t2 (cl (= f65 f65)) :rule trust)
(step t76.t3 (cl (= f66 f66)) :rule trust)
(step t76.t4 (cl (= f67 f67)) :rule trust)
(step t76.t5 (cl (= f72 f72)) :rule trust)
(step st76.t6 (cl (= (f64 f65 f66 f67 f72 f77) (f64 f65 f66 f67 f72 f78))) :rule cong :premises (t76.t2 t76.t3 t76.t4 t76.t5 a11))
(step t76.t15 (cl (= (or (not (= f1 (f64 ?v0 ?v1 ?v2 ?v3 f78))) (= f1 (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6))) (or (not (= (f64 f65 f66 f67 f72 f78) (f64 ?v0 ?v1 ?v2 ?v3 f78))) (= (f64 f65 f66 f67 f72 f78) (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6))))) :rule trust)
(step t76 (cl (= (forall ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51)) (or (not (= f1 (f64 ?v0 ?v1 ?v2 ?v3 f78))) (= f1 (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6)))) (forall ((?v0 S52) (?v1 S47) (?v2 S53) (?v3 S38) (?v4 S55) (?v5 S55) (?v6 S51)) (or (not (= (f64 f65 f66 f67 f72 f78) (f64 ?v0 ?v1 ?v2 ?v3 f78))) (= (f64 f65 f66 f67 f72 f78) (f64 ?v0 ?v1 ?v2 (f68 (f69 (f70 f71 ?v3) ?v4) ?v5) ?v6)))))) :rule bind)
(step t.end (cl) :rule resolution :premises (nt76.0 t76))
