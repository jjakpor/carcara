(set-logic UF)
(declare-sort A$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_list_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_list_fun$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_list_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_list_a_list_fun$ 0)
(declare-sort A_a_prod_llist_set$ 0)
(declare-sort A_list_a_llist_fun$ 0)
(declare-sort A_llist_a_list_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_list_list_bool_fun$ 0)
(declare-sort A_list_a_list_prod_set$ 0)
(declare-sort A_a_prod_llist_bool_fun$ 0)
(declare-sort A_list_a_list_bool_fun_fun$ 0)
(declare-sort A_list_a_list_prod_bool_fun$ 0)
(declare-sort A_list_list_a_list_list_fun$ 0)
(declare-sort A_list_a_list_a_list_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_list_a_list_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_bool_fun_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_list_list_a_list_list_bool_fun_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_list$ 0)
(declare-sort A_llist$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_a_prod_list$ 0)
(declare-sort A_a_prod_llist$ 0)
(declare-sort A_list_list$ 0)
(declare-sort A_list_llist$ 0)
(declare-sort A_list_a_list_prod$ 0)
(declare-sort A_list_list_list$ 0)
(declare-fun nil$ () A_list$)
(declare-fun hd$ (A_list$) A$)
(declare-fun tl$ (A_list$) A_list$)
(declare-fun cons$ (A$ A_list$) A_list$)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-fun fst$ (A_a_prod$) A$)
(declare-fun snd$ (A_a_prod$) A$)
(declare-fun pair$ (A$ A$) A_a_prod$)
(declare-fun nil$a () A_a_prod_list$)
(declare-fun hd$a (A_a_prod_list$) A_a_prod$)
(declare-fun tl$a (A_a_prod_list$) A_a_prod_list$)
(declare-fun cons$a (A_a_prod$ A_a_prod_list$) A_a_prod_list$)
(declare-fun lNil$a () A_a_prod_llist$)
(declare-fun lhd$a (A_a_prod_llist$) A_a_prod$)
(declare-fun ltl$a (A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lCons$a (A_a_prod$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun nil$b () A_list_list$)
(declare-fun hd$b (A_list_list$) A_list$)
(declare-fun tl$b (A_list_list$) A_list_list$)
(declare-fun cons$b (A_list$ A_list_list$) A_list_list$)
(declare-fun lNil$b () A_list_llist$)
(declare-fun lhd$b (A_list_llist$) A_list$)
(declare-fun ltl$b (A_list_llist$) A_list_llist$)
(declare-fun lCons$b (A_list$ A_list_llist$) A_list_llist$)
(declare-fun fst$a (A_list_a_list_prod$) A_list$)
(declare-fun snd$a (A_list_a_list_prod$) A_list$)
(declare-fun pair$a (A_list$ A_list$) A_list_a_list_prod$)
(declare-fun nil$c () A_list_list_list$)
(declare-fun hd$c (A_list_list_list$) A_list_list$)
(declare-fun tl$c (A_list_list_list$) A_list_list_list$)
(declare-fun cons$c (A_list_list$ A_list_list_list$) A_list_list_list$)
(declare-fun p$ (A_llist$) Bool)
(declare-fun uu$ (A_list_a_list_prod_set$) A_list_a_list_prod_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun top$ () A_list_set$)
(declare-fun uua$ (A_a_prod_set$) A_a_prod_bool_fun$)
(declare-fun uub$ (A_list_set$) A_list_bool_fun$)
(declare-fun uuc$ (A_llist_set$) A_llist_bool_fun$)
(declare-fun uud$ () A_llist_a_fun$)
(declare-fun uue$ () A_llist_a_llist_fun$)
(declare-fun uuf$ (A$) A_list_a_list_fun$)
(declare-fun bind$ (A_list$ A_a_list_fun$) A_list$)
(declare-fun last$ (A_list$) A$)
(declare-fun lzip$ (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun maps$ (A_a_list_fun$) A_list_a_list_fun$)
(declare-fun top$a () A_llist_set$)
(declare-fun top$b () A_list_bool_fun$)
(declare-fun top$c (A_llist$) Bool)
(declare-fun image$ (A_list_a_llist_fun$ A_list_set$) A_llist_set$)
(declare-fun lnull$ (A_list_llist$) Bool)
(declare-fun append$ (A_list$) A_list_a_list_fun$)
(declare-fun image$a (A_llist_a_llist_fun$ A_llist_set$) A_llist_set$)
(declare-fun image$b (A_list_a_list_fun$ A_list_set$) A_list_set$)
(declare-fun insert$ (A$) A_list_a_list_fun$)
(declare-fun lexord$ (A_a_prod_set$) A_list_a_list_prod_set$)
(declare-fun lnull$a (A_a_prod_llist$) Bool)
(declare-fun lnull$b () A_llist_bool_fun$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun append$a (A_list_list$) A_list_list_a_list_list_fun$)
(declare-fun butlast$ (A_list$) A_list$)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llexord$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun member$a (A_list_a_list_prod$ A_list_a_list_prod_set$) Bool)
(declare-fun member$b (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun member$c (A_list$ A_list_set$) Bool)
(declare-fun member$d (A_a_prod_llist$ A_a_prod_llist_set$) Bool)
(declare-fun rotate1$ (A_list$) A_list$)
(declare-fun collect$a (A_list_bool_fun$) A_list_set$)
(declare-fun collect$b (A_list_a_list_prod_bool_fun$) A_list_a_list_prod_set$)
(declare-fun collect$c (A_a_prod_bool_fun$) A_a_prod_set$)
(declare-fun fun_app$a (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$b (A_list_a_list_fun$ A_list$) A_list$)
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$d (A_list_a_list_prod_bool_fun$ A_list_a_list_prod$) Bool)
(declare-fun fun_app$e (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$f (A_list_bool_fun$ A_list$) Bool)
(declare-fun fun_app$g (A_list_a_llist_fun$ A_list$) A_llist$)
(declare-fun fun_app$h (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun fun_app$i (A_bool_fun$ A$) Bool)
(declare-fun fun_app$j (A_a_prod_llist_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun fun_app$k (A_a_prod_llist_a_a_prod_llist_bool_fun_fun$ A_a_prod_llist$) A_a_prod_llist_bool_fun$)
(declare-fun fun_app$l (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$m (A_list_list_a_list_list_fun$ A_list_list$) A_list_list$)
(declare-fun fun_app$n (A_list_list_bool_fun$ A_list_list$) Bool)
(declare-fun fun_app$o (A_list_a_list_list_bool_fun_fun$ A_list$) A_list_list_bool_fun$)
(declare-fun fun_app$p (A_list_list_a_list_bool_fun_fun$ A_list_list$) A_list_bool_fun$)
(declare-fun fun_app$q (A_list_list_a_list_list_bool_fun_fun$ A_list_list$) A_list_list_bool_fun$)
(declare-fun fun_app$r (A_list_a_list_bool_fun_fun$ A_list$) A_list_bool_fun$)
(declare-fun fun_app$s (A_a_list_fun$ A$) A_list$)
(declare-fun fun_app$t (A_llist_a_list_fun$ A_llist$) A_list$)
(declare-fun fun_app$u (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$v (A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$w (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$x (A_list_a_list_a_list_fun_fun$ A_list$) A_list_a_list_fun$)
(declare-fun fun_app$y (A_a_fun$ A$) A$)
(declare-fun lappend$a (A_a_prod_llist$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun lfinite$a (A_a_prod_llist$) Bool)
(declare-fun list_ex1$ (A_bool_fun$) A_list_bool_fun$)
(declare-fun listrel1$ (A_a_prod_set$) A_list_a_list_prod_set$)
(declare-fun listrelp$ (A_a_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun llist_of$ () A_list_a_llist_fun$)
(declare-fun sublists$ (A_list$) A_list_list$)
(declare-fun llist_of$a (A_a_prod_list$) A_a_prod_llist$)
(declare-fun llist_of$b (A_list_list$) A_list_llist$)
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun ltakeWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun remdups_adj$ (A_list$) A_list$)
(declare-fun unfold_llist$ (A_llist_bool_fun$) A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun product_lists$ (A_list_list$) A_list_list$)
(declare-fun map_tailrec_rev$ (A_a_fun$) A_list_a_list_a_list_fun_fun$)
(assert (not (= xs$ (fun_app$g llist_of$ (choice ((?v3 A_list$)) (not (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3))))))))))
(assert (or (= xs$ (fun_app$g llist_of$ (choice ((?v3 A_list$)) (not (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3)))))))) (or (not (member$c (choice ((?v3 A_list$)) (not (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3)))))) (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ (choice ((?v3 A_list$)) (not (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3))))))))))))
(assert (not (or (not (member$c (choice ((?v3 A_list$)) (not (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3)))))) (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ (choice ((?v3 A_list$)) (not (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3))))))))))))
(check-sat)
(exit)
