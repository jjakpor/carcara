(define-fun @quantifiers_skolemize_10 () A_list$ (choice ((?v3 A_list$)) (not (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3)))))))
(assume nst2.0 (not (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10))))))
(assume nst2.1 (not (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))))
(assume t0 (or (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))) (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))))
(assume t1 (or (not (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))))
(step t0' (cl (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))) (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) :rule or :premises (t0))
(step t1' (cl (not (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))) :rule or :premises (t1))
(step st2 (cl (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))) :rule resolution :premises (t0' t1'))
(step t.end (cl) :rule resolution :premises (nst2.0 nst2.1 st2))
