(set-logic UF)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Enat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_fun$ 0)
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-fun lNil$a () A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$) A_llist$)
(declare-fun ltl$a (A_llist_llist$) A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun none$ () Nat_option$)
(declare-fun the$ (Nat_option$) Nat$)
(declare-fun some$ (Nat$) Nat_option$)
(declare-fun rep_enat$ (Enat$) Nat_option$)
(declare-fun abs_enat$ (Nat_option$) Enat$)
(declare-fun lNil$b () A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$) A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun n$ () Nat$)
(declare-fun uu$ (A$) A_llist_a_llist_fun$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$) Enat_bool_fun$)
(declare-fun size$ (Enat$) Nat$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun zero$ () Nat$)
(declare-fun ldrop$ (Enat$) A_llist_a_llist_fun$)
(declare-fun less$a (Nat$) Nat_bool_fun$)
(declare-fun llast$ (A_llist$) A$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun minus$ (Nat$) Nat_nat_fun$)
(declare-fun zero$a () Enat$)
(declare-fun ldrop$a (Enat$) A_llist_llist_a_llist_llist_fun$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun ldropn$a (Nat$) A_llist_llist_a_llist_llist_fun$)
(declare-fun less_eq$ (Enat$) Enat_bool_fun$)
(declare-fun llength$ () A_llist_enat_fun$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$d (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$e (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$f (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$g (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$h (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$i (Enat_enat_fun$ Enat$) Enat$)
(declare-fun fun_app$j (Nat_enat_fun$ Nat$) Enat$)
(declare-fun fun_app$k (Enat_nat_fun$ Enat$) Nat$)
(declare-fun fun_app$l (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun lconcat$a (A_llist_llist_llist$) A_llist_llist$)
(declare-fun less_eq$a (Nat$) Nat_bool_fun$)
(declare-fun llength$a (A_llist_llist$) Enat$)
(declare-fun the_enat$ (Enat$) Nat$)
(declare-fun size_enat$ (Enat$) Nat$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun gen_llength$ (Nat$) A_llist_enat_fun$)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$a (A_llist_llist$ A_llist_llist$) Bool)
(assert (not (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lconcat$ xssa$) (lCons$ ?v0 ?v1)) thesis$)))
(assert (or (not (= (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lconcat$ xssa$) (lCons$ ?v0 ?v1)) thesis$)) (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$)))))) (not (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lconcat$ xssa$) (lCons$ ?v0 ?v1)) thesis$))) (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))))))
(assert (= (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lconcat$ xssa$) (lCons$ ?v0 ?v1)) thesis$)) (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))))))
(check-sat)
(exit)
