(assume nst141.0 (not (not (consistent$ t$))))
(assume nst141.1 (not (not (member$ c$ (alphabet$ t$)))))
(assume nst141.2 (not (not (member$ b$ (alphabet$ t$)))))
(assume nst141.3 (not (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$)))))
(assume nst141.4 (not (not (fun_app$b (less_eq$ (depth$ t$ b$)) (depth$ t$ c$)))))
(assume nst141.5 (not (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$))))
(assume nst141.6 (not (not (or (not (consistent$ t$)) (not (member$ b$ (alphabet$ t$))) (not (member$ c$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$))) (not (fun_app$b (less_eq$ (depth$ t$ b$)) (depth$ t$ c$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$))))))
(assume t140 (or (not (or (not (consistent$ t$)) (not (member$ b$ (alphabet$ t$))) (not (member$ c$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$))) (not (fun_app$b (less_eq$ (depth$ t$ b$)) (depth$ t$ c$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$)))) (not (consistent$ t$)) (not (member$ b$ (alphabet$ t$))) (not (member$ c$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$))) (not (fun_app$b (less_eq$ (depth$ t$ b$)) (depth$ t$ c$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$))))
(step t140' (cl (not (or (not (consistent$ t$)) (not (member$ b$ (alphabet$ t$))) (not (member$ c$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$))) (not (fun_app$b (less_eq$ (depth$ t$ b$)) (depth$ t$ c$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$)))) (not (consistent$ t$)) (not (member$ b$ (alphabet$ t$))) (not (member$ c$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$))) (not (fun_app$b (less_eq$ (depth$ t$ b$)) (depth$ t$ c$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$))) :rule or :premises (t140))
(step st141 (cl (not (consistent$ t$)) (not (member$ c$ (alphabet$ t$))) (not (member$ b$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$))) (not (fun_app$b (less_eq$ (depth$ t$ b$)) (depth$ t$ c$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$)) (not (or (not (consistent$ t$)) (not (member$ b$ (alphabet$ t$))) (not (member$ c$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$))) (not (fun_app$b (less_eq$ (depth$ t$ b$)) (depth$ t$ c$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$))))) :rule reordering :premises (t140'))
(step t.end (cl) :rule resolution :premises (nst141.0 nst141.1 nst141.2 nst141.3 nst141.4 nst141.5 nst141.6 st141))
