(assume nst167.0 (not (not (or (not (member$ c$ (alphabet$ t$))) (= a$ c$) (= b$ c$) (and (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) c$)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$)))))))
(assume nst167.1 (not (not (member$ c$ (alphabet$ t$)))))
(assume nst167.2 (not (= a$ c$)))
(assume nst167.3 (not (= b$ c$)))
(assume nst167.4 (not (and (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) c$)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$)))))
(step st167 (cl (not (or (not (member$ c$ (alphabet$ t$))) (= a$ c$) (= b$ c$) (and (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) c$)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$))))) (not (member$ c$ (alphabet$ t$))) (= a$ c$) (= b$ c$) (and (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) c$)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$)))) :rule or_pos)
(step t.end (cl) :rule resolution :premises (nst167.0 nst167.1 nst167.2 nst167.3 nst167.4 st167))
