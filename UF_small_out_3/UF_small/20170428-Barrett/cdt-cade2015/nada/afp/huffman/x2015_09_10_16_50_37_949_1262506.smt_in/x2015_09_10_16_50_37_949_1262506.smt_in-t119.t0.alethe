(assume nt119.0 (not (not (not (fun_app$b (less_eq$ (cost$ (swapFourSyms$ t$ a$ b$ c$ d$))) (cost$ t$))))))
(assume nt119.1 (not (not (= (swapFourSyms$ t$ a$ b$ c$ d$) (ite (= a$ d$) (fun_app$f (swapSyms$ t$ b$) c$) (ite (= b$ c$) (fun_app$f (swapSyms$ t$ a$) d$) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ t$ a$) c$) b$) d$)))))))
(assume nt119.2 (not (not (= (fun_app$f (swapSyms$ t$ b$) c$) (ite (= a$ d$) (fun_app$f (swapSyms$ t$ b$) c$) (ite (= b$ c$) (fun_app$f (swapSyms$ t$ a$) d$) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ t$ a$) c$) b$) d$)))))))
(assume nt119.3 (not (not (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$)))))
(anchor :step t119)
(assume t119.a0 (not (fun_app$b (less_eq$ (cost$ (swapFourSyms$ t$ a$ b$ c$ d$))) (cost$ t$))))
(assume t119.a1 (= (swapFourSyms$ t$ a$ b$ c$ d$) (ite (= a$ d$) (fun_app$f (swapSyms$ t$ b$) c$) (ite (= b$ c$) (fun_app$f (swapSyms$ t$ a$) d$) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ t$ a$) c$) b$) d$)))))
(assume t119.a2 (= (fun_app$f (swapSyms$ t$ b$) c$) (ite (= a$ d$) (fun_app$f (swapSyms$ t$ b$) c$) (ite (= b$ c$) (fun_app$f (swapSyms$ t$ a$) d$) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ t$ a$) c$) b$) d$)))))
(step st119.t0 (cl (= (= (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$)) false) (not (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$))))) :rule equiv_simplify)
(step t119.t16 (cl (not (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$)))) :rule trust)
(step t119 (cl (not (not (fun_app$b (less_eq$ (cost$ (swapFourSyms$ t$ a$ b$ c$ d$))) (cost$ t$)))) (not (= (swapFourSyms$ t$ a$ b$ c$ d$) (ite (= a$ d$) (fun_app$f (swapSyms$ t$ b$) c$) (ite (= b$ c$) (fun_app$f (swapSyms$ t$ a$) d$) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ t$ a$) c$) b$) d$))))) (not (= (fun_app$f (swapSyms$ t$ b$) c$) (ite (= a$ d$) (fun_app$f (swapSyms$ t$ b$) c$) (ite (= b$ c$) (fun_app$f (swapSyms$ t$ a$) d$) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ t$ a$) c$) b$) d$))))) (not (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$)))) :rule subproof :discharge (t119.a0 t119.a1 t119.a2))
(step t.end (cl) :rule resolution :premises (nt119.0 nt119.1 nt119.2 nt119.3 t119))
