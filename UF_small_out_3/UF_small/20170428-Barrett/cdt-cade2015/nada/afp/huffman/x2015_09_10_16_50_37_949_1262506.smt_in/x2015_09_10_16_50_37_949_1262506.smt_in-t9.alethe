(assume nst9.0 (not (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (= (fun_app$ (fun_app$c (minima$ ?v0) ?v1) ?v2) (and (member$ ?v1 (alphabet$ ?v0)) (member$ ?v2 (alphabet$ ?v0)) (not (= ?v1 ?v2)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (forall ((?v3 A$)) (or (not (member$ ?v3 (alphabet$ ?v0))) (= ?v1 ?v3) (= ?v2 ?v3) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3)))))))))))
(assume nst9.1 (not (= (fun_app$ (fun_app$c (minima$ t$) a$) b$) (and (member$ a$ (alphabet$ t$)) (member$ b$ (alphabet$ t$)) (not (= a$ b$)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) b$)) (forall ((?v3 A$)) (or (not (member$ ?v3 (alphabet$ t$))) (= a$ ?v3) (= b$ ?v3) (and (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) ?v3)))))))))
(assume t8 (or (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (= (fun_app$ (fun_app$c (minima$ ?v0) ?v1) ?v2) (and (member$ ?v1 (alphabet$ ?v0)) (member$ ?v2 (alphabet$ ?v0)) (not (= ?v1 ?v2)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (forall ((?v3 A$)) (or (not (member$ ?v3 (alphabet$ ?v0))) (= ?v1 ?v3) (= ?v2 ?v3) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3))))))))) (= (fun_app$ (fun_app$c (minima$ t$) a$) b$) (and (member$ a$ (alphabet$ t$)) (member$ b$ (alphabet$ t$)) (not (= a$ b$)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) b$)) (forall ((?v3 A$)) (or (not (member$ ?v3 (alphabet$ t$))) (= a$ ?v3) (= b$ ?v3) (and (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) ?v3)))))))))
(step st9 (cl (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (= (fun_app$ (fun_app$c (minima$ ?v0) ?v1) ?v2) (and (member$ ?v1 (alphabet$ ?v0)) (member$ ?v2 (alphabet$ ?v0)) (not (= ?v1 ?v2)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (forall ((?v3 A$)) (or (not (member$ ?v3 (alphabet$ ?v0))) (= ?v1 ?v3) (= ?v2 ?v3) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3))))))))) (= (fun_app$ (fun_app$c (minima$ t$) a$) b$) (and (member$ a$ (alphabet$ t$)) (member$ b$ (alphabet$ t$)) (not (= a$ b$)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) b$)) (forall ((?v3 A$)) (or (not (member$ ?v3 (alphabet$ t$))) (= a$ ?v3) (= b$ ?v3) (and (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) ?v3)))))))) :rule or :premises (t8))
(step t.end (cl) :rule resolution :premises (nst9.0 nst9.1 st9))
