(assume nst260.0 (not (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0)))))))
(assume nst260.1 (not (or (not (consistent$ t$)) (not (member$ a$ (alphabet$ t$))) (not (member$ d$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$)))))
(assume t259 (or (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))) (or (not (consistent$ t$)) (not (member$ a$ (alphabet$ t$))) (not (member$ d$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$)))))
(step st260 (cl (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))) (or (not (consistent$ t$)) (not (member$ a$ (alphabet$ t$))) (not (member$ d$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$)))) :rule or :premises (t259))
(step t.end (cl) :rule resolution :premises (nst260.0 nst260.1 st260))
