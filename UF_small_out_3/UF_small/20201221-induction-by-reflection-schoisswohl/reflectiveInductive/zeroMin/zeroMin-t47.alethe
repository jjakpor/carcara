(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst47.0 (not (= (= (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))) true) (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))))))
(step st47 (cl (= (= (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))) true) (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))))) :rule equiv_simplify)
(step t.end (cl) :rule resolution :premises (nst47.0 st47))
