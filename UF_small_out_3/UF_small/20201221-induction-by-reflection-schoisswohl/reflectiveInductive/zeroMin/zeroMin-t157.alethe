(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst157.0 (not (= @quantifiers_skolemize_15 (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_15) v0_nat))))
(assume t64 (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v))))
(assume t156 (or (not (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))) (= @quantifiers_skolemize_15 (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_15) v0_nat))))
(step t156' (cl (not (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))) (= @quantifiers_skolemize_15 (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_15) v0_nat))) :rule or :premises (t156))
(step st157 (cl (= @quantifiers_skolemize_15 (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_15) v0_nat))) :rule resolution :premises (t156' t64))
(step t.end (cl) :rule resolution :premises (nst157.0 st157))
