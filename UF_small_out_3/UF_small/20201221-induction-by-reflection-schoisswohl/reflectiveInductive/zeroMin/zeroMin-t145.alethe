(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst145.0 (not (= zero (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) zeroR))))
(assume t53 (forall ((env env)) (= zero (eval_nat env zeroR))))
(assume t144 (or (not (forall ((env env)) (= zero (eval_nat env zeroR)))) (= zero (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) zeroR))))
(step t144' (cl (not (forall ((env env)) (= zero (eval_nat env zeroR)))) (= zero (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) zeroR))) :rule or :premises (t144))
(step st145 (cl (= zero (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) zeroR))) :rule resolution :premises (t144' t53))
(step t.end (cl) :rule resolution :premises (nst145.0 st145))
