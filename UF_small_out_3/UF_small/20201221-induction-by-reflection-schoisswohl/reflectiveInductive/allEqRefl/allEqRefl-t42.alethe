(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst42.0 (not (=> (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v)))) (= (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat))))))
(assume nst42.1 (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))))
(step st42 (cl (=> (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v)))) (= (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)))) (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) :rule implies_neg1)
(step t.end (cl) :rule resolution :premises (nst42.0 nst42.1 st42))
