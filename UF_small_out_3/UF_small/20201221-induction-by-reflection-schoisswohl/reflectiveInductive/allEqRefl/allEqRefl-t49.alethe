(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst49.0 (not (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v)))))))
(assume nst49.1 (not (= (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)) (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat))))
(assume t48 (=> (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v)))) (= (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)) (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat))))
(step st49 (cl (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) (= (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)) (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat))) :rule implies :premises (t48))
(step t.end (cl) :rule resolution :premises (nst49.0 nst49.1 st49))
