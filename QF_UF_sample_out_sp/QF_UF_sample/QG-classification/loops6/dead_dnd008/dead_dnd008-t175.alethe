(assume nt175.0 (not (= e3 (op e3 (op e3 e3)))))
(assume nt175.1 (not (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))))))
(assume nt175.2 (not (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))))))
(assume t172 (or (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))))
(assume t173 (or (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 e0))))
(assume t174 (or (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e0 (op e3 (op e3 e0)))))
(step t172' (cl (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) :rule or :premises (t172))
(step t174' (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e0 (op e3 (op e3 e0)))) :rule or :premises (t174))
(step t173' (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 e0))) :rule or :premises (t173))
(step t175 (cl (= e3 (op e3 (op e3 e3))) (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))))) :rule resolution :premises (t172' t173' t174'))
(step t.end (cl) :rule resolution :premises (nt175.0 nt175.1 nt175.2 t175))
