(assume nt621.0 (not (not (= (= (op (op e4 e2) e4) e2) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))))
(assume nt621.1 (not (not (= (op (op e4 e2) e4) e2))))
(assume nt621.2 (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))
(step t621 (cl (not (= (= (op (op e4 e2) e4) e2) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (= (op (op e4 e2) e4) e2)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nt621.0 nt621.1 nt621.2 t621))
