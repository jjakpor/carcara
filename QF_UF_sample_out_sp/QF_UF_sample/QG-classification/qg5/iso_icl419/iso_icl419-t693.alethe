(assume nt693.0 (not (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))
(assume t689 (or (not (= (not (= (op e3 e2) (op e4 e2))) (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (not (= (op e3 e2) (op e4 e2)))) (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))
(assume t691 (= (not (= (op e3 e2) (op e4 e2))) (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))
(assume t692 (not (= (op e3 e2) (op e4 e2))))
(step t689' (cl (not (= (not (= (op e3 e2) (op e4 e2))) (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (not (= (op e3 e2) (op e4 e2)))) (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule or :premises (t689))
(step t693 (cl (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t689' t691 t692))
(step t.end (cl) :rule resolution :premises (nt693.0 t693))
