(set-logic QF_UF)
(declare-sort U 0)
(declare-sort I 0)
(declare-fun op1 (I I) I)
(declare-fun op (I I) I)
(declare-fun e4 () I)
(declare-fun e3 () I)
(declare-fun e2 () I)
(declare-fun e1 () I)
(declare-fun e0 () I)
(assert (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))))
(assert (or (not (= e1 (op e1 e1))) (not (= e3 (op e3 e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= e3 (op (op (op e1 e3) e1) e1))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1)))) (not (= e3 (op e1 (op e1 e3)))) (not (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3)))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op e1 e3) (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) (not (= (op e3 e1) (op (op e1 e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e3) e1))) (not (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))
(assert (= e1 (op (op (op e1 e3) e1) e3)))
(assert (= e3 (op (op (op e1 e3) e1) e1)))
(assert (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))))
(assert (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))
(assert (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))
(assert (= e3 (op e3 e3)))
(assert (= (op e1 e3) (op (op e1 e3) (op e1 e3))))
(assert (= e1 (op e1 e1)))
(assert (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))))
(assert (= e3 (op (op e1 e3) (op (op e1 e3) e3))))
(assert (= e1 (op (op e1 e3) (op (op e1 e3) e1))))
(assert (= e3 (op e1 (op e1 e3))))
(assert (or (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))
(assert (not (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3)))))
(assert (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))
(assert (or (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))
(assert (not (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1)))))
(assert (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))))
(assert (or (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (not (= (op e1 e3) (op (op (op e1 e3) e3) e1))) (not (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))))
(assert (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))
(assert (or (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))))
(assert (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))
(assert (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))
(assert (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))))
(assert (or (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))))
(assert (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))
(assert (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))
(assert (or (= (op e3 e1) (op e3 e3)) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))))
(assert (not (= (op e3 e1) (op e3 e3))))
(assert (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))
(assert (or (= (op e3 e1) (op (op e1 e3) e3)) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))))
(assert (or (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))
(assert (not (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3)))))
(assert (not (= (op e1 e3) (op (op (op e1 e3) e3) e3))))
(assert (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))
(assert (or (= (op e1 e3) (op e1 (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op e3 (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))
(assert (not (= (op e1 e3) (op e1 (op (op e1 e3) e3)))))
(assert (or (= e1 (op e3 e1)) (= e1 (op e3 e3)) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e3)))))
(assert (not (= e1 (op e3 (op (op e1 e3) e1)))))
(assert (not (= e1 (op e3 e3))))
(assert (not (= e1 (op e3 e1))))
(assert (or (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))))
(assert (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))
(assert (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))
(assert (or (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))))
(assert (or (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))))
(assert (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))
(assert (or (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))))
(assert (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))
(assert (or (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))))
(assert (or (= (op e3 e1) (op (op e1 e3) e1)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e3) (op (op e1 e3) e1)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))))
(assert (not (= (op e3 e1) (op (op e1 e3) e1))))
(assert (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1)))))
(assert (not (= (op e3 e3) (op (op e1 e3) e1))))
(check-sat)
(exit)
