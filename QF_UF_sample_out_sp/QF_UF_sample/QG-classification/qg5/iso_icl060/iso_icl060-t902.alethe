(assume nt902.0 (not (not (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op e3 e3)) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 e1)))))))
(assume nt902.1 (not (not (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)))))
(assume nt902.2 (not (or (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op e3 e3)) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 e1)))))
(step t902 (cl (not (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op e3 e3)) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 e1))))) (not (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1))) (or (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op e3 e3)) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 e1)))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nt902.0 nt902.1 nt902.2 t902))
