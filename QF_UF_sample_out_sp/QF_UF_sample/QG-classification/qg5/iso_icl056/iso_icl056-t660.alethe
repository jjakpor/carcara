(assume nt660.0 (not (not (= (op (op e1 e1) (op e1 (op e1 e1))) (op (op (op e1 e1) (op e1 (op e1 e1))) (op e1 (op e1 e1)))))))
(assume t656 (or (not (= (not (= (op e2 e3) (op e4 e3))) (not (= (op (op e1 e1) (op e1 (op e1 e1))) (op (op (op e1 e1) (op e1 (op e1 e1))) (op e1 (op e1 e1))))))) (not (not (= (op e2 e3) (op e4 e3)))) (not (= (op (op e1 e1) (op e1 (op e1 e1))) (op (op (op e1 e1) (op e1 (op e1 e1))) (op e1 (op e1 e1)))))))
(assume t658 (= (not (= (op e2 e3) (op e4 e3))) (not (= (op (op e1 e1) (op e1 (op e1 e1))) (op (op (op e1 e1) (op e1 (op e1 e1))) (op e1 (op e1 e1)))))))
(assume t659 (not (= (op e2 e3) (op e4 e3))))
(step t656' (cl (not (= (not (= (op e2 e3) (op e4 e3))) (not (= (op (op e1 e1) (op e1 (op e1 e1))) (op (op (op e1 e1) (op e1 (op e1 e1))) (op e1 (op e1 e1))))))) (not (not (= (op e2 e3) (op e4 e3)))) (not (= (op (op e1 e1) (op e1 (op e1 e1))) (op (op (op e1 e1) (op e1 (op e1 e1))) (op e1 (op e1 e1)))))) :rule or :premises (t656))
(step t660 (cl (not (= (op (op e1 e1) (op e1 (op e1 e1))) (op (op (op e1 e1) (op e1 (op e1 e1))) (op e1 (op e1 e1)))))) :rule resolution :premises (t656' t658 t659))
(step t.end (cl) :rule resolution :premises (nt660.0 t660))
