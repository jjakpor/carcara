(assume nt2.t78.0 (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))
(assume t2.t40 (or (= e0 (op e0 e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))
(assume t2.t45 (not (= e0 (op e0 e0))))
(assume t2.t64 (not (= (op e0 e0) (op (op e0 e0) e0))))
(assume t2.t69 (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))
(assume t2.t77 (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))
(step t2.t40' (cl (= e0 (op e0 e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule or :premises (t2.t40))
(step t2.t78 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule resolution :premises (t2.t40' t2.t45 t2.t64 t2.t69 t2.t77))
(step t.end (cl) :rule resolution :premises (nt2.t78.0 t2.t78))
