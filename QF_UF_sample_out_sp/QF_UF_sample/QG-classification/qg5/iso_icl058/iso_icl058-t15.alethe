(assume nt15.0 (not (not (= e0 (op (op (op (op e0 e0) e0) e0) e0)))))
(assume nt15.1 (not (not (= e0 (op (op e0 e0) (op e0 e0))))))
(assume nt15.2 (not (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))))))
(assume nt15.3 (not (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))))
(assume nt15.4 (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))))
(assume t0 (or (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (not (= e0 (op (op (op (op e0 e0) e0) e0) e0))) (not (= e0 (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))))
(assume t14 (or (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))))
(step t14' (cl (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule or :premises (t14))
(step t0' (cl (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (not (= e0 (op (op (op (op e0 e0) e0) e0) e0))) (not (= e0 (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule or :premises (t0))
(step t15 (cl (not (= e0 (op (op (op (op e0 e0) e0) e0) e0))) (not (= e0 (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule resolution :premises (t0' t14'))
(step t.end (cl) :rule resolution :premises (nt15.0 nt15.1 nt15.2 nt15.3 nt15.4 t15))
