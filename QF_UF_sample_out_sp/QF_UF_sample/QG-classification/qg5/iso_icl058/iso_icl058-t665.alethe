(assume nt665.0 (not (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))))
(assume t654 (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4)) (or (= e4 (op e4 e4)) (= e4 (op e3 e3)) (= e4 (op e2 e2)) (= e4 (op e0 e0)) (= e4 (op e1 e1)))))
(assume t664 (= (or (= e4 (op e4 e4)) (= e4 (op e3 e3)) (= e4 (op e2 e2)) (= e4 (op e0 e0)) (= e4 (op e1 e1))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))))
(step t665 (cl (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t654 t664))
(step t.end (cl) :rule resolution :premises (nt665.0 t665))
