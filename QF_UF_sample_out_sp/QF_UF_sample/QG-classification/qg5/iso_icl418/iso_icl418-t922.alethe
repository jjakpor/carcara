(assume nt922.0 (not (= (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e2 e2) (op e2 e2)) (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))))))
(assume t920 (= (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e2 e2) (op e2 e2)) (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) true (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1)))))
(assume t921 (= (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) true (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1)))))
(step t922 (cl (= (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e2 e2) (op e2 e2)) (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))))) :rule trans :premises (t920 t921))
(step t.end (cl) :rule resolution :premises (nt922.0 t922))
