(assume nt987.0 (not (= (op e4 (op e3 e4)) (op (op e3 e4) e4))))
(assume nt987.1 (not (not (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))))
(assume t986 (or (not (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))))) (= (op e4 (op e3 e4)) (op (op e3 e4) e4))))
(step t986' (cl (not (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))))) (= (op e4 (op e3 e4)) (op (op e3 e4) e4))) :rule or :premises (t986))
(step t987 (cl (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (not (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))) :rule reordering :premises (t986'))
(step t.end (cl) :rule resolution :premises (nt987.0 nt987.1 t987))
