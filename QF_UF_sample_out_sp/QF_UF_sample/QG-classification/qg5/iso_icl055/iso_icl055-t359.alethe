(assume nt359.0 (not (= (op e1 e1) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op e1 e1))))))
(assume t353 (or (not (= (= (op e0 (op e0 e2)) e2) (= (op e1 e1) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op e1 e1)))))) (not (= (op e0 (op e0 e2)) e2)) (= (op e1 e1) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op e1 e1))))))
(assume t357 (= (= (op e0 (op e0 e2)) e2) (= (op e1 e1) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op e1 e1))))))
(assume t358 (= (op e0 (op e0 e2)) e2))
(step t353' (cl (not (= (= (op e0 (op e0 e2)) e2) (= (op e1 e1) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op e1 e1)))))) (not (= (op e0 (op e0 e2)) e2)) (= (op e1 e1) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op e1 e1))))) :rule or :premises (t353))
(step t359 (cl (= (op e1 e1) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op (op (op (op e1 e1) (op e1 e1)) (op (op e1 e1) (op e1 e1))) (op e1 e1))))) :rule resolution :premises (t353' t357 t358))
(step t.end (cl) :rule resolution :premises (nt359.0 t359))
