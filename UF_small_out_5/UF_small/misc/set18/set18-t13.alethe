(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nst13.0 (not (not (= (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (not (not (member @quantifiers_skolemize_3 (difference b a))))) (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (member @quantifiers_skolemize_3 (difference b a)))))))
(assume nst13.1 (not (not (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (not (not (member @quantifiers_skolemize_3 (difference b a))))))))
(assume nst13.2 (not (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (member @quantifiers_skolemize_3 (difference b a)))))
(step st13 (cl (not (= (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (not (not (member @quantifiers_skolemize_3 (difference b a))))) (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (member @quantifiers_skolemize_3 (difference b a))))) (not (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (not (not (member @quantifiers_skolemize_3 (difference b a)))))) (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (member @quantifiers_skolemize_3 (difference b a)))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nst13.0 nst13.1 nst13.2 st13))
