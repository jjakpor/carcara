(set-logic UF)
(declare-sort Set 0)
(declare-sort Elem 0)
(declare-fun member (Elem Set) Bool)
(declare-fun subset (Set Set) Bool)
(declare-fun seteq (Set Set) Bool)
(declare-fun union (Set Set) Set)
(declare-fun intersection (Set Set) Set)
(declare-fun difference (Set Set) Set)
(declare-fun a () Set)
(declare-fun b () Set)
(declare-fun d () Set)
(assert (not (or (and (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b)) (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))))
(assert (or (not (= (or (and (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b)) (not (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d)))) (or (and (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b)) (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d)))) (not (or (and (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b)) (not (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))))) (or (and (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b)) (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))))
(assert (= (or (and (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b)) (not (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d)))) (or (and (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b)) (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))))
(assert (or (and (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d))) (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) b)) (not (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d)))))
(check-sat)
(exit)
