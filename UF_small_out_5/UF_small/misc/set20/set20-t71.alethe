(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nst71.0 (not (=> (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))) (not (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (difference a (difference a b))))))))
(assume nst71.1 (not (not (not (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (difference a (difference a b))))))))
(step st71 (cl (=> (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))) (not (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (difference a (difference a b)))))) (not (not (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (difference a (difference a b))))))) :rule implies_neg2)
(step t.end (cl) :rule resolution :premises (nst71.0 nst71.1 st71))
