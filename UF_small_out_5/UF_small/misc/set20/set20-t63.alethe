(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nst63.0 (not (subset (intersection a b) (difference a (difference a b)))))
(assume nst63.1 (not (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b))))))))
(assume nst63.2 (not (not (or (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b))))))))))
(assume t62 (or (not (or (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))) (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b))))))))
(step t62' (cl (not (or (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))) (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b))))))) :rule or :premises (t62))
(step st63 (cl (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))) (not (or (subset (intersection a b) (difference a (difference a b))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b))))))))) :rule reordering :premises (t62'))
(step t.end (cl) :rule resolution :premises (nst63.0 nst63.1 nst63.2 st63))
