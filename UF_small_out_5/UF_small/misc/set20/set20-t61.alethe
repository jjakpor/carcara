(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nst61.0 (not (not (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b))))))
(assume a8 (not (seteq (intersection a b) (difference a (difference a b)))))
(assume t57 (or (seteq (intersection a b) (difference a (difference a b))) (not (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b)))) (not (= (seteq (intersection a b) (difference a (difference a b))) (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b)))))))
(assume t60 (= (seteq (intersection a b) (difference a (difference a b))) (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b)))))
(step t57' (cl (seteq (intersection a b) (difference a (difference a b))) (not (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b)))) (not (= (seteq (intersection a b) (difference a (difference a b))) (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b)))))) :rule or :premises (t57))
(step st61 (cl (not (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b))))) :rule resolution :premises (t57' a8 t60))
(step t.end (cl) :rule resolution :premises (nst61.0 st61))
