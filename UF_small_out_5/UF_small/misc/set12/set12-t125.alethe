(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (intersection b c)))) (member ?x (intersection (intersection a b) c))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))))
(assume nst125.0 (not (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))))))
(assume nst125.1 (not (or (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))))))
(assume t124 (or (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))))))
(step st125 (cl (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))))) :rule or :premises (t124))
(step t.end (cl) :rule resolution :premises (nst125.0 nst125.1 st125))
