(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst102.0 (not (= (member @quantifiers_skolemize_3 (union (intersection a b) (intersection a c))) (or (member @quantifiers_skolemize_3 (intersection a b)) (member @quantifiers_skolemize_3 (intersection a c))))))
(assume a5 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (union ?s1 ?s2)) (or (member ?x ?s1) (member ?x ?s2)))))
(assume t101 (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (union ?s1 ?s2)) (or (member ?x ?s1) (member ?x ?s2))))) (= (member @quantifiers_skolemize_3 (union (intersection a b) (intersection a c))) (or (member @quantifiers_skolemize_3 (intersection a b)) (member @quantifiers_skolemize_3 (intersection a c))))))
(step t101' (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (union ?s1 ?s2)) (or (member ?x ?s1) (member ?x ?s2))))) (= (member @quantifiers_skolemize_3 (union (intersection a b) (intersection a c))) (or (member @quantifiers_skolemize_3 (intersection a b)) (member @quantifiers_skolemize_3 (intersection a c))))) :rule or :premises (t101))
(step st102 (cl (= (member @quantifiers_skolemize_3 (union (intersection a b) (intersection a c))) (or (member @quantifiers_skolemize_3 (intersection a b)) (member @quantifiers_skolemize_3 (intersection a c))))) :rule resolution :premises (t101' a5))
(step t.end (cl) :rule resolution :premises (nst102.0 st102))
