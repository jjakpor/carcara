(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst6.0 (not (= (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a)))) (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (member @quantifiers_skolemize_4 a)))))
(assume t3 (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a)))))
(assume t4 (= (not (member @quantifiers_skolemize_4 c)) (not (member @quantifiers_skolemize_4 c))))
(assume t5 (= (not (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 a)))
(step st6 (cl (= (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a)))) (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (member @quantifiers_skolemize_4 a)))) :rule cong :premises (t3 t4 t5))
(step t.end (cl) :rule resolution :premises (nst6.0 st6))
