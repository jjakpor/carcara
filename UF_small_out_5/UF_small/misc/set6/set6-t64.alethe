(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst64.0 (not (=> (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))) (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b))))))))
(assume nst64.1 (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))))
(step st64 (cl (=> (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))) (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b)))))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))) :rule implies_neg1)
(step t.end (cl) :rule resolution :premises (nst64.0 nst64.1 st64))
