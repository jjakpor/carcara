(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst0.0 (not (and (member @quantifiers_skolemize_4 a) (member @quantifiers_skolemize_4 b))))
(assume nst0.1 (not (not (member @quantifiers_skolemize_4 a))))
(assume nst0.2 (not (not (member @quantifiers_skolemize_4 b))))
(step st0 (cl (and (member @quantifiers_skolemize_4 a) (member @quantifiers_skolemize_4 b)) (not (member @quantifiers_skolemize_4 a)) (not (member @quantifiers_skolemize_4 b))) :rule and_neg)
(step t.end (cl) :rule resolution :premises (nst0.0 nst0.1 nst0.2 st0))
