(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst216.0 (not (= (member @quantifiers_skolemize_4 (union (difference c a) (difference c b))) (or (member @quantifiers_skolemize_4 (difference c a)) (member @quantifiers_skolemize_4 (difference c b))))))
(assume a5 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (union ?s1 ?s2)) (or (member ?x ?s1) (member ?x ?s2)))))
(assume t215 (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (union ?s1 ?s2)) (or (member ?x ?s1) (member ?x ?s2))))) (= (member @quantifiers_skolemize_4 (union (difference c a) (difference c b))) (or (member @quantifiers_skolemize_4 (difference c a)) (member @quantifiers_skolemize_4 (difference c b))))))
(step t215' (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (union ?s1 ?s2)) (or (member ?x ?s1) (member ?x ?s2))))) (= (member @quantifiers_skolemize_4 (union (difference c a) (difference c b))) (or (member @quantifiers_skolemize_4 (difference c a)) (member @quantifiers_skolemize_4 (difference c b))))) :rule or :premises (t215))
(step st216 (cl (= (member @quantifiers_skolemize_4 (union (difference c a) (difference c b))) (or (member @quantifiers_skolemize_4 (difference c a)) (member @quantifiers_skolemize_4 (difference c b))))) :rule resolution :premises (t215' a5))
(step t.end (cl) :rule resolution :premises (nst216.0 st216))
