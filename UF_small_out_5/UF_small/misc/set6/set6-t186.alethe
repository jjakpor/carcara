(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst186.0 (not (not (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))))
(assume t51 (or (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))) (not (subset (union (difference c a) (difference c b)) (difference c (intersection a b)))) (not (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))))
(assume t57 (not (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))))
(assume t185 (subset (union (difference c a) (difference c b)) (difference c (intersection a b))))
(step t51' (cl (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))) (not (subset (union (difference c a) (difference c b)) (difference c (intersection a b)))) (not (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))) :rule or :premises (t51))
(step st186 (cl (not (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))) :rule resolution :premises (t51' t57 t185))
(step t.end (cl) :rule resolution :premises (nst186.0 st186))
