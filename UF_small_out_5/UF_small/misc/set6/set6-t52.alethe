(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst52.0 (not (not (= (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))))))
(assume nst52.1 (not (seteq (union (difference c a) (difference c b)) (difference c (intersection a b)))))
(assume nst52.2 (not (not (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))))
(step st52 (cl (not (= (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))) (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))) :rule equiv_pos1)
(step t.end (cl) :rule resolution :premises (nst52.0 nst52.1 nst52.2 st52))
