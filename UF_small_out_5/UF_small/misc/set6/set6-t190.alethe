(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst190.0 (not (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))))
(assume t50 (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))) (not (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))))))
(assume t186 (not (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))
(assume t189 (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))))
(step t50' (cl (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))) (not (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))))) :rule or :premises (t50))
(step st190 (cl (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))) :rule resolution :premises (t50' t186 t189))
(step t.end (cl) :rule resolution :premises (nst190.0 st190))
