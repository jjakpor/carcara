(define-fun @quantifiers_skolemize_3 () alpha (choice ((x alpha)) (not (models (push_alpha empty v0_alpha x) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha))))))
(assume nst8.0 (not (=> (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))) (= (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha))) (= (eval_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (inj_alpha v0_alpha)) (eval_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (inj_alpha v0_alpha)))))))
(assume nst8.1 (not (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y))))))
(step st8 (cl (=> (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))) (= (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha))) (= (eval_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (inj_alpha v0_alpha)) (eval_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (inj_alpha v0_alpha))))) (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y))))) :rule implies_neg1)
(step t.end (cl) :rule resolution :premises (nst8.0 nst8.1 st8))
