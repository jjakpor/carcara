(define-fun @quantifiers_skolemize_3 () alpha (choice ((x alpha)) (not (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(assume nst33.0 (not (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(assume t24 (or (not (= (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))) (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))) (not (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))) (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(assume t26 (= (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))) (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(assume t32 (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(step t24' (cl (not (= (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))) (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))) (not (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))) (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))) :rule or :premises (t24))
(step st33 (cl (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))) :rule resolution :premises (t24' t26 t32))
(step t.end (cl) :rule resolution :premises (nst33.0 st33))
