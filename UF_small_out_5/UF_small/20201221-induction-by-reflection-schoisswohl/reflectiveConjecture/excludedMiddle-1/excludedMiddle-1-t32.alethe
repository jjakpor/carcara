(define-fun @quantifiers_skolemize_3 () alpha (choice ((x alpha)) (not (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(assume nst32.0 (not (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))))
(assume a14 (not (models empty (forallR_alpha v0_alpha (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(assume t28 (or (models empty (forallR_alpha v0_alpha (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))) (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))) (not (= (models empty (forallR_alpha v0_alpha (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))))
(assume t31 (= (models empty (forallR_alpha v0_alpha (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(step t28' (cl (models empty (forallR_alpha v0_alpha (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))) (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))) (not (= (models empty (forallR_alpha v0_alpha (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))) :rule or :premises (t28))
(step st32 (cl (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))) :rule resolution :premises (t28' a14 t31))
(step t.end (cl) :rule resolution :premises (nst32.0 st32))
