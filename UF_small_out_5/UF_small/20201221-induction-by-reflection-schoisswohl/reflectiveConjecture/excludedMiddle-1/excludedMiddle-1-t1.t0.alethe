(define-fun @quantifiers_skolemize_3 () alpha (choice ((x alpha)) (not (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(assume nt1.0 (not (not (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi)))))))
(assume nt1.1 (not (= (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (notR (pR (inj_alpha v0_alpha)))) (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (pR (inj_alpha v0_alpha)))))))
(anchor :step t1)
(assume t1.a0 (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi)))))
(step st1.t0 (cl (or (not (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi))))) (= (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (notR (pR (inj_alpha v0_alpha)))) (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (pR (inj_alpha v0_alpha))))))) :rule forall_inst :args ((push_alpha empty v0_alpha @quantifiers_skolemize_3) (pR (inj_alpha v0_alpha))))
(step t1.t2 (cl (= (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (notR (pR (inj_alpha v0_alpha)))) (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (pR (inj_alpha v0_alpha)))))) :rule trust)
(step t1 (cl (not (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi))))) (= (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (notR (pR (inj_alpha v0_alpha)))) (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (pR (inj_alpha v0_alpha)))))) :rule subproof :discharge (t1.a0))
(step t.end (cl) :rule resolution :premises (nt1.0 nt1.1 t1))
