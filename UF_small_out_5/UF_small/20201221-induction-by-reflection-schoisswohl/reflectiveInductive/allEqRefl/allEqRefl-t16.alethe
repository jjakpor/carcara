(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst16.0 (not (=> (and (not (equal @quantifiers_skolemize_1 @quantifiers_skolemize_1 @quantifiers_skolemize_1)) (= @quantifiers_skolemize_1 (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat)) (= (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)) (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat)) (equal (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)))) false)))
(assume nst16.1 (not (not false)))
(step st16 (cl (=> (and (not (equal @quantifiers_skolemize_1 @quantifiers_skolemize_1 @quantifiers_skolemize_1)) (= @quantifiers_skolemize_1 (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat)) (= (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)) (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat)) (equal (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)))) false) (not false)) :rule implies_neg2)
(step t.end (cl) :rule resolution :premises (nst16.0 nst16.1 st16))
