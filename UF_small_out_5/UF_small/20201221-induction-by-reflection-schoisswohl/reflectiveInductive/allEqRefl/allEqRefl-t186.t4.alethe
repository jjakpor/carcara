(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nt186.0 (not (= (forall ((phi form)) (=> (and (=> true (models (push_nat empty v0_nat zero) phi)) (forall ((x0 nat)) (=> (models (push_nat empty v0_nat x0) phi) (models (push_nat empty v0_nat (s x0)) phi)))) (forall ((x nat)) (models (push_nat empty v0_nat x) phi)))) (forall ((phi form)) (=> (and (models (push_nat empty v0_nat zero) phi) (forall ((x0 nat)) (or (not (models (push_nat empty v0_nat x0) phi)) (models (push_nat empty v0_nat (s x0)) phi)))) (forall ((x nat)) (models (push_nat empty v0_nat x) phi)))))))
(anchor :step t186 :args ((phi form) (:= (phi form) phi)))
(step t186.t2 (cl (= (and (=> true (models (push_nat empty v0_nat zero) phi)) (forall ((x0 nat)) (=> (models (push_nat empty v0_nat x0) phi) (models (push_nat empty v0_nat (s x0)) phi)))) (and (models (push_nat empty v0_nat zero) phi) (forall ((x0 nat)) (or (not (models (push_nat empty v0_nat x0) phi)) (models (push_nat empty v0_nat (s x0)) phi)))))) :rule trust)
(step t186.t3 (cl (= (forall ((x nat)) (models (push_nat empty v0_nat x) phi)) (forall ((x nat)) (models (push_nat empty v0_nat x) phi)))) :rule trust)
(step st186.t4 (cl (= (=> (and (=> true (models (push_nat empty v0_nat zero) phi)) (forall ((x0 nat)) (=> (models (push_nat empty v0_nat x0) phi) (models (push_nat empty v0_nat (s x0)) phi)))) (forall ((x nat)) (models (push_nat empty v0_nat x) phi))) (=> (and (models (push_nat empty v0_nat zero) phi) (forall ((x0 nat)) (or (not (models (push_nat empty v0_nat x0) phi)) (models (push_nat empty v0_nat (s x0)) phi)))) (forall ((x nat)) (models (push_nat empty v0_nat x) phi))))) :rule cong :premises (t186.t2 t186.t3))
(step t186.t4 (cl (= (=> (and (=> true (models (push_nat empty v0_nat zero) phi)) (forall ((x0 nat)) (=> (models (push_nat empty v0_nat x0) phi) (models (push_nat empty v0_nat (s x0)) phi)))) (forall ((x nat)) (models (push_nat empty v0_nat x) phi))) (=> (and (models (push_nat empty v0_nat zero) phi) (forall ((x0 nat)) (or (not (models (push_nat empty v0_nat x0) phi)) (models (push_nat empty v0_nat (s x0)) phi)))) (forall ((x nat)) (models (push_nat empty v0_nat x) phi))))) :rule trust)
(step t186 (cl (= (forall ((phi form)) (=> (and (=> true (models (push_nat empty v0_nat zero) phi)) (forall ((x0 nat)) (=> (models (push_nat empty v0_nat x0) phi) (models (push_nat empty v0_nat (s x0)) phi)))) (forall ((x nat)) (models (push_nat empty v0_nat x) phi)))) (forall ((phi form)) (=> (and (models (push_nat empty v0_nat zero) phi) (forall ((x0 nat)) (or (not (models (push_nat empty v0_nat x0) phi)) (models (push_nat empty v0_nat (s x0)) phi)))) (forall ((x nat)) (models (push_nat empty v0_nat x) phi)))))) :rule bind)
(step t.end (cl) :rule resolution :premises (nt186.0 t186))
