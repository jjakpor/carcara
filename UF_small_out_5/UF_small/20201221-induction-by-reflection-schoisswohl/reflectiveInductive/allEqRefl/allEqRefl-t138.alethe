(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst138.0 (not (not (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v))))))
(assume nst138.1 (not (= (s @quantifiers_skolemize_7) (evalV_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) v0_nat))))
(assume t137 (or (not (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))) (= (s @quantifiers_skolemize_7) (evalV_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) v0_nat))))
(step st138 (cl (not (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))) (= (s @quantifiers_skolemize_7) (evalV_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) v0_nat))) :rule or :premises (t137))
(step t.end (cl) :rule resolution :premises (nst138.0 nst138.1 st138))
