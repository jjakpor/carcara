(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst162.0 (not (not (= (forall ((x nat) (y nat)) (=> (leq x y) (leq x (s y)))) (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y))))))))
(assume nst162.1 (not (not (forall ((x nat) (y nat)) (=> (leq x y) (leq x (s y)))))))
(assume nst162.2 (not (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y))))))
(step st162 (cl (not (= (forall ((x nat) (y nat)) (=> (leq x y) (leq x (s y)))) (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y)))))) (not (forall ((x nat) (y nat)) (=> (leq x y) (leq x (s y))))) (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y))))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nst162.0 nst162.1 nst162.2 st162))
