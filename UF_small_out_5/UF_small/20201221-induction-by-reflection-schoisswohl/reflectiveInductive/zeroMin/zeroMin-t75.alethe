(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst75.0 (not (= (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))) true)))
(assume t68 (= (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))) (leq zero zero)))
(assume t74 (= (leq zero zero) true))
(step st75 (cl (= (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))) true)) :rule trans :premises (t68 t74))
(step t.end (cl) :rule resolution :premises (nst75.0 st75))
