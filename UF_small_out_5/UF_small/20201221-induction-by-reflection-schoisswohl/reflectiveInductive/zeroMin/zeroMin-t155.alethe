(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst155.0 (not (or (not (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))) (= @quantifiers_skolemize_15 (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_15) v0_nat)))))
(step st155 (cl (or (not (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))) (= @quantifiers_skolemize_15 (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_15) v0_nat)))) :rule forall_inst :args (empty v0_nat @quantifiers_skolemize_15))
(step t.end (cl) :rule resolution :premises (nst155.0 st155))
