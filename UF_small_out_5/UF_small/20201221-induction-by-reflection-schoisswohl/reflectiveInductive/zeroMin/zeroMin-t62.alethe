(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst62.0 (not (not (= (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x)) (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))))))
(assume nst62.1 (not (not (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x)))))
(assume nst62.2 (not (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))))
(step st62 (cl (not (= (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x)) (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v))))) (not (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x))) (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nst62.0 nst62.1 nst62.2 st62))
