(assume nst9.0 (not (fun_app$f (rbt_greater$ less$ k$) t2$)))
(assume nst9.1 (not (not (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$)))))
(assume t8 (or (not (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$))) (fun_app$f (rbt_greater$ less$ k$) t2$)))
(step t8' (cl (not (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$))) (fun_app$f (rbt_greater$ less$ k$) t2$)) :rule or :premises (t8))
(step st9 (cl (fun_app$f (rbt_greater$ less$ k$) t2$) (not (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$)))) :rule reordering :premises (t8'))
(step t.end (cl) :rule resolution :premises (nst9.0 nst9.1 st9))
