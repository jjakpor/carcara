(define-fun @quantifiers_skolemize_10 () A_list$ (choice ((?v3 A_list$)) (not (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3)))))))
(assume nst4.0 (not (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10))))))
(assume nst4.1 (not (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10))))))
(assume t2 (or (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))))
(assume t3 (or (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))) (not (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10))))))
(step t2' (cl (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))) :rule or :premises (t2))
(step t3' (cl (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))) (not (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10))))) :rule or :premises (t3))
(step st4 (cl (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)))) (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (not (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10))))) :rule resolution :premises (t2' t3'))
(step t.end (cl) :rule resolution :premises (nst4.0 nst4.1 st4))
