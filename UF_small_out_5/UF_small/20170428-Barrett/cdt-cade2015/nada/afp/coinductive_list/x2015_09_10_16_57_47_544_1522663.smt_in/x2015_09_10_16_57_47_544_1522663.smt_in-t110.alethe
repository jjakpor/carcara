(assume nst110.0 (not (=> (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))) (= (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$)))))))
(assume nst110.1 (not (not (= (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$)))))))
(step st110 (cl (=> (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))) (= (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$))))) (not (= (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$)))))) :rule implies_neg2)
(step t.end (cl) :rule resolution :premises (nst110.0 nst110.1 st110))
