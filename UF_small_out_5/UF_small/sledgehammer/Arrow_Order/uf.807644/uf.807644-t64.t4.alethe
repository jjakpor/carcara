(define-fun @quantifiers_skolemize_21 () S2 (choice ((?v4 S2)) (not (or (not (= (f112 (f113 f114 f111) (f115 (f116 f117 (f267 (f268 f269 (f285 f286 f98)) f89)) f91)) (f154 (f155 f156 ?v4) (f285 f286 f98)))) (= (f3 (f40 f41 f11) ?v4) (f3 f88 ?v4))))))
(assume nt64.0 (not (not (= (f112 (f113 f114 f111) (f115 (f116 f117 (f267 (f268 f269 (f285 f286 f98)) f89)) f91)) (f107 (f108 f109 (f110 f111 f88)) (f78 f91 f88))))))
(assume nt64.1 (not (not (= f90 (f78 f91 f88)))))
(assume nt64.2 (not (= (f107 (f108 f109 (f110 f111 f88)) f90) (f112 (f113 f114 f111) (f115 (f116 f117 (f267 (f268 f269 (f285 f286 f98)) f89)) f91)))))
(anchor :step t64)
(assume t64.a0 (= (f112 (f113 f114 f111) (f115 (f116 f117 (f267 (f268 f269 (f285 f286 f98)) f89)) f91)) (f107 (f108 f109 (f110 f111 f88)) (f78 f91 f88))))
(assume t64.a1 (= f90 (f78 f91 f88)))
(anchor :step t64.t4 :args ((?v0 S3) (:= (?v0 S3) ?v0)))
(step t64.t4.t0 (cl (= (= (f78 f91 ?v0) f90) (= f90 (f78 f91 ?v0)))) :rule trust)
(step t64.t4 (cl (= (forall ((?v0 S3)) (= (f78 f91 ?v0) f90)) (forall ((?v0 S3)) (= f90 (f78 f91 ?v0))))) :rule bind)
(step t64.t9 (cl (= (f107 (f108 f109 (f110 f111 f88)) f90) (f112 (f113 f114 f111) (f115 (f116 f117 (f267 (f268 f269 (f285 f286 f98)) f89)) f91)))) :rule trust)
(step t64 (cl (not (= (f112 (f113 f114 f111) (f115 (f116 f117 (f267 (f268 f269 (f285 f286 f98)) f89)) f91)) (f107 (f108 f109 (f110 f111 f88)) (f78 f91 f88)))) (not (= f90 (f78 f91 f88))) (= (f107 (f108 f109 (f110 f111 f88)) f90) (f112 (f113 f114 f111) (f115 (f116 f117 (f267 (f268 f269 (f285 f286 f98)) f89)) f91)))) :rule subproof :discharge (t64.a0 t64.a1))
(step t.end (cl) :rule resolution :premises (nt64.0 nt64.1 nt64.2 t64))
