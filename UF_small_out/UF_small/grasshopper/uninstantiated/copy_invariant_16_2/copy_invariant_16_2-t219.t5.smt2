(set-logic UF)
(declare-sort Loc 0)
(declare-sort SetLoc 0)
(declare-sort FldBool 0)
(declare-sort FldLoc 0)
(declare-fun null$0 () Loc)
(declare-fun read$0 (FldLoc Loc) Loc)
(declare-fun ep$0 (FldLoc SetLoc Loc) Loc)
(declare-fun emptyset$0 () SetLoc)
(declare-fun setenum$0 (Loc) SetLoc)
(declare-fun union$0 (SetLoc SetLoc) SetLoc)
(declare-fun intersection$0 (SetLoc SetLoc) SetLoc)
(declare-fun setminus$0 (SetLoc SetLoc) SetLoc)
(declare-fun Btwn$0 (FldLoc Loc Loc Loc) Bool)
(declare-fun in$0 (Loc SetLoc) Bool)
(declare-fun Alloc$0 () SetLoc)
(declare-fun FP$0 () SetLoc)
(declare-fun FP_Caller$0 () SetLoc)
(declare-fun FP_Caller_1$0 () SetLoc)
(declare-fun cp_2$0 () Loc)
(declare-fun curr_2$0 () Loc)
(declare-fun lseg_domain$0 (FldLoc Loc Loc) SetLoc)
(declare-fun lseg_struct$0 (SetLoc FldLoc Loc Loc) Bool)
(declare-fun lst$0 () Loc)
(declare-fun next$0 () FldLoc)
(declare-fun sk_?X$0 () SetLoc)
(declare-fun sk_?X_1$0 () SetLoc)
(declare-fun sk_?X_2$0 () SetLoc)
(declare-fun sk_?X_3$0 () SetLoc)
(declare-fun sk_?X_4$0 () SetLoc)
(declare-fun sk_?X_5$0 () SetLoc)
(declare-fun sk_?e$0 () Loc)
(declare-fun sk_FP$0 () SetLoc)
(assert (not (= (forall ((BOUND_VARIABLE_719 Loc)) (or (Btwn$0 next$0 lst$0 BOUND_VARIABLE_719 curr_2$0) (and (or (= curr_2$0 BOUND_VARIABLE_719) (not (Btwn$0 next$0 lst$0 BOUND_VARIABLE_719 curr_2$0))) (not (in$0 BOUND_VARIABLE_719 (lseg_domain$0 next$0 lst$0 curr_2$0)))))) (forall ((BOUND_VARIABLE_719 Loc)) (or (Btwn$0 next$0 lst$0 BOUND_VARIABLE_719 lst$0) (and (or (= lst$0 BOUND_VARIABLE_719) (not (Btwn$0 next$0 lst$0 BOUND_VARIABLE_719 lst$0))) (not (in$0 BOUND_VARIABLE_719 (lseg_domain$0 next$0 lst$0 lst$0)))))))))
(assert (= (lseg_domain$0 next$0 lst$0 curr_2$0) (lseg_domain$0 next$0 lst$0 lst$0)))
(check-sat)
(exit)
