(assume nt48.t12.0 (not (= (forall ((?v0 S51)) (or (not (= f1 (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0))) (not (= f1 (f75 f65 ?v0 f76))))) (forall ((?v0 S51)) (or (not (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0))) (not (= (f64 f65 f66 f67 f72 f78) (f75 f65 ?v0 f76))))))))
(anchor :step t48.t12)
(assume t48.a0 (forall ((?v0 S51)) (or (not (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0) (f64 f65 f66 f67 f72 f78))) (not (= (f75 f65 ?v0 f76) (f64 f65 f66 f67 f72 f78))))))
(step t48.t17 (cl (or (not (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76) (f64 f65 f66 f67 f72 f78))) (not (= (f75 f65 f76 f76) (f64 f65 f66 f67 f72 f78))))) :rule trust)
(step t48 (cl (not (forall ((?v0 S51)) (or (not (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0) (f64 f65 f66 f67 f72 f78))) (not (= (f75 f65 ?v0 f76) (f64 f65 f66 f67 f72 f78)))))) (or (not (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76) (f64 f65 f66 f67 f72 f78))) (not (= (f75 f65 f76 f76) (f64 f65 f66 f67 f72 f78))))) :rule subproof :discharge (t48.a0))
(anchor :step t48.t12 :args ((?v0 S51) (:= (?v0 S51) ?v0)))
(step st48.t12.t3 (cl (= f66 f66)) :rule refl)
(step t48.t12.t16 (cl (= (or (not (= f1 (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0))) (not (= f1 (f75 f65 ?v0 f76)))) (or (not (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0))) (not (= (f64 f65 f66 f67 f72 f78) (f75 f65 ?v0 f76)))))) :rule trust)
(step t48.t12 (cl (= (forall ((?v0 S51)) (or (not (= f1 (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0))) (not (= f1 (f75 f65 ?v0 f76))))) (forall ((?v0 S51)) (or (not (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) ?v0))) (not (= (f64 f65 f66 f67 f72 f78) (f75 f65 ?v0 f76))))))) :rule bind)
(step t.end (cl) :rule resolution :premises (nt48.t12.0 t48.t12))
