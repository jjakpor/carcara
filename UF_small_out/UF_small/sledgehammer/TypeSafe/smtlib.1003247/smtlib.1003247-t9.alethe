(assume nst9.0 (not (= (or (not (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 f72 f78))) (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76) (f64 f65 f66 f67 f72 f78))) (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76)))))
(assume t7 (= (or (not (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 f72 f78))) (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76) (f64 f65 f66 f67 f72 f78))) (or false (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76)))))
(assume t8 (= (or false (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76))) (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76))))
(step st9 (cl (= (or (not (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 f72 f78))) (= (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76) (f64 f65 f66 f67 f72 f78))) (= (f64 f65 f66 f67 f72 f78) (f64 f65 f66 f67 (f68 (f69 (f70 f71 f72) f73) f74) f76)))) :rule trans :premises (t7 t8))
(step t.end (cl) :rule resolution :premises (nst9.0 st9))
