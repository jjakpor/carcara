(set-logic UF)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Bool_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort Natural_bool_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Natural_natural_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort Nat_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort Natural_natural_bool_fun_fun$ 0)
(declare-sort A_llist$ 0)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort Natural$ 0)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-sort Char_list$ 0)
(declare-sort Literal$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-fun none$ () Nat_option$)
(declare-fun the$ (Nat_option$) Nat$)
(declare-fun some$ (Nat$) Nat_option$)
(declare-fun rep_enat$ (Enat$) Nat_option$)
(declare-fun abs_enat$ (Nat_option$) Enat$)
(declare-fun nat_of_natural$ (Natural$) Nat$)
(declare-fun natural_of_nat$ (Nat$) Natural$)
(declare-fun nibble0$ () Nibble$)
(declare-fun nibble1$ () Nibble$)
(declare-fun nibble2$ () Nibble$)
(declare-fun nibble3$ () Nibble$)
(declare-fun nibble4$ () Nibble$)
(declare-fun nibble5$ () Nibble$)
(declare-fun nibble6$ () Nibble$)
(declare-fun nibble7$ () Nibble$)
(declare-fun nibble8$ () Nibble$)
(declare-fun nibble9$ () Nibble$)
(declare-fun nibbleA$ () Nibble$)
(declare-fun nibbleB$ () Nibble$)
(declare-fun nibbleC$ () Nibble$)
(declare-fun nibbleD$ () Nibble$)
(declare-fun nibbleE$ () Nibble$)
(declare-fun nibbleF$ () Nibble$)
(declare-fun select$ (Char$) Nibble$)
(declare-fun selecta$ (Char$) Nibble$)
(declare-fun char$ (Nibble$ Nibble$) Char$)
(declare-fun nil$ () Char_list$)
(declare-fun hd$ (Char_list$) Char$)
(declare-fun tl$ (Char_list$) Char_list$)
(declare-fun cons$ (Char$ Char_list$) Char_list$)
(declare-fun explode$ (Literal$) Char_list$)
(declare-fun str$ (Char_list$) Literal$)
(declare-fun f$ () A_a_fun$)
(declare-fun n$ () Nat$)
(declare-fun x$ () A$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun lmap$ (A_a_fun$) A_llist_a_llist_fun$)
(declare-fun plus$ (Enat$) Enat_enat_fun$)
(declare-fun size$ (Enat$) Nat$)
(declare-fun zero$ () Enat$)
(declare-fun ldrop$ (Enat$) A_llist_a_llist_fun$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun ltake$ (Enat$) A_llist_a_llist_fun$)
(declare-fun minus$ (Nat$) Nat_nat_fun$)
(declare-fun plus$a (Nat$) Nat_nat_fun$)
(declare-fun plus$b (Natural$ Natural$) Natural$)
(declare-fun size$a (Literal$) Nat$)
(declare-fun size$b (Nibble$) Nat$)
(declare-fun size$c (Char$) Nat$)
(declare-fun size$d () Bool_nat_fun$)
(declare-fun size$e (Natural$) Nat$)
(declare-fun times$ (Enat$ Enat$) Enat$)
(declare-fun zero$a () Nat$)
(declare-fun zero$b () Natural$)
(declare-fun compow$ () Nat_a_a_fun_a_a_fun_fun_fun$)
(declare-fun funpow$ () Nat_a_a_fun_a_a_fun_fun_fun$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun minus$a (Natural$) Natural_natural_fun$)
(declare-fun times$a (Natural$ Natural$) Natural$)
(declare-fun times$b (Nat$) Nat_nat_fun$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun less_eq$ (Enat$) Enat_bool_fun$)
(declare-fun llength$ () A_llist_enat_fun$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_a_fun$ A$) A$)
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$c (Nat_a_a_fun_a_a_fun_fun_fun$ Nat$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$d (Enat_enat_fun$ Enat$) Enat$)
(declare-fun fun_app$e (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$f (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$g (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$h (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$i (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$j (Bool_nat_fun$ Bool) Nat$)
(declare-fun fun_app$k (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$l (Natural_bool_fun$ Natural$) Bool)
(declare-fun fun_app$m (Natural_natural_bool_fun_fun$ Natural$) Natural_bool_fun$)
(declare-fun fun_app$n (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$o (Natural_natural_fun$ Natural$) Natural$)
(declare-fun infinity$ () Enat$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun less_eq$a (Natural$ Natural$) Bool)
(declare-fun less_eq$b (Nat$) Nat_bool_fun$)
(declare-fun rec_bool$ (Nat$ Nat$) Bool_nat_fun$)
(declare-fun the_enat$ (Enat$) Nat$)
(declare-fun size_bool$ () Bool_nat_fun$)
(declare-fun size_char$ (Char$) Nat$)
(declare-fun size_enat$ (Enat$) Nat$)
(declare-fun gen_llength$ (Nat$) A_llist_enat_fun$)
(declare-fun size_natural$ (Natural$) Nat$)
(assert (not (not (= (fun_app$ (ldrop$ (enat$ n$)) (iterates$ f$ x$)) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c funpow$ n$) f$) x$))))))
(assert (not (= (fun_app$ (ldrop$ (enat$ n$)) (iterates$ f$ x$)) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c compow$ n$) f$) x$)))))
(assert (or (not (= (not (= (fun_app$ (ldrop$ (enat$ n$)) (iterates$ f$ x$)) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c compow$ n$) f$) x$)))) (not (= (fun_app$ (ldrop$ (enat$ n$)) (iterates$ f$ x$)) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c funpow$ n$) f$) x$)))))) (not (not (= (fun_app$ (ldrop$ (enat$ n$)) (iterates$ f$ x$)) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c compow$ n$) f$) x$))))) (not (= (fun_app$ (ldrop$ (enat$ n$)) (iterates$ f$ x$)) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c funpow$ n$) f$) x$))))))
(assert (= (not (= (fun_app$ (ldrop$ (enat$ n$)) (iterates$ f$ x$)) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c compow$ n$) f$) x$)))) (not (= (fun_app$ (ldrop$ (enat$ n$)) (iterates$ f$ x$)) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c funpow$ n$) f$) x$))))))
(check-sat)
(exit)
