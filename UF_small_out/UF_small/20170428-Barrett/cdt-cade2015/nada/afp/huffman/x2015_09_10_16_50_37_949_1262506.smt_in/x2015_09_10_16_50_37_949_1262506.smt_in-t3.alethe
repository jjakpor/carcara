(assume nst3.0 (not (not (consistent$ t$))))
(assume nst3.1 (not (not (member$ d$ (alphabet$ t$)))))
(assume nst3.2 (not (not (member$ a$ (alphabet$ t$)))))
(assume nst3.3 (not (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$)))))
(assume nst3.4 (not (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$)))))
(assume nst3.5 (not (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$))))
(assume nst3.6 (not (not (or (not (consistent$ t$)) (not (member$ a$ (alphabet$ t$))) (not (member$ d$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$))))))
(assume t2 (or (not (or (not (consistent$ t$)) (not (member$ a$ (alphabet$ t$))) (not (member$ d$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$)))) (not (consistent$ t$)) (not (member$ a$ (alphabet$ t$))) (not (member$ d$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$))))
(step t2' (cl (not (or (not (consistent$ t$)) (not (member$ a$ (alphabet$ t$))) (not (member$ d$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$)))) (not (consistent$ t$)) (not (member$ a$ (alphabet$ t$))) (not (member$ d$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$))) :rule or :premises (t2))
(step st3 (cl (not (consistent$ t$)) (not (member$ d$ (alphabet$ t$))) (not (member$ a$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$)) (not (or (not (consistent$ t$)) (not (member$ a$ (alphabet$ t$))) (not (member$ d$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$))))) :rule reordering :premises (t2'))
(step t.end (cl) :rule resolution :premises (nst3.0 nst3.1 nst3.2 nst3.3 nst3.4 nst3.5 nst3.6 st3))
