(assume nt11.t6.0 (not (= (forall ((?v3 A$)) (=> (and (member$ ?v3 (alphabet$ ?v0)) (and (not (= ?v3 ?v1)) (not (= ?v3 ?v2)))) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3))))) (forall ((?v3 A$)) (=> (and (member$ ?v3 (alphabet$ ?v0)) (not (= ?v1 ?v3)) (not (= ?v2 ?v3))) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3))))))))
(anchor :step t11.t6 :args ((?v0 A_tree$) (?v1 A$) (?v2 A$) (:= (?v0 A_tree$) ?v0) (:= (?v1 A$) ?v1) (:= (?v2 A$) ?v2)))
(step t11.t11 (cl (= (= (fun_app$ (fun_app$c (minima$ ?v0) ?v1) ?v2) (and (member$ ?v1 (alphabet$ ?v0)) (and (member$ ?v2 (alphabet$ ?v0)) (and (not (= ?v1 ?v2)) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (forall ((?v3 A$)) (=> (and (member$ ?v3 (alphabet$ ?v0)) (and (not (= ?v3 ?v1)) (not (= ?v3 ?v2)))) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3)))))))))) (= (fun_app$ (fun_app$c (minima$ ?v0) ?v1) ?v2) (and (member$ ?v1 (alphabet$ ?v0)) (member$ ?v2 (alphabet$ ?v0)) (not (= ?v1 ?v2)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (forall ((?v3 A$)) (or (not (member$ ?v3 (alphabet$ ?v0))) (= ?v1 ?v3) (= ?v2 ?v3) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3))))))))) :rule trust)
(step t11 (cl (= (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (= (fun_app$ (fun_app$c (minima$ ?v0) ?v1) ?v2) (and (member$ ?v1 (alphabet$ ?v0)) (and (member$ ?v2 (alphabet$ ?v0)) (and (not (= ?v1 ?v2)) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (forall ((?v3 A$)) (=> (and (member$ ?v3 (alphabet$ ?v0)) (and (not (= ?v3 ?v1)) (not (= ?v3 ?v2)))) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3))))))))))) (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (= (fun_app$ (fun_app$c (minima$ ?v0) ?v1) ?v2) (and (member$ ?v1 (alphabet$ ?v0)) (member$ ?v2 (alphabet$ ?v0)) (not (= ?v1 ?v2)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (forall ((?v3 A$)) (or (not (member$ ?v3 (alphabet$ ?v0))) (= ?v1 ?v3) (= ?v2 ?v3) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3)))))))))) :rule bind)
(anchor :step t11.t6 :args ((?v3 A$) (:= (?v3 A$) ?v3)))
(step st11.t6.t2 (cl (= (= ?v3 ?v1) (= ?v1 ?v3))) :rule hole)
(step t11.t6.t9 (cl (= (=> (and (member$ ?v3 (alphabet$ ?v0)) (and (not (= ?v3 ?v1)) (not (= ?v3 ?v2)))) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3)))) (=> (and (member$ ?v3 (alphabet$ ?v0)) (not (= ?v1 ?v3)) (not (= ?v2 ?v3))) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3)))))) :rule trust)
(step t11.t6 (cl (= (forall ((?v3 A$)) (=> (and (member$ ?v3 (alphabet$ ?v0)) (and (not (= ?v3 ?v1)) (not (= ?v3 ?v2)))) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3))))) (forall ((?v3 A$)) (=> (and (member$ ?v3 (alphabet$ ?v0)) (not (= ?v1 ?v3)) (not (= ?v2 ?v3))) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v0) ?v3))))))) :rule bind)
(step t.end (cl) :rule resolution :premises (nt11.t6.0 t11.t6))
