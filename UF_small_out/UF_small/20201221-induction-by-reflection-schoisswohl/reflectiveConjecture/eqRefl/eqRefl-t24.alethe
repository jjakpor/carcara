(define-fun @quantifiers_skolemize_3 () alpha (choice ((x alpha)) (not (models (push_alpha empty v0_alpha x) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha))))))
(assume nst24.0 (not (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha)))))))
(assume a14 (not (models empty (forallR_alpha v0_alpha (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha))))))
(assume t20 (or (models empty (forallR_alpha v0_alpha (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha)))) (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha))))) (not (= (models empty (forallR_alpha v0_alpha (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha)))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha))))))))
(assume t23 (= (models empty (forallR_alpha v0_alpha (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha)))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha))))))
(step t20' (cl (models empty (forallR_alpha v0_alpha (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha)))) (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha))))) (not (= (models empty (forallR_alpha v0_alpha (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha)))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha))))))) :rule or :premises (t20))
(step st24 (cl (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha)))))) :rule resolution :premises (t20' a14 t23))
(step t.end (cl) :rule resolution :premises (nst24.0 st24))
