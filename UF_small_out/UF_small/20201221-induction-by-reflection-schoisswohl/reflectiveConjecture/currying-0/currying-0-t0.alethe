(assume nst0.0 (not (not (= (or (not (= (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (models empty (orR (notR (pR aR)) (notR (qR bR))))))) (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (not (models empty (orR (notR (pR aR)) (notR (qR bR))))))) (or (not (= (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (models empty (orR (notR (pR aR)) (notR (qR bR))))))) (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (models empty (orR (notR (pR aR)) (notR (qR bR)))))))))
(assume nst0.1 (not (not (or (not (= (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (models empty (orR (notR (pR aR)) (notR (qR bR))))))) (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (not (models empty (orR (notR (pR aR)) (notR (qR bR))))))))))
(assume nst0.2 (not (or (not (= (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (models empty (orR (notR (pR aR)) (notR (qR bR))))))) (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (models empty (orR (notR (pR aR)) (notR (qR bR)))))))
(step st0 (cl (not (= (or (not (= (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (models empty (orR (notR (pR aR)) (notR (qR bR))))))) (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (not (models empty (orR (notR (pR aR)) (notR (qR bR))))))) (or (not (= (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (models empty (orR (notR (pR aR)) (notR (qR bR))))))) (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (models empty (orR (notR (pR aR)) (notR (qR bR))))))) (not (or (not (= (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (models empty (orR (notR (pR aR)) (notR (qR bR))))))) (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (not (models empty (orR (notR (pR aR)) (notR (qR bR)))))))) (or (not (= (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (not (models empty (orR (notR (pR aR)) (notR (qR bR))))))) (models empty (notR (orR (notR (pR aR)) (notR (qR bR))))) (models empty (orR (notR (pR aR)) (notR (qR bR)))))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nst0.0 nst0.1 nst0.2 st0))
