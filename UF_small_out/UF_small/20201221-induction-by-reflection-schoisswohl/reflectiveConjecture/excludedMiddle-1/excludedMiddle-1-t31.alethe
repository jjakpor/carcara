(define-fun @quantifiers_skolemize_3 () alpha (choice ((x alpha)) (not (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(assume nst31.0 (not (= (models empty (forallR_alpha v0_alpha (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))))
(assume a13 (forall ((env env) (phi form) (v var_alpha)) (= (models env (forallR_alpha v phi)) (forall ((x alpha)) (models (push_alpha env v x) phi)))))
(assume t30 (or (not (forall ((env env) (phi form) (v var_alpha)) (= (models env (forallR_alpha v phi)) (forall ((x alpha)) (models (push_alpha env v x) phi))))) (= (models empty (forallR_alpha v0_alpha (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))))
(step t30' (cl (not (forall ((env env) (phi form) (v var_alpha)) (= (models env (forallR_alpha v phi)) (forall ((x alpha)) (models (push_alpha env v x) phi))))) (= (models empty (forallR_alpha v0_alpha (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))) :rule or :premises (t30))
(step st31 (cl (= (models empty (forallR_alpha v0_alpha (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))) :rule resolution :premises (t30' a13))
(step t.end (cl) :rule resolution :premises (nst31.0 st31))
