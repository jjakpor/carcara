(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst132.0 (not (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v)))))))
(assume nst132.1 (not (= (evalV_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) v0_nat) (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) (inj_nat v0_nat)))))
(assume t131 (or (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) (= (evalV_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) v0_nat) (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) (inj_nat v0_nat)))))
(step st132 (cl (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) (= (evalV_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) v0_nat) (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) (inj_nat v0_nat)))) :rule or :premises (t131))
(step t.end (cl) :rule resolution :premises (nst132.0 nst132.1 st132))
