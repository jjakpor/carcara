(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst64.0 (not (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)))))
(assume t52 (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v)))))
(assume t63 (or (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)))))
(step t63' (cl (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)))) :rule or :premises (t63))
(step st64 (cl (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)))) :rule resolution :premises (t63' t52))
(step t.end (cl) :rule resolution :premises (nst64.0 st64))
