(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nt43.t3.0 (not (= (forall ((env env) (v var_nat)) (= (eval_nat env (inj_nat v)) (evalV_nat env v))) (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v)))))))
(anchor :step t43.t3)
(assume t43.a0 (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v)))))
(step t43.t5 (cl (= (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)))) :rule trust)
(step t43 (cl (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) (= (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)))) :rule subproof :discharge (t43.a0))
(anchor :step t43.t3 :args ((env env) (v var_nat) (:= (env env) env) (:= (v var_nat) v)))
(step st43.t3.t0 (cl (= (= (eval_nat env (inj_nat v)) (evalV_nat env v)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) :rule hole)
(step t43.t3.t0 (cl (= (= (eval_nat env (inj_nat v)) (evalV_nat env v)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) :rule trust)
(step t43.t3 (cl (= (forall ((env env) (v var_nat)) (= (eval_nat env (inj_nat v)) (evalV_nat env v))) (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v)))))) :rule bind)
(step t.end (cl) :rule resolution :premises (nt43.t3.0 t43.t3))
