(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst70.0 (not (= (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)) zero)))
(assume t65 (= (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)) (evalV_nat (push_nat empty v0_nat zero) v0_nat)))
(assume t69 (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) zero))
(step st70 (cl (= (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)) zero)) :rule trans :premises (t65 t69))
(step t.end (cl) :rule resolution :premises (nst70.0 st70))
