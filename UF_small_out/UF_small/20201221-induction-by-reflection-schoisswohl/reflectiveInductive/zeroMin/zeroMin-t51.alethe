(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst51.0 (not (not (= (forall ((env env)) (= (eval_nat env zeroR) zero)) (forall ((env env)) (= zero (eval_nat env zeroR)))))))
(assume nst51.1 (not (not (forall ((env env)) (= (eval_nat env zeroR) zero)))))
(assume nst51.2 (not (forall ((env env)) (= zero (eval_nat env zeroR)))))
(step st51 (cl (not (= (forall ((env env)) (= (eval_nat env zeroR) zero)) (forall ((env env)) (= zero (eval_nat env zeroR))))) (not (forall ((env env)) (= (eval_nat env zeroR) zero))) (forall ((env env)) (= zero (eval_nat env zeroR)))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nst51.0 nst51.1 nst51.2 st51))
