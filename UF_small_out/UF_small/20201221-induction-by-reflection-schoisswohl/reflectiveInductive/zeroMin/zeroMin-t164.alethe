(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst164.0 (not (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y))))))
(assume a1 (forall ((x nat) (y nat)) (=> (leq x y) (leq x (s y)))))
(assume t162 (or (not (= (forall ((x nat) (y nat)) (=> (leq x y) (leq x (s y)))) (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y)))))) (not (forall ((x nat) (y nat)) (=> (leq x y) (leq x (s y))))) (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y))))))
(assume t163 (= (forall ((x nat) (y nat)) (=> (leq x y) (leq x (s y)))) (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y))))))
(step t162' (cl (not (= (forall ((x nat) (y nat)) (=> (leq x y) (leq x (s y)))) (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y)))))) (not (forall ((x nat) (y nat)) (=> (leq x y) (leq x (s y))))) (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y))))) :rule or :premises (t162))
(step st164 (cl (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y))))) :rule resolution :premises (t162' t163 a1))
(step t.end (cl) :rule resolution :premises (nst164.0 st164))
