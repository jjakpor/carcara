(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst160.0 (not (or (not (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y))))) (or (not (leq (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_15) zeroR) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_15) (inj_nat v0_nat)))) (leq (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_15) zeroR) (s (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_15) (inj_nat v0_nat))))))))
(step st160 (cl (or (not (forall ((x nat) (y nat)) (or (not (leq x y)) (leq x (s y))))) (or (not (leq (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_15) zeroR) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_15) (inj_nat v0_nat)))) (leq (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_15) zeroR) (s (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_15) (inj_nat v0_nat))))))) :rule forall_inst :args ((eval_nat (push_nat empty v0_nat @quantifiers_skolemize_15) zeroR) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_15) (inj_nat v0_nat))))
(step t.end (cl) :rule resolution :premises (nst160.0 st160))
