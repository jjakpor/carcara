(set-logic UF)
(declare-sort Set 0)
(declare-sort Elem 0)
(declare-fun member (Elem Set) Bool)
(declare-fun subset (Set Set) Bool)
(declare-fun seteq (Set Set) Bool)
(declare-fun union (Set Set) Set)
(declare-fun intersection (Set Set) Set)
(declare-fun difference (Set Set) Set)
(declare-fun a () Set)
(declare-fun b () Set)
(declare-fun c () Set)
(assert (not (not (and (subset (intersection a (intersection b c)) (intersection (intersection a b) c)) (subset (intersection (intersection a b) c) (intersection a (intersection b c)))))))
(assert (not (seteq (intersection a (intersection b c)) (intersection (intersection a b) c))))
(assert (or (seteq (intersection a (intersection b c)) (intersection (intersection a b) c)) (not (and (subset (intersection a (intersection b c)) (intersection (intersection a b) c)) (subset (intersection (intersection a b) c) (intersection a (intersection b c))))) (not (= (seteq (intersection a (intersection b c)) (intersection (intersection a b) c)) (and (subset (intersection a (intersection b c)) (intersection (intersection a b) c)) (subset (intersection (intersection a b) c) (intersection a (intersection b c))))))))
(assert (= (seteq (intersection a (intersection b c)) (intersection (intersection a b) c)) (and (subset (intersection a (intersection b c)) (intersection (intersection a b) c)) (subset (intersection (intersection a b) c) (intersection a (intersection b c))))))
(check-sat)
(exit)
