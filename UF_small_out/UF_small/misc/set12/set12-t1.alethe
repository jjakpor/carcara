(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (intersection b c)))) (member ?x (intersection (intersection a b) c))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))))
(assume nst1.0 (not (member @quantifiers_skolemize_4 (intersection b c))))
(assume nst1.1 (not (not (and (member @quantifiers_skolemize_4 b) (member @quantifiers_skolemize_4 c)))))
(assume nst1.2 (not (not (= (member @quantifiers_skolemize_4 (intersection b c)) (and (member @quantifiers_skolemize_4 b) (member @quantifiers_skolemize_4 c))))))
(assume t0 (or (not (= (member @quantifiers_skolemize_4 (intersection b c)) (and (member @quantifiers_skolemize_4 b) (member @quantifiers_skolemize_4 c)))) (member @quantifiers_skolemize_4 (intersection b c)) (not (and (member @quantifiers_skolemize_4 b) (member @quantifiers_skolemize_4 c)))))
(step t0' (cl (not (= (member @quantifiers_skolemize_4 (intersection b c)) (and (member @quantifiers_skolemize_4 b) (member @quantifiers_skolemize_4 c)))) (member @quantifiers_skolemize_4 (intersection b c)) (not (and (member @quantifiers_skolemize_4 b) (member @quantifiers_skolemize_4 c)))) :rule or :premises (t0))
(step st1 (cl (member @quantifiers_skolemize_4 (intersection b c)) (not (and (member @quantifiers_skolemize_4 b) (member @quantifiers_skolemize_4 c))) (not (= (member @quantifiers_skolemize_4 (intersection b c)) (and (member @quantifiers_skolemize_4 b) (member @quantifiers_skolemize_4 c))))) :rule reordering :premises (t0'))
(step t.end (cl) :rule resolution :premises (nst1.0 nst1.1 nst1.2 st1))
