(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (intersection b c)))) (member ?x (intersection (intersection a b) c))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))))
(assume nst41.0 (not (subset (intersection (intersection a b) c) (intersection a (intersection b c)))))
(assume nst41.1 (not (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c))))))))
(assume nst41.2 (not (not (or (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c))))))))))
(assume t40 (or (not (or (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))))) (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c))))))))
(step t40' (cl (not (or (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))))) (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c))))))) :rule or :premises (t40))
(step st41 (cl (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))) (not (or (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c))))))))) :rule reordering :premises (t40'))
(step t.end (cl) :rule resolution :premises (nst41.0 nst41.1 nst41.2 st41))
