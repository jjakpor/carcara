(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (intersection b c)))) (member ?x (intersection (intersection a b) c))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))))
(assume nst115.0 (not (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))))))
(assume nst115.1 (not (or (subset (intersection a (intersection b c)) (intersection (intersection a b) c)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (intersection b c)))) (member ?x (intersection (intersection a b) c))))))))
(assume t114 (or (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (intersection a (intersection b c)) (intersection (intersection a b) c)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (intersection b c)))) (member ?x (intersection (intersection a b) c))))))))
(step st115 (cl (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (intersection a (intersection b c)) (intersection (intersection a b) c)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (intersection b c)))) (member ?x (intersection (intersection a b) c))))))) :rule or :premises (t114))
(step t.end (cl) :rule resolution :premises (nst115.0 nst115.1 st115))
