(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union a b))) (member ?x c)))))
(assume nt1.0 (not (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2))))))
(assume nt1.1 (not (or (not (member @quantifiers_skolemize_3 a)) (not (subset a c)) (member @quantifiers_skolemize_3 c))))
(anchor :step t1)
(assume t1.a0 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2))))
(step st1.t2 (cl (not (= (forall ((?x Elem) (?s1 Set) (?s2 Set)) (=> (and (member ?x ?s1) (subset ?s1 ?s2)) (member ?x ?s2))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2))))) (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (=> (and (member ?x ?s1) (subset ?s1 ?s2)) (member ?x ?s2)))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2)))) :rule equiv_pos2)
(step t1.t5 (cl (or (not (member @quantifiers_skolemize_3 a)) (not (subset a c)) (member @quantifiers_skolemize_3 c))) :rule trust)
(step t1 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2)))) (or (not (member @quantifiers_skolemize_3 a)) (not (subset a c)) (member @quantifiers_skolemize_3 c))) :rule subproof :discharge (t1.a0))
(step t.end (cl) :rule resolution :premises (nt1.0 nt1.1 t1))
