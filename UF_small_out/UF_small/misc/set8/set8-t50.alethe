(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection b a))) (member ?x (intersection a b))))))
(assume nst50.0 (not (=> (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))) (not (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (intersection b a)))))))
(assume nst50.1 (not (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a)))))))
(step st50 (cl (=> (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))) (not (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (intersection b a))))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a)))))) :rule implies_neg1)
(step t.end (cl) :rule resolution :premises (nst50.0 nst50.1 st50))
