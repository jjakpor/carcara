(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection b a))) (member ?x (intersection a b))))))
(assume nst101.0 (not (or (subset (intersection a b) (intersection b a)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))))))
(assume t95 (or (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (intersection a b) (intersection b a)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))))))
(assume t100 (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))))
(step t95' (cl (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (intersection a b) (intersection b a)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))))) :rule or :premises (t95))
(step st101 (cl (or (subset (intersection a b) (intersection b a)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))))) :rule resolution :premises (t95' t100))
(step t.end (cl) :rule resolution :premises (nst101.0 st101))
