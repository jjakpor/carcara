(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst178.0 (not (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))))))
(assume nst178.1 (not (or (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))))
(assume t177 (or (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))))
(step st178 (cl (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))) :rule or :premises (t177))
(step t.end (cl) :rule resolution :premises (nst178.0 nst178.1 st178))
