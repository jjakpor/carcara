(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nt109.t3.0 (not (= (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (difference ?s1 ?s2)) (and (member ?x ?s1) (not (member ?x ?s2))))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))))
(anchor :step t109.t3)
(assume t109.a0 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))
(step t109.t5 (cl (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference c b)))) :rule trust)
(step t109 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference c b)))) :rule subproof :discharge (t109.a0))
(anchor :step t109.t3 :args ((?x Elem) (?s1 Set) (?s2 Set) (:= (?x Elem) ?x) (:= (?s1 Set) ?s1) (:= (?s2 Set) ?s2)))
(step st109.t3.t0 (cl (= (= (member ?x (difference ?s1 ?s2)) (and (member ?x ?s1) (not (member ?x ?s2)))) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) :rule hole)
(step t109.t3.t0 (cl (= (= (member ?x (difference ?s1 ?s2)) (and (member ?x ?s1) (not (member ?x ?s2)))) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) :rule trust)
(step t109.t3 (cl (= (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (difference ?s1 ?s2)) (and (member ?x ?s1) (not (member ?x ?s2))))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))) :rule bind)
(step t.end (cl) :rule resolution :premises (nt109.t3.0 t109.t3))
