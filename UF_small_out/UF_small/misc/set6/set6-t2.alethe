(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst2.0 (not (not (= (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a)))) (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (member @quantifiers_skolemize_4 a))))))
(assume nst2.1 (not (not (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a)))))))
(assume nst2.2 (not (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (member @quantifiers_skolemize_4 a))))
(step st2 (cl (not (= (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a)))) (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (member @quantifiers_skolemize_4 a)))) (not (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a))))) (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (member @quantifiers_skolemize_4 a))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nst2.0 nst2.1 nst2.2 st2))
