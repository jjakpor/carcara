(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst50.0 (not (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))
(assume nst50.1 (not (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))))
(assume nst50.2 (not (not (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))))))
(assume t49 (or (not (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))))
(step t49' (cl (not (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))) :rule or :premises (t49))
(step st50 (cl (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))) (not (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))))) :rule reordering :premises (t49'))
(step t.end (cl) :rule resolution :premises (nst50.0 nst50.1 nst50.2 st50))
