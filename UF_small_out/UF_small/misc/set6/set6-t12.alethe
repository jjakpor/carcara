(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst12.0 (not (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a))))))
(assume t11 (or (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a)))) (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a)))) (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a))))))
(step t11' (cl (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a)))) (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a)))) (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a))))) :rule or :premises (t11))
(step st12 (cl (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a))))) :rule contraction :premises (t11'))
(step t.end (cl) :rule resolution :premises (nst12.0 st12))
