(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst130.0 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 a))) (member @quantifiers_skolemize_3 (difference c a))))))
(assume nst130.1 (not (not (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 a))) (member @quantifiers_skolemize_3 (difference c a))))))
(step st130 (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 a))) (member @quantifiers_skolemize_3 (difference c a)))) (not (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 a))) (member @quantifiers_skolemize_3 (difference c a))))) :rule implies_neg2)
(step t.end (cl) :rule resolution :premises (nst130.0 nst130.1 st130))
