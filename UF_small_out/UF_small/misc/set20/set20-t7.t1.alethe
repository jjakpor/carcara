(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nt7.0 (not (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))))
(assume nt7.1 (not (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))))
(anchor :step t7)
(assume t7.a0 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))
(step t7.t0 (cl (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b))))) :rule trust :args (@quantifiers_skolemize_4 a b))
(step st7.t1 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))) :rule or :premises (t7.t0))
(step t7.t5 (cl (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))) :rule trust)
(step t7 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 a) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference a b)))) :rule subproof :discharge (t7.a0))
(step t.end (cl) :rule resolution :premises (nt7.0 nt7.1 t7))
