(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nst60.0 (not (= (seteq (intersection a b) (difference a (difference a b))) (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b))))))
(assume a4 (forall ((?s1 Set) (?s2 Set)) (= (seteq ?s1 ?s2) (and (subset ?s1 ?s2) (subset ?s2 ?s1)))))
(assume t59 (or (not (forall ((?s1 Set) (?s2 Set)) (= (seteq ?s1 ?s2) (and (subset ?s1 ?s2) (subset ?s2 ?s1))))) (= (seteq (intersection a b) (difference a (difference a b))) (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b))))))
(step t59' (cl (not (forall ((?s1 Set) (?s2 Set)) (= (seteq ?s1 ?s2) (and (subset ?s1 ?s2) (subset ?s2 ?s1))))) (= (seteq (intersection a b) (difference a (difference a b))) (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b))))) :rule or :premises (t59))
(step st60 (cl (= (seteq (intersection a b) (difference a (difference a b))) (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b))))) :rule resolution :premises (t59' a4))
(step t.end (cl) :rule resolution :premises (nst60.0 st60))
