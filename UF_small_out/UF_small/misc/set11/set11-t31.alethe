(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x b)) (member ?x (union a b))))))
(assume nst31.0 (not (or (subset b (union a b)) (not (forall ((?x Elem)) (or (not (member ?x b)) (member ?x (union a b))))))))
(assume t25 (or (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset b (union a b)) (not (forall ((?x Elem)) (or (not (member ?x b)) (member ?x (union a b))))))))
(assume t30 (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))))
(step t25' (cl (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset b (union a b)) (not (forall ((?x Elem)) (or (not (member ?x b)) (member ?x (union a b))))))) :rule or :premises (t25))
(step st31 (cl (or (subset b (union a b)) (not (forall ((?x Elem)) (or (not (member ?x b)) (member ?x (union a b))))))) :rule resolution :premises (t25' t30))
(step t.end (cl) :rule resolution :premises (nst31.0 st31))
