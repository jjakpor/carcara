(set-logic UF)
(declare-sort Set 0)
(declare-sort Elem 0)
(declare-fun member (Elem Set) Bool)
(declare-fun subset (Set Set) Bool)
(declare-fun seteq (Set Set) Bool)
(declare-fun union (Set Set) Set)
(declare-fun intersection (Set Set) Set)
(declare-fun difference (Set Set) Set)
(declare-fun a () Set)
(declare-fun b () Set)
(assert (not (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (union ?s1 ?s2)) (or (member ?x ?s1) (member ?x ?s2)))))))
(assert (not (= (member (choice ((?x Elem)) (not (or (not (member ?x b)) (member ?x (union a b))))) (union a b)) (or (member (choice ((?x Elem)) (not (or (not (member ?x b)) (member ?x (union a b))))) a) (member (choice ((?x Elem)) (not (or (not (member ?x b)) (member ?x (union a b))))) b)))))
(assert (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (member ?x (union ?s1 ?s2)) (or (member ?x ?s1) (member ?x ?s2))))) (= (member (choice ((?x Elem)) (not (or (not (member ?x b)) (member ?x (union a b))))) (union a b)) (or (member (choice ((?x Elem)) (not (or (not (member ?x b)) (member ?x (union a b))))) a) (member (choice ((?x Elem)) (not (or (not (member ?x b)) (member ?x (union a b))))) b)))))
(check-sat)
(exit)
