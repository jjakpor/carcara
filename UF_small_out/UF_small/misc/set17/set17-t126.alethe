(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst126.0 (not (subset (union (intersection a b) (intersection a c)) (intersection a (union b c)))))
(assume t46 (or (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))) (not (or (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))))))
(assume t117 (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))
(assume t125 (or (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))))
(step t46' (cl (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))) (not (or (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))))) :rule or :premises (t46))
(step st126 (cl (subset (union (intersection a b) (intersection a c)) (intersection a (union b c)))) :rule resolution :premises (t46' t117 t125))
(step t.end (cl) :rule resolution :premises (nst126.0 st126))
