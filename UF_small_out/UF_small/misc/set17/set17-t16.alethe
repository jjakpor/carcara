(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst16.0 (not (not (= (member @quantifiers_skolemize_4 (union (intersection a b) (intersection a c))) (or (member @quantifiers_skolemize_4 (intersection a b)) (member @quantifiers_skolemize_4 (intersection a c)))))))
(assume nst16.1 (not (member @quantifiers_skolemize_4 (union (intersection a b) (intersection a c)))))
(assume nst16.2 (not (not (or (member @quantifiers_skolemize_4 (intersection a b)) (member @quantifiers_skolemize_4 (intersection a c))))))
(step st16 (cl (not (= (member @quantifiers_skolemize_4 (union (intersection a b) (intersection a c))) (or (member @quantifiers_skolemize_4 (intersection a b)) (member @quantifiers_skolemize_4 (intersection a c))))) (member @quantifiers_skolemize_4 (union (intersection a b) (intersection a c))) (not (or (member @quantifiers_skolemize_4 (intersection a b)) (member @quantifiers_skolemize_4 (intersection a c))))) :rule equiv_pos1)
(step t.end (cl) :rule resolution :premises (nst16.0 nst16.1 nst16.2 st16))
