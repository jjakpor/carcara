(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst37.0 (not (subset (intersection a (union b c)) (union (intersection a b) (intersection a c)))))
(assume nst37.1 (not (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c))))))))
(assume nst37.2 (not (not (or (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c))))))))))
(assume t36 (or (not (or (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c))))))))
(step t36' (cl (not (or (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c))))))) :rule or :premises (t36))
(step st37 (cl (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))) (not (or (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c))))))))) :rule reordering :premises (t36'))
(step t.end (cl) :rule resolution :premises (nst37.0 nst37.1 nst37.2 st37))
