(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst40.0 (not (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c)))))
(assume nst40.1 (not (not (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c)))))))
(assume nst40.2 (not (not (= (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))))))))
(assume t39 (or (not (= (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c)))))) (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c)))))))
(step t39' (cl (not (= (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c)))))) (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c)))))) :rule or :premises (t39))
(step st40 (cl (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))))) (not (= (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))))))) :rule reordering :premises (t39'))
(step t.end (cl) :rule resolution :premises (nst40.0 nst40.1 nst40.2 st40))
