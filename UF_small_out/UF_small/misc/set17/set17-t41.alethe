(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst41.0 (not (or (not (forall ((?s1 Set) (?s2 Set)) (= (seteq ?s1 ?s2) (and (subset ?s1 ?s2) (subset ?s2 ?s1))))) (= (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))))))))
(step st41 (cl (or (not (forall ((?s1 Set) (?s2 Set)) (= (seteq ?s1 ?s2) (and (subset ?s1 ?s2) (subset ?s2 ?s1))))) (= (seteq (union (intersection a b) (intersection a c)) (intersection a (union b c))) (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))))))) :rule forall_inst :args ((union (intersection a b) (intersection a c)) (intersection a (union b c))))
(step t.end (cl) :rule resolution :premises (nst41.0 st41))
