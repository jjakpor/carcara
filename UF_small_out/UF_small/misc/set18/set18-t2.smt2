(set-logic UF)
(declare-sort Set 0)
(declare-sort Elem 0)
(declare-fun member (Elem Set) Bool)
(declare-fun subset (Set Set) Bool)
(declare-fun seteq (Set Set) Bool)
(declare-fun union (Set Set) Set)
(declare-fun intersection (Set Set) Set)
(declare-fun difference (Set Set) Set)
(declare-fun a () Set)
(declare-fun b () Set)
(declare-fun d () Set)
(assert (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2))) (or (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d)) (not (subset d a)) (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) a)))))
(assert (not (or (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d)) (not (subset d a)) (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) a))))
(assert (or (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2))) (or (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d)) (not (subset d a)) (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) a))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2)))))
(assert (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2)))) (or (not (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) d)) (not (subset d a)) (member (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))) a))))
(check-sat)
(exit)
