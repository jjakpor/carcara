(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nst44.0 (not (= (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 a))) (member @quantifiers_skolemize_3 (difference b a)))) (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (member @quantifiers_skolemize_3 (difference b a)) (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 a))))))))
(assume t42 (= (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))))
(assume t43 (= (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 a))) (member @quantifiers_skolemize_3 (difference b a))) (= (member @quantifiers_skolemize_3 (difference b a)) (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 a))))))
(step st44 (cl (= (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 a))) (member @quantifiers_skolemize_3 (difference b a)))) (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (member @quantifiers_skolemize_3 (difference b a)) (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 a))))))) :rule cong :premises (t42 t43))
(step t.end (cl) :rule resolution :premises (nst44.0 st44))
