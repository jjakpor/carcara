(assume nst388.0 (not (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))))
(assume t387 (or (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))))
(step t387' (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) :rule or :premises (t387))
(step st388 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) :rule contraction :premises (t387'))
(step t.end (cl) :rule resolution :premises (nst388.0 st388))
