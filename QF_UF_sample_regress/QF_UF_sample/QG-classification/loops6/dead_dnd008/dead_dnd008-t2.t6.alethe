(assume nt2.0 (not (not (= e2 (op e2 e0)))))
(assume nt2.1 (not (not (= e0 (op e2 (op e2 e0))))))
(assume nt2.2 (not (= e2 (op e2 (op e2 e2)))))
(assume a2 (and (and (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4))) (and (= (op unit e5) e5) (= (op e5 unit) e5))) (or (or (or (or (or (= unit e0) (= unit e1)) (= unit e2)) (= unit e3)) (= unit e4)) (= unit e5))))
(anchor :step t2)
(assume t2.a0 (= e2 (op e2 e0)))
(assume t2.a1 (= e0 (op e2 (op e2 e0))))
(step st2.t6 (cl (and (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4))) (and (= (op unit e5) e5) (= (op e5 unit) e5)))) :rule and :premises (a2) :args (0))
(step t2.t19 (cl (= e2 (op e2 (op e2 e2)))) :rule trust)
(step t2 (cl (not (= e2 (op e2 e0))) (not (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) :rule subproof :discharge (t2.a0 t2.a1))
(step t.end (cl) :rule resolution :premises (nt2.0 nt2.1 nt2.2 t2))
