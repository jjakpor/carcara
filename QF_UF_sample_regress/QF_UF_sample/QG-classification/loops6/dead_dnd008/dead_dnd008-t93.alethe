(assume nst93.0 (not (= e1 (op e1 (op e1 e1)))))
(assume nst93.1 (not (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))))))
(assume nst93.2 (not (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))))))
(assume t90 (or (not (= e1 (op e1 e0))) (not (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))))
(assume t91 (or (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e1 (op e1 e0))))
(assume t92 (or (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e0 (op e1 (op e1 e0)))))
(step t90' (cl (not (= e1 (op e1 e0))) (not (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) :rule or :premises (t90))
(step t92' (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e0 (op e1 (op e1 e0)))) :rule or :premises (t92))
(step t91' (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e1 (op e1 e0))) :rule or :premises (t91))
(step st93 (cl (= e1 (op e1 (op e1 e1))) (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))))) :rule resolution :premises (t90' t91' t92'))
(step t.end (cl) :rule resolution :premises (nst93.0 nst93.1 nst93.2 st93))
