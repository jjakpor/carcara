(assume nst84.0 (not (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))))
(assume nst84.1 (not (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0))))))
(assume nst84.2 (not (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0))))))
(assume nst84.3 (not (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0))))))
(assume nst84.4 (not (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0))))))
(assume nst84.5 (not (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0))))))
(assume t83 (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))))
(step t83' (cl (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))) :rule or :premises (t83))
(step st84 (cl (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0))))) :rule reordering :premises (t83'))
(step t.end (cl) :rule resolution :premises (nst84.0 nst84.1 nst84.2 nst84.3 nst84.4 nst84.5 st84))
