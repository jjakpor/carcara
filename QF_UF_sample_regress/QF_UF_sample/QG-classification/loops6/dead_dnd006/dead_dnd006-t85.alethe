(assume nst85.0 (not (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))))
(assume nst85.1 (not (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0))))))
(assume nst85.2 (not (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0))))))
(assume nst85.3 (not (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0))))))
(assume nst85.4 (not (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0))))))
(assume nst85.5 (not (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0))))))
(assume t84 (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))))
(step t84' (cl (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))) :rule or :premises (t84))
(step st85 (cl (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0))))) :rule reordering :premises (t84'))
(step t.end (cl) :rule resolution :premises (nst85.0 nst85.1 nst85.2 nst85.3 nst85.4 nst85.5 st85))
