(assume nst960.0 (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0))))
(assume nst960.1 (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))))
(assume nst960.2 (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))))
(assume nst960.3 (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))))
(assume nst960.4 (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))))
(assume t959 (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))))
(step t959' (cl (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))) :rule or :premises (t959))
(step st960 (cl (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) :rule reordering :premises (t959'))
(step t.end (cl) :rule resolution :premises (nst960.0 nst960.1 nst960.2 nst960.3 nst960.4 st960))
