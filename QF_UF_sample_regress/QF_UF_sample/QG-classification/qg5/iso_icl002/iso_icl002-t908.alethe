(assume nst908.0 (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))
(assume nst908.1 (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))
(assume nst908.2 (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))
(assume nst908.3 (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))
(assume nst908.4 (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))
(assume t907 (or (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))
(step t907' (cl (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule or :premises (t907))
(step st908 (cl (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule reordering :premises (t907'))
(step t.end (cl) :rule resolution :premises (nst908.0 nst908.1 nst908.2 nst908.3 nst908.4 st908))
