(assume nst380.0 (not (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))
(assume nst380.1 (not (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))
(assume nst380.2 (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))
(assume nst380.3 (not (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))
(assume nst380.4 (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))
(assume t379 (or (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))
(step t379' (cl (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule or :premises (t379))
(step st380 (cl (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule reordering :premises (t379'))
(step t.end (cl) :rule resolution :premises (nst380.0 nst380.1 nst380.2 nst380.3 nst380.4 st380))
