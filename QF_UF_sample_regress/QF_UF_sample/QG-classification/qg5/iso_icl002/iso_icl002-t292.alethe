(assume nst292.0 (not (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))
(assume nst292.1 (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))
(assume nst292.2 (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))
(assume nst292.3 (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))
(assume nst292.4 (not (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0))))
(assume t291 (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))
(step t291' (cl (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule or :premises (t291))
(step st292 (cl (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0))) :rule reordering :premises (t291'))
(step t.end (cl) :rule resolution :premises (nst292.0 nst292.1 nst292.2 nst292.3 nst292.4 st292))
