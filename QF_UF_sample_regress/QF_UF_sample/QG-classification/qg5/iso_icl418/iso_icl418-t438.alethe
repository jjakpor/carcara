(assume nst438.0 (not (not (= (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)) (or (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)))))))
(assume nst438.1 (not (not (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)))))
(assume nst438.2 (not (or (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)))))
(step st438 (cl (not (= (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)) (or (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4))))) (not (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (or (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nst438.0 nst438.1 nst438.2 st438))
