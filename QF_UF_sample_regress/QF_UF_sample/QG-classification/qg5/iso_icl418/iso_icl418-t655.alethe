(assume nst655.0 (not (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3))))))
(assume t201 (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))))
(assume t587 (or (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3))))))
(assume t602 (not (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3))))))
(assume t608 (not (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))))
(assume t654 (not (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3))))))
(step t587' (cl (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3))))) :rule or :premises (t587))
(step st655 (cl (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3))))) :rule resolution :premises (t587' t602 t201 t608 t654))
(step t.end (cl) :rule resolution :premises (nst655.0 st655))
