(assume nst251.0 (not (not (= (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4)) (or (= e4 (op (op e4 e3) e3)) (= e3 (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)) (= (op e4 e3) (op (op e4 e3) e3)))))))
(assume nst251.1 (not (not (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4)))))
(assume nst251.2 (not (or (= e4 (op (op e4 e3) e3)) (= e3 (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)) (= (op e4 e3) (op (op e4 e3) e3)))))
(step st251 (cl (not (= (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4)) (or (= e4 (op (op e4 e3) e3)) (= e3 (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)) (= (op e4 e3) (op (op e4 e3) e3))))) (not (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (= e4 (op (op e4 e3) e3)) (= e3 (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)) (= (op e4 e3) (op (op e4 e3) e3)))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nst251.0 nst251.1 nst251.2 st251))
