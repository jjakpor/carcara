(assume nst87.0 (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))
(assume nst87.1 (not (not (= e1 (op (op e1 e3) (op (op e1 e3) e1))))))
(assume nst87.2 (not (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))))
(assume nst87.3 (not (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))
(assume nst87.4 (not (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))
(assume nst87.5 (not (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))))
(assume t86 (or (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))
(step t86' (cl (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule or :premises (t86))
(step st87 (cl (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) :rule reordering :premises (t86'))
(step t.end (cl) :rule resolution :premises (nst87.0 nst87.1 nst87.2 nst87.3 nst87.4 nst87.5 st87))
