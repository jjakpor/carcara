(assume nt62.0 (not (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))))
(assume nt62.1 (not (not (= e1 (op (op e1 e3) (op (op e1 e3) e1))))))
(assume nt62.2 (not (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))))
(assume nt62.3 (not (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))))
(assume nt62.4 (not (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))
(assume nt62.5 (not (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))
(anchor :step t62)
(assume t62.a0 (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))
(assume t62.a1 (= e1 (op (op e1 e3) (op (op e1 e3) e1))))
(assume t62.a2 (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))
(assume t62.a3 (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))
(assume t62.a4 (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))
(step t62.t11 (cl (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2))) :rule trust :args (0))
(step st62.t12 (cl (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1))) :rule and :premises (t62.t11) :args (0))
(step t62.t56 (cl (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule trust)
(step t62 (cl (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule subproof :discharge (t62.a0 t62.a1 t62.a2 t62.a3 t62.a4))
(step t.end (cl) :rule resolution :premises (nt62.0 nt62.1 nt62.2 nt62.3 nt62.4 nt62.5 t62))
