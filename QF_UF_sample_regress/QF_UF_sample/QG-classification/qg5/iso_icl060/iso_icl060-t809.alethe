(assume nst809.0 (not (= (op e3 e1) (op e3 e3))))
(assume nst809.1 (not (not (= e3 (op e3 e3)))))
(assume nst809.2 (not (not (= e3 (op (op e1 e3) (op (op e1 e3) e3))))))
(assume nst809.3 (not (not (= e1 (op e3 (op (op e1 e3) e3))))))
(assume nst809.4 (not (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))))
(assume nst809.5 (not (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))))
(assume nst809.6 (not (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))))
(assume nst809.7 (not (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))))
(assume t808 (or (= (op e3 e1) (op e3 e3)) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))))
(step t808' (cl (= (op e3 e1) (op e3 e3)) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule or :premises (t808))
(step st809 (cl (= (op e3 e1) (op e3 e3)) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))) :rule reordering :premises (t808'))
(step t.end (cl) :rule resolution :premises (nst809.0 nst809.1 nst809.2 nst809.3 nst809.4 nst809.5 nst809.6 nst809.7 st809))
