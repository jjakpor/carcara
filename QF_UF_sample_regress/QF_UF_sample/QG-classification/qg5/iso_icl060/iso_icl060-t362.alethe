(assume nst362.0 (not (= (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)) false)))
(assume nst362.1 (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))))
(assume t360 (or (= (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)) false) (not (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))))))
(assume t361 (or (not (not (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))))) (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))))
(step t360' (cl (= (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)) false) (not (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))))) :rule or :premises (t360))
(step t361' (cl (not (not (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))))) (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))) :rule or :premises (t361))
(step st362 (cl (= (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)) false) (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))) :rule resolution :premises (t360' t361'))
(step t.end (cl) :rule resolution :premises (nst362.0 nst362.1 st362))
