(assume nst389.0 (not (= (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false)))
(assume nst389.1 (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))
(assume t387 (or (= (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false) (not (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))))
(assume t388 (or (not (not (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))
(step t388' (cl (not (not (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))) :rule or :premises (t388))
(step t387' (cl (= (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false) (not (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) :rule or :premises (t387))
(step st389 (cl (= (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false) (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))) :rule resolution :premises (t387' t388'))
(step t.end (cl) :rule resolution :premises (nst389.0 nst389.1 st389))
