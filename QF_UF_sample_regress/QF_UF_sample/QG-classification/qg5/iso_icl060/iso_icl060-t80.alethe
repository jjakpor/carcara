(assume nst80.0 (not (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))))
(assume nst80.1 (not (not (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))))))
(step st80 (cl (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))))) :rule or_neg :args (3))
(step t.end (cl) :rule resolution :premises (nst80.0 nst80.1 st80))
