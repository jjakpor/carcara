(assume nst642.0 (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))
(assume nst642.1 (not (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))))
(assume nst642.2 (not (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))))))
(assume nst642.3 (not (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))))
(assume nst642.4 (not (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))))
(assume nst642.5 (not (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))
(step st642 (cl (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule and_neg)
(step t.end (cl) :rule resolution :premises (nst642.0 nst642.1 nst642.2 nst642.3 nst642.4 nst642.5 st642))
