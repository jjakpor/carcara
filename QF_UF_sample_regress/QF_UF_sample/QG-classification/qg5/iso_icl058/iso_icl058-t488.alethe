(assume nst488.0 (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))
(assume nst488.1 (not (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0)))))
(assume nst488.2 (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))
(assume nst488.3 (not (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0)))))
(assume nst488.4 (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))))
(assume t487 (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))))
(step t487' (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))) :rule or :premises (t487))
(step st488 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))) :rule reordering :premises (t487'))
(step t.end (cl) :rule resolution :premises (nst488.0 nst488.1 nst488.2 nst488.3 nst488.4 st488))
