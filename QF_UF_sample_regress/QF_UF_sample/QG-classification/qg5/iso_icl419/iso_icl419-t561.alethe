(assume nst561.0 (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))
(assume nst561.1 (not (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))
(assume nst561.2 (not (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))))
(assume nst561.3 (not (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3)))))
(assume nst561.4 (not (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))
(assume t560 (or (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))
(step t560' (cl (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule or :premises (t560))
(step st561 (cl (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule reordering :premises (t560'))
(step t.end (cl) :rule resolution :premises (nst561.0 nst561.1 nst561.2 nst561.3 nst561.4 st561))
