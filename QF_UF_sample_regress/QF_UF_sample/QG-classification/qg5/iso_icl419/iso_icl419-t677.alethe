(assume nst677.0 (not (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))))
(assume t673 (or (not (= (not (= (op e0 e0) (op e4 e0))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))))) (not (not (= (op e0 e0) (op e4 e0)))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))))
(assume t675 (= (not (= (op e0 e0) (op e4 e0))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))))
(assume t676 (not (= (op e0 e0) (op e4 e0))))
(step t673' (cl (not (= (not (= (op e0 e0) (op e4 e0))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))))) (not (not (= (op e0 e0) (op e4 e0)))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))) :rule or :premises (t673))
(step st677 (cl (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))) :rule resolution :premises (t673' t675 t676))
(step t.end (cl) :rule resolution :premises (nst677.0 st677))
