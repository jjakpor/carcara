(assume nst734.0 (not (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66))))))
(assume t732 (or (not (= (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66)))) true)) (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66))))))
(assume t733 (= (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66)))) true))
(step t732' (cl (not (= (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66)))) true)) (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66))))) :rule or :premises (t732))
(step st734 (cl (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66))))) :rule resolution :premises (t732' t733))
(step t.end (cl) :rule resolution :premises (nst734.0 st734))
