(assume nst655.0 (not (not (= (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59)))) true))))
(assume nst655.1 (not (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59))))))
(assume t654 (= (= (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59)))) true) (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59))))))
(step st655 (cl (not (= (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59)))) true)) (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59))))) :rule equiv1 :premises (t654))
(step t.end (cl) :rule resolution :premises (nst655.0 nst655.1 st655))
