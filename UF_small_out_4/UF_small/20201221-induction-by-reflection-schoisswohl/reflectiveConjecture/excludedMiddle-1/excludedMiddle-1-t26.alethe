(define-fun @quantifiers_skolemize_3 () alpha (choice ((x alpha)) (not (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(assume nst26.0 (not (= (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))) (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))))
(assume t25 (= (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))) (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))
(step st26 (cl (= (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))) (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))))) :rule cong :premises (t25))
(step t.end (cl) :rule resolution :premises (nst26.0 st26))
