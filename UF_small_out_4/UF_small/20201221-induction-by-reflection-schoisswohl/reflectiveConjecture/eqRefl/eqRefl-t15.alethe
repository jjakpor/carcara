(define-fun @quantifiers_skolemize_3 () alpha (choice ((x alpha)) (not (models (push_alpha empty v0_alpha x) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha))))))
(assume nst15.0 (not (not (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))))))
(assume nst15.1 (not (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha)))))
(assume t14 (=> (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))) (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha)))))
(step st15 (cl (not (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y))))) (models (push_alpha empty v0_alpha @quantifiers_skolemize_3) (eq_alpha (inj_alpha v0_alpha) (inj_alpha v0_alpha)))) :rule implies :premises (t14))
(step t.end (cl) :rule resolution :premises (nst15.0 nst15.1 st15))
