(set-logic UF)
(declare-sort alpha 0)
(declare-sort env 0)
(declare-sort form 0)
(declare-sort var_alpha 0)
(declare-sort term_alpha 0)
(declare-fun a () alpha)
(declare-fun b () alpha)
(declare-fun c () alpha)
(declare-fun v0_alpha () var_alpha)
(declare-fun next_alpha (var_alpha) var_alpha)
(declare-fun inj_alpha (var_alpha) term_alpha)
(declare-fun aR () term_alpha)
(declare-fun bR () term_alpha)
(declare-fun cR () term_alpha)
(declare-fun pR (term_alpha) form)
(declare-fun qR (term_alpha) form)
(declare-fun rR (term_alpha) form)
(declare-fun eq_alpha (term_alpha term_alpha) form)
(declare-fun falseR () form)
(declare-fun orR (form form) form)
(declare-fun notR (form) form)
(declare-fun forallR_alpha (var_alpha form) form)
(declare-fun empty () env)
(declare-fun push_alpha (env var_alpha alpha) env)
(declare-fun evalV_alpha (env var_alpha) alpha)
(declare-fun eval_alpha (env term_alpha) alpha)
(declare-fun p (alpha) Bool)
(declare-fun q (alpha) Bool)
(declare-fun r (alpha) Bool)
(declare-fun models (env form) Bool)
(assert (not (not (forall ((env env) (phi form) (v var_alpha)) (= (models env (forallR_alpha v phi)) (forall ((x alpha)) (models (push_alpha env v x) phi)))))))
(assert (not (= (models empty (forallR_alpha v0_alpha (pR (inj_alpha v0_alpha)))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (pR (inj_alpha v0_alpha)))))))
(assert (or (not (forall ((env env) (phi form) (v var_alpha)) (= (models env (forallR_alpha v phi)) (forall ((x alpha)) (models (push_alpha env v x) phi))))) (= (models empty (forallR_alpha v0_alpha (pR (inj_alpha v0_alpha)))) (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (pR (inj_alpha v0_alpha)))))))
(check-sat)
(exit)
