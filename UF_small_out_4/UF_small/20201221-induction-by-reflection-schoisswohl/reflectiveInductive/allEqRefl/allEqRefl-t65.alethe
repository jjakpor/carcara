(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst65.0 (not (= (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)) (evalV_nat (push_nat empty v0_nat zero) v0_nat))))
(assume t64 (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))))
(step st65 (cl (= (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)) (evalV_nat (push_nat empty v0_nat zero) v0_nat))) :rule symm :premises (t64))
(step t.end (cl) :rule resolution :premises (nst65.0 st65))
