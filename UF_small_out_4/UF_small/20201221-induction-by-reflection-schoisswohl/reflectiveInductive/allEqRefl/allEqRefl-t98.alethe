(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst98.0 (not (= (not (= (s @quantifiers_skolemize_7) (evalV_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) v0_nat))) (not (= (s @quantifiers_skolemize_7) (evalV_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) v0_nat))))))
(step st98 (cl (= (not (= (s @quantifiers_skolemize_7) (evalV_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) v0_nat))) (not (= (s @quantifiers_skolemize_7) (evalV_nat (push_nat empty v0_nat (s @quantifiers_skolemize_7)) v0_nat))))) :rule refl)
(step t.end (cl) :rule resolution :premises (nst98.0 st98))
