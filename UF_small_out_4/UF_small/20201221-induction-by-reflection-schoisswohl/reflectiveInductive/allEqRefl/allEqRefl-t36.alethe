(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst36.0 (not (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))))
(assume a6 (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x)))
(assume t34 (or (not (= (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x)) (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v))))) (not (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x))) (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))))
(assume t35 (= (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x)) (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))))
(step t34' (cl (not (= (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x)) (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v))))) (not (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x))) (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))) :rule or :premises (t34))
(step st36 (cl (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v)))) :rule resolution :premises (t34' t35 a6))
(step t.end (cl) :rule resolution :premises (nst36.0 st36))
