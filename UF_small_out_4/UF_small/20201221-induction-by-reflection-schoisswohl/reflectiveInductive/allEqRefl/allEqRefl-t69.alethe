(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst69.0 (not (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) zero)))
(assume t68 (= zero (evalV_nat (push_nat empty v0_nat zero) v0_nat)))
(step st69 (cl (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) zero)) :rule symm :premises (t68))
(step t.end (cl) :rule resolution :premises (nst69.0 st69))
