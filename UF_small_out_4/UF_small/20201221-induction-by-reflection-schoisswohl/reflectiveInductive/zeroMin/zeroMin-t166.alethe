(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst166.0 (not (not (= (models (push_nat empty v0_nat (s @quantifiers_skolemize_15)) (leqR zeroR (inj_nat v0_nat))) (leq (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) zeroR) (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) (inj_nat v0_nat)))))))
(assume nst166.1 (not (models (push_nat empty v0_nat (s @quantifiers_skolemize_15)) (leqR zeroR (inj_nat v0_nat)))))
(assume nst166.2 (not (not (leq (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) zeroR) (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) (inj_nat v0_nat))))))
(step st166 (cl (not (= (models (push_nat empty v0_nat (s @quantifiers_skolemize_15)) (leqR zeroR (inj_nat v0_nat))) (leq (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) zeroR) (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) (inj_nat v0_nat))))) (models (push_nat empty v0_nat (s @quantifiers_skolemize_15)) (leqR zeroR (inj_nat v0_nat))) (not (leq (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) zeroR) (eval_nat (push_nat empty v0_nat (s @quantifiers_skolemize_15)) (inj_nat v0_nat))))) :rule equiv_pos1)
(step t.end (cl) :rule resolution :premises (nst166.0 nst166.1 nst166.2 st166))
