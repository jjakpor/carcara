(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst59.0 (not (= (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)) (evalV_nat (push_nat empty v0_nat zero) v0_nat))))
(assume t58 (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))))
(step st59 (cl (= (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)) (evalV_nat (push_nat empty v0_nat zero) v0_nat))) :rule symm :premises (t58))
(step t.end (cl) :rule resolution :premises (nst59.0 st59))
