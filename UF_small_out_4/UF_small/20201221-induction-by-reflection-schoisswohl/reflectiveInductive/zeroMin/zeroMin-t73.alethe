(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst73.0 (not (leq zero zero)))
(assume a0 (forall ((x nat)) (leq x x)))
(assume t72 (or (not (forall ((x nat)) (leq x x))) (leq zero zero)))
(step t72' (cl (not (forall ((x nat)) (leq x x))) (leq zero zero)) :rule or :premises (t72))
(step st73 (cl (leq zero zero)) :rule resolution :premises (t72' a0))
(step t.end (cl) :rule resolution :premises (nst73.0 st73))
