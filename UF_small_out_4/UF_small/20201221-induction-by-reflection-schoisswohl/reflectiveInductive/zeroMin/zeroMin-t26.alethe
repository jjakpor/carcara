(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst26.0 (not (or (not (not (leq zero @quantifiers_skolemize_1))) (not (= zero (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) zeroR))) (not (= @quantifiers_skolemize_1 (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat))) (not (= (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)))) (not (leq (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) zeroR) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)))))))
(assume nst26.1 (not (not (not (= zero (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) zeroR))))))
(step st26 (cl (or (not (not (leq zero @quantifiers_skolemize_1))) (not (= zero (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) zeroR))) (not (= @quantifiers_skolemize_1 (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat))) (not (= (evalV_nat (push_nat empty v0_nat @quantifiers_skolemize_1) v0_nat) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)))) (not (leq (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) zeroR) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat))))) (not (not (= zero (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) zeroR))))) :rule or_neg :args (1))
(step t.end (cl) :rule resolution :premises (nst26.0 nst26.1 st26))
