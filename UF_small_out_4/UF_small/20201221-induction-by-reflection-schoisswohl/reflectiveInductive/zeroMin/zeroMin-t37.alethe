(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst37.0 (not (not (= (forall ((env env) (v var_nat)) (= (eval_nat env (inj_nat v)) (evalV_nat env v))) (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))))))
(assume nst37.1 (not (not (forall ((env env) (v var_nat)) (= (eval_nat env (inj_nat v)) (evalV_nat env v))))))
(assume nst37.2 (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))))
(step st37 (cl (not (= (forall ((env env) (v var_nat)) (= (eval_nat env (inj_nat v)) (evalV_nat env v))) (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v)))))) (not (forall ((env env) (v var_nat)) (= (eval_nat env (inj_nat v)) (evalV_nat env v)))) (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nst37.0 nst37.1 nst37.2 st37))
