(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst50.0 (not (not (forall ((env env)) (= zero (eval_nat env zeroR))))))
(assume nst50.1 (not (= zero (eval_nat (push_nat empty v0_nat zero) zeroR))))
(assume t49 (or (not (forall ((env env)) (= zero (eval_nat env zeroR)))) (= zero (eval_nat (push_nat empty v0_nat zero) zeroR))))
(step st50 (cl (not (forall ((env env)) (= zero (eval_nat env zeroR)))) (= zero (eval_nat (push_nat empty v0_nat zero) zeroR))) :rule or :premises (t49))
(step t.end (cl) :rule resolution :premises (nst50.0 nst50.1 st50))
