(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nst21.0 (not (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (not (not (member @quantifiers_skolemize_3 (difference b a)))))))
(assume t20 (or (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (not (not (member @quantifiers_skolemize_3 (difference b a))))) (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (not (not (member @quantifiers_skolemize_3 (difference b a)))))))
(step t20' (cl (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (not (not (member @quantifiers_skolemize_3 (difference b a))))) (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (not (not (member @quantifiers_skolemize_3 (difference b a)))))) :rule or :premises (t20))
(step st21 (cl (or (or (not (member @quantifiers_skolemize_3 (difference b a))) (member @quantifiers_skolemize_3 (difference b d))) (not (not (member @quantifiers_skolemize_3 (difference b a)))))) :rule contraction :premises (t20'))
(step t.end (cl) :rule resolution :premises (nst21.0 st21))
