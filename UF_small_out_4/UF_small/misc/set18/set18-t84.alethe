(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nst84.0 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))))
(assume nst84.1 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))))
(assume t82 (or (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d)))))
(assume t83 (or (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d)))) (not (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))))
(step t83' (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d)))) (not (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))) :rule or :premises (t83))
(step t82' (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d)))) :rule or :premises (t82))
(step st84 (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d)))) (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))) :rule resolution :premises (t82' t83'))
(step t.end (cl) :rule resolution :premises (nst84.0 nst84.1 st84))
