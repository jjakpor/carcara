(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nst85.0 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))))
(assume t84 (or (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d)))) (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))))
(step t84' (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d)))) (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))) :rule or :premises (t84))
(step st85 (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 b) (not (member @quantifiers_skolemize_3 d))) (member @quantifiers_skolemize_3 (difference b d))))) :rule contraction :premises (t84'))
(step t.end (cl) :rule resolution :premises (nst85.0 st85))
