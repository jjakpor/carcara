(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nt69.0 (not (not (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))))
(assume nt69.1 (not (not (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (difference a (difference a b)))))))
(anchor :step t69)
(assume t69.a0 (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(anchor :step t69.t1 :args ((:= (?x Elem) @quantifiers_skolemize_3)))
(step st69.t1.t0 (cl (= (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))) (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (difference a (difference a b)))))) :rule refl)
(step t69.t1.t0 (cl (= (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))) (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (difference a (difference a b)))))) :rule trust)
(step t69.t1 (cl (= (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b))))) (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (difference a (difference a b)))))) :rule sko_forall)
(step t69.t3 (cl (not (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (difference a (difference a b)))))) :rule trust)
(step t69 (cl (not (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b))))))) (not (or (not (member @quantifiers_skolemize_3 (intersection a b))) (member @quantifiers_skolemize_3 (difference a (difference a b)))))) :rule subproof :discharge (t69.a0))
(step t.end (cl) :rule resolution :premises (nt69.0 nt69.1 t69))
