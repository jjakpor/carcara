(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nst161.0 (not (or (subset (difference a (difference a b)) (intersection a b)) (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))))
(assume t155 (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))))
(assume t160 (or (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (difference a (difference a b)) (intersection a b)) (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))))
(step t160' (cl (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (difference a (difference a b)) (intersection a b)) (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))) :rule or :premises (t160))
(step st161 (cl (or (subset (difference a (difference a b)) (intersection a b)) (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))) :rule resolution :premises (t160' t155))
(step t.end (cl) :rule resolution :premises (nst161.0 st161))
