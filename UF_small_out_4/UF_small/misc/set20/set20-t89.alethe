(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nst89.0 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 a) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference a b))))))
(assume nst89.1 (not (not (= (and (member @quantifiers_skolemize_3 a) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference a b))))))
(step st89 (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 a) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference a b)))) (not (= (and (member @quantifiers_skolemize_3 a) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference a b))))) :rule implies_neg2)
(step t.end (cl) :rule resolution :premises (nst89.0 nst89.1 st89))
