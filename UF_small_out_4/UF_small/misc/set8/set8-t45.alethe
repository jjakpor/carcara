(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection b a))) (member ?x (intersection a b))))))
(assume nst45.0 (not (subset (intersection a b) (intersection b a))))
(assume nst45.1 (not (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a)))))))
(assume nst45.2 (not (not (or (subset (intersection a b) (intersection b a)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a)))))))))
(assume t44 (or (not (or (subset (intersection a b) (intersection b a)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))))) (subset (intersection a b) (intersection b a)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a)))))))
(step t44' (cl (not (or (subset (intersection a b) (intersection b a)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))))) (subset (intersection a b) (intersection b a)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a)))))) :rule or :premises (t44))
(step st45 (cl (subset (intersection a b) (intersection b a)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a))))) (not (or (subset (intersection a b) (intersection b a)) (not (forall ((?x Elem)) (or (not (member ?x (intersection a b))) (member ?x (intersection b a)))))))) :rule reordering :premises (t44'))
(step t.end (cl) :rule resolution :premises (nst45.0 nst45.1 nst45.2 st45))
