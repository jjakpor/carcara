(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst49.0 (not (not (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))))))
(assume nst49.1 (not (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))
(assume nst49.2 (not (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))))
(step st49 (cl (not (or (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))) (not (forall ((?x Elem)) (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b))))))) :rule or_pos)
(step t.end (cl) :rule resolution :premises (nst49.0 nst49.1 nst49.2 st49))
