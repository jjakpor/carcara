(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst8.0 (not (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a))))))
(assume nst8.1 (not (not (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))))))
(step st8 (cl (or (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (not (member @quantifiers_skolemize_4 c)) (not (not (member @quantifiers_skolemize_4 a)))) (not (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))))) :rule or_neg :args (0))
(step t.end (cl) :rule resolution :premises (nst8.0 nst8.1 st8))
