(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst28.0 (not (or (or (not (member @quantifiers_skolemize_4 (difference c (intersection a b)))) (member @quantifiers_skolemize_4 (union (difference c a) (difference c b)))) (not (not (member @quantifiers_skolemize_4 (difference c (intersection a b))))))))
(assume t27 (or (or (or (not (member @quantifiers_skolemize_4 (difference c (intersection a b)))) (member @quantifiers_skolemize_4 (union (difference c a) (difference c b)))) (not (not (member @quantifiers_skolemize_4 (difference c (intersection a b)))))) (or (or (not (member @quantifiers_skolemize_4 (difference c (intersection a b)))) (member @quantifiers_skolemize_4 (union (difference c a) (difference c b)))) (not (not (member @quantifiers_skolemize_4 (difference c (intersection a b))))))))
(step t27' (cl (or (or (not (member @quantifiers_skolemize_4 (difference c (intersection a b)))) (member @quantifiers_skolemize_4 (union (difference c a) (difference c b)))) (not (not (member @quantifiers_skolemize_4 (difference c (intersection a b)))))) (or (or (not (member @quantifiers_skolemize_4 (difference c (intersection a b)))) (member @quantifiers_skolemize_4 (union (difference c a) (difference c b)))) (not (not (member @quantifiers_skolemize_4 (difference c (intersection a b))))))) :rule or :premises (t27))
(step st28 (cl (or (or (not (member @quantifiers_skolemize_4 (difference c (intersection a b)))) (member @quantifiers_skolemize_4 (union (difference c a) (difference c b)))) (not (not (member @quantifiers_skolemize_4 (difference c (intersection a b))))))) :rule contraction :premises (t27'))
(step t.end (cl) :rule resolution :premises (nst28.0 st28))
