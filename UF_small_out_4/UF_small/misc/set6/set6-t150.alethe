(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst150.0 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 (intersection a b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b)))))))
(assume nst150.1 (not (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 (intersection a b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b))))))
(assume t148 (or (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 (intersection a b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b))))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))))
(assume t149 (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 (intersection a b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b))))))
(step t148' (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 (intersection a b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b))))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) :rule or :premises (t148))
(step t149' (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 (intersection a b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b))))) :rule or :premises (t149))
(step st150 (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 (intersection a b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b))))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 (intersection a b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b))))) :rule resolution :premises (t148' t149'))
(step t.end (cl) :rule resolution :premises (nst150.0 nst150.1 st150))
