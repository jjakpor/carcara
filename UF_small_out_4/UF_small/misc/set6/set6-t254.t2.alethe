(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nt254.0 (not (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))))
(assume nt254.1 (not (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference c b)))))
(assume t118 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))
(anchor :step t254)
(assume t254.a0 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))
(step t254.t1 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference c b)))) :rule trust)
(step st254.t2 (cl (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference c b)))) :rule resolution :premises (t254.t1 t118))
(step t254.t2 (cl (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference c b)))) :rule trust)
(step t254 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 b))) (member @quantifiers_skolemize_4 (difference c b)))) :rule subproof :discharge (t254.a0))
(step t.end (cl) :rule resolution :premises (nt254.0 nt254.1 t254))
