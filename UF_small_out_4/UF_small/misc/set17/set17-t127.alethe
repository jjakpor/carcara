(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst127.0 (not (not (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))))))
(assume t38 (or (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c)))) (not (subset (union (intersection a b) (intersection a c)) (intersection a (union b c)))) (not (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))))))
(assume t44 (not (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))))))
(assume t126 (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))))
(step t38' (cl (and (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (subset (intersection a (union b c)) (union (intersection a b) (intersection a c)))) (not (subset (union (intersection a b) (intersection a c)) (intersection a (union b c)))) (not (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))))) :rule or :premises (t38))
(step st127 (cl (not (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))))) :rule resolution :premises (t38' t44 t126))
(step t.end (cl) :rule resolution :premises (nst127.0 st127))
