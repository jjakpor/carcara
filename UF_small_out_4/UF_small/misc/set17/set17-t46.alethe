(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst46.0 (not (subset (union (intersection a b) (intersection a c)) (intersection a (union b c)))))
(assume nst46.1 (not (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))))
(assume nst46.2 (not (not (or (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))))))
(assume t45 (or (not (or (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))) (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))))
(step t45' (cl (not (or (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))) (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))) :rule or :premises (t45))
(step st46 (cl (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))) (not (or (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))))) :rule reordering :premises (t45'))
(step t.end (cl) :rule resolution :premises (nst46.0 nst46.1 nst46.2 st46))
