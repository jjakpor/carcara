(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nt2.0 (not (not (member @quantifiers_skolemize_4 a))))
(assume nt2.1 (not (not (= a (intersection a b)))))
(assume nt2.2 (not (member @quantifiers_skolemize_4 (intersection a b))))
(anchor :step t2)
(assume t2.a0 (member @quantifiers_skolemize_4 a))
(assume t2.a1 (= a (intersection a b)))
(step t2.t6 (cl (= (member @quantifiers_skolemize_4 a) true) (not (member @quantifiers_skolemize_4 a))) :rule trust)
(step st2.t7 (cl (= (member @quantifiers_skolemize_4 a) true)) :rule resolution :premises (t2.t6 t2.a0))
(step t2.t9 (cl (member @quantifiers_skolemize_4 (intersection a b))) :rule trust)
(step t2 (cl (not (member @quantifiers_skolemize_4 a)) (not (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) :rule subproof :discharge (t2.a0 t2.a1))
(step t.end (cl) :rule resolution :premises (nt2.0 nt2.1 nt2.2 t2))
