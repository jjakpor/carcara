(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst11.0 (not (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b)))))
(assume t10 (or (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b)))))
(step t10' (cl (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b)))) :rule or :premises (t10))
(step st11 (cl (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b)))) :rule contraction :premises (t10'))
(step t.end (cl) :rule resolution :premises (nst11.0 st11))
