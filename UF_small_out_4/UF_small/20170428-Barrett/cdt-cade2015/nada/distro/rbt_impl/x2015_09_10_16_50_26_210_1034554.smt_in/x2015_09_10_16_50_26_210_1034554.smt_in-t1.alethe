(assume nst1.0 (not (not (fun_app$f (rbt_sorted$ less$) (branch$ c$ t1$ k$ v$ t2$)))))
(assume nst1.1 (not (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$))))
(assume nst1.2 (not (not (= (fun_app$f (rbt_sorted$ less$) (branch$ c$ t1$ k$ v$ t2$)) (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$))))))
(assume t0 (or (not (= (fun_app$f (rbt_sorted$ less$) (branch$ c$ t1$ k$ v$ t2$)) (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$)))) (not (fun_app$f (rbt_sorted$ less$) (branch$ c$ t1$ k$ v$ t2$))) (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$))))
(step t0' (cl (not (= (fun_app$f (rbt_sorted$ less$) (branch$ c$ t1$ k$ v$ t2$)) (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$)))) (not (fun_app$f (rbt_sorted$ less$) (branch$ c$ t1$ k$ v$ t2$))) (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$))) :rule or :premises (t0))
(step st1 (cl (not (fun_app$f (rbt_sorted$ less$) (branch$ c$ t1$ k$ v$ t2$))) (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$)) (not (= (fun_app$f (rbt_sorted$ less$) (branch$ c$ t1$ k$ v$ t2$)) (and (fun_app$f (rbt_less$ less$ k$) t1$) (fun_app$f (rbt_greater$ less$ k$) t2$) (fun_app$f (rbt_sorted$ less$) t1$) (fun_app$f (rbt_sorted$ less$) t2$))))) :rule reordering :premises (t0'))
(step t.end (cl) :rule resolution :premises (nst1.0 nst1.1 nst1.2 st1))
