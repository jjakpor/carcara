(assume nt75.0 (not (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 A$)) (= (swapFourSyms$ ?v0 ?v1 ?v2 ?v3 ?v4) (ite (= ?v1 ?v4) (fun_app$f (swapSyms$ ?v0 ?v2) ?v3) (ite (= ?v2 ?v3) (fun_app$f (swapSyms$ ?v0 ?v1) ?v4) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v3) ?v2) ?v4))))))))
(assume nt75.1 (not (= (swapFourSyms$ t$ a$ b$ c$ d$) (ite (= a$ d$) (fun_app$f (swapSyms$ t$ b$) c$) (ite (= b$ c$) (fun_app$f (swapSyms$ t$ a$) d$) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ t$ a$) c$) b$) d$))))))
(anchor :step t75)
(assume t75.a0 (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 A$)) (= (swapFourSyms$ ?v0 ?v1 ?v2 ?v3 ?v4) (ite (= ?v1 ?v4) (fun_app$f (swapSyms$ ?v0 ?v2) ?v3) (ite (= ?v2 ?v3) (fun_app$f (swapSyms$ ?v0 ?v1) ?v4) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v3) ?v2) ?v4))))))
(step st75.t0 (cl (or (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 A$)) (= (swapFourSyms$ ?v0 ?v1 ?v2 ?v3 ?v4) (ite (= ?v1 ?v4) (fun_app$f (swapSyms$ ?v0 ?v2) ?v3) (ite (= ?v2 ?v3) (fun_app$f (swapSyms$ ?v0 ?v1) ?v4) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v3) ?v2) ?v4)))))) (= (swapFourSyms$ t$ a$ b$ c$ d$) (ite (= a$ d$) (fun_app$f (swapSyms$ t$ b$) c$) (ite (= b$ c$) (fun_app$f (swapSyms$ t$ a$) d$) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ t$ a$) c$) b$) d$)))))) :rule forall_inst :args (t$ a$ b$ c$ d$))
(step t75.t2 (cl (= (swapFourSyms$ t$ a$ b$ c$ d$) (ite (= a$ d$) (fun_app$f (swapSyms$ t$ b$) c$) (ite (= b$ c$) (fun_app$f (swapSyms$ t$ a$) d$) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ t$ a$) c$) b$) d$))))) :rule trust)
(step t75 (cl (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 A$)) (= (swapFourSyms$ ?v0 ?v1 ?v2 ?v3 ?v4) (ite (= ?v1 ?v4) (fun_app$f (swapSyms$ ?v0 ?v2) ?v3) (ite (= ?v2 ?v3) (fun_app$f (swapSyms$ ?v0 ?v1) ?v4) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v3) ?v2) ?v4)))))) (= (swapFourSyms$ t$ a$ b$ c$ d$) (ite (= a$ d$) (fun_app$f (swapSyms$ t$ b$) c$) (ite (= b$ c$) (fun_app$f (swapSyms$ t$ a$) d$) (fun_app$f (swapSyms$ (fun_app$f (swapSyms$ t$ a$) c$) b$) d$))))) :rule subproof :discharge (t75.a0))
(step t.end (cl) :rule resolution :premises (nt75.0 nt75.1 t75))
