(assume nst148.0 (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))))
(assume a43 (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (and (member$ ?v1 (alphabet$ ?v0)) (and (member$ ?v2 (alphabet$ ?v0)) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2)))))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0)))))
(assume t144 (or (not (= (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (and (member$ ?v1 (alphabet$ ?v0)) (and (member$ ?v2 (alphabet$ ?v0)) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2)))))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0)))) (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0)))))) (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (and (member$ ?v1 (alphabet$ ?v0)) (and (member$ ?v2 (alphabet$ ?v0)) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2)))))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))) (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))))
(assume t147 (= (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (and (member$ ?v1 (alphabet$ ?v0)) (and (member$ ?v2 (alphabet$ ?v0)) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2)))))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0)))) (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))))
(step t144' (cl (not (= (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (and (member$ ?v1 (alphabet$ ?v0)) (and (member$ ?v2 (alphabet$ ?v0)) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2)))))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0)))) (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0)))))) (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (and (member$ ?v1 (alphabet$ ?v0)) (and (member$ ?v2 (alphabet$ ?v0)) (and (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2)) (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2)))))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))) (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))) :rule or :premises (t144))
(step st148 (cl (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))) :rule resolution :premises (t144' t147 a43))
(step t.end (cl) :rule resolution :premises (nst148.0 st148))
