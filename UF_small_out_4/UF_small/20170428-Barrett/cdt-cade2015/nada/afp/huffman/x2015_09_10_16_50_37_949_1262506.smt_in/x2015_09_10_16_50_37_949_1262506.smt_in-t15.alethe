(assume nst15.0 (not (member$ a$ (alphabet$ t$))))
(assume t5 (or (member$ a$ (alphabet$ t$)) (not (and (member$ a$ (alphabet$ t$)) (member$ b$ (alphabet$ t$)) (not (= a$ b$)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) b$)) (forall ((?v3 A$)) (or (not (member$ ?v3 (alphabet$ t$))) (= a$ ?v3) (= b$ ?v3) (and (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) ?v3)))))))))
(assume t14 (and (member$ a$ (alphabet$ t$)) (member$ b$ (alphabet$ t$)) (not (= a$ b$)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) b$)) (forall ((?v3 A$)) (or (not (member$ ?v3 (alphabet$ t$))) (= a$ ?v3) (= b$ ?v3) (and (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) ?v3)))))))
(step t5' (cl (member$ a$ (alphabet$ t$)) (not (and (member$ a$ (alphabet$ t$)) (member$ b$ (alphabet$ t$)) (not (= a$ b$)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) b$)) (forall ((?v3 A$)) (or (not (member$ ?v3 (alphabet$ t$))) (= a$ ?v3) (= b$ ?v3) (and (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) ?v3)) (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) ?v3)))))))) :rule or :premises (t5))
(step st15 (cl (member$ a$ (alphabet$ t$))) :rule resolution :premises (t5' t14))
(step t.end (cl) :rule resolution :premises (nst15.0 st15))
