(assume nt72.0 (not (not (not (= (fun_app$c (ldropn$ (suc$ n$)) xs$) (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$))))))
(assume nt72.1 (not (not (= lNil$ (fun_app$c (ldropn$ (suc$ n$)) xs$)))))
(assume nt72.2 (not (not (= (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$)))))))
(assume nt72.3 (not (not (= lNil$ (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$)))))))
(anchor :step t72)
(assume t72.a0 (not (= (fun_app$c (ldropn$ (suc$ n$)) xs$) (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$))))
(assume t72.a1 (= lNil$ (fun_app$c (ldropn$ (suc$ n$)) xs$)))
(assume t72.a2 (= (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$)))))
(anchor :step t72.t19)
(assume t72.t19.a0 (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))))
(step t72.t19.t1 (cl (not (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2)))))) (= (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$))))) :rule trust)
(step st72.t19.t2 (cl (= (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$))))) :rule resolution :premises (t72.t19.t1 t72.t19.a0))
(step t72.t19.t2 (cl (= (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$))))) :rule trust)
(step t72.t19 (cl (not (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2)))))) (= (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$))))) :rule subproof :discharge (t72.t19.a0))
(step t72.t35 (cl (not (= lNil$ (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$)))))) :rule trust)
(step t72 (cl (not (not (= (fun_app$c (ldropn$ (suc$ n$)) xs$) (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$)))) (not (= lNil$ (fun_app$c (ldropn$ (suc$ n$)) xs$))) (not (= (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$))))) (not (= lNil$ (ite (fun_app$q lnull$d xs$) lNil$ (fun_app$c (fun_app$e uu$ (lhd$ xs$)) (ltl$ xs$)))))) :rule subproof :discharge (t72.a0 t72.a1 t72.a2))
(step t.end (cl) :rule resolution :premises (nt72.0 nt72.1 nt72.2 nt72.3 t72))
