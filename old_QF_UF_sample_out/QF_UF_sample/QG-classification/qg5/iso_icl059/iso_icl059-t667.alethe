(assume t666 (or (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) e0)) (= (op e0 e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0)))))
(assume nt667.0 (not (= (op e0 e0) (op (op (op e0 e0) e0) e0))))
(assume nt667.1 (not (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0)))))
(assume nt667.2 (not (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) e0))))
(assume nt667.3 (not (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0)))))
(assume nt667.4 (not (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))))
(step t666' (cl (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) e0)) (= (op e0 e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0)))) :rule or :premises (t666))
(step t667 (cl (= (op e0 e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule reordering :premises (t666'))
(step t.end (cl) :rule resolution :premises (nt667.0 nt667.1 nt667.2 nt667.3 nt667.4 t667))
