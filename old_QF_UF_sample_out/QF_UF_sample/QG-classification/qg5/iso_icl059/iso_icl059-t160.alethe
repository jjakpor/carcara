(assume t159 (or (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0)))))
(assume nt160.0 (not (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0)))))
(assume nt160.1 (not (= (op e0 (op e0 e0)) (op (op e0 e0) e0))))
(assume nt160.2 (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0)))))
(assume nt160.3 (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0)))))
(assume nt160.4 (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op e0 e0)))))
(step t159' (cl (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0)))) :rule or :premises (t159))
(step t160 (cl (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op e0 e0)))) :rule reordering :premises (t159'))
(step t.end (cl) :rule resolution :premises (nt160.0 nt160.1 nt160.2 nt160.3 nt160.4 t160))
