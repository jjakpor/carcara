(assume t600 (or (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e3) e1))) (not (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))))
(assume t612 (or (not (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))))
(assume nt613.0 (not (not (= (op e1 e3) (op (op (op e1 e3) e3) e1)))))
(assume nt613.1 (not (not (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))))
(assume nt613.2 (not (= e1 (op (op (op e1 e3) e3) (op e1 e3)))))
(step t612' (cl (not (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) :rule or :premises (t612))
(step t600' (cl (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e3) e1))) (not (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) :rule or :premises (t600))
(step t613 (cl (not (= (op e1 e3) (op (op (op e1 e3) e3) e1))) (not (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) :rule resolution :premises (t600' t612'))
(step t.end (cl) :rule resolution :premises (nt613.0 nt613.1 nt613.2 t613))
