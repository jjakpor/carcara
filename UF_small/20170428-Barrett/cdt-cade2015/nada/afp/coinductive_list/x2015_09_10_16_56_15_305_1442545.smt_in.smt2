(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Unit$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Bool_nat_fun$ 0)
(declare-sort Unit_nat_fun$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort Natural_bool_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort Natural_llist_set$ 0)
(declare-sort A_a_prod_llist_set$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Natural_natural_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort Nat_nat_prod_bool_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort Natural_llist_bool_fun$ 0)
(declare-sort Natural_llist_enat_fun$ 0)
(declare-sort A_a_prod_llist_bool_fun$ 0)
(declare-sort A_a_prod_llist_enat_fun$ 0)
(declare-sort A_llist_a_llist_prod_set$ 0)
(declare-sort Natural_llist_natural_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_bool_fun$ 0)
(declare-sort Natural_natural_prod_bool_fun$ 0)
(declare-sort Natural_llist_natural_llist_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0)
(declare-sort Natural_natural_prod_llist_bool_fun$ 0)
(declare-sort Natural_llist_natural_llist_bool_fun_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_bool_fun_fun$ 0)
(declare-sort Natural_natural_prod_natural_natural_prod_fun$ 0)
(declare-sort Natural_natural_prod_llist_natural_natural_prod_fun$ 0)
(declare-sort Natural_natural_prod_llist_natural_natural_prod_llist_fun$ 0)
(declare-sort Natural_natural_prod_llist_natural_natural_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_a_prod$ 0)
(declare-fun none$ () Nat_option$)
(declare-fun the$ (Nat_option$) Nat$)
(declare-fun some$ (Nat$) Nat_option$)
(declare-fun rep_enat$ (Enat$) Nat_option$)
(declare-fun abs_enat$ (Nat_option$) Enat$)
(declare-fun fst$ (A_a_prod$) A$)
(declare-fun snd$ (A_a_prod$) A$)
(declare-fun pair$ (A$ A$) A_a_prod$)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$a () A_a_prod_llist$)
(declare-fun lhd$a (A_a_prod_llist$) A_a_prod$)
(declare-fun ltl$a (A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lCons$a (A_a_prod$ A_a_prod_llist$) A_a_prod_llist$)
(declare-sort Natural$ 0)
(declare-fun nat_of_natural$ (Natural$) Nat$)
(declare-fun natural_of_nat$ (Nat$) Natural$)
(declare-sort Natural_llist$ 0)
(declare-fun lNil$b () Natural_llist$)
(declare-fun lhd$b (Natural_llist$) Natural$)
(declare-fun ltl$b (Natural_llist$) Natural_llist$)
(declare-fun lCons$b (Natural$ Natural_llist$) Natural_llist$)
(declare-sort Natural_natural_prod$ 0)
(declare-fun fst$a (Natural_natural_prod$) Natural$)
(declare-fun snd$a (Natural_natural_prod$) Natural$)
(declare-fun pair$a (Natural$ Natural$) Natural_natural_prod$)
(declare-sort Natural_natural_prod_llist$ 0)
(declare-fun lNil$c () Natural_natural_prod_llist$)
(declare-fun lhd$c (Natural_natural_prod_llist$) Natural_natural_prod$)
(declare-fun ltl$c (Natural_natural_prod_llist$) Natural_natural_prod_llist$)
(declare-fun lCons$c (Natural_natural_prod$ Natural_natural_prod_llist$) Natural_natural_prod_llist$)
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$b (A_a_a_prod_prod$) A$)
(declare-fun snd$b (A_a_a_prod_prod$) A_a_prod$)
(declare-fun pair$b (A$ A_a_prod$) A_a_a_prod_prod$)
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-fun lNil$d () A_a_a_prod_prod_llist$)
(declare-fun lhd$d (A_a_a_prod_prod_llist$) A_a_a_prod_prod$)
(declare-fun ltl$d (A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lCons$d (A_a_a_prod_prod$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-sort A_natural_prod$ 0)
(declare-fun fst$c (A_natural_prod$) A$)
(declare-fun snd$c (A_natural_prod$) Natural$)
(declare-fun pair$c (A$ Natural$) A_natural_prod$)
(declare-sort A_natural_prod_llist$ 0)
(declare-fun lNil$e () A_natural_prod_llist$)
(declare-fun lhd$e (A_natural_prod_llist$) A_natural_prod$)
(declare-fun ltl$e (A_natural_prod_llist$) A_natural_prod_llist$)
(declare-fun lCons$e (A_natural_prod$ A_natural_prod_llist$) A_natural_prod_llist$)
(declare-sort A_a_prod_a_prod$ 0)
(declare-fun fst$d (A_a_prod_a_prod$) A_a_prod$)
(declare-fun snd$d (A_a_prod_a_prod$) A$)
(declare-fun pair$d (A_a_prod$ A$) A_a_prod_a_prod$)
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$f () A_a_prod_a_prod_llist$)
(declare-fun lhd$f (A_a_prod_a_prod_llist$) A_a_prod_a_prod$)
(declare-fun ltl$f (A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-fun lCons$f (A_a_prod_a_prod$ A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-sort A_a_prod_a_a_prod_prod$ 0)
(declare-fun fst$e (A_a_prod_a_a_prod_prod$) A_a_prod$)
(declare-fun snd$e (A_a_prod_a_a_prod_prod$) A_a_prod$)
(declare-fun pair$e (A_a_prod$ A_a_prod$) A_a_prod_a_a_prod_prod$)
(declare-sort A_a_prod_a_a_prod_prod_llist$ 0)
(declare-fun lNil$g () A_a_prod_a_a_prod_prod_llist$)
(declare-fun lhd$g (A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod$)
(declare-fun ltl$g (A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lCons$g (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-sort A_a_prod_natural_prod$ 0)
(declare-fun fst$f (A_a_prod_natural_prod$) A_a_prod$)
(declare-fun snd$f (A_a_prod_natural_prod$) Natural$)
(declare-fun pair$f (A_a_prod$ Natural$) A_a_prod_natural_prod$)
(declare-sort A_a_prod_natural_prod_llist$ 0)
(declare-fun lNil$h () A_a_prod_natural_prod_llist$)
(declare-fun lhd$h (A_a_prod_natural_prod_llist$) A_a_prod_natural_prod$)
(declare-fun ltl$h (A_a_prod_natural_prod_llist$) A_a_prod_natural_prod_llist$)
(declare-fun lCons$h (A_a_prod_natural_prod$ A_a_prod_natural_prod_llist$) A_a_prod_natural_prod_llist$)
(declare-sort Natural_a_prod$ 0)
(declare-fun fst$g (Natural_a_prod$) Natural$)
(declare-fun snd$g (Natural_a_prod$) A$)
(declare-fun pair$g (Natural$ A$) Natural_a_prod$)
(declare-sort Natural_a_prod_llist$ 0)
(declare-fun lNil$i () Natural_a_prod_llist$)
(declare-fun lhd$i (Natural_a_prod_llist$) Natural_a_prod$)
(declare-fun ltl$i (Natural_a_prod_llist$) Natural_a_prod_llist$)
(declare-fun lCons$i (Natural_a_prod$ Natural_a_prod_llist$) Natural_a_prod_llist$)
(declare-sort Natural_a_a_prod_prod$ 0)
(declare-fun fst$h (Natural_a_a_prod_prod$) Natural$)
(declare-fun snd$h (Natural_a_a_prod_prod$) A_a_prod$)
(declare-fun pair$h (Natural$ A_a_prod$) Natural_a_a_prod_prod$)
(declare-sort Natural_a_a_prod_prod_llist$ 0)
(declare-fun lNil$j () Natural_a_a_prod_prod_llist$)
(declare-fun lhd$j (Natural_a_a_prod_prod_llist$) Natural_a_a_prod_prod$)
(declare-fun ltl$j (Natural_a_a_prod_prod_llist$) Natural_a_a_prod_prod_llist$)
(declare-fun lCons$j (Natural_a_a_prod_prod$ Natural_a_a_prod_prod_llist$) Natural_a_a_prod_prod_llist$)
(declare-sort A_llist_a_llist_prod$ 0)
(declare-fun fst$i (A_llist_a_llist_prod$) A_llist$)
(declare-fun snd$i (A_llist_a_llist_prod$) A_llist$)
(declare-fun pair$i (A_llist$ A_llist$) A_llist_a_llist_prod$)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$k () Nat_llist$)
(declare-fun lhd$k (Nat_llist$) Nat$)
(declare-fun ltl$k (Nat_llist$) Nat_llist$)
(declare-fun lCons$k (Nat$ Nat_llist$) Nat_llist$)
(declare-sort Nat_nat_prod$ 0)
(declare-fun fst$j (Nat_nat_prod$) Nat$)
(declare-fun snd$j (Nat_nat_prod$) Nat$)
(declare-fun pair$j (Nat$ Nat$) Nat_nat_prod$)
(declare-sort Nat_nat_prod_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_a_llist_prod_llist$ 0)
(declare-fun lNil$l () Nat_nat_prod_llist$)
(declare-fun lhd$l (Nat_nat_prod_llist$) Nat_nat_prod$)
(declare-fun ltl$l (Nat_nat_prod_llist$) Nat_nat_prod_llist$)
(declare-fun lCons$l (Nat_nat_prod$ Nat_nat_prod_llist$) Nat_nat_prod_llist$)
(declare-fun lNil$m () A_llist_llist$)
(declare-fun lhd$m (A_llist_llist$) A_llist$)
(declare-fun ltl$m (A_llist_llist$) A_llist_llist$)
(declare-fun lCons$m (A_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun lNil$n () A_llist_a_llist_prod_llist$)
(declare-fun lhd$n (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod$)
(declare-fun ltl$n (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lCons$n (A_llist_a_llist_prod$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-sort Natural_natural_prod_a_prod$ 0)
(declare-fun fst$k (Natural_natural_prod_a_prod$) Natural_natural_prod$)
(declare-fun snd$k (Natural_natural_prod_a_prod$) A$)
(declare-fun pair$k (Natural_natural_prod$ A$) Natural_natural_prod_a_prod$)
(declare-sort Natural_natural_prod_a_prod_llist$ 0)
(declare-fun lNil$o () Natural_natural_prod_a_prod_llist$)
(declare-fun lhd$o (Natural_natural_prod_a_prod_llist$) Natural_natural_prod_a_prod$)
(declare-fun ltl$o (Natural_natural_prod_a_prod_llist$) Natural_natural_prod_a_prod_llist$)
(declare-fun lCons$o (Natural_natural_prod_a_prod$ Natural_natural_prod_a_prod_llist$) Natural_natural_prod_a_prod_llist$)
(declare-sort Natural_natural_prod_natural_prod$ 0)
(declare-fun fst$l (Natural_natural_prod_natural_prod$) Natural_natural_prod$)
(declare-fun snd$l (Natural_natural_prod_natural_prod$) Natural$)
(declare-fun pair$l (Natural_natural_prod$ Natural$) Natural_natural_prod_natural_prod$)
(declare-sort Natural_natural_prod_natural_prod_llist$ 0)
(declare-fun lNil$p () Natural_natural_prod_natural_prod_llist$)
(declare-fun lhd$p (Natural_natural_prod_natural_prod_llist$) Natural_natural_prod_natural_prod$)
(declare-fun ltl$p (Natural_natural_prod_natural_prod_llist$) Natural_natural_prod_natural_prod_llist$)
(declare-fun lCons$p (Natural_natural_prod_natural_prod$ Natural_natural_prod_natural_prod_llist$) Natural_natural_prod_natural_prod_llist$)
(declare-sort A_natural_natural_prod_prod$ 0)
(declare-fun fst$m (A_natural_natural_prod_prod$) A$)
(declare-fun snd$m (A_natural_natural_prod_prod$) Natural_natural_prod$)
(declare-fun pair$m (A$ Natural_natural_prod$) A_natural_natural_prod_prod$)
(declare-sort A_natural_natural_prod_prod_llist$ 0)
(declare-fun lNil$q () A_natural_natural_prod_prod_llist$)
(declare-fun lhd$q (A_natural_natural_prod_prod_llist$) A_natural_natural_prod_prod$)
(declare-fun ltl$q (A_natural_natural_prod_prod_llist$) A_natural_natural_prod_prod_llist$)
(declare-fun lCons$q (A_natural_natural_prod_prod$ A_natural_natural_prod_prod_llist$) A_natural_natural_prod_prod_llist$)
(declare-sort Typerep_list$ 0)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-sort Char_list$ 0)
(declare-sort Literal$ 0)
(declare-sort Typerep$ 0)
(declare-fun nil$ () Typerep_list$)
(declare-fun hd$ (Typerep_list$) Typerep$)
(declare-fun tl$ (Typerep_list$) Typerep_list$)
(declare-fun cons$ (Typerep$ Typerep_list$) Typerep_list$)
(declare-fun nibble0$ () Nibble$)
(declare-fun nibble1$ () Nibble$)
(declare-fun nibble2$ () Nibble$)
(declare-fun nibble3$ () Nibble$)
(declare-fun nibble4$ () Nibble$)
(declare-fun nibble5$ () Nibble$)
(declare-fun nibble6$ () Nibble$)
(declare-fun nibble7$ () Nibble$)
(declare-fun nibble8$ () Nibble$)
(declare-fun nibble9$ () Nibble$)
(declare-fun nibbleA$ () Nibble$)
(declare-fun nibbleB$ () Nibble$)
(declare-fun nibbleC$ () Nibble$)
(declare-fun nibbleD$ () Nibble$)
(declare-fun nibbleE$ () Nibble$)
(declare-fun nibbleF$ () Nibble$)
(declare-fun selectb$ (Char$) Nibble$)
(declare-fun selectc$ (Char$) Nibble$)
(declare-fun char$ (Nibble$ Nibble$) Char$)
(declare-fun nil$a () Char_list$)
(declare-fun hd$a (Char_list$) Char$)
(declare-fun tl$a (Char_list$) Char_list$)
(declare-fun cons$a (Char$ Char_list$) Char_list$)
(declare-fun explode$ (Literal$) Char_list$)
(declare-fun str$ (Char_list$) Literal$)
(declare-fun select$ (Typerep$) Literal$)
(declare-fun selecta$ (Typerep$) Typerep_list$)
(declare-fun typerep$ (Literal$ Typerep_list$) Typerep$)
(declare-fun n$ () Enat$)
(declare-fun uu$ (A_llist_set$) A_llist_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ (Natural$) Natural$)
(declare-fun uua$ (A_llist_a_llist_prod_set$) A_llist_a_llist_prod_bool_fun$)
(declare-fun uub$ () A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun uuc$ () Natural_llist_natural_llist_fun$)
(declare-fun uud$ () A_llist_a_llist_fun$)
(declare-fun uue$ () Natural_natural_prod_llist_natural_natural_prod_fun$)
(declare-fun uuf$ () Natural_natural_prod_llist_natural_natural_prod_llist_fun$)
(declare-fun uug$ () A_a_prod_llist_a_a_prod_fun$)
(declare-fun uuh$ () Natural_llist_natural_fun$)
(declare-fun uui$ () A_llist_a_fun$)
(declare-fun lzip$ (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun size$ (Natural$) Nat$)
(declare-fun zero$ () Enat$)
(declare-fun epred$ (Enat$) Enat$)
(declare-fun lnull$ () A_llist_bool_fun$)
(declare-fun ltake$ (Enat$) A_llist_a_llist_fun$)
(declare-fun lzip$a (A_llist$ Natural_llist$) A_natural_prod_llist$)
(declare-fun lzip$b (A_a_prod_llist$ A_llist$) A_a_prod_a_prod_llist$)
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lzip$d (A_a_prod_llist$ Natural_llist$) A_a_prod_natural_prod_llist$)
(declare-fun lzip$e (Natural_llist$ A_llist$) Natural_a_prod_llist$)
(declare-fun lzip$f (Natural_llist$ A_a_prod_llist$) Natural_a_a_prod_prod_llist$)
(declare-fun lzip$g (Natural_llist$ Natural_llist$) Natural_natural_prod_llist$)
(declare-fun lzip$h (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun lzip$i (Nat_llist$ Nat_llist$) Nat_nat_prod_llist$)
(declare-fun lzip$j (A_llist_llist$ A_llist_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lzip$k (Natural_natural_prod_llist$ A_llist$) Natural_natural_prod_a_prod_llist$)
(declare-fun lzip$l (Natural_natural_prod_llist$ Natural_llist$) Natural_natural_prod_natural_prod_llist$)
(declare-fun lzip$m (A_llist$ Natural_natural_prod_llist$) A_natural_natural_prod_prod_llist$)
(declare-fun size$a (Typerep$) Nat$)
(declare-fun size$b (Literal$) Nat$)
(declare-fun size$c (Nibble$) Nat$)
(declare-fun size$d (Char$) Nat$)
(declare-fun size$e () Bool_nat_fun$)
(declare-fun size$f () Unit_nat_fun$)
(declare-fun unity$ () Unit$)
(declare-fun zero$a () Nat$)
(declare-fun zero$b () Natural$)
(declare-fun lnull$a () A_a_prod_llist_bool_fun$)
(declare-fun lnull$b () Natural_llist_bool_fun$)
(declare-fun lnull$c () Natural_natural_prod_llist_bool_fun$)
(declare-fun lnull$d (A_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$e (A_natural_prod_llist$) Bool)
(declare-fun lnull$f (A_a_prod_a_prod_llist$) Bool)
(declare-fun lnull$g (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$h (A_a_prod_natural_prod_llist$) Bool)
(declare-fun lnull$i (Natural_a_prod_llist$) Bool)
(declare-fun lnull$j (Natural_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$k (Nat_llist$) Bool)
(declare-fun lnull$l (A_llist_llist$) Bool)
(declare-fun ltake$a (Enat$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun ltake$b (Enat$ Natural_llist$) Natural_llist$)
(declare-fun ltake$c (Enat$) Natural_natural_prod_llist_natural_natural_prod_llist_fun$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun default$ () Unit$)
(declare-fun fun_app$ (Natural_llist_natural_llist_fun$ Natural_llist$) Natural_llist$)
(declare-fun llength$ () A_a_prod_llist_enat_fun$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun lprefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun member$a (A_llist_a_llist_prod$ A_llist_a_llist_prod_set$) Bool)
(declare-fun member$b (A_a_prod_llist$ A_a_prod_llist_set$) Bool)
(declare-fun member$c (Natural_llist$ Natural_llist_set$) Bool)
(declare-fun collect$a (A_llist_a_llist_prod_bool_fun$) A_llist_a_llist_prod_set$)
(declare-fun fun_app$a (Natural_natural_prod_llist_natural_natural_prod_llist_fun$ Natural_natural_prod_llist$) Natural_natural_prod_llist$)
(declare-fun fun_app$b (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$d (Natural_llist_natural_fun$ Natural_llist$) Natural$)
(declare-fun fun_app$e (Natural_natural_prod_llist_natural_natural_prod_fun$ Natural_natural_prod_llist$) Natural_natural_prod$)
(declare-fun fun_app$f (A_a_prod_llist_a_a_prod_fun$ A_a_prod_llist$) A_a_prod$)
(declare-fun fun_app$g (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$h (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$i (A_llist_a_llist_prod_bool_fun$ A_llist_a_llist_prod$) Bool)
(declare-fun fun_app$j (A_a_prod_llist_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun fun_app$k (Natural_llist_bool_fun$ Natural_llist$) Bool)
(declare-fun fun_app$l (A_a_prod_llist_enat_fun$ A_a_prod_llist$) Enat$)
(declare-fun fun_app$m (Natural_llist_enat_fun$ Natural_llist$) Enat$)
(declare-fun fun_app$n (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$o (Natural_natural_prod_llist_bool_fun$ Natural_natural_prod_llist$) Bool)
(declare-fun fun_app$p (Natural_natural_prod_bool_fun$ Natural_natural_prod$) Bool)
(declare-fun fun_app$q (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$r (Natural_bool_fun$ Natural$) Bool)
(declare-fun fun_app$s (A_bool_fun$ A$) Bool)
(declare-fun fun_app$t (A_a_fun$ A$) A$)
(declare-fun fun_app$u (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod$)
(declare-fun fun_app$v (Natural_natural_fun$ Natural$) Natural$)
(declare-fun fun_app$w (Natural_natural_prod_llist_natural_natural_prod_llist_bool_fun_fun$ Natural_natural_prod_llist$) Natural_natural_prod_llist_bool_fun$)
(declare-fun fun_app$x (A_a_prod_llist_a_a_prod_llist_bool_fun_fun$ A_a_prod_llist$) A_a_prod_llist_bool_fun$)
(declare-fun fun_app$y (Natural_llist_natural_llist_bool_fun_fun$ Natural_llist$) Natural_llist_bool_fun$)
(declare-fun fun_app$z (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun iterates$ (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod_llist$)
(declare-fun llength$a () Natural_llist_enat_fun$)
(declare-fun llength$b () A_llist_enat_fun$)
(declare-fun llength$c (Natural_natural_prod_llist$) Enat$)
(declare-fun lmember$a (A_a_prod$) A_a_prod_llist_bool_fun$)
(declare-fun lmember$b (Natural_natural_prod$) Natural_natural_prod_llist_bool_fun$)
(declare-fun rec_bool$ (Nat$ Nat$) Bool_nat_fun$)
(declare-fun rec_unit$ (Nat$) Unit_nat_fun$)
(declare-fun the_enat$ (Enat$) Nat$)
(declare-fun fun_app$aa (Nat_nat_prod_bool_fun$ Nat_nat_prod$) Bool)
(declare-fun fun_app$ab (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$ac (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$ad (Bool_nat_fun$ Bool) Nat$)
(declare-fun fun_app$ae (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$af (Unit_nat_fun$ Unit$) Nat$)
(declare-fun iterates$a (Natural_natural_fun$ Natural$) Natural_llist$)
(declare-fun iterates$b (A_a_fun$ A$) A_llist$)
(declare-fun iterates$c (Natural_natural_prod_natural_natural_prod_fun$ Natural_natural_prod$) Natural_natural_prod_llist$)
(declare-fun size_bool$ () Bool_nat_fun$)
(declare-fun size_char$ (Char$) Nat$)
(declare-fun size_unit$ () Unit_nat_fun$)
(declare-fun llist_all2$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun ltakeWhile$ (Natural_natural_prod_bool_fun$ Natural_natural_prod_llist$) Natural_natural_prod_llist$)
(declare-fun divides_aux$ (Nat_nat_prod$) Bool)
(declare-fun enat_unfold$ (A_a_prod_llist_bool_fun$ A_a_prod_llist_a_a_prod_llist_fun$) A_a_prod_llist_enat_fun$)
(declare-fun gen_llength$ (Nat$) A_llist_enat_fun$)
(declare-fun ltakeWhile$a (A_a_prod_bool_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun ltakeWhile$b (Natural_bool_fun$ Natural_llist$) Natural_llist$)
(declare-fun ltakeWhile$c (A_bool_fun$ A_llist$) A_llist$)
(declare-fun size_nibble$ (Nibble$) Nat$)
(declare-fun enat_unfold$a (Natural_llist_bool_fun$ Natural_llist_natural_llist_fun$) Natural_llist_enat_fun$)
(declare-fun enat_unfold$b (A_llist_bool_fun$ A_llist_a_llist_fun$) A_llist_enat_fun$)
(declare-fun size_natural$ (Natural$) Nat$)
(declare-fun unfold_llist$ (Natural_natural_prod_llist_bool_fun$ Natural_natural_prod_llist_natural_natural_prod_fun$ Natural_natural_prod_llist_natural_natural_prod_llist_fun$ Natural_natural_prod_llist$) Natural_natural_prod_llist$)
(declare-fun nibble_of_nat$ (Nat$) Nibble$)
(declare-fun unfold_llist$a (A_a_prod_llist_bool_fun$ A_a_prod_llist_a_a_prod_fun$ A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun unfold_llist$b (Natural_llist_bool_fun$ Natural_llist_natural_fun$ Natural_llist_natural_llist_fun$ Natural_llist$) Natural_llist$)
(declare-fun unfold_llist$c (A_llist_bool_fun$ A_llist_a_fun$ A_llist_a_llist_fun$ A_llist$) A_llist$)
(assert (forall ((?v0 Natural_llist$)) (! (= (fun_app$ uuc$ ?v0) (ltl$b ?v0)) :pattern ((fun_app$ uuc$ ?v0)))))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (! (= (fun_app$a uuf$ ?v0) (ltl$c ?v0)) :pattern ((fun_app$a uuf$ ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$b uub$ ?v0) (ltl$a ?v0)) :pattern ((fun_app$b uub$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$c uud$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$c uud$ ?v0)))))
(assert (forall ((?v0 Natural_llist$)) (! (= (fun_app$d uuh$ ?v0) (lhd$b ?v0)) :pattern ((fun_app$d uuh$ ?v0)))))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (! (= (fun_app$e uue$ ?v0) (lhd$c ?v0)) :pattern ((fun_app$e uue$ ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$f uug$ ?v0) (lhd$a ?v0)) :pattern ((fun_app$f uug$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$g uui$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$g uui$ ?v0)))))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (! (= (fun_app$h (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$h (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_a_llist_prod_set$) (?v1 A_llist_a_llist_prod$)) (! (= (fun_app$i (uua$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$i (uua$ ?v0) ?v1)))))
(assert (not (= (fun_app$h lnull$ (fun_app$c (ltake$ n$) xs$)) (or (fun_app$h lnull$ xs$) (= n$ zero$)))))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$)) (= (not (fun_app$j lnull$a (fun_app$b (ltake$a ?v0) ?v1))) (and (not (= ?v0 zero$)) (not (fun_app$j lnull$a ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 Natural_llist$)) (= (not (fun_app$k lnull$b (ltake$b ?v0 ?v1))) (and (not (= ?v0 zero$)) (not (fun_app$k lnull$b ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (not (fun_app$h lnull$ (fun_app$c (ltake$ ?v0) ?v1))) (and (not (= ?v0 zero$)) (not (fun_app$h lnull$ ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$)) (= (fun_app$j lnull$a (fun_app$b (ltake$a ?v0) ?v1)) (or (= ?v0 zero$) (fun_app$j lnull$a ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Natural_llist$)) (= (fun_app$k lnull$b (ltake$b ?v0 ?v1)) (or (= ?v0 zero$) (fun_app$k lnull$b ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (fun_app$h lnull$ (fun_app$c (ltake$ ?v0) ?v1)) (or (= ?v0 zero$) (fun_app$h lnull$ ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (= ?v0 zero$) (fun_app$j lnull$a ?v1)) false) (=> (and (not (= ?v0 zero$)) (not (fun_app$j lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Natural_llist$)) (=> (and (=> (or (= ?v0 zero$) (fun_app$k lnull$b ?v1)) false) (=> (and (not (= ?v0 zero$)) (not (fun_app$k lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (=> (or (= ?v0 zero$) (fun_app$h lnull$ ?v1)) false) (=> (and (not (= ?v0 zero$)) (not (fun_app$h lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (fun_app$h lnull$ ?v0) (fun_app$j lnull$a ?v1)) false) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$j lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 Natural_llist$)) (=> (and (=> (or (fun_app$h lnull$ ?v0) (fun_app$k lnull$b ?v1)) false) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$k lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$j lnull$a ?v0) (fun_app$h lnull$ ?v1)) false) (=> (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$h lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (fun_app$j lnull$a ?v0) (fun_app$j lnull$a ?v1)) false) (=> (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$j lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Natural_llist$)) (=> (and (=> (or (fun_app$j lnull$a ?v0) (fun_app$k lnull$b ?v1)) false) (=> (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$k lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$k lnull$b ?v0) (fun_app$h lnull$ ?v1)) false) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$h lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (fun_app$k lnull$b ?v0) (fun_app$j lnull$a ?v1)) false) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$j lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (and (=> (or (fun_app$k lnull$b ?v0) (fun_app$k lnull$b ?v1)) false) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$k lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$h lnull$ ?v0) (fun_app$h lnull$ ?v1)) false) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$h lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_llist$)) (=> (member$b ?v1 ?v0) (fun_app$j lnull$a ?v1)) ) false) (=> (not (forall ((?v1 A_a_prod_llist$)) (=> (member$b ?v1 ?v0) (fun_app$j lnull$a ?v1)) )) false)) false) ))
(assert (forall ((?v0 Natural_llist_set$)) (=> (and (=> (forall ((?v1 Natural_llist$)) (=> (member$c ?v1 ?v0) (fun_app$k lnull$b ?v1)) ) false) (=> (not (forall ((?v1 Natural_llist$)) (=> (member$c ?v1 ?v0) (fun_app$k lnull$b ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$h lnull$ ?v1)) ) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$h lnull$ ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (and (fun_app$j lnull$a ?v0) (fun_app$j lnull$a ?v1)) false) (=> (or (not (fun_app$j lnull$a ?v0)) (not (fun_app$j lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (and (=> (and (fun_app$k lnull$b ?v0) (fun_app$k lnull$b ?v1)) false) (=> (or (not (fun_app$k lnull$b ?v0)) (not (fun_app$k lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$h lnull$ ?v0) (fun_app$h lnull$ ?v1)) false) (=> (or (not (fun_app$h lnull$ ?v0)) (not (fun_app$h lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (fun_app$j lnull$a ?v0) false) (=> (not (fun_app$j lnull$a ?v0)) false)) false) ))
(assert (forall ((?v0 Natural_llist$)) (=> (and (=> (fun_app$k lnull$b ?v0) false) (=> (not (fun_app$k lnull$b ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$h lnull$ ?v0) false) (=> (not (fun_app$h lnull$ ?v0)) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$)) (=> (or (= ?v0 zero$) (fun_app$j lnull$a ?v1)) (fun_app$j lnull$a (fun_app$b (ltake$a ?v0) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Natural_llist$)) (=> (or (= ?v0 zero$) (fun_app$k lnull$b ?v1)) (fun_app$k lnull$b (ltake$b ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (or (= ?v0 zero$) (fun_app$h lnull$ ?v1)) (fun_app$h lnull$ (fun_app$c (ltake$ ?v0) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$)) (=> (and (not (= ?v0 zero$)) (not (fun_app$j lnull$a ?v1))) (not (fun_app$j lnull$a (fun_app$b (ltake$a ?v0) ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 Natural_llist$)) (=> (and (not (= ?v0 zero$)) (not (fun_app$k lnull$b ?v1))) (not (fun_app$k lnull$b (ltake$b ?v0 ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$)) (not (fun_app$h lnull$ ?v1))) (not (fun_app$h lnull$ (fun_app$c (ltake$ ?v0) ?v1)))) ))
(assert (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$)) (= (= (fun_app$l llength$ ?v0) zero$) (fun_app$j lnull$a ?v0)) ))
(assert (forall ((?v0 Natural_llist$)) (= (= (fun_app$m llength$a ?v0) zero$) (fun_app$k lnull$b ?v0)) ))
(assert (forall ((?v0 A_llist$)) (= (= (fun_app$n llength$b ?v0) zero$) (fun_app$h lnull$ ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (! (=> (fun_app$j lnull$a ?v0) (= (fun_app$l llength$ ?v0) zero$)) :pattern ((fun_app$l llength$ ?v0)))))
(assert (forall ((?v0 Natural_llist$)) (! (=> (fun_app$k lnull$b ?v0) (= (fun_app$m llength$a ?v0) zero$)) :pattern ((fun_app$m llength$a ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (=> (fun_app$h lnull$ ?v0) (= (fun_app$n llength$b ?v0) zero$)) :pattern ((fun_app$n llength$b ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Natural_natural_prod_llist$)) (! (=> (or (= ?v0 zero$) (fun_app$o lnull$c ?v1)) (= (fun_app$a (ltake$c ?v0) ?v1) lNil$c)) :pattern ((fun_app$a (ltake$c ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$)) (! (=> (or (= ?v0 zero$) (fun_app$j lnull$a ?v1)) (= (fun_app$b (ltake$a ?v0) ?v1) lNil$a)) :pattern ((fun_app$b (ltake$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Natural_llist$)) (! (=> (or (= ?v0 zero$) (fun_app$k lnull$b ?v1)) (= (ltake$b ?v0 ?v1) lNil$b)) :pattern ((ltake$b ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (! (=> (or (= ?v0 zero$) (fun_app$h lnull$ ?v1)) (= (fun_app$c (ltake$ ?v0) ?v1) lNil$)) :pattern ((fun_app$c (ltake$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Natural_natural_prod_llist$)) (=> (and (not (= ?v0 zero$)) (not (fun_app$o lnull$c ?v1))) (= (lhd$c (fun_app$a (ltake$c ?v0) ?v1)) (lhd$c ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$)) (=> (and (not (= ?v0 zero$)) (not (fun_app$j lnull$a ?v1))) (= (lhd$a (fun_app$b (ltake$a ?v0) ?v1)) (lhd$a ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Natural_llist$)) (=> (and (not (= ?v0 zero$)) (not (fun_app$k lnull$b ?v1))) (= (lhd$b (ltake$b ?v0 ?v1)) (lhd$b ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$)) (not (fun_app$h lnull$ ?v1))) (= (lhd$ (fun_app$c (ltake$ ?v0) ?v1)) (lhd$ ?v1))) ))
(assert (forall ((?v0 Enat$)) (= (= zero$ ?v0) (= ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (= (= zero$a ?v0) (= ?v0 zero$a)) ))
(assert (forall ((?v0 Natural$)) (= (= zero$b ?v0) (= ?v0 zero$b)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$d (lzip$ ?v0 ?v1))) (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$j lnull$a ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 Natural_llist$)) (= (not (lnull$e (lzip$a ?v0 ?v1))) (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$k lnull$b ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (not (lnull$f (lzip$b ?v0 ?v1))) (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$h lnull$ ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$g (lzip$c ?v0 ?v1))) (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$j lnull$a ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Natural_llist$)) (= (not (lnull$h (lzip$d ?v0 ?v1))) (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$k lnull$b ?v1)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_llist$)) (= (not (lnull$i (lzip$e ?v0 ?v1))) (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$h lnull$ ?v1)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$j (lzip$f ?v0 ?v1))) (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$j lnull$a ?v1)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (= (not (fun_app$o lnull$c (lzip$g ?v0 ?v1))) (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$k lnull$b ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (fun_app$j lnull$a (lzip$h ?v0 ?v1))) (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$h lnull$ ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lnull$d (lzip$ ?v0 ?v1)) (or (fun_app$h lnull$ ?v0) (fun_app$j lnull$a ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 Natural_llist$)) (= (lnull$e (lzip$a ?v0 ?v1)) (or (fun_app$h lnull$ ?v0) (fun_app$k lnull$b ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (lnull$f (lzip$b ?v0 ?v1)) (or (fun_app$j lnull$a ?v0) (fun_app$h lnull$ ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lnull$g (lzip$c ?v0 ?v1)) (or (fun_app$j lnull$a ?v0) (fun_app$j lnull$a ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Natural_llist$)) (= (lnull$h (lzip$d ?v0 ?v1)) (or (fun_app$j lnull$a ?v0) (fun_app$k lnull$b ?v1))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_llist$)) (= (lnull$i (lzip$e ?v0 ?v1)) (or (fun_app$k lnull$b ?v0) (fun_app$h lnull$ ?v1))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_a_prod_llist$)) (= (lnull$j (lzip$f ?v0 ?v1)) (or (fun_app$k lnull$b ?v0) (fun_app$j lnull$a ?v1))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (= (fun_app$o lnull$c (lzip$g ?v0 ?v1)) (or (fun_app$k lnull$b ?v0) (fun_app$k lnull$b ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$j lnull$a (lzip$h ?v0 ?v1)) (or (fun_app$h lnull$ ?v0) (fun_app$h lnull$ ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (= (fun_app$b (ltake$a zero$) ?v0) lNil$a) ))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (= (fun_app$a (ltake$c zero$) ?v0) lNil$c) ))
(assert (forall ((?v0 A_llist$)) (= (fun_app$c (ltake$ zero$) ?v0) lNil$) ))
(assert (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod$)) (not (fun_app$j lnull$a (iterates$ ?v0 ?v1))) ))
(assert (forall ((?v0 Natural_natural_fun$) (?v1 Natural$)) (not (fun_app$k lnull$b (iterates$a ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (not (fun_app$h lnull$ (iterates$b ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$b (ltake$a ?v0) lNil$a) lNil$a) :pattern ((ltake$a ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$a (ltake$c ?v0) lNil$c) lNil$c) :pattern ((ltake$c ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$c (ltake$ ?v0) lNil$) lNil$) :pattern ((ltake$ ?v0)))))
(assert (= (fun_app$n llength$b lNil$) zero$))
(assert (= (fun_app$l llength$ lNil$a) zero$))
(assert (= (llength$c lNil$c) zero$))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (= (lhd$ (iterates$b ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod$)) (= (lhd$a (iterates$ ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 Natural_natural_prod_natural_natural_prod_fun$) (?v1 Natural_natural_prod$)) (= (lhd$c (iterates$c ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 Natural_natural_fun$) (?v1 Natural$)) (= (lhd$b (iterates$a ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (! (=> (or (fun_app$h lnull$ ?v0) (fun_app$j lnull$a ?v1)) (= (lzip$ ?v0 ?v1) lNil$d)) :pattern ((lzip$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 Natural_llist$)) (! (=> (or (fun_app$h lnull$ ?v0) (fun_app$k lnull$b ?v1)) (= (lzip$a ?v0 ?v1) lNil$e)) :pattern ((lzip$a ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (! (=> (or (fun_app$j lnull$a ?v0) (fun_app$h lnull$ ?v1)) (= (lzip$b ?v0 ?v1) lNil$f)) :pattern ((lzip$b ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (! (=> (or (fun_app$j lnull$a ?v0) (fun_app$j lnull$a ?v1)) (= (lzip$c ?v0 ?v1) lNil$g)) :pattern ((lzip$c ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Natural_llist$)) (! (=> (or (fun_app$j lnull$a ?v0) (fun_app$k lnull$b ?v1)) (= (lzip$d ?v0 ?v1) lNil$h)) :pattern ((lzip$d ?v0 ?v1)))))
(assert (forall ((?v0 Natural_llist$) (?v1 A_llist$)) (! (=> (or (fun_app$k lnull$b ?v0) (fun_app$h lnull$ ?v1)) (= (lzip$e ?v0 ?v1) lNil$i)) :pattern ((lzip$e ?v0 ?v1)))))
(assert (forall ((?v0 Natural_llist$) (?v1 A_a_prod_llist$)) (! (=> (or (fun_app$k lnull$b ?v0) (fun_app$j lnull$a ?v1)) (= (lzip$f ?v0 ?v1) lNil$j)) :pattern ((lzip$f ?v0 ?v1)))))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (! (=> (or (fun_app$k lnull$b ?v0) (fun_app$k lnull$b ?v1)) (= (lzip$g ?v0 ?v1) lNil$c)) :pattern ((lzip$g ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (or (fun_app$h lnull$ ?v0) (fun_app$h lnull$ ?v1)) (= (lzip$h ?v0 ?v1) lNil$a)) :pattern ((lzip$h ?v0 ?v1)))))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 Natural_natural_prod_bool_fun$)) (=> (and (=> (or (fun_app$o lnull$c ?v0) (not (fun_app$p ?v1 (lhd$c ?v0)))) false) (=> (and (not (fun_app$o lnull$c ?v0)) (fun_app$p ?v1 (lhd$c ?v0))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (and (=> (or (fun_app$j lnull$a ?v0) (not (fun_app$q ?v1 (lhd$a ?v0)))) false) (=> (and (not (fun_app$j lnull$a ?v0)) (fun_app$q ?v1 (lhd$a ?v0))) false)) false) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_bool_fun$)) (=> (and (=> (or (fun_app$k lnull$b ?v0) (not (fun_app$r ?v1 (lhd$b ?v0)))) false) (=> (and (not (fun_app$k lnull$b ?v0)) (fun_app$r ?v1 (lhd$b ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (fun_app$h lnull$ ?v0) (not (fun_app$s ?v1 (lhd$ ?v0)))) false) (=> (and (not (fun_app$h lnull$ ?v0)) (fun_app$s ?v1 (lhd$ ?v0))) false)) false) ))
(assert (fun_app$o lnull$c lNil$c))
(assert (fun_app$j lnull$a lNil$a))
(assert (fun_app$k lnull$b lNil$b))
(assert (fun_app$h lnull$ lNil$))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (=> (fun_app$o lnull$c ?v0) (= ?v0 lNil$c)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (fun_app$j lnull$a ?v0) (= ?v0 lNil$a)) ))
(assert (forall ((?v0 Natural_llist$)) (=> (fun_app$k lnull$b ?v0) (= ?v0 lNil$b)) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$h lnull$ ?v0) (= ?v0 lNil$)) ))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (=> (= ?v0 lNil$c) (fun_app$o lnull$c ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (= ?v0 lNil$a) (fun_app$j lnull$a ?v0)) ))
(assert (forall ((?v0 Natural_llist$)) (=> (= ?v0 lNil$b) (fun_app$k lnull$b ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (fun_app$h lnull$ ?v0)) ))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (! (= (fun_app$o lnull$c ?v0) (= ?v0 lNil$c)) :pattern ((fun_app$o lnull$c ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$j lnull$a ?v0) (= ?v0 lNil$a)) :pattern ((fun_app$j lnull$a ?v0)))))
(assert (forall ((?v0 Natural_llist$)) (! (= (fun_app$k lnull$b ?v0) (= ?v0 lNil$b)) :pattern ((fun_app$k lnull$b ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$h lnull$ ?v0) (= ?v0 lNil$)) :pattern ((fun_app$h lnull$ ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$j lnull$a ?v1))) (not (lnull$d (lzip$ ?v0 ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 Natural_llist$)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$k lnull$b ?v1))) (not (lnull$e (lzip$a ?v0 ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$h lnull$ ?v1))) (not (lnull$f (lzip$b ?v0 ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$j lnull$a ?v1))) (not (lnull$g (lzip$c ?v0 ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Natural_llist$)) (=> (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$k lnull$b ?v1))) (not (lnull$h (lzip$d ?v0 ?v1)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$h lnull$ ?v1))) (not (lnull$i (lzip$e ?v0 ?v1)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$j lnull$a ?v1))) (not (lnull$j (lzip$f ?v0 ?v1)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$k lnull$b ?v1))) (not (fun_app$o lnull$c (lzip$g ?v0 ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$h lnull$ ?v1))) (not (fun_app$j lnull$a (lzip$h ?v0 ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (or (fun_app$h lnull$ ?v0) (fun_app$j lnull$a ?v1)) (lnull$d (lzip$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 Natural_llist$)) (=> (or (fun_app$h lnull$ ?v0) (fun_app$k lnull$b ?v1)) (lnull$e (lzip$a ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (or (fun_app$j lnull$a ?v0) (fun_app$h lnull$ ?v1)) (lnull$f (lzip$b ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (or (fun_app$j lnull$a ?v0) (fun_app$j lnull$a ?v1)) (lnull$g (lzip$c ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Natural_llist$)) (=> (or (fun_app$j lnull$a ?v0) (fun_app$k lnull$b ?v1)) (lnull$h (lzip$d ?v0 ?v1))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_llist$)) (=> (or (fun_app$k lnull$b ?v0) (fun_app$h lnull$ ?v1)) (lnull$i (lzip$e ?v0 ?v1))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_a_prod_llist$)) (=> (or (fun_app$k lnull$b ?v0) (fun_app$j lnull$a ?v1)) (lnull$j (lzip$f ?v0 ?v1))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (or (fun_app$k lnull$b ?v0) (fun_app$k lnull$b ?v1)) (fun_app$o lnull$c (lzip$g ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (fun_app$h lnull$ ?v0) (fun_app$h lnull$ ?v1)) (fun_app$j lnull$a (lzip$h ?v0 ?v1))) ))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 Natural_natural_prod_bool_fun$)) (! (=> (or (fun_app$o lnull$c ?v0) (not (fun_app$p ?v1 (lhd$c ?v0)))) (= (ltakeWhile$ ?v1 ?v0) lNil$c)) :pattern ((ltakeWhile$ ?v1 ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (! (=> (or (fun_app$j lnull$a ?v0) (not (fun_app$q ?v1 (lhd$a ?v0)))) (= (ltakeWhile$a ?v1 ?v0) lNil$a)) :pattern ((ltakeWhile$a ?v1 ?v0)))))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_bool_fun$)) (! (=> (or (fun_app$k lnull$b ?v0) (not (fun_app$r ?v1 (lhd$b ?v0)))) (= (ltakeWhile$b ?v1 ?v0) lNil$b)) :pattern ((ltakeWhile$b ?v1 ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (or (fun_app$h lnull$ ?v0) (not (fun_app$s ?v1 (lhd$ ?v0)))) (= (ltakeWhile$c ?v1 ?v0) lNil$)) :pattern ((ltakeWhile$c ?v1 ?v0)))))
(assert (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod_llist$)) (= (fun_app$o lnull$c (ltakeWhile$ ?v0 ?v1)) (or (fun_app$o lnull$c ?v1) (not (fun_app$p ?v0 (lhd$c ?v1))))) ))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_llist$)) (= (fun_app$j lnull$a (ltakeWhile$a ?v0 ?v1)) (or (fun_app$j lnull$a ?v1) (not (fun_app$q ?v0 (lhd$a ?v1))))) ))
(assert (forall ((?v0 Natural_bool_fun$) (?v1 Natural_llist$)) (= (fun_app$k lnull$b (ltakeWhile$b ?v0 ?v1)) (or (fun_app$k lnull$b ?v1) (not (fun_app$r ?v0 (lhd$b ?v1))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$h lnull$ (ltakeWhile$c ?v0 ?v1)) (or (fun_app$h lnull$ ?v1) (not (fun_app$s ?v0 (lhd$ ?v1))))) ))
(assert (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod_llist$)) (= (not (fun_app$o lnull$c (ltakeWhile$ ?v0 ?v1))) (and (not (fun_app$o lnull$c ?v1)) (fun_app$p ?v0 (lhd$c ?v1)))) ))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_llist$)) (= (not (fun_app$j lnull$a (ltakeWhile$a ?v0 ?v1))) (and (not (fun_app$j lnull$a ?v1)) (fun_app$q ?v0 (lhd$a ?v1)))) ))
(assert (forall ((?v0 Natural_bool_fun$) (?v1 Natural_llist$)) (= (not (fun_app$k lnull$b (ltakeWhile$b ?v0 ?v1))) (and (not (fun_app$k lnull$b ?v1)) (fun_app$r ?v0 (lhd$b ?v1)))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (fun_app$h lnull$ (ltakeWhile$c ?v0 ?v1))) (and (not (fun_app$h lnull$ ?v1)) (fun_app$s ?v0 (lhd$ ?v1)))) ))
(assert (= (the_enat$ zero$) zero$a))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 Natural_natural_prod_bool_fun$)) (=> (and (not (fun_app$o lnull$c ?v0)) (fun_app$p ?v1 (lhd$c ?v0))) (not (fun_app$o lnull$c (ltakeWhile$ ?v1 ?v0)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (and (not (fun_app$j lnull$a ?v0)) (fun_app$q ?v1 (lhd$a ?v0))) (not (fun_app$j lnull$a (ltakeWhile$a ?v1 ?v0)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_bool_fun$)) (=> (and (not (fun_app$k lnull$b ?v0)) (fun_app$r ?v1 (lhd$b ?v0))) (not (fun_app$k lnull$b (ltakeWhile$b ?v1 ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$h lnull$ ?v0)) (fun_app$s ?v1 (lhd$ ?v0))) (not (fun_app$h lnull$ (ltakeWhile$c ?v1 ?v0)))) ))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 Natural_natural_prod_bool_fun$)) (=> (and (not (fun_app$o lnull$c ?v0)) (fun_app$p ?v1 (lhd$c ?v0))) (= (lhd$c (ltakeWhile$ ?v1 ?v0)) (lhd$c ?v0))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (and (not (fun_app$j lnull$a ?v0)) (fun_app$q ?v1 (lhd$a ?v0))) (= (lhd$a (ltakeWhile$a ?v1 ?v0)) (lhd$a ?v0))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_bool_fun$)) (=> (and (not (fun_app$k lnull$b ?v0)) (fun_app$r ?v1 (lhd$b ?v0))) (= (lhd$b (ltakeWhile$b ?v1 ?v0)) (lhd$b ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$h lnull$ ?v0)) (fun_app$s ?v1 (lhd$ ?v0))) (= (lhd$ (ltakeWhile$c ?v1 ?v0)) (lhd$ ?v0))) ))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 Natural_natural_prod_bool_fun$)) (=> (or (fun_app$o lnull$c ?v0) (not (fun_app$p ?v1 (lhd$c ?v0)))) (fun_app$o lnull$c (ltakeWhile$ ?v1 ?v0))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (or (fun_app$j lnull$a ?v0) (not (fun_app$q ?v1 (lhd$a ?v0)))) (fun_app$j lnull$a (ltakeWhile$a ?v1 ?v0))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_bool_fun$)) (=> (or (fun_app$k lnull$b ?v0) (not (fun_app$r ?v1 (lhd$b ?v0)))) (fun_app$k lnull$b (ltakeWhile$b ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (or (fun_app$h lnull$ ?v0) (not (fun_app$s ?v1 (lhd$ ?v0)))) (fun_app$h lnull$ (ltakeWhile$c ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_llist_a_llist_prod_set$)) (= (collect$a (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$h ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_bool_fun$)) (= (member$a ?v0 (collect$a ?v1)) (fun_app$i ?v1 ?v0)) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$k lnull$b ?v1))) (= (lhd$c (lzip$g ?v0 ?v1)) (pair$a (lhd$b ?v0) (lhd$b ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$h lnull$ ?v1))) (= (lhd$a (lzip$h ?v0 ?v1)) (pair$ (lhd$ ?v0) (lhd$ ?v1)))) ))
(assert (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (not (lnull$k ?v0)) (not (lnull$k ?v1))) (= (lhd$l (lzip$i ?v0 ?v1)) (pair$j (lhd$k ?v0) (lhd$k ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 Natural_llist$)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$k lnull$b ?v1))) (= (lhd$e (lzip$a ?v0 ?v1)) (pair$c (lhd$ ?v0) (lhd$b ?v1)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$h lnull$ ?v1))) (= (lhd$i (lzip$e ?v0 ?v1)) (pair$g (lhd$b ?v0) (lhd$ ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (not (lnull$l ?v0)) (not (lnull$l ?v1))) (= (lhd$n (lzip$j ?v0 ?v1)) (pair$i (lhd$m ?v0) (lhd$m ?v1)))) ))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$o lnull$c ?v0)) (not (fun_app$h lnull$ ?v1))) (= (lhd$o (lzip$k ?v0 ?v1)) (pair$k (lhd$c ?v0) (lhd$ ?v1)))) ))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 Natural_llist$)) (=> (and (not (fun_app$o lnull$c ?v0)) (not (fun_app$k lnull$b ?v1))) (= (lhd$p (lzip$l ?v0 ?v1)) (pair$l (lhd$c ?v0) (lhd$b ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 Natural_natural_prod_llist$)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$o lnull$c ?v1))) (= (lhd$q (lzip$m ?v0 ?v1)) (pair$m (lhd$ ?v0) (lhd$c ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$j lnull$a ?v1))) (= (lhd$d (lzip$ ?v0 ?v1)) (pair$b (lhd$ ?v0) (lhd$a ?v1)))) ))
(assert (forall ((?v0 A$)) (! (= (fun_app$h (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))))
(assert (forall ((?v0 A_a_prod$)) (! (= (fun_app$j (lmember$a ?v0) lNil$a) false) :pattern ((lmember$a ?v0)))))
(assert (forall ((?v0 Natural_natural_prod$)) (! (= (fun_app$o (lmember$b ?v0) lNil$c) false) :pattern ((lmember$b ?v0)))))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (= (= (pair$i ?v0 ?v1) (pair$i ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (= (= (pair$i ?v0 ?v1) (pair$i ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (= llength$b (gen_llength$ zero$a)))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (divides_aux$ (pair$j ?v0 ?v1)) (= ?v1 zero$a)) :pattern ((pair$j ?v0 ?v1)))))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 Natural_natural_prod_bool_fun$)) (=> (and (not (fun_app$o lnull$c ?v0)) (fun_app$p ?v1 (lhd$c ?v0))) (= (ltl$c (ltakeWhile$ ?v1 ?v0)) (ltakeWhile$ ?v1 (ltl$c ?v0)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (and (not (fun_app$j lnull$a ?v0)) (fun_app$q ?v1 (lhd$a ?v0))) (= (ltl$a (ltakeWhile$a ?v1 ?v0)) (ltakeWhile$a ?v1 (ltl$a ?v0)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_bool_fun$)) (=> (and (not (fun_app$k lnull$b ?v0)) (fun_app$r ?v1 (lhd$b ?v0))) (= (ltl$b (ltakeWhile$b ?v1 ?v0)) (ltakeWhile$b ?v1 (ltl$b ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$h lnull$ ?v0)) (fun_app$s ?v1 (lhd$ ?v0))) (= (ltl$ (ltakeWhile$c ?v1 ?v0)) (ltakeWhile$c ?v1 (ltl$ ?v0)))) ))
(assert (= zero$a zero$a))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$a) false) (=> (not (= ?v0 zero$a)) false)) false) ))
(assert (forall ((?v0 A_a_prod$)) (exists ((?v1 A$) (?v2 A$)) (= ?v0 (pair$ ?v1 ?v2)) ) ))
(assert (forall ((?v0 Nat_nat_prod$)) (exists ((?v1 Nat$) (?v2 Nat$)) (= ?v0 (pair$j ?v1 ?v2)) ) ))
(assert (forall ((?v0 A_llist_a_llist_prod$)) (exists ((?v1 A_llist$) (?v2 A_llist$)) (= ?v0 (pair$i ?v1 ?v2)) ) ))
(assert (forall ((?v0 Natural_natural_prod$)) (exists ((?v1 Natural$) (?v2 Natural$)) (= ?v0 (pair$a ?v1 ?v2)) ) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$j lnull$a ?v1))) (= (ltl$d (lzip$ ?v0 ?v1)) (lzip$ (ltl$ ?v0) (ltl$a ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 Natural_llist$)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$k lnull$b ?v1))) (= (ltl$e (lzip$a ?v0 ?v1)) (lzip$a (ltl$ ?v0) (ltl$b ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$h lnull$ ?v1))) (= (ltl$f (lzip$b ?v0 ?v1)) (lzip$b (ltl$a ?v0) (ltl$ ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$j lnull$a ?v1))) (= (ltl$g (lzip$c ?v0 ?v1)) (lzip$c (ltl$a ?v0) (ltl$a ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Natural_llist$)) (=> (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$k lnull$b ?v1))) (= (ltl$h (lzip$d ?v0 ?v1)) (lzip$d (ltl$a ?v0) (ltl$b ?v1)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$h lnull$ ?v1))) (= (ltl$i (lzip$e ?v0 ?v1)) (lzip$e (ltl$b ?v0) (ltl$ ?v1)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$j lnull$a ?v1))) (= (ltl$j (lzip$f ?v0 ?v1)) (lzip$f (ltl$b ?v0) (ltl$a ?v1)))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$k lnull$b ?v1))) (= (ltl$c (lzip$g ?v0 ?v1)) (lzip$g (ltl$b ?v0) (ltl$b ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$h lnull$ ?v1))) (= (ltl$a (lzip$h ?v0 ?v1)) (lzip$h (ltl$ ?v0) (ltl$ ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (fun_app$j lnull$a ?v0) (fun_app$j lnull$a (ltl$a ?v0))) ))
(assert (forall ((?v0 Natural_llist$)) (=> (fun_app$k lnull$b ?v0) (fun_app$k lnull$b (ltl$b ?v0))) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$h lnull$ ?v0) (fun_app$h lnull$ (ltl$ ?v0))) ))
(assert (= (ltl$b lNil$b) lNil$b))
(assert (= (ltl$ lNil$) lNil$))
(assert (= (ltl$a lNil$a) lNil$a))
(assert (= (ltl$c lNil$c) lNil$c))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (= (ltl$ (iterates$b ?v0 ?v1)) (iterates$b ?v0 (fun_app$t ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod$)) (= (ltl$a (iterates$ ?v0 ?v1)) (iterates$ ?v0 (fun_app$u ?v0 ?v1))) ))
(assert (forall ((?v0 Natural_natural_fun$) (?v1 Natural$)) (= (ltl$b (iterates$a ?v0 ?v1)) (iterates$a ?v0 (fun_app$v ?v0 ?v1))) ))
(assert (forall ((?v0 Natural_natural_prod_llist_natural_natural_prod_llist_bool_fun_fun$) (?v1 Natural_natural_prod_llist$) (?v2 Natural_natural_prod_llist$)) (=> (and (fun_app$o (fun_app$w ?v0 ?v1) ?v2) (forall ((?v3 Natural_natural_prod_llist$) (?v4 Natural_natural_prod_llist$)) (=> (fun_app$o (fun_app$w ?v0 ?v3) ?v4) (and (= (fun_app$o lnull$c ?v3) (fun_app$o lnull$c ?v4)) (=> (and (not (fun_app$o lnull$c ?v3)) (not (fun_app$o lnull$c ?v4))) (and (= (lhd$c ?v3) (lhd$c ?v4)) (fun_app$o (fun_app$w ?v0 (ltl$c ?v3)) (ltl$c ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_prod_llist_a_a_prod_llist_bool_fun_fun$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (=> (and (fun_app$j (fun_app$x ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_llist$) (?v4 A_a_prod_llist$)) (=> (fun_app$j (fun_app$x ?v0 ?v3) ?v4) (and (= (fun_app$j lnull$a ?v3) (fun_app$j lnull$a ?v4)) (=> (and (not (fun_app$j lnull$a ?v3)) (not (fun_app$j lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (fun_app$j (fun_app$x ?v0 (ltl$a ?v3)) (ltl$a ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Natural_llist_natural_llist_bool_fun_fun$) (?v1 Natural_llist$) (?v2 Natural_llist$)) (=> (and (fun_app$k (fun_app$y ?v0 ?v1) ?v2) (forall ((?v3 Natural_llist$) (?v4 Natural_llist$)) (=> (fun_app$k (fun_app$y ?v0 ?v3) ?v4) (and (= (fun_app$k lnull$b ?v3) (fun_app$k lnull$b ?v4)) (=> (and (not (fun_app$k lnull$b ?v3)) (not (fun_app$k lnull$b ?v4))) (and (= (lhd$b ?v3) (lhd$b ?v4)) (fun_app$k (fun_app$y ?v0 (ltl$b ?v3)) (ltl$b ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$h (fun_app$z ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$h (fun_app$z ?v0 ?v3) ?v4) (and (= (fun_app$h lnull$ ?v3) (fun_app$h lnull$ ?v4)) (=> (and (not (fun_app$h lnull$ ?v3)) (not (fun_app$h lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$h (fun_app$z ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Natural_natural_prod_llist_natural_natural_prod_llist_bool_fun_fun$) (?v1 Natural_natural_prod_llist$) (?v2 Natural_natural_prod_llist$)) (=> (and (fun_app$o (fun_app$w ?v0 ?v1) ?v2) (forall ((?v3 Natural_natural_prod_llist$) (?v4 Natural_natural_prod_llist$)) (=> (fun_app$o (fun_app$w ?v0 ?v3) ?v4) (and (= (fun_app$o lnull$c ?v3) (fun_app$o lnull$c ?v4)) (=> (and (not (fun_app$o lnull$c ?v3)) (not (fun_app$o lnull$c ?v4))) (and (= (lhd$c ?v3) (lhd$c ?v4)) (or (fun_app$o (fun_app$w ?v0 (ltl$c ?v3)) (ltl$c ?v4)) (= (ltl$c ?v3) (ltl$c ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_prod_llist_a_a_prod_llist_bool_fun_fun$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (=> (and (fun_app$j (fun_app$x ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_llist$) (?v4 A_a_prod_llist$)) (=> (fun_app$j (fun_app$x ?v0 ?v3) ?v4) (and (= (fun_app$j lnull$a ?v3) (fun_app$j lnull$a ?v4)) (=> (and (not (fun_app$j lnull$a ?v3)) (not (fun_app$j lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (or (fun_app$j (fun_app$x ?v0 (ltl$a ?v3)) (ltl$a ?v4)) (= (ltl$a ?v3) (ltl$a ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Natural_llist_natural_llist_bool_fun_fun$) (?v1 Natural_llist$) (?v2 Natural_llist$)) (=> (and (fun_app$k (fun_app$y ?v0 ?v1) ?v2) (forall ((?v3 Natural_llist$) (?v4 Natural_llist$)) (=> (fun_app$k (fun_app$y ?v0 ?v3) ?v4) (and (= (fun_app$k lnull$b ?v3) (fun_app$k lnull$b ?v4)) (=> (and (not (fun_app$k lnull$b ?v3)) (not (fun_app$k lnull$b ?v4))) (and (= (lhd$b ?v3) (lhd$b ?v4)) (or (fun_app$k (fun_app$y ?v0 (ltl$b ?v3)) (ltl$b ?v4)) (= (ltl$b ?v3) (ltl$b ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$h (fun_app$z ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$h (fun_app$z ?v0 ?v3) ?v4) (and (= (fun_app$h lnull$ ?v3) (fun_app$h lnull$ ?v4)) (=> (and (not (fun_app$h lnull$ ?v3)) (not (fun_app$h lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$h (fun_app$z ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 Natural_natural_prod_llist$)) (=> (and (= (fun_app$o lnull$c ?v0) (fun_app$o lnull$c ?v1)) (=> (and (not (fun_app$o lnull$c ?v0)) (not (fun_app$o lnull$c ?v1))) (and (= (lhd$c ?v0) (lhd$c ?v1)) (= (ltl$c ?v0) (ltl$c ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (= (fun_app$j lnull$a ?v0) (fun_app$j lnull$a ?v1)) (=> (and (not (fun_app$j lnull$a ?v0)) (not (fun_app$j lnull$a ?v1))) (and (= (lhd$a ?v0) (lhd$a ?v1)) (= (ltl$a ?v0) (ltl$a ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (and (= (fun_app$k lnull$b ?v0) (fun_app$k lnull$b ?v1)) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$k lnull$b ?v1))) (and (= (lhd$b ?v0) (lhd$b ?v1)) (= (ltl$b ?v0) (ltl$b ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (fun_app$h lnull$ ?v0) (fun_app$h lnull$ ?v1)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$h lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_prod$)) (=> (forall ((?v1 A$) (?v2 A$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 Nat_nat_prod$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (= ?v0 (pair$j ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod$)) (=> (forall ((?v1 A_llist$) (?v2 A_llist$)) (=> (= ?v0 (pair$i ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 Natural_natural_prod$)) (=> (forall ((?v1 Natural$) (?v2 Natural$)) (=> (= ?v0 (pair$a ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod$)) (=> (forall ((?v2 A$) (?v3 A$)) (fun_app$q ?v0 (pair$ ?v2 ?v3)) ) (fun_app$q ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_prod$)) (=> (forall ((?v2 Nat$) (?v3 Nat$)) (fun_app$aa ?v0 (pair$j ?v2 ?v3)) ) (fun_app$aa ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_bool_fun$) (?v1 A_llist_a_llist_prod$)) (=> (forall ((?v2 A_llist$) (?v3 A_llist$)) (fun_app$i ?v0 (pair$i ?v2 ?v3)) ) (fun_app$i ?v0 ?v1)) ))
(assert (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod$)) (=> (forall ((?v2 Natural$) (?v3 Natural$)) (fun_app$p ?v0 (pair$a ?v2 ?v3)) ) (fun_app$p ?v0 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (= (pair$i ?v0 ?v1) (pair$i ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (= (lzip$g ?v0 ?v1) (ite (or (fun_app$k lnull$b ?v0) (fun_app$k lnull$b ?v1)) lNil$c (lCons$c (pair$a (lhd$b ?v0) (lhd$b ?v1)) (lzip$g (ltl$b ?v0) (ltl$b ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lzip$h ?v0 ?v1) (ite (or (fun_app$h lnull$ ?v0) (fun_app$h lnull$ ?v1)) lNil$a (lCons$a (pair$ (lhd$ ?v0) (lhd$ ?v1)) (lzip$h (ltl$ ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (= (lzip$i ?v0 ?v1) (ite (or (lnull$k ?v0) (lnull$k ?v1)) lNil$l (lCons$l (pair$j (lhd$k ?v0) (lhd$k ?v1)) (lzip$i (ltl$k ?v0) (ltl$k ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 Natural_llist$)) (= (lzip$a ?v0 ?v1) (ite (or (fun_app$h lnull$ ?v0) (fun_app$k lnull$b ?v1)) lNil$e (lCons$e (pair$c (lhd$ ?v0) (lhd$b ?v1)) (lzip$a (ltl$ ?v0) (ltl$b ?v1))))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_llist$)) (= (lzip$e ?v0 ?v1) (ite (or (fun_app$k lnull$b ?v0) (fun_app$h lnull$ ?v1)) lNil$i (lCons$i (pair$g (lhd$b ?v0) (lhd$ ?v1)) (lzip$e (ltl$b ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (lzip$j ?v0 ?v1) (ite (or (lnull$l ?v0) (lnull$l ?v1)) lNil$n (lCons$n (pair$i (lhd$m ?v0) (lhd$m ?v1)) (lzip$j (ltl$m ?v0) (ltl$m ?v1))))) ))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 A_llist$)) (= (lzip$k ?v0 ?v1) (ite (or (fun_app$o lnull$c ?v0) (fun_app$h lnull$ ?v1)) lNil$o (lCons$o (pair$k (lhd$c ?v0) (lhd$ ?v1)) (lzip$k (ltl$c ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 Natural_llist$)) (= (lzip$l ?v0 ?v1) (ite (or (fun_app$o lnull$c ?v0) (fun_app$k lnull$b ?v1)) lNil$p (lCons$p (pair$l (lhd$c ?v0) (lhd$b ?v1)) (lzip$l (ltl$c ?v0) (ltl$b ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 Natural_natural_prod_llist$)) (= (lzip$m ?v0 ?v1) (ite (or (fun_app$h lnull$ ?v0) (fun_app$o lnull$c ?v1)) lNil$q (lCons$q (pair$m (lhd$ ?v0) (lhd$c ?v1)) (lzip$m (ltl$ ?v0) (ltl$c ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lzip$ ?v0 ?v1) (ite (or (fun_app$h lnull$ ?v0) (fun_app$j lnull$a ?v1)) lNil$d (lCons$d (pair$b (lhd$ ?v0) (lhd$a ?v1)) (lzip$ (ltl$ ?v0) (ltl$a ?v1))))) ))
(assert (= (size_natural$ zero$b) zero$a))
(assert (= llength$ (enat_unfold$ lnull$a uub$)))
(assert (= llength$a (enat_unfold$a lnull$b uuc$)))
(assert (= llength$b (enat_unfold$b lnull$ uud$)))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (= (unfold_llist$ lnull$c uue$ uuf$ ?v0) ?v0) ))
(assert (forall ((?v0 A_a_prod_llist$)) (= (unfold_llist$a lnull$a uug$ uub$ ?v0) ?v0) ))
(assert (forall ((?v0 Natural_llist$)) (= (unfold_llist$b lnull$b uuh$ uuc$ ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$)) (= (unfold_llist$c lnull$ uui$ uud$ ?v0) ?v0) ))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_llist$)) (= (ltakeWhile$a ?v0 ?v1) (ite (or (fun_app$j lnull$a ?v1) (not (fun_app$q ?v0 (lhd$a ?v1)))) lNil$a (lCons$a (lhd$a ?v1) (ltakeWhile$a ?v0 (ltl$a ?v1))))) ))
(assert (forall ((?v0 Natural_bool_fun$) (?v1 Natural_llist$)) (= (ltakeWhile$b ?v0 ?v1) (ite (or (fun_app$k lnull$b ?v1) (not (fun_app$r ?v0 (lhd$b ?v1)))) lNil$b (lCons$b (lhd$b ?v1) (ltakeWhile$b ?v0 (ltl$b ?v1))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (ltakeWhile$c ?v0 ?v1) (ite (or (fun_app$h lnull$ ?v1) (not (fun_app$s ?v0 (lhd$ ?v1)))) lNil$ (lCons$ (lhd$ ?v1) (ltakeWhile$c ?v0 (ltl$ ?v1))))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (and (not (fun_app$k lnull$b ?v0)) (not (fun_app$k lnull$b ?v1))) (= (lzip$g ?v0 ?v1) (lCons$c (pair$a (lhd$b ?v0) (lhd$b ?v1)) (lzip$g (ltl$b ?v0) (ltl$b ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$h lnull$ ?v0)) (not (fun_app$h lnull$ ?v1))) (= (lzip$h ?v0 ?v1) (lCons$a (pair$ (lhd$ ?v0) (lhd$ ?v1)) (lzip$h (ltl$ ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_llist$)) (=> (not (fun_app$h lnull$ ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 A_llist$)) (= (not (fun_app$h lnull$ ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (fun_app$h lnull$ ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (fun_app$h lnull$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$h lnull$ ?v0)) (fun_app$s ?v1 (lhd$ ?v0))) (= (ltakeWhile$c ?v1 ?v0) (lCons$ (lhd$ ?v0) (ltakeWhile$c ?v1 (ltl$ ?v0))))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (fun_app$c (ltake$ ?v0) ?v1) (ite (or (= ?v0 zero$) (fun_app$h lnull$ ?v1)) lNil$ (lCons$ (lhd$ ?v1) (fun_app$c (ltake$ (epred$ ?v0)) (ltl$ ?v1))))) ))
(assert (= (size$ zero$b) zero$a))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$)) (not (fun_app$h lnull$ ?v1))) (= (fun_app$c (ltake$ ?v0) ?v1) (lCons$ (lhd$ ?v1) (fun_app$c (ltake$ (epred$ ?v0)) (ltl$ ?v1))))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ab (fun_app$ac ?v0 ?v1) ?v2) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$ab (fun_app$ac ?v0 ?v3) ?v4) (and (= (= ?v3 zero$) (= ?v4 zero$)) (=> (and (not (= ?v3 zero$)) (not (= ?v4 zero$))) (or (fun_app$ab (fun_app$ac ?v0 (epred$ ?v3)) (epred$ ?v4)) (= (epred$ ?v3) (epred$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ab (fun_app$ac ?v0 ?v1) ?v2) (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$ab (fun_app$ac ?v0 ?v3) ?v4) (= (= ?v3 zero$) (= ?v4 zero$))) ) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (and (fun_app$ab (fun_app$ac ?v0 ?v3) ?v4) (and (not (= ?v3 zero$)) (not (= ?v4 zero$)))) (or (fun_app$ab (fun_app$ac ?v0 (epred$ ?v3)) (epred$ ?v4)) (= (epred$ ?v3) (epred$ ?v4)))) ))) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (not (= ?v0 zero$)) (not (= ?v1 zero$))) (= (= (epred$ ?v0) (epred$ ?v1)) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (= (= ?v0 zero$) (= ?v1 zero$)) (=> (and (not (= ?v0 zero$)) (not (= ?v1 zero$))) (= (epred$ ?v0) (epred$ ?v1)))) (= ?v0 ?v1)) ))
(assert (= (epred$ zero$) zero$))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$)) (not (fun_app$h lnull$ ?v1))) (= (ltl$ (fun_app$c (ltake$ ?v0) ?v1)) (fun_app$c (ltake$ (epred$ ?v0)) (ltl$ ?v1)))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Natural$)) (=> (and (=> (= ?v0 zero$b) false) (forall ((?v1 Natural$)) (=> (= ?v0 (suc$ ?v1)) false) )) false) ))
(assert (forall ((?v0 Natural$)) (not (= zero$b (suc$ ?v0))) ))
(assert (forall ((?v0 Natural$)) (not (= (suc$ ?v0) zero$b)) ))
(assert (forall ((?v0 Natural_natural_prod$)) (=> (and (forall ((?v1 Natural$)) (=> (= ?v0 (pair$a zero$b ?v1)) false) ) (forall ((?v1 Natural$) (?v2 Natural$)) (=> (= ?v0 (pair$a (suc$ ?v1) ?v2)) false) )) false) ))
(assert (forall ((?v0 Typerep$) (?v1 Typerep$)) (=> (not (= (size$a ?v0) (size$a ?v1))) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Literal$) (?v1 Literal$)) (=> (not (= (size$b ?v0) (size$b ?v1))) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nibble$) (?v1 Nibble$)) (=> (not (= (size$c ?v0) (size$c ?v1))) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Char$) (?v1 Char$)) (=> (not (= (size$d ?v0) (size$d ?v1))) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Bool) (?v1 Bool)) (=> (not (= (fun_app$ad size$e ?v0) (fun_app$ad size$e ?v1))) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$h (fun_app$z (llist_all2$ ?v0) ?v1) ?v2) (and (= (fun_app$h lnull$ ?v1) (fun_app$h lnull$ ?v2)) (=> (and (not (fun_app$h lnull$ ?v1)) (not (fun_app$h lnull$ ?v2))) (and (fun_app$s (fun_app$ae ?v0 (lhd$ ?v1)) (lhd$ ?v2)) (fun_app$h (fun_app$z (llist_all2$ ?v0) (ltl$ ?v1)) (ltl$ ?v2)))))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$z ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$h (fun_app$z ?v0 ?v4) ?v5) (and (= (fun_app$h lnull$ ?v4) (fun_app$h lnull$ ?v5)) (=> (and (not (fun_app$h lnull$ ?v4)) (not (fun_app$h lnull$ ?v5))) (and (fun_app$s (fun_app$ae ?v3 (lhd$ ?v4)) (lhd$ ?v5)) (fun_app$h (fun_app$z ?v0 (ltl$ ?v4)) (ltl$ ?v5)))))) )) (fun_app$h (fun_app$z (llist_all2$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 Char$)) (! (= (size$d ?v0) zero$a) :pattern ((size$d ?v0)))))
(assert (forall ((?v0 Nibble$)) (! (= (size$c ?v0) zero$a) :pattern ((size$c ?v0)))))
(assert (= (fun_app$ad size$e false) zero$a))
(assert (= (fun_app$ad size$e true) zero$a))
(assert (forall ((?v0 Literal$)) (! (= (size$b ?v0) zero$a) :pattern ((size$b ?v0)))))
(assert (forall ((?v0 Bool)) (! (= (fun_app$ad size$e ?v0) zero$a) :pattern ((fun_app$ad size$e ?v0)))))
(assert (forall ((?v0 Char$)) (! (= (size_char$ ?v0) zero$a) :pattern ((size_char$ ?v0)))))
(assert (= (size$c nibbleA$) zero$a))
(assert (= (fun_app$ad size_bool$ false) zero$a))
(assert (= (fun_app$ad size_bool$ true) zero$a))
(assert (= (size$c nibbleB$) zero$a))
(assert (= size_bool$ (rec_bool$ zero$a zero$a)))
(assert (= (size$c nibble8$) zero$a))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ad (rec_bool$ ?v0 ?v1) true) ?v0) :pattern ((rec_bool$ ?v0 ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ad (rec_bool$ ?v0 ?v1) false) ?v1) :pattern ((rec_bool$ ?v0 ?v1)))))
(assert (= size$e (rec_bool$ zero$a zero$a)))
(assert (= (size$c nibble0$) zero$a))
(assert (= (size$c nibbleD$) zero$a))
(assert (= (size$c nibbleC$) zero$a))
(assert (= (size$c nibble1$) zero$a))
(assert (= (size$c nibbleF$) zero$a))
(assert (= (size$c nibble3$) zero$a))
(assert (= (nibble_of_nat$ zero$a) nibble0$))
(assert (= (size_nibble$ nibbleA$) zero$a))
(assert (= (size$c nibble9$) zero$a))
(assert (forall ((?v0 Nibble$)) (! (= (size_nibble$ ?v0) zero$a) :pattern ((size_nibble$ ?v0)))))
(assert (= (size_nibble$ nibble9$) zero$a))
(assert (= (size_nibble$ nibble3$) zero$a))
(assert (= (size_nibble$ nibbleF$) zero$a))
(assert (= (size_nibble$ nibble1$) zero$a))
(assert (= (size_nibble$ nibbleC$) zero$a))
(assert (= (size_nibble$ nibbleD$) zero$a))
(assert (= (size_nibble$ nibble0$) zero$a))
(assert (= (size_nibble$ nibble8$) zero$a))
(assert (= (size_nibble$ nibbleB$) zero$a))
(assert (forall ((?v0 Nibble$) (?v1 Nibble$)) (! (= (size$d (char$ ?v0 ?v1)) zero$a) :pattern ((char$ ?v0 ?v1)))))
(assert (= (size$c nibble2$) zero$a))
(assert (= (size_nibble$ nibble2$) zero$a))
(assert (forall ((?v0 Nibble$) (?v1 Nibble$)) (! (= (size_char$ (char$ ?v0 ?v1)) zero$a) :pattern ((char$ ?v0 ?v1)))))
(assert (= (size$c nibble4$) zero$a))
(assert (= (size$c nibbleE$) zero$a))
(assert (= (size_nibble$ nibbleE$) zero$a))
(assert (= (size_nibble$ nibble4$) zero$a))
(assert (forall ((?v0 Typerep$)) (not (= (size$a ?v0) zero$a)) ))
(assert (= size$f (rec_unit$ zero$a)))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$h (fun_app$z ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$h (fun_app$z ?v0 ?v3) ?v4) (and (=> (fun_app$h lnull$ ?v4) (fun_app$h lnull$ ?v3)) (=> (and (not (fun_app$h lnull$ ?v3)) (not (fun_app$h lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$h (fun_app$z ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (fun_app$h (lprefix$ (ltl$ ?v3)) (ltl$ ?v4))))))) )) (fun_app$h (lprefix$ ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$h (lprefix$ ?v0) lNil$) (fun_app$h lnull$ ?v0)) :pattern ((lprefix$ ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist_a_llist_prod_set$)) (=> (and (member$a (pair$i ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (member$a (pair$i ?v3 ?v4) ?v2) (or (fun_app$h lnull$ ?v3) (exists ((?v5 A$) (?v6 A_llist$) (?v7 A_llist$)) (and (= ?v3 (lCons$ ?v5 ?v6)) (and (= ?v4 (lCons$ ?v5 ?v7)) (or (member$a (pair$i ?v6 ?v7) ?v2) (fun_app$h (lprefix$ ?v6) ?v7)))) ))) )) (fun_app$h (lprefix$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$h (lprefix$ ?v0) ?v1) (not (fun_app$h lnull$ ?v0))) (not (fun_app$h lnull$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$h (lprefix$ ?v0) ?v1) (fun_app$h lnull$ ?v1)) (fun_app$h lnull$ ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$h lnull$ ?v0) (= (fun_app$h (lprefix$ ?v1) ?v0) (fun_app$h lnull$ ?v1))) :pattern ((fun_app$h (lprefix$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$h lnull$ ?v0) (fun_app$h (lprefix$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$h (lprefix$ ?v0) ?v1) (not (fun_app$h lnull$ ?v0))) (= (lhd$ ?v0) (lhd$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (=> (not (fun_app$h lnull$ ?v0)) (and (not (fun_app$h lnull$ ?v1)) (and (= (lhd$ ?v0) (lhd$ ?v1)) (fun_app$h (lprefix$ (ltl$ ?v0)) (ltl$ ?v1))))) (fun_app$h (lprefix$ ?v0) ?v1)) ))
(assert (= size_unit$ (rec_unit$ zero$a)))
(assert (= (fun_app$af size_unit$ unity$) zero$a))
(assert (= (fun_app$af size$f unity$) zero$a))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$af (rec_unit$ ?v0) unity$) ?v0) :pattern ((rec_unit$ ?v0)))))
(assert (forall ((?v0 Unit$)) (=> (=> (= ?v0 unity$) false) false) ))
(assert (= default$ unity$))
(check-sat)
(exit)

