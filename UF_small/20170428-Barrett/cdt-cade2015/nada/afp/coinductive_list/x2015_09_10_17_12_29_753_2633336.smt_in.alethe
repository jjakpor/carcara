unsat
(assume a0 (forall ((?v0 A$) (?v1 A_llist$)) (= (fun_app$ (uu$ ?v0) ?v1) (lCons$ ?v0 ?v1))))
(assume a1 (! (not thesis$) :named @p_1))
(assume a2 (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lconcat$ xssa$) (lCons$ ?v0 ?v1)) thesis$)))
(assume a3 (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))))
(assume a4 (! (not (! (lnull$ (! (lconcat$ xssa$) :named @p_2)) :named @p_3)) :named @p_4))
(assume a5 (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$a (pred_llist$ ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (fun_app$a (pred_llist$ ?v0) ?v2)))))
(assume a6 (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$a (lmember$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$a (lmember$ ?v0) ?v2)))))
(assume a7 (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$a (lstrict_prefix$ ?v1) ?v3)))))
(assume a8 (forall ((?v0 A_llist$) (?v1 A$)) (= (fun_app$b (lsetp$ ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_llist$)) (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$b (lsetp$ ?v2) ?v3))))))))
(assume a9 (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (fun_app$b (lsetp$ ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2)) false)) (forall ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (=> (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$b (lsetp$ ?v2) ?v3))) false)))) false)))
(assume a10 (forall ((?v0 A_llist$) (?v1 A$) (?v2 A$)) (=> (fun_app$b (lsetp$ ?v0) ?v1) (fun_app$b (lsetp$ (lCons$ ?v2 ?v0)) ?v1))))
(assume a11 (forall ((?v0 A$) (?v1 A_llist$)) (fun_app$b (lsetp$ (lCons$ ?v0 ?v1)) ?v0)))
(assume a12 (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (= (llast$ (lCons$ ?v0 (lCons$ ?v1 ?v2))) (llast$ (lCons$ ?v1 ?v2)))))
(assume a13 (fun_app$c (less$ (! (enat$ zero$) :named @p_5)) (fun_app$d llength$ @p_2)))
(assume a14 (fun_app$c (less$ (enat$ n$)) (fun_app$d llength$ (lconcat$ xss$))))
(assume a15 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)))
(assume a16 (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) false)) false)))
(assume a17 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)))
(assume a18 (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)))
(assume a19 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$a (lstrict_prefix$ ?v0) ?v1) (fun_app$c (less$ (fun_app$d llength$ ?v0)) (fun_app$d llength$ ?v1)))))
(assume a20 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$a (lstrict_prefix$ ?v3) ?v2) (fun_app$a ?v0 ?v3))) (fun_app$a ?v0 ?v2))) (fun_app$a ?v0 ?v1))))
(assume a21 (forall ((?v0 A$) (?v1 A_llist$)) (= (llast$ (lCons$ ?v0 ?v1)) (ite (lnull$ ?v1) ?v0 (llast$ ?v1)))))
(assume a22 (forall ((?v0 A$) (?v1 A_llist$)) (not (lnull$ (lCons$ ?v0 ?v1)))))
(assume a23 (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (lnull$ ?v0)))))
(assume a24 (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))))
(assume a25 (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))))
(assume a26 (forall ((?v0 Enat$) (?v1 Nat$)) (=> (fun_app$c (less$ ?v0) (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))))
(assume a27 (not (fun_app$e (less$a zero$) zero$)))
(assume a28 (= llength$ (gen_llength$ zero$)))
(assume a29 (forall ((?v0 Nat$) (?v1 A_llist$)) (=> (fun_app$c (less$ (enat$ ?v0)) (fun_app$d llength$ ?v1)) (= (llast$ (fun_app$ (ldropn$ ?v0) ?v1)) (llast$ ?v1)))))
(assume a30 (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (=> (= (fun_app$ (ldropn$ ?v0) ?v1) (lCons$ ?v2 ?v3)) (fun_app$c (less$ (enat$ ?v0)) (fun_app$d llength$ ?v1)))))
(assume a31 (forall ((?v0 Nat$)) (= (size_enat$ (enat$ ?v0)) zero$)))
(assume a32 (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (forall ((?v2 Enat$)) (=> (forall ((?v3 Enat$)) (=> (fun_app$c (less$ ?v3) ?v2) (fun_app$c ?v0 ?v3))) (fun_app$c ?v0 ?v2))) (fun_app$c ?v0 ?v1))))
(assume a33 (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (fun_app$c (less$ ?v0) (fun_app$d llength$ ?v1)) (= (llast$ (fun_app$ (ldrop$ ?v0) ?v1)) (llast$ ?v1)))))
(assume a34 (forall ((?v0 Enat$)) (= (fun_app$c (less$ zero$a) ?v0) (not (= ?v0 zero$a)))))
(assume a35 (forall ((?v0 A_llist$)) (= (fun_app$ (ldrop$ zero$a) ?v0) ?v0)))
(assume a36 (forall ((?v0 A_llist$)) (=> (lnull$ ?v0) (= (fun_app$d llength$ ?v0) zero$a))))
(assume a37 (forall ((?v0 A_llist$)) (= (= (fun_app$d llength$ ?v0) zero$a) (lnull$ ?v0))))
(assume a38 (forall ((?v0 A_llist$)) (= (fun_app$ (ldropn$ zero$) ?v0) ?v0)))
(assume a39 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$c (less$ (enat$ ?v0)) (enat$ ?v1)) (fun_app$e (less$a ?v0) ?v1))))
(assume a40 (forall ((?v0 Nat$) (?v1 A_llist$)) (= (fun_app$ (ldrop$ (enat$ ?v0)) ?v1) (fun_app$ (ldropn$ ?v0) ?v1))))
(assume a41 (forall ((?v0 Enat$)) (not (fun_app$c (less$ ?v0) zero$a))))
(assume a42 (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (=> (or (= ?v0 zero$a) (lnull$ ?v1)) false) (=> (and (not (= ?v0 zero$a)) (not (lnull$ ?v1))) false)) false)))
(assume a43 (= zero$a @p_5))
(assume a44 (forall ((?v0 Nat$)) (= (= zero$a (enat$ ?v0)) (= ?v0 zero$))))
(assume a45 (forall ((?v0 Nat$)) (= (= (enat$ ?v0) zero$a) (= ?v0 zero$))))
(assume a46 (forall ((?v0 Enat$) (?v1 Nat$)) (=> (and (fun_app$c (less$ ?v0) (enat$ ?v1)) (forall ((?v2 Nat$)) (=> (and (= ?v0 (enat$ ?v2)) (fun_app$e (less$a ?v2) ?v1)) false))) false)))
(assume a47 (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))))
(assume a48 (forall ((?v0 Enat$)) (= (= zero$a ?v0) (= ?v0 zero$a))))
(assume a49 (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (=> (= (fun_app$ (ldrop$ ?v0) ?v1) (lCons$ ?v2 ?v3)) (fun_app$c (less$ ?v0) (fun_app$d llength$ ?v1)))))
(assume a50 (forall ((?v0 Nat$)) (= (fun_app$e (less$a ?v0) zero$) false)))
(assume a51 (forall ((?v0 Nat$)) (= (not (fun_app$e (less$a zero$) ?v0)) (= ?v0 zero$))))
(assume a52 (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$e (less$a zero$) ?v0))))
(assume a53 (forall ((?v0 Nat$)) (= (size$ (enat$ ?v0)) zero$)))
(assume a54 (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (ldropn$ ?v0) ?v1)) (fun_app$c (less_eq$ (fun_app$d llength$ ?v1)) (enat$ ?v0)))))
(assume a55 (forall ((?v0 Enat$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (ldrop$ ?v0) ?v1)) (fun_app$c (less_eq$ (fun_app$d llength$ ?v1)) ?v0))))
(assume a56 (forall ((?v0 Enat$)) (= (fun_app$c (less_eq$ ?v0) zero$a) (= ?v0 zero$a))))
(assume a57 (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (= ?v0 ?v1)) (or (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v0)))))
(assume a58 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (=> (fun_app$e (less$a ?v0) ?v1) (fun_app$e (fun_app$f ?v2 ?v1) ?v0)) (and (=> (= ?v0 ?v1) (fun_app$e (fun_app$f ?v2 ?v1) ?v0)) (=> (fun_app$e (less$a ?v1) ?v0) (fun_app$e (fun_app$f ?v2 ?v1) ?v0)))) (fun_app$e (fun_app$f ?v2 ?v1) ?v0))))
(assume a59 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (not (fun_app$e ?v0 ?v2)) (exists ((?v3 Nat$)) (and (fun_app$e (less$a ?v3) ?v2) (not (fun_app$e ?v0 ?v3)))))) (fun_app$e ?v0 ?v1))))
(assume a60 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$e (less$a ?v3) ?v2) (fun_app$e ?v0 ?v3))) (fun_app$e ?v0 ?v2))) (fun_app$e ?v0 ?v1))))
(assume a61 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (not (= ?v0 ?v1)))))
(assume a62 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (not (= ?v1 ?v0)))))
(assume a63 (forall ((?v0 Nat$)) (=> (fun_app$e (less$a ?v0) ?v0) false)))
(assume a64 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$e (less$a ?v0) ?v1) false) (=> (fun_app$e (less$a ?v1) ?v0) false))) false)))
(assume a65 (forall ((?v0 Enat$)) (fun_app$c (less_eq$ zero$a) ?v0)))
(assume a66 (forall ((?v0 Nat$)) (not (fun_app$e (less$a ?v0) ?v0))))
(assume a67 (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$c (less_eq$ ?v3) ?v4) (fun_app$c (fun_app$g ?v0 ?v3) ?v4))) (=> (fun_app$c (fun_app$g ?v0 ?v1) ?v2) (fun_app$c (fun_app$g ?v0 ?v2) ?v1))) (fun_app$c (fun_app$g ?v0 ?v2) ?v1))))
(assume a68 (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$e (less_eq$a ?v3) ?v4) (fun_app$e (fun_app$f ?v0 ?v3) ?v4))) (=> (fun_app$e (fun_app$f ?v0 ?v1) ?v2) (fun_app$e (fun_app$f ?v0 ?v2) ?v1))) (fun_app$e (fun_app$f ?v0 ?v2) ?v1))))
(assume a69 (fun_app$e (less_eq$a zero$) zero$))
(assume a70 (forall ((?v0 Enat$) (?v1 Nat$)) (=> (fun_app$c (less_eq$ ?v0) (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))))
(assume a71 (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)))
(assume a72 (forall ((?v0 Nat$)) (=> (=> (= ?v0 zero$) false) (fun_app$e (less$a zero$) ?v0))))
(assume a73 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (not (= ?v1 zero$)))))
(assume a74 (forall ((?v0 Nat$)) (=> (fun_app$e (less$a ?v0) zero$) false)))
(assume a75 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$e ?v0 zero$) (forall ((?v2 Nat$)) (=> (and (fun_app$e (less$a zero$) ?v2) (not (fun_app$e ?v0 ?v2))) (exists ((?v3 Nat$)) (and (fun_app$e (less$a ?v3) ?v2) (not (fun_app$e ?v0 ?v3))))))) (fun_app$e ?v0 ?v1))))
(assume a76 (forall ((?v0 Nat$)) (not (fun_app$e (less$a ?v0) zero$))))
(assume a77 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (forall ((?v2 Nat$)) (=> (fun_app$c (less$ ?v0) (enat$ ?v2)) (fun_app$c (less$ ?v1) (enat$ ?v2)))) (fun_app$c (less_eq$ ?v1) ?v0))))
(assume a78 (forall ((?v0 Enat$)) (fun_app$c (less_eq$ ?v0) ?v0)))
(assume a79 (forall ((?v0 Nat$)) (fun_app$e (less_eq$a ?v0) ?v0)))
(assume a80 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (fun_app$c (less_eq$ ?v0) ?v2) false))))))
(assume a81 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (fun_app$e (less_eq$a ?v0) ?v2) false))))))
(assume a82 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (fun_app$c (less_eq$ ?v2) ?v0) true))))))
(assume a83 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (fun_app$e (less_eq$a ?v2) ?v0) true))))))
(assume a84 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (fun_app$c (less_eq$ ?v0) ?v2) true))))))
(assume a85 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (fun_app$e (less_eq$a ?v0) ?v2) true))))))
(assume a86 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (fun_app$c (less_eq$ ?v2) ?v0) false))))))
(assume a87 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (fun_app$e (less_eq$a ?v2) ?v0) false))))))
(assume a88 (forall ((?v0 Nat$)) (fun_app$e (less_eq$a zero$) ?v0)))
(assume a89 (forall ((?v0 Nat$)) (= (fun_app$e (less_eq$a ?v0) zero$) (= ?v0 zero$))))
(assume a90 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$c (less_eq$ (enat$ ?v0)) (enat$ ?v1)) (fun_app$e (less_eq$a ?v0) ?v1))))
(assume a91 (forall ((?v0 Nat$)) (= (fun_app$e (less_eq$a zero$) ?v0) true)))
(assume a92 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (not (= ?v0 ?v1))) (fun_app$e (less$a ?v0) ?v1))))
(assume a93 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less_eq$a ?v0) ?v1))))
(assume a94 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (or (fun_app$e (less$a ?v0) ?v1) (= ?v0 ?v1)) (fun_app$e (less_eq$a ?v0) ?v1))))
(assume a95 (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$e (less$a ?v3) ?v4) (fun_app$e (less$a (fun_app$h ?v0 ?v3)) (fun_app$h ?v0 ?v4)))) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less_eq$a (fun_app$h ?v0 ?v1)) (fun_app$h ?v0 ?v2)))))
(assume a96 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$e (less_eq$a ?v0) ?v1) (or (fun_app$e (less$a ?v0) ?v1) (= ?v0 ?v1)))))
(assume a97 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less_eq$a ?v0) ?v1) (not (= ?v0 ?v1))))))
(assume a98 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (not (fun_app$e ?v0 zero$)) (fun_app$e ?v0 ?v1)) (exists ((?v2 Nat$)) (and (fun_app$e (less_eq$a ?v2) ?v1) (and (forall ((?v3 Nat$)) (=> (fun_app$e (less$a ?v3) ?v2) (not (fun_app$e ?v0 ?v3)))) (fun_app$e ?v0 ?v2)))))))
(assume a99 (forall ((?v0 Enat$) (?v1 Enat$)) (or (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v0))))
(assume a100 (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0))))
(assume a101 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less_eq$ ?v0) ?v1) (= (fun_app$c (less_eq$ ?v1) ?v0) (= ?v1 ?v0)))))
(assume a102 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (= (fun_app$e (less_eq$a ?v1) ?v0) (= ?v1 ?v0)))))
(assume a103 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v2)) (fun_app$c (less_eq$ ?v0) ?v2))))
(assume a104 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less_eq$a ?v0) ?v2))))
(assume a105 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v2) ?v0)) (fun_app$c (less_eq$ ?v2) ?v1))))
(assume a106 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v2) ?v0)) (fun_app$e (less_eq$a ?v2) ?v1))))
(assume a107 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v0)) (= ?v0 ?v1))))
(assume a108 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)) (= ?v0 ?v1))))
(assume a109 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v0)) (= ?v1 ?v0))))
(assume a110 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)) (= ?v1 ?v0))))
(assume a111 (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) (fun_app$i ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5)))))) (fun_app$c (less_eq$ ?v0) (fun_app$i ?v1 ?v3)))))
(assume a112 (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$c (less_eq$ ?v0) (fun_app$j ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5)))))) (fun_app$c (less_eq$ ?v0) (fun_app$j ?v1 ?v3)))))
(assume a113 (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$e (less_eq$a ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5)))))) (fun_app$e (less_eq$a ?v0) (fun_app$k ?v1 ?v3)))))
(assume a114 (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) (fun_app$h ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5)))))) (fun_app$e (less_eq$a ?v0) (fun_app$h ?v1 ?v3)))))
(assume a115 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (fun_app$c (less_eq$ (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5)))))) (fun_app$c (less_eq$ (fun_app$i ?v2 ?v0)) ?v3))))
(assume a116 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (fun_app$e (less_eq$a (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5)))))) (fun_app$e (less_eq$a (fun_app$k ?v2 ?v0)) ?v3))))
(assume a117 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (fun_app$c (less_eq$ (fun_app$j ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5)))))) (fun_app$c (less_eq$ (fun_app$j ?v2 ?v0)) ?v3))))
(assume a118 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (fun_app$e (less_eq$a (fun_app$h ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5)))))) (fun_app$e (less_eq$a (fun_app$h ?v2 ?v0)) ?v3))))
(assume a119 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$c (less_eq$ ?v0) ?v2))))
(assume a120 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (= ?v1 ?v2)) (fun_app$e (less_eq$a ?v0) ?v2))))
(assume a121 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (= (fun_app$i ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5)))))) (fun_app$c (less_eq$ (fun_app$i ?v2 ?v0)) ?v3))))
(assume a122 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (= (fun_app$k ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5)))))) (fun_app$e (less_eq$a (fun_app$k ?v2 ?v0)) ?v3))))
(assume a123 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (= (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5)))))) (fun_app$c (less_eq$ (fun_app$j ?v2 ?v0)) ?v3))))
(assume a124 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (= (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5)))))) (fun_app$e (less_eq$a (fun_app$h ?v2 ?v0)) ?v3))))
(assume a125 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 ?v1) (fun_app$c (less_eq$ ?v0) ?v1))))
(assume a126 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$e (less_eq$a ?v0) ?v1))))
(assume a127 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$c (less_eq$ ?v1) ?v2)) (fun_app$c (less_eq$ ?v0) ?v2))))
(assume a128 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less_eq$a ?v0) ?v2))))
(assume a129 (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5)))))) (fun_app$c (less_eq$ ?v0) (fun_app$i ?v1 ?v3)))))
(assume a130 (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5)))))) (fun_app$e (less_eq$a ?v0) (fun_app$k ?v1 ?v3)))))
(assume a131 (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5)))))) (fun_app$c (less_eq$ ?v0) (fun_app$j ?v1 ?v3)))))
(assume a132 (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5)))))) (fun_app$e (less_eq$a ?v0) (fun_app$h ?v1 ?v3)))))
(assume a133 (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$c (less_eq$ ?v3) ?v4) (fun_app$c (fun_app$g ?v0 ?v3) ?v4))) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$c (fun_app$g ?v0 ?v4) ?v3) (fun_app$c (fun_app$g ?v0 ?v3) ?v4)))) (fun_app$c (fun_app$g ?v0 ?v1) ?v2))))
(assume a134 (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$e (less_eq$a ?v3) ?v4) (fun_app$e (fun_app$f ?v0 ?v3) ?v4))) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$e (fun_app$f ?v0 ?v4) ?v3) (fun_app$e (fun_app$f ?v0 ?v3) ?v4)))) (fun_app$e (fun_app$f ?v0 ?v1) ?v2))))
(assume a135 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (=> (fun_app$c (less_eq$ ?v0) ?v1) false) (=> (fun_app$c (less_eq$ ?v1) ?v0) false)) false)))
(assume a136 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$e (less_eq$a ?v0) ?v1) false) (=> (fun_app$e (less_eq$a ?v1) ?v0) false)) false)))
(assume a137 (forall ((?v0 Enat$) (?v1 Enat$)) (= (= ?v0 ?v1) (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v0)))))
(assume a138 (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)))))
(assume a139 (forall ((?v0 Enat$)) (not (fun_app$c (less$ ?v0) ?v0))))
(assume a140 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (fun_app$c (less$ ?v0) ?v2) false))))))
(assume a141 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (fun_app$e (less$a ?v0) ?v2) false))))))
(assume a142 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (fun_app$c (less$ ?v2) ?v0) true))))))
(assume a143 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (fun_app$e (less$a ?v2) ?v0) true))))))
(assume a144 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (not (= ?v2 ?v0)) true))))))
(assume a145 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (not (= ?v2 ?v0)) true))))))
(assume a146 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (= ?v2 ?v0) false))))))
(assume a147 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (= ?v2 ?v0) false))))))
(assume a148 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (fun_app$c (less$ ?v0) ?v2) true))))))
(assume a149 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (fun_app$e (less$a ?v0) ?v2) true))))))
(assume a150 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (fun_app$c (less$ ?v2) ?v0) false))))))
(assume a151 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (fun_app$e (less$a ?v2) ?v0) false))))))
(assume a152 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (not (= ?v2 ?v0)) true))))))
(assume a153 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (not (= ?v2 ?v0)) true))))))
(assume a154 (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (= ?v2 ?v0) false))))))
(assume a155 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (= ?v2 ?v0) false))))))
(assume a156 (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (fun_app$e (less$a ?v0) ?v1))))
(assume a157 (forall ((?v0 Enat$) (?v1 Enat$)) (or (fun_app$c (less$ ?v0) ?v1) (or (= ?v0 ?v1) (fun_app$c (less$ ?v1) ?v0)))))
(assume a158 (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$e (less$a ?v0) ?v1) (or (= ?v0 ?v1) (fun_app$e (less$a ?v1) ?v0)))))
(assume a159 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (not (fun_app$c (less$ ?v0) ?v1)) (= (not (fun_app$c (less$ ?v1) ?v0)) (= ?v1 ?v0)))))
(assume a160 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$e (less$a ?v0) ?v1)) (= (not (fun_app$e (less$a ?v1) ?v0)) (= ?v1 ?v0)))))
(assume a161 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$c (less$ ?v0) ?v1) false) (=> (fun_app$c (less$ ?v1) ?v0) false))) false)))
(assume a162 (forall ((?v0 Enat_bool_fun$) (?v1 Enat_bool_fun$) (?v2 Enat_bool_fun$) (?v3 Enat_bool_fun$)) (=> (and (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (fun_app$c ?v0 ?v5) (fun_app$c ?v1 ?v5))))) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (fun_app$c ?v2 ?v5) (fun_app$c ?v3 ?v5)))))) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (or (fun_app$c ?v0 ?v5) (fun_app$c ?v2 ?v5)) (or (fun_app$c ?v1 ?v5) (fun_app$c ?v3 ?v5)))))))))
(assume a163 (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (fun_app$e ?v0 ?v5) (fun_app$e ?v1 ?v5))))) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (fun_app$e ?v2 ?v5) (fun_app$e ?v3 ?v5)))))) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (or (fun_app$e ?v0 ?v5) (fun_app$e ?v2 ?v5)) (or (fun_app$e ?v1 ?v5) (fun_app$e ?v3 ?v5)))))))))
(assume a164 (forall ((?v0 Enat_bool_fun$) (?v1 Enat_bool_fun$) (?v2 Enat_bool_fun$) (?v3 Enat_bool_fun$)) (=> (and (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (fun_app$c ?v0 ?v5) (fun_app$c ?v1 ?v5))))) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (fun_app$c ?v2 ?v5) (fun_app$c ?v3 ?v5)))))) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (and (fun_app$c ?v0 ?v5) (fun_app$c ?v2 ?v5)) (and (fun_app$c ?v1 ?v5) (fun_app$c ?v3 ?v5)))))))))
(assume a165 (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (fun_app$e ?v0 ?v5) (fun_app$e ?v1 ?v5))))) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (fun_app$e ?v2 ?v5) (fun_app$e ?v3 ?v5)))))) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (and (fun_app$e ?v0 ?v5) (fun_app$e ?v2 ?v5)) (and (fun_app$e ?v1 ?v5) (fun_app$e ?v3 ?v5)))))))))
(assume a166 (forall ((?v0 Enat_bool_fun$) (?v1 Enat_bool_fun$) (?v2 Enat_bool_fun$) (?v3 Enat_bool_fun$)) (=> (and (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (fun_app$c ?v0 ?v5) (fun_app$c ?v1 ?v5))))) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (fun_app$c ?v2 ?v5) (fun_app$c ?v3 ?v5)))))) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (or (fun_app$c ?v0 ?v5) (fun_app$c ?v2 ?v5)) (or (fun_app$c ?v1 ?v5) (fun_app$c ?v3 ?v5)))))))))
(assume a167 (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (fun_app$e ?v0 ?v5) (fun_app$e ?v1 ?v5))))) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (fun_app$e ?v2 ?v5) (fun_app$e ?v3 ?v5)))))) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (or (fun_app$e ?v0 ?v5) (fun_app$e ?v2 ?v5)) (or (fun_app$e ?v1 ?v5) (fun_app$e ?v3 ?v5)))))))))
(assume a168 (forall ((?v0 Enat_bool_fun$) (?v1 Enat_bool_fun$) (?v2 Enat_bool_fun$) (?v3 Enat_bool_fun$)) (=> (and (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (fun_app$c ?v0 ?v5) (fun_app$c ?v1 ?v5))))) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (fun_app$c ?v2 ?v5) (fun_app$c ?v3 ?v5)))))) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (and (fun_app$c ?v0 ?v5) (fun_app$c ?v2 ?v5)) (and (fun_app$c ?v1 ?v5) (fun_app$c ?v3 ?v5)))))))))
(assume a169 (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (fun_app$e ?v0 ?v5) (fun_app$e ?v1 ?v5))))) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (fun_app$e ?v2 ?v5) (fun_app$e ?v3 ?v5)))))) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (and (fun_app$e ?v0 ?v5) (fun_app$e ?v2 ?v5)) (and (fun_app$e ?v1 ?v5) (fun_app$e ?v3 ?v5)))))))))
(assume a170 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (not (fun_app$c (less$ ?v1) ?v0)))))
(assume a171 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (not (fun_app$e (less$a ?v1) ?v0)))))
(assume a172 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (not (= ?v0 ?v1)))))
(assume a173 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (not (= ?v1 ?v0)))))
(assume a174 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (= (not (fun_app$c (less$ ?v1) ?v0)) true))))
(assume a175 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (= (not (fun_app$e (less$a ?v1) ?v0)) true))))
(assume a176 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Bool)) (=> (fun_app$c (less$ ?v0) ?v1) (= (=> (fun_app$c (less$ ?v1) ?v0) ?v2) true))))
(assume a177 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Bool)) (=> (fun_app$e (less$a ?v0) ?v1) (= (=> (fun_app$e (less$a ?v1) ?v0) ?v2) true))))
(assume a178 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (= (= ?v0 ?v1) false))))
(assume a179 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (= (= ?v0 ?v1) false))))
(assume a180 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (= (= ?v1 ?v0) false))))
(assume a181 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (= (= ?v1 ?v0) false))))
(assume a182 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v0)) false)))
(assume a183 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v0)) false)))
(assume a184 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v2)) (fun_app$c (less$ ?v0) ?v2))))
(assume a185 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v2)) (fun_app$e (less$a ?v0) ?v2))))
(assume a186 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less$ ?v2) ?v0)) (fun_app$c (less$ ?v2) ?v1))))
(assume a187 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v2) ?v0)) (fun_app$e (less$a ?v2) ?v1))))
(assume a188 (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5)))))) (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v3)))))
(assume a189 (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5)))))) (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v3)))))
(assume a190 (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5)))))) (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v3)))))
(assume a191 (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5)))))) (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v3)))))
(assume a192 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c (less$ (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5)))))) (fun_app$c (less$ (fun_app$i ?v2 ?v0)) ?v3))))
(assume a193 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (fun_app$e (less$a (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5)))))) (fun_app$e (less$a (fun_app$k ?v2 ?v0)) ?v3))))
(assume a194 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (fun_app$c (less$ (fun_app$j ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5)))))) (fun_app$c (less$ (fun_app$j ?v2 ?v0)) ?v3))))
(assume a195 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less$a (fun_app$h ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5)))))) (fun_app$e (less$a (fun_app$h ?v2 ?v0)) ?v3))))
(assume a196 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$c (less$ ?v0) ?v2))))
(assume a197 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (= ?v1 ?v2)) (fun_app$e (less$a ?v0) ?v2))))
(assume a198 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (= (fun_app$i ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5)))))) (fun_app$c (less$ (fun_app$i ?v2 ?v0)) ?v3))))
(assume a199 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (= (fun_app$k ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5)))))) (fun_app$e (less$a (fun_app$k ?v2 ?v0)) ?v3))))
(assume a200 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (= (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5)))))) (fun_app$c (less$ (fun_app$j ?v2 ?v0)) ?v3))))
(assume a201 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (= (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5)))))) (fun_app$e (less$a (fun_app$h ?v2 ?v0)) ?v3))))
(assume a202 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (=> (not false) (fun_app$c (less$ ?v1) ?v0))) false)))
(assume a203 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (=> (not false) (fun_app$e (less$a ?v1) ?v0))) false)))
(assume a204 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$c (less$ ?v1) ?v2)) (fun_app$c (less$ ?v0) ?v2))))
(assume a205 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$e (less$a ?v1) ?v2)) (fun_app$e (less$a ?v0) ?v2))))
(assume a206 (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5)))))) (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v3)))))
(assume a207 (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5)))))) (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v3)))))
(assume a208 (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5)))))) (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v3)))))
(assume a209 (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5)))))) (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v3)))))
(assume a210 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (=> (fun_app$c (less$ ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$c (less$ ?v1) ?v0) false))) false)))
(assume a211 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$e (less$a ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$e (less$a ?v1) ?v0) false))) false)))
(assume a212 (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (fun_app$c (less$ ?v0) ?v1)) (or (fun_app$c (less$ ?v1) ?v0) (= ?v0 ?v1)))))
(assume a213 (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$e (less$a ?v0) ?v1)) (or (fun_app$e (less$a ?v1) ?v0) (= ?v0 ?v1)))))
(assume a214 (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (= ?v0 ?v1)) (or (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v0)))))
(assume a215 (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$a) false) (=> (not (= ?v0 zero$a)) false)) false)))
(assume a216 (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c (less_eq$ ?v0) ?v1) (not (= ?v1 ?v0))))))
(assume a217 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less_eq$a ?v0) ?v1) (not (= ?v1 ?v0))))))
(assume a218 (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1))))))
(assume a219 (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c (less_eq$ ?v0) ?v1) (not (fun_app$c (less_eq$ ?v1) ?v0))))))
(assume a220 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less_eq$a ?v0) ?v1) (not (fun_app$e (less_eq$a ?v1) ?v0))))))
(assume a221 (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$c (less_eq$ ?v0) ?v1) (or (fun_app$c (less$ ?v0) ?v1) (= ?v1 ?v0)))))
(assume a222 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$e (less_eq$a ?v0) ?v1) (or (fun_app$e (less$a ?v0) ?v1) (= ?v1 ?v0)))))
(assume a223 (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$c (less_eq$ ?v0) ?v1) (or (fun_app$c (less$ ?v0) ?v1) (= ?v0 ?v1)))))
(assume a224 (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (fun_app$c (less$ ?v0) ?v1)) (fun_app$c (less_eq$ ?v1) ?v0))))
(assume a225 (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$e (less$a ?v0) ?v1)) (fun_app$e (less_eq$a ?v1) ?v0))))
(assume a226 (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (fun_app$c (less_eq$ ?v0) ?v1)) (fun_app$c (less$ ?v1) ?v0))))
(assume a227 (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$e (less_eq$a ?v0) ?v1)) (fun_app$e (less$a ?v1) ?v0))))
(assume a228 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c (less_eq$ (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5)))))) (fun_app$c (less$ (fun_app$i ?v2 ?v0)) ?v3))))
(assume a229 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (fun_app$c (less_eq$ (fun_app$j ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5)))))) (fun_app$c (less$ (fun_app$j ?v2 ?v0)) ?v3))))
(assume a230 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (fun_app$e (less_eq$a (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5)))))) (fun_app$e (less$a (fun_app$k ?v2 ?v0)) ?v3))))
(assume a231 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less_eq$a (fun_app$h ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5)))))) (fun_app$e (less$a (fun_app$h ?v2 ?v0)) ?v3))))
(assume a232 (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5)))))) (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v3)))))
(assume a233 (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5)))))) (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v3)))))
(assume a234 (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5)))))) (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v3)))))
(assume a235 (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5)))))) (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v3)))))
(assume a236 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less_eq$ ?v2) ?v0)) (fun_app$c (less$ ?v2) ?v1))))
(assume a237 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less_eq$a ?v2) ?v0)) (fun_app$e (less$a ?v2) ?v1))))
(assume a238 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v2)) (fun_app$c (less$ ?v0) ?v2))))
(assume a239 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less$a ?v0) ?v2))))
(assume a240 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less_eq$ ?v0) ?v1))))
(assume a241 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (fun_app$c (less$ (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5)))))) (fun_app$c (less$ (fun_app$i ?v2 ?v0)) ?v3))))
(assume a242 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (fun_app$e (less$a (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5)))))) (fun_app$e (less$a (fun_app$k ?v2 ?v0)) ?v3))))
(assume a243 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (fun_app$c (less$ (fun_app$j ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5)))))) (fun_app$c (less$ (fun_app$j ?v2 ?v0)) ?v3))))
(assume a244 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (fun_app$e (less$a (fun_app$h ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5)))))) (fun_app$e (less$a (fun_app$h ?v2 ?v0)) ?v3))))
(assume a245 (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) (fun_app$i ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5)))))) (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v3)))))
(assume a246 (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$c (less_eq$ ?v0) (fun_app$j ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5)))))) (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v3)))))
(assume a247 (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$e (less_eq$a ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5)))))) (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v3)))))
(assume a248 (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) (fun_app$h ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5)))))) (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v3)))))
(assume a249 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less$ ?v2) ?v0)) (fun_app$c (less$ ?v2) ?v1))))
(assume a250 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less$a ?v2) ?v0)) (fun_app$e (less$a ?v2) ?v1))))
(assume a251 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v2)) (fun_app$c (less$ ?v0) ?v2))))
(assume a252 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v2)) (fun_app$e (less$a ?v0) ?v2))))
(assume a253 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1))) (fun_app$c (less$ ?v0) ?v1))))
(assume a254 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less_eq$ ?v0) ?v1) (= (not (fun_app$c (less$ ?v0) ?v1)) (= ?v0 ?v1)))))
(assume a255 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (= (not (fun_app$e (less$a ?v0) ?v1)) (= ?v0 ?v1)))))
(assume a256 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less_eq$ ?v0) ?v1) (or (fun_app$c (less$ ?v0) ?v1) (= ?v0 ?v1)))))
(assume a257 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (or (fun_app$e (less$a ?v0) ?v1) (= ?v0 ?v1)))))
(assume a258 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less_eq$ ?v0) ?v1) (not (fun_app$c (less$ ?v1) ?v0)))))
(assume a259 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (not (fun_app$e (less$a ?v1) ?v0)))))
(assume a260 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (not (= ?v0 ?v1)) (fun_app$c (less_eq$ ?v0) ?v1)) (fun_app$c (less$ ?v0) ?v1))))
(assume a261 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (fun_app$e (less_eq$a ?v0) ?v1)) (fun_app$e (less$a ?v0) ?v1))))
(assume a262 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (not (fun_app$c (less$ ?v0) ?v1)) (= (fun_app$c (less_eq$ ?v0) ?v1) (= ?v0 ?v1)))))
(assume a263 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$e (less$a ?v0) ?v1)) (= (fun_app$e (less_eq$a ?v0) ?v1) (= ?v0 ?v1)))))
(assume a264 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (not (fun_app$c (less$ ?v0) ?v1)) (fun_app$c (less_eq$ ?v1) ?v0))))
(assume a265 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$e (less$a ?v0) ?v1)) (fun_app$e (less_eq$a ?v1) ?v0))))
(assume a266 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (not (fun_app$c (less_eq$ ?v0) ?v1)) (fun_app$c (less$ ?v1) ?v0))))
(assume a267 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$e (less_eq$a ?v0) ?v1)) (fun_app$e (less$a ?v1) ?v0))))
(assume a268 (forall ((?v0 Enat$) (?v1 Enat$)) (or (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v0))))
(assume a269 (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v0))))
(assume a270 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_bool_fun$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c ?v2 ?v0) (not (fun_app$c ?v2 ?v1)))) (exists ((?v3 Enat$)) (and (fun_app$c (less_eq$ ?v0) ?v3) (and (fun_app$c (less_eq$ ?v3) ?v1) (and (forall ((?v4 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v4) (fun_app$c (less$ ?v4) ?v3)) (fun_app$c ?v2 ?v4))) (forall ((?v4 Enat$)) (=> (forall ((?v5 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v5) (fun_app$c (less$ ?v5) ?v4)) (fun_app$c ?v2 ?v5))) (fun_app$c (less_eq$ ?v4) ?v3))))))))))
(assume a271 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e ?v2 ?v0) (not (fun_app$e ?v2 ?v1)))) (exists ((?v3 Nat$)) (and (fun_app$e (less_eq$a ?v0) ?v3) (and (fun_app$e (less_eq$a ?v3) ?v1) (and (forall ((?v4 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v4) (fun_app$e (less$a ?v4) ?v3)) (fun_app$e ?v2 ?v4))) (forall ((?v4 Nat$)) (=> (forall ((?v5 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v5) (fun_app$e (less$a ?v5) ?v4)) (fun_app$e ?v2 ?v5))) (fun_app$e (less_eq$a ?v4) ?v3))))))))))
(assume a272 (= (the_enat$ zero$a) zero$))
(assume a273 (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 Nat$)) (=> (fun_app$c (less_eq$ (enat$ ?v0)) (fun_app$d llength$ ?v1)) (fun_app$c (less_eq$ (enat$ (fun_app$h (minus$ ?v0) ?v2))) (fun_app$d llength$ (fun_app$ (ldropn$ ?v2) ?v1))))))
(assume a274 (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (=> (fun_app$c (less_eq$ (llength$a ?v0)) (enat$ ?v1)) (= (fun_app$l (ldropn$a ?v1) ?v0) lNil$a))))
(assume a275 (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (fun_app$c (less_eq$ (fun_app$d llength$ ?v0)) (enat$ ?v1)) (= (fun_app$ (ldropn$ ?v1) ?v0) lNil$))))
(assume a276 (forall ((?v0 Nat$) (?v1 A_llist_llist$)) (= (= (fun_app$l (ldropn$a ?v0) ?v1) lNil$a) (fun_app$c (less_eq$ (llength$a ?v1)) (enat$ ?v0)))))
(assume a277 (forall ((?v0 Nat$) (?v1 A_llist$)) (= (= (fun_app$ (ldropn$ ?v0) ?v1) lNil$) (fun_app$c (less_eq$ (fun_app$d llength$ ?v1)) (enat$ ?v0)))))
(assume a278 (forall ((?v0 Nat$)) (= (fun_app$h (minus$ ?v0) zero$) ?v0)))
(assume a279 (forall ((?v0 Nat$)) (= (fun_app$h (minus$ ?v0) ?v0) zero$)))
(assume a280 (forall ((?v0 Nat$)) (= (fun_app$h (minus$ zero$) ?v0) zero$)))
(assume a281 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (= (fun_app$h (minus$ ?v1) (fun_app$h (minus$ ?v1) ?v0)) ?v0))))
(assume a282 (forall ((?v0 Enat$)) (= (fun_app$ (ldrop$ ?v0) lNil$) lNil$)))
(assume a283 (forall ((?v0 Enat$)) (= (fun_app$l (ldrop$a ?v0) lNil$a) lNil$a)))
(assume a284 (forall ((?v0 Nat$)) (= (fun_app$ (ldropn$ ?v0) lNil$) lNil$)))
(assume a285 (forall ((?v0 Nat$)) (= (fun_app$l (ldropn$a ?v0) lNil$a) lNil$a)))
(assume a286 (= (lconcat$a lNil$b) lNil$a))
(assume a287 (= (lconcat$ lNil$a) lNil$))
(assume a288 (= (lstrict_prefix$a lNil$a lNil$a) false))
(assume a289 (= (fun_app$a (lstrict_prefix$ lNil$) lNil$) false))
(assume a290 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$e (less$a zero$) (fun_app$h (minus$ ?v0) ?v1)) (fun_app$e (less$a ?v1) ?v0))))
(assume a291 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (= (fun_app$h (minus$ ?v0) ?v1) zero$))))
(assume a292 (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$h (minus$ ?v0) ?v1) zero$) (fun_app$e (less_eq$a ?v0) ?v1))))
(assume a293 (= (fun_app$d llength$ lNil$) zero$a))
(assume a294 (forall ((?v0 A$)) (= (llast$ (lCons$ ?v0 lNil$)) ?v0)))
(assume a295 (forall ((?v0 A$) (?v1 A_llist$)) (= (fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1)) lNil$) false)))
(assume a296 (forall ((?v0 A$) (?v1 A_llist$)) (= (fun_app$a (lstrict_prefix$ lNil$) (lCons$ ?v0 ?v1)) true)))
(assume a297 (forall ((?v0 Enat$) (?v1 A_llist$)) (= (= (fun_app$ (ldrop$ ?v0) ?v1) lNil$) (fun_app$c (less_eq$ (fun_app$d llength$ ?v1)) ?v0))))
(assume a298 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v0) ?v2)) (= (= (fun_app$h (minus$ ?v1) ?v0) (fun_app$h (minus$ ?v2) ?v0)) (= ?v1 ?v2)))))
(assume a299 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v0) ?v2)) (= (fun_app$h (minus$ (fun_app$h (minus$ ?v1) ?v0)) (fun_app$h (minus$ ?v2) ?v0)) (fun_app$h (minus$ ?v1) ?v2)))))
(assume a300 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v0) ?v2)) (= (fun_app$e (less_eq$a (fun_app$h (minus$ ?v1) ?v0)) (fun_app$h (minus$ ?v2) ?v0)) (fun_app$e (less_eq$a ?v1) ?v2)))))
(assume a301 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a (fun_app$h (minus$ ?v2) ?v1)) (fun_app$h (minus$ ?v2) ?v0)))))
(assume a302 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a (fun_app$h (minus$ ?v0) ?v2)) (fun_app$h (minus$ ?v1) ?v2)))))
(assume a303 (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$e (less_eq$a (fun_app$h (minus$ ?v0) ?v1)) ?v0)))
(step t0 (cl (not (! (= (! (or (! (not (! (= @p_4 (! (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lconcat$ xssa$) (lCons$ ?v1 ?v2))))) :named @p_26)) :named @p_27)) :named @p_39) (! (not @p_4) :named @p_41) @p_26) :named @p_42) (! (or @p_39 @p_3 @p_26) :named @p_40)) :named @p_43)) (not @p_42) @p_40) :rule equiv_pos2)
(step t1 (cl (= @p_39 @p_39)) :rule refl)
(step t2 (cl (! (= @p_41 @p_3) :named @p_44)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_44 1 5))
(step t3 (cl (= @p_26 @p_26)) :rule refl)
(step t4 (cl @p_43) :rule cong :premises (t1 t2 t3))
(step t5 (cl @p_39 @p_41 @p_26) :rule equiv_pos2)
(step t6 (cl @p_42 (not @p_39)) :rule or_neg :args (0))
(step t7 (cl @p_42 (not @p_41)) :rule or_neg :args (1))
(step t8 (cl @p_42 (not @p_26)) :rule or_neg :args (2))
(step t9 (cl @p_42 @p_42 @p_42) :rule resolution :premises (t5 t6 t7 t8))
(step t10 (cl @p_42) :rule contraction :premises (t9))
(step t11 (cl @p_40) :rule resolution :premises (t0 t4 t10))
(step t12 (cl @p_39 @p_3 @p_26) :rule or :premises (t11))
(step t13 (cl @p_3 @p_26 @p_39) :rule reordering :premises (t12))
(step t14 (cl (not (! (= (! (=> (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0)))))) (! (= @p_4 (! (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) (lconcat$ xssa$))))) :named @p_35)) :named @p_36)) :named @p_37) (! (=> (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0)))))) @p_27) :named @p_34)) :named @p_38)) (not @p_37) @p_34) :rule equiv_pos2)
(step t15 (cl (= (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0)))))) (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0)))))))) :rule refl)
(step t16 (cl (= @p_4 @p_4)) :rule refl)
(anchor :step t17 :args ((?v1 A$) (?v2 A_llist$) (:= (?v1 A$) ?v1) (:= (?v2 A_llist$) ?v2)))
(step t17.t0 (cl (! (= (! (= (! (lCons$ ?v1 ?v2) :named @p_21) @p_2) :named @p_23) (! (= @p_2 @p_21) :named @p_22)) :named @p_25)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_25 2 6))
(step t17.t1 (cl (= (! (not @p_23) :named @p_24) (not @p_22))) :rule cong :premises (t17.t0))
(step t17 (cl (= (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) (lconcat$ xssa$)))) (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lconcat$ xssa$) (lCons$ ?v1 ?v2)))))) :rule bind)
(step t18 (cl (= @p_35 @p_26)) :rule cong :premises (t17))
(step t19 (cl (= @p_36 @p_27)) :rule cong :premises (t16 t18))
(step t20 (cl @p_38) :rule cong :premises (t15 t19))
(step t21 (cl @p_37 (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0))))))) :rule implies_neg1)
(anchor :step t22)
(assume t22.a0 (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0)))))))
(step t22.t0 (cl (or (! (not (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0))))))) :named @p_33) @p_36)) :rule forall_inst :args (@p_2))
(step t22.t1 (cl @p_33 @p_36) :rule or :premises (t22.t0))
(step t22.t2 (cl (not (! (= (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0))))))) :named @p_28)) (not (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)))))) (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0))))))) :rule equiv_pos2)
(anchor :step t22.t3 :args ((?v0 A_llist$) (:= (?v0 A_llist$) ?v0)))
(step t22.t3.t0 (cl (= (! (not (lnull$ ?v0)) :named @p_30) @p_30)) :rule refl)
(anchor :step t22.t3.t1 :args ((?v1 A$) (?v2 A_llist$) (:= (?v1 A$) ?v1) (:= (?v2 A_llist$) ?v2)))
(step t22.t3.t1.t0 (cl (! (= (= ?v0 @p_21) (= @p_21 ?v0)) :named @p_32)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_32 2 6))
(step t22.t3.t1 (cl (= (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))) (exists ((?v1 A$) (?v2 A_llist$)) (= (lCons$ ?v1 ?v2) ?v0)))) :rule bind)
(step t22.t3.t2 (cl (! (= (exists ((?v1 A$) (?v2 A_llist$)) (= (lCons$ ?v1 ?v2) ?v0)) (! (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0)))) :named @p_29)) :named @p_31)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_31 13 6))
(step t22.t3.t3 (cl (= (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))) @p_29)) :rule trans :premises (t22.t3.t1 t22.t3.t2))
(step t22.t3.t4 (cl (= (= @p_30 (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)))) (= @p_30 @p_29))) :rule cong :premises (t22.t3.t0 t22.t3.t3))
(step t22.t3 (cl @p_28) :rule bind)
(step t22.t4 (cl (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0))))))) :rule resolution :premises (t22.t2 t22.t3 a24))
(step t22.t5 (cl @p_36) :rule resolution :premises (t22.t1 t22.t4))
(step t22 (cl @p_33 @p_36) :rule subproof :discharge (t22.a0))
(step t23 (cl @p_37 @p_36) :rule resolution :premises (t21 t22))
(step t24 (cl @p_37 (not @p_36)) :rule implies_neg2)
(step t25 (cl @p_37 @p_37) :rule resolution :premises (t23 t24))
(step t26 (cl @p_37) :rule contraction :premises (t25))
(step t27 (cl @p_34) :rule resolution :premises (t14 t20 t26))
(step t28 (cl @p_33 @p_27) :rule implies :premises (t27))
(step t29 (cl (not @p_28) (not (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)))))) (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0))))))) :rule equiv_pos2)
(anchor :step t30 :args ((?v0 A_llist$) (:= (?v0 A_llist$) ?v0)))
(step t30.t0 (cl (= @p_30 @p_30)) :rule refl)
(anchor :step t30.t1 :args ((?v1 A$) (?v2 A_llist$) (:= (?v1 A$) ?v1) (:= (?v2 A_llist$) ?v2)))
(step t30.t1.t0 (cl @p_32) :rule hole :args ("TRUST_THEORY_REWRITE" @p_32 2 6))
(step t30.t1 (cl (= (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))) (exists ((?v1 A$) (?v2 A_llist$)) (= (lCons$ ?v1 ?v2) ?v0)))) :rule bind)
(step t30.t2 (cl @p_31) :rule hole :args ("TRUST_THEORY_REWRITE" @p_31 13 6))
(step t30.t3 (cl (= (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))) @p_29)) :rule trans :premises (t30.t1 t30.t2))
(step t30.t4 (cl (= (= @p_30 (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)))) (= @p_30 @p_29))) :rule cong :premises (t30.t0 t30.t3))
(step t30 (cl @p_28) :rule bind)
(step t31 (cl (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (not (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) ?v0))))))) :rule resolution :premises (t29 t30 a24))
(step t32 (cl @p_27) :rule resolution :premises (t28 t31))
(anchor :step t33 :args ((?v1 A$) (?v2 A_llist$) (:= (?v0 A$) ?v1) (:= (?v1 A_llist$) ?v2)))
(step t33.t0 (cl (= (not (! (= (! (lCons$ ?v0 ?v1) :named @p_15) @p_2) :named @p_16)) @p_24)) :rule refl)
(step t33 (cl (= (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$)))) (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lCons$ ?v1 ?v2) (lconcat$ xssa$)))))) :rule bind)
(step t34 (cl (= (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$)))) (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lconcat$ xssa$) (lCons$ ?v1 ?v2)))))) :rule trans :premises (t33 t17))
(step t35 (cl (not (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))))) (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lconcat$ xssa$) (lCons$ ?v1 ?v2))))) :rule equiv1 :premises (t34))
(step t36 (cl (not (! (= (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lconcat$ xssa$) (lCons$ ?v0 ?v1)) thesis$)) (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))))) :named @p_6)) (not (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lconcat$ xssa$) (lCons$ ?v0 ?v1)) thesis$))) (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))))) :rule equiv_pos2)
(anchor :step t37 :args ((?v0 A$) (?v1 A_llist$) (:= (?v0 A$) ?v0) (:= (?v1 A_llist$) ?v1)))
(step t37.t0 (cl (! (= (! (= @p_2 @p_15) :named @p_17) @p_16) :named @p_18)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_18 2 6))
(step t37.t1 (cl (= thesis$ thesis$)) :rule refl)
(step t37.t2 (cl (= (=> @p_17 thesis$) (=> @p_16 thesis$))) :rule cong :premises (t37.t0 t37.t1))
(step t37 (cl (= (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lconcat$ xssa$) (lCons$ ?v0 ?v1)) thesis$)) (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lCons$ ?v0 ?v1) (lconcat$ xssa$)) thesis$)))) :rule bind)
(step t38 (cl (! (= (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lCons$ ?v0 ?v1) (lconcat$ xssa$)) thesis$)) (forall ((?v0 A$) (?v1 A_llist$)) (or (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))) thesis$))) :named @p_14)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_14 13 6))
(step t39 (cl (! (= (forall ((?v0 A$) (?v1 A_llist$)) (or (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))) thesis$)) (! (or thesis$ (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))))) :named @p_7)) :named @p_13)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_13 13 6))
(step t40 (cl (= (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lCons$ ?v0 ?v1) (lconcat$ xssa$)) thesis$)) @p_7)) :rule trans :premises (t38 t39))
(step t41 (cl (= (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lconcat$ xssa$) (lCons$ ?v0 ?v1)) thesis$)) @p_7)) :rule trans :premises (t37 t40))
(step t42 (cl (not (! (= @p_1 (! (= thesis$ false) :named @p_10)) :named @p_11)) (not @p_1) @p_10) :rule equiv_pos2)
(step t43 (cl (! (= @p_10 @p_1) :named @p_12)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_12 1 5))
(step t44 (cl @p_11) :rule symm :premises (t43))
(step t45 (cl @p_10) :rule resolution :premises (t42 t44 a1))
(step t46 (cl (= (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$)))) (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$)))))) :rule refl)
(step t47 (cl (= @p_7 (! (or false (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))))) :named @p_8))) :rule cong :premises (t45 t46))
(step t48 (cl (! (= @p_8 (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))))) :named @p_9)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_9 1 5))
(step t49 (cl (= @p_7 (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$)))))) :rule trans :premises (t47 t48))
(step t50 (cl @p_6) :rule trans :premises (t41 t49))
(step t51 (cl (forall ((?v0 A$) (?v1 A_llist$)) (not (= (lCons$ ?v0 ?v1) (lconcat$ xssa$))))) :rule resolution :premises (t36 t50 a2))
(step t52 (cl (forall ((?v1 A$) (?v2 A_llist$)) (not (= (lconcat$ xssa$) (lCons$ ?v1 ?v2))))) :rule resolution :premises (t35 t51))
(step t53 (cl) :rule resolution :premises (t13 t32 t52 a4))
