(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_list_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_list_fun$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_list_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_list_a_list_fun$ 0)
(declare-sort A_a_prod_llist_set$ 0)
(declare-sort A_list_a_llist_fun$ 0)
(declare-sort A_llist_a_list_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_list_list_bool_fun$ 0)
(declare-sort A_list_a_list_prod_set$ 0)
(declare-sort A_a_prod_llist_bool_fun$ 0)
(declare-sort A_list_a_list_bool_fun_fun$ 0)
(declare-sort A_list_a_list_prod_bool_fun$ 0)
(declare-sort A_list_list_a_list_list_fun$ 0)
(declare-sort A_list_a_list_a_list_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_list_a_list_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_bool_fun_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_list_list_a_list_list_bool_fun_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_list$ 0)
(declare-fun nil$ () A_list$)
(declare-fun hd$ (A_list$) A$)
(declare-fun tl$ (A_list$) A_list$)
(declare-fun cons$ (A$ A_list$) A_list$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-sort A_a_prod$ 0)
(declare-sort A_a_prod_list$ 0)
(declare-fun fst$ (A_a_prod$) A$)
(declare-fun snd$ (A_a_prod$) A$)
(declare-fun pair$ (A$ A$) A_a_prod$)
(declare-fun nil$a () A_a_prod_list$)
(declare-fun hd$a (A_a_prod_list$) A_a_prod$)
(declare-fun tl$a (A_a_prod_list$) A_a_prod_list$)
(declare-fun cons$a (A_a_prod$ A_a_prod_list$) A_a_prod_list$)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$a () A_a_prod_llist$)
(declare-fun lhd$a (A_a_prod_llist$) A_a_prod$)
(declare-fun ltl$a (A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lCons$a (A_a_prod$ A_a_prod_llist$) A_a_prod_llist$)
(declare-sort A_list_list$ 0)
(declare-fun nil$b () A_list_list$)
(declare-fun hd$b (A_list_list$) A_list$)
(declare-fun tl$b (A_list_list$) A_list_list$)
(declare-fun cons$b (A_list$ A_list_list$) A_list_list$)
(declare-sort A_list_llist$ 0)
(declare-fun lNil$b () A_list_llist$)
(declare-fun lhd$b (A_list_llist$) A_list$)
(declare-fun ltl$b (A_list_llist$) A_list_llist$)
(declare-fun lCons$b (A_list$ A_list_llist$) A_list_llist$)
(declare-sort A_list_a_list_prod$ 0)
(declare-sort A_list_list_list$ 0)
(declare-fun fst$a (A_list_a_list_prod$) A_list$)
(declare-fun snd$a (A_list_a_list_prod$) A_list$)
(declare-fun pair$a (A_list$ A_list$) A_list_a_list_prod$)
(declare-fun nil$c () A_list_list_list$)
(declare-fun hd$c (A_list_list_list$) A_list_list$)
(declare-fun tl$c (A_list_list_list$) A_list_list_list$)
(declare-fun cons$c (A_list_list$ A_list_list_list$) A_list_list_list$)
(declare-fun p$ (A_llist$) Bool)
(declare-fun uu$ (A_list_a_list_prod_set$) A_list_a_list_prod_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun top$ () A_list_set$)
(declare-fun uua$ (A_a_prod_set$) A_a_prod_bool_fun$)
(declare-fun uub$ (A_list_set$) A_list_bool_fun$)
(declare-fun uuc$ (A_llist_set$) A_llist_bool_fun$)
(declare-fun uud$ () A_llist_a_fun$)
(declare-fun uue$ () A_llist_a_llist_fun$)
(declare-fun uuf$ (A$) A_list_a_list_fun$)
(declare-fun bind$ (A_list$ A_a_list_fun$) A_list$)
(declare-fun last$ (A_list$) A$)
(declare-fun lzip$ (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun maps$ (A_a_list_fun$) A_list_a_list_fun$)
(declare-fun top$a () A_llist_set$)
(declare-fun top$b () A_list_bool_fun$)
(declare-fun top$c (A_llist$) Bool)
(declare-fun image$ (A_list_a_llist_fun$ A_list_set$) A_llist_set$)
(declare-fun lnull$ (A_list_llist$) Bool)
(declare-fun append$ (A_list$) A_list_a_list_fun$)
(declare-fun image$a (A_llist_a_llist_fun$ A_llist_set$) A_llist_set$)
(declare-fun image$b (A_list_a_list_fun$ A_list_set$) A_list_set$)
(declare-fun insert$ (A$) A_list_a_list_fun$)
(declare-fun lexord$ (A_a_prod_set$) A_list_a_list_prod_set$)
(declare-fun lnull$a (A_a_prod_llist$) Bool)
(declare-fun lnull$b () A_llist_bool_fun$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun append$a (A_list_list$) A_list_list_a_list_list_fun$)
(declare-fun butlast$ (A_list$) A_list$)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llexord$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun member$a (A_list_a_list_prod$ A_list_a_list_prod_set$) Bool)
(declare-fun member$b (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun member$c (A_list$ A_list_set$) Bool)
(declare-fun member$d (A_a_prod_llist$ A_a_prod_llist_set$) Bool)
(declare-fun rotate1$ (A_list$) A_list$)
(declare-fun collect$a (A_list_bool_fun$) A_list_set$)
(declare-fun collect$b (A_list_a_list_prod_bool_fun$) A_list_a_list_prod_set$)
(declare-fun collect$c (A_a_prod_bool_fun$) A_a_prod_set$)
(declare-fun fun_app$a (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$b (A_list_a_list_fun$ A_list$) A_list$)
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$d (A_list_a_list_prod_bool_fun$ A_list_a_list_prod$) Bool)
(declare-fun fun_app$e (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$f (A_list_bool_fun$ A_list$) Bool)
(declare-fun fun_app$g (A_list_a_llist_fun$ A_list$) A_llist$)
(declare-fun fun_app$h (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun fun_app$i (A_bool_fun$ A$) Bool)
(declare-fun fun_app$j (A_a_prod_llist_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun fun_app$k (A_a_prod_llist_a_a_prod_llist_bool_fun_fun$ A_a_prod_llist$) A_a_prod_llist_bool_fun$)
(declare-fun fun_app$l (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$m (A_list_list_a_list_list_fun$ A_list_list$) A_list_list$)
(declare-fun fun_app$n (A_list_list_bool_fun$ A_list_list$) Bool)
(declare-fun fun_app$o (A_list_a_list_list_bool_fun_fun$ A_list$) A_list_list_bool_fun$)
(declare-fun fun_app$p (A_list_list_a_list_bool_fun_fun$ A_list_list$) A_list_bool_fun$)
(declare-fun fun_app$q (A_list_list_a_list_list_bool_fun_fun$ A_list_list$) A_list_list_bool_fun$)
(declare-fun fun_app$r (A_list_a_list_bool_fun_fun$ A_list$) A_list_bool_fun$)
(declare-fun fun_app$s (A_a_list_fun$ A$) A_list$)
(declare-fun fun_app$t (A_llist_a_list_fun$ A_llist$) A_list$)
(declare-fun fun_app$u (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$v (A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$w (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$x (A_list_a_list_a_list_fun_fun$ A_list$) A_list_a_list_fun$)
(declare-fun fun_app$y (A_a_fun$ A$) A$)
(declare-fun lappend$a (A_a_prod_llist$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun lfinite$a (A_a_prod_llist$) Bool)
(declare-fun list_ex1$ (A_bool_fun$) A_list_bool_fun$)
(declare-fun listrel1$ (A_a_prod_set$) A_list_a_list_prod_set$)
(declare-fun listrelp$ (A_a_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun llist_of$ () A_list_a_llist_fun$)
(declare-fun sublists$ (A_list$) A_list_list$)
(declare-fun llist_of$a (A_a_prod_list$) A_a_prod_llist$)
(declare-fun llist_of$b (A_list_list$) A_list_llist$)
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun ltakeWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun remdups_adj$ (A_list$) A_list$)
(declare-fun unfold_llist$ (A_llist_bool_fun$) A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun product_lists$ (A_list_list$) A_list_list$)
(declare-fun map_tailrec_rev$ (A_a_fun$) A_list_a_list_a_list_fun_fun$)
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ uue$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$ uue$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$a uud$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$a uud$ ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$b (uuf$ ?v0) ?v1) (cons$ ?v0 ?v1)) :pattern ((fun_app$b (uuf$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (! (= (fun_app$c (uuc$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$c (uuc$ ?v0) ?v1)))))
(assert (forall ((?v0 A_list_a_list_prod_set$) (?v1 A_list_a_list_prod$)) (! (= (fun_app$d (uu$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$d (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_prod_set$) (?v1 A_a_prod$)) (! (= (fun_app$e (uua$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$e (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 A_list_set$) (?v1 A_list$)) (! (= (fun_app$f (uub$ ?v0) ?v1) (member$c ?v1 ?v0)) :pattern ((fun_app$f (uub$ ?v0) ?v1)))))
(assert (not thesis$))
(assert (forall ((?v0 A_list$)) (=> (= xs$ (fun_app$g llist_of$ ?v0)) thesis$) ))
(assert (lfinite$ xs$))
(assert (forall ((?v0 A_list$)) (lfinite$ (fun_app$g llist_of$ ?v0)) ))
(assert (p$ lNil$))
(assert (forall ((?v0 A_a_prod_list$)) (= (lhd$a (llist_of$a ?v0)) (hd$a ?v0)) ))
(assert (forall ((?v0 A_list$)) (= (lhd$ (fun_app$g llist_of$ ?v0)) (hd$ ?v0)) ))
(assert (forall ((?v0 A_list_list$)) (= (lnull$ (llist_of$b ?v0)) (= ?v0 nil$b)) ))
(assert (forall ((?v0 A_a_prod_list$)) (= (lnull$a (llist_of$a ?v0)) (= ?v0 nil$a)) ))
(assert (forall ((?v0 A_list$)) (= (fun_app$c lnull$b (fun_app$g llist_of$ ?v0)) (= ?v0 nil$)) ))
(assert (forall ((?v0 A_a_prod_list$)) (= (ltl$a (llist_of$a ?v0)) (llist_of$a (tl$a ?v0))) ))
(assert (forall ((?v0 A_list$)) (= (ltl$ (fun_app$g llist_of$ ?v0)) (fun_app$g llist_of$ (tl$ ?v0))) ))
(assert (forall ((?v0 A_list_list$)) (= (= (llist_of$b ?v0) lNil$b) (= ?v0 nil$b)) ))
(assert (forall ((?v0 A_a_prod_list$)) (= (= (llist_of$a ?v0) lNil$a) (= ?v0 nil$a)) ))
(assert (forall ((?v0 A_list$)) (= (= (fun_app$g llist_of$ ?v0) lNil$) (= ?v0 nil$)) ))
(assert (= (llist_of$b nil$b) lNil$b))
(assert (= (llist_of$a nil$a) lNil$a))
(assert (= (fun_app$g llist_of$ nil$) lNil$))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$ (lappend$ (fun_app$g llist_of$ ?v0)) (fun_app$g llist_of$ ?v1)) (fun_app$g llist_of$ (fun_app$b (append$ ?v0) ?v1))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_llist$)) (= (= (llist_of$b ?v0) (lCons$b ?v1 ?v2)) (exists ((?v3 A_list_list$)) (and (= ?v0 (cons$b ?v1 ?v3)) (= ?v2 (llist_of$b ?v3))) )) ))
(assert (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= (= (llist_of$a ?v0) (lCons$a ?v1 ?v2)) (exists ((?v3 A_a_prod_list$)) (and (= ?v0 (cons$a ?v1 ?v3)) (= ?v2 (llist_of$a ?v3))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_llist$)) (= (= (fun_app$g llist_of$ ?v0) (lCons$ ?v1 ?v2)) (exists ((?v3 A_list$)) (and (= ?v0 (cons$ ?v1 ?v3)) (= ?v2 (fun_app$g llist_of$ ?v3))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (! (= (llist_of$b (cons$b ?v0 ?v1)) (lCons$b ?v0 (llist_of$b ?v1))) :pattern ((cons$b ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_list$)) (! (= (llist_of$a (cons$a ?v0 ?v1)) (lCons$a ?v0 (llist_of$a ?v1))) :pattern ((cons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$g llist_of$ (cons$ ?v0 ?v1)) (lCons$ ?v0 (fun_app$g llist_of$ ?v1))) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$)) (! (= (lfinite$ ?v0) (member$ ?v0 (image$ llist_of$ top$))) :pattern ((lfinite$ ?v0)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (lfinite$ ?v0) (p$ ?v0)) (p$ (fun_app$ (lappend$ ?v0) (lCons$ ?v1 lNil$)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$a (fun_app$h (lappend$a ?v0) ?v1))) (or (not (lnull$a ?v0)) (not (lnull$a ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (fun_app$c lnull$b (fun_app$ (lappend$ ?v0) ?v1))) (or (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lnull$a (fun_app$h (lappend$a ?v0) ?v1)) (and (lnull$a ?v0) (lnull$a ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$c lnull$b (fun_app$ (lappend$ ?v0) ?v1)) (and (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1))) ))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (! (= (fun_app$h (lappend$a (lCons$a ?v0 ?v1)) ?v2) (lCons$a ?v0 (fun_app$h (lappend$a ?v1) ?v2))) :pattern ((fun_app$h (lappend$a (lCons$a ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$ (lappend$ ?v1) ?v2))) :pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$h (lappend$a ?v0) lNil$a) ?v0) :pattern ((lappend$a ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$ ?v0) lNil$) ?v0) :pattern ((lappend$ ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$h (lappend$a lNil$a) ?v0) ?v0) :pattern ((fun_app$h (lappend$a lNil$a) ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$ lNil$) ?v0) ?v0) :pattern ((fun_app$ (lappend$ lNil$) ?v0)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))))
(assert (= (lfinite$a lNil$a) true))
(assert (= (lfinite$ lNil$) true))
(assert (forall ((?v0 A_a_prod_llist$)) (= (lfinite$a (ltl$a ?v0)) (lfinite$a ?v0)) ))
(assert (forall ((?v0 A_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (fun_app$ (lappend$ ?v0) ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (ltl$a (fun_app$h (lappend$a ?v0) ?v1)) (ite (lnull$a ?v0) (ltl$a ?v1) (fun_app$h (lappend$a (ltl$a ?v0)) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (lappend$ ?v0) ?v1)) (ite (fun_app$c lnull$b ?v0) (ltl$ ?v1) (fun_app$ (lappend$ (ltl$ ?v0)) ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lhd$a (fun_app$h (lappend$a ?v0) ?v1)) (ite (lnull$a ?v0) (lhd$a ?v1) (lhd$a ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lhd$ (fun_app$ (lappend$ ?v0) ?v1)) (ite (fun_app$c lnull$b ?v0) (lhd$ ?v1) (lhd$ ?v0))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (not (lnull$a ?v0)) (= (lCons$a (lhd$a ?v0) (ltl$a ?v0)) ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (not (fun_app$c lnull$b ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (= lNil$a (fun_app$h (lappend$a ?v0) ?v1)) (and (= ?v0 lNil$a) (= ?v1 lNil$a))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$ (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (= (fun_app$h (lappend$a ?v0) ?v1) lNil$a) (and (= ?v0 lNil$a) (= ?v1 lNil$a))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$ (lappend$ ?v0) ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) ?v1)) ?v2) (fun_app$ (lappend$ ?v0) (fun_app$ (lappend$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= (fun_app$h (lappend$a (fun_app$h (lappend$a ?v0) (lCons$a ?v1 lNil$a))) ?v2) (fun_app$h (lappend$a ?v0) (lCons$a ?v1 ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) (lCons$ ?v1 lNil$))) ?v2) (fun_app$ (lappend$ ?v0) (lCons$ ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (= (not (= ?v0 lNil$a)) (exists ((?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= ?v0 (lCons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_a_prod_llist$)) (= (not (lnull$a ?v0)) (exists ((?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= ?v0 (lCons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist$)) (= (not (fun_app$c lnull$b ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_a_prod_llist$)) (= (lfinite$a ?v0) (or (= ?v0 lNil$a) (exists ((?v1 A_a_prod_llist$) (?v2 A_a_prod$)) (and (= ?v0 (lCons$a ?v2 ?v1)) (lfinite$a ?v1)) ))) ))
(assert (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (or (= ?v0 lNil$) (exists ((?v1 A_llist$) (?v2 A$)) (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)) ))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (lnull$a ?v0) (= ?v0 lNil$a)) :pattern ((lnull$a ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$c lnull$b ?v0) (= ?v0 lNil$)) :pattern ((fun_app$c lnull$b ?v0)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lhd$a (lCons$a ?v0 ?v1)) ?v0) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (ltl$a (lCons$a ?v0 ?v1)) ?v1) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ltl$ (lCons$ ?v0 ?v1)) ?v1) :pattern ((lCons$ ?v0 ?v1)))))
(assert (= (fun_app$h (lappend$a lNil$a) lNil$a) lNil$a))
(assert (= (fun_app$ (lappend$ lNil$) lNil$) lNil$))
(assert (= (ltl$a lNil$a) lNil$a))
(assert (= (ltl$ lNil$) lNil$))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (=> (= ?v0 (lCons$a (lhd$a ?v0) (ltl$a ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (=> (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (and (=> (or (lnull$a ?v0) (not (fun_app$e ?v1 (lhd$a ?v0)))) false) (=> (and (not (lnull$a ?v0)) (fun_app$e ?v1 (lhd$a ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (fun_app$c lnull$b ?v0) (not (fun_app$i ?v1 (lhd$ ?v0)))) false) (=> (and (not (fun_app$c lnull$b ?v0)) (fun_app$i ?v1 (lhd$ ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (fun_app$c lnull$b ?v0) (lnull$a ?v1)) false) (=> (and (not (fun_app$c lnull$b ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (fun_app$c lnull$b ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (fun_app$c lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) false) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_llist$)) (=> (member$d ?v1 ?v0) (lnull$a ?v1)) ) false) (=> (not (forall ((?v1 A_a_prod_llist$)) (=> (member$d ?v1 ?v0) (lnull$a ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$c lnull$b ?v1)) ) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$c lnull$b ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) false) (=> (or (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$)) (=> (forall ((?v2 A_llist$)) (= (fun_app$c ?v0 ?v2) (fun_app$c ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 A_list_bool_fun$) (?v1 A_list_bool_fun$)) (=> (forall ((?v2 A_list$)) (= (fun_app$f ?v0 ?v2) (fun_app$f ?v1 ?v2)) ) (= (collect$a ?v0) (collect$a ?v1))) ))
(assert (forall ((?v0 A_list_a_list_prod_set$)) (= (collect$b (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_prod_set$)) (= (collect$c (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_list_set$)) (= (collect$a (uub$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_llist_set$)) (= (collect$ (uuc$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_list_a_list_prod$) (?v1 A_list_a_list_prod_bool_fun$)) (= (member$a ?v0 (collect$b ?v1)) (fun_app$d ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_bool_fun$)) (= (member$b ?v0 (collect$c ?v1)) (fun_app$e ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (= (member$c ?v0 (collect$a ?v1)) (fun_app$f ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$c lnull$b ?v0) false) (=> (not (fun_app$c lnull$b ?v0)) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (= (lnull$a ?v0) (lnull$a ?v1)) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) (and (= (lhd$a ?v0) (lhd$a ?v1)) (= (ltl$a ?v0) (ltl$a ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) (and (not (= ?v0 lNil$a)) (and (= (lhd$a ?v0) ?v1) (= (ltl$a ?v0) ?v2)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (and (not (= ?v0 lNil$)) (and (= (lhd$ ?v0) ?v1) (= (ltl$ ?v0) ?v2)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) (not (lnull$a ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (fun_app$c lnull$b ?v0))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (= ?v0 lNil$a) (lnull$a ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (fun_app$c lnull$b ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) (not (lnull$a (fun_app$h (lappend$a ?v0) ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (not (fun_app$c lnull$b (fun_app$ (lappend$ ?v0) ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$ (lappend$ ?v0) ?v1) ?v0)) :pattern ((fun_app$ (lappend$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (not (lnull$a ?v0)) (= (fun_app$h (lappend$a (ltl$a ?v0)) ?v1) (ltl$a (fun_app$h (lappend$a ?v0) ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (not (fun_app$c lnull$b ?v0)) (= (fun_app$ (lappend$ (ltl$ ?v0)) ?v1) (ltl$ (fun_app$ (lappend$ ?v0) ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (and (lfinite$a ?v0) (and (=> (= ?v0 lNil$a) false) (forall ((?v1 A_a_prod_llist$) (?v2 A_a_prod$)) (=> (and (= ?v0 (lCons$a ?v2 ?v1)) (lfinite$a ?v1)) false) ))) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (lfinite$ ?v0) (and (=> (= ?v0 lNil$) false) (forall ((?v1 A_llist$) (?v2 A$)) (=> (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)) false) ))) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist_bool_fun$)) (=> (and (lfinite$a ?v0) (and (forall ((?v2 A_a_prod_llist$)) (=> (lnull$a ?v2) (fun_app$j ?v1 ?v2)) ) (forall ((?v2 A_a_prod_llist$)) (=> (and (lfinite$a ?v2) (and (not (lnull$a ?v2)) (fun_app$j ?v1 (ltl$a ?v2)))) (fun_app$j ?v1 ?v2)) ))) (fun_app$j ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (=> (and (lfinite$ ?v0) (and (forall ((?v2 A_llist$)) (=> (fun_app$c lnull$b ?v2) (fun_app$c ?v1 ?v2)) ) (forall ((?v2 A_llist$)) (=> (and (lfinite$ ?v2) (and (not (fun_app$c lnull$b ?v2)) (fun_app$c ?v1 (ltl$ ?v2)))) (fun_app$c ?v1 ?v2)) ))) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod$)) (=> (lfinite$a ?v0) (lfinite$a (lCons$a ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (lfinite$ ?v0) (lfinite$ (lCons$ ?v1 ?v0))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (! (=> (and (lnull$a ?v0) (lnull$a ?v1)) (= (fun_app$h (lappend$a ?v0) ?v1) lNil$a)) :pattern ((fun_app$h (lappend$a ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (and (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) (= (fun_app$ (lappend$ ?v0) ?v1) lNil$)) :pattern ((fun_app$ (lappend$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (lnull$a ?v0) (lnull$a ?v1)) (lnull$a (fun_app$h (lappend$a ?v0) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) (fun_app$c lnull$b (fun_app$ (lappend$ ?v0) ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (! (=> (lnull$a ?v0) (= (fun_app$h (lappend$a ?v1) ?v0) ?v1)) :pattern ((fun_app$h (lappend$a ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$c lnull$b ?v0) (= (fun_app$ (lappend$ ?v1) ?v0) ?v1)) :pattern ((fun_app$ (lappend$ ?v1) ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (! (=> (lnull$a ?v0) (= (fun_app$h (lappend$a ?v0) ?v1) ?v1)) :pattern ((fun_app$h (lappend$a ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$c lnull$b ?v0) (= (fun_app$ (lappend$ ?v0) ?v1) ?v1)) :pattern ((fun_app$ (lappend$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (lnull$a ?v0) (= ?v0 lNil$a)) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$c lnull$b ?v0) (= ?v0 lNil$)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (lnull$a ?v0) (lfinite$a ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$c lnull$b ?v0) (lfinite$ ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (lnull$a ?v0) (lnull$a (ltl$a ?v0))) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$c lnull$b ?v0) (fun_app$c lnull$b (ltl$ ?v0))) ))
(assert (forall ((?v0 A_a_prod_llist_a_a_prod_llist_bool_fun_fun$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (=> (and (fun_app$j (fun_app$k ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_llist$) (?v4 A_a_prod_llist$)) (=> (fun_app$j (fun_app$k ?v0 ?v3) ?v4) (and (= (lnull$a ?v3) (lnull$a ?v4)) (=> (and (not (lnull$a ?v3)) (not (lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (or (fun_app$j (fun_app$k ?v0 (ltl$a ?v3)) (ltl$a ?v4)) (= (ltl$a ?v3) (ltl$a ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$l ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$c (fun_app$l ?v0 ?v3) ?v4) (and (= (fun_app$c lnull$b ?v3) (fun_app$c lnull$b ?v4)) (=> (and (not (fun_app$c lnull$b ?v3)) (not (fun_app$c lnull$b ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$c (fun_app$l ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_prod_llist_a_a_prod_llist_bool_fun_fun$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (=> (and (fun_app$j (fun_app$k ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_llist$) (?v4 A_a_prod_llist$)) (=> (fun_app$j (fun_app$k ?v0 ?v3) ?v4) (and (= (lnull$a ?v3) (lnull$a ?v4)) (=> (and (not (lnull$a ?v3)) (not (lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (fun_app$j (fun_app$k ?v0 (ltl$a ?v3)) (ltl$a ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$l ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$c (fun_app$l ?v0 ?v3) ?v4) (and (= (fun_app$c lnull$b ?v3) (fun_app$c lnull$b ?v4)) (=> (and (not (fun_app$c lnull$b ?v3)) (not (fun_app$c lnull$b ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$c (fun_app$l ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (not (= lNil$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (not (lnull$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (fun_app$c lnull$b (lCons$ ?v0 ?v1))) ))
(assert (lfinite$a lNil$a))
(assert (lfinite$ lNil$))
(assert (lnull$a lNil$a))
(assert (fun_app$c lnull$b lNil$))
(assert (forall ((?v0 A_list_list$)) (=> (not (= ?v0 nil$b)) (= (cons$b (hd$b ?v0) (tl$b ?v0)) ?v0)) ))
(assert (forall ((?v0 A_list$)) (=> (not (= ?v0 nil$)) (= (cons$ (hd$ ?v0) (tl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 A_list_list$)) (=> (not (= ?v0 nil$b)) (= (cons$b (hd$b ?v0) (tl$b ?v0)) ?v0)) ))
(assert (forall ((?v0 A_list$)) (=> (not (= ?v0 nil$)) (= (cons$ (hd$ ?v0) (tl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (=> (not (= ?v0 nil$b)) (= (hd$b (fun_app$m (append$a ?v0) ?v1)) (hd$b ?v0))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= ?v0 nil$)) (= (hd$ (fun_app$b (append$ ?v0) ?v1)) (hd$ ?v0))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (=> (not (= ?v0 nil$b)) (= (tl$b (fun_app$m (append$a ?v0) ?v1)) (fun_app$m (append$a (tl$b ?v0)) ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= ?v0 nil$)) (= (tl$ (fun_app$b (append$ ?v0) ?v1)) (fun_app$b (append$ (tl$ ?v0)) ?v1))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$)) (= (= (fun_app$m (append$a ?v0) (cons$b ?v1 nil$b)) (fun_app$m (append$a ?v2) (cons$b ?v3 nil$b))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$) (?v3 A$)) (= (= (fun_app$b (append$ ?v0) (cons$ ?v1 nil$)) (fun_app$b (append$ ?v2) (cons$ ?v3 nil$))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$m (append$a ?v0) ?v1) ?v1) (= ?v0 nil$b)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) ?v1) (= ?v0 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$m (append$a ?v0) ?v1) ?v0) (= ?v1 nil$b)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) ?v0) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= ?v0 (fun_app$m (append$a ?v1) ?v0)) (= ?v1 nil$b)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= ?v0 (fun_app$b (append$ ?v1) ?v0)) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= ?v0 (fun_app$m (append$a ?v0) ?v1)) (= ?v1 nil$b)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= ?v0 (fun_app$b (append$ ?v0) ?v1)) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= nil$b (fun_app$m (append$a ?v0) ?v1)) (and (= ?v0 nil$b) (= ?v1 nil$b))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= nil$ (fun_app$b (append$ ?v0) ?v1)) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$m (append$a ?v0) ?v1) nil$b) (and (= ?v0 nil$b) (= ?v1 nil$b))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) nil$) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (cons$b ?v0 ?v1) (cons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$b (append$ (fun_app$b (append$ ?v0) ?v1)) ?v2) (fun_app$b (append$ ?v0) (fun_app$b (append$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) (fun_app$b (append$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) (fun_app$b (append$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_list_list$)) (! (= (fun_app$m (append$a ?v0) nil$b) ?v0) :pattern ((append$a ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$b (append$ ?v0) nil$) ?v0) :pattern ((append$ ?v0)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (not (= (cons$b ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (not (= (cons$ ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (=> (not (= ?v0 nil$b)) false)) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (fun_app$b (append$ ?v0) ?v1) ?v2) (= ?v3 (fun_app$b (append$ ?v1) ?v4))) (= (fun_app$b (append$ ?v0) ?v3) (fun_app$b (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) (fun_app$b (append$ ?v2) ?v3)) (exists ((?v4 A_list$)) (or (and (= ?v0 (fun_app$b (append$ ?v2) ?v4)) (= (fun_app$b (append$ ?v4) ?v1) ?v3)) (and (= (fun_app$b (append$ ?v0) ?v4) ?v2) (= ?v1 (fun_app$b (append$ ?v4) ?v3)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (not (= nil$b (cons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (not (= nil$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_list_a_list_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (=> (and (fun_app$n (fun_app$o ?v0 nil$) nil$b) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$n (fun_app$o ?v0 (cons$ ?v3 ?v4)) nil$b) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$n (fun_app$o ?v0 nil$) (cons$b ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$n (fun_app$o ?v0 ?v4) ?v6) (fun_app$n (fun_app$o ?v0 (cons$ ?v3 ?v4)) (cons$b ?v5 ?v6))) )))) (fun_app$n (fun_app$o ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list$)) (=> (and (fun_app$f (fun_app$p ?v0 nil$b) nil$) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$f (fun_app$p ?v0 (cons$b ?v3 ?v4)) nil$) ) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$f (fun_app$p ?v0 nil$b) (cons$ ?v3 ?v4)) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$f (fun_app$p ?v0 ?v4) ?v6) (fun_app$f (fun_app$p ?v0 (cons$b ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$f (fun_app$p ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$n (fun_app$q ?v0 nil$b) nil$b) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$n (fun_app$q ?v0 (cons$b ?v3 ?v4)) nil$b) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$n (fun_app$q ?v0 nil$b) (cons$b ?v3 ?v4)) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$n (fun_app$q ?v0 ?v4) ?v6) (fun_app$n (fun_app$q ?v0 (cons$b ?v3 ?v4)) (cons$b ?v5 ?v6))) )))) (fun_app$n (fun_app$q ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$f (fun_app$r ?v0 nil$) nil$) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$f (fun_app$r ?v0 (cons$ ?v3 ?v4)) nil$) ) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$f (fun_app$r ?v0 nil$) (cons$ ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$f (fun_app$r ?v0 ?v4) ?v6) (fun_app$f (fun_app$r ?v0 (cons$ ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$f (fun_app$r ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$b)) (and (forall ((?v2 A_list$)) (fun_app$n ?v1 (cons$b ?v2 nil$b)) ) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (not (= ?v3 nil$b)) (fun_app$n ?v1 ?v3)) (fun_app$n ?v1 (cons$b ?v2 ?v3))) ))) (fun_app$n ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 A$)) (fun_app$f ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$f ?v1 ?v3)) (fun_app$f ?v1 (cons$ ?v2 ?v3))) ))) (fun_app$f ?v1 ?v0)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$)) (=> (= ?v0 (cons$b ?v1 ?v2)) (not (= ?v0 nil$b))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) (not (= ?v0 nil$))) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (forall ((?v1 A_list$) (?v2 A_list_list$)) (=> (= ?v0 (cons$b ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A$) (?v2 A_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_list_list_list$)) (=> (and (=> (= ?v0 nil$c) false) (and (forall ((?v1 A_list_list_list$)) (=> (= ?v0 (cons$c nil$b ?v1)) false) ) (forall ((?v1 A_list$) (?v2 A_list_list$) (?v3 A_list_list_list$)) (=> (= ?v0 (cons$c (cons$b ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 A_list_list$)) (=> (= ?v0 (cons$b nil$ ?v1)) false) ) (forall ((?v1 A$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= ?v0 (cons$b (cons$ ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 A_list$)) (=> (= ?v0 (cons$b ?v1 nil$b)) false) ) (forall ((?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= ?v0 (cons$b ?v1 (cons$b ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 A$)) (=> (= ?v0 (cons$ ?v1 nil$)) false) ) (forall ((?v1 A$) (?v2 A$) (?v3 A_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (= (not (= ?v0 nil$b)) (exists ((?v1 A_list$) (?v2 A_list_list$)) (= ?v0 (cons$b ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 A$) (?v2 A_list$)) (= ?v0 (cons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (and (= (cons$b ?v0 ?v1) ?v2) (= ?v3 (fun_app$m (append$a ?v1) ?v4))) (= (cons$b ?v0 ?v3) (fun_app$m (append$a ?v2) ?v4))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (cons$ ?v0 ?v1) ?v2) (= ?v3 (fun_app$b (append$ ?v1) ?v4))) (= (cons$ ?v0 ?v3) (fun_app$b (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$)) (! (= (fun_app$m (append$a (cons$b ?v0 ?v1)) ?v2) (cons$b ?v0 (fun_app$m (append$a ?v1) ?v2))) :pattern ((fun_app$m (append$a (cons$b ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$)) (! (= (fun_app$b (append$ (cons$ ?v0 ?v1)) ?v2) (cons$ ?v0 (fun_app$b (append$ ?v1) ?v2))) :pattern ((fun_app$b (append$ (cons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$m (append$a nil$b) ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$b (append$ nil$) ?v1))) ))
(assert (forall ((?v0 A_list_list$)) (! (= (fun_app$m (append$a nil$b) ?v0) ?v0) :pattern ((fun_app$m (append$a nil$b) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$b (append$ nil$) ?v0) ?v0) :pattern ((fun_app$b (append$ nil$) ?v0)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (! (= (tl$b (cons$b ?v0 ?v1)) ?v1) :pattern ((cons$b ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (tl$ (cons$ ?v0 ?v1)) ?v1) :pattern ((cons$ ?v0 ?v1)))))
(assert (= (tl$b nil$b) nil$b))
(assert (= (tl$ nil$) nil$))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (! (= (hd$b (cons$b ?v0 ?v1)) ?v0) :pattern ((cons$b ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (hd$ (cons$ ?v0 ?v1)) ?v0) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_list_list_bool_fun$) (?v1 A_list_list$)) (=> (and (fun_app$n ?v0 nil$b) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (fun_app$n ?v0 ?v3) (fun_app$n ?v0 (fun_app$m (append$a ?v3) (cons$b ?v2 nil$b)))) )) (fun_app$n ?v0 ?v1)) ))
(assert (forall ((?v0 A_list_bool_fun$) (?v1 A_list$)) (=> (and (fun_app$f ?v0 nil$) (forall ((?v2 A$) (?v3 A_list$)) (=> (fun_app$f ?v0 ?v3) (fun_app$f ?v0 (fun_app$b (append$ ?v3) (cons$ ?v2 nil$)))) )) (fun_app$f ?v0 ?v1)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$b)) (and (forall ((?v2 A_list$)) (fun_app$n ?v1 (cons$b ?v2 nil$b)) ) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (not (= ?v3 nil$b)) (fun_app$n ?v1 ?v3)) (fun_app$n ?v1 (fun_app$m (append$a ?v3) (cons$b ?v2 nil$b)))) ))) (fun_app$n ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 A$)) (fun_app$f ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$f ?v1 ?v3)) (fun_app$f ?v1 (fun_app$b (append$ ?v3) (cons$ ?v2 nil$)))) ))) (fun_app$f ?v1 ?v0)) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (forall ((?v1 A_list_list$) (?v2 A_list$)) (=> (= ?v0 (fun_app$m (append$a ?v1) (cons$b ?v2 nil$b))) false) )) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A_list$) (?v2 A$)) (=> (= ?v0 (fun_app$b (append$ ?v1) (cons$ ?v2 nil$))) false) )) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (= (= (cons$b ?v0 ?v1) (fun_app$m (append$a ?v2) ?v3)) (or (and (= ?v2 nil$b) (= (cons$b ?v0 ?v1) ?v3)) (exists ((?v4 A_list_list$)) (and (= (cons$b ?v0 ?v4) ?v2) (= ?v1 (fun_app$m (append$a ?v4) ?v3))) ))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (fun_app$b (append$ ?v2) ?v3)) (or (and (= ?v2 nil$) (= (cons$ ?v0 ?v1) ?v3)) (exists ((?v4 A_list$)) (and (= (cons$ ?v0 ?v4) ?v2) (= ?v1 (fun_app$b (append$ ?v4) ?v3))) ))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (fun_app$m (append$a ?v0) ?v1) (cons$b ?v2 ?v3)) (or (and (= ?v0 nil$b) (= ?v1 (cons$b ?v2 ?v3))) (exists ((?v4 A_list_list$)) (and (= ?v0 (cons$b ?v2 ?v4)) (= (fun_app$m (append$a ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) (cons$ ?v2 ?v3)) (or (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) (exists ((?v4 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (= (fun_app$b (append$ ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 A_list_list$)) (= (= nil$b (tl$b ?v0)) (or (= ?v0 nil$b) (exists ((?v1 A_list$)) (= ?v0 (cons$b ?v1 nil$b)) ))) ))
(assert (forall ((?v0 A_list$)) (= (= nil$ (tl$ ?v0)) (or (= ?v0 nil$) (exists ((?v1 A$)) (= ?v0 (cons$ ?v1 nil$)) ))) ))
(assert (forall ((?v0 A_list_list$)) (= (= (tl$b ?v0) nil$b) (or (= ?v0 nil$b) (exists ((?v1 A_list$)) (= ?v0 (cons$b ?v1 nil$b)) ))) ))
(assert (forall ((?v0 A_list$)) (= (= (tl$ ?v0) nil$) (or (= ?v0 nil$) (exists ((?v1 A$)) (= ?v0 (cons$ ?v1 nil$)) ))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (hd$ (fun_app$b (append$ ?v0) ?v1)) (ite (= ?v0 nil$) (hd$ ?v1) (hd$ ?v0))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (= (= ?v0 nil$) (= ?v1 nil$)) (=> (and (not (= ?v0 nil$)) (not (= ?v1 nil$))) (and (= (hd$ ?v0) (hd$ ?v1)) (= (tl$ ?v0) (tl$ ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (= ?v0 (cons$ (hd$ ?v0) (tl$ ?v0))) false)) false) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_a_list_fun$)) (! (= (bind$ (cons$ ?v0 ?v1) ?v2) (fun_app$b (append$ (fun_app$s ?v2 ?v0)) (bind$ ?v1 ?v2))) :pattern ((bind$ (cons$ ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$ (ltakeWhile$ ?v0) ?v1) (ite (or (fun_app$c lnull$b ?v1) (not (fun_app$i ?v0 (lhd$ ?v1)))) lNil$ (lCons$ (lhd$ ?v1) (fun_app$ (ltakeWhile$ ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list$) (?v3 A_list_set$)) (=> (and (= ?v0 (fun_app$g ?v1 ?v2)) (member$c ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$) (?v3 A_llist_set$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$a ?v1 ?v3))) ))
(assert (forall ((?v0 A_llist$)) (member$ ?v0 top$a) ))
(assert (forall ((?v0 A_list$)) (member$c ?v0 top$) ))
(assert (forall ((?v0 A_llist$)) (= (member$ ?v0 top$a) true) ))
(assert (forall ((?v0 A_list$)) (= (member$c ?v0 top$) true) ))
(assert (forall ((?v0 A_a_list_fun$)) (! (= (bind$ nil$ ?v0) nil$) :pattern ((bind$ nil$ ?v0)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (fun_app$c lnull$b (fun_app$ (ltakeWhile$ ?v0) ?v1))) (and (not (fun_app$c lnull$b ?v1)) (fun_app$i ?v0 (lhd$ ?v1)))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$c lnull$b (fun_app$ (ltakeWhile$ ?v0) ?v1)) (or (fun_app$c lnull$b ?v1) (not (fun_app$i ?v0 (lhd$ ?v1))))) ))
(assert (= top$ (collect$a top$b)))
(assert (forall ((?v0 A_llist_set$)) (=> (forall ((?v1 A_llist$)) (member$ ?v1 ?v0) ) (= top$a ?v0)) ))
(assert (forall ((?v0 A_list_set$)) (=> (forall ((?v1 A_list$)) (member$c ?v1 ?v0) ) (= top$ ?v0)) ))
(assert (exists ((?v0 A_llist$)) (member$ ?v0 top$a) ))
(assert (exists ((?v0 A_list$)) (member$c ?v0 top$) ))
(assert (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (exists ((?v3 A_list$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3))) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist_set$)) (= (member$ ?v0 (image$a ?v1 ?v2)) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$ ?v1 ?v3))) )) ))
(assert (forall ((?v0 A_list_set$) (?v1 A_list_set$) (?v2 A_list_a_llist_fun$) (?v3 A_list_a_llist_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_list$)) (=> (member$c ?v4 ?v1) (= (fun_app$g ?v2 ?v4) (fun_app$g ?v3 ?v4))) )) (= (image$ ?v2 ?v0) (image$ ?v3 ?v1))) ))
(assert (forall ((?v0 A_list_a_llist_fun$) (?v1 A_list_set$) (?v2 A_llist_bool_fun$)) (=> (exists ((?v3 A_llist$)) (and (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$c ?v2 ?v3)) ) (exists ((?v3 A_list$)) (and (member$c ?v3 ?v1) (fun_app$c ?v2 (fun_app$g ?v0 ?v3))) )) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$)) (=> (exists ((?v3 A_llist$)) (and (member$ ?v3 (image$a ?v0 ?v1)) (fun_app$c ?v2 ?v3)) ) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v1) (fun_app$c ?v2 (fun_app$ ?v0 ?v3))) )) ))
(assert (forall ((?v0 A_list_a_llist_fun$) (?v1 A_list_set$) (?v2 A_llist_bool_fun$)) (=> (forall ((?v3 A_llist$)) (=> (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$c ?v2 ?v3)) ) (forall ((?v3 A_list$)) (=> (member$c ?v3 ?v1) (fun_app$c ?v2 (fun_app$g ?v0 ?v3))) )) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$)) (=> (forall ((?v3 A_llist$)) (=> (member$ ?v3 (image$a ?v0 ?v1)) (fun_app$c ?v2 ?v3)) ) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v1) (fun_app$c ?v2 (fun_app$ ?v0 ?v3))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_llist$) (?v3 A_list_a_llist_fun$)) (=> (and (member$c ?v0 ?v1) (= ?v2 (fun_app$g ?v3 ?v0))) (member$ ?v2 (image$ ?v3 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist$) (?v3 A_llist_a_llist_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$ ?v3 ?v0))) (member$ ?v2 (image$a ?v3 ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_a_llist_fun$)) (=> (member$c ?v0 ?v1) (member$ (fun_app$g ?v2 ?v0) (image$ ?v2 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$ ?v2 ?v0) (image$a ?v2 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (or (fun_app$c lnull$b ?v0) (not (fun_app$i ?v1 (lhd$ ?v0)))) (fun_app$c lnull$b (fun_app$ (ltakeWhile$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$c lnull$b ?v0)) (fun_app$i ?v1 (lhd$ ?v0))) (= (lhd$ (fun_app$ (ltakeWhile$ ?v1) ?v0)) (lhd$ ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$c lnull$b ?v0)) (fun_app$i ?v1 (lhd$ ?v0))) (not (fun_app$c lnull$b (fun_app$ (ltakeWhile$ ?v1) ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (or (fun_app$c lnull$b ?v0) (not (fun_app$i ?v1 (lhd$ ?v0)))) (= (fun_app$ (ltakeWhile$ ?v1) ?v0) lNil$)) :pattern ((fun_app$ (ltakeWhile$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$c lnull$b ?v0)) (fun_app$i ?v1 (lhd$ ?v0))) (= (ltl$ (fun_app$ (ltakeWhile$ ?v1) ?v0)) (fun_app$ (ltakeWhile$ ?v1) (ltl$ ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list$)) (=> (= ?v0 (fun_app$g ?v1 ?v2)) (member$ ?v0 (image$ ?v1 top$))) ))
(assert (forall ((?v0 A_list_a_llist_fun$) (?v1 A_list$)) (member$ (fun_app$g ?v0 ?v1) (image$ ?v0 top$)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$c lnull$b ?v0)) (fun_app$i ?v1 (lhd$ ?v0))) (= (fun_app$ (ltakeWhile$ ?v1) ?v0) (lCons$ (lhd$ ?v0) (fun_app$ (ltakeWhile$ ?v1) (ltl$ ?v0))))) ))
(assert (forall ((?v0 A_list$)) (! (=> (not (= ?v0 nil$)) (= (rotate1$ ?v0) (fun_app$b (append$ (tl$ ?v0)) (cons$ (hd$ ?v0) nil$)))) :pattern ((rotate1$ ?v0)))))
(assert (= (sublists$ nil$) (cons$b nil$ nil$b)))
(assert (forall ((?v0 A_list$)) (= (= (rotate1$ ?v0) nil$) (= ?v0 nil$)) ))
(assert (= (rotate1$ nil$) nil$))
(assert (forall ((?v0 A$) (?v1 A_list$)) (= (rotate1$ (cons$ ?v0 ?v1)) (fun_app$b (append$ ?v1) (cons$ ?v0 nil$))) ))
(assert (forall ((?v0 A_llist$)) (! (= (top$c ?v0) (member$ ?v0 top$a)) :pattern ((top$c ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$f top$b ?v0) (member$c ?v0 top$)) :pattern ((fun_app$f top$b ?v0)))))
(assert (forall ((?v0 A_list_a_llist_fun$) (?v1 A_llist$)) (=> (= (image$ ?v0 top$) top$a) (exists ((?v2 A_list$)) (= ?v1 (fun_app$g ?v0 ?v2)) )) ))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$)) (=> (= (image$b ?v0 top$) top$) (exists ((?v2 A_list$)) (= ?v1 (fun_app$b ?v0 ?v2)) )) ))
(assert (forall ((?v0 A_list_a_llist_fun$) (?v1 A_llist$)) (=> (and (= (image$ ?v0 top$) top$a) (forall ((?v2 A_list$)) (=> (= ?v1 (fun_app$g ?v0 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$)) (=> (and (= (image$b ?v0 top$) top$) (forall ((?v2 A_list$)) (=> (= ?v1 (fun_app$b ?v0 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_list_a_llist_fun$)) (= (= (image$ ?v0 top$) top$a) (forall ((?v1 A_llist$)) (exists ((?v2 A_list$)) (= ?v1 (fun_app$g ?v0 ?v2)) ) )) ))
(assert (forall ((?v0 A_list_a_list_fun$)) (= (= (image$b ?v0 top$) top$) (forall ((?v1 A_list$)) (exists ((?v2 A_list$)) (= ?v1 (fun_app$b ?v0 ?v2)) ) )) ))
(assert (forall ((?v0 A_list_a_llist_fun$) (?v1 A_llist_a_list_fun$)) (=> (forall ((?v2 A_llist$)) (= (fun_app$g ?v0 (fun_app$t ?v1 ?v2)) ?v2) ) (= (image$ ?v0 top$) top$a)) ))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list_a_list_fun$)) (=> (forall ((?v2 A_list$)) (= (fun_app$b ?v0 (fun_app$b ?v1 ?v2)) ?v2) ) (= (image$b ?v0 top$) top$)) ))
(assert (= (product_lists$ nil$b) (cons$b nil$ nil$b)))
(assert (forall ((?v0 A_llist$)) (= (fun_app$ (fun_app$u (fun_app$v (unfold_llist$ lnull$b) uud$) uue$) ?v0) ?v0) ))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A$) (?v2 A_list$)) (! (= (fun_app$b (maps$ ?v0) (cons$ ?v1 ?v2)) (fun_app$b (append$ (fun_app$s ?v0 ?v1)) (fun_app$b (maps$ ?v0) ?v2))) :pattern ((fun_app$b (maps$ ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 A$)) (! (= (fun_app$b (insert$ ?v0) nil$) (cons$ ?v0 nil$)) :pattern ((insert$ ?v0)))))
(assert (forall ((?v0 A_a_list_fun$)) (! (= (fun_app$b (maps$ ?v0) nil$) nil$) :pattern ((maps$ ?v0)))))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$)) (= (remdups_adj$ (fun_app$b (append$ ?v0) (cons$ ?v1 ?v2))) (fun_app$b (append$ (remdups_adj$ (fun_app$b (append$ ?v0) (cons$ ?v1 nil$)))) (tl$ (remdups_adj$ (cons$ ?v1 ?v2))))) ))
(assert (forall ((?v0 A_list$) (?v1 A$)) (= (last$ (fun_app$b (append$ ?v0) (cons$ ?v1 nil$))) ?v1) ))
(assert (forall ((?v0 A_list$) (?v1 A$)) (= (butlast$ (fun_app$b (append$ ?v0) (cons$ ?v1 nil$))) ?v0) ))
(assert (forall ((?v0 A_list$)) (= (= (remdups_adj$ ?v0) nil$) (= ?v0 nil$)) ))
(assert (forall ((?v0 A_list$)) (= (hd$ (remdups_adj$ ?v0)) (hd$ ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= ?v0 nil$)) (= (last$ (fun_app$b (append$ ?v1) ?v0)) (last$ ?v0))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (= ?v0 nil$) (= (last$ (fun_app$b (append$ ?v1) ?v0)) (last$ ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (= (cons$ ?v0 (tl$ (remdups_adj$ (cons$ ?v0 ?v1)))) (remdups_adj$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_list$)) (=> (not (= ?v0 nil$)) (= (fun_app$b (append$ (butlast$ ?v0)) (cons$ (last$ ?v0) nil$)) ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$)) (= (= (fun_app$b (append$ ?v0) (cons$ ?v1 nil$)) ?v2) (and (not (= ?v2 nil$)) (and (= (butlast$ ?v2) ?v0) (= (last$ ?v2) ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$)) (! (= (remdups_adj$ (cons$ ?v0 (cons$ ?v1 ?v2))) (ite (= ?v0 ?v1) (remdups_adj$ (cons$ ?v0 ?v2)) (cons$ ?v0 (remdups_adj$ (cons$ ?v1 ?v2))))) :pattern ((cons$ ?v0 (cons$ ?v1 ?v2))))))
(assert (= (remdups_adj$ nil$) nil$))
(assert (forall ((?v0 A_list$)) (= (butlast$ (tl$ ?v0)) (tl$ (butlast$ ?v0))) ))
(assert (= (butlast$ nil$) nil$))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (= (remdups_adj$ ?v0) ?v1) (and (=> (and (= ?v0 nil$) (= ?v1 nil$)) false) (and (forall ((?v2 A$)) (=> (and (= ?v0 (cons$ ?v2 nil$)) (= ?v1 (cons$ ?v2 nil$))) false) ) (forall ((?v2 A$) (?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (cons$ ?v2 (cons$ ?v3 ?v4))) (= ?v1 (ite (= ?v2 ?v3) (remdups_adj$ (cons$ ?v2 ?v4)) (cons$ ?v2 (remdups_adj$ (cons$ ?v3 ?v4)))))) false) )))) false) ))
(assert (forall ((?v0 A$)) (! (= (remdups_adj$ (cons$ ?v0 nil$)) (cons$ ?v0 nil$)) :pattern ((uuf$ ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (= (butlast$ (cons$ ?v0 ?v1)) (ite (= ?v1 nil$) nil$ (cons$ ?v0 (butlast$ ?v1)))) ))
(assert (forall ((?v0 A_list$) (?v1 A$)) (! (=> (not (= ?v0 nil$)) (= (last$ (cons$ ?v1 ?v0)) (last$ ?v0))) :pattern ((cons$ ?v1 ?v0)))))
(assert (forall ((?v0 A_list$) (?v1 A$)) (! (=> (= ?v0 nil$) (= (last$ (cons$ ?v1 ?v0)) ?v1)) :pattern ((cons$ ?v1 ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (last$ (cons$ ?v0 ?v1)) (ite (= ?v1 nil$) ?v0 (last$ ?v1))) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (butlast$ (fun_app$b (append$ ?v0) ?v1)) (ite (= ?v1 nil$) (butlast$ ?v0) (fun_app$b (append$ ?v0) (butlast$ ?v1)))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (last$ (fun_app$b (append$ ?v0) ?v1)) (ite (= ?v1 nil$) (last$ ?v0) (last$ ?v1))) ))
(assert (forall ((?v0 A_list$)) (=> (or (= ?v0 nil$) (not (= (tl$ ?v0) nil$))) (= (last$ (tl$ ?v0)) (last$ ?v0))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A$)) (= (remdups_adj$ (fun_app$b (append$ ?v0) (cons$ ?v1 (cons$ ?v2 nil$)))) (fun_app$b (append$ (remdups_adj$ (fun_app$b (append$ ?v0) (cons$ ?v1 nil$)))) (ite (= ?v1 ?v2) nil$ (cons$ ?v2 nil$)))) ))
(assert (forall ((?v0 A_bool_fun$)) (! (= (fun_app$f (list_ex1$ ?v0) nil$) false) :pattern ((list_ex1$ ?v0)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$c (pred_llist$ ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$i ?v0 ?v1) (fun_app$c (pred_llist$ ?v0) ?v2))) :pattern ((fun_app$c (pred_llist$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$)) (! (= (fun_app$f (fun_app$r (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) nil$) false) :pattern ((fun_app$r (lexordp_eq$ ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A_list$)) (! (= (fun_app$f (fun_app$r (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4)) (or (fun_app$i (fun_app$w ?v0 ?v1) ?v3) (and (not (fun_app$i (fun_app$w ?v0 ?v3) ?v1)) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v2) ?v4)))) :pattern ((fun_app$f (fun_app$r (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v1) nil$) (= ?v1 nil$)) :pattern ((fun_app$r (lexordp_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$f (fun_app$r (lexordp_eq$ ?v0) nil$) ?v1) true) :pattern ((fun_app$f (fun_app$r (lexordp_eq$ ?v0) nil$) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) nil$) ?v1) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (fun_app$i (fun_app$w ?v0 ?v1) ?v2) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (not (fun_app$i (fun_app$w ?v0 ?v1) ?v2)) (and (not (fun_app$i (fun_app$w ?v0 ?v2) ?v1)) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v3) ?v4))) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_bool_fun$)) (fun_app$c (pred_llist$ ?v0) lNil$) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_list$)) (and (= ?v1 nil$) (= ?v2 ?v3)) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$i (fun_app$w ?v0 ?v3) ?v4))) ) (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$i (fun_app$w ?v0 ?v3) ?v4)) (and (not (fun_app$i (fun_app$w ?v0 ?v4) ?v3)) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$)) (=> (and (= ?v1 nil$) (= ?v2 ?v3)) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$i (fun_app$w ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$i (fun_app$w ?v0 ?v3) ?v4)) (and (not (fun_app$i (fun_app$w ?v0 ?v4) ?v3)) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$f (fun_app$r (listrelp$ ?v0) ?v1) ?v2) (or (and (= ?v1 nil$) (= ?v2 nil$)) (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$i (fun_app$w ?v0 ?v3) ?v4) (fun_app$f (fun_app$r (listrelp$ ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$f (fun_app$r (listrelp$ ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$) (= ?v2 nil$)) false) (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$i (fun_app$w ?v0 ?v3) ?v4) (fun_app$f (fun_app$r (listrelp$ ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (fun_app$i (fun_app$w ?v0 ?v1) ?v2) (fun_app$f (fun_app$r (listrelp$ ?v0) ?v3) ?v4)) (fun_app$f (fun_app$r (listrelp$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$f (fun_app$r (listrelp$ ?v0) nil$) nil$) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$c (fun_app$l ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$c (fun_app$l ?v0 ?v4) ?v5) (or (exists ((?v6 A_llist$) (?v7 A_llist$) (?v8 A$)) (and (= ?v4 (lCons$ ?v8 ?v6)) (and (= ?v5 (lCons$ ?v8 ?v7)) (or (fun_app$c (fun_app$l ?v0 ?v6) ?v7) (fun_app$c (fun_app$l (llexord$ ?v3) ?v6) ?v7)))) ) (or (exists ((?v6 A$) (?v7 A$) (?v8 A_llist$) (?v9 A_llist$)) (and (= ?v4 (lCons$ ?v6 ?v8)) (and (= ?v5 (lCons$ ?v7 ?v9)) (fun_app$i (fun_app$w ?v3 ?v6) ?v7))) ) (exists ((?v6 A_llist$)) (and (= ?v4 lNil$) (= ?v5 ?v6)) )))) )) (fun_app$c (fun_app$l (llexord$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$l (llexord$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (=> (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$c (fun_app$l (llexord$ ?v0) ?v3) ?v4))) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$i (fun_app$w ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_llist$)) (=> (and (= ?v1 lNil$) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$i (fun_app$w ?v0 ?v1) ?v2) (fun_app$c (fun_app$l (llexord$ ?v0) (lCons$ ?v1 ?v3)) (lCons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A$)) (=> (fun_app$c (fun_app$l (llexord$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$l (llexord$ ?v0) (lCons$ ?v3 ?v1)) (lCons$ ?v3 ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$c (fun_app$l (llexord$ ?v0) lNil$) ?v1) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$c (fun_app$l (llexord$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$c (fun_app$l (llexord$ ?v0) ?v3) ?v4))) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$i (fun_app$w ?v0 ?v3) ?v4))) ) (exists ((?v3 A_llist$)) (and (= ?v1 lNil$) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (= (ltl$a (lzip$ ?v0 ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (and (= (fun_app$b (fun_app$x (map_tailrec_rev$ ?v0) ?v1) ?v2) ?v3) (and (forall ((?v4 A_a_fun$) (?v5 A_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 nil$) (and (= ?v2 ?v5) (= ?v3 ?v5)))) false) ) (forall ((?v4 A_a_fun$) (?v5 A$) (?v6 A_list$) (?v7 A_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 (cons$ ?v5 ?v6)) (and (= ?v2 ?v7) (= ?v3 (fun_app$b (fun_app$x (map_tailrec_rev$ ?v4) ?v6) (cons$ (fun_app$y ?v4 ?v5) ?v7)))))) false) ))) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$a (lzip$ ?v0 ?v1)) (or (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$a (lzip$ ?v0 ?v1))) (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (! (= (fun_app$b (fun_app$x (map_tailrec_rev$ ?v0) (cons$ ?v1 ?v2)) ?v3) (fun_app$b (fun_app$x (map_tailrec_rev$ ?v0) ?v2) (cons$ (fun_app$y ?v0 ?v1) ?v3))) :pattern ((fun_app$b (fun_app$x (map_tailrec_rev$ ?v0) (cons$ ?v1 ?v2)) ?v3)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (or (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) (= (lzip$ ?v0 ?v1) lNil$a)) :pattern ((lzip$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) (lnull$a (lzip$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (not (lnull$a (lzip$ ?v0 ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lzip$ ?v0 ?v1) (ite (or (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) lNil$a (lCons$a (pair$ (lhd$ ?v0) (lhd$ ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (= (lzip$ ?v0 ?v1) (lCons$a (pair$ (lhd$ ?v0) (lhd$ ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_list_a_list_prod$)) (=> (and (forall ((?v1 A_list$)) (=> (= ?v0 (pair$a nil$ ?v1)) false) ) (and (forall ((?v1 A$) (?v2 A_list$)) (=> (= ?v0 (pair$a (cons$ ?v1 ?v2) nil$)) false) ) (forall ((?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A_list$)) (=> (= ?v0 (pair$a (cons$ ?v1 ?v2) (cons$ ?v3 ?v4))) false) ))) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (= (lhd$a (lzip$ ?v0 ?v1)) (pair$ (lhd$ ?v0) (lhd$ ?v1)))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A_a_prod_set$)) (= (member$a (pair$a (fun_app$b (append$ ?v0) (cons$ ?v1 nil$)) (fun_app$b (append$ ?v2) (cons$ ?v3 nil$))) (listrel1$ ?v4)) (or (and (member$a (pair$a ?v0 ?v2) (listrel1$ ?v4)) (= ?v1 ?v3)) (and (= ?v0 ?v2) (member$b (pair$ ?v1 ?v3) ?v4)))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_a_prod_set$) (?v3 A_list$) (?v4 A_list$) (?v5 A_list$)) (=> (member$b (pair$ ?v0 ?v1) ?v2) (member$a (pair$a (fun_app$b (append$ ?v3) (cons$ ?v0 ?v4)) (fun_app$b (append$ ?v3) (cons$ ?v1 ?v5))) (lexord$ ?v2))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$) (?v4 A_a_prod_set$)) (= (member$a (pair$a (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (listrel1$ ?v4)) (or (and (member$b (pair$ ?v0 ?v2) ?v4) (= ?v1 ?v3)) (and (= ?v0 ?v2) (member$a (pair$a ?v1 ?v3) (listrel1$ ?v4))))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$) (?v4 A_a_prod_set$)) (= (member$a (pair$a (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (lexord$ ?v4)) (or (member$b (pair$ ?v0 ?v2) ?v4) (and (= ?v0 ?v2) (member$a (pair$a ?v1 ?v3) (lexord$ ?v4))))) ))
(assert (forall ((?v0 A_list$) (?v1 A_a_prod_set$)) (= (member$a (pair$a nil$ ?v0) (lexord$ ?v1)) (exists ((?v2 A$) (?v3 A_list$)) (= ?v0 (cons$ ?v2 ?v3)) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_a_prod_set$) (?v3 A_list$) (?v4 A_list$)) (=> (or (and (member$a (pair$a ?v0 ?v1) (listrel1$ ?v2)) (= ?v3 ?v4)) (and (= ?v0 ?v1) (member$a (pair$a ?v3 ?v4) (listrel1$ ?v2)))) (member$a (pair$a (fun_app$b (append$ ?v0) ?v3) (fun_app$b (append$ ?v1) ?v4)) (listrel1$ ?v2))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_a_prod_set$)) (=> (and (member$a (pair$a (fun_app$b (append$ ?v0) ?v1) (fun_app$b (append$ ?v0) ?v2)) (lexord$ ?v3)) (forall ((?v4 A$)) (not (member$b (pair$ ?v4 ?v4) ?v3)) )) (member$a (pair$a ?v1 ?v2) (lexord$ ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_a_prod_set$) (?v3 A_list$)) (=> (member$a (pair$a ?v0 ?v1) (lexord$ ?v2)) (member$a (pair$a (fun_app$b (append$ ?v3) ?v0) (fun_app$b (append$ ?v3) ?v1)) (lexord$ ?v2))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_a_prod_set$)) (=> (exists ((?v3 A$) (?v4 A_list$)) (= ?v0 (cons$ ?v3 ?v4)) ) (member$a (pair$a ?v1 (fun_app$b (append$ ?v1) ?v0)) (lexord$ ?v2))) ))
(assert (forall ((?v0 A_list$) (?v1 A_a_prod_set$)) (not (member$a (pair$a nil$ ?v0) (listrel1$ ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_a_prod_set$)) (not (member$a (pair$a ?v0 nil$) (listrel1$ ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_a_prod_set$)) (not (member$a (pair$a ?v0 nil$) (lexord$ ?v1))) ))
(check-sat)
(exit)

