(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort Enat_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_set_bool_fun$ 0)
(declare-sort A_set_enat_fun$ 0)
(declare-sort Enat_a_set_fun$ 0)
(declare-sort A_set_a_set_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort Enat_a_llist_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_set_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Enat_enat_llist_fun$ 0)
(declare-sort Enat_llist_bool_fun$ 0)
(declare-sort A_set_llist_bool_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_a_llist_enat_fun_fun$ 0)
(declare-sort Bool_enat_enat_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort Enat_enat_enat_fun_fun$ 0)
(declare-sort A_set_a_set_bool_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_enat_enat_fun_fun$ 0)
(declare-sort Enat_a_llist_enat_fun_fun$ 0)
(declare-sort Enat_enat_a_llist_fun_fun$ 0)
(declare-sort Enat_llist_enat_llist_fun$ 0)
(declare-sort A_llist_a_set_enat_fun_fun$ 0)
(declare-sort A_llist_enat_a_set_fun_fun$ 0)
(declare-sort A_set_a_llist_enat_fun_fun$ 0)
(declare-sort Enat_a_llist_a_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_enat_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_enat_fun$ 0)
(declare-sort A_llist_enat_a_llist_fun_fun$ 0)
(declare-sort Enat_a_llist_a_llist_fun_fun$ 0)
(declare-sort Enat_enat_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_fun$ 0)
(declare-sort Enat_enat_fun_enat_enat_fun_fun$ 0)
(declare-sort Enat_enat_fun_enat_a_set_fun_fun$ 0)
(declare-sort Enat_a_set_fun_enat_a_set_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_enat_fun_fun_fun$ 0)
(declare-sort Enat_a_llist_fun_enat_enat_fun_fun$ 0)
(declare-sort Enat_enat_fun_enat_a_llist_fun_fun$ 0)
(declare-sort Enat_llist_enat_llist_bool_fun_fun$ 0)
(declare-sort Enat_a_llist_fun_enat_a_set_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_enat_fun_a_llist_enat_fun_fun$ 0)
(declare-sort Enat_a_llist_fun_enat_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_set_fun_a_llist_enat_fun_fun$ 0)
(declare-sort A_llist_enat_fun_a_llist_a_set_fun_fun$ 0)
(declare-sort A_llist_a_set_fun_a_llist_a_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_enat_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_enat_a_llist_fun_fun$ 0)
(declare-sort A_llist_enat_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort Enat_a_llist_a_llist_fun_a_llist_fun_fun$ 0)
(declare-sort Enat_enat_fun_bool_enat_enat_fun_fun_fun$ 0)
(declare-sort Enat_enat_fun_enat_enat_enat_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_set_fun_fun$ 0)
(declare-sort A_llist_a_set_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_a_llist_enat_fun_fun_a_llist_enat_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_fun_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort Enat_a_llist_a_llist_fun_fun_enat_a_llist_fun_fun$ 0)
(declare-sort Enat_a_llist_fun_a_llist_enat_a_llist_fun_fun_fun$ 0)
(declare-sort Enat_enat_enat_fun_fun_enat_enat_enat_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_enat_enat_fun_fun_enat_a_llist_enat_fun_fun_fun$ 0)
(declare-sort Enat_enat_a_llist_fun_fun_enat_enat_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_enat_a_set_fun_fun_enat_a_llist_a_set_fun_fun_fun$ 0)
(declare-sort A_llist_enat_a_llist_fun_fun_enat_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_enat_fun_a_llist_a_llist_fun_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_fun_a_llist_a_llist_fun_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_enat_a_llist_fun_fun_enat_a_llist_a_llist_fun_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ () Nat_option$)
(declare-fun the$ (Nat_option$) Nat$)
(declare-fun some$ (Nat$) Nat_option$)
(declare-fun rep_enat$ (Enat$) Nat_option$)
(declare-fun abs_enat$ (Nat_option$) Enat$)
(declare-sort Enat_llist$ 0)
(declare-sort A_set_llist$ 0)
(declare-fun lNil$a () Enat_llist$)
(declare-fun lhd$a (Enat_llist$) Enat$)
(declare-fun ltl$a (Enat_llist$) Enat_llist$)
(declare-fun lCons$a (Enat$ Enat_llist$) Enat_llist$)
(declare-fun lNil$b () A_set_llist$)
(declare-fun lhd$b (A_set_llist$) A_set$)
(declare-fun ltl$b (A_set_llist$) A_set_llist$)
(declare-fun lCons$b (A_set$ A_set_llist$) A_set_llist$)
(declare-fun uu$ () A_a_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun bot$ () Enat$)
(declare-fun uua$ (Enat$) Enat_llist_enat_llist_fun$)
(declare-fun uub$ (Enat_set$) Enat_bool_fun$)
(declare-fun uuc$ (A$) A_llist_enat_a_llist_fun_fun$)
(declare-fun uud$ (Enat$ Enat_llist$) Enat_enat_llist_fun$)
(declare-fun uue$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun uuf$ () Enat_enat_bool_fun_fun$)
(declare-fun uug$ (A$) A_llist_a_llist_fun$)
(declare-fun uuh$ () A_set_a_set_bool_fun_fun$)
(declare-fun uui$ () Enat_enat_bool_fun_fun$)
(declare-fun uuj$ (Enat_enat_fun$) Enat_enat_fun_enat_enat_fun_fun$)
(declare-fun uuk$ (Enat_a_llist_fun$) Enat_enat_fun_enat_a_llist_fun_fun$)
(declare-fun uul$ (A_llist_enat_fun$) Enat_a_llist_fun_enat_enat_fun_fun$)
(declare-fun uum$ (A_llist_a_llist_fun$) Enat_a_llist_fun_enat_a_llist_fun_fun$)
(declare-fun uun$ (A_llist$) Enat_a_llist_fun$)
(declare-fun uuo$ () A_llist_a_llist_fun$)
(declare-fun uup$ () Enat_enat_fun$)
(declare-fun uuq$ (A_set_a_llist_fun$) A_llist_a_set_fun_a_llist_a_llist_fun_fun$)
(declare-fun uur$ (Enat_a_llist_fun$) A_llist_a_llist_fun_enat_fun_a_llist_a_llist_fun_a_llist_fun_fun$)
(declare-fun uus$ (Enat_a_llist_fun$) A_llist_enat_fun_a_llist_a_llist_fun_fun$)
(declare-fun uut$ (A_llist_a_llist_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun uuu$ (A_llist_a_llist_fun$) A_llist_a_llist_fun_a_llist_fun_a_llist_a_llist_fun_a_llist_fun_fun$)
(declare-fun uuv$ (A_llist_a_llist_fun_a_llist_fun$) Enat_a_llist_a_llist_fun_fun_enat_a_llist_fun_fun$)
(declare-fun uuw$ (A_llist_a_llist_fun_a_llist_fun$) A_llist_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$)
(declare-fun uux$ (A_llist_a_llist_fun_a_llist_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_a_llist_fun_fun$)
(declare-fun uuy$ (A_set$) A_llist_a_set_fun$)
(declare-fun uuz$ (Enat$) A_llist_enat_fun$)
(declare-fun uva$ (Enat$) Enat_enat_fun$)
(declare-fun uvb$ (Enat_a_set_fun$) Enat_enat_fun_enat_a_set_fun_fun$)
(declare-fun uvc$ (Enat_enat_fun$) A_llist_enat_fun_a_llist_enat_fun_fun$)
(declare-fun uvd$ (A_set_enat_fun$) A_llist_a_set_fun_a_llist_enat_fun_fun$)
(declare-fun uve$ (Enat_a_set_fun$) A_llist_enat_fun_a_llist_a_set_fun_fun$)
(declare-fun uvf$ (A_llist_a_set_fun$) Enat_a_llist_fun_enat_a_set_fun_fun$)
(declare-fun uvg$ (A_llist_enat_fun$) A_llist_a_llist_fun_a_llist_enat_fun_fun$)
(declare-fun uvh$ (A_set_a_set_fun$) A_llist_a_set_fun_a_llist_a_set_fun_fun$)
(declare-fun uvi$ (A_llist_a_set_fun$) A_llist_a_llist_fun_a_llist_a_set_fun_fun$)
(declare-fun uvj$ (Enat$) Enat_a_llist_fun_a_llist_enat_a_llist_fun_fun_fun$)
(declare-fun uvk$ (Enat$) Enat_enat_fun_enat_enat_enat_fun_fun_fun$)
(declare-fun uvl$ (A_llist$) Enat_a_llist_fun$)
(declare-fun uvm$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun uvn$ (A_llist$) A_llist_a_llist_fun_a_llist_fun$)
(declare-fun uvo$ (Enat_enat_enat_fun_fun$) Enat_enat_enat_fun_fun$)
(declare-fun uvp$ (Enat_enat_enat_fun_fun$) Enat_enat_fun_enat_enat_fun_fun$)
(declare-fun uvq$ (A_llist_enat_enat_fun_fun$) Enat_a_llist_enat_fun_fun$)
(declare-fun uvr$ (A_llist_enat_enat_fun_fun$) A_llist_enat_fun_a_llist_enat_fun_fun$)
(declare-fun uvs$ (Enat_enat_a_llist_fun_fun$) Enat_enat_a_llist_fun_fun$)
(declare-fun uvt$ (Enat_enat_a_llist_fun_fun$) Enat_enat_fun_enat_a_llist_fun_fun$)
(declare-fun uvu$ (Enat_a_llist_enat_fun_fun$) A_llist_enat_enat_fun_fun$)
(declare-fun uvv$ (Enat_a_llist_enat_fun_fun$) Enat_a_llist_fun_enat_enat_fun_fun$)
(declare-fun uvw$ (A_llist_a_set_enat_fun_fun$) A_set_a_llist_enat_fun_fun$)
(declare-fun uvx$ (A_llist_a_set_enat_fun_fun$) A_llist_a_set_fun_a_llist_enat_fun_fun$)
(declare-fun uvy$ (A_llist_enat_a_set_fun_fun$) Enat_a_llist_a_set_fun_fun$)
(declare-fun uvz$ (A_llist_enat_a_set_fun_fun$) A_llist_enat_fun_a_llist_a_set_fun_fun$)
(declare-fun uwa$ (A_llist_enat_a_llist_fun_fun$) Enat_a_llist_a_llist_fun_fun$)
(declare-fun uwb$ (A_llist_enat_a_llist_fun_fun$) A_llist_enat_fun_a_llist_a_llist_fun_fun$)
(declare-fun uwc$ (Enat_a_llist_a_llist_fun_fun$) A_llist_enat_a_llist_fun_fun$)
(declare-fun uwd$ (Enat_a_llist_a_llist_fun_fun$) Enat_a_llist_fun_enat_a_llist_fun_fun$)
(declare-fun uwe$ (Enat_a_llist_a_set_fun_fun$) A_llist_enat_a_set_fun_fun$)
(declare-fun uwf$ (Enat_a_llist_a_set_fun_fun$) Enat_a_llist_fun_enat_a_set_fun_fun$)
(declare-fun uwg$ (A_llist_a_llist_enat_fun_fun$) A_llist_a_llist_enat_fun_fun$)
(declare-fun uwh$ (A_llist_a_llist_enat_fun_fun$) A_llist_a_llist_fun_a_llist_enat_fun_fun$)
(declare-fun uwi$ (A_llist_a_set_fun$) A_llist_enat_a_set_fun_fun_enat_a_llist_a_set_fun_fun_fun$)
(declare-fun uwj$ (A_llist_enat_fun$) A_llist_enat_enat_fun_fun_enat_a_llist_enat_fun_fun_fun$)
(declare-fun uwk$ (Enat_a_llist_fun$) Enat_enat_a_llist_fun_fun_enat_enat_a_llist_fun_fun_fun$)
(declare-fun uwl$ (A_llist_a_llist_fun$) A_llist_enat_a_llist_fun_fun_enat_a_llist_a_llist_fun_fun_fun$)
(declare-fun uwm$ (A_llist_a_llist_fun_enat_a_llist_fun_fun$) Enat_a_llist_a_llist_fun_a_llist_fun_fun$)
(declare-fun uwn$ (A_llist_a_llist_fun_a_llist_fun$) A_llist_a_llist_fun_enat_a_llist_fun_fun_enat_a_llist_a_llist_fun_a_llist_fun_fun_fun$)
(declare-fun uwo$ (Enat_enat_fun$) Enat_enat_enat_fun_fun_enat_enat_enat_fun_fun_fun$)
(declare-fun uwp$ (Enat_enat_a_llist_fun_fun$) Enat_a_llist_fun$)
(declare-fun uwq$ (Enat_enat_a_llist_fun_fun$) Enat_a_llist_fun$)
(declare-fun uwr$ (Enat_enat_fun$) Enat_enat_fun_bool_enat_enat_fun_fun_fun$)
(declare-fun uws$ (Enat_enat_fun$) A_llist_enat_a_llist_fun_fun$)
(declare-fun uwt$ (Enat_enat_fun$) Enat_enat_fun$)
(declare-fun uwu$ (Enat_enat_enat_fun_fun$) Enat_enat_fun$)
(declare-fun uwv$ (Enat_enat_enat_fun_fun$) Enat_enat_enat_fun_fun$)
(declare-fun uww$ (Enat_a_llist_fun$) Enat_enat_fun$)
(declare-fun uwx$ (A_a_llist_a_llist_a_llist_fun_fun_fun$) A_a_llist_a_llist_fun_fun$)
(declare-fun uwy$ (A_a_llist_a_llist_a_llist_fun_fun_fun$) A_llist_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun uwz$ (A_a_llist_a_llist_a_llist_fun_fun_fun$) A_llist_a_llist_fun$)
(declare-fun uxa$ (A_a_llist_a_llist_enat_fun_fun_fun$) A_a_llist_enat_fun_fun$)
(declare-fun uxb$ (A_bool_fun$) A_llist_a_llist_fun_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun uxc$ (A_bool_fun$) A_llist_a_llist_a_llist_fun_a_llist_fun_fun$)
(declare-fun uxd$ (A_bool_fun$) A_llist_a_llist_fun_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun uxe$ (A_bool_fun$) A_llist_a_llist_a_llist_fun_a_llist_fun_fun$)
(declare-fun eSuc$ () Enat_enat_fun$)
(declare-fun lset$ () A_llist_a_set_fun$)
(declare-fun llast$ (A_llist$) A$)
(declare-fun lset$a (Enat_llist$) Enat_set$)
(declare-fun ltake$ (Enat$) A_llist_a_llist_fun$)
(declare-fun llast$a (Enat_llist$) Enat$)
(declare-fun ltake$a (Enat$) Enat_llist_enat_llist_fun$)
(declare-fun member$ (Enat$ Enat_set$) Bool)
(declare-fun transp$ (A_llist_a_llist_bool_fun_fun$) Bool)
(declare-fun collect$ (Enat_bool_fun$) Enat_set$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_ord$ (A_llist_a_llist_bool_fun_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$)
(declare-fun less_eq$ () Enat_enat_bool_fun_fun$)
(declare-fun lfinite$ (Enat_llist$) Bool)
(declare-fun llength$ () A_llist_enat_fun$)
(declare-fun llexord$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lsorted$ (A_a_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun transp$a (Enat_enat_bool_fun_fun$) Bool)
(declare-fun transp$b (A_set_a_set_bool_fun_fun$) Bool)
(declare-fun fun_app$a (A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ A_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$b (A_llist_a_a_llist_a_llist_fun_fun_fun$ A_llist$) A_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$c (Enat_a_llist_fun$ Enat$) A_llist$)
(declare-fun fun_app$d (Enat_a_llist_fun_enat_a_llist_fun_fun$ Enat_a_llist_fun$) Enat_a_llist_fun$)
(declare-fun fun_app$e (Enat_enat_a_llist_fun_fun$ Enat$) Enat_a_llist_fun$)
(declare-fun fun_app$f (Enat_enat_fun$ Enat$) Enat$)
(declare-fun fun_app$g (Enat_enat_enat_fun_fun$ Enat$) Enat_enat_fun$)
(declare-fun fun_app$h (Enat_llist_enat_llist_fun$ Enat_llist$) Enat_llist$)
(declare-fun fun_app$i (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$j (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$k (A_set_bool_fun$ A_set$) Bool)
(declare-fun fun_app$l (A_set_a_set_bool_fun_fun$ A_set$) A_set_bool_fun$)
(declare-fun fun_app$m (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$n (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$o (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$p (A_a_llist_a_llist_fun_fun$ A$) A_llist_a_llist_fun$)
(declare-fun fun_app$q (A_llist_a_llist_a_llist_fun_fun$ A_llist$) A_llist_a_llist_fun$)
(declare-fun fun_app$r (A_a_llist_a_llist_a_llist_fun_fun_fun$ A$) A_llist_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$s (A_a_llist_enat_fun_fun$ A$) A_llist_enat_fun$)
(declare-fun fun_app$t (A_llist_a_llist_enat_fun_fun$ A_llist$) A_llist_enat_fun$)
(declare-fun fun_app$u (A_a_llist_a_llist_enat_fun_fun_fun$ A$) A_llist_a_llist_enat_fun_fun$)
(declare-fun fun_app$v (Enat_enat_fun_enat_enat_fun_fun$ Enat_enat_fun$) Enat_enat_fun$)
(declare-fun fun_app$w (A_llist_a_llist_fun_a_llist_fun$ A_llist_a_llist_fun$) A_llist$)
(declare-fun fun_app$x (A_llist_a_llist_a_llist_fun_a_llist_fun_fun$ A_llist$) A_llist_a_llist_fun_a_llist_fun$)
(declare-fun fun_app$y (A_llist_a_llist_fun_a_a_llist_a_llist_fun_fun_fun$ A_llist_a_llist_fun$) A_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$z (A_llist_a_llist_fun_a_llist_enat_fun_fun$ A_llist_a_llist_fun$) A_llist_enat_fun$)
(declare-fun less_eq$a () A_set_a_set_bool_fun_fun$)
(declare-fun less_eq$b (Enat_set$ Enat_set$) Bool)
(declare-fun lfinite$a (A_llist$) Bool)
(declare-fun llexord$a (Enat_enat_bool_fun_fun$) Enat_llist_enat_llist_bool_fun_fun$)
(declare-fun lmember$a (Enat$) Enat_llist_bool_fun$)
(declare-fun lprefix$a (Enat_llist$) Enat_llist_bool_fun$)
(declare-fun lsorted$a (Enat_llist$) Bool)
(declare-fun lsorted$b (Enat_enat_bool_fun_fun$) Enat_llist_bool_fun$)
(declare-fun lsorted$c (A_set_llist$) Bool)
(declare-fun monotone$ (Enat_enat_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ Enat_a_llist_fun$) Bool)
(declare-fun case_enat$ (A_llist$) Enat_a_llist_fun_enat_a_llist_fun_fun$)
(declare-fun fun_app$aa (A_llist_enat_fun_a_llist_a_llist_fun_fun$ A_llist_enat_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$ab (A_llist_enat_a_llist_fun_fun$ A_llist$) Enat_a_llist_fun$)
(declare-fun fun_app$ac (A_llist_enat_fun_a_llist_enat_fun_fun$ A_llist_enat_fun$) A_llist_enat_fun$)
(declare-fun fun_app$ad (A_llist_enat_enat_fun_fun$ A_llist$) Enat_enat_fun$)
(declare-fun fun_app$ae (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$af (A_llist_enat_fun_a_llist_a_set_fun_fun$ A_llist_enat_fun$) A_llist_a_set_fun$)
(declare-fun fun_app$ag (Enat_a_set_fun$ Enat$) A_set$)
(declare-fun fun_app$ah (A_llist_enat_a_set_fun_fun$ A_llist$) Enat_a_set_fun$)
(declare-fun fun_app$ai (A_llist_a_set_fun_a_llist_enat_fun_fun$ A_llist_a_set_fun$) A_llist_enat_fun$)
(declare-fun fun_app$aj (A_set_enat_fun$ A_set$) Enat$)
(declare-fun fun_app$ak (A_llist_a_set_enat_fun_fun$ A_llist$) A_set_enat_fun$)
(declare-fun fun_app$al (Enat_a_llist_a_llist_fun_fun$ Enat$) A_llist_a_llist_fun$)
(declare-fun fun_app$am (Enat_a_llist_fun_enat_enat_fun_fun$ Enat_a_llist_fun$) Enat_enat_fun$)
(declare-fun fun_app$an (Enat_a_llist_enat_fun_fun$ Enat$) A_llist_enat_fun$)
(declare-fun fun_app$ao (Enat_a_llist_fun_enat_a_set_fun_fun$ Enat_a_llist_fun$) Enat_a_set_fun$)
(declare-fun fun_app$ap (Enat_a_llist_a_set_fun_fun$ Enat$) A_llist_a_set_fun$)
(declare-fun fun_app$aq (Enat_enat_fun_enat_a_llist_fun_fun$ Enat_enat_fun$) Enat_a_llist_fun$)
(declare-fun fun_app$ar (A_set_a_llist_enat_fun_fun$ A_set$) A_llist_enat_fun$)
(declare-fun fun_app$as (Enat_a_llist_a_llist_fun_a_llist_fun_fun$ Enat$) A_llist_a_llist_fun_a_llist_fun$)
(declare-fun fun_app$at (A_llist_a_llist_fun_enat_a_llist_fun_fun$ A_llist_a_llist_fun$) Enat_a_llist_fun$)
(declare-fun fun_app$au (Enat_enat_llist_fun$ Enat$) Enat_llist$)
(declare-fun fun_app$av (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$aw (A_llist_a_llist_fun_a_llist_fun_a_llist_a_llist_fun_a_llist_fun_fun$ A_llist_a_llist_fun_a_llist_fun$) A_llist_a_llist_fun_a_llist_fun$)
(declare-fun fun_app$ax (A_llist_a_llist_fun_a_llist_a_set_fun_fun$ A_llist_a_llist_fun$) A_llist_a_set_fun$)
(declare-fun fun_app$ay (A_llist_a_llist_fun_enat_fun_a_llist_a_llist_fun_a_llist_fun_fun$ A_llist_a_llist_fun_enat_fun$) A_llist_a_llist_fun_a_llist_fun$)
(declare-fun fun_app$az (A_llist_a_llist_fun_enat_fun$ A_llist_a_llist_fun$) Enat$)
(declare-fun fun_app$ba (Enat_enat_fun_enat_a_set_fun_fun$ Enat_enat_fun$) Enat_a_set_fun$)
(declare-fun fun_app$bb (A_llist_a_set_fun_a_llist_a_llist_fun_fun$ A_llist_a_set_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$bc (A_set_a_llist_fun$ A_set$) A_llist$)
(declare-fun fun_app$bd (A_llist_a_set_fun_a_llist_a_set_fun_fun$ A_llist_a_set_fun$) A_llist_a_set_fun$)
(declare-fun fun_app$be (A_set_a_set_fun$ A_set$) A_set$)
(declare-fun fun_app$bf (A_llist_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$bg (Enat_a_llist_a_llist_fun_fun_enat_a_llist_fun_fun$ Enat_a_llist_a_llist_fun_fun$) Enat_a_llist_fun$)
(declare-fun fun_app$bh (A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_a_llist_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun_a_llist_fun$)
(declare-fun fun_app$bi (Enat_a_llist_fun_a_llist_enat_a_llist_fun_fun_fun$ Enat_a_llist_fun$) A_llist_enat_a_llist_fun_fun$)
(declare-fun fun_app$bj (Enat_enat_fun_enat_enat_enat_fun_fun_fun$ Enat_enat_fun$) Enat_enat_enat_fun_fun$)
(declare-fun fun_app$bk (A_bool_fun$ A$) Bool)
(declare-fun fun_app$bl (A_llist_enat_a_llist_fun_fun_enat_a_llist_a_llist_fun_fun_fun$ A_llist_enat_a_llist_fun_fun$) Enat_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$bm (A_llist_enat_enat_fun_fun_enat_a_llist_enat_fun_fun_fun$ A_llist_enat_enat_fun_fun$) Enat_a_llist_enat_fun_fun$)
(declare-fun fun_app$bn (A_llist_enat_a_set_fun_fun_enat_a_llist_a_set_fun_fun_fun$ A_llist_enat_a_set_fun_fun$) Enat_a_llist_a_set_fun_fun$)
(declare-fun fun_app$bo (Enat_a_set_fun_enat_a_set_fun_fun$ Enat_a_set_fun$) Enat_a_set_fun$)
(declare-fun fun_app$bp (Enat_enat_a_llist_fun_fun_enat_enat_a_llist_fun_fun_fun$ Enat_enat_a_llist_fun_fun$) Enat_enat_a_llist_fun_fun$)
(declare-fun fun_app$bq (Enat_enat_enat_fun_fun_enat_enat_enat_fun_fun_fun$ Enat_enat_enat_fun_fun$) Enat_enat_enat_fun_fun$)
(declare-fun fun_app$br (A_llist_a_llist_fun_enat_a_llist_fun_fun_enat_a_llist_a_llist_fun_a_llist_fun_fun_fun$ A_llist_a_llist_fun_enat_a_llist_fun_fun$) Enat_a_llist_a_llist_fun_a_llist_fun_fun$)
(declare-fun fun_app$bs (Bool_enat_enat_fun_fun$ Bool) Enat_enat_fun$)
(declare-fun fun_app$bt (Enat_enat_fun_bool_enat_enat_fun_fun_fun$ Enat_enat_fun$) Bool_enat_enat_fun_fun$)
(declare-fun fun_app$bu (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$bv (Enat_llist_bool_fun$ Enat_llist$) Bool)
(declare-fun fun_app$bw (Enat_llist_enat_llist_bool_fun_fun$ Enat_llist$) Enat_llist_bool_fun$)
(declare-fun fun_app$bx (A_set_llist_bool_fun$ A_set_llist$) Bool)
(declare-fun fun_app$by (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$bz (Enat_enat_llist_bool_fun_fun$ Enat$) Enat_llist_bool_fun$)
(declare-fun fun_app$ca (A_a_llist_enat_fun_fun_a_llist_enat_fun_fun$ A_a_llist_enat_fun_fun$) A_llist_enat_fun$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun monotone$a (Enat_enat_bool_fun_fun$ Enat_enat_bool_fun_fun$ Enat_enat_fun$) Bool)
(declare-fun monotone$b (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun monotone$c (A_set_a_set_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_set_a_llist_fun$) Bool)
(declare-fun monotone$d (A_llist_a_llist_bool_fun_fun$ A_set_a_set_bool_fun_fun$ A_llist_a_set_fun$) Bool)
(declare-fun monotone$e (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ Enat_enat_bool_fun_fun$ A_llist_a_llist_fun_enat_fun$) Bool)
(declare-fun monotone$f (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun_a_llist_fun$) Bool)
(declare-fun monotone$g (A_llist_a_llist_bool_fun_fun$ Enat_enat_bool_fun_fun$ A_llist_enat_fun$) Bool)
(declare-fun monotone$h (Enat_enat_bool_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ Enat_a_llist_a_llist_fun_fun$) Bool)
(declare-fun monotone$i (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ A_llist_a_llist_a_llist_fun_fun$) Bool)
(declare-fun monotone$j (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) Bool)
(declare-fun monotone$k (Enat_enat_bool_fun_fun$ A_set_a_set_bool_fun_fun$ Enat_a_set_fun$) Bool)
(declare-fun monotone$l (A_set_a_set_bool_fun_fun$ Enat_enat_bool_fun_fun$ A_set_enat_fun$) Bool)
(declare-fun monotone$m (A_set_a_set_bool_fun_fun$ A_set_a_set_bool_fun_fun$ A_set_a_set_fun$) Bool)
(declare-fun case_enat$a (Enat$) Enat_enat_fun_enat_enat_fun_fun$)
(declare-fun case_enat$b (A_set$) Enat_a_set_fun_enat_a_set_fun_fun$)
(declare-fun case_enat$c (Enat_llist$ Enat_enat_llist_fun$ Enat$) Enat_llist$)
(declare-fun case_llist$ (A_llist$) A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$)
(declare-fun ldistinct$a (Enat_llist$) Bool)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun case_llist$a (Enat$) A_a_llist_enat_fun_fun_a_llist_enat_fun_fun$)
(declare-fun pred_llist$a (Enat_bool_fun$) Enat_llist_bool_fun$)
(declare-fun finite_lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun finite_lprefix$a (Enat_llist$) Enat_llist_bool_fun$)
(declare-fun lstrict_prefix$a (Enat_llist$) Enat_llist_bool_fun$)
(assert (forall ((?v0 A_a_llist_a_llist_a_llist_fun_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$ (uwz$ ?v0) ?v1) (fun_app$ (fun_app$a (case_llist$ lNil$) (fun_app$b (uwy$ ?v0) ?v1)) ?v1)) :pattern ((fun_app$ (uwz$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat_enat_a_llist_fun_fun$) (?v1 Enat$)) (! (= (fun_app$c (uwq$ ?v0) ?v1) (fun_app$c (fun_app$d (case_enat$ lNil$) (fun_app$e (uvs$ ?v0) ?v1)) ?v1)) :pattern ((fun_app$c (uwq$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat_enat_a_llist_fun_fun$) (?v1 Enat$)) (! (= (fun_app$c (uwp$ ?v0) ?v1) (fun_app$c (fun_app$e ?v0 ?v1) (fun_app$f eSuc$ ?v1))) :pattern ((fun_app$c (uwp$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat_enat_enat_fun_fun$) (?v1 Enat$)) (! (= (fun_app$f (uwu$ ?v0) ?v1) (fun_app$f (fun_app$g ?v0 ?v1) (fun_app$f eSuc$ ?v1))) :pattern ((fun_app$f (uwu$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (= (fun_app$h (uua$ ?v0) ?v1) (lCons$a ?v0 ?v1)) :pattern ((fun_app$h (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (uug$ ?v0) ?v1) (lCons$ ?v0 ?v1)) :pattern ((fun_app$ (uug$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 Enat$)) (! (= (fun_app$c (uun$ ?v0) ?v1) (fun_app$ (ltake$ ?v1) ?v0)) :pattern ((fun_app$c (uun$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$i (fun_app$j uui$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v0)) :pattern ((fun_app$i (fun_app$j uui$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (= (fun_app$k (fun_app$l uuh$ ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v1) ?v0)) :pattern ((fun_app$k (fun_app$l uuh$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat_set$) (?v1 Enat$)) (! (= (fun_app$i (uub$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$i (uub$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$m (fun_app$n uue$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$m (fun_app$n uue$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$i (fun_app$j uuf$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$i (fun_app$j uuf$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat_a_llist_fun$) (?v1 Enat$)) (! (= (fun_app$f (uww$ ?v0) ?v1) (fun_app$o llength$ (fun_app$c ?v0 ?v1))) :pattern ((fun_app$f (uww$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat$)) (! (= (fun_app$f (uwt$ ?v0) ?v1) (fun_app$f eSuc$ (fun_app$f ?v0 ?v1))) :pattern ((fun_app$f (uwt$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_llist_a_llist_a_llist_fun_fun_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$p (uwx$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$q (fun_app$r ?v0 ?v1) ?v2) (lCons$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$p (uwx$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_llist_a_llist_enat_fun_fun_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$o (fun_app$s (uxa$ ?v0) ?v1) ?v2) (fun_app$o (fun_app$t (fun_app$u ?v0 ?v1) ?v2) (lCons$ ?v1 ?v2))) :pattern ((fun_app$o (fun_app$s (uxa$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_enat_enat_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (! (= (fun_app$f (fun_app$g (uwv$ ?v0) ?v1) ?v2) (fun_app$f (fun_app$v (case_enat$a ?v1) (fun_app$g (uvo$ ?v0) ?v2)) ?v2)) :pattern ((fun_app$f (fun_app$g (uwv$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_llist_fun$)) (! (= (fun_app$w (fun_app$x (uxe$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$a (case_llist$ lNil$) (fun_app$y (uxd$ ?v0) ?v2)) ?v1)) :pattern ((fun_app$w (fun_app$x (uxe$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_llist_fun$)) (! (= (fun_app$w (fun_app$x (uxc$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$a (case_llist$ lNil$) (fun_app$y (uxb$ ?v0) ?v2)) ?v1)) :pattern ((fun_app$w (fun_app$x (uxc$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_enat_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (! (= (fun_app$o (fun_app$z (uwh$ ?v0) ?v1) ?v2) (fun_app$o (fun_app$t ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$o (fun_app$z (uwh$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_enat_a_llist_fun_fun$) (?v1 A_llist_enat_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$aa (uwb$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$ab ?v0 ?v2) (fun_app$o ?v1 ?v2))) :pattern ((fun_app$ (fun_app$aa (uwb$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_enat_enat_fun_fun$) (?v1 A_llist_enat_fun$) (?v2 A_llist$)) (! (= (fun_app$o (fun_app$ac (uvr$ ?v0) ?v1) ?v2) (fun_app$f (fun_app$ad ?v0 ?v2) (fun_app$o ?v1 ?v2))) :pattern ((fun_app$o (fun_app$ac (uvr$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_enat_a_set_fun_fun$) (?v1 A_llist_enat_fun$) (?v2 A_llist$)) (! (= (fun_app$ae (fun_app$af (uvz$ ?v0) ?v1) ?v2) (fun_app$ag (fun_app$ah ?v0 ?v2) (fun_app$o ?v1 ?v2))) :pattern ((fun_app$ae (fun_app$af (uvz$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_set_enat_fun_fun$) (?v1 A_llist_a_set_fun$) (?v2 A_llist$)) (! (= (fun_app$o (fun_app$ai (uvx$ ?v0) ?v1) ?v2) (fun_app$aj (fun_app$ak ?v0 ?v2) (fun_app$ae ?v1 ?v2))) :pattern ((fun_app$o (fun_app$ai (uvx$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_llist_a_llist_fun_fun$) (?v1 Enat_a_llist_fun$) (?v2 Enat$)) (! (= (fun_app$c (fun_app$d (uwd$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$al ?v0 ?v2) (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$d (uwd$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_llist_enat_fun_fun$) (?v1 Enat_a_llist_fun$) (?v2 Enat$)) (! (= (fun_app$f (fun_app$am (uvv$ ?v0) ?v1) ?v2) (fun_app$o (fun_app$an ?v0 ?v2) (fun_app$c ?v1 ?v2))) :pattern ((fun_app$f (fun_app$am (uvv$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_llist_a_set_fun_fun$) (?v1 Enat_a_llist_fun$) (?v2 Enat$)) (! (= (fun_app$ag (fun_app$ao (uwf$ ?v0) ?v1) ?v2) (fun_app$ae (fun_app$ap ?v0 ?v2) (fun_app$c ?v1 ?v2))) :pattern ((fun_app$ag (fun_app$ao (uwf$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_enat_a_llist_fun_fun$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (! (= (fun_app$c (fun_app$aq (uvt$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$e ?v0 ?v2) (fun_app$f ?v1 ?v2))) :pattern ((fun_app$c (fun_app$aq (uvt$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_enat_enat_fun_fun$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (! (= (fun_app$f (fun_app$v (uvp$ ?v0) ?v1) ?v2) (fun_app$f (fun_app$g ?v0 ?v2) (fun_app$f ?v1 ?v2))) :pattern ((fun_app$f (fun_app$v (uvp$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_enat_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$o (fun_app$t (uwg$ ?v0) ?v1) ?v2) (fun_app$o (fun_app$t ?v0 ?v2) ?v1)) :pattern ((fun_app$o (fun_app$t (uwg$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_enat_a_llist_fun_fun$) (?v1 Enat$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$al (uwa$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$ab ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$al (uwa$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_enat_enat_fun_fun$) (?v1 Enat$) (?v2 A_llist$)) (! (= (fun_app$o (fun_app$an (uvq$ ?v0) ?v1) ?v2) (fun_app$f (fun_app$ad ?v0 ?v2) ?v1)) :pattern ((fun_app$o (fun_app$an (uvq$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_enat_a_set_fun_fun$) (?v1 Enat$) (?v2 A_llist$)) (! (= (fun_app$ae (fun_app$ap (uvy$ ?v0) ?v1) ?v2) (fun_app$ag (fun_app$ah ?v0 ?v2) ?v1)) :pattern ((fun_app$ae (fun_app$ap (uvy$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_set_enat_fun_fun$) (?v1 A_set$) (?v2 A_llist$)) (! (= (fun_app$o (fun_app$ar (uvw$ ?v0) ?v1) ?v2) (fun_app$aj (fun_app$ak ?v0 ?v2) ?v1)) :pattern ((fun_app$o (fun_app$ar (uvw$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_llist_a_llist_fun_fun$) (?v1 A_llist$) (?v2 Enat$)) (! (= (fun_app$c (fun_app$ab (uwc$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$al ?v0 ?v2) ?v1)) :pattern ((fun_app$c (fun_app$ab (uwc$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_llist_enat_fun_fun$) (?v1 A_llist$) (?v2 Enat$)) (! (= (fun_app$f (fun_app$ad (uvu$ ?v0) ?v1) ?v2) (fun_app$o (fun_app$an ?v0 ?v2) ?v1)) :pattern ((fun_app$f (fun_app$ad (uvu$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_llist_a_set_fun_fun$) (?v1 A_llist$) (?v2 Enat$)) (! (= (fun_app$ag (fun_app$ah (uwe$ ?v0) ?v1) ?v2) (fun_app$ae (fun_app$ap ?v0 ?v2) ?v1)) :pattern ((fun_app$ag (fun_app$ah (uwe$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_enat_a_llist_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (! (= (fun_app$c (fun_app$e (uvs$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$e ?v0 ?v2) ?v1)) :pattern ((fun_app$c (fun_app$e (uvs$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_enat_enat_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (! (= (fun_app$f (fun_app$g (uvo$ ?v0) ?v1) ?v2) (fun_app$f (fun_app$g ?v0 ?v2) ?v1)) :pattern ((fun_app$f (fun_app$g (uvo$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_fun_enat_a_llist_fun_fun$) (?v1 Enat$) (?v2 A_llist_a_llist_fun$)) (! (= (fun_app$w (fun_app$as (uwm$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$at ?v0 ?v2) ?v1)) :pattern ((fun_app$w (fun_app$as (uwm$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 A_llist$) (?v2 Enat$)) (! (= (fun_app$c (fun_app$ab (uws$ ?v0) ?v1) ?v2) (fun_app$ (ltake$ (fun_app$f ?v0 ?v2)) ?v1)) :pattern ((fun_app$c (fun_app$ab (uws$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat$)) (! (= (fun_app$au (uud$ ?v0 ?v1) ?v2) (lCons$a ?v0 (fun_app$h (ltake$a ?v2) ?v1))) :pattern ((fun_app$au (uud$ ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 Enat$)) (! (= (fun_app$c (fun_app$ab (uuc$ ?v0) ?v1) ?v2) (lCons$ ?v0 (fun_app$ (ltake$ ?v2) ?v1))) :pattern ((fun_app$c (fun_app$ab (uuc$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$av (uut$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$av (uut$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 Enat_a_llist_fun$) (?v2 Enat$)) (! (= (fun_app$c (fun_app$d (uum$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$d (uum$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_fun_a_llist_fun$) (?v2 A_llist_a_llist_fun$)) (! (= (fun_app$w (fun_app$aw (uuu$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$w ?v1 ?v2))) :pattern ((fun_app$w (fun_app$aw (uuu$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_enat_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (! (= (fun_app$o (fun_app$z (uvg$ ?v0) ?v1) ?v2) (fun_app$o ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$o (fun_app$z (uvg$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_enat_fun$) (?v1 Enat_a_llist_fun$) (?v2 Enat$)) (! (= (fun_app$f (fun_app$am (uul$ ?v0) ?v1) ?v2) (fun_app$o ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$f (fun_app$am (uul$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_set_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (! (= (fun_app$ae (fun_app$ax (uvi$ ?v0) ?v1) ?v2) (fun_app$ae ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ae (fun_app$ax (uvi$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_set_fun$) (?v1 Enat_a_llist_fun$) (?v2 Enat$)) (! (= (fun_app$ag (fun_app$ao (uvf$ ?v0) ?v1) ?v2) (fun_app$ae ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$ag (fun_app$ao (uvf$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_llist_fun$) (?v1 A_llist_enat_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$aa (uus$ ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$o ?v1 ?v2))) :pattern ((fun_app$ (fun_app$aa (uus$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_llist_fun$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (! (= (fun_app$c (fun_app$aq (uuk$ ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$f ?v1 ?v2))) :pattern ((fun_app$c (fun_app$aq (uuk$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_llist_fun$) (?v1 A_llist_a_llist_fun_enat_fun$) (?v2 A_llist_a_llist_fun$)) (! (= (fun_app$w (fun_app$ay (uur$ ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$az ?v1 ?v2))) :pattern ((fun_app$w (fun_app$ay (uur$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 A_llist_enat_fun$) (?v2 A_llist$)) (! (= (fun_app$o (fun_app$ac (uvc$ ?v0) ?v1) ?v2) (fun_app$f ?v0 (fun_app$o ?v1 ?v2))) :pattern ((fun_app$o (fun_app$ac (uvc$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (! (= (fun_app$f (fun_app$v (uuj$ ?v0) ?v1) ?v2) (fun_app$f ?v0 (fun_app$f ?v1 ?v2))) :pattern ((fun_app$f (fun_app$v (uuj$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_set_fun$) (?v1 A_llist_enat_fun$) (?v2 A_llist$)) (! (= (fun_app$ae (fun_app$af (uve$ ?v0) ?v1) ?v2) (fun_app$ag ?v0 (fun_app$o ?v1 ?v2))) :pattern ((fun_app$ae (fun_app$af (uve$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_set_fun$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (! (= (fun_app$ag (fun_app$ba (uvb$ ?v0) ?v1) ?v2) (fun_app$ag ?v0 (fun_app$f ?v1 ?v2))) :pattern ((fun_app$ag (fun_app$ba (uvb$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_set_a_llist_fun$) (?v1 A_llist_a_set_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$bb (uuq$ ?v0) ?v1) ?v2) (fun_app$bc ?v0 (fun_app$ae ?v1 ?v2))) :pattern ((fun_app$ (fun_app$bb (uuq$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_set_enat_fun$) (?v1 A_llist_a_set_fun$) (?v2 A_llist$)) (! (= (fun_app$o (fun_app$ai (uvd$ ?v0) ?v1) ?v2) (fun_app$aj ?v0 (fun_app$ae ?v1 ?v2))) :pattern ((fun_app$o (fun_app$ai (uvd$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_set_a_set_fun$) (?v1 A_llist_a_set_fun$) (?v2 A_llist$)) (! (= (fun_app$ae (fun_app$bd (uvh$ ?v0) ?v1) ?v2) (fun_app$be ?v0 (fun_app$ae ?v1 ?v2))) :pattern ((fun_app$ae (fun_app$bd (uvh$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_fun_a_llist_fun$) (?v1 A_llist_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$bf (uuw$ ?v0) ?v1) ?v2) (fun_app$w ?v0 (fun_app$q ?v1 ?v2))) :pattern ((fun_app$ (fun_app$bf (uuw$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_fun_a_llist_fun$) (?v1 Enat_a_llist_a_llist_fun_fun$) (?v2 Enat$)) (! (= (fun_app$c (fun_app$bg (uuv$ ?v0) ?v1) ?v2) (fun_app$w ?v0 (fun_app$al ?v1 ?v2))) :pattern ((fun_app$c (fun_app$bg (uuv$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_fun_a_llist_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun$)) (! (= (fun_app$w (fun_app$bh (uux$ ?v0) ?v1) ?v2) (fun_app$w ?v0 (fun_app$av ?v1 ?v2))) :pattern ((fun_app$w (fun_app$bh (uux$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_llist_a_llist_a_llist_fun_fun_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ (fun_app$p (fun_app$b (uwy$ ?v0) ?v1) ?v2) ?v3) (fun_app$ (fun_app$q (fun_app$r ?v0 ?v2) ?v3) ?v1)) :pattern ((fun_app$ (fun_app$p (fun_app$b (uwy$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_a_llist_fun$) (?v2 A_llist$) (?v3 Enat$)) (! (= (fun_app$c (fun_app$ab (fun_app$bi (uvj$ ?v0) ?v1) ?v2) ?v3) (ite (fun_app$i (fun_app$j less_eq$ ?v3) ?v0) ?v2 (fun_app$c ?v1 ?v3))) :pattern ((fun_app$c (fun_app$ab (fun_app$bi (uvj$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (! (= (fun_app$f (fun_app$g (fun_app$bj (uvk$ ?v0) ?v1) ?v2) ?v3) (ite (fun_app$i (fun_app$j less_eq$ ?v3) ?v0) ?v2 (fun_app$f ?v1 ?v3))) :pattern ((fun_app$f (fun_app$g (fun_app$bj (uvk$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ (fun_app$p (fun_app$y (uxd$ ?v0) ?v1) ?v2) ?v3) (ite (fun_app$bk ?v0 ?v2) (lCons$ ?v2 (fun_app$ ?v1 ?v3)) (fun_app$ ?v1 ?v3))) :pattern ((fun_app$ (fun_app$p (fun_app$y (uxd$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ (fun_app$p (fun_app$y (uxb$ ?v0) ?v1) ?v2) ?v3) (ite (fun_app$bk ?v0 ?v2) (lCons$ ?v2 (fun_app$ ?v1 ?v3)) lNil$)) :pattern ((fun_app$ (fun_app$p (fun_app$y (uxb$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_enat_a_llist_fun_fun$) (?v2 Enat$) (?v3 A_llist$)) (! (= (fun_app$ (fun_app$al (fun_app$bl (uwl$ ?v0) ?v1) ?v2) ?v3) (fun_app$c (fun_app$d (case_enat$ (fun_app$ ?v0 ?v3)) (fun_app$ab ?v1 ?v3)) ?v2)) :pattern ((fun_app$ (fun_app$al (fun_app$bl (uwl$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist_enat_fun$) (?v1 A_llist_enat_enat_fun_fun$) (?v2 Enat$) (?v3 A_llist$)) (! (= (fun_app$o (fun_app$an (fun_app$bm (uwj$ ?v0) ?v1) ?v2) ?v3) (fun_app$f (fun_app$v (case_enat$a (fun_app$o ?v0 ?v3)) (fun_app$ad ?v1 ?v3)) ?v2)) :pattern ((fun_app$o (fun_app$an (fun_app$bm (uwj$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist_a_set_fun$) (?v1 A_llist_enat_a_set_fun_fun$) (?v2 Enat$) (?v3 A_llist$)) (! (= (fun_app$ae (fun_app$ap (fun_app$bn (uwi$ ?v0) ?v1) ?v2) ?v3) (fun_app$ag (fun_app$bo (case_enat$b (fun_app$ae ?v0 ?v3)) (fun_app$ah ?v1 ?v3)) ?v2)) :pattern ((fun_app$ae (fun_app$ap (fun_app$bn (uwi$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Enat_a_llist_fun$) (?v1 Enat_enat_a_llist_fun_fun$) (?v2 Enat$) (?v3 Enat$)) (! (= (fun_app$c (fun_app$e (fun_app$bp (uwk$ ?v0) ?v1) ?v2) ?v3) (fun_app$c (fun_app$d (case_enat$ (fun_app$c ?v0 ?v3)) (fun_app$e ?v1 ?v3)) ?v2)) :pattern ((fun_app$c (fun_app$e (fun_app$bp (uwk$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat_enat_enat_fun_fun$) (?v2 Enat$) (?v3 Enat$)) (! (= (fun_app$f (fun_app$g (fun_app$bq (uwo$ ?v0) ?v1) ?v2) ?v3) (fun_app$f (fun_app$v (case_enat$a (fun_app$f ?v0 ?v3)) (fun_app$g ?v1 ?v3)) ?v2)) :pattern ((fun_app$f (fun_app$g (fun_app$bq (uwo$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist_a_llist_fun_a_llist_fun$) (?v1 A_llist_a_llist_fun_enat_a_llist_fun_fun$) (?v2 Enat$) (?v3 A_llist_a_llist_fun$)) (! (= (fun_app$w (fun_app$as (fun_app$br (uwn$ ?v0) ?v1) ?v2) ?v3) (fun_app$c (fun_app$d (case_enat$ (fun_app$w ?v0 ?v3)) (fun_app$at ?v1 ?v3)) ?v2)) :pattern ((fun_app$w (fun_app$as (fun_app$br (uwn$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat_enat_fun$) (?v2 Bool) (?v3 Enat$)) (! (= (fun_app$f (fun_app$bs (fun_app$bt (uwr$ ?v0) ?v1) ?v2) ?v3) (ite ?v2 (fun_app$f ?v0 ?v3) (fun_app$f ?v1 ?v3))) :pattern ((fun_app$f (fun_app$bs (fun_app$bt (uwr$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$ (uvm$ ?v0) ?v1) ?v0) :pattern ((fun_app$ (uvm$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 Enat$)) (! (= (fun_app$c (uvl$ ?v0) ?v1) ?v0) :pattern ((fun_app$c (uvl$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_fun$)) (! (= (fun_app$w (uvn$ ?v0) ?v1) ?v0) :pattern ((fun_app$w (uvn$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (! (= (fun_app$o (uuz$ ?v0) ?v1) ?v0) :pattern ((fun_app$o (uuz$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$f (uva$ ?v0) ?v1) ?v0) :pattern ((fun_app$f (uva$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_llist$)) (! (= (fun_app$ae (uuy$ ?v0) ?v1) ?v0) :pattern ((fun_app$ae (uuy$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$bk (fun_app$bu uu$ ?v0) ?v1) false) :pattern ((fun_app$bk (fun_app$bu uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ uuo$ ?v0) ?v0) :pattern ((fun_app$ uuo$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$f uup$ ?v0) ?v0) :pattern ((fun_app$f uup$ ?v0)))))
(assert (not (fun_app$m (fun_app$n lprefix$ xs$) ys$)))
(assert (forall ((?v0 A_llist$)) (fun_app$m (fun_app$n lprefix$ ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$)) (fun_app$m (fun_app$n lprefix$ ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n lprefix$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n lprefix$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n lprefix$ ?v2) ?v1)) (or (fun_app$m (fun_app$n lprefix$ ?v0) ?v2) (fun_app$m (fun_app$n lprefix$ ?v2) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n lprefix$ ?v1) ?v2)) (fun_app$m (fun_app$n lprefix$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n lprefix$ ?v1) ?v2)) (fun_app$m (fun_app$n lprefix$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$m (fun_app$n (llexord$ ?v0) ?v1) ?v1) ))
(assert (fun_app$m (fun_app$n (llexord$ uu$) xs$) ys$))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n (llexord$ ?v2) ?v0) ?v1)) ))
(assert (= finite_lprefix$ lprefix$))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$m (lstrict_prefix$ ?v0) ?v1) (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$m (lstrict_prefix$ ?v0) ?v1)))))
(assert (transp$ lprefix$))
(assert (forall ((?v0 Enat_llist$)) (! (= (fun_app$bv (lprefix$a lNil$a) ?v0) true) :pattern ((fun_app$bv (lprefix$a lNil$a) ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$m (fun_app$n lprefix$ lNil$) ?v0) true) :pattern ((fun_app$m (fun_app$n lprefix$ lNil$) ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat$) (?v3 Enat_llist$)) (! (= (fun_app$bv (lprefix$a (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$bv (lprefix$a ?v1) ?v3))) :pattern ((fun_app$bv (lprefix$a (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$m (fun_app$n lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$m (fun_app$n lprefix$ ?v1) ?v3))) :pattern ((fun_app$m (fun_app$n lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (ldistinct$ ?v0) (fun_app$m (fun_app$n lprefix$ ?v1) ?v0)) (ldistinct$ ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (lsorted$ ?v2) ?v1)) (fun_app$m (lsorted$ ?v2) ?v0)) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (=> (and (fun_app$bv (lprefix$a ?v0) ?v1) (lsorted$a ?v1)) (lsorted$a ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (fun_app$m (fun_app$n lprefix$ (fun_app$ (ltake$ ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat$) (?v3 Enat_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$ (ltake$ ?v0) lNil$) lNil$) :pattern ((ltake$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$h (ltake$a ?v0) lNil$a) lNil$a) :pattern ((ltake$a ?v0)))))
(assert (= (ldistinct$ lNil$) true))
(assert (= (ldistinct$a lNil$a) true))
(assert (= (lsorted$a lNil$a) true))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat_llist$) (?v3 Enat$) (?v4 Enat_llist$)) (! (= (fun_app$bv (fun_app$bw (llexord$a ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v3 ?v4)) (or (and (= ?v1 ?v3) (fun_app$bv (fun_app$bw (llexord$a ?v0) ?v2) ?v4)) (fun_app$i (fun_app$j ?v0 ?v1) ?v3))) :pattern ((fun_app$bv (fun_app$bw (llexord$a ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v3 ?v4))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$m (fun_app$n (llexord$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4)) (or (and (= ?v1 ?v3) (fun_app$m (fun_app$n (llexord$ ?v0) ?v2) ?v4)) (fun_app$bk (fun_app$bu ?v0 ?v1) ?v3))) :pattern ((fun_app$m (fun_app$n (llexord$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4))))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat$) (?v3 Enat_llist$)) (! (= (fun_app$bv (lstrict_prefix$a (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$bv (lstrict_prefix$a ?v1) ?v3))) :pattern ((fun_app$bv (lstrict_prefix$a (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$m (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$m (lstrict_prefix$ ?v1) ?v3))) :pattern ((fun_app$m (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))))
(assert (= (fun_app$bv (lstrict_prefix$a lNil$a) lNil$a) false))
(assert (= (fun_app$m (lstrict_prefix$ lNil$) lNil$) false))
(assert (forall ((?v0 Enat$)) (! (= (lsorted$a (lCons$a ?v0 lNil$a)) true) :pattern ((uua$ ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (= (fun_app$bv (lstrict_prefix$a lNil$a) (lCons$a ?v0 ?v1)) true) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$m (lstrict_prefix$ lNil$) (lCons$ ?v0 ?v1)) true) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (= (fun_app$bv (lstrict_prefix$a (lCons$a ?v0 ?v1)) lNil$a) false) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$m (lstrict_prefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat_llist$)) (! (= (fun_app$bv (finite_lprefix$a ?v0) lNil$a) (= ?v0 lNil$a)) :pattern ((finite_lprefix$a ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$m (fun_app$n finite_lprefix$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((fun_app$n finite_lprefix$ ?v0)))))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_llist$) (?v2 Enat_llist$)) (= (fun_app$bv (fun_app$bw (llexord$a ?v0) ?v1) ?v2) (or (exists ((?v3 Enat_llist$) (?v4 Enat_llist$) (?v5 Enat$)) (and (= ?v1 (lCons$a ?v5 ?v3)) (and (= ?v2 (lCons$a ?v5 ?v4)) (fun_app$bv (fun_app$bw (llexord$a ?v0) ?v3) ?v4))) ) (or (exists ((?v3 Enat$) (?v4 Enat$) (?v5 Enat_llist$) (?v6 Enat_llist$)) (and (= ?v1 (lCons$a ?v3 ?v5)) (and (= ?v2 (lCons$a ?v4 ?v6)) (fun_app$i (fun_app$j ?v0 ?v3) ?v4))) ) (exists ((?v3 Enat_llist$)) (and (= ?v1 lNil$a) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$m (fun_app$n (llexord$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$m (fun_app$n (llexord$ ?v0) ?v3) ?v4))) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$bk (fun_app$bu ?v0 ?v3) ?v4))) ) (exists ((?v3 A_llist$)) (and (= ?v1 lNil$) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat_llist$)) (! (= (fun_app$bv (lsorted$b ?v0) (lCons$a ?v1 (lCons$a ?v2 ?v3))) (and (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (fun_app$bv (lsorted$b ?v0) (lCons$a ?v2 ?v3)))) :pattern ((fun_app$bv (lsorted$b ?v0) (lCons$a ?v1 (lCons$a ?v2 ?v3)))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$m (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3))) (and (fun_app$bk (fun_app$bu ?v0 ?v1) ?v2) (fun_app$m (lsorted$ ?v0) (lCons$ ?v2 ?v3)))) :pattern ((fun_app$m (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3)))))))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_llist$)) (= (fun_app$bv (lsorted$b ?v0) ?v1) (or (= ?v1 lNil$a) (or (exists ((?v2 Enat$)) (= ?v1 (lCons$a ?v2 lNil$a)) ) (exists ((?v2 Enat$) (?v3 Enat$) (?v4 Enat_llist$)) (and (= ?v1 (lCons$a ?v2 (lCons$a ?v3 ?v4))) (and (fun_app$i (fun_app$j ?v0 ?v2) ?v3) (fun_app$bv (lsorted$b ?v0) (lCons$a ?v3 ?v4)))) )))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (= (fun_app$m (lsorted$ ?v0) ?v1) (or (= ?v1 lNil$) (or (exists ((?v2 A$)) (= ?v1 (lCons$ ?v2 lNil$)) ) (exists ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (and (= ?v1 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$bk (fun_app$bu ?v0 ?v2) ?v3) (fun_app$m (lsorted$ ?v0) (lCons$ ?v3 ?v4)))) )))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat$) (?v2 Enat_llist$)) (= (fun_app$bv (finite_lprefix$a ?v0) (lCons$a ?v1 ?v2)) (or (= ?v0 lNil$a) (exists ((?v3 Enat_llist$)) (and (= ?v0 (lCons$a ?v1 ?v3)) (fun_app$bv (finite_lprefix$a ?v3) ?v2)) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$m (fun_app$n finite_lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$m (fun_app$n finite_lprefix$ ?v3) ?v2)) ))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat_llist$) (?v3 Enat_llist$)) (= (fun_app$bv (fun_app$bw (llexord$a ?v0) (lCons$a ?v1 ?v2)) ?v3) (exists ((?v4 Enat$) (?v5 Enat_llist$)) (and (= ?v3 (lCons$a ?v4 ?v5)) (or (and (= ?v1 ?v4) (fun_app$bv (fun_app$bw (llexord$a ?v0) ?v2) ?v5)) (fun_app$i (fun_app$j ?v0 ?v1) ?v4))) )) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$m (fun_app$n (llexord$ ?v0) (lCons$ ?v1 ?v2)) ?v3) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v3 (lCons$ ?v4 ?v5)) (or (and (= ?v1 ?v4) (fun_app$m (fun_app$n (llexord$ ?v0) ?v2) ?v5)) (fun_app$bk (fun_app$bu ?v0 ?v1) ?v4))) )) ))
(assert (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 Enat_llist$)) (= (not (= ?v0 lNil$a)) (exists ((?v1 Enat$) (?v2 Enat_llist$)) (= ?v0 (lCons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$)) (! (= (fun_app$bv (lsorted$b ?v0) (lCons$a ?v1 lNil$a)) true) :pattern ((fun_app$bv (lsorted$b ?v0) (lCons$a ?v1 lNil$a))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (! (= (fun_app$m (lsorted$ ?v0) (lCons$ ?v1 lNil$)) true) :pattern ((fun_app$m (lsorted$ ?v0) (lCons$ ?v1 lNil$))))))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$)) (! (= (fun_app$bv (lsorted$b ?v0) lNil$a) true) :pattern ((lsorted$b ?v0)))))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (! (= (fun_app$m (lsorted$ ?v0) lNil$) true) :pattern ((lsorted$ ?v0)))))
(assert (forall ((?v0 Enat_llist$)) (! (= (fun_app$bv (finite_lprefix$a lNil$a) ?v0) true) :pattern ((fun_app$bv (finite_lprefix$a lNil$a) ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$m (fun_app$n finite_lprefix$ lNil$) ?v0) true) :pattern ((fun_app$m (fun_app$n finite_lprefix$ lNil$) ?v0)))))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 Enat_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 Enat$) (?v2 Enat_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_llist$) (?v2 Enat_llist$)) (=> (and (fun_app$bv (fun_app$bw (llexord$a ?v0) ?v1) ?v2) (and (forall ((?v3 Enat_llist$) (?v4 Enat_llist$) (?v5 Enat$)) (=> (and (= ?v1 (lCons$a ?v5 ?v3)) (and (= ?v2 (lCons$a ?v5 ?v4)) (fun_app$bv (fun_app$bw (llexord$a ?v0) ?v3) ?v4))) false) ) (and (forall ((?v3 Enat$) (?v4 Enat$) (?v5 Enat_llist$) (?v6 Enat_llist$)) (=> (and (= ?v1 (lCons$a ?v3 ?v5)) (and (= ?v2 (lCons$a ?v4 ?v6)) (fun_app$i (fun_app$j ?v0 ?v3) ?v4))) false) ) (forall ((?v3 Enat_llist$)) (=> (and (= ?v1 lNil$a) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$m (fun_app$n (llexord$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (=> (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$m (fun_app$n (llexord$ ?v0) ?v3) ?v4))) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$bk (fun_app$bu ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_llist$)) (=> (and (= ?v1 lNil$) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_llist$) (?v2 Enat_llist$) (?v3 Enat$)) (=> (fun_app$bv (fun_app$bw (llexord$a ?v0) ?v1) ?v2) (fun_app$bv (fun_app$bw (llexord$a ?v0) (lCons$a ?v3 ?v1)) (lCons$a ?v3 ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A$)) (=> (fun_app$m (fun_app$n (llexord$ ?v0) ?v1) ?v2) (fun_app$m (fun_app$n (llexord$ ?v0) (lCons$ ?v3 ?v1)) (lCons$ ?v3 ?v2))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_llist$)) (=> (and (fun_app$bv (lsorted$b ?v0) ?v1) (and (=> (= ?v1 lNil$a) false) (and (forall ((?v2 Enat$)) (=> (= ?v1 (lCons$a ?v2 lNil$a)) false) ) (forall ((?v2 Enat$) (?v3 Enat$) (?v4 Enat_llist$)) (=> (and (= ?v1 (lCons$a ?v2 (lCons$a ?v3 ?v4))) (and (fun_app$i (fun_app$j ?v0 ?v2) ?v3) (fun_app$bv (lsorted$b ?v0) (lCons$a ?v3 ?v4)))) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (=> (and (fun_app$m (lsorted$ ?v0) ?v1) (and (=> (= ?v1 lNil$) false) (and (forall ((?v2 A$)) (=> (= ?v1 (lCons$ ?v2 lNil$)) false) ) (forall ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$bk (fun_app$bu ?v0 ?v2) ?v3) (fun_app$m (lsorted$ ?v0) (lCons$ ?v3 ?v4)))) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 Enat$)) (=> (fun_app$m (lsorted$ ?v0) ?v1) (fun_app$m (lsorted$ ?v0) (fun_app$ (ltake$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat$)) (=> (ldistinct$ ?v0) (ldistinct$ (fun_app$ (ltake$ ?v1) ?v0))) ))
(assert (forall ((?v0 Enat_set$)) (= (collect$ (uub$ ?v0)) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$i ?v1 ?v0)) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat$)) (=> (lsorted$a ?v0) (lsorted$a (fun_app$h (ltake$a ?v1) ?v0))) ))
(assert (forall ((?v0 Enat_llist_enat_llist_bool_fun_fun$) (?v1 Enat_llist$) (?v2 Enat_llist$) (?v3 Enat_enat_bool_fun_fun$)) (=> (and (fun_app$bv (fun_app$bw ?v0 ?v1) ?v2) (forall ((?v4 Enat_llist$) (?v5 Enat_llist$)) (=> (fun_app$bv (fun_app$bw ?v0 ?v4) ?v5) (or (exists ((?v6 Enat_llist$) (?v7 Enat_llist$) (?v8 Enat$)) (and (= ?v4 (lCons$a ?v8 ?v6)) (and (= ?v5 (lCons$a ?v8 ?v7)) (or (fun_app$bv (fun_app$bw ?v0 ?v6) ?v7) (fun_app$bv (fun_app$bw (llexord$a ?v3) ?v6) ?v7)))) ) (or (exists ((?v6 Enat$) (?v7 Enat$) (?v8 Enat_llist$) (?v9 Enat_llist$)) (and (= ?v4 (lCons$a ?v6 ?v8)) (and (= ?v5 (lCons$a ?v7 ?v9)) (fun_app$i (fun_app$j ?v3 ?v6) ?v7))) ) (exists ((?v6 Enat_llist$)) (and (= ?v4 lNil$a) (= ?v5 ?v6)) )))) )) (fun_app$bv (fun_app$bw (llexord$a ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$m (fun_app$n ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$m (fun_app$n ?v0 ?v4) ?v5) (or (exists ((?v6 A_llist$) (?v7 A_llist$) (?v8 A$)) (and (= ?v4 (lCons$ ?v8 ?v6)) (and (= ?v5 (lCons$ ?v8 ?v7)) (or (fun_app$m (fun_app$n ?v0 ?v6) ?v7) (fun_app$m (fun_app$n (llexord$ ?v3) ?v6) ?v7)))) ) (or (exists ((?v6 A$) (?v7 A$) (?v8 A_llist$) (?v9 A_llist$)) (and (= ?v4 (lCons$ ?v6 ?v8)) (and (= ?v5 (lCons$ ?v7 ?v9)) (fun_app$bk (fun_app$bu ?v3 ?v6) ?v7))) ) (exists ((?v6 A_llist$)) (and (= ?v4 lNil$) (= ?v5 ?v6)) )))) )) (fun_app$m (fun_app$n (llexord$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat_llist_bool_fun$) (?v1 Enat_llist$) (?v2 Enat_enat_bool_fun_fun$)) (=> (and (fun_app$bv ?v0 ?v1) (forall ((?v3 Enat_llist$)) (=> (fun_app$bv ?v0 ?v3) (or (= ?v3 lNil$a) (or (exists ((?v4 Enat$)) (= ?v3 (lCons$a ?v4 lNil$a)) ) (exists ((?v4 Enat$) (?v5 Enat$) (?v6 Enat_llist$)) (and (= ?v3 (lCons$a ?v4 (lCons$a ?v5 ?v6))) (and (fun_app$i (fun_app$j ?v2 ?v4) ?v5) (or (fun_app$bv ?v0 (lCons$a ?v5 ?v6)) (fun_app$bv (lsorted$b ?v2) (lCons$a ?v5 ?v6))))) )))) )) (fun_app$bv (lsorted$b ?v2) ?v1)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$m ?v0 ?v1) (forall ((?v3 A_llist$)) (=> (fun_app$m ?v0 ?v3) (or (= ?v3 lNil$) (or (exists ((?v4 A$)) (= ?v3 (lCons$ ?v4 lNil$)) ) (exists ((?v4 A$) (?v5 A$) (?v6 A_llist$)) (and (= ?v3 (lCons$ ?v4 (lCons$ ?v5 ?v6))) (and (fun_app$bk (fun_app$bu ?v2 ?v4) ?v5) (or (fun_app$m ?v0 (lCons$ ?v5 ?v6)) (fun_app$m (lsorted$ ?v2) (lCons$ ?v5 ?v6))))) )))) )) (fun_app$m (lsorted$ ?v2) ?v1)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat_llist$)) (=> (and (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (fun_app$bv (lsorted$b ?v0) (lCons$a ?v2 ?v3))) (fun_app$bv (lsorted$b ?v0) (lCons$a ?v1 (lCons$a ?v2 ?v3)))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (=> (and (fun_app$bk (fun_app$bu ?v0 ?v1) ?v2) (fun_app$m (lsorted$ ?v0) (lCons$ ?v2 ?v3))) (fun_app$m (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3)))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat_llist$) (?v4 Enat_llist$)) (=> (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (fun_app$bv (fun_app$bw (llexord$a ?v0) (lCons$a ?v1 ?v3)) (lCons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$bk (fun_app$bu ?v0 ?v1) ?v2) (fun_app$m (fun_app$n (llexord$ ?v0) (lCons$ ?v1 ?v3)) (lCons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (not (= lNil$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_llist$)) (fun_app$bv (fun_app$bw (llexord$a ?v0) lNil$a) ?v1) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$m (fun_app$n (llexord$ ?v0) lNil$) ?v1) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$)) (fun_app$bv (lsorted$b ?v0) (lCons$a ?v1 lNil$a)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (fun_app$m (lsorted$ ?v0) (lCons$ ?v1 lNil$)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$)) (fun_app$bv (lsorted$b ?v0) lNil$a) ))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$m (lsorted$ ?v0) lNil$) ))
(assert (ldistinct$ lNil$))
(assert (ldistinct$a lNil$a))
(assert (forall ((?v0 Enat$)) (lsorted$a (lCons$a ?v0 lNil$a)) ))
(assert (lsorted$a lNil$a))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$m (lstrict_prefix$ ?v3) ?v2) (fun_app$m ?v0 ?v3)) ) (fun_app$m ?v0 ?v2)) ) (fun_app$m ?v0 ?v1)) ))
(assert (forall ((?v0 Enat_llist_enat_llist_bool_fun_fun$) (?v1 Enat_llist$) (?v2 Enat_llist$)) (=> (and (fun_app$bv (fun_app$bw ?v0 ?v1) ?v2) (forall ((?v3 Enat_llist$) (?v4 Enat_llist$)) (=> (fun_app$bv (fun_app$bw ?v0 ?v3) ?v4) (or (exists ((?v5 Enat_llist$)) (and (= ?v3 lNil$a) (= ?v4 ?v5)) ) (exists ((?v5 Enat_llist$) (?v6 Enat_llist$) (?v7 Enat$)) (and (= ?v3 (lCons$a ?v7 ?v5)) (and (= ?v4 (lCons$a ?v7 ?v6)) (or (fun_app$bv (fun_app$bw ?v0 ?v5) ?v6) (fun_app$bv (lprefix$a ?v5) ?v6)))) ))) )) (fun_app$bv (lprefix$a ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$m (fun_app$n ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$m (fun_app$n ?v0 ?v3) ?v4) (or (exists ((?v5 A_llist$)) (and (= ?v3 lNil$) (= ?v4 ?v5)) ) (exists ((?v5 A_llist$) (?v6 A_llist$) (?v7 A$)) (and (= ?v3 (lCons$ ?v7 ?v5)) (and (= ?v4 (lCons$ ?v7 ?v6)) (or (fun_app$m (fun_app$n ?v0 ?v5) ?v6) (fun_app$m (fun_app$n lprefix$ ?v5) ?v6)))) ))) )) (fun_app$m (fun_app$n lprefix$ ?v1) ?v2)) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (=> (and (fun_app$bv (lprefix$a ?v0) ?v1) (and (forall ((?v2 Enat_llist$)) (=> (and (= ?v0 lNil$a) (= ?v1 ?v2)) false) ) (forall ((?v2 Enat_llist$) (?v3 Enat_llist$) (?v4 Enat$)) (=> (and (= ?v0 (lCons$a ?v4 ?v2)) (and (= ?v1 (lCons$a ?v4 ?v3)) (fun_app$bv (lprefix$a ?v2) ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (and (forall ((?v2 A_llist$)) (=> (and (= ?v0 lNil$) (= ?v1 ?v2)) false) ) (forall ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (=> (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$m (fun_app$n lprefix$ ?v2) ?v3))) false) ))) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (= (fun_app$bv (lprefix$a (lCons$a ?v0 ?v1)) lNil$a) false) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$m (fun_app$n lprefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (= (fun_app$bv (lprefix$a ?v0) ?v1) (or (exists ((?v2 Enat_llist$)) (and (= ?v0 lNil$a) (= ?v1 ?v2)) ) (exists ((?v2 Enat_llist$) (?v3 Enat_llist$) (?v4 Enat$)) (and (= ?v0 (lCons$a ?v4 ?v2)) (and (= ?v1 (lCons$a ?v4 ?v3)) (fun_app$bv (lprefix$a ?v2) ?v3))) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (or (exists ((?v2 A_llist$)) (and (= ?v0 lNil$) (= ?v1 ?v2)) ) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$m (fun_app$n lprefix$ ?v2) ?v3))) ))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat$) (?v2 Enat_llist$)) (= (fun_app$bv (lprefix$a ?v0) (lCons$a ?v1 ?v2)) (or (= ?v0 lNil$a) (exists ((?v3 Enat_llist$)) (and (= ?v0 (lCons$a ?v1 ?v3)) (fun_app$bv (lprefix$a ?v3) ?v2)) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$m (fun_app$n lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$m (fun_app$n lprefix$ ?v3) ?v2)) ))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$) (?v2 Enat$)) (=> (fun_app$bv (lprefix$a ?v0) ?v1) (fun_app$bv (lprefix$a (lCons$a ?v2 ?v0)) (lCons$a ?v2 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$)) (=> (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n lprefix$ (lCons$ ?v2 ?v0)) (lCons$ ?v2 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat_llist$)) (= (fun_app$bv (lprefix$a (lCons$a ?v0 ?v1)) ?v2) (exists ((?v3 Enat_llist$)) (and (= ?v2 (lCons$a ?v0 ?v3)) (fun_app$bv (lprefix$a ?v1) ?v3)) )) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$m (fun_app$n lprefix$ (lCons$ ?v0 ?v1)) ?v2) (exists ((?v3 A_llist$)) (and (= ?v2 (lCons$ ?v0 ?v3)) (fun_app$m (fun_app$n lprefix$ ?v1) ?v3)) )) ))
(assert (forall ((?v0 Enat_llist$)) (fun_app$bv (lprefix$a lNil$a) ?v0) ))
(assert (forall ((?v0 A_llist$)) (fun_app$m (fun_app$n lprefix$ lNil$) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$ (ltake$ ?v0) (lCons$ ?v1 ?v2)) (fun_app$c (fun_app$d (case_enat$ lNil$) (fun_app$ab (uuc$ ?v1) ?v2)) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_llist$)) (= (fun_app$h (ltake$a ?v0) (lCons$a ?v1 ?v2)) (case_enat$c lNil$a (uud$ ?v1 ?v2) ?v0)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$m (pred_llist$ ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$bk ?v0 ?v1) (fun_app$m (pred_llist$ ?v0) ?v2))) :pattern ((fun_app$m (pred_llist$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$) (?v2 Enat_llist$)) (! (= (fun_app$bv (pred_llist$a ?v0) (lCons$a ?v1 ?v2)) (and (fun_app$i ?v0 ?v1) (fun_app$bv (pred_llist$a ?v0) ?v2))) :pattern ((fun_app$bv (pred_llist$a ?v0) (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$)) (= (transp$ ?v0) (forall ((?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (fun_app$m (fun_app$n ?v0 ?v1) ?v2) (fun_app$m (fun_app$n ?v0 ?v2) ?v3)) (fun_app$m (fun_app$n ?v0 ?v1) ?v3)) )) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$)) (= (transp$a ?v0) (forall ((?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (fun_app$i (fun_app$j ?v0 ?v2) ?v3)) (fun_app$i (fun_app$j ?v0 ?v1) ?v3)) )) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$)) (=> (forall ((?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (fun_app$m (fun_app$n ?v0 ?v1) ?v2) (fun_app$m (fun_app$n ?v0 ?v2) ?v3)) (fun_app$m (fun_app$n ?v0 ?v1) ?v3)) ) (transp$ ?v0)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$)) (=> (forall ((?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (fun_app$i (fun_app$j ?v0 ?v2) ?v3)) (fun_app$i (fun_app$j ?v0 ?v1) ?v3)) ) (transp$a ?v0)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (transp$ ?v0) (and (fun_app$m (fun_app$n ?v0 ?v1) ?v2) (and (fun_app$m (fun_app$n ?v0 ?v2) ?v3) (=> (fun_app$m (fun_app$n ?v0 ?v1) ?v3) false)))) false) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (transp$a ?v0) (and (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (and (fun_app$i (fun_app$j ?v0 ?v2) ?v3) (=> (fun_app$i (fun_app$j ?v0 ?v1) ?v3) false)))) false) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (transp$ ?v0) (and (fun_app$m (fun_app$n ?v0 ?v1) ?v2) (fun_app$m (fun_app$n ?v0 ?v2) ?v3))) (fun_app$m (fun_app$n ?v0 ?v1) ?v3)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (transp$a ?v0) (and (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (fun_app$i (fun_app$j ?v0 ?v2) ?v3))) (fun_app$i (fun_app$j ?v0 ?v1) ?v3)) ))
(assert (transp$ uue$))
(assert (transp$a uuf$))
(assert (forall ((?v0 A$)) (! (= (llast$ (lCons$ ?v0 lNil$)) ?v0) :pattern ((uug$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (llast$a (lCons$a ?v0 lNil$a)) ?v0) :pattern ((uua$ ?v0)))))
(assert (forall ((?v0 A_set_llist$)) (= (lsorted$c ?v0) (or (= ?v0 lNil$b) (or (exists ((?v1 A_set$)) (= ?v0 (lCons$b ?v1 lNil$b)) ) (exists ((?v1 A_set$) (?v2 A_set$) (?v3 A_set_llist$)) (and (= ?v0 (lCons$b ?v1 (lCons$b ?v2 ?v3))) (and (fun_app$k (fun_app$l less_eq$a ?v1) ?v2) (lsorted$c (lCons$b ?v2 ?v3)))) )))) ))
(assert (forall ((?v0 Enat_llist$)) (= (lsorted$a ?v0) (or (= ?v0 lNil$a) (or (exists ((?v1 Enat$)) (= ?v0 (lCons$a ?v1 lNil$a)) ) (exists ((?v1 Enat$) (?v2 Enat$) (?v3 Enat_llist$)) (and (= ?v0 (lCons$a ?v1 (lCons$a ?v2 ?v3))) (and (fun_app$i (fun_app$j less_eq$ ?v1) ?v2) (lsorted$a (lCons$a ?v2 ?v3)))) )))) ))
(assert (forall ((?v0 A_set_llist$)) (=> (and (lsorted$c ?v0) (and (=> (= ?v0 lNil$b) false) (and (forall ((?v1 A_set$)) (=> (= ?v0 (lCons$b ?v1 lNil$b)) false) ) (forall ((?v1 A_set$) (?v2 A_set$) (?v3 A_set_llist$)) (=> (and (= ?v0 (lCons$b ?v1 (lCons$b ?v2 ?v3))) (and (fun_app$k (fun_app$l less_eq$a ?v1) ?v2) (lsorted$c (lCons$b ?v2 ?v3)))) false) )))) false) ))
(assert (forall ((?v0 Enat_llist$)) (=> (and (lsorted$a ?v0) (and (=> (= ?v0 lNil$a) false) (and (forall ((?v1 Enat$)) (=> (= ?v0 (lCons$a ?v1 lNil$a)) false) ) (forall ((?v1 Enat$) (?v2 Enat$) (?v3 Enat_llist$)) (=> (and (= ?v0 (lCons$a ?v1 (lCons$a ?v2 ?v3))) (and (fun_app$i (fun_app$j less_eq$ ?v1) ?v2) (lsorted$a (lCons$a ?v2 ?v3)))) false) )))) false) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (llast$ (lCons$ ?v0 (lCons$ ?v1 ?v2))) (llast$ (lCons$ ?v1 ?v2))) :pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_llist$)) (! (= (llast$a (lCons$a ?v0 (lCons$a ?v1 ?v2))) (llast$a (lCons$a ?v1 ?v2))) :pattern ((lCons$a ?v0 (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_llist$)) (! (= (lsorted$c (lCons$b ?v0 (lCons$b ?v1 ?v2))) (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (lsorted$c (lCons$b ?v1 ?v2)))) :pattern ((lCons$b ?v0 (lCons$b ?v1 ?v2))))))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_llist$)) (! (= (lsorted$a (lCons$a ?v0 (lCons$a ?v1 ?v2))) (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (lsorted$a (lCons$a ?v1 ?v2)))) :pattern ((lCons$a ?v0 (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$i (fun_app$j less_eq$ ?v3) ?v4) (fun_app$i (fun_app$j ?v0 ?v3) ?v4)) ) (=> (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (fun_app$i (fun_app$j ?v0 ?v2) ?v1))) (fun_app$i (fun_app$j ?v0 ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$) (?v3 Enat$)) (=> (and (= (fun_app$ (ltake$ ?v0) ?v1) (fun_app$ (ltake$ ?v0) ?v2)) (fun_app$i (fun_app$j less_eq$ ?v3) ?v0)) (= (fun_app$ (ltake$ ?v3) ?v1) (fun_app$ (ltake$ ?v3) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_llist$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (lsorted$c (lCons$b ?v1 ?v2))) (lsorted$c (lCons$b ?v0 (lCons$b ?v1 ?v2)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_llist$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (lsorted$a (lCons$a ?v1 ?v2))) (lsorted$a (lCons$a ?v0 (lCons$a ?v1 ?v2)))) ))
(assert (forall ((?v0 A_bool_fun$)) (fun_app$m (pred_llist$ ?v0) lNil$) ))
(assert (forall ((?v0 Enat_bool_fun$)) (fun_app$bv (pred_llist$a ?v0) lNil$a) ))
(assert (forall ((?v0 A_set_llist_bool_fun$) (?v1 A_set_llist$)) (=> (and (fun_app$bx ?v0 ?v1) (forall ((?v2 A_set_llist$)) (=> (fun_app$bx ?v0 ?v2) (or (= ?v2 lNil$b) (or (exists ((?v3 A_set$)) (= ?v2 (lCons$b ?v3 lNil$b)) ) (exists ((?v3 A_set$) (?v4 A_set$) (?v5 A_set_llist$)) (and (= ?v2 (lCons$b ?v3 (lCons$b ?v4 ?v5))) (and (fun_app$k (fun_app$l less_eq$a ?v3) ?v4) (or (fun_app$bx ?v0 (lCons$b ?v4 ?v5)) (lsorted$c (lCons$b ?v4 ?v5))))) )))) )) (lsorted$c ?v1)) ))
(assert (forall ((?v0 Enat_llist_bool_fun$) (?v1 Enat_llist$)) (=> (and (fun_app$bv ?v0 ?v1) (forall ((?v2 Enat_llist$)) (=> (fun_app$bv ?v0 ?v2) (or (= ?v2 lNil$a) (or (exists ((?v3 Enat$)) (= ?v2 (lCons$a ?v3 lNil$a)) ) (exists ((?v3 Enat$) (?v4 Enat$) (?v5 Enat_llist$)) (and (= ?v2 (lCons$a ?v3 (lCons$a ?v4 ?v5))) (and (fun_app$i (fun_app$j less_eq$ ?v3) ?v4) (or (fun_app$bv ?v0 (lCons$a ?v4 ?v5)) (lsorted$a (lCons$a ?v4 ?v5))))) )))) )) (lsorted$a ?v1)) ))
(assert (transp$b uuh$))
(assert (transp$a uui$))
(assert (forall ((?v0 A_set$)) (fun_app$k (fun_app$l less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (fun_app$i (fun_app$j less_eq$ ?v0) ?v0) ))
(assert (transp$b less_eq$a))
(assert (transp$a less_eq$))
(assert (transp$b less_eq$a))
(assert (transp$a less_eq$))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (= (fun_app$f ?v0 (fun_app$f (fun_app$v (case_enat$a ?v1) ?v2) ?v3)) (fun_app$f (fun_app$v (case_enat$a (fun_app$f ?v0 ?v1)) (fun_app$v (uuj$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Enat_a_llist_fun$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (= (fun_app$c ?v0 (fun_app$f (fun_app$v (case_enat$a ?v1) ?v2) ?v3)) (fun_app$c (fun_app$d (case_enat$ (fun_app$c ?v0 ?v1)) (fun_app$aq (uuk$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_enat_fun$) (?v1 A_llist$) (?v2 Enat_a_llist_fun$) (?v3 Enat$)) (= (fun_app$o ?v0 (fun_app$c (fun_app$d (case_enat$ ?v1) ?v2) ?v3)) (fun_app$f (fun_app$v (case_enat$a (fun_app$o ?v0 ?v1)) (fun_app$am (uul$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 Enat_a_llist_fun$) (?v3 Enat$)) (= (fun_app$ ?v0 (fun_app$c (fun_app$d (case_enat$ ?v1) ?v2) ?v3)) (fun_app$c (fun_app$d (case_enat$ (fun_app$ ?v0 ?v1)) (fun_app$d (uum$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A$)) (! (= (fun_app$m (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$bv (lmember$a ?v0) lNil$a) false) :pattern ((lmember$a ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (= ?v0 ?v1) (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v1) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= ?v0 ?v1) (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (=> (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) false) (=> (fun_app$i (fun_app$j less_eq$ ?v1) ?v0) false)) false) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$i (fun_app$j less_eq$ ?v3) ?v4) (fun_app$i (fun_app$j ?v0 ?v3) ?v4)) ) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$i (fun_app$j ?v0 ?v4) ?v3) (fun_app$i (fun_app$j ?v0 ?v3) ?v4)) )) (fun_app$i (fun_app$j ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 Enat_a_set_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$ag ?v1 ?v2)) (and (fun_app$i (fun_app$j less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$i (fun_app$j less_eq$ ?v4) ?v5) (fun_app$k (fun_app$l less_eq$a (fun_app$ag ?v1 ?v4)) (fun_app$ag ?v1 ?v5))) ))) (fun_app$k (fun_app$l less_eq$a ?v0) (fun_app$ag ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 A_set_enat_fun$) (?v2 A_set$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$aj ?v1 ?v2)) (and (fun_app$k (fun_app$l less_eq$a ?v2) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$k (fun_app$l less_eq$a ?v4) ?v5) (fun_app$i (fun_app$j less_eq$ (fun_app$aj ?v1 ?v4)) (fun_app$aj ?v1 ?v5))) ))) (fun_app$i (fun_app$j less_eq$ ?v0) (fun_app$aj ?v1 ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set_a_set_fun$) (?v2 A_set$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$be ?v1 ?v2)) (and (fun_app$k (fun_app$l less_eq$a ?v2) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$k (fun_app$l less_eq$a ?v4) ?v5) (fun_app$k (fun_app$l less_eq$a (fun_app$be ?v1 ?v4)) (fun_app$be ?v1 ?v5))) ))) (fun_app$k (fun_app$l less_eq$a ?v0) (fun_app$be ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$f ?v1 ?v2)) (and (fun_app$i (fun_app$j less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$i (fun_app$j less_eq$ ?v4) ?v5) (fun_app$i (fun_app$j less_eq$ (fun_app$f ?v1 ?v4)) (fun_app$f ?v1 ?v5))) ))) (fun_app$i (fun_app$j less_eq$ ?v0) (fun_app$f ?v1 ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (= ?v0 ?v1) (fun_app$k (fun_app$l less_eq$a ?v1) ?v2)) (fun_app$k (fun_app$l less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v2)) (fun_app$i (fun_app$j less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 ?v1) (fun_app$k (fun_app$l less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 ?v1) (fun_app$i (fun_app$j less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_a_set_fun$) (?v3 A_set$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (and (= (fun_app$ag ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$i (fun_app$j less_eq$ ?v4) ?v5) (fun_app$k (fun_app$l less_eq$a (fun_app$ag ?v2 ?v4)) (fun_app$ag ?v2 ?v5))) ))) (fun_app$k (fun_app$l less_eq$a (fun_app$ag ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (and (= (fun_app$aj ?v2 ?v1) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$k (fun_app$l less_eq$a ?v4) ?v5) (fun_app$i (fun_app$j less_eq$ (fun_app$aj ?v2 ?v4)) (fun_app$aj ?v2 ?v5))) ))) (fun_app$i (fun_app$j less_eq$ (fun_app$aj ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_a_set_fun$) (?v3 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (and (= (fun_app$be ?v2 ?v1) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$k (fun_app$l less_eq$a ?v4) ?v5) (fun_app$k (fun_app$l less_eq$a (fun_app$be ?v2 ?v4)) (fun_app$be ?v2 ?v5))) ))) (fun_app$k (fun_app$l less_eq$a (fun_app$be ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (and (= (fun_app$f ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$i (fun_app$j less_eq$ ?v4) ?v5) (fun_app$i (fun_app$j less_eq$ (fun_app$f ?v2 ?v4)) (fun_app$f ?v2 ?v5))) ))) (fun_app$i (fun_app$j less_eq$ (fun_app$f ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (= ?v1 ?v2)) (fun_app$k (fun_app$l less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$i (fun_app$j less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_a_set_fun$) (?v3 A_set$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (and (fun_app$k (fun_app$l less_eq$a (fun_app$ag ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$i (fun_app$j less_eq$ ?v4) ?v5) (fun_app$k (fun_app$l less_eq$a (fun_app$ag ?v2 ?v4)) (fun_app$ag ?v2 ?v5))) ))) (fun_app$k (fun_app$l less_eq$a (fun_app$ag ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (and (fun_app$i (fun_app$j less_eq$ (fun_app$aj ?v2 ?v1)) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$k (fun_app$l less_eq$a ?v4) ?v5) (fun_app$i (fun_app$j less_eq$ (fun_app$aj ?v2 ?v4)) (fun_app$aj ?v2 ?v5))) ))) (fun_app$i (fun_app$j less_eq$ (fun_app$aj ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_a_set_fun$) (?v3 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (and (fun_app$k (fun_app$l less_eq$a (fun_app$be ?v2 ?v1)) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$k (fun_app$l less_eq$a ?v4) ?v5) (fun_app$k (fun_app$l less_eq$a (fun_app$be ?v2 ?v4)) (fun_app$be ?v2 ?v5))) ))) (fun_app$k (fun_app$l less_eq$a (fun_app$be ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (and (fun_app$i (fun_app$j less_eq$ (fun_app$f ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$i (fun_app$j less_eq$ ?v4) ?v5) (fun_app$i (fun_app$j less_eq$ (fun_app$f ?v2 ?v4)) (fun_app$f ?v2 ?v5))) ))) (fun_app$i (fun_app$j less_eq$ (fun_app$f ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 A_set_enat_fun$) (?v2 A_set$) (?v3 A_set$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) (fun_app$aj ?v1 ?v2)) (and (fun_app$k (fun_app$l less_eq$a ?v2) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$k (fun_app$l less_eq$a ?v4) ?v5) (fun_app$i (fun_app$j less_eq$ (fun_app$aj ?v1 ?v4)) (fun_app$aj ?v1 ?v5))) ))) (fun_app$i (fun_app$j less_eq$ ?v0) (fun_app$aj ?v1 ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 Enat_a_set_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) (fun_app$ag ?v1 ?v2)) (and (fun_app$i (fun_app$j less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$i (fun_app$j less_eq$ ?v4) ?v5) (fun_app$k (fun_app$l less_eq$a (fun_app$ag ?v1 ?v4)) (fun_app$ag ?v1 ?v5))) ))) (fun_app$k (fun_app$l less_eq$a ?v0) (fun_app$ag ?v1 ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set_a_set_fun$) (?v2 A_set$) (?v3 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) (fun_app$be ?v1 ?v2)) (and (fun_app$k (fun_app$l less_eq$a ?v2) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$k (fun_app$l less_eq$a ?v4) ?v5) (fun_app$k (fun_app$l less_eq$a (fun_app$be ?v1 ?v4)) (fun_app$be ?v1 ?v5))) ))) (fun_app$k (fun_app$l less_eq$a ?v0) (fun_app$be ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) (fun_app$f ?v1 ?v2)) (and (fun_app$i (fun_app$j less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$i (fun_app$j less_eq$ ?v4) ?v5) (fun_app$i (fun_app$j less_eq$ (fun_app$f ?v1 ?v4)) (fun_app$f ?v1 ?v5))) ))) (fun_app$i (fun_app$j less_eq$ ?v0) (fun_app$f ?v1 ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v2) ?v0)) (fun_app$k (fun_app$l less_eq$a ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v2) ?v0)) (fun_app$i (fun_app$j less_eq$ ?v2) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v1) ?v2)) (fun_app$k (fun_app$l less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v2)) (fun_app$i (fun_app$j less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v2) ?v0)) (fun_app$k (fun_app$l less_eq$a ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v2) ?v0)) (fun_app$i (fun_app$j less_eq$ ?v2) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v1) ?v2)) (fun_app$k (fun_app$l less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v2)) (fun_app$i (fun_app$j less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a ?v1) ?v2)) (fun_app$k (fun_app$l less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v2)) (fun_app$i (fun_app$j less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (fun_app$k (fun_app$l less_eq$a ?v0) ?v1) (= (fun_app$k (fun_app$l less_eq$a ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$k (fun_app$l less_eq$a ?v1) ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (=> (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (= (fun_app$i (fun_app$j less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$i (fun_app$j less_eq$ ?v1) ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (or (fun_app$i (fun_app$j less_eq$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$)) (fun_app$k (fun_app$l less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (fun_app$i (fun_app$j less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 A_set$)) (fun_app$k (fun_app$l less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (fun_app$i (fun_app$j less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$m (lmember$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$m (lmember$ ?v0) ?v2))) :pattern ((fun_app$m (lmember$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_llist$)) (! (= (fun_app$bv (lmember$a ?v0) (lCons$a ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$bv (lmember$a ?v0) ?v2))) :pattern ((fun_app$bv (lmember$a ?v0) (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 Enat$)) (= (fun_app$m (fun_app$n lprefix$ (fun_app$ (ltake$ ?v0) ?v1)) (fun_app$ (ltake$ ?v2) ?v1)) (or (fun_app$i (fun_app$j less_eq$ ?v0) ?v2) (fun_app$i (fun_app$j less_eq$ (fun_app$o llength$ ?v1)) ?v2))) ))
(assert (forall ((?v0 A_llist$)) (monotone$ less_eq$ lprefix$ (uun$ ?v0)) ))
(assert (forall ((?v0 Enat_llist_bool_fun$) (?v1 Enat_llist$)) (=> (and (fun_app$bv ?v0 lNil$a) (and (forall ((?v2 Enat$) (?v3 Enat_llist$)) (=> (and (lfinite$ ?v3) (fun_app$bv ?v0 ?v3)) (fun_app$bv ?v0 (lCons$a ?v2 ?v3))) ) (=> (forall ((?v2 Enat_llist$)) (=> (fun_app$bv (lstrict_prefix$a ?v2) ?v1) (fun_app$bv ?v0 ?v2)) ) (fun_app$bv ?v0 ?v1)))) (fun_app$bv ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$m ?v0 lNil$) (and (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (lfinite$a ?v3) (fun_app$m ?v0 ?v3)) (fun_app$m ?v0 (lCons$ ?v2 ?v3))) ) (=> (forall ((?v2 A_llist$)) (=> (fun_app$m (lstrict_prefix$ ?v2) ?v1) (fun_app$m ?v0 ?v2)) ) (fun_app$m ?v0 ?v1)))) (fun_app$m ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$)) (= (ldistinct$ ?v0) (or (= ?v0 lNil$) (exists ((?v1 A$) (?v2 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v2)) (and (not (member$a ?v1 (fun_app$ae lset$ ?v2))) (ldistinct$ ?v2))) ))) ))
(assert (forall ((?v0 Enat_llist$)) (= (ldistinct$a ?v0) (or (= ?v0 lNil$a) (exists ((?v1 Enat$) (?v2 Enat_llist$)) (and (= ?v0 (lCons$a ?v1 ?v2)) (and (not (member$ ?v1 (lset$a ?v2))) (ldistinct$a ?v2))) ))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$ ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (= (lfinite$ (lCons$a ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$ ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (= (lfinite$ (lCons$a ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$a ?v0 ?v1)))))
(assert (= (lfinite$a lNil$) true))
(assert (= (lfinite$ lNil$a) true))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ldistinct$ (lCons$ ?v0 ?v1)) (and (not (member$a ?v0 (fun_app$ae lset$ ?v1))) (ldistinct$ ?v1))) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (= (ldistinct$a (lCons$a ?v0 ?v1)) (and (not (member$ ?v0 (lset$a ?v1))) (ldistinct$a ?v1))) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 Enat_a_llist_fun$) (?v1 Enat$) (?v2 A_llist$) (?v3 Enat_a_llist_fun$) (?v4 A_llist_a_llist_bool_fun_fun$)) (=> (and (forall ((?v5 Enat$)) (= (fun_app$c ?v0 ?v5) (ite (fun_app$i (fun_app$j less_eq$ ?v5) ?v1) ?v2 (fun_app$c ?v3 ?v5))) ) (and (forall ((?v5 Enat$) (?v6 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v5) ?v6) (not (fun_app$i (fun_app$j less_eq$ ?v5) ?v1))) (fun_app$m (fun_app$n ?v4 (fun_app$c ?v3 ?v5)) (fun_app$c ?v3 ?v6))) ) (and (forall ((?v5 Enat$)) (=> (not (fun_app$i (fun_app$j less_eq$ ?v5) ?v1)) (fun_app$m (fun_app$n ?v4 ?v2) (fun_app$c ?v3 ?v5))) ) (fun_app$m (fun_app$n ?v4 ?v2) ?v2)))) (monotone$ less_eq$ ?v4 ?v0)) ))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat_enat_fun$) (?v4 Enat_enat_bool_fun_fun$)) (=> (and (forall ((?v5 Enat$)) (= (fun_app$f ?v0 ?v5) (ite (fun_app$i (fun_app$j less_eq$ ?v5) ?v1) ?v2 (fun_app$f ?v3 ?v5))) ) (and (forall ((?v5 Enat$) (?v6 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v5) ?v6) (not (fun_app$i (fun_app$j less_eq$ ?v5) ?v1))) (fun_app$i (fun_app$j ?v4 (fun_app$f ?v3 ?v5)) (fun_app$f ?v3 ?v6))) ) (and (forall ((?v5 Enat$)) (=> (not (fun_app$i (fun_app$j less_eq$ ?v5) ?v1)) (fun_app$i (fun_app$j ?v4 ?v2) (fun_app$f ?v3 ?v5))) ) (fun_app$i (fun_app$j ?v4 ?v2) ?v2)))) (monotone$a less_eq$ ?v4 ?v0)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$)) (monotone$b ?v0 ?v0 uuo$) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$)) (monotone$a ?v0 ?v0 uup$) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$a ?v0)) (= (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$m (fun_app$n lprefix$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (lfinite$a ?v1)) (lfinite$a ?v0)) ))
(assert (forall ((?v0 A_set_a_set_bool_fun_fun$) (?v1 A_set_a_llist_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_set_fun$)) (=> (and (monotone$c ?v0 lprefix$ ?v1) (monotone$d ?v2 ?v0 ?v3)) (monotone$b ?v2 lprefix$ (fun_app$bb (uuq$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_a_llist_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$) (?v3 A_llist_a_llist_fun_enat_fun$)) (=> (and (monotone$ ?v0 lprefix$ ?v1) (monotone$e ?v2 ?v0 ?v3)) (monotone$f ?v2 lprefix$ (fun_app$ay (uur$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_a_llist_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_enat_fun$)) (=> (and (monotone$ ?v0 lprefix$ ?v1) (monotone$g ?v2 ?v0 ?v3)) (monotone$b ?v2 lprefix$ (fun_app$aa (uus$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_a_llist_fun$)) (=> (and (monotone$b ?v0 lprefix$ ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$ (fun_app$d (uum$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (and (monotone$b ?v0 lprefix$ ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$b ?v2 lprefix$ (fun_app$av (uut$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_fun$)) (=> (and (monotone$b ?v0 lprefix$ ?v1) (monotone$f ?v2 ?v0 ?v3)) (monotone$f ?v2 lprefix$ (fun_app$aw (uuu$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_a_llist_a_llist_fun_fun$)) (=> (and (monotone$f ?v0 lprefix$ ?v1) (monotone$h ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$ (fun_app$bg (uuv$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_a_llist_fun_fun$)) (=> (and (monotone$f ?v0 lprefix$ ?v1) (monotone$i ?v2 ?v0 ?v3)) (monotone$b ?v2 lprefix$ (fun_app$bf (uuw$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)) (=> (and (monotone$f ?v0 lprefix$ ?v1) (monotone$j ?v2 ?v0 ?v3)) (monotone$f ?v2 lprefix$ (fun_app$bh (uux$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_a_llist_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_enat_fun$)) (=> (and (monotone$ ?v0 lprefix$ ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$ (fun_app$aq (uuk$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (lfinite$a ?v0) (lfinite$a (lCons$ ?v1 ?v0))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat$)) (=> (lfinite$ ?v0) (lfinite$ (lCons$a ?v1 ?v0))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (=> (fun_app$bv (lprefix$a ?v0) ?v1) (less_eq$b (lset$a ?v0) (lset$a ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$k (fun_app$l less_eq$a (fun_app$ae lset$ ?v0)) (fun_app$ae lset$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (= (fun_app$o llength$ ?v0) (fun_app$o llength$ ?v1))) (= ?v0 ?v1)) ))
(assert (lfinite$a lNil$))
(assert (lfinite$ lNil$a))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (member$a ?v0 (fun_app$ae lset$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (member$ ?v0 (lset$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (member$a ?v0 (fun_app$ae lset$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (member$ ?v0 (lset$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$a ?v0 (fun_app$ae lset$ ?v1)) (member$a ?v0 (fun_app$ae lset$ (lCons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat$)) (=> (member$ ?v0 (lset$a ?v1)) (member$ ?v0 (lset$a (lCons$a ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$a ?v0 (fun_app$ae lset$ ?v1)) (member$a ?v0 (fun_app$ae lset$ (lCons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat$)) (=> (member$ ?v0 (lset$a ?v1)) (member$ ?v0 (lset$a (lCons$a ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$a ?v0 (fun_app$ae lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$a ?v0 (fun_app$ae lset$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (and (member$ ?v0 (lset$a ?v1)) (and (forall ((?v2 Enat_llist$)) (=> (= ?v1 (lCons$a ?v0 ?v2)) false) ) (forall ((?v2 Enat$) (?v3 Enat_llist$)) (=> (and (= ?v1 (lCons$a ?v2 ?v3)) (member$ ?v0 (lset$a ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$a ?v0 (fun_app$ae lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$m ?v2 (lCons$ ?v0 ?v3)) ) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$a ?v0 (fun_app$ae lset$ ?v4)) (and (not (= ?v0 ?v3)) (fun_app$m ?v2 ?v4))) (fun_app$m ?v2 (lCons$ ?v3 ?v4))) ))) (fun_app$m ?v2 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$a ?v1)) (and (forall ((?v3 Enat_llist$)) (fun_app$bv ?v2 (lCons$a ?v0 ?v3)) ) (forall ((?v3 Enat$) (?v4 Enat_llist$)) (=> (and (member$ ?v0 (lset$a ?v4)) (and (not (= ?v0 ?v3)) (fun_app$bv ?v2 ?v4))) (fun_app$bv ?v2 (lCons$a ?v3 ?v4))) ))) (fun_app$bv ?v2 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$a ?v0 (fun_app$ae lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$m ?v2 (lCons$ ?v0 ?v3)) ) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$a ?v0 (fun_app$ae lset$ ?v4)) (fun_app$m ?v2 ?v4)) (fun_app$m ?v2 (lCons$ ?v3 ?v4))) ))) (fun_app$m ?v2 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$a ?v1)) (and (forall ((?v3 Enat_llist$)) (fun_app$bv ?v2 (lCons$a ?v0 ?v3)) ) (forall ((?v3 Enat$) (?v4 Enat_llist$)) (=> (and (member$ ?v0 (lset$a ?v4)) (fun_app$bv ?v2 ?v4)) (fun_app$bv ?v2 (lCons$a ?v3 ?v4))) ))) (fun_app$bv ?v2 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$a ?v0 (fun_app$ae lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$a ?v0 (fun_app$ae lset$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (and (member$ ?v0 (lset$a ?v1)) (and (forall ((?v2 Enat_llist$)) (=> (= ?v1 (lCons$a ?v0 ?v2)) false) ) (forall ((?v2 Enat$) (?v3 Enat_llist$)) (=> (and (= ?v1 (lCons$a ?v2 ?v3)) (member$ ?v0 (lset$a ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (fun_app$ae lset$ ?v1)) (and (forall ((?v3 A$) (?v4 A_llist$)) (fun_app$m (fun_app$by ?v2 ?v3) (lCons$ ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$)) (=> (and (member$a ?v5 (fun_app$ae lset$ ?v4)) (fun_app$m (fun_app$by ?v2 ?v5) ?v4)) (fun_app$m (fun_app$by ?v2 ?v5) (lCons$ ?v3 ?v4))) ))) (fun_app$m (fun_app$by ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat_enat_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$a ?v1)) (and (forall ((?v3 Enat$) (?v4 Enat_llist$)) (fun_app$bv (fun_app$bz ?v2 ?v3) (lCons$a ?v3 ?v4)) ) (forall ((?v3 Enat$) (?v4 Enat_llist$) (?v5 Enat$)) (=> (and (member$ ?v5 (lset$a ?v4)) (fun_app$bv (fun_app$bz ?v2 ?v5) ?v4)) (fun_app$bv (fun_app$bz ?v2 ?v5) (lCons$a ?v3 ?v4))) ))) (fun_app$bv (fun_app$bz ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (fun_app$k (fun_app$l less_eq$a (fun_app$ae lset$ (fun_app$ (ltake$ ?v0) ?v1))) (fun_app$ae lset$ ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (less_eq$b (lset$a (fun_app$h (ltake$a ?v0) ?v1)) (lset$a ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_set$)) (monotone$d ?v0 less_eq$a (uuy$ ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 Enat$)) (monotone$g ?v0 less_eq$ (uuz$ ?v1)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$)) (monotone$a ?v0 less_eq$ (uva$ ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_set$)) (monotone$d ?v0 less_eq$a (uuy$ ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 Enat$)) (monotone$g ?v0 less_eq$ (uuz$ ?v1)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$)) (monotone$a ?v0 less_eq$ (uva$ ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_set$)) (monotone$d ?v0 uuh$ (uuy$ ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 Enat$)) (monotone$g ?v0 uui$ (uuz$ ?v1)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$)) (monotone$a ?v0 uui$ (uva$ ?v1)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_enat_fun$)) (=> (and (monotone$a ?v0 less_eq$ ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$a ?v2 less_eq$ (fun_app$v (uuj$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_a_set_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_enat_fun$)) (=> (and (monotone$k ?v0 less_eq$a ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$k ?v2 less_eq$a (fun_app$ba (uvb$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_enat_fun$)) (=> (and (monotone$a ?v0 less_eq$ ?v1) (monotone$g ?v2 ?v0 ?v3)) (monotone$g ?v2 less_eq$ (fun_app$ac (uvc$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_enat_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_a_llist_fun$)) (=> (and (monotone$g ?v0 less_eq$ ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$a ?v2 less_eq$ (fun_app$am (uul$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_set_a_set_bool_fun_fun$) (?v1 A_set_enat_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_set_fun$)) (=> (and (monotone$l ?v0 less_eq$ ?v1) (monotone$d ?v2 ?v0 ?v3)) (monotone$g ?v2 less_eq$ (fun_app$ai (uvd$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_a_set_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_enat_fun$)) (=> (and (monotone$k ?v0 less_eq$a ?v1) (monotone$g ?v2 ?v0 ?v3)) (monotone$d ?v2 less_eq$a (fun_app$af (uve$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_set_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_a_llist_fun$)) (=> (and (monotone$d ?v0 less_eq$a ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$k ?v2 less_eq$a (fun_app$ao (uvf$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_enat_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (and (monotone$g ?v0 less_eq$ ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$g ?v2 less_eq$ (fun_app$z (uvg$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_set_a_set_bool_fun_fun$) (?v1 A_set_a_set_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_set_fun$)) (=> (and (monotone$m ?v0 less_eq$a ?v1) (monotone$d ?v2 ?v0 ?v3)) (monotone$d ?v2 less_eq$a (fun_app$bd (uvh$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_set_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (and (monotone$d ?v0 less_eq$a ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$d ?v2 less_eq$a (fun_app$ax (uvi$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_enat_fun$)) (=> (and (monotone$a ?v0 uui$ ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$a ?v2 uui$ (fun_app$v (uuj$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_a_set_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_enat_fun$)) (=> (and (monotone$k ?v0 uuh$ ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$k ?v2 uuh$ (fun_app$ba (uvb$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_enat_fun$)) (=> (and (monotone$a ?v0 uui$ ?v1) (monotone$g ?v2 ?v0 ?v3)) (monotone$g ?v2 uui$ (fun_app$ac (uvc$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_enat_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_a_llist_fun$)) (=> (and (monotone$g ?v0 uui$ ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$a ?v2 uui$ (fun_app$am (uul$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_set_a_set_bool_fun_fun$) (?v1 A_set_enat_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_set_fun$)) (=> (and (monotone$l ?v0 uui$ ?v1) (monotone$d ?v2 ?v0 ?v3)) (monotone$g ?v2 uui$ (fun_app$ai (uvd$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_a_set_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_enat_fun$)) (=> (and (monotone$k ?v0 uuh$ ?v1) (monotone$g ?v2 ?v0 ?v3)) (monotone$d ?v2 uuh$ (fun_app$af (uve$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_set_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_a_llist_fun$)) (=> (and (monotone$d ?v0 uuh$ ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$k ?v2 uuh$ (fun_app$ao (uvf$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_enat_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (and (monotone$g ?v0 uui$ ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$g ?v2 uui$ (fun_app$z (uvg$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_set_a_set_bool_fun_fun$) (?v1 A_set_a_set_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_set_fun$)) (=> (and (monotone$m ?v0 uuh$ ?v1) (monotone$d ?v2 ?v0 ?v3)) (monotone$d ?v2 uuh$ (fun_app$bd (uvh$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_set_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (and (monotone$d ?v0 uuh$ ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$d ?v2 uuh$ (fun_app$ax (uvi$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 Enat_a_llist_fun$) (?v3 A_llist$)) (=> (and (forall ((?v4 Enat$) (?v5 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v4) ?v5) (not (fun_app$i (fun_app$j less_eq$ ?v4) ?v0))) (fun_app$m (fun_app$n ?v1 (fun_app$c ?v2 ?v4)) (fun_app$c ?v2 ?v5))) ) (and (forall ((?v4 Enat$)) (=> (not (fun_app$i (fun_app$j less_eq$ ?v4) ?v0)) (fun_app$m (fun_app$n ?v1 ?v3) (fun_app$c ?v2 ?v4))) ) (fun_app$m (fun_app$n ?v1 ?v3) ?v3))) (monotone$ less_eq$ ?v1 (fun_app$ab (fun_app$bi (uvj$ ?v0) ?v2) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_bool_fun_fun$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (forall ((?v4 Enat$) (?v5 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v4) ?v5) (not (fun_app$i (fun_app$j less_eq$ ?v4) ?v0))) (fun_app$i (fun_app$j ?v1 (fun_app$f ?v2 ?v4)) (fun_app$f ?v2 ?v5))) ) (and (forall ((?v4 Enat$)) (=> (not (fun_app$i (fun_app$j less_eq$ ?v4) ?v0)) (fun_app$i (fun_app$j ?v1 ?v3) (fun_app$f ?v2 ?v4))) ) (fun_app$i (fun_app$j ?v1 ?v3) ?v3))) (monotone$a less_eq$ ?v1 (fun_app$g (fun_app$bj (uvk$ ?v0) ?v2) ?v3))) ))
(assert (forall ((?v0 Enat_a_llist_fun$) (?v1 Enat$) (?v2 A_llist$) (?v3 Enat_a_llist_fun$) (?v4 A_llist_a_llist_bool_fun_fun$)) (=> (and (forall ((?v5 Enat$)) (= (fun_app$c ?v0 ?v5) (ite (fun_app$i (fun_app$j less_eq$ ?v1) ?v5) ?v2 (fun_app$c ?v3 ?v5))) ) (and (forall ((?v5 Enat$) (?v6 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v6) ?v5) (not (fun_app$i (fun_app$j less_eq$ ?v1) ?v5))) (fun_app$m (fun_app$n ?v4 (fun_app$c ?v3 ?v5)) (fun_app$c ?v3 ?v6))) ) (and (forall ((?v5 Enat$)) (=> (not (fun_app$i (fun_app$j less_eq$ ?v1) ?v5)) (fun_app$m (fun_app$n ?v4 ?v2) (fun_app$c ?v3 ?v5))) ) (fun_app$m (fun_app$n ?v4 ?v2) ?v2)))) (monotone$ uui$ ?v4 ?v0)) ))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat_enat_fun$) (?v4 Enat_enat_bool_fun_fun$)) (=> (and (forall ((?v5 Enat$)) (= (fun_app$f ?v0 ?v5) (ite (fun_app$i (fun_app$j less_eq$ ?v1) ?v5) ?v2 (fun_app$f ?v3 ?v5))) ) (and (forall ((?v5 Enat$) (?v6 Enat$)) (=> (and (fun_app$i (fun_app$j less_eq$ ?v6) ?v5) (not (fun_app$i (fun_app$j less_eq$ ?v1) ?v5))) (fun_app$i (fun_app$j ?v4 (fun_app$f ?v3 ?v5)) (fun_app$f ?v3 ?v6))) ) (and (forall ((?v5 Enat$)) (=> (not (fun_app$i (fun_app$j less_eq$ ?v1) ?v5)) (fun_app$i (fun_app$j ?v4 ?v2) (fun_app$f ?v3 ?v5))) ) (fun_app$i (fun_app$j ?v4 ?v2) ?v2)))) (monotone$a uui$ ?v4 ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$m (lstrict_prefix$ ?v0) ?v1) (lfinite$a ?v0)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 A_llist$)) (monotone$ ?v0 lprefix$ (uvl$ ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$)) (monotone$b ?v0 lprefix$ (uvm$ ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$) (?v1 A_llist$)) (monotone$f ?v0 lprefix$ (uvn$ ?v1)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 Enat_enat_enat_fun_fun$) (?v3 Enat_enat_bool_fun_fun$) (?v4 Enat_enat_fun$)) (=> (and (forall ((?v5 Enat$)) (monotone$a ?v0 ?v1 (fun_app$g ?v2 ?v5)) ) (and (monotone$a ?v3 ?v0 ?v4) (and (forall ((?v5 Enat$)) (monotone$a ?v3 ?v1 (fun_app$g (uvo$ ?v2) ?v5)) ) (transp$a ?v1)))) (monotone$a ?v3 ?v1 (fun_app$v (uvp$ ?v2) ?v4))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 A_llist_enat_enat_fun_fun$) (?v3 A_llist_a_llist_bool_fun_fun$) (?v4 A_llist_enat_fun$)) (=> (and (forall ((?v5 A_llist$)) (monotone$a ?v0 ?v1 (fun_app$ad ?v2 ?v5)) ) (and (monotone$g ?v3 ?v0 ?v4) (and (forall ((?v5 Enat$)) (monotone$g ?v3 ?v1 (fun_app$an (uvq$ ?v2) ?v5)) ) (transp$a ?v1)))) (monotone$g ?v3 ?v1 (fun_app$ac (uvr$ ?v2) ?v4))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 Enat_enat_a_llist_fun_fun$) (?v3 Enat_enat_bool_fun_fun$) (?v4 Enat_enat_fun$)) (=> (and (forall ((?v5 Enat$)) (monotone$ ?v0 ?v1 (fun_app$e ?v2 ?v5)) ) (and (monotone$a ?v3 ?v0 ?v4) (and (forall ((?v5 Enat$)) (monotone$ ?v3 ?v1 (fun_app$e (uvs$ ?v2) ?v5)) ) (transp$ ?v1)))) (monotone$ ?v3 ?v1 (fun_app$aq (uvt$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 Enat_a_llist_enat_fun_fun$) (?v3 Enat_enat_bool_fun_fun$) (?v4 Enat_a_llist_fun$)) (=> (and (forall ((?v5 Enat$)) (monotone$g ?v0 ?v1 (fun_app$an ?v2 ?v5)) ) (and (monotone$ ?v3 ?v0 ?v4) (and (forall ((?v5 A_llist$)) (monotone$a ?v3 ?v1 (fun_app$ad (uvu$ ?v2) ?v5)) ) (transp$a ?v1)))) (monotone$a ?v3 ?v1 (fun_app$am (uvv$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_set_a_set_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 A_llist_a_set_enat_fun_fun$) (?v3 A_llist_a_llist_bool_fun_fun$) (?v4 A_llist_a_set_fun$)) (=> (and (forall ((?v5 A_llist$)) (monotone$l ?v0 ?v1 (fun_app$ak ?v2 ?v5)) ) (and (monotone$d ?v3 ?v0 ?v4) (and (forall ((?v5 A_set$)) (monotone$g ?v3 ?v1 (fun_app$ar (uvw$ ?v2) ?v5)) ) (transp$a ?v1)))) (monotone$g ?v3 ?v1 (fun_app$ai (uvx$ ?v2) ?v4))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 A_set_a_set_bool_fun_fun$) (?v2 A_llist_enat_a_set_fun_fun$) (?v3 A_llist_a_llist_bool_fun_fun$) (?v4 A_llist_enat_fun$)) (=> (and (forall ((?v5 A_llist$)) (monotone$k ?v0 ?v1 (fun_app$ah ?v2 ?v5)) ) (and (monotone$g ?v3 ?v0 ?v4) (and (forall ((?v5 Enat$)) (monotone$d ?v3 ?v1 (fun_app$ap (uvy$ ?v2) ?v5)) ) (transp$b ?v1)))) (monotone$d ?v3 ?v1 (fun_app$af (uvz$ ?v2) ?v4))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_enat_a_llist_fun_fun$) (?v3 A_llist_a_llist_bool_fun_fun$) (?v4 A_llist_enat_fun$)) (=> (and (forall ((?v5 A_llist$)) (monotone$ ?v0 ?v1 (fun_app$ab ?v2 ?v5)) ) (and (monotone$g ?v3 ?v0 ?v4) (and (forall ((?v5 Enat$)) (monotone$b ?v3 ?v1 (fun_app$al (uwa$ ?v2) ?v5)) ) (transp$ ?v1)))) (monotone$b ?v3 ?v1 (fun_app$aa (uwb$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 Enat_a_llist_a_llist_fun_fun$) (?v3 Enat_enat_bool_fun_fun$) (?v4 Enat_a_llist_fun$)) (=> (and (forall ((?v5 Enat$)) (monotone$b ?v0 ?v1 (fun_app$al ?v2 ?v5)) ) (and (monotone$ ?v3 ?v0 ?v4) (and (forall ((?v5 A_llist$)) (monotone$ ?v3 ?v1 (fun_app$ab (uwc$ ?v2) ?v5)) ) (transp$ ?v1)))) (monotone$ ?v3 ?v1 (fun_app$d (uwd$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_set_a_set_bool_fun_fun$) (?v2 Enat_a_llist_a_set_fun_fun$) (?v3 Enat_enat_bool_fun_fun$) (?v4 Enat_a_llist_fun$)) (=> (and (forall ((?v5 Enat$)) (monotone$d ?v0 ?v1 (fun_app$ap ?v2 ?v5)) ) (and (monotone$ ?v3 ?v0 ?v4) (and (forall ((?v5 A_llist$)) (monotone$k ?v3 ?v1 (fun_app$ah (uwe$ ?v2) ?v5)) ) (transp$b ?v1)))) (monotone$k ?v3 ?v1 (fun_app$ao (uwf$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 A_llist_a_llist_enat_fun_fun$) (?v3 A_llist_a_llist_bool_fun_fun$) (?v4 A_llist_a_llist_fun$)) (=> (and (forall ((?v5 A_llist$)) (monotone$g ?v0 ?v1 (fun_app$t ?v2 ?v5)) ) (and (monotone$b ?v3 ?v0 ?v4) (and (forall ((?v5 A_llist$)) (monotone$g ?v3 ?v1 (fun_app$t (uwg$ ?v2) ?v5)) ) (transp$a ?v1)))) (monotone$g ?v3 ?v1 (fun_app$z (uwh$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_set_a_set_bool_fun_fun$) (?v2 A_llist_a_set_fun$) (?v3 A_llist_enat_a_set_fun_fun$) (?v4 Enat$)) (=> (and (monotone$d ?v0 ?v1 ?v2) (forall ((?v5 Enat$)) (monotone$d ?v0 ?v1 (fun_app$ap (uvy$ ?v3) ?v5)) )) (monotone$d ?v0 ?v1 (fun_app$ap (fun_app$bn (uwi$ ?v2) ?v3) ?v4))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 A_llist_enat_fun$) (?v3 A_llist_enat_enat_fun_fun$) (?v4 Enat$)) (=> (and (monotone$g ?v0 ?v1 ?v2) (forall ((?v5 Enat$)) (monotone$g ?v0 ?v1 (fun_app$an (uvq$ ?v3) ?v5)) )) (monotone$g ?v0 ?v1 (fun_app$an (fun_app$bm (uwj$ ?v2) ?v3) ?v4))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 Enat_a_llist_fun$) (?v3 Enat_enat_a_llist_fun_fun$) (?v4 Enat$)) (=> (and (monotone$ ?v0 ?v1 ?v2) (forall ((?v5 Enat$)) (monotone$ ?v0 ?v1 (fun_app$e (uvs$ ?v3) ?v5)) )) (monotone$ ?v0 ?v1 (fun_app$e (fun_app$bp (uwk$ ?v2) ?v3) ?v4))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist_enat_a_llist_fun_fun$) (?v4 Enat$)) (=> (and (monotone$b ?v0 ?v1 ?v2) (forall ((?v5 Enat$)) (monotone$b ?v0 ?v1 (fun_app$al (uwa$ ?v3) ?v5)) )) (monotone$b ?v0 ?v1 (fun_app$al (fun_app$bl (uwl$ ?v2) ?v3) ?v4))) ))
(assert (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_fun$) (?v3 A_llist_a_llist_fun_enat_a_llist_fun_fun$) (?v4 Enat$)) (=> (and (monotone$f ?v0 ?v1 ?v2) (forall ((?v5 Enat$)) (monotone$f ?v0 ?v1 (fun_app$as (uwm$ ?v3) ?v5)) )) (monotone$f ?v0 ?v1 (fun_app$as (fun_app$br (uwn$ ?v2) ?v3) ?v4))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 Enat_enat_fun$) (?v3 Enat_enat_enat_fun_fun$) (?v4 Enat$)) (=> (and (monotone$a ?v0 ?v1 ?v2) (forall ((?v5 Enat$)) (monotone$a ?v0 ?v1 (fun_app$g (uvo$ ?v3) ?v5)) )) (monotone$a ?v0 ?v1 (fun_app$g (fun_app$bq (uwo$ ?v2) ?v3) ?v4))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (= (member$a ?v0 (fun_app$ae lset$ ?v1)) (fun_app$m (lmember$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (= (member$ ?v0 (lset$a ?v1)) (fun_app$bv (lmember$a ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$)) (=> (and (lfinite$a ?v0) (and (=> (= ?v0 lNil$) false) (forall ((?v1 A_llist$) (?v2 A$)) (=> (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$a ?v1)) false) ))) false) ))
(assert (forall ((?v0 Enat_llist$)) (=> (and (lfinite$ ?v0) (and (=> (= ?v0 lNil$a) false) (forall ((?v1 Enat_llist$) (?v2 Enat$)) (=> (and (= ?v0 (lCons$a ?v2 ?v1)) (lfinite$ ?v1)) false) ))) false) ))
(assert (forall ((?v0 A_llist$)) (= (lfinite$a ?v0) (or (= ?v0 lNil$) (exists ((?v1 A_llist$) (?v2 A$)) (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$a ?v1)) ))) ))
(assert (forall ((?v0 Enat_llist$)) (= (lfinite$ ?v0) (or (= ?v0 lNil$a) (exists ((?v1 Enat_llist$) (?v2 Enat$)) (and (= ?v0 (lCons$a ?v2 ?v1)) (lfinite$ ?v1)) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$i (fun_app$j less_eq$ (fun_app$o llength$ ?v0)) (fun_app$o llength$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat$)) (! (=> (fun_app$i (fun_app$j less_eq$ (fun_app$o llength$ ?v0)) ?v1) (= (fun_app$ (ltake$ ?v1) ?v0) ?v0)) :pattern ((fun_app$ (ltake$ ?v1) ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (and (not (member$ ?v0 (lset$a ?v1))) (ldistinct$a ?v1)) (ldistinct$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (ite (lfinite$a ?v0) (fun_app$m (fun_app$n finite_lprefix$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$m (fun_app$n lprefix$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (= (lsorted$a (lCons$a ?v0 ?v1)) (and (lsorted$a ?v1) (forall ((?v2 Enat$)) (=> (member$ ?v2 (lset$a ?v1)) (fun_app$i (fun_app$j less_eq$ ?v0) ?v2)) ))) ))
(assert (forall ((?v0 Enat_enat_a_llist_fun_fun$)) (=> (monotone$ less_eq$ lprefix$ (uwp$ ?v0)) (monotone$ less_eq$ lprefix$ (uwq$ ?v0))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 Enat_enat_fun$) (?v3 Enat_enat_fun$) (?v4 Bool)) (=> (and (monotone$a ?v0 ?v1 ?v2) (monotone$a ?v0 ?v1 ?v3)) (monotone$a ?v0 ?v1 (fun_app$bs (fun_app$bt (uwr$ ?v2) ?v3) ?v4))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_fun$) (?v2 A_llist$)) (=> (monotone$a ?v0 less_eq$ ?v1) (monotone$ ?v0 lprefix$ (fun_app$ab (uws$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (fun_app$f eSuc$ ?v0) (fun_app$f eSuc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_fun$)) (=> (monotone$a ?v0 less_eq$ ?v1) (monotone$a ?v0 less_eq$ (uwt$ ?v1))) ))
(assert (monotone$a less_eq$ less_eq$ eSuc$))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$i (fun_app$j less_eq$ (fun_app$f eSuc$ ?v0)) ?v1) (exists ((?v2 Enat$)) (and (= ?v1 (fun_app$f eSuc$ ?v2)) (fun_app$i (fun_app$j less_eq$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 A$)) (monotone$b lprefix$ lprefix$ (uug$ ?v0)) ))
(assert (monotone$d lprefix$ less_eq$a lset$))
(assert (forall ((?v0 Enat$)) (monotone$b lprefix$ lprefix$ (ltake$ ?v0)) ))
(assert (monotone$g lprefix$ less_eq$ llength$))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_enat_fun_fun$) (?v2 Enat$)) (=> (and (monotone$a less_eq$ ?v0 (uwu$ ?v1)) (and (forall ((?v3 Enat$)) (fun_app$i (fun_app$j ?v0 ?v2) (fun_app$f (fun_app$g ?v1 ?v3) (fun_app$f eSuc$ ?v3))) ) (fun_app$i (fun_app$j ?v0 ?v2) ?v2))) (monotone$a less_eq$ ?v0 (fun_app$g (uwv$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_a_llist_fun$)) (=> (monotone$ ?v0 lprefix$ ?v1) (monotone$a ?v0 less_eq$ (uww$ ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$i (fun_app$j less_eq$ (fun_app$f eSuc$ ?v0)) (fun_app$f eSuc$ ?v1)) (fun_app$i (fun_app$j less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (fun_app$f eSuc$ ?v0) (fun_app$f eSuc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$)) (fun_app$i (fun_app$j less_eq$ ?v0) (fun_app$f eSuc$ ?v0)) ))
(assert (forall ((?v0 A_a_llist_a_llist_a_llist_fun_fun_fun$)) (=> (forall ((?v1 A$)) (monotone$b lprefix$ lprefix$ (fun_app$p (uwx$ ?v0) ?v1)) ) (monotone$b lprefix$ lprefix$ (uwz$ ?v0))) ))
(assert (forall ((?v0 A_a_llist_a_llist_enat_fun_fun_fun$)) (=> (forall ((?v1 A$)) (monotone$g lprefix$ less_eq$ (fun_app$s (uxa$ ?v0) ?v1)) ) (monotone$g lprefix$ less_eq$ (fun_app$ca (case_llist$a bot$) (uxa$ ?v0)))) ))
(assert (forall ((?v0 Enat$)) (fun_app$i (fun_app$j less_eq$ bot$) ?v0) ))
(assert (forall ((?v0 Enat$)) (=> (fun_app$i (fun_app$j less_eq$ ?v0) bot$) (= ?v0 bot$)) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$i (fun_app$j less_eq$ ?v0) bot$) (= ?v0 bot$)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (monotone$f (fun_ord$ lprefix$) lprefix$ (fun_app$x (uxc$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (monotone$f (fun_ord$ lprefix$) lprefix$ (fun_app$x (uxe$ ?v0) ?v1)) ))
(check-sat)
(exit)

