unsat
(assume a0 (! (not (! (= (! (fun_app$ (ldrop$ (enat$ n$)) (! (iterates$ f$ x$) :named @p_5)) :named @p_6) (! (iterates$ f$ (! (fun_app$a (! (fun_app$b (! (fun_app$c compow$ n$) :named @p_1) f$) :named @p_2) x$) :named @p_3)) :named @p_4)) :named @p_7)) :named @p_8))
(assume a1 (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))))
(assume a2 (forall ((?v0 A_a_fun$) (?v1 Nat$) (?v2 A$)) (= (fun_app$a ?v0 (fun_app$a (fun_app$b (fun_app$c compow$ ?v1) ?v0) ?v2)) (fun_app$a (fun_app$b (fun_app$c compow$ ?v1) ?v0) (fun_app$a ?v0 ?v2)))))
(assume a3 (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c compow$ ?v0) ?v1) ?v2)))))
(assume a4 (forall ((?v0 Nat$) (?v1 A_llist$)) (= (fun_app$ (ldrop$ (enat$ ?v0)) ?v1) (fun_app$ (ldropn$ ?v0) ?v1))))
(assume a5 (! (= funpow$ compow$) :named @p_9))
(assume a6 (forall ((?v0 A_llist$)) (= (fun_app$ (ldrop$ zero$) ?v0) ?v0)))
(assume a7 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (fun_app$ (ldrop$ ?v0) (fun_app$ (ldrop$ ?v1) ?v2)) (fun_app$ (ldrop$ (fun_app$d (plus$ ?v0) ?v1)) ?v2))))
(assume a8 (forall ((?v0 Enat$)) (= (fun_app$ (ldrop$ ?v0) lNil$) lNil$)))
(assume a9 (forall ((?v0 Enat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (fun_app$ (ldrop$ ?v0) (fun_app$ (lmap$ ?v1) ?v2)) (fun_app$ (lmap$ ?v1) (fun_app$ (ldrop$ ?v0) ?v2)))))
(assume a10 (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$ (lmap$ ?v0) (iterates$ ?v0 ?v1)) (iterates$ ?v0 (fun_app$a ?v0 ?v1)))))
(assume a11 (forall ((?v0 Nat$)) (= (fun_app$ (ldropn$ ?v0) lNil$) lNil$)))
(assume a12 (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (fun_app$ (ldropn$ ?v0) (fun_app$ (lmap$ ?v1) ?v2)) (fun_app$ (lmap$ ?v1) (fun_app$ (ldropn$ ?v0) ?v2)))))
(assume a13 (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (= (fun_app$ (lmap$ ?v0) ?v1) lNil$) (= ?v1 lNil$))))
(assume a14 (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (= lNil$ (fun_app$ (lmap$ ?v0) ?v1)) (= ?v1 lNil$))))
(assume a15 (forall ((?v0 A_a_fun$)) (= (fun_app$ (lmap$ ?v0) lNil$) lNil$)))
(assume a16 (forall ((?v0 Enat$) (?v1 Nat$) (?v2 Enat$)) (= (= (fun_app$d (plus$ ?v0) (enat$ ?v1)) (fun_app$d (plus$ ?v2) (enat$ ?v1))) (= ?v0 ?v2))))
(assume a17 (forall ((?v0 Nat$) (?v1 Enat$) (?v2 Enat$)) (= (= (fun_app$d (plus$ (enat$ ?v0)) ?v1) (fun_app$d (plus$ (enat$ ?v0)) ?v2)) (= ?v1 ?v2))))
(assume a18 (forall ((?v0 Enat$)) (= (fun_app$d (plus$ ?v0) zero$) ?v0)))
(assume a19 (forall ((?v0 Nat$)) (= (fun_app$e (plus$a ?v0) zero$a) ?v0)))
(assume a20 (forall ((?v0 Natural$)) (= (plus$b ?v0 zero$b) ?v0)))
(assume a21 (forall ((?v0 Enat$)) (= (fun_app$d (plus$ zero$) ?v0) ?v0)))
(assume a22 (forall ((?v0 Nat$)) (= (fun_app$e (plus$a zero$a) ?v0) ?v0)))
(assume a23 (forall ((?v0 Natural$)) (= (plus$b zero$b ?v0) ?v0)))
(assume a24 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (= (plus$b ?v0 ?v1) (plus$b ?v2 ?v1)) (= ?v0 ?v2))))
(assume a25 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$e (plus$a ?v0) ?v1) (fun_app$e (plus$a ?v2) ?v1)) (= ?v0 ?v2))))
(assume a26 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (= (plus$b ?v0 ?v1) (plus$b ?v0 ?v2)) (= ?v1 ?v2))))
(assume a27 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$e (plus$a ?v0) ?v1) (fun_app$e (plus$a ?v0) ?v2)) (= ?v1 ?v2))))
(assume a28 (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (fun_app$d (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$)))))
(assume a29 (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 (fun_app$e (plus$a ?v0) ?v1)) (= ?v1 zero$a))))
(assume a30 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_llist$)) (= (fun_app$ (ldropn$ ?v0) (fun_app$ (ldropn$ ?v1) ?v2)) (fun_app$ (ldropn$ (fun_app$e (plus$a ?v0) ?v1)) ?v2))))
(assume a31 (forall ((?v0 A_llist$)) (= (fun_app$ (ldropn$ zero$a) ?v0) ?v0)))
(assume a32 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$d (plus$ (enat$ ?v0)) (enat$ ?v1)) (enat$ (fun_app$e (plus$a ?v0) ?v1)))))
(assume a33 (= zero$ (enat$ zero$a)))
(assume a34 (forall ((?v0 Nat$)) (= (= zero$ (enat$ ?v0)) (= ?v0 zero$a))))
(assume a35 (forall ((?v0 Nat$)) (= (= (enat$ ?v0) zero$) (= ?v0 zero$a))))
(assume a36 (forall ((?v0 Enat$)) (= (= zero$ ?v0) (= ?v0 zero$))))
(assume a37 (forall ((?v0 Nat$)) (= (= zero$a ?v0) (= ?v0 zero$a))))
(assume a38 (forall ((?v0 Natural$)) (= (= zero$b ?v0) (= ?v0 zero$b))))
(assume a39 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (plus$b ?v0 ?v2) (plus$b ?v1 ?v3)))))
(assume a40 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (fun_app$d (plus$ ?v0) ?v2) (fun_app$d (plus$ ?v1) ?v3)))))
(assume a41 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (fun_app$e (plus$a ?v0) ?v2) (fun_app$e (plus$a ?v1) ?v3)))))
(assume a42 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (= (plus$b ?v0 ?v1) (plus$b ?v0 ?v2)) (= ?v1 ?v2))))
(assume a43 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (fun_app$e (plus$a ?v0) ?v1) (fun_app$e (plus$a ?v0) ?v2)) (= ?v1 ?v2))))
(assume a44 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (= (plus$b ?v0 ?v1) (plus$b ?v2 ?v1)) (= ?v0 ?v2))))
(assume a45 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (fun_app$e (plus$a ?v0) ?v1) (fun_app$e (plus$a ?v2) ?v1)) (= ?v0 ?v2))))
(assume a46 (forall ((?v0 Natural$) (?v1 Natural$)) (= (plus$b ?v0 ?v1) (plus$b ?v1 ?v0))))
(assume a47 (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$d (plus$ ?v0) ?v1) (fun_app$d (plus$ ?v1) ?v0))))
(assume a48 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$e (plus$a ?v0) ?v1) (fun_app$e (plus$a ?v1) ?v0))))
(assume a49 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (plus$b ?v0 (plus$b ?v1 ?v2)) (plus$b ?v1 (plus$b ?v0 ?v2)))))
(assume a50 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$d (plus$ ?v0) (fun_app$d (plus$ ?v1) ?v2)) (fun_app$d (plus$ ?v1) (fun_app$d (plus$ ?v0) ?v2)))))
(assume a51 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$e (plus$a ?v0) (fun_app$e (plus$a ?v1) ?v2)) (fun_app$e (plus$a ?v1) (fun_app$e (plus$a ?v0) ?v2)))))
(assume a52 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (plus$b (plus$b ?v0 ?v1) ?v2) (plus$b ?v0 (plus$b ?v1 ?v2)))))
(assume a53 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$d (plus$ (fun_app$d (plus$ ?v0) ?v1)) ?v2) (fun_app$d (plus$ ?v0) (fun_app$d (plus$ ?v1) ?v2)))))
(assume a54 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$e (plus$a (fun_app$e (plus$a ?v0) ?v1)) ?v2) (fun_app$e (plus$a ?v0) (fun_app$e (plus$a ?v1) ?v2)))))
(assume a55 (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)))
(assume a56 (forall ((?v0 Nat$)) (= (size_enat$ (enat$ ?v0)) zero$a)))
(assume a57 (forall ((?v0 Nat$)) (= (fun_app$f (gen_llength$ ?v0) lNil$) (enat$ ?v0))))
(assume a58 (forall ((?v0 Nat$)) (= (size$ (enat$ ?v0)) zero$a)))
(assume a59 (forall ((?v0 A$)) (= (fun_app$g (lmember$ ?v0) lNil$) false)))
(assume a60 (forall ((?v0 Enat$) (?v1 Nat$) (?v2 A_llist$)) (= (fun_app$ (ltake$ ?v0) (fun_app$ (ldropn$ ?v1) ?v2)) (fun_app$ (ldropn$ ?v1) (fun_app$ (ltake$ (fun_app$d (plus$ ?v0) (enat$ ?v1))) ?v2)))))
(assume a61 (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$e (plus$a ?v0) ?v1) zero$a) (and (= ?v0 zero$a) (= ?v1 zero$a)))))
(assume a62 (forall ((?v0 Enat$)) (= (fun_app$ (ltake$ ?v0) lNil$) lNil$)))
(assume a63 (forall ((?v0 Enat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (fun_app$ (ltake$ ?v0) (fun_app$ (lmap$ ?v1) ?v2)) (fun_app$ (lmap$ ?v1) (fun_app$ (ltake$ ?v0) ?v2)))))
(assume a64 (forall ((?v0 Enat$) (?v1 A_llist$)) (= (= lNil$ (fun_app$ (ltake$ ?v0) ?v1)) (or (= ?v1 lNil$) (= ?v0 zero$)))))
(assume a65 (forall ((?v0 A_llist$)) (= (fun_app$ (ltake$ zero$) ?v0) lNil$)))
(assume a66 (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$a) false) (=> (not (= ?v0 zero$a)) false)) false)))
(assume a67 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (fun_app$e (plus$a ?v0) ?v1) ?v0) (= ?v1 zero$a))))
(assume a68 (forall ((?v0 Enat$) (?v1 A_llist$)) (= (= (fun_app$ (ltake$ ?v0) ?v1) lNil$) (or (= ?v1 lNil$) (= ?v0 zero$)))))
(assume a69 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (fun_app$ (ltake$ ?v0) (fun_app$ (ldrop$ ?v1) ?v2)) (fun_app$ (ldrop$ ?v1) (fun_app$ (ltake$ (fun_app$d (plus$ ?v0) ?v1)) ?v2)))))
(assume a70 (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (= (fun_app$h (fun_app$i ?v0 ?v3) ?v4) (fun_app$h (fun_app$i ?v0 ?v4) ?v3))) (and (forall ((?v3 Nat$)) (fun_app$h (fun_app$i ?v0 ?v3) zero$a)) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$h (fun_app$i ?v0 ?v3) ?v4) (fun_app$h (fun_app$i ?v0 ?v3) (fun_app$e (plus$a ?v3) ?v4)))))) (fun_app$h (fun_app$i ?v0 ?v1) ?v2))))
(assume a71 (= (the_enat$ zero$) zero$a))
(assume a72 (forall ((?v0 Nat$) (?v1 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (ltake$ (enat$ ?v0)) ?v1)) (fun_app$ (ldropn$ ?v0) ?v1)) ?v1)))
(assume a73 (forall ((?v0 Nat$) (?v1 A_llist$)) (= (fun_app$f (gen_llength$ ?v0) ?v1) (fun_app$d (plus$ (enat$ ?v0)) (fun_app$f llength$ ?v1)))))
(assume a74 (= (size$ infinity$) zero$a))
(assume a75 (= (size_enat$ infinity$) zero$a))
(assume a76 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (not (= (size$ ?v0) (size$ ?v1))) (not (= ?v0 ?v1)))))
(assume a77 (forall ((?v0 Literal$) (?v1 Literal$)) (=> (not (= (size$a ?v0) (size$a ?v1))) (not (= ?v0 ?v1)))))
(assume a78 (forall ((?v0 Nibble$) (?v1 Nibble$)) (=> (not (= (size$b ?v0) (size$b ?v1))) (not (= ?v0 ?v1)))))
(assume a79 (forall ((?v0 Char$) (?v1 Char$)) (=> (not (= (size$c ?v0) (size$c ?v1))) (not (= ?v0 ?v1)))))
(assume a80 (forall ((?v0 Bool) (?v1 Bool)) (=> (not (= (fun_app$j size$d ?v0) (fun_app$j size$d ?v1))) (not (= ?v0 ?v1)))))
(assume a81 (forall ((?v0 Enat$)) (= (not (= ?v0 infinity$)) (exists ((?v1 Nat$)) (= ?v0 (enat$ ?v1))))))
(assume a82 (forall ((?v0 Enat$)) (= (forall ((?v1 Nat$)) (not (= ?v0 (enat$ ?v1)))) (= ?v0 infinity$))))
(assume a83 (forall ((?v0 A_llist$)) (= (fun_app$ (lappend$ lNil$) ?v0) ?v0)))
(assume a84 (forall ((?v0 A_llist$)) (= (fun_app$ (lappend$ ?v0) lNil$) ?v0)))
(assume a85 (forall ((?v0 Enat$)) (= (fun_app$d (plus$ infinity$) ?v0) infinity$)))
(assume a86 (forall ((?v0 Enat$)) (= (fun_app$d (plus$ ?v0) infinity$) infinity$)))
(assume a87 (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (fun_app$f llength$ (fun_app$ (lmap$ ?v0) ?v1)) (fun_app$f llength$ ?v1))))
(assume a88 (= (fun_app$f llength$ lNil$) zero$))
(assume a89 (forall ((?v0 A_llist$)) (= (fun_app$ (ldrop$ infinity$) ?v0) lNil$)))
(assume a90 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$f llength$ (fun_app$ (lappend$ ?v0) ?v1)) (fun_app$d (plus$ (fun_app$f llength$ ?v0)) (fun_app$f llength$ ?v1)))))
(assume a91 (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$f llength$ (iterates$ ?v0 ?v1)) infinity$)))
(assume a92 (forall ((?v0 Enat$)) (=> (not (= ?v0 infinity$)) (= (enat$ (the_enat$ ?v0)) ?v0))))
(assume a93 (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) ?v1)) ?v2) (fun_app$ (lappend$ ?v0) (fun_app$ (lappend$ ?v1) ?v2)))))
(assume a94 (= (fun_app$ (lappend$ lNil$) lNil$) lNil$))
(assume a95 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$ (lappend$ ?v0) ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$)))))
(assume a96 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$ (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$)))))
(assume a97 (forall ((?v0 Enat$)) (=> (and (forall ((?v1 Nat$)) (=> (= ?v0 (enat$ ?v1)) false)) (=> (= ?v0 infinity$) false)) false)))
(assume a98 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (forall ((?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (enat$ ?v2)) (= ?v1 (enat$ ?v3))) false)) (and (forall ((?v2 Nat$)) (=> (and (= ?v0 (enat$ ?v2)) (= ?v1 infinity$)) false)) (and (forall ((?v2 Nat$)) (=> (and (= ?v0 infinity$) (= ?v1 (enat$ ?v2))) false)) (=> (and (= ?v0 infinity$) (= ?v1 infinity$)) false)))) false)))
(assume a99 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$) (?v5 Nat$)) (=> (and (= ?v0 (enat$ ?v3)) (and (= ?v1 (enat$ ?v4)) (= ?v2 (enat$ ?v5)))) false)) (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (and (= ?v0 (enat$ ?v3)) (and (= ?v1 (enat$ ?v4)) (= ?v2 infinity$))) false)) (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (and (= ?v0 (enat$ ?v3)) (and (= ?v1 infinity$) (= ?v2 (enat$ ?v4)))) false)) (and (forall ((?v3 Nat$)) (=> (and (= ?v0 (enat$ ?v3)) (and (= ?v1 infinity$) (= ?v2 infinity$))) false)) (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (and (= ?v0 infinity$) (and (= ?v1 (enat$ ?v3)) (= ?v2 (enat$ ?v4)))) false)) (and (forall ((?v3 Nat$)) (=> (and (= ?v0 infinity$) (and (= ?v1 (enat$ ?v3)) (= ?v2 infinity$))) false)) (and (forall ((?v3 Nat$)) (=> (and (= ?v0 infinity$) (and (= ?v1 infinity$) (= ?v2 (enat$ ?v3)))) false)) (=> (and (= ?v0 infinity$) (and (= ?v1 infinity$) (= ?v2 infinity$))) false)))))))) false)))
(assume a100 (forall ((?v0 Nat$)) (not (= (enat$ ?v0) infinity$))))
(assume a101 (forall ((?v0 Nat$)) (not (= infinity$ (enat$ ?v0)))))
(assume a102 (not (= infinity$ zero$)))
(assume a103 (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lmap$ ?v0) (fun_app$ (lappend$ ?v1) ?v2)) (fun_app$ (lappend$ (fun_app$ (lmap$ ?v0) ?v1)) (fun_app$ (lmap$ ?v0) ?v2)))))
(assume a104 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (= (fun_app$d (plus$ ?v0) ?v1) (fun_app$d (plus$ ?v0) ?v2)) (or (= ?v0 infinity$) (= ?v1 ?v2)))))
(assume a105 (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (iterates$ ?v0 ?v1)) ?v2) (iterates$ ?v0 ?v1))))
(assume a106 (forall ((?v0 Nat$)) (= (the_enat$ (enat$ ?v0)) ?v0)))
(assume a107 (forall ((?v0 Enat$) (?v1 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (ltake$ ?v0) ?v1)) (fun_app$ (ldrop$ ?v0) ?v1)) ?v1)))
(assume a108 (= llength$ (gen_llength$ zero$a)))
(assume a109 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (fun_app$ (ltake$ (fun_app$d (plus$ ?v0) ?v1)) ?v2) (fun_app$ (lappend$ (fun_app$ (ltake$ ?v0) ?v2)) (fun_app$ (ltake$ ?v1) (fun_app$ (ldrop$ ?v0) ?v2))))))
(assume a110 (forall ((?v0 Nibble$)) (= (size$b ?v0) zero$a)))
(assume a111 (= (size$e zero$b) zero$a))
(assume a112 (= (fun_app$j size$d false) zero$a))
(assume a113 (= (fun_app$j size$d true) zero$a))
(assume a114 (forall ((?v0 Char$)) (= (size$c ?v0) zero$a)))
(assume a115 (forall ((?v0 Nat$)) (= (times$ infinity$ (enat$ ?v0)) (ite (= ?v0 zero$a) zero$ infinity$))))
(assume a116 (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (times$ ?v0 ?v1) zero$) (or (= ?v0 zero$) (= ?v1 zero$)))))
(assume a117 (= (times$ infinity$ infinity$) infinity$))
(assume a118 (forall ((?v0 Nat$)) (= (times$ (enat$ ?v0) infinity$) (ite (= ?v0 zero$a) zero$ infinity$))))
(assume a119 (forall ((?v0 Natural$) (?v1 Natural$)) (= (times$a ?v0 ?v1) (times$a ?v1 ?v0))))
(assume a120 (forall ((?v0 Enat$) (?v1 Enat$)) (= (times$ ?v0 ?v1) (times$ ?v1 ?v0))))
(assume a121 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$e (times$b ?v0) ?v1) (fun_app$e (times$b ?v1) ?v0))))
(assume a122 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (times$a ?v0 (times$a ?v1 ?v2)) (times$a ?v1 (times$a ?v0 ?v2)))))
(assume a123 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (times$ ?v0 (times$ ?v1 ?v2)) (times$ ?v1 (times$ ?v0 ?v2)))))
(assume a124 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$e (times$b ?v0) (fun_app$e (times$b ?v1) ?v2)) (fun_app$e (times$b ?v1) (fun_app$e (times$b ?v0) ?v2)))))
(assume a125 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (times$a (times$a ?v0 ?v1) ?v2) (times$a ?v0 (times$a ?v1 ?v2)))))
(assume a126 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (times$ (times$ ?v0 ?v1) ?v2) (times$ ?v0 (times$ ?v1 ?v2)))))
(assume a127 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$e (times$b (fun_app$e (times$b ?v0) ?v1)) ?v2) (fun_app$e (times$b ?v0) (fun_app$e (times$b ?v1) ?v2)))))
(assume a128 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (fun_app$e (plus$a (fun_app$e (times$b ?v0) ?v1)) (fun_app$e (times$b ?v2) ?v3)) (fun_app$e (plus$a (fun_app$e (times$b ?v0) ?v3)) (fun_app$e (times$b ?v2) ?v1))) (or (= ?v0 ?v2) (= ?v1 ?v3)))))
(assume a129 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (and (not (= ?v0 ?v1)) (not (= ?v2 ?v3))) (not (= (fun_app$e (plus$a (fun_app$e (times$b ?v0) ?v2)) (fun_app$e (times$b ?v1) ?v3)) (fun_app$e (plus$a (fun_app$e (times$b ?v0) ?v3)) (fun_app$e (times$b ?v1) ?v2)))))))
(assume a130 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$) (?v4 Nat$)) (=> (and (not (= ?v0 zero$a)) (and (= ?v1 ?v2) (not (= ?v3 ?v4)))) (not (= (fun_app$e (plus$a ?v1) (fun_app$e (times$b ?v0) ?v3)) (fun_app$e (plus$a ?v2) (fun_app$e (times$b ?v0) ?v4)))))))
(assume a131 (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (times$ ?v0 ?v1) infinity$) (or (and (= ?v0 infinity$) (not (= ?v1 zero$))) (and (= ?v1 infinity$) (not (= ?v0 zero$)))))))
(assume a132 (= zero$a zero$a))
(assume a133 (forall ((?v0 Literal$)) (= (size$a ?v0) zero$a)))
(assume a134 (forall ((?v0 Bool)) (= (fun_app$j size$d ?v0) zero$a)))
(assume a135 (forall ((?v0 Natural$)) (= (times$a zero$b ?v0) zero$b)))
(assume a136 (forall ((?v0 Enat$)) (= (times$ zero$ ?v0) zero$)))
(assume a137 (forall ((?v0 Nat$)) (= (fun_app$e (times$b zero$a) ?v0) zero$a)))
(assume a138 (forall ((?v0 Natural$)) (= (times$a ?v0 zero$b) zero$b)))
(assume a139 (forall ((?v0 Enat$)) (= (times$ ?v0 zero$) zero$)))
(assume a140 (forall ((?v0 Nat$)) (= (fun_app$e (times$b ?v0) zero$a) zero$a)))
(assume a141 (forall ((?v0 Natural$) (?v1 Natural$)) (= (= (times$a ?v0 ?v1) zero$b) (or (= ?v0 zero$b) (= ?v1 zero$b)))))
(assume a142 (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$e (times$b ?v0) ?v1) zero$a) (or (= ?v0 zero$a) (= ?v1 zero$a)))))
(assume a143 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (= (times$a ?v0 ?v1) (times$a ?v0 ?v2)) (or (= ?v0 zero$b) (= ?v1 ?v2)))))
(assume a144 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$e (times$b ?v0) ?v1) (fun_app$e (times$b ?v0) ?v2)) (or (= ?v0 zero$a) (= ?v1 ?v2)))))
(assume a145 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$e (times$b ?v0) ?v1) (fun_app$e (times$b ?v0) ?v2)) (or (= ?v1 ?v2) (= ?v0 zero$a)))))
(assume a146 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$e (times$b ?v0) ?v1) (fun_app$e (times$b ?v2) ?v1)) (or (= ?v0 ?v2) (= ?v1 zero$a)))))
(assume a147 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (= (times$a ?v0 ?v1) (times$a ?v2 ?v1)) (or (= ?v1 zero$b) (= ?v0 ?v2)))))
(assume a148 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$e (times$b ?v0) ?v1) (fun_app$e (times$b ?v2) ?v1)) (or (= ?v1 zero$a) (= ?v0 ?v2)))))
(assume a149 (forall ((?v0 Nat$) (?v1 Nat$)) (= (times$ (enat$ ?v0) (enat$ ?v1)) (enat$ (fun_app$e (times$b ?v0) ?v1)))))
(assume a150 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$e (times$b (fun_app$e (plus$a ?v0) ?v1)) ?v2) (fun_app$e (plus$a (fun_app$e (times$b ?v0) ?v2)) (fun_app$e (times$b ?v1) ?v2)))))
(assume a151 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$e (times$b ?v0) (fun_app$e (plus$a ?v1) ?v2)) (fun_app$e (plus$a (fun_app$e (times$b ?v0) ?v1)) (fun_app$e (times$b ?v0) ?v2)))))
(assume a152 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_a_fun$)) (= (fun_app$b (fun_app$c compow$ ?v0) (fun_app$b (fun_app$c compow$ ?v1) ?v2)) (fun_app$b (fun_app$c compow$ (fun_app$e (times$b ?v1) ?v0)) ?v2))))
(assume a153 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (not (= ?v0 zero$b)) (= (= (times$a ?v0 ?v1) (times$a ?v0 ?v2)) (= ?v1 ?v2)))))
(assume a154 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (not (= ?v0 zero$a)) (= (= (fun_app$e (times$b ?v0) ?v1) (fun_app$e (times$b ?v0) ?v2)) (= ?v1 ?v2)))))
(assume a155 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (not (= ?v0 zero$b)) (= (= (times$a ?v1 ?v0) (times$a ?v2 ?v0)) (= ?v1 ?v2)))))
(assume a156 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (not (= ?v0 zero$a)) (= (= (fun_app$e (times$b ?v1) ?v0) (fun_app$e (times$b ?v2) ?v0)) (= ?v1 ?v2)))))
(assume a157 (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (not (= ?v0 zero$b)) (not (= ?v1 zero$b))) (not (= (times$a ?v0 ?v1) zero$b)))))
(assume a158 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 zero$a)) (not (= ?v1 zero$a))) (not (= (fun_app$e (times$b ?v0) ?v1) zero$a)))))
(assume a159 (forall ((?v0 Natural$) (?v1 Natural$)) (=> (not (= (times$a ?v0 ?v1) zero$b)) (and (not (= ?v0 zero$b)) (not (= ?v1 zero$b))))))
(assume a160 (forall ((?v0 Enat$) (?v1 Enat$)) (=> (not (= (times$ ?v0 ?v1) zero$)) (and (not (= ?v0 zero$)) (not (= ?v1 zero$))))))
(assume a161 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (= (fun_app$e (times$b ?v0) ?v1) zero$a)) (and (not (= ?v0 zero$a)) (not (= ?v1 zero$a))))))
(assume a162 (forall ((?v0 Natural$) (?v1 Natural$)) (=> (= (times$a ?v0 ?v1) zero$b) (or (= ?v0 zero$b) (= ?v1 zero$b)))))
(assume a163 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (fun_app$e (times$b ?v0) ?v1) zero$a) (or (= ?v0 zero$a) (= ?v1 zero$a)))))
(assume a164 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (= (plus$b (times$a ?v0 ?v1) (plus$b (times$a ?v2 ?v1) ?v3)) (plus$b (times$a (plus$b ?v0 ?v2) ?v1) ?v3))))
(assume a165 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (= (fun_app$d (plus$ (times$ ?v0 ?v1)) (fun_app$d (plus$ (times$ ?v2 ?v1)) ?v3)) (fun_app$d (plus$ (times$ (fun_app$d (plus$ ?v0) ?v2) ?v1)) ?v3))))
(assume a166 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (fun_app$e (plus$a (fun_app$e (times$b ?v0) ?v1)) (fun_app$e (plus$a (fun_app$e (times$b ?v2) ?v1)) ?v3)) (fun_app$e (plus$a (fun_app$e (times$b (fun_app$e (plus$a ?v0) ?v2)) ?v1)) ?v3))))
(assume a167 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (times$a (plus$b ?v0 ?v1) ?v2) (plus$b (times$a ?v0 ?v2) (times$a ?v1 ?v2)))))
(assume a168 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (times$ (fun_app$d (plus$ ?v0) ?v1) ?v2) (fun_app$d (plus$ (times$ ?v0 ?v2)) (times$ ?v1 ?v2)))))
(assume a169 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (times$a ?v0 (plus$b ?v1 ?v2)) (plus$b (times$a ?v0 ?v1) (times$a ?v0 ?v2)))))
(assume a170 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (times$ ?v0 (fun_app$d (plus$ ?v1) ?v2)) (fun_app$d (plus$ (times$ ?v0 ?v1)) (times$ ?v0 ?v2)))))
(assume a171 (forall ((?v0 Char$)) (= (size_char$ ?v0) zero$a)))
(assume a172 (= (size_natural$ zero$b) zero$a))
(assume a173 (= (fun_app$j size_bool$ true) zero$a))
(assume a174 (= (fun_app$j size_bool$ false) zero$a))
(assume a175 (= size_bool$ (! (rec_bool$ zero$a zero$a) :named @p_10)))
(assume a176 (= size$d @p_10))
(assume a177 (= (size$b nibbleA$) zero$a))
(assume a178 (forall ((?v0 Nat$) (?v1 A_llist$)) (= (= (fun_app$ (ldropn$ ?v0) ?v1) lNil$) (fun_app$k (less_eq$ (fun_app$f llength$ ?v1)) (enat$ ?v0)))))
(assume a179 (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (fun_app$k (less_eq$ (fun_app$f llength$ ?v0)) (enat$ ?v1)) (= (fun_app$ (ldropn$ ?v1) ?v0) lNil$))))
(assume a180 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (less_eq$a (plus$b ?v0 ?v1) (plus$b ?v2 ?v1)) (less_eq$a ?v0 ?v2))))
(assume a181 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$h (less_eq$b (fun_app$e (plus$a ?v0) ?v1)) (fun_app$e (plus$a ?v2) ?v1)) (fun_app$h (less_eq$b ?v0) ?v2))))
(assume a182 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (less_eq$a (plus$b ?v0 ?v1) (plus$b ?v0 ?v2)) (less_eq$a ?v1 ?v2))))
(assume a183 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$h (less_eq$b (fun_app$e (plus$a ?v0) ?v1)) (fun_app$e (plus$a ?v0) ?v2)) (fun_app$h (less_eq$b ?v1) ?v2))))
(assume a184 (forall ((?v0 Enat$)) (= (fun_app$k (less_eq$ ?v0) zero$) (= ?v0 zero$))))
(assume a185 (forall ((?v0 Enat$)) (= (fun_app$k (less_eq$ ?v0) infinity$) true)))
(assume a186 (forall ((?v0 Enat$)) (= (fun_app$k (less_eq$ infinity$) ?v0) (= ?v0 infinity$))))
(assume a187 (forall ((?v0 Enat$) (?v1 A_llist$)) (= (= (fun_app$ (ldrop$ ?v0) ?v1) lNil$) (fun_app$k (less_eq$ (fun_app$f llength$ ?v1)) ?v0))))
(assume a188 (fun_app$h (less_eq$b zero$a) zero$a))
(assume a189 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$h (less_eq$b ?v0) ?v1) (exists ((?v2 Nat$)) (= ?v1 (fun_app$e (plus$a ?v0) ?v2))))))
(assume a190 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (= ?v0 ?v1) (less_eq$a ?v2 ?v3)) (less_eq$a (plus$b ?v0 ?v2) (plus$b ?v1 ?v3)))))
(assume a191 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$k (less_eq$ ?v2) ?v3)) (fun_app$k (less_eq$ (fun_app$d (plus$ ?v0) ?v2)) (fun_app$d (plus$ ?v1) ?v3)))))
(assume a192 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$h (less_eq$b ?v2) ?v3)) (fun_app$h (less_eq$b (fun_app$e (plus$a ?v0) ?v2)) (fun_app$e (plus$a ?v1) ?v3)))))
(assume a193 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (less_eq$a ?v0 ?v1) (= ?v2 ?v3)) (less_eq$a (plus$b ?v0 ?v2) (plus$b ?v1 ?v3)))))
(assume a194 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$k (less_eq$ ?v0) ?v1) (= ?v2 ?v3)) (fun_app$k (less_eq$ (fun_app$d (plus$ ?v0) ?v2)) (fun_app$d (plus$ ?v1) ?v3)))))
(assume a195 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$h (less_eq$b ?v0) ?v1) (= ?v2 ?v3)) (fun_app$h (less_eq$b (fun_app$e (plus$a ?v0) ?v2)) (fun_app$e (plus$a ?v1) ?v3)))))
(assume a196 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v3)) (less_eq$a (plus$b ?v0 ?v2) (plus$b ?v1 ?v3)))))
(assume a197 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$k (less_eq$ ?v0) ?v1) (fun_app$k (less_eq$ ?v2) ?v3)) (fun_app$k (less_eq$ (fun_app$d (plus$ ?v0) ?v2)) (fun_app$d (plus$ ?v1) ?v3)))))
(assume a198 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$h (less_eq$b ?v0) ?v1) (fun_app$h (less_eq$b ?v2) ?v3)) (fun_app$h (less_eq$b (fun_app$e (plus$a ?v0) ?v2)) (fun_app$e (plus$a ?v1) ?v3)))))
(assume a199 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (less_eq$a (plus$b ?v0 ?v1) (plus$b ?v2 ?v1)) (less_eq$a ?v0 ?v2))))
(assume a200 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$h (less_eq$b (fun_app$e (plus$a ?v0) ?v1)) (fun_app$e (plus$a ?v2) ?v1)) (fun_app$h (less_eq$b ?v0) ?v2))))
(assume a201 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (less_eq$a (plus$b ?v0 ?v1) (plus$b ?v0 ?v2)) (less_eq$a ?v1 ?v2))))
(assume a202 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$h (less_eq$b (fun_app$e (plus$a ?v0) ?v1)) (fun_app$e (plus$a ?v0) ?v2)) (fun_app$h (less_eq$b ?v1) ?v2))))
(assume a203 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (less_eq$a ?v0 ?v1) (less_eq$a (plus$b ?v0 ?v2) (plus$b ?v1 ?v2)))))
(assume a204 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$k (less_eq$ ?v0) ?v1) (fun_app$k (less_eq$ (fun_app$d (plus$ ?v0) ?v2)) (fun_app$d (plus$ ?v1) ?v2)))))
(assume a205 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$h (less_eq$b ?v0) ?v1) (fun_app$h (less_eq$b (fun_app$e (plus$a ?v0) ?v2)) (fun_app$e (plus$a ?v1) ?v2)))))
(assume a206 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (less_eq$a ?v0 ?v1) (less_eq$a (plus$b ?v2 ?v0) (plus$b ?v2 ?v1)))))
(assume a207 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$k (less_eq$ ?v0) ?v1) (fun_app$k (less_eq$ (fun_app$d (plus$ ?v2) ?v0)) (fun_app$d (plus$ ?v2) ?v1)))))
(assume a208 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$h (less_eq$b ?v0) ?v1) (fun_app$h (less_eq$b (fun_app$e (plus$a ?v2) ?v0)) (fun_app$e (plus$a ?v2) ?v1)))))
(assume a209 (forall ((?v0 Enat$)) (fun_app$k (less_eq$ zero$) ?v0)))
(assume a210 (forall ((?v0 Enat$) (?v1 Nat$)) (=> (fun_app$k (less_eq$ ?v0) (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))))
(assume a211 (forall ((?v0 Enat$)) (fun_app$k (less_eq$ ?v0) infinity$)))
(assume a212 (forall ((?v0 Natural_natural_bool_fun_fun$) (?v1 Natural$) (?v2 Natural$)) (=> (and (forall ((?v3 Natural$) (?v4 Natural$)) (=> (less_eq$a ?v3 ?v4) (fun_app$l (fun_app$m ?v0 ?v3) ?v4))) (=> (fun_app$l (fun_app$m ?v0 ?v1) ?v2) (fun_app$l (fun_app$m ?v0 ?v2) ?v1))) (fun_app$l (fun_app$m ?v0 ?v2) ?v1))))
(assume a213 (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$k (less_eq$ ?v3) ?v4) (fun_app$k (fun_app$n ?v0 ?v3) ?v4))) (=> (fun_app$k (fun_app$n ?v0 ?v1) ?v2) (fun_app$k (fun_app$n ?v0 ?v2) ?v1))) (fun_app$k (fun_app$n ?v0 ?v2) ?v1))))
(assume a214 (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$h (less_eq$b ?v3) ?v4) (fun_app$h (fun_app$i ?v0 ?v3) ?v4))) (=> (fun_app$h (fun_app$i ?v0 ?v1) ?v2) (fun_app$h (fun_app$i ?v0 ?v2) ?v1))) (fun_app$h (fun_app$i ?v0 ?v2) ?v1))))
(assume a215 (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$k (less_eq$ ?v0) (fun_app$d (plus$ ?v0) ?v1))))
(assume a216 (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$k (less_eq$ ?v0) (fun_app$d (plus$ ?v1) ?v0))))
(assume a217 (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$) (?v3 Enat$)) (=> (and (= (fun_app$ (ltake$ ?v0) ?v1) (fun_app$ (ltake$ ?v0) ?v2)) (fun_app$k (less_eq$ ?v3) ?v0)) (= (fun_app$ (ltake$ ?v3) ?v1) (fun_app$ (ltake$ ?v3) ?v2)))))
(assume a218 (forall ((?v0 Natural$) (?v1 Natural$)) (=> (or (and (less_eq$a zero$b ?v0) (less_eq$a ?v1 zero$b)) (and (less_eq$a ?v0 zero$b) (less_eq$a zero$b ?v1))) (less_eq$a (times$a ?v0 ?v1) zero$b))))
(assume a219 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (or (and (fun_app$h (less_eq$b zero$a) ?v0) (fun_app$h (less_eq$b ?v1) zero$a)) (and (fun_app$h (less_eq$b ?v0) zero$a) (fun_app$h (less_eq$b zero$a) ?v1))) (fun_app$h (less_eq$b (fun_app$e (times$b ?v0) ?v1)) zero$a))))
(assume a220 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (less_eq$a ?v0 ?v1) (and (less_eq$a ?v2 ?v3) (and (less_eq$a zero$b ?v0) (less_eq$a zero$b ?v2)))) (less_eq$a (times$a ?v0 ?v2) (times$a ?v1 ?v3)))))
(assume a221 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$k (less_eq$ ?v0) ?v1) (and (fun_app$k (less_eq$ ?v2) ?v3) (and (fun_app$k (less_eq$ zero$) ?v0) (fun_app$k (less_eq$ zero$) ?v2)))) (fun_app$k (less_eq$ (times$ ?v0 ?v2)) (times$ ?v1 ?v3)))))
(assume a222 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$h (less_eq$b ?v0) ?v1) (and (fun_app$h (less_eq$b ?v2) ?v3) (and (fun_app$h (less_eq$b zero$a) ?v0) (fun_app$h (less_eq$b zero$a) ?v2)))) (fun_app$h (less_eq$b (fun_app$e (times$b ?v0) ?v2)) (fun_app$e (times$b ?v1) ?v3)))))
(assume a223 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (less_eq$a ?v0 ?v1) (and (less_eq$a ?v2 ?v3) (and (less_eq$a zero$b ?v1) (less_eq$a zero$b ?v2)))) (less_eq$a (times$a ?v0 ?v2) (times$a ?v1 ?v3)))))
(assume a224 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$k (less_eq$ ?v0) ?v1) (and (fun_app$k (less_eq$ ?v2) ?v3) (and (fun_app$k (less_eq$ zero$) ?v1) (fun_app$k (less_eq$ zero$) ?v2)))) (fun_app$k (less_eq$ (times$ ?v0 ?v2)) (times$ ?v1 ?v3)))))
(assume a225 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$h (less_eq$b ?v0) ?v1) (and (fun_app$h (less_eq$b ?v2) ?v3) (and (fun_app$h (less_eq$b zero$a) ?v1) (fun_app$h (less_eq$b zero$a) ?v2)))) (fun_app$h (less_eq$b (fun_app$e (times$b ?v0) ?v2)) (fun_app$e (times$b ?v1) ?v3)))))
(assume a226 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (less_eq$ ?v0) ?v1) (fun_app$k (less_eq$ zero$) ?v2)) (fun_app$k (less_eq$ (times$ ?v2 ?v0)) (times$ ?v2 ?v1)))))
(assume a227 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$h (less_eq$b ?v0) ?v1) (fun_app$h (less_eq$b zero$a) ?v2)) (fun_app$h (less_eq$b (fun_app$e (times$b ?v2) ?v0)) (fun_app$e (times$b ?v2) ?v1)))))
(assume a228 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a zero$b ?v2)) (less_eq$a (times$a ?v0 ?v2) (times$a ?v1 ?v2)))))
(assume a229 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (less_eq$ ?v0) ?v1) (fun_app$k (less_eq$ zero$) ?v2)) (fun_app$k (less_eq$ (times$ ?v0 ?v2)) (times$ ?v1 ?v2)))))
(assume a230 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$h (less_eq$b ?v0) ?v1) (fun_app$h (less_eq$b zero$a) ?v2)) (fun_app$h (less_eq$b (fun_app$e (times$b ?v0) ?v2)) (fun_app$e (times$b ?v1) ?v2)))))
(assume a231 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a zero$b ?v2)) (less_eq$a (times$a ?v2 ?v0) (times$a ?v2 ?v1)))))
(assume a232 (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (less_eq$a ?v0 zero$b) (less_eq$a zero$b ?v1)) (less_eq$a (times$a ?v0 ?v1) zero$b))))
(assume a233 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$h (less_eq$b ?v0) zero$a) (fun_app$h (less_eq$b zero$a) ?v1)) (fun_app$h (less_eq$b (fun_app$e (times$b ?v0) ?v1)) zero$a))))
(assume a234 (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (less_eq$a zero$b ?v0) (less_eq$a ?v1 zero$b)) (less_eq$a (times$a ?v1 ?v0) zero$b))))
(assume a235 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$h (less_eq$b zero$a) ?v0) (fun_app$h (less_eq$b ?v1) zero$a)) (fun_app$h (less_eq$b (fun_app$e (times$b ?v1) ?v0)) zero$a))))
(assume a236 (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (less_eq$a zero$b ?v0) (less_eq$a ?v1 zero$b)) (less_eq$a (times$a ?v0 ?v1) zero$b))))
(assume a237 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$h (less_eq$b zero$a) ?v0) (fun_app$h (less_eq$b ?v1) zero$a)) (fun_app$h (less_eq$b (fun_app$e (times$b ?v0) ?v1)) zero$a))))
(assume a238 (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (less_eq$a zero$b ?v0) (less_eq$a zero$b ?v1)) (less_eq$a zero$b (times$a ?v0 ?v1)))))
(assume a239 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$h (less_eq$b zero$a) ?v0) (fun_app$h (less_eq$b zero$a) ?v1)) (fun_app$h (less_eq$b zero$a) (fun_app$e (times$b ?v0) ?v1)))))
(assume a240 (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (less_eq$a zero$b ?v0) (less_eq$a zero$b ?v1)) (less_eq$a zero$b (plus$b ?v0 ?v1)))))
(assume a241 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$h (less_eq$b zero$a) ?v0) (fun_app$h (less_eq$b zero$a) ?v1)) (fun_app$h (less_eq$b zero$a) (fun_app$e (plus$a ?v0) ?v1)))))
(assume a242 (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (less_eq$a zero$b ?v0) (less_eq$a zero$b ?v1)) (= (= (plus$b ?v0 ?v1) zero$b) (and (= ?v0 zero$b) (= ?v1 zero$b))))))
(assume a243 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$h (less_eq$b zero$a) ?v0) (fun_app$h (less_eq$b zero$a) ?v1)) (= (= (fun_app$e (plus$a ?v0) ?v1) zero$a) (and (= ?v0 zero$a) (= ?v1 zero$a))))))
(assume a244 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (and (less_eq$a zero$b ?v0) (less_eq$a ?v1 ?v2)) (less_eq$a ?v1 (plus$b ?v0 ?v2)))))
(assume a245 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$h (less_eq$b zero$a) ?v0) (fun_app$h (less_eq$b ?v1) ?v2)) (fun_app$h (less_eq$b ?v1) (fun_app$e (plus$a ?v0) ?v2)))))
(assume a246 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (and (less_eq$a zero$b ?v0) (less_eq$a ?v1 ?v2)) (less_eq$a ?v1 (plus$b ?v2 ?v0)))))
(assume a247 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$h (less_eq$b zero$a) ?v0) (fun_app$h (less_eq$b ?v1) ?v2)) (fun_app$h (less_eq$b ?v1) (fun_app$e (plus$a ?v2) ?v0)))))
(assume a248 (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (less_eq$a ?v0 zero$b) (less_eq$a ?v1 zero$b)) (less_eq$a (plus$b ?v0 ?v1) zero$b))))
(assume a249 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$h (less_eq$b ?v0) zero$a) (fun_app$h (less_eq$b ?v1) zero$a)) (fun_app$h (less_eq$b (fun_app$e (plus$a ?v0) ?v1)) zero$a))))
(assume a250 (forall ((?v0 Nat$)) (= (fun_app$k (less_eq$ infinity$) (enat$ ?v0)) false)))
(assume a251 (forall ((?v0 Nat$)) (=> (fun_app$k (less_eq$ infinity$) (enat$ ?v0)) false)))
(assume a252 (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (less_eq$ (fun_app$d (plus$ ?v0) ?v1)) (fun_app$d (plus$ ?v0) ?v2)) (or (= ?v0 infinity$) (fun_app$k (less_eq$ ?v1) ?v2)))))
(assume a253 (forall ((?v0 A_llist$) (?v1 Enat$)) (=> (fun_app$k (less_eq$ (fun_app$f llength$ ?v0)) ?v1) (= (fun_app$ (ltake$ ?v1) ?v0) ?v0))))
(assume a254 (forall ((?v0 A_llist$) (?v1 Enat$)) (=> (fun_app$k (less_eq$ (fun_app$f llength$ ?v0)) ?v1) (= (fun_app$ (ldrop$ ?v1) ?v0) lNil$))))
(assume a255 (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$k (less_eq$ ?v0) (fun_app$f llength$ ?v1)) (= (fun_app$ (ltake$ ?v0) (fun_app$ (lappend$ ?v1) ?v2)) (fun_app$ (ltake$ ?v0) ?v1)))))
(assume a256 (forall ((?v0 A_llist$) (?v1 Nat$) (?v2 A_llist$)) (=> (fun_app$k (less_eq$ (fun_app$f llength$ ?v0)) (enat$ ?v1)) (= (fun_app$ (ldropn$ ?v1) (fun_app$ (lappend$ ?v0) ?v2)) (fun_app$ (ldropn$ (fun_app$e (minus$ ?v1) (the_enat$ (fun_app$f llength$ ?v0)))) ?v2)))))
(assume a257 (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (ldropn$ ?v0) ?v1)) (fun_app$k (less_eq$ (fun_app$f llength$ ?v1)) (enat$ ?v0)))))
(assume a258 (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 Nat$)) (=> (fun_app$k (less_eq$ (enat$ ?v0)) (fun_app$f llength$ ?v1)) (fun_app$k (less_eq$ (enat$ (fun_app$e (minus$ ?v0) ?v2))) (fun_app$f llength$ (fun_app$ (ldropn$ ?v2) ?v1))))))
(assume a259 (forall ((?v0 Nat$)) (= (fun_app$h (less_eq$b ?v0) zero$a) (= ?v0 zero$a))))
(assume a260 (forall ((?v0 Nat$)) (fun_app$h (less_eq$b zero$a) ?v0)))
(assume a261 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$h (less_eq$b ?v0) ?v1) (= (fun_app$e (minus$ ?v1) (fun_app$e (minus$ ?v1) ?v0)) ?v0))))
(assume a262 (forall ((?v0 Natural$)) (= (fun_app$o (minus$a zero$b) ?v0) zero$b)))
(assume a263 (forall ((?v0 Nat$)) (= (fun_app$e (minus$ zero$a) ?v0) zero$a)))
(assume a264 (forall ((?v0 Natural$)) (= (fun_app$o (minus$a ?v0) ?v0) zero$b)))
(assume a265 (forall ((?v0 Nat$)) (= (fun_app$e (minus$ ?v0) ?v0) zero$a)))
(assume a266 (forall ((?v0 Natural$)) (= (fun_app$o (minus$a ?v0) zero$b) ?v0)))
(assume a267 (forall ((?v0 Nat$)) (= (fun_app$e (minus$ ?v0) zero$a) ?v0)))
(assume a268 (forall ((?v0 Natural$) (?v1 Natural$)) (= (fun_app$o (minus$a (plus$b ?v0 ?v1)) ?v0) ?v1)))
(assume a269 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$e (minus$ (fun_app$e (plus$a ?v0) ?v1)) ?v0) ?v1)))
(assume a270 (forall ((?v0 Natural$) (?v1 Natural$)) (= (fun_app$o (minus$a (plus$b ?v0 ?v1)) ?v1) ?v0)))
(assume a271 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$e (minus$ (fun_app$e (plus$a ?v0) ?v1)) ?v1) ?v0)))
(assume a272 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (fun_app$o (minus$a (plus$b ?v0 ?v1)) (plus$b ?v0 ?v2)) (fun_app$o (minus$a ?v1) ?v2))))
(assume a273 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$e (minus$ (fun_app$e (plus$a ?v0) ?v1)) (fun_app$e (plus$a ?v0) ?v2)) (fun_app$e (minus$ ?v1) ?v2))))
(assume a274 (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (fun_app$o (minus$a (plus$b ?v0 ?v1)) (plus$b ?v2 ?v1)) (fun_app$o (minus$a ?v0) ?v2))))
(assume a275 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$e (minus$ (fun_app$e (plus$a ?v0) ?v1)) (fun_app$e (plus$a ?v2) ?v1)) (fun_app$e (minus$ ?v0) ?v2))))
(assume a276 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$h (less_eq$b ?v0) ?v1) (= (fun_app$e (minus$ ?v0) ?v1) zero$a))))
(assume a277 (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$e (minus$ ?v0) ?v1) zero$a) (fun_app$h (less_eq$b ?v0) ?v1))))
(assume a278 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$h (less_eq$b ?v0) ?v1) (= (fun_app$e (plus$a (fun_app$e (minus$ ?v1) ?v0)) ?v2) (fun_app$e (minus$ (fun_app$e (plus$a ?v1) ?v2)) ?v0)))))
(assume a279 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$h (less_eq$b ?v0) ?v1) (= (fun_app$e (plus$a ?v2) (fun_app$e (minus$ ?v1) ?v0)) (fun_app$e (minus$ (fun_app$e (plus$a ?v2) ?v1)) ?v0)))))
(step t0 (cl (not (! (= (! (or (! (not (! (not (! (= @p_6 (! (iterates$ f$ (! (fun_app$a (! (fun_app$b (! (fun_app$c funpow$ n$) :named @p_11) f$) :named @p_12) x$) :named @p_13)) :named @p_14)) :named @p_15)) :named @p_16)) :named @p_44) (! (not (! (= @p_14 (! (fun_app$ (ldropn$ n$) @p_5) :named @p_18)) :named @p_19)) :named @p_41) (! (not (! (= @p_6 @p_18) :named @p_39)) :named @p_42)) :named @p_45) (! (or @p_15 @p_41 @p_42) :named @p_43)) :named @p_53)) (not @p_45) @p_43) :rule equiv_pos2)
(step t1 (cl (! (= @p_44 @p_15) :named @p_54)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_54 1 5))
(step t2 (cl (= @p_41 @p_41)) :rule refl)
(step t3 (cl (= @p_42 @p_42)) :rule refl)
(step t4 (cl @p_53) :rule cong :premises (t1 t2 t3))
(step t5 (cl (! (and @p_16 @p_19) :named @p_48) @p_44 @p_41) :rule and_neg)
(step t6 (cl (! (=> @p_48 @p_42) :named @p_50) @p_48) :rule implies_neg1)
(anchor :step t7)
(assume t7.a0 @p_16)
(assume t7.a1 @p_19)
(step t7.t0 (cl (= (! (= @p_39 false) :named @p_51) @p_42)) :rule equiv_simplify)
(step t7.t1 (cl (not @p_51) @p_42) :rule equiv1 :premises (t7.t0))
(step t7.t2 (cl (= @p_6 @p_6)) :rule refl)
(step t7.t3 (cl (or (! (not (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2))))) :named @p_33) (! (= @p_18 @p_14) :named @p_35))) :rule forall_inst :args (n$ f$ x$))
(step t7.t4 (cl @p_33 @p_35) :rule or :premises (t7.t3))
(step t7.t5 (cl (not (! (= (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c compow$ ?v0) ?v1) ?v2)))) (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2))))) :named @p_20)) (not (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c compow$ ?v0) ?v1) ?v2))))) (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2))))) :rule equiv_pos2)
(anchor :step t7.t6 :args ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$) (:= (?v0 Nat$) ?v0) (:= (?v1 A_a_fun$) ?v1) (:= (?v2 A$) ?v2)))
(step t7.t6.t0 (cl (= (! (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) :named @p_28) @p_28)) :rule refl)
(step t7.t6.t1 (cl (! (= ?v1 ?v1) :named @p_22)) :rule refl)
(step t7.t6.t2 (cl (= compow$ funpow$)) :rule symm :premises (a5))
(step t7.t6.t3 (cl (! (= ?v0 ?v0) :named @p_21)) :rule refl)
(step t7.t6.t4 (cl (= (! (fun_app$c compow$ ?v0) :named @p_29) (! (fun_app$c funpow$ ?v0) :named @p_24))) :rule cong :premises (t7.t6.t2 t7.t6.t3))
(step t7.t6.t5 (cl (= (! (fun_app$b @p_29 ?v1) :named @p_30) (! (fun_app$b @p_24 ?v1) :named @p_25))) :rule cong :premises (t7.t6.t4 t7.t6.t1))
(step t7.t6.t6 (cl (! (= ?v2 ?v2) :named @p_23)) :rule refl)
(step t7.t6.t7 (cl (= (! (fun_app$a @p_30 ?v2) :named @p_31) (! (fun_app$a @p_25 ?v2) :named @p_26))) :rule cong :premises (t7.t6.t5 t7.t6.t6))
(step t7.t6.t8 (cl (= (! (iterates$ ?v1 @p_31) :named @p_32) (! (iterates$ ?v1 @p_26) :named @p_27))) :rule cong :premises (t7.t6.t1 t7.t6.t7))
(step t7.t6.t9 (cl (= (= @p_28 @p_32) (= @p_28 @p_27))) :rule cong :premises (t7.t6.t0 t7.t6.t8))
(step t7.t6 (cl @p_20) :rule bind)
(step t7.t7 (cl (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2))))) :rule resolution :premises (t7.t5 t7.t6 a3))
(step t7.t8 (cl @p_35) :rule resolution :premises (t7.t4 t7.t7))
(step t7.t9 (cl (= @p_39 @p_15)) :rule cong :premises (t7.t2 t7.t8))
(step t7.t10 (cl (= (! (= @p_15 false) :named @p_52) @p_16)) :rule equiv_simplify)
(step t7.t11 (cl @p_52 @p_44) :rule equiv2 :premises (t7.t10))
(step t7.t12 (cl (! (not @p_44) :named @p_47) @p_15) :rule not_not)
(step t7.t13 (cl @p_52 @p_15) :rule resolution :premises (t7.t11 t7.t12))
(step t7.t14 (cl (not (! (= @p_8 @p_16) :named @p_17)) (not @p_8) @p_16) :rule equiv_pos2)
(step t7.t15 (cl (= f$ f$)) :rule refl)
(step t7.t16 (cl (= compow$ funpow$)) :rule symm :premises (a5))
(step t7.t17 (cl (= n$ n$)) :rule refl)
(step t7.t18 (cl (= @p_1 @p_11)) :rule cong :premises (t7.t16 t7.t17))
(step t7.t19 (cl (= @p_2 @p_12)) :rule cong :premises (t7.t18 t7.t15))
(step t7.t20 (cl (= x$ x$)) :rule refl)
(step t7.t21 (cl (= @p_3 @p_13)) :rule cong :premises (t7.t19 t7.t20))
(step t7.t22 (cl (= @p_4 @p_14)) :rule cong :premises (t7.t15 t7.t21))
(step t7.t23 (cl (= @p_7 @p_15)) :rule cong :premises (t7.t2 t7.t22))
(step t7.t24 (cl @p_17) :rule cong :premises (t7.t23))
(step t7.t25 (cl @p_16) :rule resolution :premises (t7.t14 t7.t24 a0))
(step t7.t26 (cl @p_52) :rule resolution :premises (t7.t13 t7.t25))
(step t7.t27 (cl @p_51) :rule trans :premises (t7.t9 t7.t26))
(step t7.t28 (cl @p_42) :rule resolution :premises (t7.t1 t7.t27))
(step t7 (cl @p_44 @p_41 @p_42) :rule subproof :discharge (t7.a0 t7.a1))
(step t8 (cl (! (not @p_48) :named @p_49) @p_16) :rule and_pos :args (0))
(step t9 (cl @p_49 @p_19) :rule and_pos :args (1))
(step t10 (cl @p_42 @p_49 @p_49) :rule resolution :premises (t7 t8 t9))
(step t11 (cl @p_49 @p_49 @p_42) :rule reordering :premises (t10))
(step t12 (cl @p_49 @p_42) :rule contraction :premises (t11))
(step t13 (cl @p_50 @p_42) :rule resolution :premises (t6 t12))
(step t14 (cl @p_50 (! (not @p_42) :named @p_46)) :rule implies_neg2)
(step t15 (cl @p_50 @p_50) :rule resolution :premises (t13 t14))
(step t16 (cl @p_50) :rule contraction :premises (t15))
(step t17 (cl @p_49 @p_42) :rule implies :premises (t16))
(step t18 (cl @p_44 @p_41 @p_42) :rule resolution :premises (t5 t17))
(step t19 (cl @p_45 @p_47) :rule or_neg :args (0))
(step t20 (cl @p_45 (not @p_41)) :rule or_neg :args (1))
(step t21 (cl @p_45 @p_46) :rule or_neg :args (2))
(step t22 (cl @p_45 @p_45 @p_45) :rule resolution :premises (t18 t19 t20 t21))
(step t23 (cl @p_45) :rule contraction :premises (t22))
(step t24 (cl @p_43) :rule resolution :premises (t0 t4 t23))
(step t25 (cl @p_15 @p_41 @p_42) :rule or :premises (t24))
(step t26 (cl (or (! (not (forall ((?v0 Nat$) (?v1 A_llist$)) (= (fun_app$ (ldrop$ (enat$ ?v0)) ?v1) (fun_app$ (ldropn$ ?v0) ?v1)))) :named @p_40) @p_39)) :rule forall_inst :args (n$ @p_5))
(step t27 (cl @p_40 @p_39) :rule or :premises (t26))
(step t28 (cl @p_39) :rule resolution :premises (t27 a4))
(step t29 (cl (not (! (= (! (=> (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2)))) @p_35) :named @p_36) (! (=> (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2)))) @p_19) :named @p_34)) :named @p_37)) (not @p_36) @p_34) :rule equiv_pos2)
(step t30 (cl (= (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2)))) (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2)))))) :rule refl)
(step t31 (cl (! (= @p_35 @p_19) :named @p_38)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_38 2 6))
(step t32 (cl @p_37) :rule cong :premises (t30 t31))
(step t33 (cl @p_36 (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2))))) :rule implies_neg1)
(anchor :step t34)
(assume t34.a0 (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2)))))
(step t34.t0 (cl (or @p_33 @p_35)) :rule forall_inst :args (n$ f$ x$))
(step t34.t1 (cl @p_33 @p_35) :rule or :premises (t34.t0))
(step t34.t2 (cl (not @p_20) (not (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c compow$ ?v0) ?v1) ?v2))))) (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2))))) :rule equiv_pos2)
(anchor :step t34.t3 :args ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$) (:= (?v0 Nat$) ?v0) (:= (?v1 A_a_fun$) ?v1) (:= (?v2 A$) ?v2)))
(step t34.t3.t0 (cl (= @p_28 @p_28)) :rule refl)
(step t34.t3.t1 (cl @p_22) :rule refl)
(step t34.t3.t2 (cl (= compow$ funpow$)) :rule symm :premises (a5))
(step t34.t3.t3 (cl @p_21) :rule refl)
(step t34.t3.t4 (cl (= @p_29 @p_24)) :rule cong :premises (t34.t3.t2 t34.t3.t3))
(step t34.t3.t5 (cl (= @p_30 @p_25)) :rule cong :premises (t34.t3.t4 t34.t3.t1))
(step t34.t3.t6 (cl @p_23) :rule refl)
(step t34.t3.t7 (cl (= @p_31 @p_26)) :rule cong :premises (t34.t3.t5 t34.t3.t6))
(step t34.t3.t8 (cl (= @p_32 @p_27)) :rule cong :premises (t34.t3.t1 t34.t3.t7))
(step t34.t3.t9 (cl (= (= @p_28 @p_32) (= @p_28 @p_27))) :rule cong :premises (t34.t3.t0 t34.t3.t8))
(step t34.t3 (cl @p_20) :rule bind)
(step t34.t4 (cl (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2))))) :rule resolution :premises (t34.t2 t34.t3 a3))
(step t34.t5 (cl @p_35) :rule resolution :premises (t34.t1 t34.t4))
(step t34 (cl @p_33 @p_35) :rule subproof :discharge (t34.a0))
(step t35 (cl @p_36 @p_35) :rule resolution :premises (t33 t34))
(step t36 (cl @p_36 (not @p_35)) :rule implies_neg2)
(step t37 (cl @p_36 @p_36) :rule resolution :premises (t35 t36))
(step t38 (cl @p_36) :rule contraction :premises (t37))
(step t39 (cl @p_34) :rule resolution :premises (t29 t32 t38))
(step t40 (cl @p_33 @p_19) :rule implies :premises (t39))
(step t41 (cl (not @p_20) (not (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c compow$ ?v0) ?v1) ?v2))))) (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2))))) :rule equiv_pos2)
(anchor :step t42 :args ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$) (:= (?v0 Nat$) ?v0) (:= (?v1 A_a_fun$) ?v1) (:= (?v2 A$) ?v2)))
(step t42.t0 (cl (= @p_28 @p_28)) :rule refl)
(step t42.t1 (cl @p_22) :rule refl)
(step t42.t2 (cl (= compow$ funpow$)) :rule symm :premises (a5))
(step t42.t3 (cl @p_21) :rule refl)
(step t42.t4 (cl (= @p_29 @p_24)) :rule cong :premises (t42.t2 t42.t3))
(step t42.t5 (cl (= @p_30 @p_25)) :rule cong :premises (t42.t4 t42.t1))
(step t42.t6 (cl @p_23) :rule refl)
(step t42.t7 (cl (= @p_31 @p_26)) :rule cong :premises (t42.t5 t42.t6))
(step t42.t8 (cl (= @p_32 @p_27)) :rule cong :premises (t42.t1 t42.t7))
(step t42.t9 (cl (= (= @p_28 @p_32) (= @p_28 @p_27))) :rule cong :premises (t42.t0 t42.t8))
(step t42 (cl @p_20) :rule bind)
(step t43 (cl (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$ (ldropn$ ?v0) (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c funpow$ ?v0) ?v1) ?v2))))) :rule resolution :premises (t41 t42 a3))
(step t44 (cl @p_19) :rule resolution :premises (t40 t43))
(step t45 (cl (not @p_17) (not @p_8) @p_16) :rule equiv_pos2)
(step t46 (cl (= @p_6 @p_6)) :rule refl)
(step t47 (cl (= f$ f$)) :rule refl)
(step t48 (cl (= compow$ funpow$)) :rule symm :premises (a5))
(step t49 (cl (= n$ n$)) :rule refl)
(step t50 (cl (= @p_1 @p_11)) :rule cong :premises (t48 t49))
(step t51 (cl (= @p_2 @p_12)) :rule cong :premises (t50 t47))
(step t52 (cl (= x$ x$)) :rule refl)
(step t53 (cl (= @p_3 @p_13)) :rule cong :premises (t51 t52))
(step t54 (cl (= @p_4 @p_14)) :rule cong :premises (t47 t53))
(step t55 (cl (= @p_7 @p_15)) :rule cong :premises (t46 t54))
(step t56 (cl @p_17) :rule cong :premises (t55))
(step t57 (cl @p_16) :rule resolution :premises (t45 t56 a0))
(step t58 (cl) :rule resolution :premises (t25 t28 t44 t57))
