(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort B_llist_enat_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort A_a_prod_llist_enat_fun$ 0)
(declare-sort A_b_prod_llist_enat_fun$ 0)
(declare-sort B_a_prod_llist_enat_fun$ 0)
(declare-sort B_b_prod_llist_enat_fun$ 0)
(declare-sort A_a_b_prod_prod_llist_enat_fun$ 0)
(declare-sort B_a_b_prod_prod_llist_enat_fun$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_b_prod$ 0)
(declare-fun none$ () Nat_option$)
(declare-fun the$ (Nat_option$) Nat$)
(declare-fun some$ (Nat$) Nat_option$)
(declare-fun rep_enat$ (Enat$) Nat_option$)
(declare-fun abs_enat$ (Nat_option$) Enat$)
(declare-fun fst$ (A_b_prod$) A$)
(declare-fun snd$ (A_b_prod$) B$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-sort A_b_prod_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$a () A_b_prod_llist$)
(declare-fun lhd$a (A_b_prod_llist$) A_b_prod$)
(declare-fun ltl$a (A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lCons$a (A_b_prod$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lNil$b () B_llist$)
(declare-fun lhd$b (B_llist$) B$)
(declare-fun ltl$b (B_llist$) B_llist$)
(declare-fun lCons$b (B$ B_llist$) B_llist$)
(declare-sort B_a_b_prod_prod$ 0)
(declare-fun fst$a (B_a_b_prod_prod$) B$)
(declare-fun snd$a (B_a_b_prod_prod$) A_b_prod$)
(declare-fun pair$a (B$ A_b_prod$) B_a_b_prod_prod$)
(declare-sort B_a_b_prod_prod_llist$ 0)
(declare-fun lNil$c () B_a_b_prod_prod_llist$)
(declare-fun lhd$c (B_a_b_prod_prod_llist$) B_a_b_prod_prod$)
(declare-fun ltl$c (B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lCons$c (B_a_b_prod_prod$ B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist$)
(declare-sort B_b_prod$ 0)
(declare-fun fst$b (B_b_prod$) B$)
(declare-fun snd$b (B_b_prod$) B$)
(declare-fun pair$b (B$ B$) B_b_prod$)
(declare-sort B_b_prod_llist$ 0)
(declare-fun lNil$d () B_b_prod_llist$)
(declare-fun lhd$d (B_b_prod_llist$) B_b_prod$)
(declare-fun ltl$d (B_b_prod_llist$) B_b_prod_llist$)
(declare-fun lCons$d (B_b_prod$ B_b_prod_llist$) B_b_prod_llist$)
(declare-sort B_a_prod$ 0)
(declare-fun fst$c (B_a_prod$) B$)
(declare-fun snd$c (B_a_prod$) A$)
(declare-fun pair$c (B$ A$) B_a_prod$)
(declare-sort B_a_prod_llist$ 0)
(declare-fun lNil$e () B_a_prod_llist$)
(declare-fun lhd$e (B_a_prod_llist$) B_a_prod$)
(declare-fun ltl$e (B_a_prod_llist$) B_a_prod_llist$)
(declare-fun lCons$e (B_a_prod$ B_a_prod_llist$) B_a_prod_llist$)
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$d (A_a_b_prod_prod$) A$)
(declare-fun snd$d (A_a_b_prod_prod$) A_b_prod$)
(declare-fun pair$d (A$ A_b_prod$) A_a_b_prod_prod$)
(declare-sort A_a_b_prod_prod_llist$ 0)
(declare-fun lNil$f () A_a_b_prod_prod_llist$)
(declare-fun lhd$f (A_a_b_prod_prod_llist$) A_a_b_prod_prod$)
(declare-fun ltl$f (A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lCons$f (A_a_b_prod_prod$ A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$e (A_a_prod$) A$)
(declare-fun snd$e (A_a_prod$) A$)
(declare-fun pair$e (A$ A$) A_a_prod$)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$g () A_a_prod_llist$)
(declare-fun lhd$g (A_a_prod_llist$) A_a_prod$)
(declare-fun ltl$g (A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lCons$g (A_a_prod$ A_a_prod_llist$) A_a_prod_llist$)
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-fun fst$f (A_b_prod_a_b_prod_prod$) A_b_prod$)
(declare-fun snd$f (A_b_prod_a_b_prod_prod$) A_b_prod$)
(declare-fun pair$f (A_b_prod$ A_b_prod$) A_b_prod_a_b_prod_prod$)
(declare-sort A_b_prod_a_b_prod_prod_llist$ 0)
(declare-fun lNil$h () A_b_prod_a_b_prod_prod_llist$)
(declare-fun lhd$h (A_b_prod_a_b_prod_prod_llist$) A_b_prod_a_b_prod_prod$)
(declare-fun ltl$h (A_b_prod_a_b_prod_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lCons$h (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-sort A_b_b_prod_prod$ 0)
(declare-fun fst$g (A_b_b_prod_prod$) A$)
(declare-fun snd$g (A_b_b_prod_prod$) B_b_prod$)
(declare-fun pair$g (A$ B_b_prod$) A_b_b_prod_prod$)
(declare-sort A_b_b_prod_prod_llist$ 0)
(declare-fun lNil$i () A_b_b_prod_prod_llist$)
(declare-fun lhd$i (A_b_b_prod_prod_llist$) A_b_b_prod_prod$)
(declare-fun ltl$i (A_b_b_prod_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun lCons$i (A_b_b_prod_prod$ A_b_b_prod_prod_llist$) A_b_b_prod_prod_llist$)
(declare-sort A_b_a_prod_prod$ 0)
(declare-fun fst$h (A_b_a_prod_prod$) A$)
(declare-fun snd$h (A_b_a_prod_prod$) B_a_prod$)
(declare-fun pair$h (A$ B_a_prod$) A_b_a_prod_prod$)
(declare-sort A_b_a_prod_prod_llist$ 0)
(declare-fun lNil$j () A_b_a_prod_prod_llist$)
(declare-fun lhd$j (A_b_a_prod_prod_llist$) A_b_a_prod_prod$)
(declare-fun ltl$j (A_b_a_prod_prod_llist$) A_b_a_prod_prod_llist$)
(declare-fun lCons$j (A_b_a_prod_prod$ A_b_a_prod_prod_llist$) A_b_a_prod_prod_llist$)
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$i (A_a_a_prod_prod$) A$)
(declare-fun snd$i (A_a_a_prod_prod$) A_a_prod$)
(declare-fun pair$i (A$ A_a_prod$) A_a_a_prod_prod$)
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-fun lNil$k () A_a_a_prod_prod_llist$)
(declare-fun lhd$k (A_a_a_prod_prod_llist$) A_a_a_prod_prod$)
(declare-fun ltl$k (A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lCons$k (A_a_a_prod_prod$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-sort B_b_b_prod_prod$ 0)
(declare-fun fst$j (B_b_b_prod_prod$) B$)
(declare-fun snd$j (B_b_b_prod_prod$) B_b_prod$)
(declare-fun pair$j (B$ B_b_prod$) B_b_b_prod_prod$)
(declare-sort B_b_b_prod_prod_llist$ 0)
(declare-fun lNil$l () B_b_b_prod_prod_llist$)
(declare-fun lhd$l (B_b_b_prod_prod_llist$) B_b_b_prod_prod$)
(declare-fun ltl$l (B_b_b_prod_prod_llist$) B_b_b_prod_prod_llist$)
(declare-fun lCons$l (B_b_b_prod_prod$ B_b_b_prod_prod_llist$) B_b_b_prod_prod_llist$)
(declare-sort B_b_a_prod_prod$ 0)
(declare-fun fst$k (B_b_a_prod_prod$) B$)
(declare-fun snd$k (B_b_a_prod_prod$) B_a_prod$)
(declare-fun pair$k (B$ B_a_prod$) B_b_a_prod_prod$)
(declare-sort B_b_a_prod_prod_llist$ 0)
(declare-fun lNil$m () B_b_a_prod_prod_llist$)
(declare-fun lhd$m (B_b_a_prod_prod_llist$) B_b_a_prod_prod$)
(declare-fun ltl$m (B_b_a_prod_prod_llist$) B_b_a_prod_prod_llist$)
(declare-fun lCons$m (B_b_a_prod_prod$ B_b_a_prod_prod_llist$) B_b_a_prod_prod_llist$)
(declare-sort A_b_prod_b_prod$ 0)
(declare-fun fst$l (A_b_prod_b_prod$) A_b_prod$)
(declare-fun snd$l (A_b_prod_b_prod$) B$)
(declare-fun pair$l (A_b_prod$ B$) A_b_prod_b_prod$)
(declare-sort A_b_prod_b_prod_llist$ 0)
(declare-fun lNil$n () A_b_prod_b_prod_llist$)
(declare-fun lhd$n (A_b_prod_b_prod_llist$) A_b_prod_b_prod$)
(declare-fun ltl$n (A_b_prod_b_prod_llist$) A_b_prod_b_prod_llist$)
(declare-fun lCons$n (A_b_prod_b_prod$ A_b_prod_b_prod_llist$) A_b_prod_b_prod_llist$)
(declare-sort A_b_prod_a_prod$ 0)
(declare-fun fst$m (A_b_prod_a_prod$) A_b_prod$)
(declare-fun snd$m (A_b_prod_a_prod$) A$)
(declare-fun pair$m (A_b_prod$ A$) A_b_prod_a_prod$)
(declare-sort A_b_prod_a_prod_llist$ 0)
(declare-fun lNil$o () A_b_prod_a_prod_llist$)
(declare-fun lhd$o (A_b_prod_a_prod_llist$) A_b_prod_a_prod$)
(declare-fun ltl$o (A_b_prod_a_prod_llist$) A_b_prod_a_prod_llist$)
(declare-fun lCons$o (A_b_prod_a_prod$ A_b_prod_a_prod_llist$) A_b_prod_a_prod_llist$)
(declare-sort B_a_b_prod_a_b_prod_prod_prod$ 0)
(declare-fun fst$n (B_a_b_prod_a_b_prod_prod_prod$) B$)
(declare-fun snd$n (B_a_b_prod_a_b_prod_prod_prod$) A_b_prod_a_b_prod_prod$)
(declare-fun pair$n (B$ A_b_prod_a_b_prod_prod$) B_a_b_prod_a_b_prod_prod_prod$)
(declare-sort B_a_b_prod_a_b_prod_prod_prod_llist$ 0)
(declare-fun lNil$p () B_a_b_prod_a_b_prod_prod_prod_llist$)
(declare-fun lhd$p (B_a_b_prod_a_b_prod_prod_prod_llist$) B_a_b_prod_a_b_prod_prod_prod$)
(declare-fun ltl$p (B_a_b_prod_a_b_prod_prod_prod_llist$) B_a_b_prod_a_b_prod_prod_prod_llist$)
(declare-fun lCons$p (B_a_b_prod_a_b_prod_prod_prod$ B_a_b_prod_a_b_prod_prod_prod_llist$) B_a_b_prod_a_b_prod_prod_prod_llist$)
(declare-fun us$ () A_b_prod_llist$)
(declare-fun vs$ () A_b_prod_llist$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun min$ (Enat$) Enat_enat_fun$)
(declare-fun less$ (Enat$) Enat_bool_fun$)
(declare-fun llcp$ (B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist_enat_fun$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun plus$ (Enat$) Enat_enat_fun$)
(declare-fun zero$ () Enat$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun llcp$a (B_b_prod_llist$) B_b_prod_llist_enat_fun$)
(declare-fun llcp$b (B_a_prod_llist$) B_a_prod_llist_enat_fun$)
(declare-fun llcp$c (A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist_enat_fun$)
(declare-fun llcp$d (A_a_prod_llist$) A_a_prod_llist_enat_fun$)
(declare-fun llcp$e (A_b_prod_llist$) A_b_prod_llist_enat_fun$)
(declare-fun llcp$f (A_llist$) A_llist_enat_fun$)
(declare-fun llcp$g (B_llist$) B_llist_enat_fun$)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun lzip$a (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun lzip$b (B_llist$ A_llist$) B_a_prod_llist$)
(declare-fun lzip$c (B_llist$ B_llist$) B_b_prod_llist$)
(declare-fun lzip$d (A_llist$ B_b_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun lzip$e (A_llist$ B_a_prod_llist$) A_b_a_prod_prod_llist$)
(declare-fun lzip$f (A_llist$ A_b_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lzip$g (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lzip$h (B_llist$ B_b_prod_llist$) B_b_b_prod_prod_llist$)
(declare-fun lzip$i (B_llist$ B_a_prod_llist$) B_b_a_prod_prod_llist$)
(declare-fun lzip$j (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lzip$k (A_b_prod_llist$ B_llist$) A_b_prod_b_prod_llist$)
(declare-fun lzip$l (A_b_prod_llist$ A_llist$) A_b_prod_a_prod_llist$)
(declare-fun lzip$m (B_llist$ A_b_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lzip$n (B_llist$ A_b_prod_a_b_prod_prod_llist$) B_a_b_prod_a_b_prod_prod_prod_llist$)
(declare-fun minus$ (Enat$) Enat_enat_fun$)
(declare-fun ldrop$a (Enat$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun ldrop$b (Enat$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun ldrop$c (Enat$ B_llist$) B_llist$)
(declare-fun ldrop$d (Enat$ B_a_prod_llist$) B_a_prod_llist$)
(declare-fun ldrop$e (Enat$ B_b_prod_llist$) B_b_prod_llist$)
(declare-fun ldrop$f (Enat$ A_b_b_prod_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun ldrop$g (Enat$ A_b_a_prod_prod_llist$) A_b_a_prod_prod_llist$)
(declare-fun ldrop$h (Enat$ A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun ldrop$i (Enat$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun ldrop$j (Enat$ B_b_b_prod_prod_llist$) B_b_b_prod_prod_llist$)
(declare-fun ldrop$k (Enat$ B_b_a_prod_prod_llist$) B_b_a_prod_prod_llist$)
(declare-fun ldrop$l (Enat$ A_b_prod_a_b_prod_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun ldrop$m (Enat$ B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun ltake$a (Enat$ B_llist$) B_llist$)
(declare-fun ltake$b (Enat$ B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun ltake$c (Enat$ B_b_prod_llist$) B_b_prod_llist$)
(declare-fun ltake$d (Enat$ B_a_prod_llist$) B_a_prod_llist$)
(declare-fun ltake$e (Enat$ A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun ltake$f (Enat$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun ltake$g (Enat$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun ltake$h (Enat$ A_b_b_prod_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun ltake$i (Enat$ A_b_a_prod_prod_llist$) A_b_a_prod_prod_llist$)
(declare-fun ltake$j (Enat$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun ltake$k (Enat$ B_b_b_prod_prod_llist$) B_b_b_prod_prod_llist$)
(declare-fun fun_app$ (Enat_bool_fun$ Enat$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun less_eq$ (Enat$) Enat_bool_fun$)
(declare-fun lfinite$ (A_b_prod_llist$) Bool)
(declare-fun llength$ (A_b_prod_llist$) Enat$)
(declare-fun fun_app$a (Enat_enat_fun$ Enat$) Enat$)
(declare-fun fun_app$b (B_a_b_prod_prod_llist_enat_fun$ B_a_b_prod_prod_llist$) Enat$)
(declare-fun fun_app$c (B_b_prod_llist_enat_fun$ B_b_prod_llist$) Enat$)
(declare-fun fun_app$d (B_a_prod_llist_enat_fun$ B_a_prod_llist$) Enat$)
(declare-fun fun_app$e (A_a_b_prod_prod_llist_enat_fun$ A_a_b_prod_prod_llist$) Enat$)
(declare-fun fun_app$f (A_a_prod_llist_enat_fun$ A_a_prod_llist$) Enat$)
(declare-fun fun_app$g (A_b_prod_llist_enat_fun$ A_b_prod_llist$) Enat$)
(declare-fun fun_app$h (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$i (B_llist_enat_fun$ B_llist$) Enat$)
(declare-fun fun_app$j (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun infinity$ () Enat$)
(declare-fun lappend$a (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lappend$b (B_a_b_prod_prod_llist$ B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lappend$c (B_b_prod_llist$ B_b_prod_llist$) B_b_prod_llist$)
(declare-fun lappend$d (B_a_prod_llist$ B_a_prod_llist$) B_a_prod_llist$)
(declare-fun lappend$e (A_a_b_prod_prod_llist$ A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lappend$f (A_a_prod_llist$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lappend$g (A_b_prod_a_b_prod_prod_llist$ A_b_prod_a_b_prod_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lappend$h (B_llist$ B_llist$) B_llist$)
(declare-fun lappend$i (A_b_prod_a_prod_llist$ A_b_prod_a_prod_llist$) A_b_prod_a_prod_llist$)
(declare-fun lappend$j (A_b_prod_b_prod_llist$ A_b_prod_b_prod_llist$) A_b_prod_b_prod_llist$)
(declare-fun lappend$k (A_b_b_prod_prod_llist$ A_b_b_prod_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun lfinite$a (B_a_b_prod_prod_llist$) Bool)
(declare-fun lfinite$b (B_b_prod_llist$) Bool)
(declare-fun lfinite$c (B_a_prod_llist$) Bool)
(declare-fun lfinite$d (A_a_b_prod_prod_llist$) Bool)
(declare-fun lfinite$e (A_a_prod_llist$) Bool)
(declare-fun lfinite$f (A_b_prod_a_b_prod_prod_llist$) Bool)
(declare-fun lfinite$g (A_llist$) Bool)
(declare-fun lfinite$h (B_llist$) Bool)
(declare-fun lfinite$i (A_b_prod_b_prod_llist$) Bool)
(declare-fun lfinite$j (A_b_prod_a_prod_llist$) Bool)
(declare-fun lfinite$k (B_a_b_prod_a_b_prod_prod_prod_llist$) Bool)
(declare-fun llength$a (A_llist$) Enat$)
(declare-fun llength$b (B_llist$) Enat$)
(declare-fun llength$c (B_a_b_prod_prod_llist$) Enat$)
(declare-fun llength$d (B_b_prod_llist$) Enat$)
(declare-fun llength$e (B_a_prod_llist$) Enat$)
(declare-fun llength$f (A_a_b_prod_prod_llist$) Enat$)
(declare-fun llength$g (A_a_prod_llist$) Enat$)
(declare-fun llength$h (A_b_prod_a_prod_llist$) Enat$)
(declare-fun llength$i (A_b_prod_b_prod_llist$) Enat$)
(declare-fun llength$j (A_b_prod_a_b_prod_prod_llist$) Enat$)
(declare-fun llength$k (A_b_b_prod_prod_llist$) Enat$)
(assert (not (= xs$ (ltake$ (llength$ us$) xs$))))
(assert (= (llength$a xs$) infinity$))
(assert (= (llength$ us$) infinity$))
(assert (not (lfinite$ us$)))
(assert (fun_app$ (less_eq$ (llength$ us$)) (llength$a xs$)))
(assert (= (llength$a (ltake$ (llength$ us$) xs$)) (llength$b (ltake$a (llength$ us$) ys$))))
(assert (= xs$ (lappend$ (ltake$ (llength$ us$) xs$) (ldrop$ (llength$ us$) xs$))))
(assert (= us$ (lzip$ (ltake$ (llength$ us$) xs$) (ltake$a (llength$ us$) ys$))))
(assert (fun_app$ (less_eq$ (llength$ us$)) (llength$b ys$)))
(assert (forall ((?v0 Enat$) (?v1 B_a_b_prod_prod_llist$)) (= (llength$c (ltake$b ?v0 ?v1)) (fun_app$a (min$ ?v0) (llength$c ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 B_b_prod_llist$)) (= (llength$d (ltake$c ?v0 ?v1)) (fun_app$a (min$ ?v0) (llength$d ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 B_a_prod_llist$)) (= (llength$e (ltake$d ?v0 ?v1)) (fun_app$a (min$ ?v0) (llength$e ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_b_prod_prod_llist$)) (= (llength$f (ltake$e ?v0 ?v1)) (fun_app$a (min$ ?v0) (llength$f ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$)) (= (llength$g (ltake$f ?v0 ?v1)) (fun_app$a (min$ ?v0) (llength$g ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_llist$)) (= (llength$ (ltake$g ?v0 ?v1)) (fun_app$a (min$ ?v0) (llength$ ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (llength$a (ltake$ ?v0 ?v1)) (fun_app$a (min$ ?v0) (llength$a ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$)) (= (llength$b (ltake$a ?v0 ?v1)) (fun_app$a (min$ ?v0) (llength$b ?v1))) ))
(assert (forall ((?v0 B_a_b_prod_prod_llist$) (?v1 Enat$)) (! (=> (fun_app$ (less_eq$ (llength$c ?v0)) ?v1) (= (ltake$b ?v1 ?v0) ?v0)) :pattern ((ltake$b ?v1 ?v0)))))
(assert (forall ((?v0 B_b_prod_llist$) (?v1 Enat$)) (! (=> (fun_app$ (less_eq$ (llength$d ?v0)) ?v1) (= (ltake$c ?v1 ?v0) ?v0)) :pattern ((ltake$c ?v1 ?v0)))))
(assert (forall ((?v0 B_a_prod_llist$) (?v1 Enat$)) (! (=> (fun_app$ (less_eq$ (llength$e ?v0)) ?v1) (= (ltake$d ?v1 ?v0) ?v0)) :pattern ((ltake$d ?v1 ?v0)))))
(assert (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 Enat$)) (! (=> (fun_app$ (less_eq$ (llength$f ?v0)) ?v1) (= (ltake$e ?v1 ?v0) ?v0)) :pattern ((ltake$e ?v1 ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Enat$)) (! (=> (fun_app$ (less_eq$ (llength$g ?v0)) ?v1) (= (ltake$f ?v1 ?v0) ?v0)) :pattern ((ltake$f ?v1 ?v0)))))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 Enat$)) (! (=> (fun_app$ (less_eq$ (llength$ ?v0)) ?v1) (= (ltake$g ?v1 ?v0) ?v0)) :pattern ((ltake$g ?v1 ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 Enat$)) (! (=> (fun_app$ (less_eq$ (llength$a ?v0)) ?v1) (= (ltake$ ?v1 ?v0) ?v0)) :pattern ((ltake$ ?v1 ?v0)))))
(assert (forall ((?v0 B_llist$) (?v1 Enat$)) (! (=> (fun_app$ (less_eq$ (llength$b ?v0)) ?v1) (= (ltake$a ?v1 ?v0) ?v0)) :pattern ((ltake$a ?v1 ?v0)))))
(assert (forall ((?v0 B_a_b_prod_prod_llist$)) (! (= (fun_app$b (llcp$ ?v0) ?v0) (llength$c ?v0)) :pattern ((llcp$ ?v0)))))
(assert (forall ((?v0 B_b_prod_llist$)) (! (= (fun_app$c (llcp$a ?v0) ?v0) (llength$d ?v0)) :pattern ((llcp$a ?v0)))))
(assert (forall ((?v0 B_a_prod_llist$)) (! (= (fun_app$d (llcp$b ?v0) ?v0) (llength$e ?v0)) :pattern ((llcp$b ?v0)))))
(assert (forall ((?v0 A_a_b_prod_prod_llist$)) (! (= (fun_app$e (llcp$c ?v0) ?v0) (llength$f ?v0)) :pattern ((llcp$c ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$f (llcp$d ?v0) ?v0) (llength$g ?v0)) :pattern ((llcp$d ?v0)))))
(assert (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$g (llcp$e ?v0) ?v0) (llength$ ?v0)) :pattern ((llcp$e ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$h (llcp$f ?v0) ?v0) (llength$a ?v0)) :pattern ((llcp$f ?v0)))))
(assert (forall ((?v0 B_llist$)) (! (= (fun_app$i (llcp$g ?v0) ?v0) (llength$b ?v0)) :pattern ((llcp$g ?v0)))))
(assert (fun_app$ (less_eq$ (llength$ us$)) (fun_app$a (min$ (llength$a xs$)) (llength$b ys$))))
(assert (= (lzip$ xs$ ys$) (lappend$a us$ vs$)))
(assert (= (llength$ (lzip$ xs$ ys$)) (llength$ (lappend$a us$ vs$))))
(assert (= (lappend$a us$ vs$) us$))
(assert (= (llength$b ys$) infinity$))
(assert (forall ((?v0 B_a_b_prod_prod_llist$) (?v1 B_a_b_prod_prod_llist$)) (= (lfinite$a (lappend$b ?v0 ?v1)) (and (lfinite$a ?v0) (lfinite$a ?v1))) ))
(assert (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$)) (= (lfinite$b (lappend$c ?v0 ?v1)) (and (lfinite$b ?v0) (lfinite$b ?v1))) ))
(assert (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$)) (= (lfinite$c (lappend$d ?v0 ?v1)) (and (lfinite$c ?v0) (lfinite$c ?v1))) ))
(assert (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$)) (= (lfinite$d (lappend$e ?v0 ?v1)) (and (lfinite$d ?v0) (lfinite$d ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lfinite$e (lappend$f ?v0 ?v1)) (and (lfinite$e ?v0) (lfinite$e ?v1))) ))
(assert (forall ((?v0 A_b_prod_a_b_prod_prod_llist$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (= (lfinite$f (lappend$g ?v0 ?v1)) (and (lfinite$f ?v0) (lfinite$f ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$g (lappend$ ?v0 ?v1)) (and (lfinite$g ?v0) (lfinite$g ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lfinite$h (lappend$h ?v0 ?v1)) (and (lfinite$h ?v0) (lfinite$h ?v1))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (lfinite$ (lappend$a ?v0 ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (= (ldrop$a ?v0 (lzip$a ?v1 ?v2)) (lzip$a (ldrop$ ?v0 ?v1) (ldrop$ ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 B_llist$)) (= (ldrop$b ?v0 (lzip$ ?v1 ?v2)) (lzip$ (ldrop$ ?v0 ?v1) (ldrop$c ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 A_llist$)) (= (ldrop$d ?v0 (lzip$b ?v1 ?v2)) (lzip$b (ldrop$c ?v0 ?v1) (ldrop$ ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_llist$)) (= (ldrop$e ?v0 (lzip$c ?v1 ?v2)) (lzip$c (ldrop$c ?v0 ?v1) (ldrop$c ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 B_b_prod_llist$)) (= (ldrop$f ?v0 (lzip$d ?v1 ?v2)) (lzip$d (ldrop$ ?v0 ?v1) (ldrop$e ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 B_a_prod_llist$)) (= (ldrop$g ?v0 (lzip$e ?v1 ?v2)) (lzip$e (ldrop$ ?v0 ?v1) (ldrop$d ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_b_prod_llist$)) (= (ldrop$h ?v0 (lzip$f ?v1 ?v2)) (lzip$f (ldrop$ ?v0 ?v1) (ldrop$b ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_a_prod_llist$)) (= (ldrop$i ?v0 (lzip$g ?v1 ?v2)) (lzip$g (ldrop$ ?v0 ?v1) (ldrop$a ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_b_prod_llist$)) (= (ldrop$j ?v0 (lzip$h ?v1 ?v2)) (lzip$h (ldrop$c ?v0 ?v1) (ldrop$e ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_a_prod_llist$)) (= (ldrop$k ?v0 (lzip$i ?v1 ?v2)) (lzip$i (ldrop$c ?v0 ?v1) (ldrop$d ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_b_prod_llist$)) (= (ltake$g ?v0 (ltake$g ?v1 ?v2)) (ltake$g (fun_app$a (min$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_b_prod_llist$)) (= (ltake$c ?v0 (ltake$c ?v1 ?v2)) (ltake$c (fun_app$a (min$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_a_prod_llist$)) (= (ltake$d ?v0 (ltake$d ?v1 ?v2)) (ltake$d (fun_app$a (min$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_a_prod_llist$)) (= (ltake$f ?v0 (ltake$f ?v1 ?v2)) (ltake$f (fun_app$a (min$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (ltake$ ?v0 (ltake$ ?v1 ?v2)) (ltake$ (fun_app$a (min$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_llist$)) (= (ltake$a ?v0 (ltake$a ?v1 ?v2)) (ltake$a (fun_app$a (min$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 B_b_prod_llist$)) (= (lfinite$b (ldrop$e ?v0 ?v1)) (or (lfinite$b ?v1) (= ?v0 infinity$))) ))
(assert (forall ((?v0 Enat$) (?v1 B_a_prod_llist$)) (= (lfinite$c (ldrop$d ?v0 ?v1)) (or (lfinite$c ?v1) (= ?v0 infinity$))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$)) (= (lfinite$e (ldrop$a ?v0 ?v1)) (or (lfinite$e ?v1) (= ?v0 infinity$))) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (= (lfinite$f (ldrop$l ?v0 ?v1)) (or (lfinite$f ?v1) (= ?v0 infinity$))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (lfinite$g (ldrop$ ?v0 ?v1)) (or (lfinite$g ?v1) (= ?v0 infinity$))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$)) (= (lfinite$h (ldrop$c ?v0 ?v1)) (or (lfinite$h ?v1) (= ?v0 infinity$))) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_llist$)) (= (lfinite$ (ldrop$b ?v0 ?v1)) (or (lfinite$ ?v1) (= ?v0 infinity$))) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_llist$) (?v2 Enat$) (?v3 A_b_prod_llist$)) (= (fun_app$g (llcp$e (ltake$g ?v0 ?v1)) (ltake$g ?v2 ?v3)) (fun_app$a (min$ (fun_app$a (min$ ?v0) ?v2)) (fun_app$g (llcp$e ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 B_b_prod_llist$) (?v2 Enat$) (?v3 B_b_prod_llist$)) (= (fun_app$c (llcp$a (ltake$c ?v0 ?v1)) (ltake$c ?v2 ?v3)) (fun_app$a (min$ (fun_app$a (min$ ?v0) ?v2)) (fun_app$c (llcp$a ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 B_a_prod_llist$) (?v2 Enat$) (?v3 B_a_prod_llist$)) (= (fun_app$d (llcp$b (ltake$d ?v0 ?v1)) (ltake$d ?v2 ?v3)) (fun_app$a (min$ (fun_app$a (min$ ?v0) ?v2)) (fun_app$d (llcp$b ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$) (?v2 Enat$) (?v3 A_a_prod_llist$)) (= (fun_app$f (llcp$d (ltake$f ?v0 ?v1)) (ltake$f ?v2 ?v3)) (fun_app$a (min$ (fun_app$a (min$ ?v0) ?v2)) (fun_app$f (llcp$d ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 Enat$) (?v3 A_llist$)) (= (fun_app$h (llcp$f (ltake$ ?v0 ?v1)) (ltake$ ?v2 ?v3)) (fun_app$a (min$ (fun_app$a (min$ ?v0) ?v2)) (fun_app$h (llcp$f ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 Enat$) (?v3 B_llist$)) (= (fun_app$i (llcp$g (ltake$a ?v0 ?v1)) (ltake$a ?v2 ?v3)) (fun_app$a (min$ (fun_app$a (min$ ?v0) ?v2)) (fun_app$i (llcp$g ?v1) ?v3))) ))
(assert (forall ((?v0 A_llist$) (?v1 B_llist$)) (= (lfinite$ (lzip$ ?v0 ?v1)) (or (lfinite$g ?v0) (lfinite$h ?v1))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (lfinite$f (lzip$j ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$ ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lfinite$b (lzip$c ?v0 ?v1)) (or (lfinite$h ?v0) (lfinite$h ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 A_llist$)) (= (lfinite$c (lzip$b ?v0 ?v1)) (or (lfinite$h ?v0) (lfinite$g ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$e (lzip$a ?v0 ?v1)) (or (lfinite$g ?v0) (lfinite$g ?v1))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$)) (= (lfinite$i (lzip$k ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$h ?v1))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$)) (= (lfinite$j (lzip$l ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$g ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$)) (= (lfinite$a (lzip$m ?v0 ?v1)) (or (lfinite$h ?v0) (lfinite$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$)) (= (lfinite$d (lzip$f ?v0 ?v1)) (or (lfinite$g ?v0) (lfinite$ ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (= (lfinite$k (lzip$n ?v0 ?v1)) (or (lfinite$h ?v0) (lfinite$f ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (llength$g (lzip$a ?v0 ?v1)) (fun_app$a (min$ (llength$a ?v0)) (llength$a ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 A_llist$)) (= (llength$e (lzip$b ?v0 ?v1)) (fun_app$a (min$ (llength$b ?v0)) (llength$a ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (llength$d (lzip$c ?v0 ?v1)) (fun_app$a (min$ (llength$b ?v0)) (llength$b ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 B_llist$)) (= (llength$ (lzip$ ?v0 ?v1)) (fun_app$a (min$ (llength$a ?v0)) (llength$b ?v1))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$)) (= (llength$h (lzip$l ?v0 ?v1)) (fun_app$a (min$ (llength$ ?v0)) (llength$a ?v1))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$)) (= (llength$i (lzip$k ?v0 ?v1)) (fun_app$a (min$ (llength$ ?v0)) (llength$b ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$)) (= (llength$f (lzip$f ?v0 ?v1)) (fun_app$a (min$ (llength$a ?v0)) (llength$ ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$)) (= (llength$c (lzip$m ?v0 ?v1)) (fun_app$a (min$ (llength$b ?v0)) (llength$ ?v1))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (llength$j (lzip$j ?v0 ?v1)) (fun_app$a (min$ (llength$ ?v0)) (llength$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$)) (= (llength$k (lzip$d ?v0 ?v1)) (fun_app$a (min$ (llength$a ?v0)) (llength$d ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (fun_app$i (llcp$g ?v0) ?v1) (fun_app$i (llcp$g ?v1) ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$h (llcp$f ?v0) ?v1) (fun_app$h (llcp$f ?v1) ?v0)) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (fun_app$g (llcp$e ?v0) ?v1) (fun_app$g (llcp$e ?v1) ?v0)) ))
(assert (forall ((?v0 B_a_b_prod_prod_llist$) (?v1 B_a_b_prod_prod_llist$) (?v2 B_a_b_prod_prod_llist$)) (= (lappend$b (lappend$b ?v0 ?v1) ?v2) (lappend$b ?v0 (lappend$b ?v1 ?v2))) ))
(assert (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist$)) (= (lappend$c (lappend$c ?v0 ?v1) ?v2) (lappend$c ?v0 (lappend$c ?v1 ?v2))) ))
(assert (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist$)) (= (lappend$d (lappend$d ?v0 ?v1) ?v2) (lappend$d ?v0 (lappend$d ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_llist$)) (= (lappend$e (lappend$e ?v0 ?v1) ?v2) (lappend$e ?v0 (lappend$e ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (= (lappend$f (lappend$f ?v0 ?v1) ?v2) (lappend$f ?v0 (lappend$f ?v1 ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (lappend$a (lappend$a ?v0 ?v1) ?v2) (lappend$a ?v0 (lappend$a ?v1 ?v2))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (= (lappend$h (lappend$h ?v0 ?v1) ?v2) (lappend$h ?v0 (lappend$h ?v1 ?v2))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$ (less_eq$ ?v3) ?v4) (fun_app$ (fun_app$j ?v0 ?v3) ?v4)) ) (=> (fun_app$ (fun_app$j ?v0 ?v1) ?v2) (fun_app$ (fun_app$j ?v0 ?v2) ?v1))) (fun_app$ (fun_app$j ?v0 ?v2) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (= (llength$a ?v0) (llength$a ?v1)) (= (lzip$a (lappend$ ?v0 ?v2) (lappend$ ?v1 ?v3)) (lappend$f (lzip$a ?v0 ?v1) (lzip$a ?v2 ?v3)))) ))
(assert (forall ((?v0 A_llist$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_llist$)) (=> (= (llength$a ?v0) (llength$b ?v1)) (= (lzip$ (lappend$ ?v0 ?v2) (lappend$h ?v1 ?v3)) (lappend$a (lzip$ ?v0 ?v1) (lzip$ ?v2 ?v3)))) ))
(assert (forall ((?v0 B_llist$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_llist$)) (=> (= (llength$b ?v0) (llength$a ?v1)) (= (lzip$b (lappend$h ?v0 ?v2) (lappend$ ?v1 ?v3)) (lappend$d (lzip$b ?v0 ?v1) (lzip$b ?v2 ?v3)))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_llist$)) (=> (= (llength$b ?v0) (llength$b ?v1)) (= (lzip$c (lappend$h ?v0 ?v2) (lappend$h ?v1 ?v3)) (lappend$c (lzip$c ?v0 ?v1) (lzip$c ?v2 ?v3)))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$) (?v2 A_b_prod_llist$) (?v3 A_llist$)) (=> (= (llength$ ?v0) (llength$a ?v1)) (= (lzip$l (lappend$a ?v0 ?v2) (lappend$ ?v1 ?v3)) (lappend$i (lzip$l ?v0 ?v1) (lzip$l ?v2 ?v3)))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$) (?v2 A_b_prod_llist$) (?v3 B_llist$)) (=> (= (llength$ ?v0) (llength$b ?v1)) (= (lzip$k (lappend$a ?v0 ?v2) (lappend$h ?v1 ?v3)) (lappend$j (lzip$k ?v0 ?v1) (lzip$k ?v2 ?v3)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$) (?v2 A_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$a ?v0) (llength$ ?v1)) (= (lzip$f (lappend$ ?v0 ?v2) (lappend$a ?v1 ?v3)) (lappend$e (lzip$f ?v0 ?v1) (lzip$f ?v2 ?v3)))) ))
(assert (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$) (?v2 B_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$b ?v0) (llength$ ?v1)) (= (lzip$m (lappend$h ?v0 ?v2) (lappend$a ?v1 ?v3)) (lappend$b (lzip$m ?v0 ?v1) (lzip$m ?v2 ?v3)))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$ ?v0) (llength$ ?v1)) (= (lzip$j (lappend$a ?v0 ?v2) (lappend$a ?v1 ?v3)) (lappend$g (lzip$j ?v0 ?v1) (lzip$j ?v2 ?v3)))) ))
(assert (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$) (?v2 A_llist$) (?v3 B_b_prod_llist$)) (=> (= (llength$a ?v0) (llength$d ?v1)) (= (lzip$d (lappend$ ?v0 ?v2) (lappend$c ?v1 ?v3)) (lappend$k (lzip$d ?v0 ?v1) (lzip$d ?v2 ?v3)))) ))
(assert (forall ((?v0 B_a_b_prod_prod_llist$) (?v1 B_a_b_prod_prod_llist$)) (! (=> (not (lfinite$a ?v0)) (= (lappend$b ?v0 ?v1) ?v0)) :pattern ((lappend$b ?v0 ?v1)))))
(assert (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$)) (! (=> (not (lfinite$b ?v0)) (= (lappend$c ?v0 ?v1) ?v0)) :pattern ((lappend$c ?v0 ?v1)))))
(assert (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$)) (! (=> (not (lfinite$c ?v0)) (= (lappend$d ?v0 ?v1) ?v0)) :pattern ((lappend$d ?v0 ?v1)))))
(assert (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$)) (! (=> (not (lfinite$d ?v0)) (= (lappend$e ?v0 ?v1) ?v0)) :pattern ((lappend$e ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (! (=> (not (lfinite$e ?v0)) (= (lappend$f ?v0 ?v1) ?v0)) :pattern ((lappend$f ?v0 ?v1)))))
(assert (forall ((?v0 A_b_prod_a_b_prod_prod_llist$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (! (=> (not (lfinite$f ?v0)) (= (lappend$g ?v0 ?v1) ?v0)) :pattern ((lappend$g ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$g ?v0)) (= (lappend$ ?v0 ?v1) ?v0)) :pattern ((lappend$ ?v0 ?v1)))))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (=> (not (lfinite$h ?v0)) (= (lappend$h ?v0 ?v1) ?v0)) :pattern ((lappend$h ?v0 ?v1)))))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (! (=> (not (lfinite$ ?v0)) (= (lappend$a ?v0 ?v1) ?v0)) :pattern ((lappend$a ?v0 ?v1)))))
(assert (forall ((?v0 B_a_b_prod_prod_llist$) (?v1 B_a_b_prod_prod_llist$)) (fun_app$ (less_eq$ (fun_app$b (llcp$ ?v0) ?v1)) (fun_app$a (min$ (llength$c ?v0)) (llength$c ?v1))) ))
(assert (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$)) (fun_app$ (less_eq$ (fun_app$c (llcp$a ?v0) ?v1)) (fun_app$a (min$ (llength$d ?v0)) (llength$d ?v1))) ))
(assert (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$)) (fun_app$ (less_eq$ (fun_app$d (llcp$b ?v0) ?v1)) (fun_app$a (min$ (llength$e ?v0)) (llength$e ?v1))) ))
(assert (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$)) (fun_app$ (less_eq$ (fun_app$e (llcp$c ?v0) ?v1)) (fun_app$a (min$ (llength$f ?v0)) (llength$f ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (fun_app$ (less_eq$ (fun_app$f (llcp$d ?v0) ?v1)) (fun_app$a (min$ (llength$g ?v0)) (llength$g ?v1))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (fun_app$ (less_eq$ (fun_app$g (llcp$e ?v0) ?v1)) (fun_app$a (min$ (llength$ ?v0)) (llength$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (fun_app$ (less_eq$ (fun_app$h (llcp$f ?v0) ?v1)) (fun_app$a (min$ (llength$a ?v0)) (llength$a ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$)) (fun_app$ (less_eq$ (fun_app$i (llcp$g ?v0) ?v1)) (fun_app$a (min$ (llength$b ?v0)) (llength$b ?v1))) ))
(assert (forall ((?v0 A_b_prod_a_b_prod_prod_llist$) (?v1 A_b_prod_a_b_prod_prod_llist$) (?v2 A_b_prod_a_b_prod_prod_llist$) (?v3 A_b_prod_a_b_prod_prod_llist$)) (=> (= (llength$j ?v0) (llength$j ?v1)) (= (= (lappend$g ?v0 ?v2) (lappend$g ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$f ?v0) (= ?v2 ?v3))))) ))
(assert (forall ((?v0 B_a_b_prod_prod_llist$) (?v1 B_a_b_prod_prod_llist$) (?v2 B_a_b_prod_prod_llist$) (?v3 B_a_b_prod_prod_llist$)) (=> (= (llength$c ?v0) (llength$c ?v1)) (= (= (lappend$b ?v0 ?v2) (lappend$b ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$a ?v0) (= ?v2 ?v3))))) ))
(assert (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist$) (?v3 B_b_prod_llist$)) (=> (= (llength$d ?v0) (llength$d ?v1)) (= (= (lappend$c ?v0 ?v2) (lappend$c ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$b ?v0) (= ?v2 ?v3))))) ))
(assert (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist$) (?v3 B_a_prod_llist$)) (=> (= (llength$e ?v0) (llength$e ?v1)) (= (= (lappend$d ?v0 ?v2) (lappend$d ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$c ?v0) (= ?v2 ?v3))))) ))
(assert (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_llist$) (?v3 A_a_b_prod_prod_llist$)) (=> (= (llength$f ?v0) (llength$f ?v1)) (= (= (lappend$e ?v0 ?v2) (lappend$e ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$d ?v0) (= ?v2 ?v3))))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$) (?v3 A_a_prod_llist$)) (=> (= (llength$g ?v0) (llength$g ?v1)) (= (= (lappend$f ?v0 ?v2) (lappend$f ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$e ?v0) (= ?v2 ?v3))))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$ ?v0) (llength$ ?v1)) (= (= (lappend$a ?v0 ?v2) (lappend$a ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$ ?v0) (= ?v2 ?v3))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (= (llength$a ?v0) (llength$a ?v1)) (= (= (lappend$ ?v0 ?v2) (lappend$ ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$g ?v0) (= ?v2 ?v3))))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_llist$)) (=> (= (llength$b ?v0) (llength$b ?v1)) (= (= (lappend$h ?v0 ?v2) (lappend$h ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$h ?v0) (= ?v2 ?v3))))) ))
(assert (forall ((?v0 Enat$) (?v1 B_a_b_prod_prod_llist$)) (= (lappend$b (ltake$b ?v0 ?v1) (ldrop$m ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$) (?v1 B_b_prod_llist$)) (= (lappend$c (ltake$c ?v0 ?v1) (ldrop$e ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$) (?v1 B_a_prod_llist$)) (= (lappend$d (ltake$d ?v0 ?v1) (ldrop$d ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_b_prod_prod_llist$)) (= (lappend$e (ltake$e ?v0 ?v1) (ldrop$h ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$)) (= (lappend$f (ltake$f ?v0 ?v1) (ldrop$a ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (lappend$ (ltake$ ?v0 ?v1) (ldrop$ ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_llist$)) (= (lappend$a (ltake$g ?v0 ?v1) (ldrop$b ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$)) (= (lappend$h (ltake$a ?v0 ?v1) (ldrop$c ?v0 ?v1)) ?v1) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 Enat$) (?v2 A_b_prod_llist$)) (= (fun_app$g (llcp$e ?v0) (ltake$g ?v1 ?v2)) (fun_app$a (min$ ?v1) (fun_app$g (llcp$e ?v0) ?v2))) ))
(assert (forall ((?v0 B_b_prod_llist$) (?v1 Enat$) (?v2 B_b_prod_llist$)) (= (fun_app$c (llcp$a ?v0) (ltake$c ?v1 ?v2)) (fun_app$a (min$ ?v1) (fun_app$c (llcp$a ?v0) ?v2))) ))
(assert (forall ((?v0 B_a_prod_llist$) (?v1 Enat$) (?v2 B_a_prod_llist$)) (= (fun_app$d (llcp$b ?v0) (ltake$d ?v1 ?v2)) (fun_app$a (min$ ?v1) (fun_app$d (llcp$b ?v0) ?v2))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Enat$) (?v2 A_a_prod_llist$)) (= (fun_app$f (llcp$d ?v0) (ltake$f ?v1 ?v2)) (fun_app$a (min$ ?v1) (fun_app$f (llcp$d ?v0) ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat$) (?v2 A_llist$)) (= (fun_app$h (llcp$f ?v0) (ltake$ ?v1 ?v2)) (fun_app$a (min$ ?v1) (fun_app$h (llcp$f ?v0) ?v2))) ))
(assert (forall ((?v0 B_llist$) (?v1 Enat$) (?v2 B_llist$)) (= (fun_app$i (llcp$g ?v0) (ltake$a ?v1 ?v2)) (fun_app$a (min$ ?v1) (fun_app$i (llcp$g ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (fun_app$g (llcp$e (ltake$g ?v0 ?v1)) ?v2) (fun_app$a (min$ ?v0) (fun_app$g (llcp$e ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist$)) (= (fun_app$c (llcp$a (ltake$c ?v0 ?v1)) ?v2) (fun_app$a (min$ ?v0) (fun_app$c (llcp$a ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist$)) (= (fun_app$d (llcp$b (ltake$d ?v0 ?v1)) ?v2) (fun_app$a (min$ ?v0) (fun_app$d (llcp$b ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (= (fun_app$f (llcp$d (ltake$f ?v0 ?v1)) ?v2) (fun_app$a (min$ ?v0) (fun_app$f (llcp$d ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$h (llcp$f (ltake$ ?v0 ?v1)) ?v2) (fun_app$a (min$ ?v0) (fun_app$h (llcp$f ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_llist$)) (= (fun_app$i (llcp$g (ltake$a ?v0 ?v1)) ?v2) (fun_app$a (min$ ?v0) (fun_app$i (llcp$g ?v1) ?v2))) ))
(assert (forall ((?v0 A_b_prod_a_b_prod_prod_llist$)) (! (=> (not (lfinite$f ?v0)) (= (llength$j ?v0) infinity$)) :pattern ((llength$j ?v0)))))
(assert (forall ((?v0 B_a_b_prod_prod_llist$)) (! (=> (not (lfinite$a ?v0)) (= (llength$c ?v0) infinity$)) :pattern ((llength$c ?v0)))))
(assert (forall ((?v0 B_b_prod_llist$)) (! (=> (not (lfinite$b ?v0)) (= (llength$d ?v0) infinity$)) :pattern ((llength$d ?v0)))))
(assert (forall ((?v0 B_a_prod_llist$)) (! (=> (not (lfinite$c ?v0)) (= (llength$e ?v0) infinity$)) :pattern ((llength$e ?v0)))))
(assert (forall ((?v0 A_a_b_prod_prod_llist$)) (! (=> (not (lfinite$d ?v0)) (= (llength$f ?v0) infinity$)) :pattern ((llength$f ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (=> (not (lfinite$e ?v0)) (= (llength$g ?v0) infinity$)) :pattern ((llength$g ?v0)))))
(assert (forall ((?v0 A_b_prod_llist$)) (! (=> (not (lfinite$ ?v0)) (= (llength$ ?v0) infinity$)) :pattern ((llength$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (=> (not (lfinite$g ?v0)) (= (llength$a ?v0) infinity$)) :pattern ((llength$a ?v0)))))
(assert (forall ((?v0 B_llist$)) (! (=> (not (lfinite$h ?v0)) (= (llength$b ?v0) infinity$)) :pattern ((llength$b ?v0)))))
(assert (forall ((?v0 A_b_prod_a_b_prod_prod_llist$)) (= (= (llength$j ?v0) infinity$) (not (lfinite$f ?v0))) ))
(assert (forall ((?v0 B_a_b_prod_prod_llist$)) (= (= (llength$c ?v0) infinity$) (not (lfinite$a ?v0))) ))
(assert (forall ((?v0 B_b_prod_llist$)) (= (= (llength$d ?v0) infinity$) (not (lfinite$b ?v0))) ))
(assert (forall ((?v0 B_a_prod_llist$)) (= (= (llength$e ?v0) infinity$) (not (lfinite$c ?v0))) ))
(assert (forall ((?v0 A_a_b_prod_prod_llist$)) (= (= (llength$f ?v0) infinity$) (not (lfinite$d ?v0))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (= (= (llength$g ?v0) infinity$) (not (lfinite$e ?v0))) ))
(assert (forall ((?v0 A_b_prod_llist$)) (= (= (llength$ ?v0) infinity$) (not (lfinite$ ?v0))) ))
(assert (forall ((?v0 A_llist$)) (= (= (llength$a ?v0) infinity$) (not (lfinite$g ?v0))) ))
(assert (forall ((?v0 B_llist$)) (= (= (llength$b ?v0) infinity$) (not (lfinite$h ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 B_a_b_prod_prod_llist$) (?v2 B_a_b_prod_prod_llist$)) (=> (fun_app$ (less_eq$ ?v0) (llength$c ?v1)) (= (ltake$b ?v0 (lappend$b ?v1 ?v2)) (ltake$b ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist$)) (=> (fun_app$ (less_eq$ ?v0) (llength$d ?v1)) (= (ltake$c ?v0 (lappend$c ?v1 ?v2)) (ltake$c ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist$)) (=> (fun_app$ (less_eq$ ?v0) (llength$e ?v1)) (= (ltake$d ?v0 (lappend$d ?v1 ?v2)) (ltake$d ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_llist$)) (=> (fun_app$ (less_eq$ ?v0) (llength$f ?v1)) (= (ltake$e ?v0 (lappend$e ?v1 ?v2)) (ltake$e ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (=> (fun_app$ (less_eq$ ?v0) (llength$g ?v1)) (= (ltake$f ?v0 (lappend$f ?v1 ?v2)) (ltake$f ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (=> (fun_app$ (less_eq$ ?v0) (llength$ ?v1)) (= (ltake$g ?v0 (lappend$a ?v1 ?v2)) (ltake$g ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$ (less_eq$ ?v0) (llength$a ?v1)) (= (ltake$ ?v0 (lappend$ ?v1 ?v2)) (ltake$ ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_llist$)) (=> (fun_app$ (less_eq$ ?v0) (llength$b ?v1)) (= (ltake$a ?v0 (lappend$h ?v1 ?v2)) (ltake$a ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$) (?v3 Enat$)) (=> (and (= (ltake$g ?v0 ?v1) (ltake$g ?v0 ?v2)) (fun_app$ (less_eq$ ?v3) ?v0)) (= (ltake$g ?v3 ?v1) (ltake$g ?v3 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist$) (?v3 Enat$)) (=> (and (= (ltake$c ?v0 ?v1) (ltake$c ?v0 ?v2)) (fun_app$ (less_eq$ ?v3) ?v0)) (= (ltake$c ?v3 ?v1) (ltake$c ?v3 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist$) (?v3 Enat$)) (=> (and (= (ltake$d ?v0 ?v1) (ltake$d ?v0 ?v2)) (fun_app$ (less_eq$ ?v3) ?v0)) (= (ltake$d ?v3 ?v1) (ltake$d ?v3 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$) (?v3 Enat$)) (=> (and (= (ltake$f ?v0 ?v1) (ltake$f ?v0 ?v2)) (fun_app$ (less_eq$ ?v3) ?v0)) (= (ltake$f ?v3 ?v1) (ltake$f ?v3 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$) (?v3 Enat$)) (=> (and (= (ltake$ ?v0 ?v1) (ltake$ ?v0 ?v2)) (fun_app$ (less_eq$ ?v3) ?v0)) (= (ltake$ ?v3 ?v1) (ltake$ ?v3 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_llist$) (?v3 Enat$)) (=> (and (= (ltake$a ?v0 ?v1) (ltake$a ?v0 ?v2)) (fun_app$ (less_eq$ ?v3) ?v0)) (= (ltake$a ?v3 ?v1) (ltake$a ?v3 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (= (ltake$f ?v0 (lzip$a ?v1 ?v2)) (lzip$a (ltake$ ?v0 ?v1) (ltake$ ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 B_llist$)) (= (ltake$g ?v0 (lzip$ ?v1 ?v2)) (lzip$ (ltake$ ?v0 ?v1) (ltake$a ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 A_llist$)) (= (ltake$d ?v0 (lzip$b ?v1 ?v2)) (lzip$b (ltake$a ?v0 ?v1) (ltake$ ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_llist$)) (= (ltake$c ?v0 (lzip$c ?v1 ?v2)) (lzip$c (ltake$a ?v0 ?v1) (ltake$a ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_b_prod_llist$)) (= (ltake$e ?v0 (lzip$f ?v1 ?v2)) (lzip$f (ltake$ ?v0 ?v1) (ltake$g ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 B_b_prod_llist$)) (= (ltake$h ?v0 (lzip$d ?v1 ?v2)) (lzip$d (ltake$ ?v0 ?v1) (ltake$c ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 B_a_prod_llist$)) (= (ltake$i ?v0 (lzip$e ?v1 ?v2)) (lzip$e (ltake$ ?v0 ?v1) (ltake$d ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_a_prod_llist$)) (= (ltake$j ?v0 (lzip$g ?v1 ?v2)) (lzip$g (ltake$ ?v0 ?v1) (ltake$f ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 A_b_prod_llist$)) (= (ltake$b ?v0 (lzip$m ?v1 ?v2)) (lzip$m (ltake$a ?v0 ?v1) (ltake$g ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_b_prod_llist$)) (= (ltake$k ?v0 (lzip$h ?v1 ?v2)) (lzip$h (ltake$a ?v0 ?v1) (ltake$c ?v0 ?v2))) ))
(assert (= (lappend$a us$ vs$) (lappend$a (lzip$ (ltake$ (llength$ us$) xs$) (ltake$a (llength$ us$) ys$)) (lzip$ (ldrop$ (llength$ us$) xs$) (ldrop$c (llength$ us$) ys$)))))
(assert (=> (lfinite$ us$) (= vs$ (lzip$ (ldrop$ (llength$ us$) xs$) (ldrop$c (llength$ us$) ys$)))))
(assert (forall ((?v0 Enat$)) (= (fun_app$a (min$ ?v0) infinity$) ?v0) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$a (min$ infinity$) ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$ (less_eq$ infinity$) ?v0) (= ?v0 infinity$)) :pattern ((fun_app$ (less_eq$ infinity$) ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$ (less_eq$ ?v0) infinity$) true) :pattern ((less_eq$ ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$ (less_eq$ ?v0) (fun_app$a (min$ ?v1) ?v2)) (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v0) ?v2))) ))
(assert (= (lappend$a us$ vs$) (lzip$ (lappend$ (ltake$ (llength$ us$) xs$) (ldrop$ (llength$ us$) xs$)) (lappend$h (ltake$a (llength$ us$) ys$) (ldrop$c (llength$ us$) ys$)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$a (min$ (fun_app$a (min$ ?v0) ?v1)) ?v1) (fun_app$a (min$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$a (min$ ?v0) (fun_app$a (min$ ?v0) ?v1)) (fun_app$a (min$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$a (min$ ?v0) ?v0) ?v0) ))
(assert (= ys$ (lappend$h (ltake$a (llength$ us$) ys$) (ldrop$c (llength$ us$) ys$))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$a (min$ ?v0) ?v1) (fun_app$a (min$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$a (min$ ?v0) (fun_app$a (min$ ?v1) ?v2)) (fun_app$a (min$ ?v1) (fun_app$a (min$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$a (min$ (fun_app$a (min$ ?v0) ?v1)) ?v2) (fun_app$a (min$ ?v0) (fun_app$a (min$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$ (less_eq$ (fun_app$a (min$ ?v0) ?v1)) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$ (less_eq$ (fun_app$a (min$ ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ (fun_app$a (min$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ (fun_app$a (min$ ?v2) ?v0)) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (= (fun_app$a (min$ ?v0) ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (= (fun_app$a (min$ ?v1) ?v0) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v0) ?v2)) (fun_app$ (less_eq$ ?v0) (fun_app$a (min$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v2) ?v3)) (fun_app$ (less_eq$ (fun_app$a (min$ ?v0) ?v2)) (fun_app$a (min$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (=> (= ?v0 (fun_app$a (min$ ?v0) ?v1)) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) (fun_app$a (min$ ?v1) ?v2)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v0) ?v2)) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 (fun_app$a (min$ ?v0) ?v1)) (fun_app$ (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$ (less_eq$ ?v0) ?v1) (= ?v0 (fun_app$a (min$ ?v0) ?v1))) :pattern ((fun_app$ (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$ (less_eq$ ?v0) ?v1) (= (fun_app$a (min$ ?v0) ?v1) ?v0)) :pattern ((fun_app$ (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$ (less_eq$ ?v0) ?v1) (= (fun_app$a (min$ ?v1) ?v0) ?v0)) :pattern ((fun_app$ (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$ (less_eq$ (fun_app$a (min$ ?v0) ?v1)) ?v2) (or (fun_app$ (less_eq$ ?v0) ?v2) (fun_app$ (less_eq$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$)) (fun_app$ (less_eq$ ?v0) infinity$) ))
(assert (forall ((?v0 Enat$)) (fun_app$ (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (= (fun_app$a (min$ ?v0) ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (= (fun_app$a (min$ ?v1) ?v0) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$a (min$ ?v0) ?v1) (ite (fun_app$ (less_eq$ ?v0) ?v1) ?v0 ?v1)) ))
(assert (forall ((?v0 B_a_b_prod_prod_llist$) (?v1 Enat$) (?v2 B_a_b_prod_prod_llist$)) (=> (fun_app$ (less_eq$ (llength$c ?v0)) ?v1) (= (ltake$b ?v1 (lappend$b ?v0 ?v2)) (lappend$b ?v0 (ltake$b (fun_app$a (minus$ ?v1) (llength$c ?v0)) ?v2)))) ))
(assert (forall ((?v0 B_b_prod_llist$) (?v1 Enat$) (?v2 B_b_prod_llist$)) (=> (fun_app$ (less_eq$ (llength$d ?v0)) ?v1) (= (ltake$c ?v1 (lappend$c ?v0 ?v2)) (lappend$c ?v0 (ltake$c (fun_app$a (minus$ ?v1) (llength$d ?v0)) ?v2)))) ))
(assert (forall ((?v0 B_a_prod_llist$) (?v1 Enat$) (?v2 B_a_prod_llist$)) (=> (fun_app$ (less_eq$ (llength$e ?v0)) ?v1) (= (ltake$d ?v1 (lappend$d ?v0 ?v2)) (lappend$d ?v0 (ltake$d (fun_app$a (minus$ ?v1) (llength$e ?v0)) ?v2)))) ))
(assert (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 Enat$) (?v2 A_a_b_prod_prod_llist$)) (=> (fun_app$ (less_eq$ (llength$f ?v0)) ?v1) (= (ltake$e ?v1 (lappend$e ?v0 ?v2)) (lappend$e ?v0 (ltake$e (fun_app$a (minus$ ?v1) (llength$f ?v0)) ?v2)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Enat$) (?v2 A_a_prod_llist$)) (=> (fun_app$ (less_eq$ (llength$g ?v0)) ?v1) (= (ltake$f ?v1 (lappend$f ?v0 ?v2)) (lappend$f ?v0 (ltake$f (fun_app$a (minus$ ?v1) (llength$g ?v0)) ?v2)))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 Enat$) (?v2 A_b_prod_llist$)) (=> (fun_app$ (less_eq$ (llength$ ?v0)) ?v1) (= (ltake$g ?v1 (lappend$a ?v0 ?v2)) (lappend$a ?v0 (ltake$g (fun_app$a (minus$ ?v1) (llength$ ?v0)) ?v2)))) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat$) (?v2 A_llist$)) (=> (fun_app$ (less_eq$ (llength$a ?v0)) ?v1) (= (ltake$ ?v1 (lappend$ ?v0 ?v2)) (lappend$ ?v0 (ltake$ (fun_app$a (minus$ ?v1) (llength$a ?v0)) ?v2)))) ))
(assert (forall ((?v0 B_llist$) (?v1 Enat$) (?v2 B_llist$)) (=> (fun_app$ (less_eq$ (llength$b ?v0)) ?v1) (= (ltake$a ?v1 (lappend$h ?v0 ?v2)) (lappend$h ?v0 (ltake$a (fun_app$a (minus$ ?v1) (llength$b ?v0)) ?v2)))) ))
(assert (forall ((?v0 B_a_b_prod_prod_llist$) (?v1 B_a_b_prod_prod_llist$) (?v2 B_a_b_prod_prod_llist$)) (= (fun_app$b (llcp$ (lappend$b ?v0 ?v1)) (lappend$b ?v0 ?v2)) (fun_app$a (plus$ (llength$c ?v0)) (fun_app$b (llcp$ ?v1) ?v2))) ))
(assert (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist$)) (= (fun_app$c (llcp$a (lappend$c ?v0 ?v1)) (lappend$c ?v0 ?v2)) (fun_app$a (plus$ (llength$d ?v0)) (fun_app$c (llcp$a ?v1) ?v2))) ))
(assert (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist$)) (= (fun_app$d (llcp$b (lappend$d ?v0 ?v1)) (lappend$d ?v0 ?v2)) (fun_app$a (plus$ (llength$e ?v0)) (fun_app$d (llcp$b ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_llist$)) (= (fun_app$e (llcp$c (lappend$e ?v0 ?v1)) (lappend$e ?v0 ?v2)) (fun_app$a (plus$ (llength$f ?v0)) (fun_app$e (llcp$c ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (= (fun_app$f (llcp$d (lappend$f ?v0 ?v1)) (lappend$f ?v0 ?v2)) (fun_app$a (plus$ (llength$g ?v0)) (fun_app$f (llcp$d ?v1) ?v2))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (fun_app$g (llcp$e (lappend$a ?v0 ?v1)) (lappend$a ?v0 ?v2)) (fun_app$a (plus$ (llength$ ?v0)) (fun_app$g (llcp$e ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$h (llcp$f (lappend$ ?v0 ?v1)) (lappend$ ?v0 ?v2)) (fun_app$a (plus$ (llength$a ?v0)) (fun_app$h (llcp$f ?v1) ?v2))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (= (fun_app$i (llcp$g (lappend$h ?v0 ?v1)) (lappend$h ?v0 ?v2)) (fun_app$a (plus$ (llength$b ?v0)) (fun_app$i (llcp$g ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$a (plus$ ?v0) infinity$) infinity$) :pattern ((plus$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$a (plus$ infinity$) ?v0) infinity$) :pattern ((fun_app$a (plus$ infinity$) ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_b_prod_llist$)) (= (ldrop$e ?v0 (ldrop$e ?v1 ?v2)) (ldrop$e (fun_app$a (plus$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_a_prod_llist$)) (= (ldrop$d ?v0 (ldrop$d ?v1 ?v2)) (ldrop$d (fun_app$a (plus$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_b_prod_llist$)) (= (ldrop$b ?v0 (ldrop$b ?v1 ?v2)) (ldrop$b (fun_app$a (plus$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_a_prod_llist$)) (= (ldrop$a ?v0 (ldrop$a ?v1 ?v2)) (ldrop$a (fun_app$a (plus$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (ldrop$ ?v0 (ldrop$ ?v1 ?v2)) (ldrop$ (fun_app$a (plus$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_llist$)) (= (ldrop$c ?v0 (ldrop$c ?v1 ?v2)) (ldrop$c (fun_app$a (plus$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$a (minus$ infinity$) ?v0) infinity$) :pattern ((fun_app$a (minus$ infinity$) ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (llength$g (lappend$f ?v0 ?v1)) (fun_app$a (plus$ (llength$g ?v0)) (llength$g ?v1))) ))
(assert (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (llength$ (lappend$a ?v0 ?v1)) (fun_app$a (plus$ (llength$ ?v0)) (llength$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (llength$a (lappend$ ?v0 ?v1)) (fun_app$a (plus$ (llength$a ?v0)) (llength$a ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (llength$b (lappend$h ?v0 ?v1)) (fun_app$a (plus$ (llength$b ?v0)) (llength$b ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (= (fun_app$a (plus$ ?v0) ?v1) (fun_app$a (plus$ ?v0) ?v2)) (or (= ?v0 infinity$) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$ (less_eq$ (fun_app$a (plus$ ?v0) ?v1)) (fun_app$a (plus$ ?v0) ?v2)) (or (= ?v0 infinity$) (fun_app$ (less_eq$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (ldrop$ ?v0 (ltake$ ?v1 ?v2)) (ltake$ (fun_app$a (minus$ ?v1) ?v0) (ldrop$ ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_llist$)) (= (ldrop$c ?v0 (ltake$a ?v1 ?v2)) (ltake$a (fun_app$a (minus$ ?v1) ?v0) (ldrop$c ?v0 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (ltake$ ?v0 (ldrop$ ?v1 ?v2)) (ldrop$ ?v1 (ltake$ (fun_app$a (plus$ ?v0) ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_llist$)) (= (ltake$a ?v0 (ldrop$c ?v1 ?v2)) (ldrop$c ?v1 (ltake$a (fun_app$a (plus$ ?v0) ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= ?v0 ?v1) (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (=> (fun_app$ (less_eq$ ?v0) ?v1) false) (=> (fun_app$ (less_eq$ ?v1) ?v0) false)) false) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$ (less_eq$ ?v3) ?v4) (fun_app$ (fun_app$j ?v0 ?v3) ?v4)) ) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$ (fun_app$j ?v0 ?v4) ?v3) (fun_app$ (fun_app$j ?v0 ?v3) ?v4)) )) (fun_app$ (fun_app$j ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$a ?v1 ?v2)) (and (fun_app$ (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$a ?v1 ?v4)) (fun_app$a ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$a ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 ?v1) (fun_app$ (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (= (fun_app$a ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$a ?v2 ?v4)) (fun_app$a ?v2 ?v5))) ))) (fun_app$ (less_eq$ (fun_app$a ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (fun_app$ (less_eq$ (fun_app$a ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$a ?v2 ?v4)) (fun_app$a ?v2 ?v5))) ))) (fun_app$ (less_eq$ (fun_app$a ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) (fun_app$a ?v1 ?v2)) (and (fun_app$ (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$a ?v1 ?v4)) (fun_app$a ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$a ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v2) ?v0)) (fun_app$ (less_eq$ ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (=> (fun_app$ (less_eq$ ?v0) ?v1) (= (fun_app$ (less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$ (less_eq$ ?v1) ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (or (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$)) (fun_app$ (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (ltake$g ?v0 (lappend$a ?v1 ?v2)) (lappend$a (ltake$g ?v0 ?v1) (ltake$g (fun_app$a (minus$ ?v0) (llength$ ?v1)) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (= (ltake$ ?v0 (lappend$ ?v1 ?v2)) (lappend$ (ltake$ ?v0 ?v1) (ltake$ (fun_app$a (minus$ ?v0) (llength$a ?v1)) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_llist$)) (= (ltake$a ?v0 (lappend$h ?v1 ?v2)) (lappend$h (ltake$a ?v0 ?v1) (ltake$a (fun_app$a (minus$ ?v0) (llength$b ?v1)) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (ltake$ (fun_app$a (plus$ ?v0) ?v1) ?v2) (lappend$ (ltake$ ?v0 ?v2) (ltake$ ?v1 (ldrop$ ?v0 ?v2)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_b_prod_llist$)) (= (ltake$g (fun_app$a (plus$ ?v0) ?v1) ?v2) (lappend$a (ltake$g ?v0 ?v2) (ltake$g ?v1 (ldrop$b ?v0 ?v2)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_llist$)) (= (ltake$a (fun_app$a (plus$ ?v0) ?v1) ?v2) (lappend$h (ltake$a ?v0 ?v2) (ltake$a ?v1 (ldrop$c ?v0 ?v2)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (fun_app$a (plus$ ?v0) ?v2) (fun_app$a (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$a (plus$ ?v0) ?v1) (fun_app$a (plus$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$a (plus$ ?v0) (fun_app$a (plus$ ?v1) ?v2)) (fun_app$a (plus$ ?v1) (fun_app$a (plus$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$a (plus$ (fun_app$a (plus$ ?v0) ?v1)) ?v2) (fun_app$a (plus$ ?v0) (fun_app$a (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$a (plus$ (fun_app$a (plus$ ?v0) ?v1)) ?v2) (fun_app$a (plus$ ?v0) (fun_app$a (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$ (less_eq$ ?v2) ?v3)) (fun_app$ (less_eq$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (= ?v2 ?v3)) (fun_app$ (less_eq$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v2) ?v3)) (fun_app$ (less_eq$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v2) ?v3)) (fun_app$ (less_eq$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ (fun_app$a (plus$ ?v2) ?v0)) (fun_app$a (plus$ ?v2) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (not (= ?v0 infinity$)) (= (fun_app$a (minus$ (fun_app$a (plus$ ?v0) ?v1)) ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v0) ?v2)) (= (= (fun_app$a (minus$ ?v1) ?v0) (fun_app$a (minus$ ?v2) ?v0)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$ (less_eq$ ?v0) (fun_app$a (plus$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$ (less_eq$ ?v0) (fun_app$a (plus$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ (fun_app$a (minus$ ?v0) ?v2)) (fun_app$a (minus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_llist$)) (= (llength$ (ldrop$b ?v0 ?v1)) (ite (= ?v0 infinity$) zero$ (fun_app$a (minus$ (llength$ ?v1)) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (llength$a (ldrop$ ?v0 ?v1)) (ite (= ?v0 infinity$) zero$ (fun_app$a (minus$ (llength$a ?v1)) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$)) (= (llength$b (ldrop$c ?v0 ?v1)) (ite (= ?v0 infinity$) zero$ (fun_app$a (minus$ (llength$b ?v1)) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (ldrop$b ?v0 (lappend$a ?v1 ?v2)) (ite (fun_app$ (less$ ?v0) (llength$ ?v1)) (lappend$a (ldrop$b ?v0 ?v1) ?v2) (ldrop$b (fun_app$a (minus$ ?v0) (llength$ ?v1)) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (= (ldrop$ ?v0 (lappend$ ?v1 ?v2)) (ite (fun_app$ (less$ ?v0) (llength$a ?v1)) (lappend$ (ldrop$ ?v0 ?v1) ?v2) (ldrop$ (fun_app$a (minus$ ?v0) (llength$a ?v1)) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_llist$)) (= (ldrop$c ?v0 (lappend$h ?v1 ?v2)) (ite (fun_app$ (less$ ?v0) (llength$b ?v1)) (lappend$h (ldrop$c ?v0 ?v1) ?v2) (ldrop$c (fun_app$a (minus$ ?v0) (llength$b ?v1)) ?v2))) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$a (plus$ zero$) ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$a (plus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$ (less$ ?v0) (fun_app$a (min$ ?v1) ?v2)) (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$ (less_eq$ ?v0) zero$) (= ?v0 zero$)) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$ (less$ zero$) ?v0) (not (= ?v0 zero$))) ))
(assert (forall ((?v0 A_llist$)) (= (ldrop$ zero$ ?v0) ?v0) ))
(assert (forall ((?v0 B_llist$)) (= (ldrop$c zero$ ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$ (less$ ?v0) infinity$) (not (= ?v0 infinity$))) :pattern ((less$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$ (less$ infinity$) ?v0) false) :pattern ((fun_app$ (less$ infinity$) ?v0)))))
(assert (forall ((?v0 Enat$)) (= (fun_app$a (minus$ zero$) ?v0) zero$) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$a (minus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$a (min$ ?v0) zero$) zero$) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$a (min$ zero$) ?v0) zero$) ))
(assert (forall ((?v0 Enat$)) (! (=> (not (= ?v0 infinity$)) (= (fun_app$a (minus$ ?v0) ?v0) zero$)) :pattern ((minus$ ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (lfinite$g (ltake$ ?v0 ?v1)) (or (lfinite$g ?v1) (fun_app$ (less$ ?v0) infinity$))) ))
(assert (forall ((?v0 Enat$) (?v1 B_llist$)) (= (lfinite$h (ltake$a ?v0 ?v1)) (or (lfinite$h ?v1) (fun_app$ (less$ ?v0) infinity$))) ))
(assert (forall ((?v0 Enat$) (?v1 A_b_prod_llist$)) (= (lfinite$ (ltake$g ?v0 ?v1)) (or (lfinite$ ?v1) (fun_app$ (less$ ?v0) infinity$))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (fun_app$a (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (fun_app$a (min$ ?v0) ?v1) zero$) (or (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (= ?v0 ?v1)) (or (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v1) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (fun_app$ (less$ ?v0) ?v1)) (or (fun_app$ (less$ ?v1) ?v0) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (=> (fun_app$ (less$ ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$ (less$ ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (forall ((?v2 Enat$)) (=> (forall ((?v3 Enat$)) (=> (fun_app$ (less$ ?v3) ?v2) (fun_app$ ?v0 ?v3)) ) (fun_app$ ?v0 ?v2)) ) (fun_app$ ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$a ?v1 ?v2)) (and (fun_app$ (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (less$ ?v4) ?v5) (fun_app$ (less$ (fun_app$a ?v1 ?v4)) (fun_app$a ?v1 ?v5))) ))) (fun_app$ (less$ ?v0) (fun_app$a ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$ (less$ ?v1) ?v2)) (fun_app$ (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (=> (not false) (fun_app$ (less$ ?v1) ?v0))) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (and (= (fun_app$a ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (less$ ?v4) ?v5) (fun_app$ (less$ (fun_app$a ?v2 ?v4)) (fun_app$a ?v2 ?v5))) ))) (fun_app$ (less$ (fun_app$a ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (and (fun_app$ (less$ (fun_app$a ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (less$ ?v4) ?v5) (fun_app$ (less$ (fun_app$a ?v2 ?v4)) (fun_app$a ?v2 ?v5))) ))) (fun_app$ (less$ (fun_app$a ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$ (less$ ?v0) (fun_app$a ?v1 ?v2)) (and (fun_app$ (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (less$ ?v4) ?v5) (fun_app$ (less$ (fun_app$a ?v1 ?v4)) (fun_app$a ?v1 ?v5))) ))) (fun_app$ (less$ ?v0) (fun_app$a ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v2) ?v0)) (fun_app$ (less$ ?v2) ?v1)) ))
(check-sat)
(exit)

