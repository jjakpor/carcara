(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Bool_a_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort Bool_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_a_llist_fun$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort Nat_llist_set$ 0)
(declare-sort A_llist_nat_fun$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort Bool_a_llist_fun$ 0)
(declare-sort Nat_nat_prod_set$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_a_prod_llist_set$ 0)
(declare-sort Nat_llist_bool_fun$ 0)
(declare-sort A_a_llist_a_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Nat_nat_prod_bool_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_a_prod_llist_bool_fun$ 0)
(declare-sort Nat_llist_nat_llist_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_fun$ 0)
(declare-sort Nat_nat_llist_bool_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0)
(declare-sort Nat_nat_prod_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort Nat_bool_fun_nat_nat_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_set_fun$ 0)
(declare-sort Nat_bool_fun_nat_bool_fun_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_set_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_fun$ 0)
(declare-sort Nat_a_llist_fun_nat_nat_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_a_llist_fun_fun$ 0)
(declare-sort Nat_nat_llist_nat_llist_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_nat_bool_fun_fun$ 0)
(declare-sort Nat_bool_fun_nat_a_llist_fun_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_nat_a_llist_fun_fun$ 0)
(declare-sort A_a_prod_a_a_prod_llist_bool_fun_fun$ 0)
(declare-sort A_a_llist_a_fun_fun_a_llist_a_fun_fun$ 0)
(declare-sort A_llist_a_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_llist_a_llist_fun_fun$ 0)
(declare-sort Nat_nat_prod_llist_nat_nat_prod_set_fun$ 0)
(declare-sort Nat_nat_prod_llist_nat_nat_prod_llist_fun$ 0)
(declare-sort A_a_llist_a_fun_fun_a_a_llist_a_fun_fun_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_llist_a_llist_llist_fun_fun$ 0)
(declare-sort A_a_llist_a_fun_fun_a_a_llist_bool_fun_fun_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun_a_a_llist_a_fun_fun_fun$ 0)
(declare-sort A_a_prod_a_a_prod_llist_a_a_prod_llist_fun_fun$ 0)
(declare-sort A_a_llist_a_fun_fun_a_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun_a_a_llist_a_fun_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun_a_a_llist_bool_fun_fun_fun$ 0)
(declare-sort Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun_a_a_llist_bool_fun_fun_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun_a_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun_a_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_llist_nat_nat_prod_llist_fun_fun$ 0)
(declare-sort A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-fun lNil$a () A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$) A_llist$)
(declare-fun ltl$a (A_llist_llist$) A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$) A_llist_llist$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$ (A_a_prod$) A$)
(declare-fun snd$ (A_a_prod$) A$)
(declare-fun pair$ (A$ A$) A_a_prod$)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$b () A_a_prod_llist$)
(declare-fun lhd$b (A_a_prod_llist$) A_a_prod$)
(declare-fun ltl$b (A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lCons$b (A_a_prod$ A_a_prod_llist$) A_a_prod_llist$)
(declare-sort Nat_nat_prod$ 0)
(declare-fun fst$a (Nat_nat_prod$) Nat$)
(declare-fun snd$a (Nat_nat_prod$) Nat$)
(declare-fun pair$a (Nat$ Nat$) Nat_nat_prod$)
(declare-sort Nat_nat_prod_llist$ 0)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$c () Nat_nat_prod_llist$)
(declare-fun lhd$c (Nat_nat_prod_llist$) Nat_nat_prod$)
(declare-fun ltl$c (Nat_nat_prod_llist$) Nat_nat_prod_llist$)
(declare-fun lCons$c (Nat_nat_prod$ Nat_nat_prod_llist$) Nat_nat_prod_llist$)
(declare-fun lNil$d () Nat_llist$)
(declare-fun lhd$d (Nat_llist$) Nat$)
(declare-fun ltl$d (Nat_llist$) Nat_llist$)
(declare-fun lCons$d (Nat$ Nat_llist$) Nat_llist$)
(declare-sort A_nat_prod$ 0)
(declare-fun fst$b (A_nat_prod$) A$)
(declare-fun snd$b (A_nat_prod$) Nat$)
(declare-fun pair$b (A$ Nat$) A_nat_prod$)
(declare-sort A_nat_prod_llist$ 0)
(declare-fun lNil$e () A_nat_prod_llist$)
(declare-fun lhd$e (A_nat_prod_llist$) A_nat_prod$)
(declare-fun ltl$e (A_nat_prod_llist$) A_nat_prod_llist$)
(declare-fun lCons$e (A_nat_prod$ A_nat_prod_llist$) A_nat_prod_llist$)
(declare-sort Nat_a_prod$ 0)
(declare-fun fst$c (Nat_a_prod$) Nat$)
(declare-fun snd$c (Nat_a_prod$) A$)
(declare-fun pair$c (Nat$ A$) Nat_a_prod$)
(declare-sort Nat_a_prod_llist$ 0)
(declare-fun lNil$f () Nat_a_prod_llist$)
(declare-fun lhd$f (Nat_a_prod_llist$) Nat_a_prod$)
(declare-fun ltl$f (Nat_a_prod_llist$) Nat_a_prod_llist$)
(declare-fun lCons$f (Nat_a_prod$ Nat_a_prod_llist$) Nat_a_prod_llist$)
(declare-sort A_a_llist_prod$ 0)
(declare-fun fst$d (A_a_llist_prod$) A$)
(declare-fun snd$d (A_a_llist_prod$) A_llist$)
(declare-fun pair$d (A$ A_llist$) A_a_llist_prod$)
(declare-sort A_a_llist_prod_llist$ 0)
(declare-fun lNil$g () A_a_llist_prod_llist$)
(declare-fun lhd$g (A_a_llist_prod_llist$) A_a_llist_prod$)
(declare-fun ltl$g (A_a_llist_prod_llist$) A_a_llist_prod_llist$)
(declare-fun lCons$g (A_a_llist_prod$ A_a_llist_prod_llist$) A_a_llist_prod_llist$)
(declare-sort A_llist_a_prod$ 0)
(declare-fun fst$e (A_llist_a_prod$) A_llist$)
(declare-fun snd$e (A_llist_a_prod$) A$)
(declare-fun pair$e (A_llist$ A$) A_llist_a_prod$)
(declare-sort A_llist_a_prod_llist$ 0)
(declare-fun lNil$h () A_llist_a_prod_llist$)
(declare-fun lhd$h (A_llist_a_prod_llist$) A_llist_a_prod$)
(declare-fun ltl$h (A_llist_a_prod_llist$) A_llist_a_prod_llist$)
(declare-fun lCons$h (A_llist_a_prod$ A_llist_a_prod_llist$) A_llist_a_prod_llist$)
(declare-sort A_llist_nat_prod$ 0)
(declare-fun fst$f (A_llist_nat_prod$) A_llist$)
(declare-fun snd$f (A_llist_nat_prod$) Nat$)
(declare-fun pair$f (A_llist$ Nat$) A_llist_nat_prod$)
(declare-sort A_llist_nat_prod_llist$ 0)
(declare-fun lNil$i () A_llist_nat_prod_llist$)
(declare-fun lhd$i (A_llist_nat_prod_llist$) A_llist_nat_prod$)
(declare-fun ltl$i (A_llist_nat_prod_llist$) A_llist_nat_prod_llist$)
(declare-fun lCons$i (A_llist_nat_prod$ A_llist_nat_prod_llist$) A_llist_nat_prod_llist$)
(declare-sort Nat_a_llist_prod$ 0)
(declare-fun fst$g (Nat_a_llist_prod$) Nat$)
(declare-fun snd$g (Nat_a_llist_prod$) A_llist$)
(declare-fun pair$g (Nat$ A_llist$) Nat_a_llist_prod$)
(declare-sort Nat_a_llist_prod_llist$ 0)
(declare-fun lNil$j () Nat_a_llist_prod_llist$)
(declare-fun lhd$j (Nat_a_llist_prod_llist$) Nat_a_llist_prod$)
(declare-fun ltl$j (Nat_a_llist_prod_llist$) Nat_a_llist_prod_llist$)
(declare-fun lCons$j (Nat_a_llist_prod$ Nat_a_llist_prod_llist$) Nat_a_llist_prod_llist$)
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$h (A_a_a_prod_prod$) A$)
(declare-fun snd$h (A_a_a_prod_prod$) A_a_prod$)
(declare-fun pair$h (A$ A_a_prod$) A_a_a_prod_prod$)
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-fun lNil$k () A_a_a_prod_prod_llist$)
(declare-fun lhd$k (A_a_a_prod_prod_llist$) A_a_a_prod_prod$)
(declare-fun ltl$k (A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lCons$k (A_a_a_prod_prod$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-sort A_llist_a_llist_prod$ 0)
(declare-fun fst$i (A_llist_a_llist_prod$) A_llist$)
(declare-fun snd$i (A_llist_a_llist_prod$) A_llist$)
(declare-fun pair$i (A_llist$ A_llist$) A_llist_a_llist_prod$)
(declare-sort A_llist_a_llist_prod_llist$ 0)
(declare-fun lNil$l () A_llist_a_llist_prod_llist$)
(declare-fun lhd$l (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod$)
(declare-fun ltl$l (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lCons$l (A_llist_a_llist_prod$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-sort Nat_a_a_prod_prod$ 0)
(declare-fun fst$j (Nat_a_a_prod_prod$) Nat$)
(declare-fun snd$j (Nat_a_a_prod_prod$) A_a_prod$)
(declare-fun pair$j (Nat$ A_a_prod$) Nat_a_a_prod_prod$)
(declare-sort Nat_a_a_prod_prod_llist$ 0)
(declare-fun lNil$m () Nat_a_a_prod_prod_llist$)
(declare-fun lhd$m (Nat_a_a_prod_prod_llist$) Nat_a_a_prod_prod$)
(declare-fun ltl$m (Nat_a_a_prod_prod_llist$) Nat_a_a_prod_prod_llist$)
(declare-fun lCons$m (Nat_a_a_prod_prod$ Nat_a_a_prod_prod_llist$) Nat_a_a_prod_prod_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ () Nat_option$)
(declare-fun the$ (Nat_option$) Nat$)
(declare-fun some$ (Nat$) Nat_option$)
(declare-fun rep_enat$ (Enat$) Nat_option$)
(declare-fun abs_enat$ (Nat_option$) Enat$)
(declare-fun n$ () Nat$)
(declare-fun uu$ () A_a_llist_a_llist_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun min$ (Nat$) Nat_nat_fun$)
(declare-fun one$ () Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ (A_llist_a_llist_fun$) A_a_llist_a_llist_fun_fun_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun uub$ (A_a_fun$) A_a_llist_a_fun_fun_a_a_llist_a_fun_fun_fun$)
(declare-fun uuc$ (A_llist_a_fun$) A_a_llist_a_llist_fun_fun_a_a_llist_a_fun_fun_fun$)
(declare-fun uud$ (A_a_llist_fun$) A_a_llist_a_fun_fun_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun uue$ (A_llist_a_llist_fun$ A_llist_a_llist_llist_a_llist_fun_fun$) A_llist_a_llist_llist_a_llist_fun_fun$)
(declare-fun uuf$ (A_bool_fun$) A_a_llist_a_fun_fun_a_a_llist_bool_fun_fun_fun$)
(declare-fun uug$ (Bool_a_fun$) A_a_llist_bool_fun_fun_a_a_llist_a_fun_fun_fun$)
(declare-fun uuh$ (Bool_bool_fun$) A_a_llist_bool_fun_fun_a_a_llist_bool_fun_fun_fun$)
(declare-fun uui$ (A_llist_bool_fun$) A_a_llist_a_llist_fun_fun_a_a_llist_bool_fun_fun_fun$)
(declare-fun uuj$ (Bool_a_llist_fun$) A_a_llist_bool_fun_fun_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun uuk$ (A_a_prod_bool_fun$ A_a_prod_llist$) A_a_prod_a_a_prod_llist_a_a_prod_llist_fun_fun$)
(declare-fun uul$ (Nat_nat_prod_bool_fun$ Nat_nat_prod_llist$) Nat_nat_prod_nat_nat_prod_llist_nat_nat_prod_llist_fun_fun$)
(declare-fun uum$ (A_llist_bool_fun$ A_llist_llist$) A_llist_a_llist_llist_a_llist_llist_fun_fun$)
(declare-fun uun$ (A_bool_fun$) A_llist_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun uuo$ () Nat_nat_llist_nat_llist_fun_fun$)
(declare-fun uup$ () A_a_prod_a_a_prod_llist_a_a_prod_llist_fun_fun$)
(declare-fun uuq$ () Nat_nat_prod_nat_nat_prod_llist_nat_nat_prod_llist_fun_fun$)
(declare-fun uur$ () A_llist_a_llist_llist_a_llist_llist_fun_fun$)
(declare-fun uus$ () A_a_llist_a_llist_fun_fun$)
(declare-fun uut$ () A_llist_a_llist_llist_bool_fun_fun$)
(declare-fun uuu$ () A_a_prod_a_a_prod_llist_bool_fun_fun$)
(declare-fun uuv$ () Nat_nat_llist_bool_fun_fun$)
(declare-fun uuw$ () A_a_llist_bool_fun_fun$)
(declare-fun uux$ () A_llist_a_llist_llist_bool_fun_fun$)
(declare-fun uuy$ () A_a_prod_a_a_prod_llist_bool_fun_fun$)
(declare-fun uuz$ () Nat_nat_llist_bool_fun_fun$)
(declare-fun uva$ () A_a_llist_bool_fun_fun$)
(declare-fun uvb$ () A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun uvc$ () A_llist_llist_a_llist_llist_fun$)
(declare-fun uvd$ () Nat_llist_nat_llist_fun$)
(declare-fun uve$ () A_llist_a_llist_fun$)
(declare-fun uvf$ () A_llist_a_fun$)
(declare-fun uvg$ () A_llist_a_llist_llist_a_llist_fun_fun$)
(declare-fun uvh$ () A_a_llist_a_fun_fun$)
(declare-fun uvi$ () A_llist_a_llist_llist_a_llist_fun_fun$)
(declare-fun uvj$ (A_llist$) A_a_llist_a_llist_fun_fun$)
(declare-fun uvk$ (A_llist$) A_a_llist_a_llist_fun_fun$)
(declare-fun uvl$ (A_llist_llist$) A_llist_a_llist_llist_a_llist_llist_fun_fun$)
(declare-fun uvm$ (A_bool_fun$) A_a_llist_a_llist_fun_fun$)
(declare-fun uvn$ (A_llist$) Nat_a_llist_fun$)
(declare-fun uvo$ (Bool_a_llist_fun$) Nat_bool_fun_nat_a_llist_fun_fun$)
(declare-fun uvp$ (Nat_a_llist_fun$) Nat_nat_fun_nat_a_llist_fun_fun$)
(declare-fun uvq$ (A_llist_bool_fun$) Nat_a_llist_fun_nat_bool_fun_fun$)
(declare-fun uvr$ (A_llist_nat_fun$) Nat_a_llist_fun_nat_nat_fun_fun$)
(declare-fun uvs$ (A_llist_a_llist_fun$) Nat_a_llist_fun_nat_a_llist_fun_fun$)
(declare-fun uvt$ (Bool_bool_fun$) Nat_bool_fun_nat_bool_fun_fun$)
(declare-fun uvu$ (Bool_nat_fun$) Nat_bool_fun_nat_nat_fun_fun$)
(declare-fun uvv$ (Nat_bool_fun$) Nat_nat_fun_nat_bool_fun_fun$)
(declare-fun uvw$ (Nat_nat_fun$) Nat_nat_fun_nat_nat_fun_fun$)
(declare-fun uvx$ (Nat$) A_llist_a_llist_llist_a_llist_fun_fun$)
(declare-fun uvy$ (Nat$) A_a_llist_a_fun_fun$)
(declare-fun uvz$ (Nat_nat_prod_set$) Nat_nat_bool_fun_fun$)
(declare-fun uwa$ () Nat_bool_fun$)
(declare-fun uwb$ () Nat_bool_fun$)
(declare-fun uwc$ () Nat_nat_fun$)
(declare-fun uwd$ (Nat$) Nat_nat_fun$)
(declare-fun uwe$ (Nat$) Nat_nat_fun$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun lnth$ (A_llist_llist$) Nat_a_llist_fun$)
(declare-fun lzip$ (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun pred$ (Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun lnth$a (A_llist$ Nat$) A$)
(declare-fun lnull$ (Nat_nat_prod_llist$) Bool)
(declare-fun lzip$a (A_llist$ Nat_llist$) A_nat_prod_llist$)
(declare-fun lzip$b (Nat_llist$ A_llist$) Nat_a_prod_llist$)
(declare-fun lzip$c (Nat_llist$ Nat_llist$) Nat_nat_prod_llist$)
(declare-fun lzip$d (A_llist$ A_llist_llist$) A_a_llist_prod_llist$)
(declare-fun lzip$e (A_llist_llist$ A_llist$) A_llist_a_prod_llist$)
(declare-fun lzip$f (A_llist_llist$ Nat_llist$) A_llist_nat_prod_llist$)
(declare-fun lzip$g (Nat_llist$ A_llist_llist$) Nat_a_llist_prod_llist$)
(declare-fun lzip$h (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lzip$i (A_llist_llist$ A_llist_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lzip$j (Nat_llist$ A_a_prod_llist$) Nat_a_a_prod_prod_llist$)
(declare-fun minus$ (Nat$) Nat_nat_fun$)
(declare-fun zero$a () Enat$)
(declare-fun compow$ (Nat$ A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun funpow$ () Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun lnull$a (A_llist_llist$) Bool)
(declare-fun lnull$b (A_a_prod_llist$) Bool)
(declare-fun lnull$c (Nat_llist$) Bool)
(declare-fun lnull$d () A_llist_bool_fun$)
(declare-fun lnull$e (Nat_a_prod_llist$) Bool)
(declare-fun lnull$f (Nat_a_llist_prod_llist$) Bool)
(declare-fun lnull$g (Nat_a_a_prod_prod_llist$) Bool)
(declare-fun member$ (Nat_nat_prod$ Nat_nat_prod_set$) Bool)
(declare-fun of_nat$ (Nat$) Nat$)
(declare-fun compow$a (Nat$ A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun compow$b (Nat$ Nat_llist_nat_llist_fun$ Nat_llist$) Nat_llist$)
(declare-fun compow$c () Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun fun_app$ (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun ldropn$a (Nat$) A_llist_llist_a_llist_llist_fun$)
(declare-fun ldropn$b (Nat$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun ldropn$c (Nat$) Nat_nat_prod_llist_nat_nat_prod_llist_fun$)
(declare-fun ldropn$d (Nat$ Nat_llist$) Nat_llist$)
(declare-fun lfilter$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun llexord$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun lmember$ (A_llist$) A_llist_llist_bool_fun$)
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$b (A_a_prod_llist$ A_a_prod_llist_set$) Bool)
(declare-fun member$c (Nat_llist$ Nat_llist_set$) Bool)
(declare-fun member$d (A_llist$ A_llist_set$) Bool)
(declare-fun case_nat$ (A_llist$) Nat_a_llist_fun_nat_a_llist_fun_fun$)
(declare-fun fun_app$a (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun fun_app$b (Nat_llist_nat_llist_fun$ Nat_llist$) Nat_llist$)
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$d (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$e (A_a_llist_a_llist_fun_fun$ A$) A_llist_a_llist_fun$)
(declare-fun fun_app$f (A_llist_llist_a_llist_fun$ A_llist_llist$) A_llist$)
(declare-fun fun_app$g (A_llist_a_llist_llist_a_llist_fun_fun$ A_llist$) A_llist_llist_a_llist_fun$)
(declare-fun fun_app$h (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun fun_app$i (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$j (A_bool_fun$ A$) Bool)
(declare-fun fun_app$k (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$l (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$m (A_llist_a_llist_llist_a_llist_llist_fun_fun$ A_llist$) A_llist_llist_a_llist_llist_fun$)
(declare-fun fun_app$n (A_a_llist_a_fun_fun$ A$) A_llist_a_fun$)
(declare-fun fun_app$o (Nat_a_llist_fun_nat_a_llist_fun_fun$ Nat_a_llist_fun$) Nat_a_llist_fun$)
(declare-fun fun_app$p (Nat_a_llist_fun_nat_bool_fun_fun$ Nat_a_llist_fun$) Nat_bool_fun$)
(declare-fun fun_app$q (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$r (Nat_a_llist_fun_nat_nat_fun_fun$ Nat_a_llist_fun$) Nat_nat_fun$)
(declare-fun fun_app$s (A_llist_nat_fun$ A_llist$) Nat$)
(declare-fun fun_app$t (Nat_bool_fun_nat_a_llist_fun_fun$ Nat_bool_fun$) Nat_a_llist_fun$)
(declare-fun fun_app$u (Bool_a_llist_fun$ Bool) A_llist$)
(declare-fun fun_app$v (Nat_bool_fun_nat_bool_fun_fun$ Nat_bool_fun$) Nat_bool_fun$)
(declare-fun fun_app$w (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$x (Nat_bool_fun_nat_nat_fun_fun$ Nat_bool_fun$) Nat_nat_fun$)
(declare-fun fun_app$y (Bool_nat_fun$ Bool) Nat$)
(declare-fun fun_app$z (Nat_nat_fun_nat_a_llist_fun_fun$ Nat_nat_fun$) Nat_a_llist_fun$)
(declare-fun gen_lset$ (A_llist_set$) A_llist_llist_a_llist_set_fun$)
(declare-fun iterates$ (A_a_fun$) A_a_llist_fun$)
(declare-fun lappend$a (A_llist_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun lmember$a (A_a_prod$) A_a_prod_llist_bool_fun$)
(declare-fun lmember$b (Nat_nat_prod$) Nat_nat_prod_llist_bool_fun$)
(declare-fun lmember$c (A$) A_llist_bool_fun$)
(declare-fun case_nat$a (Bool) Nat_bool_fun_nat_bool_fun_fun$)
(declare-fun case_nat$b (Nat$) Nat_nat_fun_nat_nat_fun_fun$)
(declare-fun fun_app$aa (Nat_nat_fun_nat_bool_fun_fun$ Nat_nat_fun$) Nat_bool_fun$)
(declare-fun fun_app$ab (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$) Nat_nat_fun$)
(declare-fun fun_app$ac (Nat_nat_prod_llist_nat_nat_prod_llist_fun$ Nat_nat_prod_llist$) Nat_nat_prod_llist$)
(declare-fun fun_app$ad (Nat_nat_prod_nat_nat_prod_llist_nat_nat_prod_llist_fun_fun$ Nat_nat_prod$) Nat_nat_prod_llist_nat_nat_prod_llist_fun$)
(declare-fun fun_app$ae (Nat_nat_prod_bool_fun$ Nat_nat_prod$) Bool)
(declare-fun fun_app$af (A_a_prod_a_a_prod_llist_a_a_prod_llist_fun_fun$ A_a_prod$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun fun_app$ag (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$ah (A_llist_a_a_llist_a_llist_fun_fun_fun$ A_llist$) A_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$ai (A_a_llist_a_llist_fun_fun_a_a_llist_a_llist_fun_fun_fun$ A_a_llist_a_llist_fun_fun$) A_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$aj (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$ak (A_a_llist_a_llist_fun_fun_a_a_llist_bool_fun_fun_fun$ A_a_llist_a_llist_fun_fun$) A_a_llist_bool_fun_fun$)
(declare-fun fun_app$al (A_a_llist_a_llist_fun_fun_a_a_llist_a_fun_fun_fun$ A_a_llist_a_llist_fun_fun$) A_a_llist_a_fun_fun$)
(declare-fun fun_app$am (A_a_llist_bool_fun_fun_a_a_llist_a_llist_fun_fun_fun$ A_a_llist_bool_fun_fun$) A_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$an (A_a_llist_bool_fun_fun_a_a_llist_bool_fun_fun_fun$ A_a_llist_bool_fun_fun$) A_a_llist_bool_fun_fun$)
(declare-fun fun_app$ao (A_a_llist_bool_fun_fun_a_a_llist_a_fun_fun_fun$ A_a_llist_bool_fun_fun$) A_a_llist_a_fun_fun$)
(declare-fun fun_app$ap (Bool_a_fun$ Bool) A$)
(declare-fun fun_app$aq (A_a_llist_a_fun_fun_a_a_llist_a_llist_fun_fun_fun$ A_a_llist_a_fun_fun$) A_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$ar (A_a_llist_fun$ A$) A_llist$)
(declare-fun fun_app$as (A_a_llist_a_fun_fun_a_a_llist_bool_fun_fun_fun$ A_a_llist_a_fun_fun$) A_a_llist_bool_fun_fun$)
(declare-fun fun_app$at (A_a_llist_a_fun_fun_a_a_llist_a_fun_fun_fun$ A_a_llist_a_fun_fun$) A_a_llist_a_fun_fun$)
(declare-fun fun_app$au (A_a_fun$ A$) A$)
(declare-fun fun_app$av (Nat_nat_llist_nat_llist_fun_fun$ Nat$) Nat_llist_nat_llist_fun$)
(declare-fun fun_app$aw (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$ax (A_llist_a_llist_llist_bool_fun_fun$ A_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$ay (A_a_prod_llist_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun fun_app$az (A_a_prod_a_a_prod_llist_bool_fun_fun$ A_a_prod$) A_a_prod_llist_bool_fun$)
(declare-fun fun_app$ba (Nat_llist_bool_fun$ Nat_llist$) Bool)
(declare-fun fun_app$bb (Nat_nat_llist_bool_fun_fun$ Nat$) Nat_llist_bool_fun$)
(declare-fun fun_app$bc (A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ A_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$bd (A_a_llist_a_fun_fun_a_llist_a_fun_fun$ A_a_llist_a_fun_fun$) A_llist_a_fun$)
(declare-fun fun_app$be (A_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ A_a_llist_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun fun_app$bf (Nat_nat_prod_llist_bool_fun$ Nat_nat_prod_llist$) Bool)
(declare-fun fun_app$bg (A_llist_llist_a_llist_set_fun$ A_llist_llist$) A_llist_set$)
(declare-fun fun_app$bh (A_a_prod_llist_a_a_prod_set_fun$ A_a_prod_llist$) A_a_prod_set$)
(declare-fun fun_app$bi (Nat_nat_prod_llist_nat_nat_prod_set_fun$ Nat_nat_prod_llist$) Nat_nat_prod_set$)
(declare-fun fun_app$bj (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$bk (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$bl (A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$bm (Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ Nat$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$bn (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$bo (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun gen_lset$a (A_a_prod_set$) A_a_prod_llist_a_a_prod_set_fun$)
(declare-fun gen_lset$b (Nat_nat_prod_set$) Nat_nat_prod_llist_nat_nat_prod_set_fun$)
(declare-fun gen_lset$c (A_set$) A_llist_a_set_fun$)
(declare-fun ldistinct$ (A_llist_llist$) Bool)
(declare-fun undefined$ () A_llist$)
(declare-fun case_llist$ (A_llist$) A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$)
(declare-fun ldistinct$a (A_a_prod_llist$) Bool)
(declare-fun ldistinct$b (Nat_nat_prod_llist$) Bool)
(declare-fun ldistinct$c (A_llist$) Bool)
(declare-fun ldropWhile$ (A_llist_bool_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun ltakeWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun pred_llist$ (A_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun undefined$a () A$)
(declare-fun undefined$b () A_llist_llist$)
(declare-fun undefined$c (Nat$) A_llist$)
(declare-fun undefined$d (Nat$) A$)
(declare-fun case_llist$a (A$) A_a_llist_a_fun_fun_a_llist_a_fun_fun$)
(declare-fun case_llist$b (A_llist$ A_llist_a_llist_llist_a_llist_fun_fun$) A_llist_llist_a_llist_fun$)
(declare-fun case_llist$c (Bool) A_a_llist_bool_fun_fun_a_llist_bool_fun_fun$)
(declare-fun case_llist$d (A_llist_llist$ A_llist_a_llist_llist_a_llist_llist_fun_fun$) A_llist_llist_a_llist_llist_fun$)
(declare-fun case_llist$e (A_a_prod_llist$ A_a_prod_a_a_prod_llist_a_a_prod_llist_fun_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun case_llist$f (Nat_nat_prod_llist$ Nat_nat_prod_nat_nat_prod_llist_nat_nat_prod_llist_fun_fun$ Nat_nat_prod_llist$) Nat_nat_prod_llist$)
(declare-fun case_llist$g (Nat_llist$ Nat_nat_llist_nat_llist_fun_fun$ Nat_llist$) Nat_llist$)
(declare-fun case_llist$h (Bool A_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$) Bool)
(declare-fun case_llist$i (Bool A_a_prod_a_a_prod_llist_bool_fun_fun$ A_a_prod_llist$) Bool)
(declare-fun case_llist$j (Bool Nat_nat_llist_bool_fun_fun$ Nat_llist$) Bool)
(declare-fun divides_aux$ (Nat_nat_prod$) Bool)
(declare-fun ldropWhile$a (Nat_nat_prod_bool_fun$ Nat_nat_prod_llist$) Nat_nat_prod_llist$)
(declare-fun ldropWhile$b (A_a_prod_bool_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun ldropWhile$c (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun pred_llist$a (A_a_prod_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun pred_llist$b (Nat_nat_prod_bool_fun$ Nat_nat_prod_llist$) Bool)
(declare-fun pred_llist$c (A_bool_fun$) A_llist_bool_fun$)
(declare-fun unfold_llist$ (A_llist_bool_fun$) A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(assert (forall ((?v0 A_llist_llist$)) (! (= (fun_app$ uvc$ ?v0) (ltl$a ?v0)) :pattern ((fun_app$ uvc$ ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$a uvb$ ?v0) (ltl$b ?v0)) :pattern ((fun_app$a uvb$ ?v0)))))
(assert (forall ((?v0 Nat_llist$)) (! (= (fun_app$b uvd$ ?v0) (ltl$d ?v0)) :pattern ((fun_app$b uvd$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$c uve$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$c uve$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$d uvf$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$d uvf$ ?v0)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$e uu$ ?v0) (ldropn$ n$)) :pattern ((fun_app$e uu$ ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (fun_app$f (fun_app$g uvi$ ?v0) ?v1) (fun_app$c (lappend$ ?v0) (lconcat$ ?v1))) :pattern ((fun_app$f (fun_app$g uvi$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 Nat$)) (! (= (fun_app$h (uvn$ ?v0) ?v1) (fun_app$c (ldropn$ ?v1) ?v0)) :pattern ((fun_app$h (uvn$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$i (uwe$ ?v0) ?v1) (suc$ (fun_app$i (min$ ?v0) ?v1))) :pattern ((fun_app$i (uwe$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$i (uwd$ ?v0) ?v1) (suc$ (fun_app$i (min$ ?v1) ?v0))) :pattern ((fun_app$i (uwd$ ?v0) ?v1)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$c (fun_app$e (uvm$ ?v0) ?v1) ?v2) (ite (fun_app$j ?v0 ?v1) (lCons$ ?v1 (fun_app$c (lfilter$ ?v0) ?v2)) (fun_app$c (lfilter$ ?v0) ?v2))) :pattern ((fun_app$c (fun_app$e (uvm$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_set$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$k (fun_app$l (uvz$ ?v0) ?v1) ?v2) (member$ (pair$a ?v1 ?v2) ?v0)) :pattern ((fun_app$k (fun_app$l (uvz$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$c (fun_app$e (uvk$ ?v0) ?v1) ?v2) (lCons$ ?v1 (fun_app$c (lappend$ ?v2) ?v0))) :pattern ((fun_app$c (fun_app$e (uvk$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (fun_app$ (fun_app$m (uvl$ ?v0) ?v1) ?v2) (lappend$a ?v2 ?v0)) :pattern ((fun_app$ (fun_app$m (uvl$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$c (fun_app$e (uvj$ ?v0) ?v1) ?v2) (fun_app$c (lappend$ ?v2) ?v0)) :pattern ((fun_app$c (fun_app$e (uvj$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (fun_app$f (fun_app$g (uvx$ ?v0) ?v1) ?v2) (fun_app$h (lnth$ ?v2) ?v0)) :pattern ((fun_app$f (fun_app$g (uvx$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$n (uvy$ ?v0) ?v1) ?v2) (lnth$a ?v2 ?v0)) :pattern ((fun_app$d (fun_app$n (uvy$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (! (= (fun_app$h (fun_app$o (uvs$ ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$h (fun_app$o (uvs$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (! (= (fun_app$k (fun_app$p (uvq$ ?v0) ?v1) ?v2) (fun_app$q ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$k (fun_app$p (uvq$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_nat_fun$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (! (= (fun_app$i (fun_app$r (uvr$ ?v0) ?v1) ?v2) (fun_app$s ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$i (fun_app$r (uvr$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_a_llist_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$h (fun_app$t (uvo$ ?v0) ?v1) ?v2) (fun_app$u ?v0 (fun_app$k ?v1 ?v2))) :pattern ((fun_app$h (fun_app$t (uvo$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$k (fun_app$v (uvt$ ?v0) ?v1) ?v2) (fun_app$w ?v0 (fun_app$k ?v1 ?v2))) :pattern ((fun_app$k (fun_app$v (uvt$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_nat_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$i (fun_app$x (uvu$ ?v0) ?v1) ?v2) (fun_app$y ?v0 (fun_app$k ?v1 ?v2))) :pattern ((fun_app$i (fun_app$x (uvu$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_a_llist_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$h (fun_app$z (uvp$ ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$h (fun_app$z (uvp$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$k (fun_app$aa (uvv$ ?v0) ?v1) ?v2) (fun_app$k ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$k (fun_app$aa (uvv$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$i (fun_app$ab (uvw$ ?v0) ?v1) ?v2) (fun_app$i ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$i (fun_app$ab (uvw$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (! (= (fun_app$ (fun_app$m (uum$ ?v0 ?v1) ?v2) ?v3) (ite (fun_app$q ?v0 ?v2) (ldropWhile$ ?v0 ?v3) ?v1)) :pattern ((fun_app$ (fun_app$m (uum$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_prod_llist$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod_llist$)) (! (= (fun_app$ac (fun_app$ad (uul$ ?v0 ?v1) ?v2) ?v3) (ite (fun_app$ae ?v0 ?v2) (ldropWhile$a ?v0 ?v3) ?v1)) :pattern ((fun_app$ac (fun_app$ad (uul$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_llist$) (?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (! (= (fun_app$a (fun_app$af (uuk$ ?v0 ?v1) ?v2) ?v3) (ite (fun_app$ag ?v0 ?v2) (ldropWhile$b ?v0 ?v3) ?v1)) :pattern ((fun_app$a (fun_app$af (uuk$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$c (fun_app$e (fun_app$ah (uun$ ?v0) ?v1) ?v2) ?v3) (ite (fun_app$j ?v0 ?v2) (fun_app$c (ldropWhile$c ?v0) ?v3) ?v1)) :pattern ((fun_app$c (fun_app$e (fun_app$ah (uun$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_llist_a_llist_fun_fun$) (?v2 A_llist$) (?v3 A_llist_llist$)) (! (= (fun_app$f (fun_app$g (uue$ ?v0 ?v1) ?v2) ?v3) (fun_app$c ?v0 (fun_app$f (fun_app$g ?v1 ?v2) ?v3))) :pattern ((fun_app$f (fun_app$g (uue$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$c (fun_app$e (fun_app$ai (uua$ ?v0) ?v1) ?v2) ?v3) (fun_app$c ?v0 (fun_app$c (fun_app$e ?v1 ?v2) ?v3))) :pattern ((fun_app$c (fun_app$e (fun_app$ai (uua$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$q (fun_app$aj (fun_app$ak (uui$ ?v0) ?v1) ?v2) ?v3) (fun_app$q ?v0 (fun_app$c (fun_app$e ?v1 ?v2) ?v3))) :pattern ((fun_app$q (fun_app$aj (fun_app$ak (uui$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist_a_fun$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$d (fun_app$n (fun_app$al (uuc$ ?v0) ?v1) ?v2) ?v3) (fun_app$d ?v0 (fun_app$c (fun_app$e ?v1 ?v2) ?v3))) :pattern ((fun_app$d (fun_app$n (fun_app$al (uuc$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Bool_a_llist_fun$) (?v1 A_a_llist_bool_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$c (fun_app$e (fun_app$am (uuj$ ?v0) ?v1) ?v2) ?v3) (fun_app$u ?v0 (fun_app$q (fun_app$aj ?v1 ?v2) ?v3))) :pattern ((fun_app$c (fun_app$e (fun_app$am (uuj$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_a_llist_bool_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$q (fun_app$aj (fun_app$an (uuh$ ?v0) ?v1) ?v2) ?v3) (fun_app$w ?v0 (fun_app$q (fun_app$aj ?v1 ?v2) ?v3))) :pattern ((fun_app$q (fun_app$aj (fun_app$an (uuh$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Bool_a_fun$) (?v1 A_a_llist_bool_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$d (fun_app$n (fun_app$ao (uug$ ?v0) ?v1) ?v2) ?v3) (fun_app$ap ?v0 (fun_app$q (fun_app$aj ?v1 ?v2) ?v3))) :pattern ((fun_app$d (fun_app$n (fun_app$ao (uug$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 A_a_llist_a_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$c (fun_app$e (fun_app$aq (uud$ ?v0) ?v1) ?v2) ?v3) (fun_app$ar ?v0 (fun_app$d (fun_app$n ?v1 ?v2) ?v3))) :pattern ((fun_app$c (fun_app$e (fun_app$aq (uud$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_llist_a_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$q (fun_app$aj (fun_app$as (uuf$ ?v0) ?v1) ?v2) ?v3) (fun_app$j ?v0 (fun_app$d (fun_app$n ?v1 ?v2) ?v3))) :pattern ((fun_app$q (fun_app$aj (fun_app$as (uuf$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_llist_a_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$d (fun_app$n (fun_app$at (uub$ ?v0) ?v1) ?v2) ?v3) (fun_app$au ?v0 (fun_app$d (fun_app$n ?v1 ?v2) ?v3))) :pattern ((fun_app$d (fun_app$n (fun_app$at (uub$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (fun_app$f (fun_app$g uvg$ ?v0) ?v1) ?v0) :pattern ((fun_app$f (fun_app$g uvg$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$d (fun_app$n uvh$ ?v0) ?v1) ?v0) :pattern ((fun_app$d (fun_app$n uvh$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (fun_app$ (fun_app$m uur$ ?v0) ?v1) ?v1) :pattern ((fun_app$ (fun_app$m uur$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod_llist$)) (! (= (fun_app$ac (fun_app$ad uuq$ ?v0) ?v1) ?v1) :pattern ((fun_app$ac (fun_app$ad uuq$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (fun_app$a (fun_app$af uup$ ?v0) ?v1) ?v1) :pattern ((fun_app$a (fun_app$af uup$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat_llist$)) (! (= (fun_app$b (fun_app$av uuo$ ?v0) ?v1) ?v1) :pattern ((fun_app$b (fun_app$av uuo$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$c (fun_app$e uus$ ?v0) ?v1) ?v1) :pattern ((fun_app$c (fun_app$e uus$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (fun_app$aw (fun_app$ax uux$ ?v0) ?v1) false) :pattern ((fun_app$aw (fun_app$ax uux$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (fun_app$ay (fun_app$az uuy$ ?v0) ?v1) false) :pattern ((fun_app$ay (fun_app$az uuy$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat_llist$)) (! (= (fun_app$ba (fun_app$bb uuz$ ?v0) ?v1) false) :pattern ((fun_app$ba (fun_app$bb uuz$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$q (fun_app$aj uva$ ?v0) ?v1) false) :pattern ((fun_app$q (fun_app$aj uva$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (fun_app$aw (fun_app$ax uut$ ?v0) ?v1) true) :pattern ((fun_app$aw (fun_app$ax uut$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (fun_app$ay (fun_app$az uuu$ ?v0) ?v1) true) :pattern ((fun_app$ay (fun_app$az uuu$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat_llist$)) (! (= (fun_app$ba (fun_app$bb uuv$ ?v0) ?v1) true) :pattern ((fun_app$ba (fun_app$bb uuv$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$q (fun_app$aj uuw$ ?v0) ?v1) true) :pattern ((fun_app$q (fun_app$aj uuw$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$i uwc$ ?v0) ?v0) :pattern ((fun_app$i uwc$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$k uwa$ ?v0) false) :pattern ((fun_app$k uwa$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$k uwb$ ?v0) true) :pattern ((fun_app$k uwb$ ?v0)))))
(assert (not (= (fun_app$c (ldropn$ (suc$ n$)) xs$) (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ (ldropn$a ?v0) lNil$a) lNil$a) :pattern ((ldropn$a ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$a (ldropn$b ?v0) lNil$b) lNil$b) :pattern ((ldropn$b ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ac (ldropn$c ?v0) lNil$c) lNil$c) :pattern ((ldropn$c ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$c (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$c ?v0 (fun_app$c (fun_app$bc (case_llist$ ?v1) ?v2) ?v3)) (fun_app$c (fun_app$bc (case_llist$ (fun_app$c ?v0 ?v1)) (fun_app$ai (uua$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$au ?v0 (fun_app$d (fun_app$bd (case_llist$a ?v1) ?v2) ?v3)) (fun_app$d (fun_app$bd (case_llist$a (fun_app$au ?v0 ?v1)) (fun_app$at (uub$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_a_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$d ?v0 (fun_app$c (fun_app$bc (case_llist$ ?v1) ?v2) ?v3)) (fun_app$d (fun_app$bd (case_llist$a (fun_app$d ?v0 ?v1)) (fun_app$al (uuc$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$ar ?v0 (fun_app$d (fun_app$bd (case_llist$a ?v1) ?v2) ?v3)) (fun_app$c (fun_app$bc (case_llist$ (fun_app$ar ?v0 ?v1)) (fun_app$aq (uud$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 A_llist_a_llist_llist_a_llist_fun_fun$) (?v3 A_llist_llist$)) (= (fun_app$c ?v0 (fun_app$f (case_llist$b ?v1 ?v2) ?v3)) (fun_app$f (case_llist$b (fun_app$c ?v0 ?v1) (uue$ ?v0 ?v2)) ?v3)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$j ?v0 (fun_app$d (fun_app$bd (case_llist$a ?v1) ?v2) ?v3)) (fun_app$q (fun_app$be (case_llist$c (fun_app$j ?v0 ?v1)) (fun_app$as (uuf$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Bool_a_fun$) (?v1 Bool) (?v2 A_a_llist_bool_fun_fun$) (?v3 A_llist$)) (= (fun_app$ap ?v0 (fun_app$q (fun_app$be (case_llist$c ?v1) ?v2) ?v3)) (fun_app$d (fun_app$bd (case_llist$a (fun_app$ap ?v0 ?v1)) (fun_app$ao (uug$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 A_a_llist_bool_fun_fun$) (?v3 A_llist$)) (= (fun_app$w ?v0 (fun_app$q (fun_app$be (case_llist$c ?v1) ?v2) ?v3)) (fun_app$q (fun_app$be (case_llist$c (fun_app$w ?v0 ?v1)) (fun_app$an (uuh$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$q ?v0 (fun_app$c (fun_app$bc (case_llist$ ?v1) ?v2) ?v3)) (fun_app$q (fun_app$be (case_llist$c (fun_app$q ?v0 ?v1)) (fun_app$ak (uui$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Bool_a_llist_fun$) (?v1 Bool) (?v2 A_a_llist_bool_fun_fun$) (?v3 A_llist$)) (= (fun_app$u ?v0 (fun_app$q (fun_app$be (case_llist$c ?v1) ?v2) ?v3)) (fun_app$c (fun_app$bc (case_llist$ (fun_app$u ?v0 ?v1)) (fun_app$am (uuj$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Bool) (?v1 A_a_llist_bool_fun_fun$)) (! (= (fun_app$q (fun_app$be (case_llist$c ?v0) ?v1) lNil$) ?v0) :pattern ((fun_app$be (case_llist$c ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_a_llist_llist_a_llist_llist_fun_fun$)) (! (= (fun_app$ (case_llist$d ?v0 ?v1) lNil$a) ?v0) :pattern ((case_llist$d ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_llist_a_llist_fun_fun$)) (! (= (fun_app$f (case_llist$b ?v0 ?v1) lNil$a) ?v0) :pattern ((case_llist$b ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_a_llist_a_fun_fun$)) (! (= (fun_app$d (fun_app$bd (case_llist$a ?v0) ?v1) lNil$) ?v0) :pattern ((fun_app$bd (case_llist$a ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$)) (! (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) lNil$) ?v0) :pattern ((fun_app$bc (case_llist$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_llist$)) (= (ldropWhile$b ?v0 ?v1) (case_llist$e lNil$b (uuk$ ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_prod_llist$)) (= (ldropWhile$a ?v0 ?v1) (case_llist$f lNil$c (uul$ ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (ldropWhile$ ?v0 ?v1) (fun_app$ (case_llist$d lNil$a (uum$ ?v0 ?v1)) ?v1)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$c (ldropWhile$c ?v0) ?v1) (fun_app$c (fun_app$bc (case_llist$ lNil$) (fun_app$ah (uun$ ?v0) ?v1)) ?v1)) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$aw (lmember$ ?v0) lNil$a) false) :pattern ((lmember$ ?v0)))))
(assert (forall ((?v0 A_a_prod$)) (! (= (fun_app$ay (lmember$a ?v0) lNil$b) false) :pattern ((lmember$a ?v0)))))
(assert (forall ((?v0 Nat_nat_prod$)) (! (= (fun_app$bf (lmember$b ?v0) lNil$c) false) :pattern ((lmember$b ?v0)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$q (lmember$c ?v0) lNil$) false) :pattern ((lmember$c ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0))) ))
(assert (forall ((?v0 A_llist_set$)) (! (= (fun_app$bg (gen_lset$ ?v0) lNil$a) ?v0) :pattern ((gen_lset$ ?v0)))))
(assert (forall ((?v0 A_a_prod_set$)) (! (= (fun_app$bh (gen_lset$a ?v0) lNil$b) ?v0) :pattern ((gen_lset$a ?v0)))))
(assert (forall ((?v0 Nat_nat_prod_set$)) (! (= (fun_app$bi (gen_lset$b ?v0) lNil$c) ?v0) :pattern ((gen_lset$b ?v0)))))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$bj (gen_lset$c ?v0) lNil$) ?v0) :pattern ((gen_lset$c ?v0)))))
(assert (forall ((?v0 A_llist_bool_fun$)) (pred_llist$ ?v0 lNil$a) ))
(assert (forall ((?v0 A_a_prod_bool_fun$)) (pred_llist$a ?v0 lNil$b) ))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$)) (pred_llist$b ?v0 lNil$c) ))
(assert (forall ((?v0 A_bool_fun$)) (fun_app$q (pred_llist$c ?v0) lNil$) ))
(assert (forall ((?v0 Nat_nat_prod_llist$) (?v1 Nat$)) (! (=> (lnull$ ?v0) (= (fun_app$ac (ldropn$c ?v1) ?v0) lNil$c)) :pattern ((fun_app$ac (ldropn$c ?v1) ?v0)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (! (=> (lnull$a ?v0) (= (fun_app$ (ldropn$a ?v1) ?v0) lNil$a)) :pattern ((fun_app$ (ldropn$a ?v1) ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Nat$)) (! (=> (lnull$b ?v0) (= (fun_app$a (ldropn$b ?v1) ?v0) lNil$b)) :pattern ((fun_app$a (ldropn$b ?v1) ?v0)))))
(assert (forall ((?v0 Nat_llist$) (?v1 Nat$)) (! (=> (lnull$c ?v0) (= (ldropn$d ?v1 ?v0) lNil$d)) :pattern ((ldropn$d ?v1 ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 Nat$)) (! (=> (fun_app$q lnull$d ?v0) (= (fun_app$c (ldropn$ ?v1) ?v0) lNil$)) :pattern ((fun_app$c (ldropn$ ?v1) ?v0)))))
(assert (forall ((?v0 Nat_llist$)) (= (ltl$d ?v0) (case_llist$g lNil$d uuo$ ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (= (ltl$b ?v0) (case_llist$e lNil$b uup$ ?v0)) ))
(assert (forall ((?v0 Nat_nat_prod_llist$)) (= (ltl$c ?v0) (case_llist$f lNil$c uuq$ ?v0)) ))
(assert (forall ((?v0 A_llist_llist$)) (= (ltl$a ?v0) (fun_app$ (case_llist$d lNil$a uur$) ?v0)) ))
(assert (forall ((?v0 A_llist$)) (= (ltl$ ?v0) (fun_app$c (fun_app$bc (case_llist$ lNil$) uus$) ?v0)) ))
(assert (ldistinct$ lNil$a))
(assert (ldistinct$a lNil$b))
(assert (ldistinct$b lNil$c))
(assert (ldistinct$c lNil$))
(assert (forall ((?v0 A_llist_llist$)) (= (not (lnull$a ?v0)) (case_llist$h false uut$ ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (= (not (lnull$b ?v0)) (case_llist$i false uuu$ ?v0)) ))
(assert (forall ((?v0 Nat_llist$)) (= (not (lnull$c ?v0)) (case_llist$j false uuv$ ?v0)) ))
(assert (forall ((?v0 A_llist$)) (= (not (fun_app$q lnull$d ?v0)) (fun_app$q (fun_app$be (case_llist$c false) uuw$) ?v0)) ))
(assert (forall ((?v0 A_llist_llist$)) (! (= (lnull$a ?v0) (case_llist$h true uux$ ?v0)) :pattern ((lnull$a ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (lnull$b ?v0) (case_llist$i true uuy$ ?v0)) :pattern ((lnull$b ?v0)))))
(assert (forall ((?v0 Nat_llist$)) (! (= (lnull$c ?v0) (case_llist$j true uuz$ ?v0)) :pattern ((lnull$c ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$q lnull$d ?v0) (fun_app$q (fun_app$be (case_llist$c true) uva$) ?v0)) :pattern ((fun_app$q lnull$d ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) false) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 Nat_llist$)) (=> (and (=> (or (fun_app$q lnull$d ?v0) (lnull$c ?v1)) false) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 Nat_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$c ?v0) (fun_app$q lnull$d ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (fun_app$q lnull$d ?v1))) false)) false) ))
(assert (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$c ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (fun_app$q lnull$d ?v0) (lnull$a ?v1)) false) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (fun_app$q lnull$d ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (fun_app$q lnull$d ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 Nat_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$c ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 Nat_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (fun_app$q lnull$d ?v0) (lnull$b ?v1)) false) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_llist$)) (=> (member$a ?v1 ?v0) (lnull$a ?v1)) ) false) (=> (not (forall ((?v1 A_llist_llist$)) (=> (member$a ?v1 ?v0) (lnull$a ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_llist$)) (=> (member$b ?v1 ?v0) (lnull$b ?v1)) ) false) (=> (not (forall ((?v1 A_a_prod_llist$)) (=> (member$b ?v1 ?v0) (lnull$b ?v1)) )) false)) false) ))
(assert (forall ((?v0 Nat_llist_set$)) (=> (and (=> (forall ((?v1 Nat_llist$)) (=> (member$c ?v1 ?v0) (lnull$c ?v1)) ) false) (=> (not (forall ((?v1 Nat_llist$)) (=> (member$c ?v1 ?v0) (lnull$c ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$d ?v1 ?v0) (fun_app$q lnull$d ?v1)) ) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$d ?v1 ?v0) (fun_app$q lnull$d ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (=> (and (lnull$c ?v0) (lnull$c ?v1)) false) (=> (or (not (lnull$c ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) false) (=> (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (lnull$b ?v0) false) (=> (not (lnull$b ?v0)) false)) false) ))
(assert (forall ((?v0 Nat_llist$)) (=> (and (=> (lnull$c ?v0) false) (=> (not (lnull$c ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$q lnull$d ?v0) false) (=> (not (fun_app$q lnull$d ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (lnull$a ?v0) (lnull$a (ltl$a ?v0))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (lnull$b ?v0) (lnull$b (ltl$b ?v0))) ))
(assert (forall ((?v0 Nat_llist$)) (=> (lnull$c ?v0) (lnull$c (ltl$d ?v0))) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$q lnull$d ?v0) (fun_app$q lnull$d (ltl$ ?v0))) ))
(assert (= (ltl$d lNil$d) lNil$d))
(assert (= (ltl$a lNil$a) lNil$a))
(assert (= (ltl$b lNil$b) lNil$b))
(assert (= (ltl$c lNil$c) lNil$c))
(assert (= (ltl$ lNil$) lNil$))
(assert (lnull$ lNil$c))
(assert (lnull$a lNil$a))
(assert (lnull$b lNil$b))
(assert (lnull$c lNil$d))
(assert (fun_app$q lnull$d lNil$))
(assert (forall ((?v0 Nat_nat_prod_llist$)) (=> (lnull$ ?v0) (= ?v0 lNil$c)) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (lnull$a ?v0) (= ?v0 lNil$a)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (lnull$b ?v0) (= ?v0 lNil$b)) ))
(assert (forall ((?v0 Nat_llist$)) (=> (lnull$c ?v0) (= ?v0 lNil$d)) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$q lnull$d ?v0) (= ?v0 lNil$)) ))
(assert (forall ((?v0 Nat_nat_prod_llist$)) (=> (= ?v0 lNil$c) (lnull$ ?v0)) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (= ?v0 lNil$a) (lnull$a ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (= ?v0 lNil$b) (lnull$b ?v0)) ))
(assert (forall ((?v0 Nat_llist$)) (=> (= ?v0 lNil$d) (lnull$c ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (fun_app$q lnull$d ?v0)) ))
(assert (forall ((?v0 Nat_nat_prod_llist$)) (! (= (lnull$ ?v0) (= ?v0 lNil$c)) :pattern ((lnull$ ?v0)))))
(assert (forall ((?v0 A_llist_llist$)) (! (= (lnull$a ?v0) (= ?v0 lNil$a)) :pattern ((lnull$a ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (lnull$b ?v0) (= ?v0 lNil$b)) :pattern ((lnull$b ?v0)))))
(assert (forall ((?v0 Nat_llist$)) (! (= (lnull$c ?v0) (= ?v0 lNil$d)) :pattern ((lnull$c ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$q lnull$d ?v0) (= ?v0 lNil$)) :pattern ((fun_app$q lnull$d ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (ltl$b (lzip$ ?v0 ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 Nat_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$c ?v1))) (= (ltl$e (lzip$a ?v0 ?v1)) (lzip$a (ltl$ ?v0) (ltl$d ?v1)))) ))
(assert (forall ((?v0 Nat_llist$) (?v1 A_llist$)) (=> (and (not (lnull$c ?v0)) (not (fun_app$q lnull$d ?v1))) (= (ltl$f (lzip$b ?v0 ?v1)) (lzip$b (ltl$d ?v0) (ltl$ ?v1)))) ))
(assert (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) (= (ltl$c (lzip$c ?v0 ?v1)) (lzip$c (ltl$d ?v0) (ltl$d ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$a ?v1))) (= (ltl$g (lzip$d ?v0 ?v1)) (lzip$d (ltl$ ?v0) (ltl$a ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (not (lnull$a ?v0)) (not (fun_app$q lnull$d ?v1))) (= (ltl$h (lzip$e ?v0 ?v1)) (lzip$e (ltl$a ?v0) (ltl$ ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 Nat_llist$)) (=> (and (not (lnull$a ?v0)) (not (lnull$c ?v1))) (= (ltl$i (lzip$f ?v0 ?v1)) (lzip$f (ltl$a ?v0) (ltl$d ?v1)))) ))
(assert (forall ((?v0 Nat_llist$) (?v1 A_llist_llist$)) (=> (and (not (lnull$c ?v0)) (not (lnull$a ?v1))) (= (ltl$j (lzip$g ?v0 ?v1)) (lzip$g (ltl$d ?v0) (ltl$a ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$b ?v1))) (= (ltl$k (lzip$h ?v0 ?v1)) (lzip$h (ltl$ ?v0) (ltl$b ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) (= (ltl$l (lzip$i ?v0 ?v1)) (lzip$i (ltl$a ?v0) (ltl$a ?v1)))) ))
(assert (forall ((?v0 Bool) (?v1 A_a_llist_bool_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$q (fun_app$be (case_llist$c ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$q (fun_app$aj ?v1 (lhd$ ?v2)) (ltl$ ?v2)))) :pattern ((fun_app$q (fun_app$be (case_llist$c ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_a_llist_llist_a_llist_llist_fun_fun$) (?v2 A_llist_llist$)) (! (= (fun_app$ (case_llist$d ?v0 ?v1) ?v2) (ite (lnull$a ?v2) ?v0 (fun_app$ (fun_app$m ?v1 (lhd$a ?v2)) (ltl$a ?v2)))) :pattern ((fun_app$ (case_llist$d ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_llist_a_llist_fun_fun$) (?v2 A_llist_llist$)) (! (= (fun_app$f (case_llist$b ?v0 ?v1) ?v2) (ite (lnull$a ?v2) ?v0 (fun_app$f (fun_app$g ?v1 (lhd$a ?v2)) (ltl$a ?v2)))) :pattern ((fun_app$f (case_llist$b ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_a_llist_a_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$bd (case_llist$a ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$d (fun_app$n ?v1 (lhd$ ?v2)) (ltl$ ?v2)))) :pattern ((fun_app$d (fun_app$bd (case_llist$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2)))) :pattern ((fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (ltl$ (fun_app$c (fun_app$bk (fun_app$bl (unfold_llist$ ?v0) ?v1) ?v2) ?v3)) (ite (fun_app$q ?v0 ?v3) lNil$ (fun_app$c (fun_app$bk (fun_app$bl (unfold_llist$ ?v0) ?v1) ?v2) (fun_app$c ?v2 ?v3)))) ))
(assert (forall ((?v0 Nat$) (?v1 A_a_prod_llist$)) (! (= (fun_app$a (ldropn$b ?v0) ?v1) (compow$ ?v0 uvb$ ?v1)) :pattern ((fun_app$a (ldropn$b ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 A_llist_llist$)) (! (= (fun_app$ (ldropn$a ?v0) ?v1) (compow$a ?v0 uvc$ ?v1)) :pattern ((fun_app$ (ldropn$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat_llist$)) (! (= (ldropn$d ?v0 ?v1) (compow$b ?v0 uvd$ ?v1)) :pattern ((ldropn$d ?v0 ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 A_llist$)) (! (= (fun_app$c (ldropn$ ?v0) ?v1) (fun_app$c (fun_app$bk (fun_app$bm compow$c ?v0) uve$) ?v1)) :pattern ((fun_app$c (ldropn$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_llist$) (?v1 A_llist$)) (= (not (lnull$e (lzip$b ?v0 ?v1))) (and (not (lnull$c ?v0)) (not (fun_app$q lnull$d ?v1)))) ))
(assert (forall ((?v0 Nat_llist$) (?v1 A_llist_llist$)) (= (not (lnull$f (lzip$g ?v0 ?v1))) (and (not (lnull$c ?v0)) (not (lnull$a ?v1)))) ))
(assert (forall ((?v0 Nat_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$g (lzip$j ?v0 ?v1))) (and (not (lnull$c ?v0)) (not (lnull$b ?v1)))) ))
(assert (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (= (not (lnull$ (lzip$c ?v0 ?v1))) (and (not (lnull$c ?v0)) (not (lnull$c ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$b (lzip$ ?v0 ?v1))) (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$b (lzip$ ?v0 ?v1)) (or (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (= (ltl$ (fun_app$ar (iterates$ ?v0) ?v1)) (fun_app$ar (iterates$ ?v0) (fun_app$au ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (ltl$ (fun_app$c (lappend$ ?v0) ?v1)) (ite (fun_app$q lnull$d ?v0) (ltl$ ?v1) (fun_app$c (lappend$ (ltl$ ?v0)) ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (not (fun_app$q lnull$d (fun_app$ar (iterates$ ?v0) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$q lnull$d (fun_app$c (lappend$ ?v0) ?v1)) (and (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (fun_app$q lnull$d (fun_app$c (lappend$ ?v0) ?v1))) (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1)))) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$c (lappend$ ?v0) lNil$) ?v0) :pattern ((lappend$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$c (lappend$ lNil$) ?v0) ?v0) :pattern ((fun_app$c (lappend$ lNil$) ?v0)))))
(assert (forall ((?v0 A_llist$)) (= (fun_app$c (fun_app$bk (fun_app$bl (unfold_llist$ lnull$d) uvf$) uve$) ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lhd$ (fun_app$c (lappend$ ?v0) ?v1)) (ite (fun_app$q lnull$d ?v0) (lhd$ ?v1) (lhd$ ?v0))) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 Nat$) (?v2 A_llist$)) (= (fun_app$c ?v0 (fun_app$c (fun_app$bk (fun_app$bm compow$c ?v1) ?v0) ?v2)) (fun_app$c (fun_app$bk (fun_app$bm compow$c ?v1) ?v0) (fun_app$c ?v0 ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (= (lhd$ (fun_app$ar (iterates$ ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$c (lappend$ (fun_app$c (lappend$ ?v0) ?v1)) ?v2) (fun_app$c (lappend$ ?v0) (fun_app$c (lappend$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (fun_app$q lnull$d ?v0) (not (fun_app$j ?v1 (lhd$ ?v0)))) false) (=> (and (not (fun_app$q lnull$d ?v0)) (fun_app$j ?v1 (lhd$ ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$q lnull$d ?v0) (= (fun_app$c (lappend$ ?v0) ?v1) ?v1)) :pattern ((fun_app$c (lappend$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$q lnull$d ?v0) (= (fun_app$c (lappend$ ?v1) ?v0) ?v1)) :pattern ((fun_app$c (lappend$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) (fun_app$q lnull$d (fun_app$c (lappend$ ?v0) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (not (fun_app$q lnull$d (fun_app$c (lappend$ ?v0) ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$c (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$c (lappend$ ?v0) ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (= (fun_app$c (lappend$ lNil$) lNil$) lNil$))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) (= (lhd$a (lappend$a ?v0 ?v1)) (fun_app$f (case_llist$b (lhd$a ?v1) uvg$) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (lhd$ (fun_app$c (lappend$ ?v0) ?v1)) (fun_app$d (fun_app$bd (case_llist$a (lhd$ ?v1)) uvh$) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (not (lnull$b (lzip$ ?v0 ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) (lnull$b (lzip$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (or (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) (= (lzip$ ?v0 ?v1) lNil$b)) :pattern ((lzip$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$q (fun_app$bn ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$q (fun_app$bn ?v0 ?v3) ?v4) (and (= (fun_app$q lnull$d ?v3) (fun_app$q lnull$d ?v4)) (=> (and (not (fun_app$q lnull$d ?v3)) (not (fun_app$q lnull$d ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$q (fun_app$bn ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$q (fun_app$bn ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$q (fun_app$bn ?v0 ?v3) ?v4) (and (= (fun_app$q lnull$d ?v3) (fun_app$q lnull$d ?v4)) (=> (and (not (fun_app$q lnull$d ?v3)) (not (fun_app$q lnull$d ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$q (fun_app$bn ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (and (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) (= (fun_app$c (lappend$ ?v0) ?v1) lNil$)) :pattern ((fun_app$c (lappend$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (not (fun_app$q lnull$d ?v0)) (= (fun_app$c (lappend$ (ltl$ ?v0)) ?v1) (ltl$ (fun_app$c (lappend$ ?v0) ?v1)))) ))
(assert (= funpow$ compow$c))
(assert (forall ((?v0 A_llist_llist$)) (= (lconcat$ ?v0) (fun_app$f (case_llist$b lNil$ uvi$) ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$q lnull$d ?v0)) (fun_app$j ?v1 (lhd$ ?v0))) (= (ltl$ (fun_app$c (ltakeWhile$ ?v1) ?v0)) (fun_app$c (ltakeWhile$ ?v1) (ltl$ ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (or (fun_app$q lnull$d ?v0) (not (fun_app$j ?v1 (lhd$ ?v0)))) (= (fun_app$c (ltakeWhile$ ?v1) ?v0) lNil$)) :pattern ((fun_app$c (ltakeWhile$ ?v1) ?v0)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$q lnull$d (fun_app$c (ltakeWhile$ ?v0) ?v1)) (or (fun_app$q lnull$d ?v1) (not (fun_app$j ?v0 (lhd$ ?v1))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (fun_app$q lnull$d (fun_app$c (ltakeWhile$ ?v0) ?v1))) (and (not (fun_app$q lnull$d ?v1)) (fun_app$j ?v0 (lhd$ ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (ltl$ (fun_app$c (lappend$ ?v0) ?v1)) (fun_app$c (fun_app$bc (case_llist$ (fun_app$c (fun_app$bc (case_llist$ undefined$) uus$) ?v1)) (uvj$ ?v1)) ?v0))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_llist_llist_a_llist_fun_fun$) (?v3 A_llist_llist$)) (= (fun_app$q ?v0 (fun_app$f (case_llist$b ?v1 ?v2) ?v3)) (not (or (and (= ?v3 lNil$a) (not (fun_app$q ?v0 ?v1))) (and (= ?v3 (lCons$a (lhd$a ?v3) (ltl$a ?v3))) (not (fun_app$q ?v0 (fun_app$f (fun_app$g ?v2 (lhd$a ?v3)) (ltl$a ?v3)))))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$j ?v0 (fun_app$d (fun_app$bd (case_llist$a ?v1) ?v2) ?v3)) (not (or (and (= ?v3 lNil$) (not (fun_app$j ?v0 ?v1))) (and (= ?v3 (lCons$ (lhd$ ?v3) (ltl$ ?v3))) (not (fun_app$j ?v0 (fun_app$d (fun_app$n ?v2 (lhd$ ?v3)) (ltl$ ?v3)))))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$q ?v0 (fun_app$c (fun_app$bc (case_llist$ ?v1) ?v2) ?v3)) (not (or (and (= ?v3 lNil$) (not (fun_app$q ?v0 ?v1))) (and (= ?v3 (lCons$ (lhd$ ?v3) (ltl$ ?v3))) (not (fun_app$q ?v0 (fun_app$c (fun_app$e ?v2 (lhd$ ?v3)) (ltl$ ?v3)))))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_llist_llist_a_llist_fun_fun$) (?v3 A_llist_llist$)) (= (fun_app$q ?v0 (fun_app$f (case_llist$b ?v1 ?v2) ?v3)) (and (=> (= ?v3 lNil$a) (fun_app$q ?v0 ?v1)) (=> (= ?v3 (lCons$a (lhd$a ?v3) (ltl$a ?v3))) (fun_app$q ?v0 (fun_app$f (fun_app$g ?v2 (lhd$a ?v3)) (ltl$a ?v3)))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$j ?v0 (fun_app$d (fun_app$bd (case_llist$a ?v1) ?v2) ?v3)) (and (=> (= ?v3 lNil$) (fun_app$j ?v0 ?v1)) (=> (= ?v3 (lCons$ (lhd$ ?v3) (ltl$ ?v3))) (fun_app$j ?v0 (fun_app$d (fun_app$n ?v2 (lhd$ ?v3)) (ltl$ ?v3)))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$q ?v0 (fun_app$c (fun_app$bc (case_llist$ ?v1) ?v2) ?v3)) (and (=> (= ?v3 lNil$) (fun_app$q ?v0 ?v1)) (=> (= ?v3 (lCons$ (lhd$ ?v3) (ltl$ ?v3))) (fun_app$q ?v0 (fun_app$c (fun_app$e ?v2 (lhd$ ?v3)) (ltl$ ?v3)))))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$c (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$c (lappend$ ?v1) ?v2))) :pattern ((fun_app$c (lappend$ (lCons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$q (pred_llist$c ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$j ?v0 ?v1) (fun_app$q (pred_llist$c ?v0) ?v2))) :pattern ((fun_app$q (pred_llist$c ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_llist$)) (=> (not (fun_app$q lnull$d ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 A_llist$)) (= (not (fun_app$q lnull$d ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (fun_app$q lnull$d ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (fun_app$q lnull$d (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ltl$ (lCons$ ?v0 ?v1)) ?v1) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_llist_a_llist_fun_fun$) (?v2 A_llist$) (?v3 A_llist_llist$)) (! (= (fun_app$f (case_llist$b ?v0 ?v1) (lCons$a ?v2 ?v3)) (fun_app$f (fun_app$g ?v1 ?v2) ?v3)) :pattern ((fun_app$f (case_llist$b ?v0 ?v1) (lCons$a ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A_a_llist_a_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$d (fun_app$bd (case_llist$a ?v0) ?v1) (lCons$ ?v2 ?v3)) (fun_app$d (fun_app$n ?v1 ?v2) ?v3)) :pattern ((fun_app$d (fun_app$bd (case_llist$a ?v0) ?v1) (lCons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) (lCons$ ?v2 ?v3)) (fun_app$c (fun_app$e ?v1 ?v2) ?v3)) :pattern ((fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) (lCons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$ar (iterates$ ?v0) ?v1) (lCons$ ?v1 (fun_app$ar (iterates$ ?v0) (fun_app$au ?v0 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$q (lmember$c ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$q (lmember$c ?v0) ?v2))) :pattern ((fun_app$q (lmember$c ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$q lnull$d ?v0)) (fun_app$j ?v1 (lhd$ ?v0))) (= (fun_app$c (ltakeWhile$ ?v1) ?v0) (lCons$ (lhd$ ?v0) (fun_app$c (ltakeWhile$ ?v1) (ltl$ ?v0))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$c (lappend$ (fun_app$c (lappend$ ?v0) (lCons$ ?v1 lNil$))) ?v2) (fun_app$c (lappend$ ?v0) (lCons$ ?v1 ?v2))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$c (ltakeWhile$ ?v0) ?v1) (ite (or (fun_app$q lnull$d ?v1) (not (fun_app$j ?v0 (lhd$ ?v1)))) lNil$ (lCons$ (lhd$ ?v1) (fun_app$c (ltakeWhile$ ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$c (lappend$ ?v0) ?v1) (fun_app$c (fun_app$bc (case_llist$ ?v1) (uvk$ ?v1)) ?v0)) ))
(assert (forall ((?v0 A_llist_llist$)) (= (lhd$a ?v0) (fun_app$f (case_llist$b undefined$ uvg$) ?v0)) ))
(assert (forall ((?v0 A_llist$)) (= (lhd$ ?v0) (fun_app$d (fun_app$bd (case_llist$a undefined$a) uvh$) ?v0)) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) (= (lappend$a ?v0 ?v1) (lCons$a (fun_app$f (case_llist$b (lhd$a ?v1) uvg$) ?v0) (fun_app$ (case_llist$d (fun_app$ (case_llist$d undefined$b uur$) ?v1) (uvl$ ?v1)) ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (fun_app$c (lappend$ ?v0) ?v1) (lCons$ (fun_app$d (fun_app$bd (case_llist$a (lhd$ ?v1)) uvh$) ?v0) (fun_app$c (fun_app$bc (case_llist$ (fun_app$c (fun_app$bc (case_llist$ undefined$) uus$) ?v1)) (uvj$ ?v1)) ?v0)))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (=> (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (and (not (= ?v0 lNil$)) (and (= (lhd$ ?v0) ?v1) (= (ltl$ ?v0) ?v2)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (or (fun_app$q lnull$d ?v0) (not (fun_app$j ?v1 (lhd$ ?v0)))) (fun_app$q lnull$d (fun_app$c (ltakeWhile$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$q lnull$d ?v0)) (fun_app$j ?v1 (lhd$ ?v0))) (= (lhd$ (fun_app$c (ltakeWhile$ ?v1) ?v0)) (lhd$ ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$q lnull$d ?v0)) (fun_app$j ?v1 (lhd$ ?v0))) (not (fun_app$q lnull$d (fun_app$c (ltakeWhile$ ?v1) ?v0)))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$c (lfilter$ ?v0) ?v1) (fun_app$c (fun_app$bc (case_llist$ lNil$) (uvm$ ?v0)) ?v1)) ))
(assert (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (= (lzip$c ?v0 ?v1) (ite (or (lnull$c ?v0) (lnull$c ?v1)) lNil$c (lCons$c (pair$a (lhd$d ?v0) (lhd$d ?v1)) (lzip$c (ltl$d ?v0) (ltl$d ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lzip$ ?v0 ?v1) (ite (or (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) lNil$b (lCons$b (pair$ (lhd$ ?v0) (lhd$ ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) (= (lzip$c ?v0 ?v1) (lCons$c (pair$a (lhd$d ?v0) (lhd$d ?v1)) (lzip$c (ltl$d ?v0) (ltl$d ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (lzip$ ?v0 ?v1) (lCons$b (pair$ (lhd$ ?v0) (lhd$ ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 Nat$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$c (ldropn$ ?v0) (lCons$ ?v1 ?v2)) (fun_app$h (fun_app$o (case_nat$ (lCons$ ?v1 ?v2)) (uvn$ ?v2)) ?v0)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$q (fun_app$bn ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$q (fun_app$bn ?v0 ?v4) ?v5) (or (exists ((?v6 A_llist$) (?v7 A_llist$) (?v8 A$)) (and (= ?v4 (lCons$ ?v8 ?v6)) (and (= ?v5 (lCons$ ?v8 ?v7)) (or (fun_app$q (fun_app$bn ?v0 ?v6) ?v7) (fun_app$q (fun_app$bn (llexord$ ?v3) ?v6) ?v7)))) ) (or (exists ((?v6 A$) (?v7 A$) (?v8 A_llist$) (?v9 A_llist$)) (and (= ?v4 (lCons$ ?v6 ?v8)) (and (= ?v5 (lCons$ ?v7 ?v9)) (fun_app$j (fun_app$bo ?v3 ?v6) ?v7))) ) (exists ((?v6 A_llist$)) (and (= ?v4 lNil$) (= ?v5 ?v6)) )))) )) (fun_app$q (fun_app$bn (llexord$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$q (fun_app$bn (llexord$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (=> (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$q (fun_app$bn (llexord$ ?v0) ?v3) ?v4))) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$j (fun_app$bo ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_llist$)) (=> (and (= ?v1 lNil$) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 Bool_a_llist_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$u ?v0 (fun_app$k (fun_app$v (case_nat$a ?v1) ?v2) ?v3)) (fun_app$h (fun_app$o (case_nat$ (fun_app$u ?v0 ?v1)) (fun_app$t (uvo$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Nat_a_llist_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$h ?v0 (fun_app$i (fun_app$ab (case_nat$b ?v1) ?v2) ?v3)) (fun_app$h (fun_app$o (case_nat$ (fun_app$h ?v0 ?v1)) (fun_app$z (uvp$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 Nat_a_llist_fun$) (?v3 Nat$)) (= (fun_app$q ?v0 (fun_app$h (fun_app$o (case_nat$ ?v1) ?v2) ?v3)) (fun_app$k (fun_app$v (case_nat$a (fun_app$q ?v0 ?v1)) (fun_app$p (uvq$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_nat_fun$) (?v1 A_llist$) (?v2 Nat_a_llist_fun$) (?v3 Nat$)) (= (fun_app$s ?v0 (fun_app$h (fun_app$o (case_nat$ ?v1) ?v2) ?v3)) (fun_app$i (fun_app$ab (case_nat$b (fun_app$s ?v0 ?v1)) (fun_app$r (uvr$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 Nat_a_llist_fun$) (?v3 Nat$)) (= (fun_app$c ?v0 (fun_app$h (fun_app$o (case_nat$ ?v1) ?v2) ?v3)) (fun_app$h (fun_app$o (case_nat$ (fun_app$c ?v0 ?v1)) (fun_app$o (uvs$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$w ?v0 (fun_app$k (fun_app$v (case_nat$a ?v1) ?v2) ?v3)) (fun_app$k (fun_app$v (case_nat$a (fun_app$w ?v0 ?v1)) (fun_app$v (uvt$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Bool_nat_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$y ?v0 (fun_app$k (fun_app$v (case_nat$a ?v1) ?v2) ?v3)) (fun_app$i (fun_app$ab (case_nat$b (fun_app$y ?v0 ?v1)) (fun_app$x (uvu$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$k ?v0 (fun_app$i (fun_app$ab (case_nat$b ?v1) ?v2) ?v3)) (fun_app$k (fun_app$v (case_nat$a (fun_app$k ?v0 ?v1)) (fun_app$aa (uvv$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$i ?v0 (fun_app$i (fun_app$ab (case_nat$b ?v1) ?v2) ?v3)) (fun_app$i (fun_app$ab (case_nat$b (fun_app$i ?v0 ?v1)) (fun_app$ab (uvw$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (! (= (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)) (fun_app$h ?v1 ?v2)) :pattern ((fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2))))))
(assert (forall ((?v0 Bool) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$k (fun_app$v (case_nat$a ?v0) ?v1) (suc$ ?v2)) (fun_app$k ?v1 ?v2)) :pattern ((fun_app$k (fun_app$v (case_nat$a ?v0) ?v1) (suc$ ?v2))))))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$i (fun_app$ab (case_nat$b ?v0) ?v1) (suc$ ?v2)) (fun_app$i ?v1 ?v2)) :pattern ((fun_app$i (fun_app$ab (case_nat$b ?v0) ?v1) (suc$ ?v2))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$j (fun_app$bo ?v0 ?v1) ?v2) (fun_app$q (fun_app$bn (llexord$ ?v0) (lCons$ ?v1 ?v3)) (lCons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A$)) (=> (fun_app$q (fun_app$bn (llexord$ ?v0) ?v1) ?v2) (fun_app$q (fun_app$bn (llexord$ ?v0) (lCons$ ?v3 ?v1)) (lCons$ ?v3 ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$q (fun_app$bn (llexord$ ?v0) lNil$) ?v1) ))
(assert (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) (= (lhd$c (lzip$c ?v0 ?v1)) (pair$a (lhd$d ?v0) (lhd$d ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (lhd$b (lzip$ ?v0 ?v1)) (pair$ (lhd$ ?v0) (lhd$ ?v1)))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$q (fun_app$bn (llexord$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$q (fun_app$bn (llexord$ ?v0) ?v3) ?v4))) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$j (fun_app$bo ?v0 ?v3) ?v4))) ) (exists ((?v3 A_llist$)) (and (= ?v1 lNil$) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (= (fun_app$h (lnth$ ?v0) (suc$ ?v1)) (fun_app$f (case_llist$b (undefined$c (suc$ ?v1)) (uvx$ ?v1)) ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 Nat$)) (= (lnth$a ?v0 (suc$ ?v1)) (fun_app$d (fun_app$bd (case_llist$a (undefined$d (suc$ ?v1))) (uvy$ ?v1)) ?v0)) ))
(assert (forall ((?v0 Nat_nat_prod_set$) (?v1 Nat_nat_prod_set$)) (= (= (uvz$ ?v0) (uvz$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (= ?v0 (pair$a ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_prod$)) (=> (forall ((?v2 Nat$) (?v3 Nat$)) (fun_app$ae ?v0 (pair$a ?v2 ?v3)) ) (fun_app$ae ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false) ))
(assert (forall ((?v0 Nat_nat_prod$)) (exists ((?v1 Nat$) (?v2 Nat$)) (= ?v0 (pair$a ?v1 ?v2)) ) ))
(assert (forall ((?v0 A_llist_llist$)) (= (fun_app$h (lnth$ ?v0) zero$) (fun_app$f (case_llist$b (undefined$c zero$) uvg$) ?v0)) ))
(assert (forall ((?v0 A_llist$)) (= (lnth$a ?v0 zero$) (fun_app$d (fun_app$bd (case_llist$a (undefined$d zero$)) uvh$) ?v0)) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$c (ldropn$ zero$) ?v0) ?v0) :pattern ((fun_app$c (ldropn$ zero$) ?v0)))))
(assert (forall ((?v0 Nat$)) (= (= ?v0 zero$) (fun_app$k (fun_app$v (case_nat$a true) uwa$) ?v0)) ))
(assert (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$k (fun_app$v (case_nat$a false) uwb$) ?v0)) ))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false) ))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$)) (not (= (suc$ ?v0) zero$)) ))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$ ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$k ?v0 zero$) (forall ((?v2 Nat$)) (=> (fun_app$k ?v0 ?v2) (fun_app$k ?v0 (suc$ ?v2))) )) (fun_app$k ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$k ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$k ?v0 (suc$ ?v2)) (fun_app$k ?v0 ?v2)) )) (fun_app$k ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (=> (not (= ?v0 zero$)) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1)) )) ))
(assert (forall ((?v0 Nat$)) (=> (= zero$ (suc$ ?v0)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) (not (= ?v0 zero$))) ))
(assert (forall ((?v0 Nat$)) (=> (= (suc$ ?v0) zero$) false) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$k (fun_app$l ?v0 ?v3) zero$) ) (and (forall ((?v3 Nat$)) (fun_app$k (fun_app$l ?v0 zero$) (suc$ ?v3)) ) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$k (fun_app$l ?v0 ?v3) ?v4) (fun_app$k (fun_app$l ?v0 (suc$ ?v3)) (suc$ ?v4))) ))) (fun_app$k (fun_app$l ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) false) )) false) ))
(assert (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$)) (! (= (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) zero$) ?v0) :pattern ((fun_app$o (case_nat$ ?v0) ?v1)))))
(assert (forall ((?v0 Bool) (?v1 Nat_bool_fun$)) (! (= (fun_app$k (fun_app$v (case_nat$a ?v0) ?v1) zero$) ?v0) :pattern ((fun_app$v (case_nat$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$)) (! (= (fun_app$i (fun_app$ab (case_nat$b ?v0) ?v1) zero$) ?v0) :pattern ((fun_app$ab (case_nat$b ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 Nat_a_llist_fun$) (?v3 Nat$)) (= (fun_app$q ?v0 (fun_app$h (fun_app$o (case_nat$ ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$) (not (fun_app$q ?v0 ?v1))) (and (= ?v3 (suc$ (pred$ ?v3))) (not (fun_app$q ?v0 (fun_app$h ?v2 (pred$ ?v3)))))))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$w ?v0 (fun_app$k (fun_app$v (case_nat$a ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$) (not (fun_app$w ?v0 ?v1))) (and (= ?v3 (suc$ (pred$ ?v3))) (not (fun_app$w ?v0 (fun_app$k ?v2 (pred$ ?v3)))))))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$k ?v0 (fun_app$i (fun_app$ab (case_nat$b ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$) (not (fun_app$k ?v0 ?v1))) (and (= ?v3 (suc$ (pred$ ?v3))) (not (fun_app$k ?v0 (fun_app$i ?v2 (pred$ ?v3)))))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 Nat_a_llist_fun$) (?v3 Nat$)) (= (fun_app$q ?v0 (fun_app$h (fun_app$o (case_nat$ ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$) (fun_app$q ?v0 ?v1)) (=> (= ?v3 (suc$ (pred$ ?v3))) (fun_app$q ?v0 (fun_app$h ?v2 (pred$ ?v3)))))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$w ?v0 (fun_app$k (fun_app$v (case_nat$a ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$) (fun_app$w ?v0 ?v1)) (=> (= ?v3 (suc$ (pred$ ?v3))) (fun_app$w ?v0 (fun_app$k ?v2 (pred$ ?v3)))))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$k ?v0 (fun_app$i (fun_app$ab (case_nat$b ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$) (fun_app$k ?v0 ?v1)) (=> (= ?v3 (suc$ (pred$ ?v3))) (fun_app$k ?v0 (fun_app$i ?v2 (pred$ ?v3)))))) ))
(assert (forall ((?v0 Nat$)) (= (pred$ ?v0) (fun_app$i (fun_app$ab (case_nat$b zero$) uwc$) ?v0)) ))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) false) )) false) ))
(assert (forall ((?v0 Nat_bool_fun$)) (=> (and (not (fun_app$k ?v0 zero$)) (exists ((?v1 Nat$)) (fun_app$k ?v0 ?v1) )) (exists ((?v1 Nat$)) (and (not (fun_app$k ?v0 ?v1)) (fun_app$k ?v0 (suc$ ?v1))) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (divides_aux$ (pair$a ?v0 ?v1)) (= ?v1 zero$)) :pattern ((pair$a ?v0 ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$i (minus$ ?v0) (suc$ ?v1)) (fun_app$i (fun_app$ab (case_nat$b zero$) uwc$) (fun_app$i (minus$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$i (minus$ ?v0) ?v0) zero$) :pattern ((minus$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$i (minus$ zero$) ?v0) zero$) :pattern ((fun_app$i (minus$ zero$) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$i (minus$ (fun_app$i (minus$ (suc$ ?v0)) ?v1)) (suc$ ?v2)) (fun_app$i (minus$ (fun_app$i (minus$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$i (minus$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$i (minus$ ?v0) ?v1)) :pattern ((fun_app$i (minus$ (suc$ ?v0)) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$i (minus$ ?v0) zero$) ?v0) :pattern ((minus$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (= (fun_app$i (minus$ ?v0) ?v1) zero$) (= (fun_app$i (minus$ ?v1) ?v0) zero$)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (=> (or (= ?v0 zero$a) (fun_app$q lnull$d ?v1)) false) (=> (and (not (= ?v0 zero$a)) (not (fun_app$q lnull$d ?v1))) false)) false) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$k ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$k ?v0 (suc$ ?v3)) (fun_app$k ?v0 ?v3)) )) (fun_app$k ?v0 (fun_app$i (minus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$i (minus$ (fun_app$i (minus$ ?v0) ?v1)) ?v2) (fun_app$i (minus$ (fun_app$i (minus$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$k (less$ zero$) ?v0) (= (suc$ (fun_app$i (minus$ ?v0) (suc$ zero$))) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$i (min$ ?v0) (suc$ ?v1)) (fun_app$i (fun_app$ab (case_nat$b zero$) (uwd$ ?v1)) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$i (min$ (suc$ ?v0)) ?v1) (fun_app$i (fun_app$ab (case_nat$b zero$) (uwe$ ?v0)) ?v1)) ))
(assert (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$k (less$ zero$) ?v0)) ))
(assert (forall ((?v0 Nat$)) (= (not (fun_app$k (less$ zero$) ?v0)) (= ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$k (less$ ?v0) zero$) false) :pattern ((less$ ?v0)))))
(assert (forall ((?v0 Nat$)) (fun_app$k (less$ ?v0) (suc$ ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ (suc$ ?v0)) (suc$ ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$k (less$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$k (less$ ?v0) ?v1)) :pattern ((fun_app$k (less$ (suc$ ?v0)) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$)) (= (fun_app$i (min$ ?v0) zero$) zero$) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$i (min$ zero$) ?v0) zero$) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$i (min$ (suc$ ?v0)) (suc$ ?v1)) (suc$ (fun_app$i (min$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$k (less$ ?v0) (suc$ zero$)) (= ?v0 zero$)) :pattern ((less$ ?v0)))))
(assert (forall ((?v0 Nat$)) (fun_app$k (less$ zero$) (suc$ ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$k (less$ zero$) (fun_app$i (minus$ ?v0) ?v1)) (fun_app$k (less$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$)) (=> (=> (= ?v0 zero$) false) (fun_app$k (less$ zero$) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (not (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$k (less$ ?v0) zero$) false) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$k ?v0 zero$) (forall ((?v2 Nat$)) (=> (and (fun_app$k (less$ zero$) ?v2) (not (fun_app$k ?v0 ?v2))) (exists ((?v3 Nat$)) (and (fun_app$k (less$ ?v3) ?v2) (not (fun_app$k ?v0 ?v3))) )) )) (fun_app$k ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$k (less$ ?v0) zero$)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ (fun_app$i (minus$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ ?v0) ?v2)) (fun_app$k (less$ (fun_app$i (minus$ ?v2) ?v1)) (fun_app$i (minus$ ?v2) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$i (min$ (fun_app$i (minus$ ?v0) ?v1)) (fun_app$i (minus$ ?v2) ?v1)) (fun_app$i (minus$ (fun_app$i (min$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (= ?v0 ?v1)) (or (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (=> (fun_app$k (less$ ?v0) ?v1) (fun_app$k (fun_app$l ?v2 ?v1) ?v0)) (and (=> (= ?v0 ?v1) (fun_app$k (fun_app$l ?v2 ?v1) ?v0)) (=> (fun_app$k (less$ ?v1) ?v0) (fun_app$k (fun_app$l ?v2 ?v1) ?v0)))) (fun_app$k (fun_app$l ?v2 ?v1) ?v0)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (not (fun_app$k ?v0 ?v2)) (exists ((?v3 Nat$)) (and (fun_app$k (less$ ?v3) ?v2) (not (fun_app$k ?v0 ?v3))) )) ) (fun_app$k ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$k (less$ ?v3) ?v2) (fun_app$k ?v0 ?v3)) ) (fun_app$k ?v0 ?v2)) ) (fun_app$k ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (not (= ?v1 ?v0))) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$k (less$ ?v0) ?v0) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$k (less$ ?v0) ?v1) false) (=> (fun_app$k (less$ ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$k (less$ ?v0) ?v0)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$k (less$ (fun_app$i ?v0 ?v3)) (fun_app$i ?v0 (suc$ ?v3))) ) (fun_app$k (less$ ?v1) ?v2)) (fun_app$k (less$ (fun_app$i ?v0 ?v1)) (fun_app$i ?v0 ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (forall ((?v3 Nat$)) (fun_app$k (less$ (fun_app$i ?v0 ?v3)) (fun_app$i ?v0 (suc$ ?v3))) ) (= (fun_app$k (less$ (fun_app$i ?v0 ?v1)) (fun_app$i ?v0 ?v2)) (fun_app$k (less$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (not (fun_app$k (less$ ?v0) ?v1)) (= (fun_app$k (less$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :pattern ((fun_app$k (less$ ?v0) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (fun_app$k (less$ ?v0) ?v1)) (fun_app$k (less$ ?v0) (suc$ ?v1))) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ ?v0) (suc$ ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (not (= (suc$ ?v0) ?v1))) (fun_app$k (less$ (suc$ ?v0)) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ ?v1) ?v2)) (fun_app$k (less$ (suc$ ?v0)) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (and (forall ((?v3 Nat$)) (fun_app$k (fun_app$l ?v2 ?v3) (suc$ ?v3)) ) (forall ((?v3 Nat$) (?v4 Nat$) (?v5 Nat$)) (=> (and (fun_app$k (less$ ?v3) ?v4) (and (fun_app$k (less$ ?v4) ?v5) (and (fun_app$k (fun_app$l ?v2 ?v3) ?v4) (fun_app$k (fun_app$l ?v2 ?v4) ?v5)))) (fun_app$k (fun_app$l ?v2 ?v3) ?v5)) ))) (fun_app$k (fun_app$l ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (and (forall ((?v3 Nat$)) (=> (= ?v1 (suc$ ?v3)) (fun_app$k ?v2 ?v3)) ) (forall ((?v3 Nat$)) (=> (and (fun_app$k (less$ ?v3) ?v1) (fun_app$k ?v2 (suc$ ?v3))) (fun_app$k ?v2 ?v3)) ))) (fun_app$k ?v2 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (and (=> (= ?v1 (suc$ ?v0)) false) (forall ((?v2 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v2) (= ?v1 (suc$ ?v2))) false) ))) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$k (less$ ?v0) (suc$ ?v1)) (and (=> (fun_app$k (less$ ?v0) ?v1) false) (=> (= ?v0 ?v1) false))) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ (suc$ ?v0)) ?v1) (fun_app$k (less$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$k (less$ (suc$ ?v0)) ?v1) (forall ((?v2 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v2) (= ?v1 (suc$ ?v2))) false) )) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$k (less$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$k (less$ ?v0) ?v1)) (fun_app$k (less$ ?v1) (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$k (less$ (suc$ ?v0)) ?v1) (exists ((?v2 Nat$)) (and (= ?v1 (suc$ ?v2)) (fun_app$k (less$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$k (less$ ?v0) (suc$ ?v1)) (or (fun_app$k (less$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$k (less$ ?v0) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$k (less$ ?v0) (suc$ ?v1)) (or (= ?v0 zero$) (exists ((?v2 Nat$)) (and (= ?v0 (suc$ ?v2)) (fun_app$k (less$ ?v2) ?v1)) ))) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$k (less$ zero$) ?v0) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1)) )) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$k (less$ zero$) ?v0) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1)) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$k (less$ zero$) ?v0) (fun_app$k (less$ zero$) ?v1)) (fun_app$k (less$ (fun_app$i (minus$ ?v1) ?v0)) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (= (suc$ (fun_app$i (minus$ ?v1) (suc$ ?v0))) (fun_app$i (minus$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$k (less$ (fun_app$i (minus$ ?v0) ?v1)) (suc$ ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ zero$) ?v0) (fun_app$k (less$ (fun_app$i (minus$ ?v0) (suc$ ?v1))) ?v0)) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$k (less$ zero$) ?v0) (= (suc$ (fun_app$i (minus$ ?v0) one$)) ?v0)) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$k (less$ zero$) (of_nat$ ?v0)) (fun_app$k (less$ zero$) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (of_nat$ ?v0) (of_nat$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$)) (= (= (of_nat$ ?v0) zero$) (= ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (= (= zero$ (of_nat$ ?v0)) (= zero$ ?v0)) ))
(check-sat)
(exit)

