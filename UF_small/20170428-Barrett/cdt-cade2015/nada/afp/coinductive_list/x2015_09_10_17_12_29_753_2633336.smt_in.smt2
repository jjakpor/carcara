(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Enat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_fun$ 0)
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-fun lNil$a () A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$) A_llist$)
(declare-fun ltl$a (A_llist_llist$) A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$) A_llist_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ () Nat_option$)
(declare-fun the$ (Nat_option$) Nat$)
(declare-fun some$ (Nat$) Nat_option$)
(declare-fun rep_enat$ (Enat$) Nat_option$)
(declare-fun abs_enat$ (Nat_option$) Enat$)
(declare-sort A_llist_llist_llist$ 0)
(declare-fun lNil$b () A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$) A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun n$ () Nat$)
(declare-fun uu$ (A$) A_llist_a_llist_fun$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$) Enat_bool_fun$)
(declare-fun size$ (Enat$) Nat$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun zero$ () Nat$)
(declare-fun ldrop$ (Enat$) A_llist_a_llist_fun$)
(declare-fun less$a (Nat$) Nat_bool_fun$)
(declare-fun llast$ (A_llist$) A$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun minus$ (Nat$) Nat_nat_fun$)
(declare-fun zero$a () Enat$)
(declare-fun ldrop$a (Enat$) A_llist_llist_a_llist_llist_fun$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun ldropn$a (Nat$) A_llist_llist_a_llist_llist_fun$)
(declare-fun less_eq$ (Enat$) Enat_bool_fun$)
(declare-fun llength$ () A_llist_enat_fun$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$d (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$e (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$f (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$g (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$h (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$i (Enat_enat_fun$ Enat$) Enat$)
(declare-fun fun_app$j (Nat_enat_fun$ Nat$) Enat$)
(declare-fun fun_app$k (Enat_nat_fun$ Enat$) Nat$)
(declare-fun fun_app$l (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun lconcat$a (A_llist_llist_llist$) A_llist_llist$)
(declare-fun less_eq$a (Nat$) Nat_bool_fun$)
(declare-fun llength$a (A_llist_llist$) Enat$)
(declare-fun the_enat$ (Enat$) Nat$)
(declare-fun size_enat$ (Enat$) Nat$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun gen_llength$ (Nat$) A_llist_enat_fun$)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$a (A_llist_llist$ A_llist_llist$) Bool)
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (lCons$ ?v0 ?v1)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))))
(assert (not thesis$))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lconcat$ xssa$) (lCons$ ?v0 ?v1)) thesis$) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (not (lnull$ (lconcat$ xssa$))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$a (pred_llist$ ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (fun_app$a (pred_llist$ ?v0) ?v2))) :pattern ((fun_app$a (pred_llist$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$a (lmember$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$a (lmember$ ?v0) ?v2))) :pattern ((fun_app$a (lmember$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$a (lstrict_prefix$ ?v1) ?v3))) :pattern ((fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (= (fun_app$b (lsetp$ ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_llist$)) (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2)) ) (exists ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$b (lsetp$ ?v2) ?v3))) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (fun_app$b (lsetp$ ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2)) false) ) (forall ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (=> (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$b (lsetp$ ?v2) ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A$)) (=> (fun_app$b (lsetp$ ?v0) ?v1) (fun_app$b (lsetp$ (lCons$ ?v2 ?v0)) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (fun_app$b (lsetp$ (lCons$ ?v0 ?v1)) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (llast$ (lCons$ ?v0 (lCons$ ?v1 ?v2))) (llast$ (lCons$ ?v1 ?v2))) :pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2))))))
(assert (fun_app$c (less$ (enat$ zero$)) (fun_app$d llength$ (lconcat$ xssa$))))
(assert (fun_app$c (less$ (enat$ n$)) (fun_app$d llength$ (lconcat$ xss$))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)) ) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$a (lstrict_prefix$ ?v0) ?v1) (fun_app$c (less$ (fun_app$d llength$ ?v0)) (fun_app$d llength$ ?v1))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$a (lstrict_prefix$ ?v3) ?v2) (fun_app$a ?v0 ?v3)) ) (fun_app$a ?v0 ?v2)) ) (fun_app$a ?v0 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (llast$ (lCons$ ?v0 ?v1)) (ite (lnull$ ?v1) ?v0 (llast$ ?v1))) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (lnull$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (lnull$ ?v0))) ))
(assert (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Nat$)) (=> (fun_app$c (less$ ?v0) (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2)) )) ))
(assert (not (fun_app$e (less$a zero$) zero$)))
(assert (= llength$ (gen_llength$ zero$)))
(assert (forall ((?v0 Nat$) (?v1 A_llist$)) (=> (fun_app$c (less$ (enat$ ?v0)) (fun_app$d llength$ ?v1)) (= (llast$ (fun_app$ (ldropn$ ?v0) ?v1)) (llast$ ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (=> (= (fun_app$ (ldropn$ ?v0) ?v1) (lCons$ ?v2 ?v3)) (fun_app$c (less$ (enat$ ?v0)) (fun_app$d llength$ ?v1))) ))
(assert (forall ((?v0 Nat$)) (! (= (size_enat$ (enat$ ?v0)) zero$) :pattern ((enat$ ?v0)))))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (forall ((?v2 Enat$)) (=> (forall ((?v3 Enat$)) (=> (fun_app$c (less$ ?v3) ?v2) (fun_app$c ?v0 ?v3)) ) (fun_app$c ?v0 ?v2)) ) (fun_app$c ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (fun_app$c (less$ ?v0) (fun_app$d llength$ ?v1)) (= (llast$ (fun_app$ (ldrop$ ?v0) ?v1)) (llast$ ?v1))) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$c (less$ zero$a) ?v0) (not (= ?v0 zero$a))) ))
(assert (forall ((?v0 A_llist$)) (= (fun_app$ (ldrop$ zero$a) ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$)) (! (=> (lnull$ ?v0) (= (fun_app$d llength$ ?v0) zero$a)) :pattern ((fun_app$d llength$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (= (= (fun_app$d llength$ ?v0) zero$a) (lnull$ ?v0)) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ (ldropn$ zero$) ?v0) ?v0) :pattern ((fun_app$ (ldropn$ zero$) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$c (less$ (enat$ ?v0)) (enat$ ?v1)) (fun_app$e (less$a ?v0) ?v1)) :pattern ((fun_app$c (less$ (enat$ ?v0)) (enat$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 A_llist$)) (! (= (fun_app$ (ldrop$ (enat$ ?v0)) ?v1) (fun_app$ (ldropn$ ?v0) ?v1)) :pattern ((fun_app$ (ldrop$ (enat$ ?v0)) ?v1)))))
(assert (forall ((?v0 Enat$)) (not (fun_app$c (less$ ?v0) zero$a)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (=> (or (= ?v0 zero$a) (lnull$ ?v1)) false) (=> (and (not (= ?v0 zero$a)) (not (lnull$ ?v1))) false)) false) ))
(assert (= zero$a (enat$ zero$)))
(assert (forall ((?v0 Nat$)) (= (= zero$a (enat$ ?v0)) (= ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (= (= (enat$ ?v0) zero$a) (= ?v0 zero$)) ))
(assert (forall ((?v0 Enat$) (?v1 Nat$)) (=> (and (fun_app$c (less$ ?v0) (enat$ ?v1)) (forall ((?v2 Nat$)) (=> (and (= ?v0 (enat$ ?v2)) (fun_app$e (less$a ?v2) ?v1)) false) )) false) ))
(assert (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$)) ))
(assert (forall ((?v0 Enat$)) (= (= zero$a ?v0) (= ?v0 zero$a)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (=> (= (fun_app$ (ldrop$ ?v0) ?v1) (lCons$ ?v2 ?v3)) (fun_app$c (less$ ?v0) (fun_app$d llength$ ?v1))) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$e (less$a ?v0) zero$) false) :pattern ((less$a ?v0)))))
(assert (forall ((?v0 Nat$)) (= (not (fun_app$e (less$a zero$) ?v0)) (= ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$e (less$a zero$) ?v0)) ))
(assert (forall ((?v0 Nat$)) (! (= (size$ (enat$ ?v0)) zero$) :pattern ((enat$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (ldropn$ ?v0) ?v1)) (fun_app$c (less_eq$ (fun_app$d llength$ ?v1)) (enat$ ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (ldrop$ ?v0) ?v1)) (fun_app$c (less_eq$ (fun_app$d llength$ ?v1)) ?v0)) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$c (less_eq$ ?v0) zero$a) (= ?v0 zero$a)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (= ?v0 ?v1)) (or (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (=> (fun_app$e (less$a ?v0) ?v1) (fun_app$e (fun_app$f ?v2 ?v1) ?v0)) (and (=> (= ?v0 ?v1) (fun_app$e (fun_app$f ?v2 ?v1) ?v0)) (=> (fun_app$e (less$a ?v1) ?v0) (fun_app$e (fun_app$f ?v2 ?v1) ?v0)))) (fun_app$e (fun_app$f ?v2 ?v1) ?v0)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (not (fun_app$e ?v0 ?v2)) (exists ((?v3 Nat$)) (and (fun_app$e (less$a ?v3) ?v2) (not (fun_app$e ?v0 ?v3))) )) ) (fun_app$e ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$e (less$a ?v3) ?v2) (fun_app$e ?v0 ?v3)) ) (fun_app$e ?v0 ?v2)) ) (fun_app$e ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (not (= ?v1 ?v0))) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$e (less$a ?v0) ?v0) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$e (less$a ?v0) ?v1) false) (=> (fun_app$e (less$a ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 Enat$)) (fun_app$c (less_eq$ zero$a) ?v0) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$e (less$a ?v0) ?v0)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$c (less_eq$ ?v3) ?v4) (fun_app$c (fun_app$g ?v0 ?v3) ?v4)) ) (=> (fun_app$c (fun_app$g ?v0 ?v1) ?v2) (fun_app$c (fun_app$g ?v0 ?v2) ?v1))) (fun_app$c (fun_app$g ?v0 ?v2) ?v1)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$e (less_eq$a ?v3) ?v4) (fun_app$e (fun_app$f ?v0 ?v3) ?v4)) ) (=> (fun_app$e (fun_app$f ?v0 ?v1) ?v2) (fun_app$e (fun_app$f ?v0 ?v2) ?v1))) (fun_app$e (fun_app$f ?v0 ?v2) ?v1)) ))
(assert (fun_app$e (less_eq$a zero$) zero$))
(assert (forall ((?v0 Enat$) (?v1 Nat$)) (=> (fun_app$c (less_eq$ ?v0) (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2)) )) ))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false) ))
(assert (forall ((?v0 Nat$)) (=> (=> (= ?v0 zero$) false) (fun_app$e (less$a zero$) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (not (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$e (less$a ?v0) zero$) false) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$e ?v0 zero$) (forall ((?v2 Nat$)) (=> (and (fun_app$e (less$a zero$) ?v2) (not (fun_app$e ?v0 ?v2))) (exists ((?v3 Nat$)) (and (fun_app$e (less$a ?v3) ?v2) (not (fun_app$e ?v0 ?v3))) )) )) (fun_app$e ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$e (less$a ?v0) zero$)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (forall ((?v2 Nat$)) (=> (fun_app$c (less$ ?v0) (enat$ ?v2)) (fun_app$c (less$ ?v1) (enat$ ?v2))) ) (fun_app$c (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$)) (fun_app$c (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (fun_app$e (less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (fun_app$c (less_eq$ ?v0) ?v2) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (fun_app$e (less_eq$a ?v0) ?v2) false)) ) ) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (fun_app$c (less_eq$ ?v2) ?v0) true)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (fun_app$e (less_eq$a ?v2) ?v0) true)) ) ) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (fun_app$c (less_eq$ ?v0) ?v2) true)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (fun_app$e (less_eq$a ?v0) ?v2) true)) ) ) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (fun_app$c (less_eq$ ?v2) ?v0) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (fun_app$e (less_eq$a ?v2) ?v0) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (fun_app$e (less_eq$a zero$) ?v0) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$e (less_eq$a ?v0) zero$) (= ?v0 zero$)) :pattern ((less_eq$a ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$c (less_eq$ (enat$ ?v0)) (enat$ ?v1)) (fun_app$e (less_eq$a ?v0) ?v1)) :pattern ((fun_app$c (less_eq$ (enat$ ?v0)) (enat$ ?v1))))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$e (less_eq$a zero$) ?v0) true) :pattern ((fun_app$e (less_eq$a zero$) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (not (= ?v0 ?v1))) (fun_app$e (less$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (or (fun_app$e (less$a ?v0) ?v1) (= ?v0 ?v1)) (fun_app$e (less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$e (less$a ?v3) ?v4) (fun_app$e (less$a (fun_app$h ?v0 ?v3)) (fun_app$h ?v0 ?v4))) ) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less_eq$a (fun_app$h ?v0 ?v1)) (fun_app$h ?v0 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$e (less_eq$a ?v0) ?v1) (or (fun_app$e (less$a ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$e (less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less_eq$a ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$e (less$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (not (fun_app$e ?v0 zero$)) (fun_app$e ?v0 ?v1)) (exists ((?v2 Nat$)) (and (fun_app$e (less_eq$a ?v2) ?v1) (and (forall ((?v3 Nat$)) (=> (fun_app$e (less$a ?v3) ?v2) (not (fun_app$e ?v0 ?v3))) ) (fun_app$e ?v0 ?v2))) )) ))
(assert (forall ((?v0 Enat$)) (fun_app$c (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (fun_app$e (less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (or (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (=> (fun_app$c (less_eq$ ?v0) ?v1) (= (fun_app$c (less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$c (less_eq$ ?v1) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (fun_app$e (less_eq$a ?v0) ?v1) (= (fun_app$e (less_eq$a ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$e (less_eq$a ?v1) ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v2)) (fun_app$c (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v2)) (fun_app$c (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v2) ?v0)) (fun_app$c (less_eq$ ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v2) ?v0)) (fun_app$e (less_eq$a ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) (fun_app$i ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$c (less_eq$ ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$c (less_eq$ ?v0) (fun_app$j ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5))) ))) (fun_app$c (less_eq$ ?v0) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$e (less_eq$a ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$e (less_eq$a ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) (fun_app$h ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5))) ))) (fun_app$e (less_eq$a ?v0) (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (fun_app$c (less_eq$ (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$c (less_eq$ (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (fun_app$e (less_eq$a (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$e (less_eq$a (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (fun_app$c (less_eq$ (fun_app$j ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5))) ))) (fun_app$c (less_eq$ (fun_app$j ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (fun_app$e (less_eq$a (fun_app$h ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5))) ))) (fun_app$e (less_eq$a (fun_app$h ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$c (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (= ?v1 ?v2)) (fun_app$e (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (= (fun_app$i ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$c (less_eq$ (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (= (fun_app$k ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$e (less_eq$a (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (= (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5))) ))) (fun_app$c (less_eq$ (fun_app$j ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (= (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5))) ))) (fun_app$e (less_eq$a (fun_app$h ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 ?v1) (fun_app$c (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$e (less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$c (less_eq$ ?v1) ?v2)) (fun_app$c (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$c (less_eq$ ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$e (less_eq$a ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5))) ))) (fun_app$c (less_eq$ ?v0) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5))) ))) (fun_app$e (less_eq$a ?v0) (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$c (less_eq$ ?v3) ?v4) (fun_app$c (fun_app$g ?v0 ?v3) ?v4)) ) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$c (fun_app$g ?v0 ?v4) ?v3) (fun_app$c (fun_app$g ?v0 ?v3) ?v4)) )) (fun_app$c (fun_app$g ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$e (less_eq$a ?v3) ?v4) (fun_app$e (fun_app$f ?v0 ?v3) ?v4)) ) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$e (fun_app$f ?v0 ?v4) ?v3) (fun_app$e (fun_app$f ?v0 ?v3) ?v4)) )) (fun_app$e (fun_app$f ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (=> (fun_app$c (less_eq$ ?v0) ?v1) false) (=> (fun_app$c (less_eq$ ?v1) ?v0) false)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$e (less_eq$a ?v0) ?v1) false) (=> (fun_app$e (less_eq$a ?v1) ?v0) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= ?v0 ?v1) (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0))) ))
(assert (forall ((?v0 Enat$)) (not (fun_app$c (less$ ?v0) ?v0)) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$e (less$a ?v0) ?v0)) ))
(assert (forall ((?v0 Enat$)) (not (fun_app$c (less$ ?v0) ?v0)) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$e (less$a ?v0) ?v0)) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (fun_app$c (less$ ?v0) ?v2) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (fun_app$e (less$a ?v0) ?v2) false)) ) ) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (fun_app$c (less$ ?v2) ?v0) true)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (fun_app$e (less$a ?v2) ?v0) true)) ) ) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (not (= ?v2 ?v0)) true)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (not (= ?v2 ?v0)) true)) ) ) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v2) ?v1) (= (= ?v2 ?v0) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v2) ?v1) (= (= ?v2 ?v0) false)) ) ) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (fun_app$c (less$ ?v0) ?v2) true)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (fun_app$e (less$a ?v0) ?v2) true)) ) ) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (fun_app$c (less$ ?v2) ?v0) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (fun_app$e (less$a ?v2) ?v0) false)) ) ) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (not (= ?v2 ?v0)) true)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (not (= ?v2 ?v0)) true)) ) ) ))
(assert (forall ((?v0 Enat$)) (exists ((?v1 Enat$)) (forall ((?v2 Enat$)) (=> (fun_app$c (less$ ?v1) ?v2) (= (= ?v2 ?v0) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$e (less$a ?v1) ?v2) (= (= ?v2 ?v0) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (fun_app$e (less$a ?v0) ?v1) ) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (or (fun_app$c (less$ ?v0) ?v1) (or (= ?v0 ?v1) (fun_app$c (less$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$e (less$a ?v0) ?v1) (or (= ?v0 ?v1) (fun_app$e (less$a ?v1) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (not (fun_app$c (less$ ?v0) ?v1)) (= (not (fun_app$c (less$ ?v1) ?v0)) (= ?v1 ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$e (less$a ?v0) ?v1)) (= (not (fun_app$e (less$a ?v1) ?v0)) (= ?v1 ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$c (less$ ?v0) ?v1) false) (=> (fun_app$c (less$ ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$e (less$a ?v0) ?v1) false) (=> (fun_app$e (less$a ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat_bool_fun$) (?v2 Enat_bool_fun$) (?v3 Enat_bool_fun$)) (=> (and (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (fun_app$c ?v0 ?v5) (fun_app$c ?v1 ?v5))) ) ) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (fun_app$c ?v2 ?v5) (fun_app$c ?v3 ?v5))) ) )) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (or (fun_app$c ?v0 ?v5) (fun_app$c ?v2 ?v5)) (or (fun_app$c ?v1 ?v5) (fun_app$c ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (fun_app$e ?v0 ?v5) (fun_app$e ?v1 ?v5))) ) ) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (fun_app$e ?v2 ?v5) (fun_app$e ?v3 ?v5))) ) )) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (or (fun_app$e ?v0 ?v5) (fun_app$e ?v2 ?v5)) (or (fun_app$e ?v1 ?v5) (fun_app$e ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat_bool_fun$) (?v2 Enat_bool_fun$) (?v3 Enat_bool_fun$)) (=> (and (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (fun_app$c ?v0 ?v5) (fun_app$c ?v1 ?v5))) ) ) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (fun_app$c ?v2 ?v5) (fun_app$c ?v3 ?v5))) ) )) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v5) ?v4) (= (and (fun_app$c ?v0 ?v5) (fun_app$c ?v2 ?v5)) (and (fun_app$c ?v1 ?v5) (fun_app$c ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (fun_app$e ?v0 ?v5) (fun_app$e ?v1 ?v5))) ) ) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (fun_app$e ?v2 ?v5) (fun_app$e ?v3 ?v5))) ) )) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v5) ?v4) (= (and (fun_app$e ?v0 ?v5) (fun_app$e ?v2 ?v5)) (and (fun_app$e ?v1 ?v5) (fun_app$e ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat_bool_fun$) (?v2 Enat_bool_fun$) (?v3 Enat_bool_fun$)) (=> (and (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (fun_app$c ?v0 ?v5) (fun_app$c ?v1 ?v5))) ) ) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (fun_app$c ?v2 ?v5) (fun_app$c ?v3 ?v5))) ) )) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (or (fun_app$c ?v0 ?v5) (fun_app$c ?v2 ?v5)) (or (fun_app$c ?v1 ?v5) (fun_app$c ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (fun_app$e ?v0 ?v5) (fun_app$e ?v1 ?v5))) ) ) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (fun_app$e ?v2 ?v5) (fun_app$e ?v3 ?v5))) ) )) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (or (fun_app$e ?v0 ?v5) (fun_app$e ?v2 ?v5)) (or (fun_app$e ?v1 ?v5) (fun_app$e ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat_bool_fun$) (?v2 Enat_bool_fun$) (?v3 Enat_bool_fun$)) (=> (and (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (fun_app$c ?v0 ?v5) (fun_app$c ?v1 ?v5))) ) ) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (fun_app$c ?v2 ?v5) (fun_app$c ?v3 ?v5))) ) )) (exists ((?v4 Enat$)) (forall ((?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (= (and (fun_app$c ?v0 ?v5) (fun_app$c ?v2 ?v5)) (and (fun_app$c ?v1 ?v5) (fun_app$c ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (fun_app$e ?v0 ?v5) (fun_app$e ?v1 ?v5))) ) ) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (fun_app$e ?v2 ?v5) (fun_app$e ?v3 ?v5))) ) )) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (= (and (fun_app$e ?v0 ?v5) (fun_app$e ?v2 ?v5)) (and (fun_app$e ?v1 ?v5) (fun_app$e ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (not (fun_app$c (less$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (not (fun_app$e (less$a ?v1) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (not (= ?v1 ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (not (= ?v1 ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (= (not (fun_app$c (less$ ?v1) ?v0)) true)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (= (not (fun_app$e (less$a ?v1) ?v0)) true)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Bool)) (=> (fun_app$c (less$ ?v0) ?v1) (= (=> (fun_app$c (less$ ?v1) ?v0) ?v2) true)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Bool)) (=> (fun_app$e (less$a ?v0) ?v1) (= (=> (fun_app$e (less$a ?v1) ?v0) ?v2) true)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (= (= ?v0 ?v1) false)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (= (= ?v0 ?v1) false)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (= (= ?v1 ?v0) false)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (= (= ?v1 ?v0) false)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v0)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v0)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v0)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v0)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v0)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v0)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v2)) (fun_app$c (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v2)) (fun_app$e (less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v2)) (fun_app$c (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v2)) (fun_app$e (less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less$ ?v2) ?v0)) (fun_app$c (less$ ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v2) ?v0)) (fun_app$e (less$a ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5))) ))) (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5))) ))) (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c (less$ (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$c (less$ (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (fun_app$e (less$a (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$e (less$a (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (fun_app$c (less$ (fun_app$j ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5))) ))) (fun_app$c (less$ (fun_app$j ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less$a (fun_app$h ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5))) ))) (fun_app$e (less$a (fun_app$h ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$c (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (= ?v1 ?v2)) (fun_app$e (less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (= (fun_app$i ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$c (less$ (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (= (fun_app$k ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$e (less$a (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (= (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5))) ))) (fun_app$c (less$ (fun_app$j ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (= (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5))) ))) (fun_app$e (less$a (fun_app$h ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (=> (not false) (fun_app$c (less$ ?v1) ?v0))) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (=> (not false) (fun_app$e (less$a ?v1) ?v0))) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$c (less$ ?v1) ?v2)) (fun_app$c (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$e (less$a ?v1) ?v2)) (fun_app$e (less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5))) ))) (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5))) ))) (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (forall ((?v2 Enat$)) (=> (forall ((?v3 Enat$)) (=> (fun_app$c (less$ ?v3) ?v2) (fun_app$c ?v0 ?v3)) ) (fun_app$c ?v0 ?v2)) ) (fun_app$c ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$e (less$a ?v3) ?v2) (fun_app$e ?v0 ?v3)) ) (fun_app$e ?v0 ?v2)) ) (fun_app$e ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (=> (fun_app$c (less$ ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$c (less$ ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$e (less$a ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$e (less$a ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (fun_app$c (less$ ?v0) ?v1)) (or (fun_app$c (less$ ?v1) ?v0) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$e (less$a ?v0) ?v1)) (or (fun_app$e (less$a ?v1) ?v0) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (= ?v0 ?v1)) (or (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (= ?v0 ?v1)) (or (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v0))) ))
(assert (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$a) false) (=> (not (= ?v0 zero$a)) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c (less_eq$ ?v0) ?v1) (not (= ?v1 ?v0)))) :pattern ((fun_app$c (less$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less_eq$a ?v0) ?v1) (not (= ?v1 ?v0)))) :pattern ((fun_app$e (less$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$c (less$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less_eq$a ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$e (less$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$c (less$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less_eq$a ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$e (less$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c (less_eq$ ?v0) ?v1) (not (fun_app$c (less_eq$ ?v1) ?v0)))) :pattern ((fun_app$c (less$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less_eq$a ?v0) ?v1) (not (fun_app$e (less_eq$a ?v1) ?v0)))) :pattern ((fun_app$e (less$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$c (less_eq$ ?v0) ?v1) (or (fun_app$c (less$ ?v0) ?v1) (= ?v1 ?v0))) :pattern ((fun_app$c (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$e (less_eq$a ?v0) ?v1) (or (fun_app$e (less$a ?v0) ?v1) (= ?v1 ?v0))) :pattern ((fun_app$e (less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$c (less_eq$ ?v0) ?v1) (or (fun_app$c (less$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$c (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$e (less_eq$a ?v0) ?v1) (or (fun_app$e (less$a ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$e (less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$c (less_eq$ ?v0) ?v1) (or (fun_app$c (less$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$c (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$e (less_eq$a ?v0) ?v1) (or (fun_app$e (less$a ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$e (less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (fun_app$c (less$ ?v0) ?v1)) (fun_app$c (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$e (less$a ?v0) ?v1)) (fun_app$e (less_eq$a ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (fun_app$c (less_eq$ ?v0) ?v1)) (fun_app$c (less$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$e (less_eq$a ?v0) ?v1)) (fun_app$e (less$a ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c (less_eq$ (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$c (less$ (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (fun_app$c (less_eq$ (fun_app$j ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5))) ))) (fun_app$c (less$ (fun_app$j ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (fun_app$e (less_eq$a (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$e (less$a (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e (less_eq$a (fun_app$h ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5))) ))) (fun_app$e (less$a (fun_app$h ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$c (less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5))) ))) (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5))) ))) (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less_eq$ ?v2) ?v0)) (fun_app$c (less$ ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less_eq$a ?v2) ?v0)) (fun_app$e (less$a ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v2)) (fun_app$c (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less_eq$ ?v1) ?v2)) (fun_app$c (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less$ ?v0) ?v1) (fun_app$c (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less$a ?v0) ?v1) (fun_app$e (less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (fun_app$c (less$ (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$c (less$ (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (and (fun_app$e (less$a (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$e (less$a (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (fun_app$c (less$ (fun_app$j ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$c (less_eq$ (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5))) ))) (fun_app$c (less$ (fun_app$j ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (fun_app$e (less$a (fun_app$h ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5))) ))) (fun_app$e (less$a (fun_app$h ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) (fun_app$i ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$c (less$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$c (less$ ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$c (less_eq$ ?v0) (fun_app$j ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$c (less$ (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5))) ))) (fun_app$c (less$ ?v0) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$e (less_eq$a ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$c (less$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$c (less$ ?v4) ?v5) (fun_app$e (less$a (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$e (less$a ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) (fun_app$h ?v1 ?v2)) (and (fun_app$e (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$e (less$a ?v4) ?v5) (fun_app$e (less$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5))) ))) (fun_app$e (less$a ?v0) (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less$ ?v2) ?v0)) (fun_app$c (less$ ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less$a ?v2) ?v0)) (fun_app$e (less$a ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v2)) (fun_app$c (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v2)) (fun_app$e (less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v2)) (fun_app$c (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v2)) (fun_app$e (less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1))) (fun_app$c (less$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (not (= ?v0 ?v1))) (fun_app$e (less$a ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less_eq$ ?v0) ?v1) (= (not (fun_app$c (less$ ?v0) ?v1)) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (= (not (fun_app$e (less$a ?v0) ?v1)) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less_eq$ ?v0) ?v1) (or (fun_app$c (less$ ?v0) ?v1) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (or (fun_app$e (less$a ?v0) ?v1) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$c (less_eq$ ?v0) ?v1) (not (fun_app$c (less$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (not (fun_app$e (less$a ?v1) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (not (= ?v0 ?v1)) (fun_app$c (less_eq$ ?v0) ?v1)) (fun_app$c (less$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (fun_app$e (less_eq$a ?v0) ?v1)) (fun_app$e (less$a ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (=> (not (fun_app$c (less$ ?v0) ?v1)) (= (fun_app$c (less_eq$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$c (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (not (fun_app$e (less$a ?v0) ?v1)) (= (fun_app$e (less_eq$a ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$e (less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (not (fun_app$c (less$ ?v0) ?v1)) (fun_app$c (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$e (less$a ?v0) ?v1)) (fun_app$e (less_eq$a ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (not (fun_app$c (less_eq$ ?v0) ?v1)) (fun_app$c (less$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$e (less_eq$a ?v0) ?v1)) (fun_app$e (less$a ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (or (fun_app$c (less_eq$ ?v0) ?v1) (fun_app$c (less$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less$a ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_bool_fun$)) (=> (and (fun_app$c (less$ ?v0) ?v1) (and (fun_app$c ?v2 ?v0) (not (fun_app$c ?v2 ?v1)))) (exists ((?v3 Enat$)) (and (fun_app$c (less_eq$ ?v0) ?v3) (and (fun_app$c (less_eq$ ?v3) ?v1) (and (forall ((?v4 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v4) (fun_app$c (less$ ?v4) ?v3)) (fun_app$c ?v2 ?v4)) ) (forall ((?v4 Enat$)) (=> (forall ((?v5 Enat$)) (=> (and (fun_app$c (less_eq$ ?v0) ?v5) (fun_app$c (less$ ?v5) ?v4)) (fun_app$c ?v2 ?v5)) ) (fun_app$c (less_eq$ ?v4) ?v3)) )))) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$e (less$a ?v0) ?v1) (and (fun_app$e ?v2 ?v0) (not (fun_app$e ?v2 ?v1)))) (exists ((?v3 Nat$)) (and (fun_app$e (less_eq$a ?v0) ?v3) (and (fun_app$e (less_eq$a ?v3) ?v1) (and (forall ((?v4 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v4) (fun_app$e (less$a ?v4) ?v3)) (fun_app$e ?v2 ?v4)) ) (forall ((?v4 Nat$)) (=> (forall ((?v5 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v5) (fun_app$e (less$a ?v5) ?v4)) (fun_app$e ?v2 ?v5)) ) (fun_app$e (less_eq$a ?v4) ?v3)) )))) )) ))
(assert (= (the_enat$ zero$a) zero$))
(assert (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 Nat$)) (=> (fun_app$c (less_eq$ (enat$ ?v0)) (fun_app$d llength$ ?v1)) (fun_app$c (less_eq$ (enat$ (fun_app$h (minus$ ?v0) ?v2))) (fun_app$d llength$ (fun_app$ (ldropn$ ?v2) ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (! (=> (fun_app$c (less_eq$ (llength$a ?v0)) (enat$ ?v1)) (= (fun_app$l (ldropn$a ?v1) ?v0) lNil$a)) :pattern ((fun_app$l (ldropn$a ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 Nat$)) (! (=> (fun_app$c (less_eq$ (fun_app$d llength$ ?v0)) (enat$ ?v1)) (= (fun_app$ (ldropn$ ?v1) ?v0) lNil$)) :pattern ((fun_app$ (ldropn$ ?v1) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 A_llist_llist$)) (= (= (fun_app$l (ldropn$a ?v0) ?v1) lNil$a) (fun_app$c (less_eq$ (llength$a ?v1)) (enat$ ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 A_llist$)) (= (= (fun_app$ (ldropn$ ?v0) ?v1) lNil$) (fun_app$c (less_eq$ (fun_app$d llength$ ?v1)) (enat$ ?v0))) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$h (minus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$h (minus$ ?v0) ?v0) zero$) :pattern ((minus$ ?v0)))))
(assert (forall ((?v0 Nat$)) (= (fun_app$h (minus$ zero$) ?v0) zero$) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$h (minus$ ?v0) ?v0) zero$) :pattern ((minus$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$h (minus$ zero$) ?v0) zero$) :pattern ((fun_app$h (minus$ zero$) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (= (fun_app$h (minus$ ?v1) (fun_app$h (minus$ ?v1) ?v0)) ?v0)) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$ (ldrop$ ?v0) lNil$) lNil$) :pattern ((ldrop$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$l (ldrop$a ?v0) lNil$a) lNil$a) :pattern ((ldrop$a ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$l (ldropn$a ?v0) lNil$a) lNil$a) :pattern ((ldropn$a ?v0)))))
(assert (= (lconcat$a lNil$b) lNil$a))
(assert (= (lconcat$ lNil$a) lNil$))
(assert (= (lstrict_prefix$a lNil$a lNil$a) false))
(assert (= (fun_app$a (lstrict_prefix$ lNil$) lNil$) false))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$e (less$a zero$) (fun_app$h (minus$ ?v0) ?v1)) (fun_app$e (less$a ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (fun_app$e (less_eq$a ?v0) ?v1) (= (fun_app$h (minus$ ?v0) ?v1) zero$)) :pattern ((fun_app$h (minus$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$h (minus$ ?v0) ?v1) zero$) (fun_app$e (less_eq$a ?v0) ?v1)) ))
(assert (= (fun_app$d llength$ lNil$) zero$a))
(assert (forall ((?v0 A$)) (! (= (llast$ (lCons$ ?v0 lNil$)) ?v0) :pattern ((uu$ ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$a (lstrict_prefix$ lNil$) (lCons$ ?v0 ?v1)) true) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (= (fun_app$ (ldrop$ ?v0) ?v1) lNil$) (fun_app$c (less_eq$ (fun_app$d llength$ ?v1)) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$e (less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v0) ?v2)) (= (= (fun_app$h (minus$ ?v1) ?v0) (fun_app$h (minus$ ?v2) ?v0)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v0) ?v2)) (= (fun_app$h (minus$ (fun_app$h (minus$ ?v1) ?v0)) (fun_app$h (minus$ ?v2) ?v0)) (fun_app$h (minus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v0) ?v2)) (= (fun_app$e (less_eq$a (fun_app$h (minus$ ?v1) ?v0)) (fun_app$h (minus$ ?v2) ?v0)) (fun_app$e (less_eq$a ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a (fun_app$h (minus$ ?v2) ?v1)) (fun_app$h (minus$ ?v2) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a (fun_app$h (minus$ ?v0) ?v2)) (fun_app$h (minus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$e (less_eq$a (fun_app$h (minus$ ?v0) ?v1)) ?v0) ))
(assert (forall ((?v0 Nat$)) (fun_app$e (less_eq$a ?v0) ?v0) ))
(check-sat)
(exit)

