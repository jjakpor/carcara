unsat
(define-fun @quantifiers_skolemize_10 () A_list$ (choice ((?v3 A_list$)) (not (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3)))))))
(assume a0 (forall ((?v0 A_llist$)) (= (fun_app$ uue$ ?v0) (ltl$ ?v0))))
(assume a1 (forall ((?v0 A_llist$)) (= (fun_app$a uud$ ?v0) (lhd$ ?v0))))
(assume a2 (forall ((?v0 A$) (?v1 A_list$)) (= (fun_app$b (uuf$ ?v0) ?v1) (cons$ ?v0 ?v1))))
(assume a3 (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (= (fun_app$c (uuc$ ?v0) ?v1) (member$ ?v1 ?v0))))
(assume a4 (forall ((?v0 A_list_a_list_prod_set$) (?v1 A_list_a_list_prod$)) (= (fun_app$d (uu$ ?v0) ?v1) (member$a ?v1 ?v0))))
(assume a5 (forall ((?v0 A_a_prod_set$) (?v1 A_a_prod$)) (= (fun_app$e (uua$ ?v0) ?v1) (member$b ?v1 ?v0))))
(assume a6 (forall ((?v0 A_list_set$) (?v1 A_list$)) (= (fun_app$f (uub$ ?v0) ?v1) (member$c ?v1 ?v0))))
(assume a7 (! (not thesis$) :named @p_1))
(assume a8 (forall ((?v0 A_list$)) (=> (= xs$ (fun_app$g llist_of$ ?v0)) thesis$)))
(assume a9 (! (lfinite$ xs$) :named @p_2))
(assume a10 (forall ((?v0 A_list$)) (lfinite$ (fun_app$g llist_of$ ?v0))))
(assume a11 (p$ lNil$))
(assume a12 (forall ((?v0 A_a_prod_list$)) (= (lhd$a (llist_of$a ?v0)) (hd$a ?v0))))
(assume a13 (forall ((?v0 A_list$)) (= (lhd$ (fun_app$g llist_of$ ?v0)) (hd$ ?v0))))
(assume a14 (forall ((?v0 A_list_list$)) (= (lnull$ (llist_of$b ?v0)) (= ?v0 nil$b))))
(assume a15 (forall ((?v0 A_a_prod_list$)) (= (lnull$a (llist_of$a ?v0)) (= ?v0 nil$a))))
(assume a16 (forall ((?v0 A_list$)) (= (fun_app$c lnull$b (fun_app$g llist_of$ ?v0)) (= ?v0 nil$))))
(assume a17 (forall ((?v0 A_a_prod_list$)) (= (ltl$a (llist_of$a ?v0)) (llist_of$a (tl$a ?v0)))))
(assume a18 (forall ((?v0 A_list$)) (= (ltl$ (fun_app$g llist_of$ ?v0)) (fun_app$g llist_of$ (tl$ ?v0)))))
(assume a19 (forall ((?v0 A_list_list$)) (= (= (llist_of$b ?v0) lNil$b) (= ?v0 nil$b))))
(assume a20 (forall ((?v0 A_a_prod_list$)) (= (= (llist_of$a ?v0) lNil$a) (= ?v0 nil$a))))
(assume a21 (forall ((?v0 A_list$)) (= (= (fun_app$g llist_of$ ?v0) lNil$) (= ?v0 nil$))))
(assume a22 (= (llist_of$b nil$b) lNil$b))
(assume a23 (= (llist_of$a nil$a) lNil$a))
(assume a24 (= (fun_app$g llist_of$ nil$) lNil$))
(assume a25 (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$ (lappend$ (fun_app$g llist_of$ ?v0)) (fun_app$g llist_of$ ?v1)) (fun_app$g llist_of$ (fun_app$b (append$ ?v0) ?v1)))))
(assume a26 (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_llist$)) (= (= (llist_of$b ?v0) (lCons$b ?v1 ?v2)) (exists ((?v3 A_list_list$)) (and (= ?v0 (cons$b ?v1 ?v3)) (= ?v2 (llist_of$b ?v3)))))))
(assume a27 (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= (= (llist_of$a ?v0) (lCons$a ?v1 ?v2)) (exists ((?v3 A_a_prod_list$)) (and (= ?v0 (cons$a ?v1 ?v3)) (= ?v2 (llist_of$a ?v3)))))))
(assume a28 (forall ((?v0 A_list$) (?v1 A$) (?v2 A_llist$)) (= (= (fun_app$g llist_of$ ?v0) (lCons$ ?v1 ?v2)) (exists ((?v3 A_list$)) (and (= ?v0 (cons$ ?v1 ?v3)) (= ?v2 (fun_app$g llist_of$ ?v3)))))))
(assume a29 (forall ((?v0 A_list$) (?v1 A_list_list$)) (= (llist_of$b (cons$b ?v0 ?v1)) (lCons$b ?v0 (llist_of$b ?v1)))))
(assume a30 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_list$)) (= (llist_of$a (cons$a ?v0 ?v1)) (lCons$a ?v0 (llist_of$a ?v1)))))
(assume a31 (forall ((?v0 A$) (?v1 A_list$)) (= (fun_app$g llist_of$ (cons$ ?v0 ?v1)) (lCons$ ?v0 (fun_app$g llist_of$ ?v1)))))
(assume a32 (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (member$ ?v0 (image$ llist_of$ top$)))))
(assume a33 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))))
(assume a34 (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))))
(assume a35 (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (lfinite$ ?v0) (p$ ?v0)) (p$ (fun_app$ (lappend$ ?v0) (lCons$ ?v1 lNil$))))))
(assume a36 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$a (fun_app$h (lappend$a ?v0) ?v1))) (or (not (lnull$a ?v0)) (not (lnull$a ?v1))))))
(assume a37 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (fun_app$c lnull$b (fun_app$ (lappend$ ?v0) ?v1))) (or (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))))))
(assume a38 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lnull$a (fun_app$h (lappend$a ?v0) ?v1)) (and (lnull$a ?v0) (lnull$a ?v1)))))
(assume a39 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$c lnull$b (fun_app$ (lappend$ ?v0) ?v1)) (and (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)))))
(assume a40 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (= (fun_app$h (lappend$a (lCons$a ?v0 ?v1)) ?v2) (lCons$a ?v0 (fun_app$h (lappend$a ?v1) ?v2)))))
(assume a41 (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$ (lappend$ ?v1) ?v2)))))
(assume a42 (forall ((?v0 A_a_prod_llist$)) (= (fun_app$h (lappend$a ?v0) lNil$a) ?v0)))
(assume a43 (forall ((?v0 A_llist$)) (= (fun_app$ (lappend$ ?v0) lNil$) ?v0)))
(assume a44 (forall ((?v0 A_a_prod_llist$)) (= (fun_app$h (lappend$a lNil$a) ?v0) ?v0)))
(assume a45 (forall ((?v0 A_llist$)) (= (fun_app$ (lappend$ lNil$) ?v0) ?v0)))
(assume a46 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1))))
(assume a47 (forall ((?v0 A$) (?v1 A_llist$)) (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1))))
(assume a48 (= (! (lfinite$a lNil$a) :named @p_3) true))
(assume a49 (= (! (lfinite$ lNil$) :named @p_4) true))
(assume a50 (forall ((?v0 A_a_prod_llist$)) (= (lfinite$a (ltl$a ?v0)) (lfinite$a ?v0))))
(assume a51 (forall ((?v0 A_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0))))
(assume a52 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (fun_app$ (lappend$ ?v0) ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))))
(assume a53 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (ltl$a (fun_app$h (lappend$a ?v0) ?v1)) (ite (lnull$a ?v0) (ltl$a ?v1) (fun_app$h (lappend$a (ltl$a ?v0)) ?v1)))))
(assume a54 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (lappend$ ?v0) ?v1)) (ite (fun_app$c lnull$b ?v0) (ltl$ ?v1) (fun_app$ (lappend$ (ltl$ ?v0)) ?v1)))))
(assume a55 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lhd$a (fun_app$h (lappend$a ?v0) ?v1)) (ite (lnull$a ?v0) (lhd$a ?v1) (lhd$a ?v0)))))
(assume a56 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lhd$ (fun_app$ (lappend$ ?v0) ?v1)) (ite (fun_app$c lnull$b ?v0) (lhd$ ?v1) (lhd$ ?v0)))))
(assume a57 (forall ((?v0 A_a_prod_llist$)) (=> (not (lnull$a ?v0)) (= (lCons$a (lhd$a ?v0) (ltl$a ?v0)) ?v0))))
(assume a58 (forall ((?v0 A_llist$)) (=> (not (fun_app$c lnull$b ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0))))
(assume a59 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (= lNil$a (fun_app$h (lappend$a ?v0) ?v1)) (and (= ?v0 lNil$a) (= ?v1 lNil$a)))))
(assume a60 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$ (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$)))))
(assume a61 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (= (fun_app$h (lappend$a ?v0) ?v1) lNil$a) (and (= ?v0 lNil$a) (= ?v1 lNil$a)))))
(assume a62 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$ (lappend$ ?v0) ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$)))))
(assume a63 (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) ?v1)) ?v2) (fun_app$ (lappend$ ?v0) (fun_app$ (lappend$ ?v1) ?v2)))))
(assume a64 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= (fun_app$h (lappend$a (fun_app$h (lappend$a ?v0) (lCons$a ?v1 lNil$a))) ?v2) (fun_app$h (lappend$a ?v0) (lCons$a ?v1 ?v2)))))
(assume a65 (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) (lCons$ ?v1 lNil$))) ?v2) (fun_app$ (lappend$ ?v0) (lCons$ ?v1 ?v2)))))
(assume a66 (forall ((?v0 A_a_prod_llist$)) (= (not (= ?v0 lNil$a)) (exists ((?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= ?v0 (lCons$a ?v1 ?v2))))))
(assume a67 (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))))
(assume a68 (forall ((?v0 A_a_prod_llist$)) (= (not (lnull$a ?v0)) (exists ((?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= ?v0 (lCons$a ?v1 ?v2))))))
(assume a69 (forall ((?v0 A_llist$)) (= (not (fun_app$c lnull$b ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))))
(assume a70 (forall ((?v0 A_a_prod_llist$)) (= (lfinite$a ?v0) (or (= ?v0 lNil$a) (exists ((?v1 A_a_prod_llist$) (?v2 A_a_prod$)) (and (= ?v0 (lCons$a ?v2 ?v1)) (lfinite$a ?v1)))))))
(assume a71 (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (or (= ?v0 lNil$) (exists ((?v1 A_llist$) (?v2 A$)) (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)))))))
(assume a72 (forall ((?v0 A_a_prod_llist$)) (= (lnull$a ?v0) (= ?v0 lNil$a))))
(assume a73 (forall ((?v0 A_llist$)) (= (fun_app$c lnull$b ?v0) (= ?v0 lNil$))))
(assume a74 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (= (lhd$a (lCons$a ?v0 ?v1)) ?v0)))
(assume a75 (forall ((?v0 A$) (?v1 A_llist$)) (= (lhd$ (lCons$ ?v0 ?v1)) ?v0)))
(assume a76 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (= (ltl$a (lCons$a ?v0 ?v1)) ?v1)))
(assume a77 (forall ((?v0 A$) (?v1 A_llist$)) (= (ltl$ (lCons$ ?v0 ?v1)) ?v1)))
(assume a78 (= (fun_app$h (lappend$a lNil$a) lNil$a) lNil$a))
(assume a79 (= (fun_app$ (lappend$ lNil$) lNil$) lNil$))
(assume a80 (= (ltl$a lNil$a) lNil$a))
(assume a81 (= (ltl$ lNil$) lNil$))
(assume a82 (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (=> (= ?v0 (lCons$a (lhd$a ?v0) (ltl$a ?v0))) false)) false)))
(assume a83 (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (=> (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0))) false)) false)))
(assume a84 (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false))) false)))
(assume a85 (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)))
(assume a86 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (and (=> (or (lnull$a ?v0) (not (fun_app$e ?v1 (lhd$a ?v0)))) false) (=> (and (not (lnull$a ?v0)) (fun_app$e ?v1 (lhd$a ?v0))) false)) false)))
(assume a87 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (fun_app$c lnull$b ?v0) (not (fun_app$i ?v1 (lhd$ ?v0)))) false) (=> (and (not (fun_app$c lnull$b ?v0)) (fun_app$i ?v1 (lhd$ ?v0))) false)) false)))
(assume a88 (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (fun_app$c lnull$b ?v0) (lnull$a ?v1)) false) (=> (and (not (fun_app$c lnull$b ?v0)) (not (lnull$a ?v1))) false)) false)))
(assume a89 (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (fun_app$c lnull$b ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (fun_app$c lnull$b ?v1))) false)) false)))
(assume a90 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)))
(assume a91 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) false) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) false)) false)))
(assume a92 (forall ((?v0 A_a_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_llist$)) (=> (member$d ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 A_a_prod_llist$)) (=> (member$d ?v1 ?v0) (lnull$a ?v1)))) false)) false)))
(assume a93 (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$c lnull$b ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$c lnull$b ?v1)))) false)) false)))
(assume a94 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)))
(assume a95 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) false) (=> (or (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) false)) false)))
(assume a96 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$)) (=> (forall ((?v2 A_llist$)) (= (fun_app$c ?v0 ?v2) (fun_app$c ?v1 ?v2))) (= (collect$ ?v0) (collect$ ?v1)))))
(assume a97 (forall ((?v0 A_list_bool_fun$) (?v1 A_list_bool_fun$)) (=> (forall ((?v2 A_list$)) (= (fun_app$f ?v0 ?v2) (fun_app$f ?v1 ?v2))) (= (collect$a ?v0) (collect$a ?v1)))))
(assume a98 (forall ((?v0 A_list_a_list_prod_set$)) (= (collect$b (uu$ ?v0)) ?v0)))
(assume a99 (forall ((?v0 A_a_prod_set$)) (= (collect$c (uua$ ?v0)) ?v0)))
(assume a100 (forall ((?v0 A_list_set$)) (= (collect$a (uub$ ?v0)) ?v0)))
(assume a101 (forall ((?v0 A_llist_set$)) (= (collect$ (uuc$ ?v0)) ?v0)))
(assume a102 (forall ((?v0 A_list_a_list_prod$) (?v1 A_list_a_list_prod_bool_fun$)) (= (member$a ?v0 (collect$b ?v1)) (fun_app$d ?v1 ?v0))))
(assume a103 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_bool_fun$)) (= (member$b ?v0 (collect$c ?v1)) (fun_app$e ?v1 ?v0))))
(assume a104 (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (= (member$c ?v0 (collect$a ?v1)) (fun_app$f ?v1 ?v0))))
(assume a105 (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$c ?v1 ?v0))))
(assume a106 (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)))
(assume a107 (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$c lnull$b ?v0) false) (=> (not (fun_app$c lnull$b ?v0)) false)) false)))
(assume a108 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (= (lnull$a ?v0) (lnull$a ?v1)) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) (and (= (lhd$a ?v0) (lhd$a ?v1)) (= (ltl$a ?v0) (ltl$a ?v1))))) (= ?v0 ?v1))))
(assume a109 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1))))
(assume a110 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) (and (not (= ?v0 lNil$a)) (and (= (lhd$a ?v0) ?v1) (= (ltl$a ?v0) ?v2))))))
(assume a111 (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (and (not (= ?v0 lNil$)) (and (= (lhd$ ?v0) ?v1) (= (ltl$ ?v0) ?v2))))))
(assume a112 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) (not (lnull$a ?v0)))))
(assume a113 (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (fun_app$c lnull$b ?v0)))))
(assume a114 (forall ((?v0 A_a_prod_llist$)) (=> (= ?v0 lNil$a) (lnull$a ?v0))))
(assume a115 (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (fun_app$c lnull$b ?v0))))
(assume a116 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) (not (lnull$a (fun_app$h (lappend$a ?v0) ?v1))))))
(assume a117 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (not (fun_app$c lnull$b (fun_app$ (lappend$ ?v0) ?v1))))))
(assume a118 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (not (lfinite$ ?v0)) (= (fun_app$ (lappend$ ?v0) ?v1) ?v0))))
(assume a119 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (not (lnull$a ?v0)) (= (fun_app$h (lappend$a (ltl$a ?v0)) ?v1) (ltl$a (fun_app$h (lappend$a ?v0) ?v1))))))
(assume a120 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (not (fun_app$c lnull$b ?v0)) (= (fun_app$ (lappend$ (ltl$ ?v0)) ?v1) (ltl$ (fun_app$ (lappend$ ?v0) ?v1))))))
(assume a121 (forall ((?v0 A_a_prod_llist$)) (=> (and (lfinite$a ?v0) (and (=> (= ?v0 lNil$a) false) (forall ((?v1 A_a_prod_llist$) (?v2 A_a_prod$)) (=> (and (= ?v0 (lCons$a ?v2 ?v1)) (lfinite$a ?v1)) false)))) false)))
(assume a122 (forall ((?v0 A_llist$)) (=> (and (lfinite$ ?v0) (and (=> (= ?v0 lNil$) false) (forall ((?v1 A_llist$) (?v2 A$)) (=> (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)) false)))) false)))
(assume a123 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist_bool_fun$)) (=> (and (lfinite$a ?v0) (and (forall ((?v2 A_a_prod_llist$)) (=> (lnull$a ?v2) (fun_app$j ?v1 ?v2))) (forall ((?v2 A_a_prod_llist$)) (=> (and (lfinite$a ?v2) (and (not (lnull$a ?v2)) (fun_app$j ?v1 (ltl$a ?v2)))) (fun_app$j ?v1 ?v2))))) (fun_app$j ?v1 ?v0))))
(assume a124 (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (=> (and (lfinite$ ?v0) (and (forall ((?v2 A_llist$)) (=> (fun_app$c lnull$b ?v2) (fun_app$c ?v1 ?v2))) (forall ((?v2 A_llist$)) (=> (and (lfinite$ ?v2) (and (not (fun_app$c lnull$b ?v2)) (fun_app$c ?v1 (ltl$ ?v2)))) (fun_app$c ?v1 ?v2))))) (fun_app$c ?v1 ?v0))))
(assume a125 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod$)) (=> (lfinite$a ?v0) (lfinite$a (lCons$a ?v1 ?v0)))))
(assume a126 (forall ((?v0 A_llist$) (?v1 A$)) (=> (lfinite$ ?v0) (lfinite$ (lCons$ ?v1 ?v0)))))
(assume a127 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (lnull$a ?v0) (lnull$a ?v1)) (= (fun_app$h (lappend$a ?v0) ?v1) lNil$a))))
(assume a128 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) (= (fun_app$ (lappend$ ?v0) ?v1) lNil$))))
(assume a129 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (lnull$a ?v0) (lnull$a ?v1)) (lnull$a (fun_app$h (lappend$a ?v0) ?v1)))))
(assume a130 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) (fun_app$c lnull$b (fun_app$ (lappend$ ?v0) ?v1)))))
(assume a131 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (lnull$a ?v0) (= (fun_app$h (lappend$a ?v1) ?v0) ?v1))))
(assume a132 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$c lnull$b ?v0) (= (fun_app$ (lappend$ ?v1) ?v0) ?v1))))
(assume a133 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (lnull$a ?v0) (= (fun_app$h (lappend$a ?v0) ?v1) ?v1))))
(assume a134 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$c lnull$b ?v0) (= (fun_app$ (lappend$ ?v0) ?v1) ?v1))))
(assume a135 (forall ((?v0 A_a_prod_llist$)) (=> (lnull$a ?v0) (= ?v0 lNil$a))))
(assume a136 (forall ((?v0 A_llist$)) (=> (fun_app$c lnull$b ?v0) (= ?v0 lNil$))))
(assume a137 (forall ((?v0 A_a_prod_llist$)) (=> (lnull$a ?v0) (lfinite$a ?v0))))
(assume a138 (forall ((?v0 A_llist$)) (=> (fun_app$c lnull$b ?v0) (lfinite$ ?v0))))
(assume a139 (forall ((?v0 A_a_prod_llist$)) (=> (lnull$a ?v0) (lnull$a (ltl$a ?v0)))))
(assume a140 (forall ((?v0 A_llist$)) (=> (fun_app$c lnull$b ?v0) (fun_app$c lnull$b (ltl$ ?v0)))))
(assume a141 (forall ((?v0 A_a_prod_llist_a_a_prod_llist_bool_fun_fun$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (=> (and (fun_app$j (fun_app$k ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_llist$) (?v4 A_a_prod_llist$)) (=> (fun_app$j (fun_app$k ?v0 ?v3) ?v4) (and (= (lnull$a ?v3) (lnull$a ?v4)) (=> (and (not (lnull$a ?v3)) (not (lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (or (fun_app$j (fun_app$k ?v0 (ltl$a ?v3)) (ltl$a ?v4)) (= (ltl$a ?v3) (ltl$a ?v4))))))))) (= ?v1 ?v2))))
(assume a142 (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$l ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$c (fun_app$l ?v0 ?v3) ?v4) (and (= (fun_app$c lnull$b ?v3) (fun_app$c lnull$b ?v4)) (=> (and (not (fun_app$c lnull$b ?v3)) (not (fun_app$c lnull$b ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$c (fun_app$l ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))))) (= ?v1 ?v2))))
(assume a143 (forall ((?v0 A_a_prod_llist_a_a_prod_llist_bool_fun_fun$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (=> (and (fun_app$j (fun_app$k ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_llist$) (?v4 A_a_prod_llist$)) (=> (fun_app$j (fun_app$k ?v0 ?v3) ?v4) (and (= (lnull$a ?v3) (lnull$a ?v4)) (=> (and (not (lnull$a ?v3)) (not (lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (fun_app$j (fun_app$k ?v0 (ltl$a ?v3)) (ltl$a ?v4)))))))) (= ?v1 ?v2))))
(assume a144 (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$l ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$c (fun_app$l ?v0 ?v3) ?v4) (and (= (fun_app$c lnull$b ?v3) (fun_app$c lnull$b ?v4)) (=> (and (not (fun_app$c lnull$b ?v3)) (not (fun_app$c lnull$b ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$c (fun_app$l ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))))) (= ?v1 ?v2))))
(assume a145 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (not (= lNil$a (lCons$a ?v0 ?v1)))))
(assume a146 (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1)))))
(assume a147 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (not (lnull$a (lCons$a ?v0 ?v1)))))
(assume a148 (forall ((?v0 A$) (?v1 A_llist$)) (not (fun_app$c lnull$b (lCons$ ?v0 ?v1)))))
(assume a149 @p_3)
(assume a150 @p_4)
(assume a151 (lnull$a lNil$a))
(assume a152 (fun_app$c lnull$b lNil$))
(assume a153 (forall ((?v0 A_list_list$)) (=> (not (= ?v0 nil$b)) (= (cons$b (hd$b ?v0) (tl$b ?v0)) ?v0))))
(assume a154 (forall ((?v0 A_list$)) (=> (not (= ?v0 nil$)) (= (cons$ (hd$ ?v0) (tl$ ?v0)) ?v0))))
(assume a155 (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (=> (not (= ?v0 nil$b)) (= (hd$b (fun_app$m (append$a ?v0) ?v1)) (hd$b ?v0)))))
(assume a156 (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= ?v0 nil$)) (= (hd$ (fun_app$b (append$ ?v0) ?v1)) (hd$ ?v0)))))
(assume a157 (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (=> (not (= ?v0 nil$b)) (= (tl$b (fun_app$m (append$a ?v0) ?v1)) (fun_app$m (append$a (tl$b ?v0)) ?v1)))))
(assume a158 (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= ?v0 nil$)) (= (tl$ (fun_app$b (append$ ?v0) ?v1)) (fun_app$b (append$ (tl$ ?v0)) ?v1)))))
(assume a159 (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$)) (= (= (fun_app$m (append$a ?v0) (cons$b ?v1 nil$b)) (fun_app$m (append$a ?v2) (cons$b ?v3 nil$b))) (and (= ?v0 ?v2) (= ?v1 ?v3)))))
(assume a160 (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$) (?v3 A$)) (= (= (fun_app$b (append$ ?v0) (cons$ ?v1 nil$)) (fun_app$b (append$ ?v2) (cons$ ?v3 nil$))) (and (= ?v0 ?v2) (= ?v1 ?v3)))))
(assume a161 (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$m (append$a ?v0) ?v1) ?v1) (= ?v0 nil$b))))
(assume a162 (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) ?v1) (= ?v0 nil$))))
(assume a163 (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$m (append$a ?v0) ?v1) ?v0) (= ?v1 nil$b))))
(assume a164 (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) ?v0) (= ?v1 nil$))))
(assume a165 (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= ?v0 (fun_app$m (append$a ?v1) ?v0)) (= ?v1 nil$b))))
(assume a166 (forall ((?v0 A_list$) (?v1 A_list$)) (= (= ?v0 (fun_app$b (append$ ?v1) ?v0)) (= ?v1 nil$))))
(assume a167 (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= ?v0 (fun_app$m (append$a ?v0) ?v1)) (= ?v1 nil$b))))
(assume a168 (forall ((?v0 A_list$) (?v1 A_list$)) (= (= ?v0 (fun_app$b (append$ ?v0) ?v1)) (= ?v1 nil$))))
(assume a169 (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= nil$b (fun_app$m (append$a ?v0) ?v1)) (and (= ?v0 nil$b) (= ?v1 nil$b)))))
(assume a170 (forall ((?v0 A_list$) (?v1 A_list$)) (= (= nil$ (fun_app$b (append$ ?v0) ?v1)) (and (= ?v0 nil$) (= ?v1 nil$)))))
(assume a171 (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$m (append$a ?v0) ?v1) nil$b) (and (= ?v0 nil$b) (= ?v1 nil$b)))))
(assume a172 (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) nil$) (and (= ?v0 nil$) (= ?v1 nil$)))))
(assume a173 (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (cons$b ?v0 ?v1) (cons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))))
(assume a174 (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))))
(assume a175 (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$b (append$ (fun_app$b (append$ ?v0) ?v1)) ?v2) (fun_app$b (append$ ?v0) (fun_app$b (append$ ?v1) ?v2)))))
(assume a176 (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) (fun_app$b (append$ ?v2) ?v1)) (= ?v0 ?v2))))
(assume a177 (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) (fun_app$b (append$ ?v0) ?v2)) (= ?v1 ?v2))))
(assume a178 (forall ((?v0 A_list_list$)) (= (fun_app$m (append$a ?v0) nil$b) ?v0)))
(assume a179 (forall ((?v0 A_list$)) (= (fun_app$b (append$ ?v0) nil$) ?v0)))
(assume a180 (forall ((?v0 A_list$) (?v1 A_list_list$)) (not (= (cons$b ?v0 ?v1) ?v1))))
(assume a181 (forall ((?v0 A$) (?v1 A_list$)) (not (= (cons$ ?v0 ?v1) ?v1))))
(assume a182 (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (=> (not (= ?v0 nil$b)) false)) false)))
(assume a183 (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false)))
(assume a184 (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (fun_app$b (append$ ?v0) ?v1) ?v2) (= ?v3 (fun_app$b (append$ ?v1) ?v4))) (= (fun_app$b (append$ ?v0) ?v3) (fun_app$b (append$ ?v2) ?v4)))))
(assume a185 (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) (fun_app$b (append$ ?v2) ?v3)) (exists ((?v4 A_list$)) (or (and (= ?v0 (fun_app$b (append$ ?v2) ?v4)) (= (fun_app$b (append$ ?v4) ?v1) ?v3)) (and (= (fun_app$b (append$ ?v0) ?v4) ?v2) (= ?v1 (fun_app$b (append$ ?v4) ?v3))))))))
(assume a186 (forall ((?v0 A_list$) (?v1 A_list_list$)) (not (= nil$b (cons$b ?v0 ?v1)))))
(assume a187 (forall ((?v0 A$) (?v1 A_list$)) (not (= nil$ (cons$ ?v0 ?v1)))))
(assume a188 (forall ((?v0 A_list_a_list_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (=> (and (fun_app$n (fun_app$o ?v0 nil$) nil$b) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$n (fun_app$o ?v0 (cons$ ?v3 ?v4)) nil$b)) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$n (fun_app$o ?v0 nil$) (cons$b ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$n (fun_app$o ?v0 ?v4) ?v6) (fun_app$n (fun_app$o ?v0 (cons$ ?v3 ?v4)) (cons$b ?v5 ?v6))))))) (fun_app$n (fun_app$o ?v0 ?v1) ?v2))))
(assume a189 (forall ((?v0 A_list_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list$)) (=> (and (fun_app$f (fun_app$p ?v0 nil$b) nil$) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$f (fun_app$p ?v0 (cons$b ?v3 ?v4)) nil$)) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$f (fun_app$p ?v0 nil$b) (cons$ ?v3 ?v4))) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$f (fun_app$p ?v0 ?v4) ?v6) (fun_app$f (fun_app$p ?v0 (cons$b ?v3 ?v4)) (cons$ ?v5 ?v6))))))) (fun_app$f (fun_app$p ?v0 ?v1) ?v2))))
(assume a190 (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$n (fun_app$q ?v0 nil$b) nil$b) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$n (fun_app$q ?v0 (cons$b ?v3 ?v4)) nil$b)) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$n (fun_app$q ?v0 nil$b) (cons$b ?v3 ?v4))) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$n (fun_app$q ?v0 ?v4) ?v6) (fun_app$n (fun_app$q ?v0 (cons$b ?v3 ?v4)) (cons$b ?v5 ?v6))))))) (fun_app$n (fun_app$q ?v0 ?v1) ?v2))))
(assume a191 (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$f (fun_app$r ?v0 nil$) nil$) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$f (fun_app$r ?v0 (cons$ ?v3 ?v4)) nil$)) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$f (fun_app$r ?v0 nil$) (cons$ ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$f (fun_app$r ?v0 ?v4) ?v6) (fun_app$f (fun_app$r ?v0 (cons$ ?v3 ?v4)) (cons$ ?v5 ?v6))))))) (fun_app$f (fun_app$r ?v0 ?v1) ?v2))))
(assume a192 (forall ((?v0 A_list_list$) (?v1 A_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$b)) (and (forall ((?v2 A_list$)) (fun_app$n ?v1 (cons$b ?v2 nil$b))) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (not (= ?v3 nil$b)) (fun_app$n ?v1 ?v3)) (fun_app$n ?v1 (cons$b ?v2 ?v3)))))) (fun_app$n ?v1 ?v0))))
(assume a193 (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 A$)) (fun_app$f ?v1 (cons$ ?v2 nil$))) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$f ?v1 ?v3)) (fun_app$f ?v1 (cons$ ?v2 ?v3)))))) (fun_app$f ?v1 ?v0))))
(assume a194 (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$)) (=> (= ?v0 (cons$b ?v1 ?v2)) (not (= ?v0 nil$b)))))
(assume a195 (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) (not (= ?v0 nil$)))))
(assume a196 (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (forall ((?v1 A_list$) (?v2 A_list_list$)) (=> (= ?v0 (cons$b ?v1 ?v2)) false))) false)))
(assume a197 (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A$) (?v2 A_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false))) false)))
(assume a198 (forall ((?v0 A_list_list_list$)) (=> (and (=> (= ?v0 nil$c) false) (and (forall ((?v1 A_list_list_list$)) (=> (= ?v0 (cons$c nil$b ?v1)) false)) (forall ((?v1 A_list$) (?v2 A_list_list$) (?v3 A_list_list_list$)) (=> (= ?v0 (cons$c (cons$b ?v1 ?v2) ?v3)) false)))) false)))
(assume a199 (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 A_list_list$)) (=> (= ?v0 (cons$b nil$ ?v1)) false)) (forall ((?v1 A$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= ?v0 (cons$b (cons$ ?v1 ?v2) ?v3)) false)))) false)))
(assume a200 (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 A_list$)) (=> (= ?v0 (cons$b ?v1 nil$b)) false)) (forall ((?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= ?v0 (cons$b ?v1 (cons$b ?v2 ?v3))) false)))) false)))
(assume a201 (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 A$)) (=> (= ?v0 (cons$ ?v1 nil$)) false)) (forall ((?v1 A$) (?v2 A$) (?v3 A_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false)))) false)))
(assume a202 (forall ((?v0 A_list_list$)) (= (not (= ?v0 nil$b)) (exists ((?v1 A_list$) (?v2 A_list_list$)) (= ?v0 (cons$b ?v1 ?v2))))))
(assume a203 (forall ((?v0 A_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 A$) (?v2 A_list$)) (= ?v0 (cons$ ?v1 ?v2))))))
(assume a204 (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (and (= (cons$b ?v0 ?v1) ?v2) (= ?v3 (fun_app$m (append$a ?v1) ?v4))) (= (cons$b ?v0 ?v3) (fun_app$m (append$a ?v2) ?v4)))))
(assume a205 (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (cons$ ?v0 ?v1) ?v2) (= ?v3 (fun_app$b (append$ ?v1) ?v4))) (= (cons$ ?v0 ?v3) (fun_app$b (append$ ?v2) ?v4)))))
(assume a206 (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$)) (= (fun_app$m (append$a (cons$b ?v0 ?v1)) ?v2) (cons$b ?v0 (fun_app$m (append$a ?v1) ?v2)))))
(assume a207 (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$b (append$ (cons$ ?v0 ?v1)) ?v2) (cons$ ?v0 (fun_app$b (append$ ?v1) ?v2)))))
(assume a208 (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$m (append$a nil$b) ?v1)))))
(assume a209 (forall ((?v0 A_list$) (?v1 A_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$b (append$ nil$) ?v1)))))
(assume a210 (forall ((?v0 A_list_list$)) (= (fun_app$m (append$a nil$b) ?v0) ?v0)))
(assume a211 (forall ((?v0 A_list$)) (= (fun_app$b (append$ nil$) ?v0) ?v0)))
(assume a212 (forall ((?v0 A_list$) (?v1 A_list_list$)) (= (tl$b (cons$b ?v0 ?v1)) ?v1)))
(assume a213 (forall ((?v0 A$) (?v1 A_list$)) (= (tl$ (cons$ ?v0 ?v1)) ?v1)))
(assume a214 (= (tl$b nil$b) nil$b))
(assume a215 (= (tl$ nil$) nil$))
(assume a216 (forall ((?v0 A_list$) (?v1 A_list_list$)) (= (hd$b (cons$b ?v0 ?v1)) ?v0)))
(assume a217 (forall ((?v0 A$) (?v1 A_list$)) (= (hd$ (cons$ ?v0 ?v1)) ?v0)))
(assume a218 (forall ((?v0 A_list_list_bool_fun$) (?v1 A_list_list$)) (=> (and (fun_app$n ?v0 nil$b) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (fun_app$n ?v0 ?v3) (fun_app$n ?v0 (fun_app$m (append$a ?v3) (cons$b ?v2 nil$b)))))) (fun_app$n ?v0 ?v1))))
(assume a219 (forall ((?v0 A_list_bool_fun$) (?v1 A_list$)) (=> (and (fun_app$f ?v0 nil$) (forall ((?v2 A$) (?v3 A_list$)) (=> (fun_app$f ?v0 ?v3) (fun_app$f ?v0 (fun_app$b (append$ ?v3) (cons$ ?v2 nil$)))))) (fun_app$f ?v0 ?v1))))
(assume a220 (forall ((?v0 A_list_list$) (?v1 A_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$b)) (and (forall ((?v2 A_list$)) (fun_app$n ?v1 (cons$b ?v2 nil$b))) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (not (= ?v3 nil$b)) (fun_app$n ?v1 ?v3)) (fun_app$n ?v1 (fun_app$m (append$a ?v3) (cons$b ?v2 nil$b))))))) (fun_app$n ?v1 ?v0))))
(assume a221 (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 A$)) (fun_app$f ?v1 (cons$ ?v2 nil$))) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$f ?v1 ?v3)) (fun_app$f ?v1 (fun_app$b (append$ ?v3) (cons$ ?v2 nil$))))))) (fun_app$f ?v1 ?v0))))
(assume a222 (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (forall ((?v1 A_list_list$) (?v2 A_list$)) (=> (= ?v0 (fun_app$m (append$a ?v1) (cons$b ?v2 nil$b))) false))) false)))
(assume a223 (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A_list$) (?v2 A$)) (=> (= ?v0 (fun_app$b (append$ ?v1) (cons$ ?v2 nil$))) false))) false)))
(assume a224 (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (= (= (cons$b ?v0 ?v1) (fun_app$m (append$a ?v2) ?v3)) (or (and (= ?v2 nil$b) (= (cons$b ?v0 ?v1) ?v3)) (exists ((?v4 A_list_list$)) (and (= (cons$b ?v0 ?v4) ?v2) (= ?v1 (fun_app$m (append$a ?v4) ?v3))))))))
(assume a225 (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (fun_app$b (append$ ?v2) ?v3)) (or (and (= ?v2 nil$) (= (cons$ ?v0 ?v1) ?v3)) (exists ((?v4 A_list$)) (and (= (cons$ ?v0 ?v4) ?v2) (= ?v1 (fun_app$b (append$ ?v4) ?v3))))))))
(assume a226 (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (fun_app$m (append$a ?v0) ?v1) (cons$b ?v2 ?v3)) (or (and (= ?v0 nil$b) (= ?v1 (cons$b ?v2 ?v3))) (exists ((?v4 A_list_list$)) (and (= ?v0 (cons$b ?v2 ?v4)) (= (fun_app$m (append$a ?v4) ?v1) ?v3)))))))
(assume a227 (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (fun_app$b (append$ ?v0) ?v1) (cons$ ?v2 ?v3)) (or (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) (exists ((?v4 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (= (fun_app$b (append$ ?v4) ?v1) ?v3)))))))
(assume a228 (forall ((?v0 A_list_list$)) (= (= nil$b (tl$b ?v0)) (or (= ?v0 nil$b) (exists ((?v1 A_list$)) (= ?v0 (cons$b ?v1 nil$b)))))))
(assume a229 (forall ((?v0 A_list$)) (= (= nil$ (tl$ ?v0)) (or (= ?v0 nil$) (exists ((?v1 A$)) (= ?v0 (cons$ ?v1 nil$)))))))
(assume a230 (forall ((?v0 A_list_list$)) (= (= (tl$b ?v0) nil$b) (or (= ?v0 nil$b) (exists ((?v1 A_list$)) (= ?v0 (cons$b ?v1 nil$b)))))))
(assume a231 (forall ((?v0 A_list$)) (= (= (tl$ ?v0) nil$) (or (= ?v0 nil$) (exists ((?v1 A$)) (= ?v0 (cons$ ?v1 nil$)))))))
(assume a232 (forall ((?v0 A_list$) (?v1 A_list$)) (= (hd$ (fun_app$b (append$ ?v0) ?v1)) (ite (= ?v0 nil$) (hd$ ?v1) (hd$ ?v0)))))
(assume a233 (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (= (= ?v0 nil$) (= ?v1 nil$)) (=> (and (not (= ?v0 nil$)) (not (= ?v1 nil$))) (and (= (hd$ ?v0) (hd$ ?v1)) (= (tl$ ?v0) (tl$ ?v1))))) (= ?v0 ?v1))))
(assume a234 (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (= ?v0 (cons$ (hd$ ?v0) (tl$ ?v0))) false)) false)))
(assume a235 (forall ((?v0 A$) (?v1 A_list$) (?v2 A_a_list_fun$)) (= (bind$ (cons$ ?v0 ?v1) ?v2) (fun_app$b (append$ (fun_app$s ?v2 ?v0)) (bind$ ?v1 ?v2)))))
(assume a236 (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$ (ltakeWhile$ ?v0) ?v1) (ite (or (fun_app$c lnull$b ?v1) (not (fun_app$i ?v0 (lhd$ ?v1)))) lNil$ (lCons$ (lhd$ ?v1) (fun_app$ (ltakeWhile$ ?v0) (ltl$ ?v1)))))))
(assume a237 (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list$) (?v3 A_list_set$)) (=> (and (= ?v0 (fun_app$g ?v1 ?v2)) (member$c ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3)))))
(assume a238 (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$) (?v3 A_llist_set$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$a ?v1 ?v3)))))
(assume a239 (forall ((?v0 A_llist$)) (member$ ?v0 top$a)))
(assume a240 (forall ((?v0 A_list$)) (member$c ?v0 top$)))
(assume a241 (forall ((?v0 A_llist$)) (= (member$ ?v0 top$a) true)))
(assume a242 (forall ((?v0 A_list$)) (= (member$c ?v0 top$) true)))
(assume a243 (forall ((?v0 A_a_list_fun$)) (= (bind$ nil$ ?v0) nil$)))
(assume a244 (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (fun_app$c lnull$b (fun_app$ (ltakeWhile$ ?v0) ?v1))) (and (not (fun_app$c lnull$b ?v1)) (fun_app$i ?v0 (lhd$ ?v1))))))
(assume a245 (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$c lnull$b (fun_app$ (ltakeWhile$ ?v0) ?v1)) (or (fun_app$c lnull$b ?v1) (not (fun_app$i ?v0 (lhd$ ?v1)))))))
(assume a246 (! (= top$ (! (collect$a top$b) :named @p_5)) :named @p_6))
(assume a247 (forall ((?v0 A_llist_set$)) (=> (forall ((?v1 A_llist$)) (member$ ?v1 ?v0)) (= top$a ?v0))))
(assume a248 (forall ((?v0 A_list_set$)) (=> (forall ((?v1 A_list$)) (member$c ?v1 ?v0)) (= top$ ?v0))))
(assume a249 (exists ((?v0 A_llist$)) (member$ ?v0 top$a)))
(assume a250 (exists ((?v0 A_list$)) (member$c ?v0 top$)))
(assume a251 (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (exists ((?v3 A_list$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3)))))))
(assume a252 (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist_set$)) (= (member$ ?v0 (image$a ?v1 ?v2)) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$ ?v1 ?v3)))))))
(assume a253 (forall ((?v0 A_list_set$) (?v1 A_list_set$) (?v2 A_list_a_llist_fun$) (?v3 A_list_a_llist_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_list$)) (=> (member$c ?v4 ?v1) (= (fun_app$g ?v2 ?v4) (fun_app$g ?v3 ?v4))))) (= (image$ ?v2 ?v0) (image$ ?v3 ?v1)))))
(assume a254 (forall ((?v0 A_list_a_llist_fun$) (?v1 A_list_set$) (?v2 A_llist_bool_fun$)) (=> (exists ((?v3 A_llist$)) (and (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_list$)) (and (member$c ?v3 ?v1) (fun_app$c ?v2 (fun_app$g ?v0 ?v3)))))))
(assume a255 (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$)) (=> (exists ((?v3 A_llist$)) (and (member$ ?v3 (image$a ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v1) (fun_app$c ?v2 (fun_app$ ?v0 ?v3)))))))
(assume a256 (forall ((?v0 A_list_a_llist_fun$) (?v1 A_list_set$) (?v2 A_llist_bool_fun$)) (=> (forall ((?v3 A_llist$)) (=> (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_list$)) (=> (member$c ?v3 ?v1) (fun_app$c ?v2 (fun_app$g ?v0 ?v3)))))))
(assume a257 (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$)) (=> (forall ((?v3 A_llist$)) (=> (member$ ?v3 (image$a ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v1) (fun_app$c ?v2 (fun_app$ ?v0 ?v3)))))))
(assume a258 (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_llist$) (?v3 A_list_a_llist_fun$)) (=> (and (member$c ?v0 ?v1) (= ?v2 (fun_app$g ?v3 ?v0))) (member$ ?v2 (image$ ?v3 ?v1)))))
(assume a259 (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist$) (?v3 A_llist_a_llist_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$ ?v3 ?v0))) (member$ ?v2 (image$a ?v3 ?v1)))))
(assume a260 (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_a_llist_fun$)) (=> (member$c ?v0 ?v1) (member$ (fun_app$g ?v2 ?v0) (image$ ?v2 ?v1)))))
(assume a261 (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$ ?v2 ?v0) (image$a ?v2 ?v1)))))
(assume a262 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (or (fun_app$c lnull$b ?v0) (not (fun_app$i ?v1 (lhd$ ?v0)))) (fun_app$c lnull$b (fun_app$ (ltakeWhile$ ?v1) ?v0)))))
(assume a263 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$c lnull$b ?v0)) (fun_app$i ?v1 (lhd$ ?v0))) (= (lhd$ (fun_app$ (ltakeWhile$ ?v1) ?v0)) (lhd$ ?v0)))))
(assume a264 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$c lnull$b ?v0)) (fun_app$i ?v1 (lhd$ ?v0))) (not (fun_app$c lnull$b (fun_app$ (ltakeWhile$ ?v1) ?v0))))))
(assume a265 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (or (fun_app$c lnull$b ?v0) (not (fun_app$i ?v1 (lhd$ ?v0)))) (= (fun_app$ (ltakeWhile$ ?v1) ?v0) lNil$))))
(assume a266 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$c lnull$b ?v0)) (fun_app$i ?v1 (lhd$ ?v0))) (= (ltl$ (fun_app$ (ltakeWhile$ ?v1) ?v0)) (fun_app$ (ltakeWhile$ ?v1) (ltl$ ?v0))))))
(assume a267 (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list$)) (=> (= ?v0 (fun_app$g ?v1 ?v2)) (member$ ?v0 (image$ ?v1 top$)))))
(assume a268 (forall ((?v0 A_list_a_llist_fun$) (?v1 A_list$)) (member$ (fun_app$g ?v0 ?v1) (image$ ?v0 top$))))
(assume a269 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$c lnull$b ?v0)) (fun_app$i ?v1 (lhd$ ?v0))) (= (fun_app$ (ltakeWhile$ ?v1) ?v0) (lCons$ (lhd$ ?v0) (fun_app$ (ltakeWhile$ ?v1) (ltl$ ?v0)))))))
(assume a270 (forall ((?v0 A_list$)) (=> (not (= ?v0 nil$)) (= (rotate1$ ?v0) (fun_app$b (append$ (tl$ ?v0)) (cons$ (hd$ ?v0) nil$))))))
(assume a271 (= (sublists$ nil$) (! (cons$b nil$ nil$b) :named @p_7)))
(assume a272 (forall ((?v0 A_list$)) (= (= (rotate1$ ?v0) nil$) (= ?v0 nil$))))
(assume a273 (= (rotate1$ nil$) nil$))
(assume a274 (forall ((?v0 A$) (?v1 A_list$)) (= (rotate1$ (cons$ ?v0 ?v1)) (fun_app$b (append$ ?v1) (cons$ ?v0 nil$)))))
(assume a275 (forall ((?v0 A_llist$)) (= (top$c ?v0) (member$ ?v0 top$a))))
(assume a276 (forall ((?v0 A_list$)) (= (fun_app$f top$b ?v0) (member$c ?v0 top$))))
(assume a277 (forall ((?v0 A_list_a_llist_fun$) (?v1 A_llist$)) (=> (= (image$ ?v0 top$) top$a) (exists ((?v2 A_list$)) (= ?v1 (fun_app$g ?v0 ?v2))))))
(assume a278 (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$)) (=> (= (image$b ?v0 top$) top$) (exists ((?v2 A_list$)) (= ?v1 (fun_app$b ?v0 ?v2))))))
(assume a279 (forall ((?v0 A_list_a_llist_fun$) (?v1 A_llist$)) (=> (and (= (image$ ?v0 top$) top$a) (forall ((?v2 A_list$)) (=> (= ?v1 (fun_app$g ?v0 ?v2)) false))) false)))
(assume a280 (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$)) (=> (and (= (image$b ?v0 top$) top$) (forall ((?v2 A_list$)) (=> (= ?v1 (fun_app$b ?v0 ?v2)) false))) false)))
(assume a281 (forall ((?v0 A_list_a_llist_fun$)) (= (= (image$ ?v0 top$) top$a) (forall ((?v1 A_llist$)) (exists ((?v2 A_list$)) (= ?v1 (fun_app$g ?v0 ?v2)))))))
(assume a282 (forall ((?v0 A_list_a_list_fun$)) (= (= (image$b ?v0 top$) top$) (forall ((?v1 A_list$)) (exists ((?v2 A_list$)) (= ?v1 (fun_app$b ?v0 ?v2)))))))
(assume a283 (forall ((?v0 A_list_a_llist_fun$) (?v1 A_llist_a_list_fun$)) (=> (forall ((?v2 A_llist$)) (= (fun_app$g ?v0 (fun_app$t ?v1 ?v2)) ?v2)) (= (image$ ?v0 top$) top$a))))
(assume a284 (forall ((?v0 A_list_a_list_fun$) (?v1 A_list_a_list_fun$)) (=> (forall ((?v2 A_list$)) (= (fun_app$b ?v0 (fun_app$b ?v1 ?v2)) ?v2)) (= (image$b ?v0 top$) top$))))
(assume a285 (= (product_lists$ nil$b) @p_7))
(assume a286 (forall ((?v0 A_llist$)) (= (fun_app$ (fun_app$u (fun_app$v (unfold_llist$ lnull$b) uud$) uue$) ?v0) ?v0)))
(assume a287 (forall ((?v0 A_a_list_fun$) (?v1 A$) (?v2 A_list$)) (= (fun_app$b (maps$ ?v0) (cons$ ?v1 ?v2)) (fun_app$b (append$ (fun_app$s ?v0 ?v1)) (fun_app$b (maps$ ?v0) ?v2)))))
(assume a288 (forall ((?v0 A$)) (= (fun_app$b (insert$ ?v0) nil$) (cons$ ?v0 nil$))))
(assume a289 (forall ((?v0 A_a_list_fun$)) (= (fun_app$b (maps$ ?v0) nil$) nil$)))
(assume a290 (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$)) (= (remdups_adj$ (fun_app$b (append$ ?v0) (cons$ ?v1 ?v2))) (fun_app$b (append$ (remdups_adj$ (fun_app$b (append$ ?v0) (cons$ ?v1 nil$)))) (tl$ (remdups_adj$ (cons$ ?v1 ?v2)))))))
(assume a291 (forall ((?v0 A_list$) (?v1 A$)) (= (last$ (fun_app$b (append$ ?v0) (cons$ ?v1 nil$))) ?v1)))
(assume a292 (forall ((?v0 A_list$) (?v1 A$)) (= (butlast$ (fun_app$b (append$ ?v0) (cons$ ?v1 nil$))) ?v0)))
(assume a293 (forall ((?v0 A_list$)) (= (= (remdups_adj$ ?v0) nil$) (= ?v0 nil$))))
(assume a294 (forall ((?v0 A_list$)) (= (hd$ (remdups_adj$ ?v0)) (hd$ ?v0))))
(assume a295 (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= ?v0 nil$)) (= (last$ (fun_app$b (append$ ?v1) ?v0)) (last$ ?v0)))))
(assume a296 (forall ((?v0 A_list$) (?v1 A_list$)) (=> (= ?v0 nil$) (= (last$ (fun_app$b (append$ ?v1) ?v0)) (last$ ?v1)))))
(assume a297 (forall ((?v0 A$) (?v1 A_list$)) (= (cons$ ?v0 (tl$ (remdups_adj$ (cons$ ?v0 ?v1)))) (remdups_adj$ (cons$ ?v0 ?v1)))))
(assume a298 (forall ((?v0 A_list$)) (=> (not (= ?v0 nil$)) (= (fun_app$b (append$ (butlast$ ?v0)) (cons$ (last$ ?v0) nil$)) ?v0))))
(assume a299 (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$)) (= (= (fun_app$b (append$ ?v0) (cons$ ?v1 nil$)) ?v2) (and (not (= ?v2 nil$)) (and (= (butlast$ ?v2) ?v0) (= (last$ ?v2) ?v1))))))
(assume a300 (forall ((?v0 A$) (?v1 A$) (?v2 A_list$)) (= (remdups_adj$ (cons$ ?v0 (cons$ ?v1 ?v2))) (ite (= ?v0 ?v1) (remdups_adj$ (cons$ ?v0 ?v2)) (cons$ ?v0 (remdups_adj$ (cons$ ?v1 ?v2)))))))
(assume a301 (= (remdups_adj$ nil$) nil$))
(assume a302 (forall ((?v0 A_list$)) (= (butlast$ (tl$ ?v0)) (tl$ (butlast$ ?v0)))))
(assume a303 (= (butlast$ nil$) nil$))
(assume a304 (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (= (remdups_adj$ ?v0) ?v1) (and (=> (and (= ?v0 nil$) (= ?v1 nil$)) false) (and (forall ((?v2 A$)) (=> (and (= ?v0 (cons$ ?v2 nil$)) (= ?v1 (cons$ ?v2 nil$))) false)) (forall ((?v2 A$) (?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (cons$ ?v2 (cons$ ?v3 ?v4))) (= ?v1 (ite (= ?v2 ?v3) (remdups_adj$ (cons$ ?v2 ?v4)) (cons$ ?v2 (remdups_adj$ (cons$ ?v3 ?v4)))))) false))))) false)))
(assume a305 (forall ((?v0 A$)) (= (remdups_adj$ (cons$ ?v0 nil$)) (cons$ ?v0 nil$))))
(assume a306 (forall ((?v0 A$) (?v1 A_list$)) (= (butlast$ (cons$ ?v0 ?v1)) (ite (= ?v1 nil$) nil$ (cons$ ?v0 (butlast$ ?v1))))))
(assume a307 (forall ((?v0 A_list$) (?v1 A$)) (=> (not (= ?v0 nil$)) (= (last$ (cons$ ?v1 ?v0)) (last$ ?v0)))))
(assume a308 (forall ((?v0 A_list$) (?v1 A$)) (=> (= ?v0 nil$) (= (last$ (cons$ ?v1 ?v0)) ?v1))))
(assume a309 (forall ((?v0 A$) (?v1 A_list$)) (= (last$ (cons$ ?v0 ?v1)) (ite (= ?v1 nil$) ?v0 (last$ ?v1)))))
(assume a310 (forall ((?v0 A_list$) (?v1 A_list$)) (= (butlast$ (fun_app$b (append$ ?v0) ?v1)) (ite (= ?v1 nil$) (butlast$ ?v0) (fun_app$b (append$ ?v0) (butlast$ ?v1))))))
(assume a311 (forall ((?v0 A_list$) (?v1 A_list$)) (= (last$ (fun_app$b (append$ ?v0) ?v1)) (ite (= ?v1 nil$) (last$ ?v0) (last$ ?v1)))))
(assume a312 (forall ((?v0 A_list$)) (=> (or (= ?v0 nil$) (not (= (tl$ ?v0) nil$))) (= (last$ (tl$ ?v0)) (last$ ?v0)))))
(assume a313 (forall ((?v0 A_list$) (?v1 A$) (?v2 A$)) (= (remdups_adj$ (fun_app$b (append$ ?v0) (cons$ ?v1 (cons$ ?v2 nil$)))) (fun_app$b (append$ (remdups_adj$ (fun_app$b (append$ ?v0) (cons$ ?v1 nil$)))) (ite (= ?v1 ?v2) nil$ (cons$ ?v2 nil$))))))
(assume a314 (forall ((?v0 A_bool_fun$)) (= (fun_app$f (list_ex1$ ?v0) nil$) false)))
(assume a315 (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$c (pred_llist$ ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$i ?v0 ?v1) (fun_app$c (pred_llist$ ?v0) ?v2)))))
(assume a316 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$)) (= (fun_app$f (fun_app$r (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) nil$) false)))
(assume a317 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A_list$)) (= (fun_app$f (fun_app$r (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4)) (or (fun_app$i (fun_app$w ?v0 ?v1) ?v3) (and (not (fun_app$i (fun_app$w ?v0 ?v3) ?v1)) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v2) ?v4))))))
(assume a318 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (= (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v1) nil$) (= ?v1 nil$))))
(assume a319 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (= (fun_app$f (fun_app$r (lexordp_eq$ ?v0) nil$) ?v1) true)))
(assume a320 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) nil$) ?v1)))
(assume a321 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (fun_app$i (fun_app$w ?v0 ?v1) ?v2) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4)))))
(assume a322 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (not (fun_app$i (fun_app$w ?v0 ?v1) ?v2)) (and (not (fun_app$i (fun_app$w ?v0 ?v2) ?v1)) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v3) ?v4))) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4)))))
(assume a323 (forall ((?v0 A_bool_fun$)) (fun_app$c (pred_llist$ ?v0) lNil$)))
(assume a324 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_list$)) (and (= ?v1 nil$) (= ?v2 ?v3))) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$i (fun_app$w ?v0 ?v3) ?v4)))) (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$i (fun_app$w ?v0 ?v3) ?v4)) (and (not (fun_app$i (fun_app$w ?v0 ?v4) ?v3)) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v5) ?v6)))))))))))
(assume a325 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$)) (=> (and (= ?v1 nil$) (= ?v2 ?v3)) false)) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$i (fun_app$w ?v0 ?v3) ?v4))) false)) (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$i (fun_app$w ?v0 ?v3) ?v4)) (and (not (fun_app$i (fun_app$w ?v0 ?v4) ?v3)) (fun_app$f (fun_app$r (lexordp_eq$ ?v0) ?v5) ?v6))))) false))))) false)))
(assume a326 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$f (fun_app$r (listrelp$ ?v0) ?v1) ?v2) (or (and (= ?v1 nil$) (= ?v2 nil$)) (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$i (fun_app$w ?v0 ?v3) ?v4) (fun_app$f (fun_app$r (listrelp$ ?v0) ?v5) ?v6)))))))))
(assume a327 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$f (fun_app$r (listrelp$ ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$) (= ?v2 nil$)) false) (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$i (fun_app$w ?v0 ?v3) ?v4) (fun_app$f (fun_app$r (listrelp$ ?v0) ?v5) ?v6)))) false)))) false)))
(assume a328 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (fun_app$i (fun_app$w ?v0 ?v1) ?v2) (fun_app$f (fun_app$r (listrelp$ ?v0) ?v3) ?v4)) (fun_app$f (fun_app$r (listrelp$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4)))))
(assume a329 (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$f (fun_app$r (listrelp$ ?v0) nil$) nil$)))
(assume a330 (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$c (fun_app$l ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$c (fun_app$l ?v0 ?v4) ?v5) (or (exists ((?v6 A_llist$) (?v7 A_llist$) (?v8 A$)) (and (= ?v4 (lCons$ ?v8 ?v6)) (and (= ?v5 (lCons$ ?v8 ?v7)) (or (fun_app$c (fun_app$l ?v0 ?v6) ?v7) (fun_app$c (fun_app$l (llexord$ ?v3) ?v6) ?v7))))) (or (exists ((?v6 A$) (?v7 A$) (?v8 A_llist$) (?v9 A_llist$)) (and (= ?v4 (lCons$ ?v6 ?v8)) (and (= ?v5 (lCons$ ?v7 ?v9)) (fun_app$i (fun_app$w ?v3 ?v6) ?v7)))) (exists ((?v6 A_llist$)) (and (= ?v4 lNil$) (= ?v5 ?v6)))))))) (fun_app$c (fun_app$l (llexord$ ?v3) ?v1) ?v2))))
(assume a331 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$l (llexord$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (=> (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$c (fun_app$l (llexord$ ?v0) ?v3) ?v4))) false)) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$i (fun_app$w ?v0 ?v3) ?v4))) false)) (forall ((?v3 A_llist$)) (=> (and (= ?v1 lNil$) (= ?v2 ?v3)) false))))) false)))
(assume a332 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$i (fun_app$w ?v0 ?v1) ?v2) (fun_app$c (fun_app$l (llexord$ ?v0) (lCons$ ?v1 ?v3)) (lCons$ ?v2 ?v4)))))
(assume a333 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A$)) (=> (fun_app$c (fun_app$l (llexord$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$l (llexord$ ?v0) (lCons$ ?v3 ?v1)) (lCons$ ?v3 ?v2)))))
(assume a334 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$c (fun_app$l (llexord$ ?v0) lNil$) ?v1)))
(assume a335 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$c (fun_app$l (llexord$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$c (fun_app$l (llexord$ ?v0) ?v3) ?v4)))) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$i (fun_app$w ?v0 ?v3) ?v4)))) (exists ((?v3 A_llist$)) (and (= ?v1 lNil$) (= ?v2 ?v3))))))))
(assume a336 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (= (ltl$a (lzip$ ?v0 ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1))))))
(assume a337 (forall ((?v0 A_a_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (and (= (fun_app$b (fun_app$x (map_tailrec_rev$ ?v0) ?v1) ?v2) ?v3) (and (forall ((?v4 A_a_fun$) (?v5 A_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 nil$) (and (= ?v2 ?v5) (= ?v3 ?v5)))) false)) (forall ((?v4 A_a_fun$) (?v5 A$) (?v6 A_list$) (?v7 A_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 (cons$ ?v5 ?v6)) (and (= ?v2 ?v7) (= ?v3 (fun_app$b (fun_app$x (map_tailrec_rev$ ?v4) ?v6) (cons$ (fun_app$y ?v4 ?v5) ?v7)))))) false)))) false)))
(assume a338 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$a (lzip$ ?v0 ?v1)) (or (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)))))
(assume a339 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$a (lzip$ ?v0 ?v1))) (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))))))
(assume a340 (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (= (fun_app$b (fun_app$x (map_tailrec_rev$ ?v0) (cons$ ?v1 ?v2)) ?v3) (fun_app$b (fun_app$x (map_tailrec_rev$ ?v0) ?v2) (cons$ (fun_app$y ?v0 ?v1) ?v3)))))
(assume a341 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) (= (lzip$ ?v0 ?v1) lNil$a))))
(assume a342 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) (lnull$a (lzip$ ?v0 ?v1)))))
(assume a343 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (not (lnull$a (lzip$ ?v0 ?v1))))))
(assume a344 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lzip$ ?v0 ?v1) (ite (or (fun_app$c lnull$b ?v0) (fun_app$c lnull$b ?v1)) lNil$a (lCons$a (pair$ (lhd$ ?v0) (lhd$ ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1)))))))
(assume a345 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (= (lzip$ ?v0 ?v1) (lCons$a (pair$ (lhd$ ?v0) (lhd$ ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1)))))))
(assume a346 (forall ((?v0 A_list_a_list_prod$)) (=> (and (forall ((?v1 A_list$)) (=> (= ?v0 (pair$a nil$ ?v1)) false)) (and (forall ((?v1 A$) (?v2 A_list$)) (=> (= ?v0 (pair$a (cons$ ?v1 ?v2) nil$)) false)) (forall ((?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A_list$)) (=> (= ?v0 (pair$a (cons$ ?v1 ?v2) (cons$ ?v3 ?v4))) false)))) false)))
(assume a347 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$c lnull$b ?v0)) (not (fun_app$c lnull$b ?v1))) (= (lhd$a (lzip$ ?v0 ?v1)) (pair$ (lhd$ ?v0) (lhd$ ?v1))))))
(assume a348 (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A_a_prod_set$)) (= (member$a (pair$a (fun_app$b (append$ ?v0) (cons$ ?v1 nil$)) (fun_app$b (append$ ?v2) (cons$ ?v3 nil$))) (listrel1$ ?v4)) (or (and (member$a (pair$a ?v0 ?v2) (listrel1$ ?v4)) (= ?v1 ?v3)) (and (= ?v0 ?v2) (member$b (pair$ ?v1 ?v3) ?v4))))))
(assume a349 (forall ((?v0 A$) (?v1 A$) (?v2 A_a_prod_set$) (?v3 A_list$) (?v4 A_list$) (?v5 A_list$)) (=> (member$b (pair$ ?v0 ?v1) ?v2) (member$a (pair$a (fun_app$b (append$ ?v3) (cons$ ?v0 ?v4)) (fun_app$b (append$ ?v3) (cons$ ?v1 ?v5))) (lexord$ ?v2)))))
(assume a350 (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$) (?v4 A_a_prod_set$)) (= (member$a (pair$a (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (listrel1$ ?v4)) (or (and (member$b (pair$ ?v0 ?v2) ?v4) (= ?v1 ?v3)) (and (= ?v0 ?v2) (member$a (pair$a ?v1 ?v3) (listrel1$ ?v4)))))))
(assume a351 (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$) (?v4 A_a_prod_set$)) (= (member$a (pair$a (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (lexord$ ?v4)) (or (member$b (pair$ ?v0 ?v2) ?v4) (and (= ?v0 ?v2) (member$a (pair$a ?v1 ?v3) (lexord$ ?v4)))))))
(assume a352 (forall ((?v0 A_list$) (?v1 A_a_prod_set$)) (= (member$a (pair$a nil$ ?v0) (lexord$ ?v1)) (exists ((?v2 A$) (?v3 A_list$)) (= ?v0 (cons$ ?v2 ?v3))))))
(assume a353 (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_a_prod_set$) (?v3 A_list$) (?v4 A_list$)) (=> (or (and (member$a (pair$a ?v0 ?v1) (listrel1$ ?v2)) (= ?v3 ?v4)) (and (= ?v0 ?v1) (member$a (pair$a ?v3 ?v4) (listrel1$ ?v2)))) (member$a (pair$a (fun_app$b (append$ ?v0) ?v3) (fun_app$b (append$ ?v1) ?v4)) (listrel1$ ?v2)))))
(assume a354 (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_a_prod_set$)) (=> (and (member$a (pair$a (fun_app$b (append$ ?v0) ?v1) (fun_app$b (append$ ?v0) ?v2)) (lexord$ ?v3)) (forall ((?v4 A$)) (not (member$b (pair$ ?v4 ?v4) ?v3)))) (member$a (pair$a ?v1 ?v2) (lexord$ ?v3)))))
(assume a355 (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_a_prod_set$) (?v3 A_list$)) (=> (member$a (pair$a ?v0 ?v1) (lexord$ ?v2)) (member$a (pair$a (fun_app$b (append$ ?v3) ?v0) (fun_app$b (append$ ?v3) ?v1)) (lexord$ ?v2)))))
(assume a356 (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_a_prod_set$)) (=> (exists ((?v3 A$) (?v4 A_list$)) (= ?v0 (cons$ ?v3 ?v4))) (member$a (pair$a ?v1 (fun_app$b (append$ ?v1) ?v0)) (lexord$ ?v2)))))
(assume a357 (forall ((?v0 A_list$) (?v1 A_a_prod_set$)) (not (member$a (pair$a nil$ ?v0) (listrel1$ ?v1)))))
(assume a358 (forall ((?v0 A_list$) (?v1 A_a_prod_set$)) (not (member$a (pair$a ?v0 nil$) (listrel1$ ?v1)))))
(assume a359 (forall ((?v0 A_list$) (?v1 A_a_prod_set$)) (not (member$a (pair$a ?v0 nil$) (lexord$ ?v1)))))
(step t0 (cl (! (=> (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (! (not (! (= xs$ (fun_app$g llist_of$ @quantifiers_skolemize_10)) :named @p_17)) :named @p_18)) :named @p_51) (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) :rule implies_neg1)
(anchor :step t1)
(assume t1.a0 (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))))
(step t1.t0 (cl (or (! (not (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) :named @p_50) @p_18)) :rule forall_inst :args (@quantifiers_skolemize_10))
(step t1.t1 (cl @p_50 @p_18) :rule or :premises (t1.t0))
(step t1.t2 (cl (not (! (= (forall ((?v0 A_list$)) (=> (= xs$ (fun_app$g llist_of$ ?v0)) thesis$)) (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) :named @p_8)) (not (forall ((?v0 A_list$)) (=> (= xs$ (fun_app$g llist_of$ ?v0)) thesis$))) (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) :rule equiv_pos2)
(step t1.t3 (cl (! (= (forall ((?v0 A_list$)) (=> (= xs$ (fun_app$g llist_of$ ?v0)) thesis$)) (forall ((?v0 A_list$)) (or (not (= xs$ (fun_app$g llist_of$ ?v0))) thesis$))) :named @p_16)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_16 13 6))
(step t1.t4 (cl (! (= (forall ((?v0 A_list$)) (or (not (= xs$ (fun_app$g llist_of$ ?v0))) thesis$)) (! (or thesis$ (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) :named @p_9)) :named @p_15)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_15 13 6))
(step t1.t5 (cl (= (forall ((?v0 A_list$)) (=> (= xs$ (fun_app$g llist_of$ ?v0)) thesis$)) @p_9)) :rule trans :premises (t1.t3 t1.t4))
(step t1.t6 (cl (not (! (= @p_1 (! (= thesis$ false) :named @p_12)) :named @p_13)) (not @p_1) @p_12) :rule equiv_pos2)
(step t1.t7 (cl (! (= @p_12 @p_1) :named @p_14)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_14 1 5))
(step t1.t8 (cl @p_13) :rule symm :premises (t1.t7))
(step t1.t9 (cl @p_12) :rule resolution :premises (t1.t6 t1.t8 a7))
(step t1.t10 (cl (= (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))))) :rule refl)
(step t1.t11 (cl (= @p_9 (! (or false (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) :named @p_10))) :rule cong :premises (t1.t9 t1.t10))
(step t1.t12 (cl (! (= @p_10 (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) :named @p_11)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_11 1 5))
(step t1.t13 (cl (= @p_9 (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))))) :rule trans :premises (t1.t11 t1.t12))
(step t1.t14 (cl @p_8) :rule trans :premises (t1.t5 t1.t13))
(step t1.t15 (cl (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) :rule resolution :premises (t1.t2 t1.t14 a8))
(step t1.t16 (cl @p_18) :rule resolution :premises (t1.t1 t1.t15))
(step t1 (cl @p_50 @p_18) :rule subproof :discharge (t1.a0))
(step t2 (cl @p_51 @p_18) :rule resolution :premises (t0 t1))
(step t3 (cl @p_51 (! (not @p_18) :named @p_46)) :rule implies_neg2)
(step t4 (cl @p_51 @p_51) :rule resolution :premises (t2 t3))
(step t5 (cl @p_51) :rule contraction :premises (t4))
(step t6 (cl @p_50 @p_18) :rule implies :premises (t5))
(step t7 (cl (not (! (= (! (or (! (or (not (member$c @quantifiers_skolemize_10 @p_5)) @p_18) :named @p_19) @p_46) :named @p_47) (! (or @p_19 @p_17) :named @p_45)) :named @p_48)) (not @p_47) @p_45) :rule equiv_pos2)
(step t8 (cl (= @p_19 @p_19)) :rule refl)
(step t9 (cl (! (= @p_46 @p_17) :named @p_49)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_49 1 5))
(step t10 (cl @p_48) :rule cong :premises (t8 t9))
(step t11 (cl @p_19 @p_46) :rule or_neg :args (1))
(step t12 (cl @p_47 (! (not @p_19) :named @p_20)) :rule or_neg :args (0))
(step t13 (cl @p_47 (not @p_46)) :rule or_neg :args (1))
(step t14 (cl @p_47 @p_47) :rule resolution :premises (t11 t12 t13))
(step t15 (cl @p_47) :rule contraction :premises (t14))
(step t16 (cl @p_45) :rule resolution :premises (t7 t10 t15))
(step t17 (cl @p_19 @p_17) :rule or :premises (t16))
(step t18 (cl @p_17 @p_19) :rule reordering :premises (t17))
(step t19 (cl (not (! (= (! (not (forall ((?v3 A_list$)) (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3)))))) :named @p_21) @p_20) :named @p_44)) (not @p_21) @p_20) :rule equiv_pos2)
(anchor :step t20 :args ((:= (?v3 A_list$) @quantifiers_skolemize_10)))
(step t20.t0 (cl (= (or (not (member$c ?v3 @p_5)) (not (= xs$ (fun_app$g llist_of$ ?v3)))) @p_19)) :rule refl)
(step t20 (cl (= (forall ((?v3 A_list$)) (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3))))) @p_19)) :rule sko_forall)
(step t21 (cl @p_44) :rule cong :premises (t20))
(step t22 (cl (! (not (! (= (! (member$ xs$ (! (image$ llist_of$ @p_5) :named @p_22)) :named @p_23) @p_21) :named @p_24)) :named @p_43) (! (not @p_23) :named @p_42) @p_21) :rule equiv_pos2)
(step t23 (cl @p_42 @p_21 @p_43) :rule reordering :premises (t22))
(step t24 (cl (! (not (! (= @p_2 @p_23) :named @p_33)) :named @p_41) (! (not @p_2) :named @p_40) @p_23) :rule equiv_pos2)
(step t25 (cl @p_40 @p_23 @p_41) :rule reordering :premises (t24))
(step t26 (cl (or (! (not (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (member$ ?v0 (image$ llist_of$ (collect$a top$b)))))) :named @p_39) @p_33)) :rule forall_inst :args (xs$))
(step t27 (cl @p_39 @p_33) :rule or :premises (t26))
(step t28 (cl (not (! (= (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (member$ ?v0 (image$ llist_of$ top$)))) (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (member$ ?v0 (image$ llist_of$ (collect$a top$b)))))) :named @p_34)) (not (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (member$ ?v0 (image$ llist_of$ top$))))) (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (member$ ?v0 (image$ llist_of$ (collect$a top$b)))))) :rule equiv_pos2)
(anchor :step t29 :args ((?v0 A_llist$) (:= (?v0 A_llist$) ?v0)))
(step t29.t0 (cl (= (! (lfinite$ ?v0) :named @p_36) @p_36)) :rule refl)
(step t29.t1 (cl (! (= ?v0 ?v0) :named @p_26)) :rule refl)
(step t29.t2 (cl (= llist_of$ llist_of$)) :rule refl)
(step t29.t3 (cl (= (! (image$ llist_of$ top$) :named @p_37) @p_22)) :rule cong :premises (t29.t2 a246))
(step t29.t4 (cl (= (! (member$ ?v0 @p_37) :named @p_38) (! (member$ ?v0 @p_22) :named @p_35))) :rule cong :premises (t29.t1 t29.t3))
(step t29.t5 (cl (= (= @p_36 @p_38) (= @p_36 @p_35))) :rule cong :premises (t29.t0 t29.t4))
(step t29 (cl @p_34) :rule bind)
(step t30 (cl (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (member$ ?v0 (image$ llist_of$ (collect$a top$b)))))) :rule resolution :premises (t28 t29 a32))
(step t31 (cl @p_33) :rule resolution :premises (t27 t30))
(step t32 (cl @p_23) :rule resolution :premises (t25 a9 t31))
(step t33 (cl (or (! (not (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (not (forall ((?v3 A_list$)) (or (not (member$c ?v3 ?v2)) (not (= ?v0 (fun_app$g ?v1 ?v3))))))))) :named @p_32) @p_24)) :rule forall_inst :args (xs$ llist_of$ @p_5))
(step t34 (cl @p_32 @p_24) :rule or :premises (t33))
(step t35 (cl (not (! (= (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (exists ((?v3 A_list$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3)))))) (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (not (forall ((?v3 A_list$)) (or (not (member$c ?v3 ?v2)) (not (= ?v0 (fun_app$g ?v1 ?v3))))))))) :named @p_25)) (not (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (exists ((?v3 A_list$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3))))))) (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (not (forall ((?v3 A_list$)) (or (not (member$c ?v3 ?v2)) (not (= ?v0 (fun_app$g ?v1 ?v3))))))))) :rule equiv_pos2)
(anchor :step t36 :args ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$) (:= (?v0 A_llist$) ?v0) (:= (?v1 A_list_a_llist_fun$) ?v1) (:= (?v2 A_list_set$) ?v2)))
(step t36.t0 (cl (= (! (member$ ?v0 (image$ ?v1 ?v2)) :named @p_28) @p_28)) :rule refl)
(step t36.t1 (cl (! (= (exists ((?v3 A_list$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3)))) (! (not (forall ((?v3 A_list$)) (not (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3)))))) :named @p_29)) :named @p_31)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_31 13 6))
(step t36.t2 (cl (! (= (forall ((?v3 A_list$)) (not (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3))))) (forall ((?v3 A_list$)) (or (not (member$c ?v3 ?v2)) (not (= ?v0 (fun_app$g ?v1 ?v3)))))) :named @p_30)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_30 13 6))
(step t36.t3 (cl (= @p_29 (! (not (forall ((?v3 A_list$)) (or (not (member$c ?v3 ?v2)) (not (= ?v0 (fun_app$g ?v1 ?v3)))))) :named @p_27))) :rule cong :premises (t36.t2))
(step t36.t4 (cl (= (exists ((?v3 A_list$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3)))) @p_27)) :rule trans :premises (t36.t1 t36.t3))
(step t36.t5 (cl (= (= @p_28 (exists ((?v3 A_list$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3))))) (= @p_28 @p_27))) :rule cong :premises (t36.t0 t36.t4))
(step t36 (cl @p_25) :rule bind)
(step t37 (cl (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (not (forall ((?v3 A_list$)) (or (not (member$c ?v3 ?v2)) (not (= ?v0 (fun_app$g ?v1 ?v3))))))))) :rule resolution :premises (t35 t36 a251))
(step t38 (cl @p_24) :rule resolution :premises (t34 t37))
(step t39 (cl @p_21) :rule resolution :premises (t23 t32 t38))
(step t40 (cl @p_20) :rule resolution :premises (t19 t21 t39))
(step t41 (cl @p_17) :rule resolution :premises (t18 t40))
(step t42 (cl (not @p_8) (not (forall ((?v0 A_list$)) (=> (= xs$ (fun_app$g llist_of$ ?v0)) thesis$))) (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) :rule equiv_pos2)
(step t43 (cl @p_16) :rule hole :args ("TRUST_THEORY_REWRITE" @p_16 13 6))
(step t44 (cl @p_15) :rule hole :args ("TRUST_THEORY_REWRITE" @p_15 13 6))
(step t45 (cl (= (forall ((?v0 A_list$)) (=> (= xs$ (fun_app$g llist_of$ ?v0)) thesis$)) @p_9)) :rule trans :premises (t43 t44))
(step t46 (cl (not @p_13) (not @p_1) @p_12) :rule equiv_pos2)
(step t47 (cl @p_14) :rule hole :args ("TRUST_THEORY_REWRITE" @p_14 1 5))
(step t48 (cl @p_13) :rule symm :premises (t47))
(step t49 (cl @p_12) :rule resolution :premises (t46 t48 a7))
(step t50 (cl (= (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))) (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))))) :rule refl)
(step t51 (cl (= @p_9 @p_10)) :rule cong :premises (t49 t50))
(step t52 (cl @p_11) :rule hole :args ("TRUST_THEORY_REWRITE" @p_11 1 5))
(step t53 (cl (= @p_9 (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0)))))) :rule trans :premises (t51 t52))
(step t54 (cl @p_8) :rule trans :premises (t45 t53))
(step t55 (cl (forall ((?v0 A_list$)) (not (= xs$ (fun_app$g llist_of$ ?v0))))) :rule resolution :premises (t42 t54 a8))
(step t56 (cl) :rule resolution :premises (t6 t41 t55))
