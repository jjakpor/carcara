unsat
(assume a0 (forall ((?v0 A_llist_llist$)) (= (fun_app$ uvc$ ?v0) (ltl$a ?v0))))
(assume a1 (forall ((?v0 A_a_prod_llist$)) (= (fun_app$a uvb$ ?v0) (ltl$b ?v0))))
(assume a2 (forall ((?v0 Nat_llist$)) (= (fun_app$b uvd$ ?v0) (ltl$d ?v0))))
(assume a3 (forall ((?v0 A_llist$)) (= (fun_app$c uve$ ?v0) (ltl$ ?v0))))
(assume a4 (forall ((?v0 A_llist$)) (= (fun_app$d uvf$ ?v0) (lhd$ ?v0))))
(assume a5 (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$))))
(assume a6 (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (fun_app$f (fun_app$g uvi$ ?v0) ?v1) (fun_app$c (lappend$ ?v0) (lconcat$ ?v1)))))
(assume a7 (forall ((?v0 A_llist$) (?v1 Nat$)) (= (fun_app$h (uvn$ ?v0) ?v1) (fun_app$c (ldropn$ ?v1) ?v0))))
(assume a8 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$i (uwe$ ?v0) ?v1) (suc$ (fun_app$i (min$ ?v0) ?v1)))))
(assume a9 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$i (uwd$ ?v0) ?v1) (suc$ (fun_app$i (min$ ?v1) ?v0)))))
(assume a10 (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$c (fun_app$e (uvm$ ?v0) ?v1) ?v2) (ite (fun_app$j ?v0 ?v1) (lCons$ ?v1 (fun_app$c (lfilter$ ?v0) ?v2)) (fun_app$c (lfilter$ ?v0) ?v2)))))
(assume a11 (forall ((?v0 Nat_nat_prod_set$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$k (fun_app$l (uvz$ ?v0) ?v1) ?v2) (member$ (pair$a ?v1 ?v2) ?v0))))
(assume a12 (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$c (fun_app$e (uvk$ ?v0) ?v1) ?v2) (lCons$ ?v1 (fun_app$c (lappend$ ?v2) ?v0)))))
(assume a13 (forall ((?v0 A_llist_llist$) (?v1 A_llist$) (?v2 A_llist_llist$)) (= (fun_app$ (fun_app$m (uvl$ ?v0) ?v1) ?v2) (lappend$a ?v2 ?v0))))
(assume a14 (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$c (fun_app$e (uvj$ ?v0) ?v1) ?v2) (fun_app$c (lappend$ ?v2) ?v0))))
(assume a15 (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_llist_llist$)) (= (fun_app$f (fun_app$g (uvx$ ?v0) ?v1) ?v2) (fun_app$h (lnth$ ?v2) ?v0))))
(assume a16 (forall ((?v0 Nat$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$d (fun_app$n (uvy$ ?v0) ?v1) ?v2) (lnth$a ?v2 ?v0))))
(assume a17 (forall ((?v0 A_llist_a_llist_fun$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h (fun_app$o (uvs$ ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$h ?v1 ?v2)))))
(assume a18 (forall ((?v0 A_llist_bool_fun$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$k (fun_app$p (uvq$ ?v0) ?v1) ?v2) (fun_app$q ?v0 (fun_app$h ?v1 ?v2)))))
(assume a19 (forall ((?v0 A_llist_nat_fun$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$i (fun_app$r (uvr$ ?v0) ?v1) ?v2) (fun_app$s ?v0 (fun_app$h ?v1 ?v2)))))
(assume a20 (forall ((?v0 Bool_a_llist_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (= (fun_app$h (fun_app$t (uvo$ ?v0) ?v1) ?v2) (fun_app$u ?v0 (fun_app$k ?v1 ?v2)))))
(assume a21 (forall ((?v0 Bool_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (= (fun_app$k (fun_app$v (uvt$ ?v0) ?v1) ?v2) (fun_app$w ?v0 (fun_app$k ?v1 ?v2)))))
(assume a22 (forall ((?v0 Bool_nat_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (= (fun_app$i (fun_app$x (uvu$ ?v0) ?v1) ?v2) (fun_app$y ?v0 (fun_app$k ?v1 ?v2)))))
(assume a23 (forall ((?v0 Nat_a_llist_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (= (fun_app$h (fun_app$z (uvp$ ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$i ?v1 ?v2)))))
(assume a24 (forall ((?v0 Nat_bool_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (= (fun_app$k (fun_app$aa (uvv$ ?v0) ?v1) ?v2) (fun_app$k ?v0 (fun_app$i ?v1 ?v2)))))
(assume a25 (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (= (fun_app$i (fun_app$ab (uvw$ ?v0) ?v1) ?v2) (fun_app$i ?v0 (fun_app$i ?v1 ?v2)))))
(assume a26 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (fun_app$ (fun_app$m (uum$ ?v0 ?v1) ?v2) ?v3) (ite (fun_app$q ?v0 ?v2) (ldropWhile$ ?v0 ?v3) ?v1))))
(assume a27 (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_prod_llist$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod_llist$)) (= (fun_app$ac (fun_app$ad (uul$ ?v0 ?v1) ?v2) ?v3) (ite (fun_app$ae ?v0 ?v2) (ldropWhile$a ?v0 ?v3) ?v1))))
(assume a28 (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_llist$) (?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (= (fun_app$a (fun_app$af (uuk$ ?v0 ?v1) ?v2) ?v3) (ite (fun_app$ag ?v0 ?v2) (ldropWhile$b ?v0 ?v3) ?v1))))
(assume a29 (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$c (fun_app$e (fun_app$ah (uun$ ?v0) ?v1) ?v2) ?v3) (ite (fun_app$j ?v0 ?v2) (fun_app$c (ldropWhile$c ?v0) ?v3) ?v1))))
(assume a30 (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_llist_a_llist_fun_fun$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (fun_app$f (fun_app$g (uue$ ?v0 ?v1) ?v2) ?v3) (fun_app$c ?v0 (fun_app$f (fun_app$g ?v1 ?v2) ?v3)))))
(assume a31 (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$c (fun_app$e (fun_app$ai (uua$ ?v0) ?v1) ?v2) ?v3) (fun_app$c ?v0 (fun_app$c (fun_app$e ?v1 ?v2) ?v3)))))
(assume a32 (forall ((?v0 A_llist_bool_fun$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$q (fun_app$aj (fun_app$ak (uui$ ?v0) ?v1) ?v2) ?v3) (fun_app$q ?v0 (fun_app$c (fun_app$e ?v1 ?v2) ?v3)))))
(assume a33 (forall ((?v0 A_llist_a_fun$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$d (fun_app$n (fun_app$al (uuc$ ?v0) ?v1) ?v2) ?v3) (fun_app$d ?v0 (fun_app$c (fun_app$e ?v1 ?v2) ?v3)))))
(assume a34 (forall ((?v0 Bool_a_llist_fun$) (?v1 A_a_llist_bool_fun_fun$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$c (fun_app$e (fun_app$am (uuj$ ?v0) ?v1) ?v2) ?v3) (fun_app$u ?v0 (fun_app$q (fun_app$aj ?v1 ?v2) ?v3)))))
(assume a35 (forall ((?v0 Bool_bool_fun$) (?v1 A_a_llist_bool_fun_fun$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$q (fun_app$aj (fun_app$an (uuh$ ?v0) ?v1) ?v2) ?v3) (fun_app$w ?v0 (fun_app$q (fun_app$aj ?v1 ?v2) ?v3)))))
(assume a36 (forall ((?v0 Bool_a_fun$) (?v1 A_a_llist_bool_fun_fun$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$d (fun_app$n (fun_app$ao (uug$ ?v0) ?v1) ?v2) ?v3) (fun_app$ap ?v0 (fun_app$q (fun_app$aj ?v1 ?v2) ?v3)))))
(assume a37 (forall ((?v0 A_a_llist_fun$) (?v1 A_a_llist_a_fun_fun$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$c (fun_app$e (fun_app$aq (uud$ ?v0) ?v1) ?v2) ?v3) (fun_app$ar ?v0 (fun_app$d (fun_app$n ?v1 ?v2) ?v3)))))
(assume a38 (forall ((?v0 A_bool_fun$) (?v1 A_a_llist_a_fun_fun$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$q (fun_app$aj (fun_app$as (uuf$ ?v0) ?v1) ?v2) ?v3) (fun_app$j ?v0 (fun_app$d (fun_app$n ?v1 ?v2) ?v3)))))
(assume a39 (forall ((?v0 A_a_fun$) (?v1 A_a_llist_a_fun_fun$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$d (fun_app$n (fun_app$at (uub$ ?v0) ?v1) ?v2) ?v3) (fun_app$au ?v0 (fun_app$d (fun_app$n ?v1 ?v2) ?v3)))))
(assume a40 (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (fun_app$f (fun_app$g uvg$ ?v0) ?v1) ?v0)))
(assume a41 (forall ((?v0 A$) (?v1 A_llist$)) (= (fun_app$d (fun_app$n uvh$ ?v0) ?v1) ?v0)))
(assume a42 (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (fun_app$ (fun_app$m uur$ ?v0) ?v1) ?v1)))
(assume a43 (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod_llist$)) (= (fun_app$ac (fun_app$ad uuq$ ?v0) ?v1) ?v1)))
(assume a44 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (= (fun_app$a (fun_app$af uup$ ?v0) ?v1) ?v1)))
(assume a45 (forall ((?v0 Nat$) (?v1 Nat_llist$)) (= (fun_app$b (fun_app$av uuo$ ?v0) ?v1) ?v1)))
(assume a46 (forall ((?v0 A$) (?v1 A_llist$)) (= (fun_app$c (fun_app$e uus$ ?v0) ?v1) ?v1)))
(assume a47 (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (fun_app$aw (fun_app$ax uux$ ?v0) ?v1) false)))
(assume a48 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (= (fun_app$ay (fun_app$az uuy$ ?v0) ?v1) false)))
(assume a49 (forall ((?v0 Nat$) (?v1 Nat_llist$)) (= (fun_app$ba (fun_app$bb uuz$ ?v0) ?v1) false)))
(assume a50 (forall ((?v0 A$) (?v1 A_llist$)) (= (fun_app$q (fun_app$aj uva$ ?v0) ?v1) false)))
(assume a51 (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (fun_app$aw (fun_app$ax uut$ ?v0) ?v1) true)))
(assume a52 (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (= (fun_app$ay (fun_app$az uuu$ ?v0) ?v1) true)))
(assume a53 (forall ((?v0 Nat$) (?v1 Nat_llist$)) (= (fun_app$ba (fun_app$bb uuv$ ?v0) ?v1) true)))
(assume a54 (forall ((?v0 A$) (?v1 A_llist$)) (= (fun_app$q (fun_app$aj uuw$ ?v0) ?v1) true)))
(assume a55 (forall ((?v0 Nat$)) (= (fun_app$i uwc$ ?v0) ?v0)))
(assume a56 (forall ((?v0 Nat$)) (= (fun_app$k uwa$ ?v0) false)))
(assume a57 (forall ((?v0 Nat$)) (= (fun_app$k uwb$ ?v0) true)))
(assume a58 (! (not (! (= (! (fun_app$c (! (ldropn$ (! (suc$ n$) :named @p_2)) :named @p_3) xs$) :named @p_4) (! (fun_app$c (fun_app$bc (case_llist$ lNil$) uu$) xs$) :named @p_1)) :named @p_5)) :named @p_6))
(assume a59 (forall ((?v0 Nat$)) (= (fun_app$ (ldropn$a ?v0) lNil$a) lNil$a)))
(assume a60 (forall ((?v0 Nat$)) (= (fun_app$a (ldropn$b ?v0) lNil$b) lNil$b)))
(assume a61 (forall ((?v0 Nat$)) (= (fun_app$ac (ldropn$c ?v0) lNil$c) lNil$c)))
(assume a62 (forall ((?v0 Nat$)) (= (fun_app$c (ldropn$ ?v0) lNil$) lNil$)))
(assume a63 (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$c ?v0 (fun_app$c (fun_app$bc (case_llist$ ?v1) ?v2) ?v3)) (fun_app$c (fun_app$bc (case_llist$ (fun_app$c ?v0 ?v1)) (fun_app$ai (uua$ ?v0) ?v2)) ?v3))))
(assume a64 (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$au ?v0 (fun_app$d (fun_app$bd (case_llist$a ?v1) ?v2) ?v3)) (fun_app$d (fun_app$bd (case_llist$a (fun_app$au ?v0 ?v1)) (fun_app$at (uub$ ?v0) ?v2)) ?v3))))
(assume a65 (forall ((?v0 A_llist_a_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$d ?v0 (fun_app$c (fun_app$bc (case_llist$ ?v1) ?v2) ?v3)) (fun_app$d (fun_app$bd (case_llist$a (fun_app$d ?v0 ?v1)) (fun_app$al (uuc$ ?v0) ?v2)) ?v3))))
(assume a66 (forall ((?v0 A_a_llist_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$ar ?v0 (fun_app$d (fun_app$bd (case_llist$a ?v1) ?v2) ?v3)) (fun_app$c (fun_app$bc (case_llist$ (fun_app$ar ?v0 ?v1)) (fun_app$aq (uud$ ?v0) ?v2)) ?v3))))
(assume a67 (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 A_llist_a_llist_llist_a_llist_fun_fun$) (?v3 A_llist_llist$)) (= (fun_app$c ?v0 (fun_app$f (case_llist$b ?v1 ?v2) ?v3)) (fun_app$f (case_llist$b (fun_app$c ?v0 ?v1) (uue$ ?v0 ?v2)) ?v3))))
(assume a68 (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$j ?v0 (fun_app$d (fun_app$bd (case_llist$a ?v1) ?v2) ?v3)) (fun_app$q (fun_app$be (case_llist$c (fun_app$j ?v0 ?v1)) (fun_app$as (uuf$ ?v0) ?v2)) ?v3))))
(assume a69 (forall ((?v0 Bool_a_fun$) (?v1 Bool) (?v2 A_a_llist_bool_fun_fun$) (?v3 A_llist$)) (= (fun_app$ap ?v0 (fun_app$q (fun_app$be (case_llist$c ?v1) ?v2) ?v3)) (fun_app$d (fun_app$bd (case_llist$a (fun_app$ap ?v0 ?v1)) (fun_app$ao (uug$ ?v0) ?v2)) ?v3))))
(assume a70 (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 A_a_llist_bool_fun_fun$) (?v3 A_llist$)) (= (fun_app$w ?v0 (fun_app$q (fun_app$be (case_llist$c ?v1) ?v2) ?v3)) (fun_app$q (fun_app$be (case_llist$c (fun_app$w ?v0 ?v1)) (fun_app$an (uuh$ ?v0) ?v2)) ?v3))))
(assume a71 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$q ?v0 (fun_app$c (fun_app$bc (case_llist$ ?v1) ?v2) ?v3)) (fun_app$q (fun_app$be (case_llist$c (fun_app$q ?v0 ?v1)) (fun_app$ak (uui$ ?v0) ?v2)) ?v3))))
(assume a72 (forall ((?v0 Bool_a_llist_fun$) (?v1 Bool) (?v2 A_a_llist_bool_fun_fun$) (?v3 A_llist$)) (= (fun_app$u ?v0 (fun_app$q (fun_app$be (case_llist$c ?v1) ?v2) ?v3)) (fun_app$c (fun_app$bc (case_llist$ (fun_app$u ?v0 ?v1)) (fun_app$am (uuj$ ?v0) ?v2)) ?v3))))
(assume a73 (forall ((?v0 Bool) (?v1 A_a_llist_bool_fun_fun$)) (= (fun_app$q (fun_app$be (case_llist$c ?v0) ?v1) lNil$) ?v0)))
(assume a74 (forall ((?v0 A_llist_llist$) (?v1 A_llist_a_llist_llist_a_llist_llist_fun_fun$)) (= (fun_app$ (case_llist$d ?v0 ?v1) lNil$a) ?v0)))
(assume a75 (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_llist_a_llist_fun_fun$)) (= (fun_app$f (case_llist$b ?v0 ?v1) lNil$a) ?v0)))
(assume a76 (forall ((?v0 A$) (?v1 A_a_llist_a_fun_fun$)) (= (fun_app$d (fun_app$bd (case_llist$a ?v0) ?v1) lNil$) ?v0)))
(assume a77 (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) lNil$) ?v0)))
(assume a78 (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))))
(assume a79 (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_llist$)) (= (ldropWhile$b ?v0 ?v1) (case_llist$e lNil$b (uuk$ ?v0 ?v1) ?v1))))
(assume a80 (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_prod_llist$)) (= (ldropWhile$a ?v0 ?v1) (case_llist$f lNil$c (uul$ ?v0 ?v1) ?v1))))
(assume a81 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (ldropWhile$ ?v0 ?v1) (fun_app$ (case_llist$d lNil$a (uum$ ?v0 ?v1)) ?v1))))
(assume a82 (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$c (ldropWhile$c ?v0) ?v1) (fun_app$c (fun_app$bc (case_llist$ lNil$) (fun_app$ah (uun$ ?v0) ?v1)) ?v1))))
(assume a83 (forall ((?v0 A_llist$)) (= (fun_app$aw (lmember$ ?v0) lNil$a) false)))
(assume a84 (forall ((?v0 A_a_prod$)) (= (fun_app$ay (lmember$a ?v0) lNil$b) false)))
(assume a85 (forall ((?v0 Nat_nat_prod$)) (= (fun_app$bf (lmember$b ?v0) lNil$c) false)))
(assume a86 (forall ((?v0 A$)) (= (fun_app$q (lmember$c ?v0) lNil$) false)))
(assume a87 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))))
(assume a88 (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))))
(assume a89 (forall ((?v0 A_llist_set$)) (= (fun_app$bg (gen_lset$ ?v0) lNil$a) ?v0)))
(assume a90 (forall ((?v0 A_a_prod_set$)) (= (fun_app$bh (gen_lset$a ?v0) lNil$b) ?v0)))
(assume a91 (forall ((?v0 Nat_nat_prod_set$)) (= (fun_app$bi (gen_lset$b ?v0) lNil$c) ?v0)))
(assume a92 (forall ((?v0 A_set$)) (= (fun_app$bj (gen_lset$c ?v0) lNil$) ?v0)))
(assume a93 (forall ((?v0 A_llist_bool_fun$)) (pred_llist$ ?v0 lNil$a)))
(assume a94 (forall ((?v0 A_a_prod_bool_fun$)) (pred_llist$a ?v0 lNil$b)))
(assume a95 (forall ((?v0 Nat_nat_prod_bool_fun$)) (pred_llist$b ?v0 lNil$c)))
(assume a96 (forall ((?v0 A_bool_fun$)) (fun_app$q (pred_llist$c ?v0) lNil$)))
(assume a97 (forall ((?v0 Nat_nat_prod_llist$) (?v1 Nat$)) (=> (lnull$ ?v0) (= (fun_app$ac (ldropn$c ?v1) ?v0) lNil$c))))
(assume a98 (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (=> (lnull$a ?v0) (= (fun_app$ (ldropn$a ?v1) ?v0) lNil$a))))
(assume a99 (forall ((?v0 A_a_prod_llist$) (?v1 Nat$)) (=> (lnull$b ?v0) (= (fun_app$a (ldropn$b ?v1) ?v0) lNil$b))))
(assume a100 (forall ((?v0 Nat_llist$) (?v1 Nat$)) (=> (lnull$c ?v0) (= (ldropn$d ?v1 ?v0) lNil$d))))
(assume a101 (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (fun_app$q lnull$d ?v0) (= (fun_app$c (ldropn$ ?v1) ?v0) lNil$))))
(assume a102 (forall ((?v0 Nat_llist$)) (= (ltl$d ?v0) (case_llist$g lNil$d uuo$ ?v0))))
(assume a103 (forall ((?v0 A_a_prod_llist$)) (= (ltl$b ?v0) (case_llist$e lNil$b uup$ ?v0))))
(assume a104 (forall ((?v0 Nat_nat_prod_llist$)) (= (ltl$c ?v0) (case_llist$f lNil$c uuq$ ?v0))))
(assume a105 (forall ((?v0 A_llist_llist$)) (= (ltl$a ?v0) (fun_app$ (case_llist$d lNil$a uur$) ?v0))))
(assume a106 (forall ((?v0 A_llist$)) (= (ltl$ ?v0) (fun_app$c (fun_app$bc (case_llist$ lNil$) uus$) ?v0))))
(assume a107 (ldistinct$ lNil$a))
(assume a108 (ldistinct$a lNil$b))
(assume a109 (ldistinct$b lNil$c))
(assume a110 (ldistinct$c lNil$))
(assume a111 (forall ((?v0 A_llist_llist$)) (= (not (lnull$a ?v0)) (case_llist$h false uut$ ?v0))))
(assume a112 (forall ((?v0 A_a_prod_llist$)) (= (not (lnull$b ?v0)) (case_llist$i false uuu$ ?v0))))
(assume a113 (forall ((?v0 Nat_llist$)) (= (not (lnull$c ?v0)) (case_llist$j false uuv$ ?v0))))
(assume a114 (forall ((?v0 A_llist$)) (= (not (fun_app$q lnull$d ?v0)) (fun_app$q (fun_app$be (case_llist$c false) uuw$) ?v0))))
(assume a115 (forall ((?v0 A_llist_llist$)) (= (lnull$a ?v0) (case_llist$h true uux$ ?v0))))
(assume a116 (forall ((?v0 A_a_prod_llist$)) (= (lnull$b ?v0) (case_llist$i true uuy$ ?v0))))
(assume a117 (forall ((?v0 Nat_llist$)) (= (lnull$c ?v0) (case_llist$j true uuz$ ?v0))))
(assume a118 (forall ((?v0 A_llist$)) (= (fun_app$q lnull$d ?v0) (fun_app$q (fun_app$be (case_llist$c true) uva$) ?v0))))
(assume a119 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) false) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) false)) false)))
(assume a120 (forall ((?v0 A_llist$) (?v1 Nat_llist$)) (=> (and (=> (or (fun_app$q lnull$d ?v0) (lnull$c ?v1)) false) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$c ?v1))) false)) false)))
(assume a121 (forall ((?v0 Nat_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$c ?v0) (fun_app$q lnull$d ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (fun_app$q lnull$d ?v1))) false)) false)))
(assume a122 (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$c ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) false)) false)))
(assume a123 (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (fun_app$q lnull$d ?v0) (lnull$a ?v1)) false) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$a ?v1))) false)) false)))
(assume a124 (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (fun_app$q lnull$d ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (fun_app$q lnull$d ?v1))) false)) false)))
(assume a125 (forall ((?v0 A_llist_llist$) (?v1 Nat_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$c ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$c ?v1))) false)) false)))
(assume a126 (forall ((?v0 Nat_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$a ?v1))) false)) false)))
(assume a127 (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (fun_app$q lnull$d ?v0) (lnull$b ?v1)) false) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$b ?v1))) false)) false)))
(assume a128 (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)))
(assume a129 (forall ((?v0 A_llist_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_llist$)) (=> (member$a ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 A_llist_llist$)) (=> (member$a ?v1 ?v0) (lnull$a ?v1)))) false)) false)))
(assume a130 (forall ((?v0 A_a_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_llist$)) (=> (member$b ?v1 ?v0) (lnull$b ?v1))) false) (=> (not (forall ((?v1 A_a_prod_llist$)) (=> (member$b ?v1 ?v0) (lnull$b ?v1)))) false)) false)))
(assume a131 (forall ((?v0 Nat_llist_set$)) (=> (and (=> (forall ((?v1 Nat_llist$)) (=> (member$c ?v1 ?v0) (lnull$c ?v1))) false) (=> (not (forall ((?v1 Nat_llist$)) (=> (member$c ?v1 ?v0) (lnull$c ?v1)))) false)) false)))
(assume a132 (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$d ?v1 ?v0) (fun_app$q lnull$d ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$d ?v1 ?v0) (fun_app$q lnull$d ?v1)))) false)) false)))
(assume a133 (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)))
(assume a134 (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false)))
(assume a135 (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (=> (and (lnull$c ?v0) (lnull$c ?v1)) false) (=> (or (not (lnull$c ?v0)) (not (lnull$c ?v1))) false)) false)))
(assume a136 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) false) (=> (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) false)) false)))
(assume a137 (forall ((?v0 A_llist_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)))
(assume a138 (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (lnull$b ?v0) false) (=> (not (lnull$b ?v0)) false)) false)))
(assume a139 (forall ((?v0 Nat_llist$)) (=> (and (=> (lnull$c ?v0) false) (=> (not (lnull$c ?v0)) false)) false)))
(assume a140 (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$q lnull$d ?v0) false) (=> (not (fun_app$q lnull$d ?v0)) false)) false)))
(assume a141 (forall ((?v0 A_llist_llist$)) (=> (lnull$a ?v0) (lnull$a (ltl$a ?v0)))))
(assume a142 (forall ((?v0 A_a_prod_llist$)) (=> (lnull$b ?v0) (lnull$b (ltl$b ?v0)))))
(assume a143 (forall ((?v0 Nat_llist$)) (=> (lnull$c ?v0) (lnull$c (ltl$d ?v0)))))
(assume a144 (forall ((?v0 A_llist$)) (=> (fun_app$q lnull$d ?v0) (fun_app$q lnull$d (ltl$ ?v0)))))
(assume a145 (= (ltl$d lNil$d) lNil$d))
(assume a146 (= (ltl$a lNil$a) lNil$a))
(assume a147 (= (ltl$b lNil$b) lNil$b))
(assume a148 (= (ltl$c lNil$c) lNil$c))
(assume a149 (= (ltl$ lNil$) lNil$))
(assume a150 (lnull$ lNil$c))
(assume a151 (lnull$a lNil$a))
(assume a152 (lnull$b lNil$b))
(assume a153 (lnull$c lNil$d))
(assume a154 (fun_app$q lnull$d lNil$))
(assume a155 (forall ((?v0 Nat_nat_prod_llist$)) (=> (lnull$ ?v0) (= ?v0 lNil$c))))
(assume a156 (forall ((?v0 A_llist_llist$)) (=> (lnull$a ?v0) (= ?v0 lNil$a))))
(assume a157 (forall ((?v0 A_a_prod_llist$)) (=> (lnull$b ?v0) (= ?v0 lNil$b))))
(assume a158 (forall ((?v0 Nat_llist$)) (=> (lnull$c ?v0) (= ?v0 lNil$d))))
(assume a159 (forall ((?v0 A_llist$)) (=> (fun_app$q lnull$d ?v0) (= ?v0 lNil$))))
(assume a160 (forall ((?v0 Nat_nat_prod_llist$)) (=> (= ?v0 lNil$c) (lnull$ ?v0))))
(assume a161 (forall ((?v0 A_llist_llist$)) (=> (= ?v0 lNil$a) (lnull$a ?v0))))
(assume a162 (forall ((?v0 A_a_prod_llist$)) (=> (= ?v0 lNil$b) (lnull$b ?v0))))
(assume a163 (forall ((?v0 Nat_llist$)) (=> (= ?v0 lNil$d) (lnull$c ?v0))))
(assume a164 (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (fun_app$q lnull$d ?v0))))
(assume a165 (forall ((?v0 Nat_nat_prod_llist$)) (= (lnull$ ?v0) (= ?v0 lNil$c))))
(assume a166 (forall ((?v0 A_llist_llist$)) (= (lnull$a ?v0) (= ?v0 lNil$a))))
(assume a167 (forall ((?v0 A_a_prod_llist$)) (= (lnull$b ?v0) (= ?v0 lNil$b))))
(assume a168 (forall ((?v0 Nat_llist$)) (= (lnull$c ?v0) (= ?v0 lNil$d))))
(assume a169 (forall ((?v0 A_llist$)) (= (fun_app$q lnull$d ?v0) (= ?v0 lNil$))))
(assume a170 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (ltl$b (lzip$ ?v0 ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1))))))
(assume a171 (forall ((?v0 A_llist$) (?v1 Nat_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$c ?v1))) (= (ltl$e (lzip$a ?v0 ?v1)) (lzip$a (ltl$ ?v0) (ltl$d ?v1))))))
(assume a172 (forall ((?v0 Nat_llist$) (?v1 A_llist$)) (=> (and (not (lnull$c ?v0)) (not (fun_app$q lnull$d ?v1))) (= (ltl$f (lzip$b ?v0 ?v1)) (lzip$b (ltl$d ?v0) (ltl$ ?v1))))))
(assume a173 (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) (= (ltl$c (lzip$c ?v0 ?v1)) (lzip$c (ltl$d ?v0) (ltl$d ?v1))))))
(assume a174 (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$a ?v1))) (= (ltl$g (lzip$d ?v0 ?v1)) (lzip$d (ltl$ ?v0) (ltl$a ?v1))))))
(assume a175 (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (not (lnull$a ?v0)) (not (fun_app$q lnull$d ?v1))) (= (ltl$h (lzip$e ?v0 ?v1)) (lzip$e (ltl$a ?v0) (ltl$ ?v1))))))
(assume a176 (forall ((?v0 A_llist_llist$) (?v1 Nat_llist$)) (=> (and (not (lnull$a ?v0)) (not (lnull$c ?v1))) (= (ltl$i (lzip$f ?v0 ?v1)) (lzip$f (ltl$a ?v0) (ltl$d ?v1))))))
(assume a177 (forall ((?v0 Nat_llist$) (?v1 A_llist_llist$)) (=> (and (not (lnull$c ?v0)) (not (lnull$a ?v1))) (= (ltl$j (lzip$g ?v0 ?v1)) (lzip$g (ltl$d ?v0) (ltl$a ?v1))))))
(assume a178 (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (lnull$b ?v1))) (= (ltl$k (lzip$h ?v0 ?v1)) (lzip$h (ltl$ ?v0) (ltl$b ?v1))))))
(assume a179 (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) (= (ltl$l (lzip$i ?v0 ?v1)) (lzip$i (ltl$a ?v0) (ltl$a ?v1))))))
(assume a180 (forall ((?v0 Bool) (?v1 A_a_llist_bool_fun_fun$) (?v2 A_llist$)) (= (fun_app$q (fun_app$be (case_llist$c ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$q (fun_app$aj ?v1 (lhd$ ?v2)) (ltl$ ?v2))))))
(assume a181 (forall ((?v0 A_llist_llist$) (?v1 A_llist_a_llist_llist_a_llist_llist_fun_fun$) (?v2 A_llist_llist$)) (= (fun_app$ (case_llist$d ?v0 ?v1) ?v2) (ite (lnull$a ?v2) ?v0 (fun_app$ (fun_app$m ?v1 (lhd$a ?v2)) (ltl$a ?v2))))))
(assume a182 (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_llist_a_llist_fun_fun$) (?v2 A_llist_llist$)) (= (fun_app$f (case_llist$b ?v0 ?v1) ?v2) (ite (lnull$a ?v2) ?v0 (fun_app$f (fun_app$g ?v1 (lhd$a ?v2)) (ltl$a ?v2))))))
(assume a183 (forall ((?v0 A$) (?v1 A_a_llist_a_fun_fun$) (?v2 A_llist$)) (= (fun_app$d (fun_app$bd (case_llist$a ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$d (fun_app$n ?v1 (lhd$ ?v2)) (ltl$ ?v2))))))
(assume a184 (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))))
(assume a185 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (ltl$ (fun_app$c (fun_app$bk (fun_app$bl (unfold_llist$ ?v0) ?v1) ?v2) ?v3)) (ite (fun_app$q ?v0 ?v3) lNil$ (fun_app$c (fun_app$bk (fun_app$bl (unfold_llist$ ?v0) ?v1) ?v2) (fun_app$c ?v2 ?v3))))))
(assume a186 (forall ((?v0 Nat$) (?v1 A_a_prod_llist$)) (= (fun_app$a (ldropn$b ?v0) ?v1) (compow$ ?v0 uvb$ ?v1))))
(assume a187 (forall ((?v0 Nat$) (?v1 A_llist_llist$)) (= (fun_app$ (ldropn$a ?v0) ?v1) (compow$a ?v0 uvc$ ?v1))))
(assume a188 (forall ((?v0 Nat$) (?v1 Nat_llist$)) (= (ldropn$d ?v0 ?v1) (compow$b ?v0 uvd$ ?v1))))
(assume a189 (forall ((?v0 Nat$) (?v1 A_llist$)) (= (fun_app$c (ldropn$ ?v0) ?v1) (fun_app$c (fun_app$bk (fun_app$bm compow$c ?v0) uve$) ?v1))))
(assume a190 (forall ((?v0 Nat_llist$) (?v1 A_llist$)) (= (not (lnull$e (lzip$b ?v0 ?v1))) (and (not (lnull$c ?v0)) (not (fun_app$q lnull$d ?v1))))))
(assume a191 (forall ((?v0 Nat_llist$) (?v1 A_llist_llist$)) (= (not (lnull$f (lzip$g ?v0 ?v1))) (and (not (lnull$c ?v0)) (not (lnull$a ?v1))))))
(assume a192 (forall ((?v0 Nat_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$g (lzip$j ?v0 ?v1))) (and (not (lnull$c ?v0)) (not (lnull$b ?v1))))))
(assume a193 (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (= (not (lnull$ (lzip$c ?v0 ?v1))) (and (not (lnull$c ?v0)) (not (lnull$c ?v1))))))
(assume a194 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$b (lzip$ ?v0 ?v1))) (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))))))
(assume a195 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$b (lzip$ ?v0 ?v1)) (or (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)))))
(assume a196 (forall ((?v0 A_a_fun$) (?v1 A$)) (= (ltl$ (fun_app$ar (iterates$ ?v0) ?v1)) (fun_app$ar (iterates$ ?v0) (fun_app$au ?v0 ?v1)))))
(assume a197 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (ltl$ (fun_app$c (lappend$ ?v0) ?v1)) (ite (fun_app$q lnull$d ?v0) (ltl$ ?v1) (fun_app$c (lappend$ (ltl$ ?v0)) ?v1)))))
(assume a198 (forall ((?v0 A_a_fun$) (?v1 A$)) (not (fun_app$q lnull$d (fun_app$ar (iterates$ ?v0) ?v1)))))
(assume a199 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$q lnull$d (fun_app$c (lappend$ ?v0) ?v1)) (and (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)))))
(assume a200 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (fun_app$q lnull$d (fun_app$c (lappend$ ?v0) ?v1))) (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))))))
(assume a201 (forall ((?v0 A_llist$)) (= (fun_app$c (lappend$ ?v0) lNil$) ?v0)))
(assume a202 (forall ((?v0 A_llist$)) (= (fun_app$c (lappend$ lNil$) ?v0) ?v0)))
(assume a203 (forall ((?v0 A_llist$)) (= (fun_app$c (fun_app$bk (fun_app$bl (unfold_llist$ lnull$d) uvf$) uve$) ?v0) ?v0)))
(assume a204 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lhd$ (fun_app$c (lappend$ ?v0) ?v1)) (ite (fun_app$q lnull$d ?v0) (lhd$ ?v1) (lhd$ ?v0)))))
(assume a205 (forall ((?v0 A_llist_a_llist_fun$) (?v1 Nat$) (?v2 A_llist$)) (= (fun_app$c ?v0 (fun_app$c (fun_app$bk (fun_app$bm compow$c ?v1) ?v0) ?v2)) (fun_app$c (fun_app$bk (fun_app$bm compow$c ?v1) ?v0) (fun_app$c ?v0 ?v2)))))
(assume a206 (forall ((?v0 A_a_fun$) (?v1 A$)) (= (lhd$ (fun_app$ar (iterates$ ?v0) ?v1)) ?v1)))
(assume a207 (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$c (lappend$ (fun_app$c (lappend$ ?v0) ?v1)) ?v2) (fun_app$c (lappend$ ?v0) (fun_app$c (lappend$ ?v1) ?v2)))))
(assume a208 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (fun_app$q lnull$d ?v0) (not (fun_app$j ?v1 (lhd$ ?v0)))) false) (=> (and (not (fun_app$q lnull$d ?v0)) (fun_app$j ?v1 (lhd$ ?v0))) false)) false)))
(assume a209 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$q lnull$d ?v0) (= (fun_app$c (lappend$ ?v0) ?v1) ?v1))))
(assume a210 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$q lnull$d ?v0) (= (fun_app$c (lappend$ ?v1) ?v0) ?v1))))
(assume a211 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) (fun_app$q lnull$d (fun_app$c (lappend$ ?v0) ?v1)))))
(assume a212 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (not (fun_app$q lnull$d (fun_app$c (lappend$ ?v0) ?v1))))))
(assume a213 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$c (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$)))))
(assume a214 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$c (lappend$ ?v0) ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$)))))
(assume a215 (= (fun_app$c (lappend$ lNil$) lNil$) lNil$))
(assume a216 (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) (= (lhd$a (lappend$a ?v0 ?v1)) (fun_app$f (case_llist$b (lhd$a ?v1) uvg$) ?v0)))))
(assume a217 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (lhd$ (fun_app$c (lappend$ ?v0) ?v1)) (fun_app$d (fun_app$bd (case_llist$a (lhd$ ?v1)) uvh$) ?v0)))))
(assume a218 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (not (lnull$b (lzip$ ?v0 ?v1))))))
(assume a219 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) (lnull$b (lzip$ ?v0 ?v1)))))
(assume a220 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) (= (lzip$ ?v0 ?v1) lNil$b))))
(assume a221 (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$q (fun_app$bn ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$q (fun_app$bn ?v0 ?v3) ?v4) (and (= (fun_app$q lnull$d ?v3) (fun_app$q lnull$d ?v4)) (=> (and (not (fun_app$q lnull$d ?v3)) (not (fun_app$q lnull$d ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$q (fun_app$bn ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))))) (= ?v1 ?v2))))
(assume a222 (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$q (fun_app$bn ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$q (fun_app$bn ?v0 ?v3) ?v4) (and (= (fun_app$q lnull$d ?v3) (fun_app$q lnull$d ?v4)) (=> (and (not (fun_app$q lnull$d ?v3)) (not (fun_app$q lnull$d ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$q (fun_app$bn ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))))) (= ?v1 ?v2))))
(assume a223 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1))))
(assume a224 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) (= (fun_app$c (lappend$ ?v0) ?v1) lNil$))))
(assume a225 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (not (fun_app$q lnull$d ?v0)) (= (fun_app$c (lappend$ (ltl$ ?v0)) ?v1) (ltl$ (fun_app$c (lappend$ ?v0) ?v1))))))
(assume a226 (= funpow$ compow$c))
(assume a227 (forall ((?v0 A_llist_llist$)) (= (lconcat$ ?v0) (fun_app$f (case_llist$b lNil$ uvi$) ?v0))))
(assume a228 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$q lnull$d ?v0)) (fun_app$j ?v1 (lhd$ ?v0))) (= (ltl$ (fun_app$c (ltakeWhile$ ?v1) ?v0)) (fun_app$c (ltakeWhile$ ?v1) (ltl$ ?v0))))))
(assume a229 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (or (fun_app$q lnull$d ?v0) (not (fun_app$j ?v1 (lhd$ ?v0)))) (= (fun_app$c (ltakeWhile$ ?v1) ?v0) lNil$))))
(assume a230 (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$q lnull$d (fun_app$c (ltakeWhile$ ?v0) ?v1)) (or (fun_app$q lnull$d ?v1) (not (fun_app$j ?v0 (lhd$ ?v1)))))))
(assume a231 (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (fun_app$q lnull$d (fun_app$c (ltakeWhile$ ?v0) ?v1))) (and (not (fun_app$q lnull$d ?v1)) (fun_app$j ?v0 (lhd$ ?v1))))))
(assume a232 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (ltl$ (fun_app$c (lappend$ ?v0) ?v1)) (fun_app$c (fun_app$bc (case_llist$ (fun_app$c (fun_app$bc (case_llist$ undefined$) uus$) ?v1)) (uvj$ ?v1)) ?v0)))))
(assume a233 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_llist_llist_a_llist_fun_fun$) (?v3 A_llist_llist$)) (= (fun_app$q ?v0 (fun_app$f (case_llist$b ?v1 ?v2) ?v3)) (not (or (and (= ?v3 lNil$a) (not (fun_app$q ?v0 ?v1))) (and (= ?v3 (lCons$a (lhd$a ?v3) (ltl$a ?v3))) (not (fun_app$q ?v0 (fun_app$f (fun_app$g ?v2 (lhd$a ?v3)) (ltl$a ?v3))))))))))
(assume a234 (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$j ?v0 (fun_app$d (fun_app$bd (case_llist$a ?v1) ?v2) ?v3)) (not (or (and (= ?v3 lNil$) (not (fun_app$j ?v0 ?v1))) (and (= ?v3 (lCons$ (lhd$ ?v3) (ltl$ ?v3))) (not (fun_app$j ?v0 (fun_app$d (fun_app$n ?v2 (lhd$ ?v3)) (ltl$ ?v3))))))))))
(assume a235 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$q ?v0 (fun_app$c (fun_app$bc (case_llist$ ?v1) ?v2) ?v3)) (not (or (and (= ?v3 lNil$) (not (fun_app$q ?v0 ?v1))) (and (= ?v3 (lCons$ (lhd$ ?v3) (ltl$ ?v3))) (not (fun_app$q ?v0 (fun_app$c (fun_app$e ?v2 (lhd$ ?v3)) (ltl$ ?v3))))))))))
(assume a236 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_llist_llist_a_llist_fun_fun$) (?v3 A_llist_llist$)) (= (fun_app$q ?v0 (fun_app$f (case_llist$b ?v1 ?v2) ?v3)) (and (=> (= ?v3 lNil$a) (fun_app$q ?v0 ?v1)) (=> (= ?v3 (lCons$a (lhd$a ?v3) (ltl$a ?v3))) (fun_app$q ?v0 (fun_app$f (fun_app$g ?v2 (lhd$a ?v3)) (ltl$a ?v3))))))))
(assume a237 (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$j ?v0 (fun_app$d (fun_app$bd (case_llist$a ?v1) ?v2) ?v3)) (and (=> (= ?v3 lNil$) (fun_app$j ?v0 ?v1)) (=> (= ?v3 (lCons$ (lhd$ ?v3) (ltl$ ?v3))) (fun_app$j ?v0 (fun_app$d (fun_app$n ?v2 (lhd$ ?v3)) (ltl$ ?v3))))))))
(assume a238 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$q ?v0 (fun_app$c (fun_app$bc (case_llist$ ?v1) ?v2) ?v3)) (and (=> (= ?v3 lNil$) (fun_app$q ?v0 ?v1)) (=> (= ?v3 (lCons$ (lhd$ ?v3) (ltl$ ?v3))) (fun_app$q ?v0 (fun_app$c (fun_app$e ?v2 (lhd$ ?v3)) (ltl$ ?v3))))))))
(assume a239 (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))))
(assume a240 (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$c (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$c (lappend$ ?v1) ?v2)))))
(assume a241 (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$q (pred_llist$c ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$j ?v0 ?v1) (fun_app$q (pred_llist$c ?v0) ?v2)))))
(assume a242 (forall ((?v0 A_llist$)) (=> (not (fun_app$q lnull$d ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0))))
(assume a243 (forall ((?v0 A_llist$)) (= (not (fun_app$q lnull$d ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))))
(assume a244 (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (fun_app$q lnull$d ?v0)))))
(assume a245 (forall ((?v0 A$) (?v1 A_llist$)) (not (fun_app$q lnull$d (lCons$ ?v0 ?v1)))))
(assume a246 (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1)))))
(assume a247 (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)))
(assume a248 (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))))
(assume a249 (forall ((?v0 A$) (?v1 A_llist$)) (= (ltl$ (lCons$ ?v0 ?v1)) ?v1)))
(assume a250 (forall ((?v0 A$) (?v1 A_llist$)) (= (lhd$ (lCons$ ?v0 ?v1)) ?v0)))
(assume a251 (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_llist_a_llist_fun_fun$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (fun_app$f (case_llist$b ?v0 ?v1) (lCons$a ?v2 ?v3)) (fun_app$f (fun_app$g ?v1 ?v2) ?v3))))
(assume a252 (forall ((?v0 A$) (?v1 A_a_llist_a_fun_fun$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$d (fun_app$bd (case_llist$a ?v0) ?v1) (lCons$ ?v2 ?v3)) (fun_app$d (fun_app$n ?v1 ?v2) ?v3))))
(assume a253 (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) (lCons$ ?v2 ?v3)) (fun_app$c (fun_app$e ?v1 ?v2) ?v3))))
(assume a254 (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$ar (iterates$ ?v0) ?v1) (lCons$ ?v1 (fun_app$ar (iterates$ ?v0) (fun_app$au ?v0 ?v1))))))
(assume a255 (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$q (lmember$c ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$q (lmember$c ?v0) ?v2)))))
(assume a256 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$q lnull$d ?v0)) (fun_app$j ?v1 (lhd$ ?v0))) (= (fun_app$c (ltakeWhile$ ?v1) ?v0) (lCons$ (lhd$ ?v0) (fun_app$c (ltakeWhile$ ?v1) (ltl$ ?v0)))))))
(assume a257 (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$c (lappend$ (fun_app$c (lappend$ ?v0) (lCons$ ?v1 lNil$))) ?v2) (fun_app$c (lappend$ ?v0) (lCons$ ?v1 ?v2)))))
(assume a258 (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$c (ltakeWhile$ ?v0) ?v1) (ite (or (fun_app$q lnull$d ?v1) (not (fun_app$j ?v0 (lhd$ ?v1)))) lNil$ (lCons$ (lhd$ ?v1) (fun_app$c (ltakeWhile$ ?v0) (ltl$ ?v1)))))))
(assume a259 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$c (lappend$ ?v0) ?v1) (fun_app$c (fun_app$bc (case_llist$ ?v1) (uvk$ ?v1)) ?v0))))
(assume a260 (forall ((?v0 A_llist_llist$)) (= (lhd$a ?v0) (fun_app$f (case_llist$b undefined$ uvg$) ?v0))))
(assume a261 (forall ((?v0 A_llist$)) (= (lhd$ ?v0) (fun_app$d (fun_app$bd (case_llist$a undefined$a) uvh$) ?v0))))
(assume a262 (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) (= (lappend$a ?v0 ?v1) (lCons$a (fun_app$f (case_llist$b (lhd$a ?v1) uvg$) ?v0) (fun_app$ (case_llist$d (fun_app$ (case_llist$d undefined$b uur$) ?v1) (uvl$ ?v1)) ?v0))))))
(assume a263 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (fun_app$c (lappend$ ?v0) ?v1) (lCons$ (fun_app$d (fun_app$bd (case_llist$a (lhd$ ?v1)) uvh$) ?v0) (fun_app$c (fun_app$bc (case_llist$ (fun_app$c (fun_app$bc (case_llist$ undefined$) uus$) ?v1)) (uvj$ ?v1)) ?v0))))))
(assume a264 (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (=> (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0))) false)) false)))
(assume a265 (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (and (not (= ?v0 lNil$)) (and (= (lhd$ ?v0) ?v1) (= (ltl$ ?v0) ?v2))))))
(assume a266 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (or (fun_app$q lnull$d ?v0) (not (fun_app$j ?v1 (lhd$ ?v0)))) (fun_app$q lnull$d (fun_app$c (ltakeWhile$ ?v1) ?v0)))))
(assume a267 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$q lnull$d ?v0)) (fun_app$j ?v1 (lhd$ ?v0))) (= (lhd$ (fun_app$c (ltakeWhile$ ?v1) ?v0)) (lhd$ ?v0)))))
(assume a268 (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$q lnull$d ?v0)) (fun_app$j ?v1 (lhd$ ?v0))) (not (fun_app$q lnull$d (fun_app$c (ltakeWhile$ ?v1) ?v0))))))
(assume a269 (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$c (lfilter$ ?v0) ?v1) (fun_app$c (fun_app$bc (case_llist$ lNil$) (uvm$ ?v0)) ?v1))))
(assume a270 (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (= (lzip$c ?v0 ?v1) (ite (or (lnull$c ?v0) (lnull$c ?v1)) lNil$c (lCons$c (pair$a (lhd$d ?v0) (lhd$d ?v1)) (lzip$c (ltl$d ?v0) (ltl$d ?v1)))))))
(assume a271 (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lzip$ ?v0 ?v1) (ite (or (fun_app$q lnull$d ?v0) (fun_app$q lnull$d ?v1)) lNil$b (lCons$b (pair$ (lhd$ ?v0) (lhd$ ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1)))))))
(assume a272 (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) (= (lzip$c ?v0 ?v1) (lCons$c (pair$a (lhd$d ?v0) (lhd$d ?v1)) (lzip$c (ltl$d ?v0) (ltl$d ?v1)))))))
(assume a273 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (lzip$ ?v0 ?v1) (lCons$b (pair$ (lhd$ ?v0) (lhd$ ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1)))))))
(assume a274 (forall ((?v0 Nat$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$c (ldropn$ ?v0) (lCons$ ?v1 ?v2)) (fun_app$h (fun_app$o (case_nat$ (lCons$ ?v1 ?v2)) (uvn$ ?v2)) ?v0))))
(assume a275 (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$q (fun_app$bn ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$q (fun_app$bn ?v0 ?v4) ?v5) (or (exists ((?v6 A_llist$) (?v7 A_llist$) (?v8 A$)) (and (= ?v4 (lCons$ ?v8 ?v6)) (and (= ?v5 (lCons$ ?v8 ?v7)) (or (fun_app$q (fun_app$bn ?v0 ?v6) ?v7) (fun_app$q (fun_app$bn (llexord$ ?v3) ?v6) ?v7))))) (or (exists ((?v6 A$) (?v7 A$) (?v8 A_llist$) (?v9 A_llist$)) (and (= ?v4 (lCons$ ?v6 ?v8)) (and (= ?v5 (lCons$ ?v7 ?v9)) (fun_app$j (fun_app$bo ?v3 ?v6) ?v7)))) (exists ((?v6 A_llist$)) (and (= ?v4 lNil$) (= ?v5 ?v6)))))))) (fun_app$q (fun_app$bn (llexord$ ?v3) ?v1) ?v2))))
(assume a276 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$q (fun_app$bn (llexord$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (=> (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$q (fun_app$bn (llexord$ ?v0) ?v3) ?v4))) false)) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$j (fun_app$bo ?v0 ?v3) ?v4))) false)) (forall ((?v3 A_llist$)) (=> (and (= ?v1 lNil$) (= ?v2 ?v3)) false))))) false)))
(assume a277 (forall ((?v0 Bool_a_llist_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$u ?v0 (fun_app$k (fun_app$v (case_nat$a ?v1) ?v2) ?v3)) (fun_app$h (fun_app$o (case_nat$ (fun_app$u ?v0 ?v1)) (fun_app$t (uvo$ ?v0) ?v2)) ?v3))))
(assume a278 (forall ((?v0 Nat_a_llist_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$h ?v0 (fun_app$i (fun_app$ab (case_nat$b ?v1) ?v2) ?v3)) (fun_app$h (fun_app$o (case_nat$ (fun_app$h ?v0 ?v1)) (fun_app$z (uvp$ ?v0) ?v2)) ?v3))))
(assume a279 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 Nat_a_llist_fun$) (?v3 Nat$)) (= (fun_app$q ?v0 (fun_app$h (fun_app$o (case_nat$ ?v1) ?v2) ?v3)) (fun_app$k (fun_app$v (case_nat$a (fun_app$q ?v0 ?v1)) (fun_app$p (uvq$ ?v0) ?v2)) ?v3))))
(assume a280 (forall ((?v0 A_llist_nat_fun$) (?v1 A_llist$) (?v2 Nat_a_llist_fun$) (?v3 Nat$)) (= (fun_app$s ?v0 (fun_app$h (fun_app$o (case_nat$ ?v1) ?v2) ?v3)) (fun_app$i (fun_app$ab (case_nat$b (fun_app$s ?v0 ?v1)) (fun_app$r (uvr$ ?v0) ?v2)) ?v3))))
(assume a281 (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 Nat_a_llist_fun$) (?v3 Nat$)) (= (fun_app$c ?v0 (fun_app$h (fun_app$o (case_nat$ ?v1) ?v2) ?v3)) (fun_app$h (fun_app$o (case_nat$ (fun_app$c ?v0 ?v1)) (fun_app$o (uvs$ ?v0) ?v2)) ?v3))))
(assume a282 (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$w ?v0 (fun_app$k (fun_app$v (case_nat$a ?v1) ?v2) ?v3)) (fun_app$k (fun_app$v (case_nat$a (fun_app$w ?v0 ?v1)) (fun_app$v (uvt$ ?v0) ?v2)) ?v3))))
(assume a283 (forall ((?v0 Bool_nat_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$y ?v0 (fun_app$k (fun_app$v (case_nat$a ?v1) ?v2) ?v3)) (fun_app$i (fun_app$ab (case_nat$b (fun_app$y ?v0 ?v1)) (fun_app$x (uvu$ ?v0) ?v2)) ?v3))))
(assume a284 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$k ?v0 (fun_app$i (fun_app$ab (case_nat$b ?v1) ?v2) ?v3)) (fun_app$k (fun_app$v (case_nat$a (fun_app$k ?v0 ?v1)) (fun_app$aa (uvv$ ?v0) ?v2)) ?v3))))
(assume a285 (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$i ?v0 (fun_app$i (fun_app$ab (case_nat$b ?v1) ?v2) ?v3)) (fun_app$i (fun_app$ab (case_nat$b (fun_app$i ?v0 ?v1)) (fun_app$ab (uvw$ ?v0) ?v2)) ?v3))))
(assume a286 (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)) (fun_app$h ?v1 ?v2))))
(assume a287 (forall ((?v0 Bool) (?v1 Nat_bool_fun$) (?v2 Nat$)) (= (fun_app$k (fun_app$v (case_nat$a ?v0) ?v1) (suc$ ?v2)) (fun_app$k ?v1 ?v2))))
(assume a288 (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (= (fun_app$i (fun_app$ab (case_nat$b ?v0) ?v1) (suc$ ?v2)) (fun_app$i ?v1 ?v2))))
(assume a289 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$j (fun_app$bo ?v0 ?v1) ?v2) (fun_app$q (fun_app$bn (llexord$ ?v0) (lCons$ ?v1 ?v3)) (lCons$ ?v2 ?v4)))))
(assume a290 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A$)) (=> (fun_app$q (fun_app$bn (llexord$ ?v0) ?v1) ?v2) (fun_app$q (fun_app$bn (llexord$ ?v0) (lCons$ ?v3 ?v1)) (lCons$ ?v3 ?v2)))))
(assume a291 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$q (fun_app$bn (llexord$ ?v0) lNil$) ?v1)))
(assume a292 (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) (= (lhd$c (lzip$c ?v0 ?v1)) (pair$a (lhd$d ?v0) (lhd$d ?v1))))))
(assume a293 (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$q lnull$d ?v0)) (not (fun_app$q lnull$d ?v1))) (= (lhd$b (lzip$ ?v0 ?v1)) (pair$ (lhd$ ?v0) (lhd$ ?v1))))))
(assume a294 (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$q (fun_app$bn (llexord$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$q (fun_app$bn (llexord$ ?v0) ?v3) ?v4)))) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$j (fun_app$bo ?v0 ?v3) ?v4)))) (exists ((?v3 A_llist$)) (and (= ?v1 lNil$) (= ?v2 ?v3))))))))
(assume a295 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))))
(assume a296 (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (= (fun_app$h (lnth$ ?v0) (suc$ ?v1)) (fun_app$f (case_llist$b (undefined$c (suc$ ?v1)) (uvx$ ?v1)) ?v0))))
(assume a297 (forall ((?v0 A_llist$) (?v1 Nat$)) (= (lnth$a ?v0 (suc$ ?v1)) (fun_app$d (fun_app$bd (case_llist$a (undefined$d (suc$ ?v1))) (uvy$ ?v1)) ?v0))))
(assume a298 (forall ((?v0 Nat_nat_prod_set$) (?v1 Nat_nat_prod_set$)) (= (= (uvz$ ?v0) (uvz$ ?v1)) (= ?v0 ?v1))))
(assume a299 (forall ((?v0 Nat_nat_prod$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (= ?v0 (pair$a ?v1 ?v2)) false)) false)))
(assume a300 (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_prod$)) (=> (forall ((?v2 Nat$) (?v3 Nat$)) (fun_app$ae ?v0 (pair$a ?v2 ?v3))) (fun_app$ae ?v0 ?v1))))
(assume a301 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)))
(assume a302 (forall ((?v0 Nat_nat_prod$)) (exists ((?v1 Nat$) (?v2 Nat$)) (= ?v0 (pair$a ?v1 ?v2)))))
(assume a303 (forall ((?v0 A_llist_llist$)) (= (fun_app$h (lnth$ ?v0) zero$) (fun_app$f (case_llist$b (undefined$c zero$) uvg$) ?v0))))
(assume a304 (forall ((?v0 A_llist$)) (= (lnth$a ?v0 zero$) (fun_app$d (fun_app$bd (case_llist$a (undefined$d zero$)) uvh$) ?v0))))
(assume a305 (forall ((?v0 A_llist$)) (= (fun_app$c (ldropn$ zero$) ?v0) ?v0)))
(assume a306 (forall ((?v0 Nat$)) (= (= ?v0 zero$) (fun_app$k (fun_app$v (case_nat$a true) uwa$) ?v0))))
(assume a307 (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$k (fun_app$v (case_nat$a false) uwb$) ?v0))))
(assume a308 (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)))
(assume a309 (forall ((?v0 Nat$)) (not (= zero$ (suc$ ?v0)))))
(assume a310 (forall ((?v0 Nat$)) (not (= (suc$ ?v0) zero$))))
(assume a311 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$k ?v0 zero$) (forall ((?v2 Nat$)) (=> (fun_app$k ?v0 ?v2) (fun_app$k ?v0 (suc$ ?v2))))) (fun_app$k ?v0 ?v1))))
(assume a312 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$k ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$k ?v0 (suc$ ?v2)) (fun_app$k ?v0 ?v2)))) (fun_app$k ?v0 zero$))))
(assume a313 (forall ((?v0 Nat$)) (=> (not (= ?v0 zero$)) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1))))))
(assume a314 (forall ((?v0 Nat$)) (=> (= zero$ (suc$ ?v0)) false)))
(assume a315 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) (not (= ?v0 zero$)))))
(assume a316 (forall ((?v0 Nat$)) (=> (= (suc$ ?v0) zero$) false)))
(assume a317 (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$k (fun_app$l ?v0 ?v3) zero$)) (and (forall ((?v3 Nat$)) (fun_app$k (fun_app$l ?v0 zero$) (suc$ ?v3))) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$k (fun_app$l ?v0 ?v3) ?v4) (fun_app$k (fun_app$l ?v0 (suc$ ?v3)) (suc$ ?v4)))))) (fun_app$k (fun_app$l ?v0 ?v1) ?v2))))
(assume a318 (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) false))) false)))
(assume a319 (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$)) (= (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) zero$) ?v0)))
(assume a320 (forall ((?v0 Bool) (?v1 Nat_bool_fun$)) (= (fun_app$k (fun_app$v (case_nat$a ?v0) ?v1) zero$) ?v0)))
(assume a321 (forall ((?v0 Nat$) (?v1 Nat_nat_fun$)) (= (fun_app$i (fun_app$ab (case_nat$b ?v0) ?v1) zero$) ?v0)))
(assume a322 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 Nat_a_llist_fun$) (?v3 Nat$)) (= (fun_app$q ?v0 (fun_app$h (fun_app$o (case_nat$ ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$) (not (fun_app$q ?v0 ?v1))) (and (= ?v3 (suc$ (pred$ ?v3))) (not (fun_app$q ?v0 (fun_app$h ?v2 (pred$ ?v3))))))))))
(assume a323 (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$w ?v0 (fun_app$k (fun_app$v (case_nat$a ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$) (not (fun_app$w ?v0 ?v1))) (and (= ?v3 (suc$ (pred$ ?v3))) (not (fun_app$w ?v0 (fun_app$k ?v2 (pred$ ?v3))))))))))
(assume a324 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$k ?v0 (fun_app$i (fun_app$ab (case_nat$b ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$) (not (fun_app$k ?v0 ?v1))) (and (= ?v3 (suc$ (pred$ ?v3))) (not (fun_app$k ?v0 (fun_app$i ?v2 (pred$ ?v3))))))))))
(assume a325 (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 Nat_a_llist_fun$) (?v3 Nat$)) (= (fun_app$q ?v0 (fun_app$h (fun_app$o (case_nat$ ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$) (fun_app$q ?v0 ?v1)) (=> (= ?v3 (suc$ (pred$ ?v3))) (fun_app$q ?v0 (fun_app$h ?v2 (pred$ ?v3))))))))
(assume a326 (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$w ?v0 (fun_app$k (fun_app$v (case_nat$a ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$) (fun_app$w ?v0 ?v1)) (=> (= ?v3 (suc$ (pred$ ?v3))) (fun_app$w ?v0 (fun_app$k ?v2 (pred$ ?v3))))))))
(assume a327 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$k ?v0 (fun_app$i (fun_app$ab (case_nat$b ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$) (fun_app$k ?v0 ?v1)) (=> (= ?v3 (suc$ (pred$ ?v3))) (fun_app$k ?v0 (fun_app$i ?v2 (pred$ ?v3))))))))
(assume a328 (forall ((?v0 Nat$)) (= (pred$ ?v0) (fun_app$i (fun_app$ab (case_nat$b zero$) uwc$) ?v0))))
(assume a329 (forall ((?v0 Nat_bool_fun$)) (=> (and (not (fun_app$k ?v0 zero$)) (exists ((?v1 Nat$)) (fun_app$k ?v0 ?v1))) (exists ((?v1 Nat$)) (and (not (fun_app$k ?v0 ?v1)) (fun_app$k ?v0 (suc$ ?v1)))))))
(assume a330 (forall ((?v0 Nat$) (?v1 Nat$)) (= (divides_aux$ (pair$a ?v0 ?v1)) (= ?v1 zero$))))
(assume a331 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$i (minus$ ?v0) (suc$ ?v1)) (fun_app$i (fun_app$ab (case_nat$b zero$) uwc$) (fun_app$i (minus$ ?v0) ?v1)))))
(assume a332 (forall ((?v0 Nat$)) (= (fun_app$i (minus$ ?v0) ?v0) zero$)))
(assume a333 (forall ((?v0 Nat$)) (= (fun_app$i (minus$ zero$) ?v0) zero$)))
(assume a334 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$i (minus$ (fun_app$i (minus$ (suc$ ?v0)) ?v1)) (suc$ ?v2)) (fun_app$i (minus$ (fun_app$i (minus$ ?v0) ?v1)) ?v2))))
(assume a335 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$i (minus$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$i (minus$ ?v0) ?v1))))
(assume a336 (forall ((?v0 Nat$)) (= (fun_app$i (minus$ ?v0) zero$) ?v0)))
(assume a337 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (= (fun_app$i (minus$ ?v0) ?v1) zero$) (= (fun_app$i (minus$ ?v1) ?v0) zero$)) (= ?v0 ?v1))))
(assume a338 (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (=> (or (= ?v0 zero$a) (fun_app$q lnull$d ?v1)) false) (=> (and (not (= ?v0 zero$a)) (not (fun_app$q lnull$d ?v1))) false)) false)))
(assume a339 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$k ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$k ?v0 (suc$ ?v3)) (fun_app$k ?v0 ?v3)))) (fun_app$k ?v0 (fun_app$i (minus$ ?v1) ?v2)))))
(assume a340 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$i (minus$ (fun_app$i (minus$ ?v0) ?v1)) ?v2) (fun_app$i (minus$ (fun_app$i (minus$ ?v0) ?v2)) ?v1))))
(assume a341 (forall ((?v0 Nat$)) (=> (fun_app$k (less$ zero$) ?v0) (= (suc$ (fun_app$i (minus$ ?v0) (suc$ zero$))) ?v0))))
(assume a342 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$i (min$ ?v0) (suc$ ?v1)) (fun_app$i (fun_app$ab (case_nat$b zero$) (uwd$ ?v1)) ?v0))))
(assume a343 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$i (min$ (suc$ ?v0)) ?v1) (fun_app$i (fun_app$ab (case_nat$b zero$) (uwe$ ?v0)) ?v1))))
(assume a344 (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$k (less$ zero$) ?v0))))
(assume a345 (forall ((?v0 Nat$)) (= (not (fun_app$k (less$ zero$) ?v0)) (= ?v0 zero$))))
(assume a346 (forall ((?v0 Nat$)) (= (fun_app$k (less$ ?v0) zero$) false)))
(assume a347 (forall ((?v0 Nat$)) (fun_app$k (less$ ?v0) (suc$ ?v0))))
(assume a348 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ (suc$ ?v0)) (suc$ ?v1)))))
(assume a349 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$k (less$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$k (less$ ?v0) ?v1))))
(assume a350 (forall ((?v0 Nat$)) (= (fun_app$i (min$ ?v0) zero$) zero$)))
(assume a351 (forall ((?v0 Nat$)) (= (fun_app$i (min$ zero$) ?v0) zero$)))
(assume a352 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$i (min$ (suc$ ?v0)) (suc$ ?v1)) (suc$ (fun_app$i (min$ ?v0) ?v1)))))
(assume a353 (forall ((?v0 Nat$)) (= (fun_app$k (less$ ?v0) (suc$ zero$)) (= ?v0 zero$))))
(assume a354 (forall ((?v0 Nat$)) (fun_app$k (less$ zero$) (suc$ ?v0))))
(assume a355 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$k (less$ zero$) (fun_app$i (minus$ ?v0) ?v1)) (fun_app$k (less$ ?v1) ?v0))))
(assume a356 (forall ((?v0 Nat$)) (=> (=> (= ?v0 zero$) false) (fun_app$k (less$ zero$) ?v0))))
(assume a357 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (not (= ?v1 zero$)))))
(assume a358 (forall ((?v0 Nat$)) (=> (fun_app$k (less$ ?v0) zero$) false)))
(assume a359 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$k ?v0 zero$) (forall ((?v2 Nat$)) (=> (and (fun_app$k (less$ zero$) ?v2) (not (fun_app$k ?v0 ?v2))) (exists ((?v3 Nat$)) (and (fun_app$k (less$ ?v3) ?v2) (not (fun_app$k ?v0 ?v3))))))) (fun_app$k ?v0 ?v1))))
(assume a360 (forall ((?v0 Nat$)) (not (fun_app$k (less$ ?v0) zero$))))
(assume a361 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ (fun_app$i (minus$ ?v0) ?v2)) ?v1))))
(assume a362 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ ?v0) ?v2)) (fun_app$k (less$ (fun_app$i (minus$ ?v2) ?v1)) (fun_app$i (minus$ ?v2) ?v0)))))
(assume a363 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$i (min$ (fun_app$i (minus$ ?v0) ?v1)) (fun_app$i (minus$ ?v2) ?v1)) (fun_app$i (minus$ (fun_app$i (min$ ?v0) ?v2)) ?v1))))
(assume a364 (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (= ?v0 ?v1)) (or (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ ?v1) ?v0)))))
(assume a365 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (=> (fun_app$k (less$ ?v0) ?v1) (fun_app$k (fun_app$l ?v2 ?v1) ?v0)) (and (=> (= ?v0 ?v1) (fun_app$k (fun_app$l ?v2 ?v1) ?v0)) (=> (fun_app$k (less$ ?v1) ?v0) (fun_app$k (fun_app$l ?v2 ?v1) ?v0)))) (fun_app$k (fun_app$l ?v2 ?v1) ?v0))))
(assume a366 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (not (fun_app$k ?v0 ?v2)) (exists ((?v3 Nat$)) (and (fun_app$k (less$ ?v3) ?v2) (not (fun_app$k ?v0 ?v3)))))) (fun_app$k ?v0 ?v1))))
(assume a367 (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$k (less$ ?v3) ?v2) (fun_app$k ?v0 ?v3))) (fun_app$k ?v0 ?v2))) (fun_app$k ?v0 ?v1))))
(assume a368 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (not (= ?v0 ?v1)))))
(assume a369 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (not (= ?v1 ?v0)))))
(assume a370 (forall ((?v0 Nat$)) (=> (fun_app$k (less$ ?v0) ?v0) false)))
(assume a371 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$k (less$ ?v0) ?v1) false) (=> (fun_app$k (less$ ?v1) ?v0) false))) false)))
(assume a372 (forall ((?v0 Nat$)) (not (fun_app$k (less$ ?v0) ?v0))))
(assume a373 (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$k (less$ (fun_app$i ?v0 ?v3)) (fun_app$i ?v0 (suc$ ?v3)))) (fun_app$k (less$ ?v1) ?v2)) (fun_app$k (less$ (fun_app$i ?v0 ?v1)) (fun_app$i ?v0 ?v2)))))
(assume a374 (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (forall ((?v3 Nat$)) (fun_app$k (less$ (fun_app$i ?v0 ?v3)) (fun_app$i ?v0 (suc$ ?v3)))) (= (fun_app$k (less$ (fun_app$i ?v0 ?v1)) (fun_app$i ?v0 ?v2)) (fun_app$k (less$ ?v1) ?v2)))))
(assume a375 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$k (less$ ?v0) ?v1)) (= (fun_app$k (less$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)))))
(assume a376 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (fun_app$k (less$ ?v0) ?v1)) (fun_app$k (less$ ?v0) (suc$ ?v1))) (= ?v1 ?v0))))
(assume a377 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ ?v0) (suc$ ?v1)))))
(assume a378 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (not (= (suc$ ?v0) ?v1))) (fun_app$k (less$ (suc$ ?v0)) ?v1))))
(assume a379 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (fun_app$k (less$ ?v1) ?v2)) (fun_app$k (less$ (suc$ ?v0)) ?v2))))
(assume a380 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (and (forall ((?v3 Nat$)) (fun_app$k (fun_app$l ?v2 ?v3) (suc$ ?v3))) (forall ((?v3 Nat$) (?v4 Nat$) (?v5 Nat$)) (=> (and (fun_app$k (less$ ?v3) ?v4) (and (fun_app$k (less$ ?v4) ?v5) (and (fun_app$k (fun_app$l ?v2 ?v3) ?v4) (fun_app$k (fun_app$l ?v2 ?v4) ?v5)))) (fun_app$k (fun_app$l ?v2 ?v3) ?v5))))) (fun_app$k (fun_app$l ?v2 ?v0) ?v1))))
(assume a381 (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (and (forall ((?v3 Nat$)) (=> (= ?v1 (suc$ ?v3)) (fun_app$k ?v2 ?v3))) (forall ((?v3 Nat$)) (=> (and (fun_app$k (less$ ?v3) ?v1) (fun_app$k ?v2 (suc$ ?v3))) (fun_app$k ?v2 ?v3))))) (fun_app$k ?v2 ?v0))))
(assume a382 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v1) (and (=> (= ?v1 (suc$ ?v0)) false) (forall ((?v2 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v2) (= ?v1 (suc$ ?v2))) false)))) false)))
(assume a383 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$k (less$ ?v0) (suc$ ?v1)) (and (=> (fun_app$k (less$ ?v0) ?v1) false) (=> (= ?v0 ?v1) false))) false)))
(assume a384 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ (suc$ ?v0)) ?v1) (fun_app$k (less$ ?v0) ?v1))))
(assume a385 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$k (less$ (suc$ ?v0)) ?v1) (forall ((?v2 Nat$)) (=> (and (fun_app$k (less$ ?v0) ?v2) (= ?v1 (suc$ ?v2))) false))) false)))
(assume a386 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$k (less$ ?v0) ?v1))))
(assume a387 (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$k (less$ ?v0) ?v1)) (fun_app$k (less$ ?v1) (suc$ ?v0)))))
(assume a388 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$k (less$ (suc$ ?v0)) ?v1) (exists ((?v2 Nat$)) (and (= ?v1 (suc$ ?v2)) (fun_app$k (less$ ?v0) ?v2))))))
(assume a389 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$k (less$ ?v0) (suc$ ?v1)) (or (fun_app$k (less$ ?v0) ?v1) (= ?v0 ?v1)))))
(assume a390 (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$k (less$ ?v0) (suc$ ?v1)) (or (= ?v0 zero$) (exists ((?v2 Nat$)) (and (= ?v0 (suc$ ?v2)) (fun_app$k (less$ ?v2) ?v1)))))))
(assume a391 (forall ((?v0 Nat$)) (= (fun_app$k (less$ zero$) ?v0) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1))))))
(assume a392 (forall ((?v0 Nat$)) (=> (fun_app$k (less$ zero$) ?v0) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1))))))
(assume a393 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$k (less$ zero$) ?v0) (fun_app$k (less$ zero$) ?v1)) (fun_app$k (less$ (fun_app$i (minus$ ?v1) ?v0)) ?v1))))
(assume a394 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ ?v0) ?v1) (= (suc$ (fun_app$i (minus$ ?v1) (suc$ ?v0))) (fun_app$i (minus$ ?v1) ?v0)))))
(assume a395 (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$k (less$ (fun_app$i (minus$ ?v0) ?v1)) (suc$ ?v0))))
(assume a396 (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$k (less$ zero$) ?v0) (fun_app$k (less$ (fun_app$i (minus$ ?v0) (suc$ ?v1))) ?v0))))
(assume a397 (forall ((?v0 Nat$)) (=> (fun_app$k (less$ zero$) ?v0) (= (suc$ (fun_app$i (minus$ ?v0) one$)) ?v0))))
(assume a398 (forall ((?v0 Nat$)) (= (fun_app$k (less$ zero$) (of_nat$ ?v0)) (fun_app$k (less$ zero$) ?v0))))
(assume a399 (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (of_nat$ ?v0) (of_nat$ ?v1)) (= ?v0 ?v1))))
(assume a400 (forall ((?v0 Nat$)) (= (= (of_nat$ ?v0) zero$) (= ?v0 zero$))))
(assume a401 (forall ((?v0 Nat$)) (= (= zero$ (of_nat$ ?v0)) (= zero$ ?v0))))
(step t0 (cl (not (! (= (! (or (! (not (! (= xs$ (! (lCons$ (! (lhd$ xs$) :named @p_8) (! (ltl$ xs$) :named @p_7)) :named @p_68)) :named @p_69)) :named @p_102) (! (not (! (= (! (fun_app$c @p_3 @p_68) :named @p_82) (! (fun_app$h (fun_app$o (case_nat$ @p_68) (! (uvn$ @p_7) :named @p_80)) @p_2) :named @p_81)) :named @p_83)) :named @p_103) (! (not (! (= @p_81 (! (fun_app$h @p_80 n$) :named @p_85)) :named @p_86)) :named @p_104) (! (not @p_6) :named @p_48) (! (not (! (= @p_1 (! (ite (! (fun_app$q lnull$d xs$) :named @p_11) lNil$ (! (fun_app$c (! (fun_app$e uu$ @p_8) :named @p_9) (! (ltl$ xs$) :named @p_7)) :named @p_10)) :named @p_12)) :named @p_13)) :named @p_16) (! (not (! (= @p_10 @p_12) :named @p_21)) :named @p_100) (! (not (! (= (! (ldropn$ n$) :named @p_60) @p_9) :named @p_61)) :named @p_101) (! (not (! (= @p_85 (! (fun_app$c @p_60 @p_7) :named @p_97)) :named @p_98)) :named @p_105)) :named @p_107) (! (or @p_102 @p_103 @p_104 @p_5 @p_16 @p_100 @p_101 @p_105) :named @p_106)) :named @p_113)) (not @p_107) @p_106) :rule equiv_pos2)
(step t1 (cl (= @p_102 @p_102)) :rule refl)
(step t2 (cl (= @p_103 @p_103)) :rule refl)
(step t3 (cl (= @p_104 @p_104)) :rule refl)
(step t4 (cl (! (= @p_48 @p_5) :named @p_59)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_59 1 5))
(step t5 (cl (= @p_16 @p_16)) :rule refl)
(step t6 (cl (= @p_100 @p_100)) :rule refl)
(step t7 (cl (= @p_101 @p_101)) :rule refl)
(step t8 (cl (= @p_105 @p_105)) :rule refl)
(step t9 (cl @p_113) :rule cong :premises (t1 t2 t3 t4 t5 t6 t7 t8))
(step t10 (cl (! (and @p_69 @p_83 @p_86 @p_6 @p_13 @p_21 @p_61) :named @p_109) @p_102 @p_103 @p_104 @p_48 @p_16 @p_100 @p_101) :rule and_neg)
(step t11 (cl (! (=> @p_109 @p_105) :named @p_111) @p_109) :rule implies_neg1)
(anchor :step t12)
(assume t12.a0 @p_69)
(assume t12.a1 @p_83)
(assume t12.a2 @p_86)
(assume t12.a3 @p_6)
(assume t12.a4 @p_13)
(assume t12.a5 @p_21)
(assume t12.a6 @p_61)
(step t12.t0 (cl (= (! (= @p_98 false) :named @p_112) @p_105)) :rule equiv_simplify)
(step t12.t1 (cl (not @p_112) @p_105) :rule equiv1 :premises (t12.t0))
(step t12.t2 (cl (or (! (not (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2))))) :named @p_91) (! (= @p_85 @p_81) :named @p_93))) :rule forall_inst :args (@p_68 @p_80 n$))
(step t12.t3 (cl @p_91 @p_93) :rule or :premises (t12.t2))
(step t12.t4 (cl (not (! (= (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)) (fun_app$h ?v1 ?v2))) (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2))))) :named @p_87)) (not (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)) (fun_app$h ?v1 ?v2)))) (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2))))) :rule equiv_pos2)
(anchor :step t12.t5 :args ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$) (:= (?v0 A_llist$) ?v0) (:= (?v1 Nat_a_llist_fun$) ?v1) (:= (?v2 Nat$) ?v2)))
(step t12.t5.t0 (cl (! (= (= (! (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)) :named @p_88) (! (fun_app$h ?v1 ?v2) :named @p_89)) (= @p_89 @p_88)) :named @p_90)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_90 2 6))
(step t12.t5 (cl @p_87) :rule bind)
(step t12.t6 (cl (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2))))) :rule resolution :premises (t12.t4 t12.t5 a286))
(step t12.t7 (cl @p_93) :rule resolution :premises (t12.t3 t12.t6))
(step t12.t8 (cl (or (! (not (forall ((?v0 Nat$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$c (ldropn$ ?v0) (lCons$ ?v1 ?v2)) (fun_app$h (fun_app$o (case_nat$ (lCons$ ?v1 ?v2)) (uvn$ ?v2)) ?v0)))) :named @p_84) @p_83)) :rule forall_inst :args (@p_2 @p_8 @p_7))
(step t12.t9 (cl @p_84 @p_83) :rule or :premises (t12.t8))
(step t12.t10 (cl @p_83) :rule resolution :premises (t12.t9 a274))
(step t12.t11 (cl (= @p_81 @p_82)) :rule symm :premises (t12.t10))
(step t12.t12 (cl (= @p_3 @p_3)) :rule refl)
(step t12.t13 (cl (= @p_68 xs$)) :rule symm :premises (t12.a0))
(step t12.t14 (cl (= @p_82 @p_4)) :rule cong :premises (t12.t12 t12.t13))
(step t12.t15 (cl (= @p_85 @p_4)) :rule trans :premises (t12.t7 t12.t11 t12.t14))
(step t12.t16 (cl (not (! (= (! (=> (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$))) (! (= @p_9 @p_60) :named @p_64)) :named @p_65) (! (=> (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$))) @p_61) :named @p_63)) :named @p_66)) (not @p_65) @p_63) :rule equiv_pos2)
(step t12.t17 (cl (= (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$))) (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$))))) :rule refl)
(step t12.t18 (cl (! (= @p_64 @p_61) :named @p_67)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_67 2 6))
(step t12.t19 (cl @p_66) :rule cong :premises (t12.t17 t12.t18))
(step t12.t20 (cl @p_65 (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$)))) :rule implies_neg1)
(anchor :step t12.t21)
(assume t12.t21.a0 (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$))))
(step t12.t21.t0 (cl (or (! (not (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$)))) :named @p_62) @p_64)) :rule forall_inst :args (@p_8))
(step t12.t21.t1 (cl @p_62 @p_64) :rule or :premises (t12.t21.t0))
(step t12.t21.t2 (cl @p_64) :rule resolution :premises (t12.t21.t1 t12.t21.a0))
(step t12.t21 (cl @p_62 @p_64) :rule subproof :discharge (t12.t21.a0))
(step t12.t22 (cl @p_65 @p_64) :rule resolution :premises (t12.t20 t12.t21))
(step t12.t23 (cl @p_65 (not @p_64)) :rule implies_neg2)
(step t12.t24 (cl @p_65 @p_65) :rule resolution :premises (t12.t22 t12.t23))
(step t12.t25 (cl @p_65) :rule contraction :premises (t12.t24))
(step t12.t26 (cl @p_63) :rule resolution :premises (t12.t16 t12.t19 t12.t25))
(step t12.t27 (cl @p_62 @p_61) :rule implies :premises (t12.t26))
(step t12.t28 (cl @p_61) :rule resolution :premises (t12.t27 a5))
(step t12.t29 (cl (= @p_7 @p_7)) :rule refl)
(step t12.t30 (cl (= @p_97 @p_10)) :rule cong :premises (t12.t28 t12.t29))
(step t12.t31 (cl (! (= @p_12 @p_10) :named @p_37)) :rule symm :premises (t12.a5))
(step t12.t32 (cl @p_21) :rule symm :premises (t12.t31))
(step t12.t33 (cl (not (! (= (! (=> (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))) @p_13) :named @p_15) @p_15) :named @p_17)) (not @p_15) @p_15) :rule equiv_pos2)
(step t12.t34 (cl (= (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))) (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))))) :rule refl)
(step t12.t35 (cl (= @p_1 @p_1)) :rule refl)
(step t12.t36 (cl (= (! (= (! (= @p_12 @p_12) :named @p_18) true) :named @p_19) @p_18)) :rule equiv_simplify)
(step t12.t37 (cl (not @p_19) @p_18) :rule equiv1 :premises (t12.t36))
(step t12.t38 (cl (! (= @p_18 @p_18) :named @p_20)) :rule refl)
(step t12.t39 (cl @p_18) :rule refl)
(step t12.t40 (cl @p_18) :rule refl)
(step t12.t41 (cl @p_20) :rule cong :premises (t12.t39 t12.t40))
(step t12.t42 (cl @p_19) :rule hole :args ("TRUST_THEORY_REWRITE" @p_19 2 5))
(step t12.t43 (cl @p_19) :rule trans :premises (t12.t38 t12.t41 t12.t42))
(step t12.t44 (cl @p_18) :rule resolution :premises (t12.t37 t12.t43))
(step t12.t45 (cl (= @p_13 @p_13)) :rule cong :premises (t12.t35 t12.t44))
(step t12.t46 (cl @p_17) :rule cong :premises (t12.t34 t12.t45))
(step t12.t47 (cl @p_15 (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2)))))) :rule implies_neg1)
(anchor :step t12.t48)
(assume t12.t48.a0 (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))))
(step t12.t48.t0 (cl (or (! (not (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2)))))) :named @p_14) @p_13)) :rule forall_inst :args (lNil$ uu$ xs$))
(step t12.t48.t1 (cl @p_14 @p_13) :rule or :premises (t12.t48.t0))
(step t12.t48.t2 (cl @p_13) :rule resolution :premises (t12.t48.t1 t12.t48.a0))
(step t12.t48 (cl @p_14 @p_13) :rule subproof :discharge (t12.t48.a0))
(step t12.t49 (cl @p_15 @p_13) :rule resolution :premises (t12.t47 t12.t48))
(step t12.t50 (cl @p_15 @p_16) :rule implies_neg2)
(step t12.t51 (cl @p_15 @p_15) :rule resolution :premises (t12.t49 t12.t50))
(step t12.t52 (cl @p_15) :rule contraction :premises (t12.t51))
(step t12.t53 (cl @p_15) :rule resolution :premises (t12.t33 t12.t46 t12.t52))
(step t12.t54 (cl @p_14 @p_13) :rule implies :premises (t12.t53))
(step t12.t55 (cl @p_13) :rule resolution :premises (t12.t54 a184))
(step t12.t56 (cl (= @p_12 @p_1)) :rule symm :premises (t12.t55))
(step t12.t57 (cl (= @p_97 @p_1)) :rule trans :premises (t12.t30 t12.t32 t12.t56))
(step t12.t58 (cl (= @p_98 @p_5)) :rule cong :premises (t12.t15 t12.t57))
(step t12.t59 (cl (= (! (= @p_5 false) :named @p_57) @p_6)) :rule equiv_simplify)
(step t12.t60 (cl @p_57 @p_48) :rule equiv2 :premises (t12.t59))
(step t12.t61 (cl (! (not @p_48) :named @p_52) @p_5) :rule not_not)
(step t12.t62 (cl @p_57 @p_5) :rule resolution :premises (t12.t60 t12.t61))
(step t12.t63 (cl @p_57) :rule resolution :premises (t12.t62 t12.a3))
(step t12.t64 (cl @p_112) :rule trans :premises (t12.t58 t12.t63))
(step t12.t65 (cl @p_105) :rule resolution :premises (t12.t1 t12.t64))
(step t12 (cl @p_102 @p_103 @p_104 @p_48 @p_16 @p_100 @p_101 @p_105) :rule subproof :discharge (t12.a0 t12.a1 t12.a2 t12.a3 t12.a4 t12.a5 t12.a6))
(step t13 (cl (! (not @p_109) :named @p_110) @p_69) :rule and_pos :args (0))
(step t14 (cl @p_110 @p_83) :rule and_pos :args (1))
(step t15 (cl @p_110 @p_86) :rule and_pos :args (2))
(step t16 (cl @p_110 @p_6) :rule and_pos :args (3))
(step t17 (cl @p_110 @p_13) :rule and_pos :args (4))
(step t18 (cl @p_110 @p_21) :rule and_pos :args (5))
(step t19 (cl @p_110 @p_61) :rule and_pos :args (6))
(step t20 (cl @p_105 @p_110 @p_110 @p_110 @p_110 @p_110 @p_110 @p_110) :rule resolution :premises (t12 t13 t14 t15 t16 t17 t18 t19))
(step t21 (cl @p_110 @p_110 @p_110 @p_110 @p_110 @p_110 @p_110 @p_105) :rule reordering :premises (t20))
(step t22 (cl @p_110 @p_105) :rule contraction :premises (t21))
(step t23 (cl @p_111 @p_105) :rule resolution :premises (t11 t22))
(step t24 (cl @p_111 (! (not @p_105) :named @p_108)) :rule implies_neg2)
(step t25 (cl @p_111 @p_111) :rule resolution :premises (t23 t24))
(step t26 (cl @p_111) :rule contraction :premises (t25))
(step t27 (cl @p_110 @p_105) :rule implies :premises (t26))
(step t28 (cl @p_102 @p_103 @p_104 @p_48 @p_16 @p_100 @p_101 @p_105) :rule resolution :premises (t10 t27))
(step t29 (cl @p_107 (not @p_102)) :rule or_neg :args (0))
(step t30 (cl @p_107 (not @p_103)) :rule or_neg :args (1))
(step t31 (cl @p_107 (not @p_104)) :rule or_neg :args (2))
(step t32 (cl @p_107 @p_52) :rule or_neg :args (3))
(step t33 (cl @p_107 (! (not @p_16) :named @p_51)) :rule or_neg :args (4))
(step t34 (cl @p_107 (not @p_100)) :rule or_neg :args (5))
(step t35 (cl @p_107 (not @p_101)) :rule or_neg :args (6))
(step t36 (cl @p_107 @p_108) :rule or_neg :args (7))
(step t37 (cl @p_107 @p_107 @p_107 @p_107 @p_107 @p_107 @p_107 @p_107) :rule resolution :premises (t28 t29 t30 t31 t32 t33 t34 t35 t36))
(step t38 (cl @p_107) :rule contraction :premises (t37))
(step t39 (cl @p_106) :rule resolution :premises (t0 t9 t38))
(step t40 (cl @p_102 @p_103 @p_104 @p_5 @p_16 @p_100 @p_101 @p_105) :rule or :premises (t39))
(step t41 (cl @p_5 @p_16 @p_100 @p_101 @p_102 @p_103 @p_104 @p_105) :rule reordering :premises (t40))
(step t42 (cl (or (! (not (forall ((?v0 A_llist$) (?v1 Nat$)) (= (fun_app$h (uvn$ ?v0) ?v1) (fun_app$c (ldropn$ ?v1) ?v0)))) :named @p_99) @p_98)) :rule forall_inst :args (@p_7 n$))
(step t43 (cl @p_99 @p_98) :rule or :premises (t42))
(step t44 (cl @p_98) :rule resolution :premises (t43 a7))
(step t45 (cl (not (! (= (! (=> (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)))) @p_93) :named @p_94) (! (=> (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)))) @p_86) :named @p_92)) :named @p_95)) (not @p_94) @p_92) :rule equiv_pos2)
(step t46 (cl (= (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)))) (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)))))) :rule refl)
(step t47 (cl (! (= @p_93 @p_86) :named @p_96)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_96 2 6))
(step t48 (cl @p_95) :rule cong :premises (t46 t47))
(step t49 (cl @p_94 (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2))))) :rule implies_neg1)
(anchor :step t50)
(assume t50.a0 (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)))))
(step t50.t0 (cl (or @p_91 @p_93)) :rule forall_inst :args (@p_68 @p_80 n$))
(step t50.t1 (cl @p_91 @p_93) :rule or :premises (t50.t0))
(step t50.t2 (cl (not @p_87) (not (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)) (fun_app$h ?v1 ?v2)))) (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2))))) :rule equiv_pos2)
(anchor :step t50.t3 :args ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$) (:= (?v0 A_llist$) ?v0) (:= (?v1 Nat_a_llist_fun$) ?v1) (:= (?v2 Nat$) ?v2)))
(step t50.t3.t0 (cl @p_90) :rule hole :args ("TRUST_THEORY_REWRITE" @p_90 2 6))
(step t50.t3 (cl @p_87) :rule bind)
(step t50.t4 (cl (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2))))) :rule resolution :premises (t50.t2 t50.t3 a286))
(step t50.t5 (cl @p_93) :rule resolution :premises (t50.t1 t50.t4))
(step t50 (cl @p_91 @p_93) :rule subproof :discharge (t50.a0))
(step t51 (cl @p_94 @p_93) :rule resolution :premises (t49 t50))
(step t52 (cl @p_94 (not @p_93)) :rule implies_neg2)
(step t53 (cl @p_94 @p_94) :rule resolution :premises (t51 t52))
(step t54 (cl @p_94) :rule contraction :premises (t53))
(step t55 (cl @p_92) :rule resolution :premises (t45 t48 t54))
(step t56 (cl @p_91 @p_86) :rule implies :premises (t55))
(step t57 (cl (not @p_87) (not (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2)) (fun_app$h ?v1 ?v2)))) (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2))))) :rule equiv_pos2)
(anchor :step t58 :args ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$) (:= (?v0 A_llist$) ?v0) (:= (?v1 Nat_a_llist_fun$) ?v1) (:= (?v2 Nat$) ?v2)))
(step t58.t0 (cl @p_90) :rule hole :args ("TRUST_THEORY_REWRITE" @p_90 2 6))
(step t58 (cl @p_87) :rule bind)
(step t59 (cl (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$)) (= (fun_app$h ?v1 ?v2) (fun_app$h (fun_app$o (case_nat$ ?v0) ?v1) (suc$ ?v2))))) :rule resolution :premises (t57 t58 a286))
(step t60 (cl @p_86) :rule resolution :premises (t56 t59))
(step t61 (cl (or @p_84 @p_83)) :rule forall_inst :args (@p_2 @p_8 @p_7))
(step t62 (cl @p_84 @p_83) :rule or :premises (t61))
(step t63 (cl @p_83) :rule resolution :premises (t62 a274))
(step t64 (cl (! (not (! (or @p_11 @p_69) :named @p_70)) :named @p_79) @p_11 @p_69) :rule or_pos)
(step t65 (cl @p_11 @p_69 @p_79) :rule reordering :premises (t64))
(step t66 (cl (not (! (= (! (or @p_48 (! (not (! (= lNil$ @p_4) :named @p_23)) :named @p_45) @p_16 (! (not (! (= lNil$ @p_12) :named @p_35)) :named @p_46)) :named @p_49) (! (or @p_5 @p_45 @p_16 @p_46) :named @p_47)) :named @p_58)) (not @p_49) @p_47) :rule equiv_pos2)
(step t67 (cl (= @p_45 @p_45)) :rule refl)
(step t68 (cl (= @p_46 @p_46)) :rule refl)
(step t69 (cl @p_58) :rule cong :premises (t4 t67 t5 t68))
(step t70 (cl (! (and @p_6 @p_23 @p_13) :named @p_53) @p_48 @p_45 @p_16) :rule and_neg)
(step t71 (cl (! (=> @p_53 @p_46) :named @p_55) @p_53) :rule implies_neg1)
(anchor :step t72)
(assume t72.a0 @p_6)
(assume t72.a1 @p_23)
(assume t72.a2 @p_13)
(step t72.t0 (cl (= (! (= @p_35 false) :named @p_56) @p_46)) :rule equiv_simplify)
(step t72.t1 (cl (not @p_56) @p_46) :rule equiv1 :premises (t72.t0))
(step t72.t2 (cl (= @p_4 lNil$)) :rule symm :premises (t72.a1))
(step t72.t3 (cl @p_23) :rule symm :premises (t72.t2))
(step t72.t4 (cl (not @p_17) (not @p_15) @p_15) :rule equiv_pos2)
(step t72.t5 (cl (= (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))) (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))))) :rule refl)
(step t72.t6 (cl (= @p_1 @p_1)) :rule refl)
(step t72.t7 (cl (= @p_19 @p_18)) :rule equiv_simplify)
(step t72.t8 (cl (not @p_19) @p_18) :rule equiv1 :premises (t72.t7))
(step t72.t9 (cl @p_20) :rule refl)
(step t72.t10 (cl @p_18) :rule refl)
(step t72.t11 (cl @p_18) :rule refl)
(step t72.t12 (cl @p_20) :rule cong :premises (t72.t10 t72.t11))
(step t72.t13 (cl @p_19) :rule hole :args ("TRUST_THEORY_REWRITE" @p_19 2 5))
(step t72.t14 (cl @p_19) :rule trans :premises (t72.t9 t72.t12 t72.t13))
(step t72.t15 (cl @p_18) :rule resolution :premises (t72.t8 t72.t14))
(step t72.t16 (cl (= @p_13 @p_13)) :rule cong :premises (t72.t6 t72.t15))
(step t72.t17 (cl @p_17) :rule cong :premises (t72.t5 t72.t16))
(step t72.t18 (cl @p_15 (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2)))))) :rule implies_neg1)
(anchor :step t72.t19)
(assume t72.t19.a0 (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))))
(step t72.t19.t0 (cl (or @p_14 @p_13)) :rule forall_inst :args (lNil$ uu$ xs$))
(step t72.t19.t1 (cl @p_14 @p_13) :rule or :premises (t72.t19.t0))
(step t72.t19.t2 (cl @p_13) :rule resolution :premises (t72.t19.t1 t72.t19.a0))
(step t72.t19 (cl @p_14 @p_13) :rule subproof :discharge (t72.t19.a0))
(step t72.t20 (cl @p_15 @p_13) :rule resolution :premises (t72.t18 t72.t19))
(step t72.t21 (cl @p_15 @p_16) :rule implies_neg2)
(step t72.t22 (cl @p_15 @p_15) :rule resolution :premises (t72.t20 t72.t21))
(step t72.t23 (cl @p_15) :rule contraction :premises (t72.t22))
(step t72.t24 (cl @p_15) :rule resolution :premises (t72.t4 t72.t17 t72.t23))
(step t72.t25 (cl @p_14 @p_13) :rule implies :premises (t72.t24))
(step t72.t26 (cl @p_13) :rule resolution :premises (t72.t25 a184))
(step t72.t27 (cl (= @p_12 @p_1)) :rule symm :premises (t72.t26))
(step t72.t28 (cl (= @p_35 @p_5)) :rule cong :premises (t72.t3 t72.t27))
(step t72.t29 (cl (= @p_57 @p_6)) :rule equiv_simplify)
(step t72.t30 (cl @p_57 @p_48) :rule equiv2 :premises (t72.t29))
(step t72.t31 (cl @p_52 @p_5) :rule not_not)
(step t72.t32 (cl @p_57 @p_5) :rule resolution :premises (t72.t30 t72.t31))
(step t72.t33 (cl @p_57) :rule resolution :premises (t72.t32 t72.a0))
(step t72.t34 (cl @p_56) :rule trans :premises (t72.t28 t72.t33))
(step t72.t35 (cl @p_46) :rule resolution :premises (t72.t1 t72.t34))
(step t72 (cl @p_48 @p_45 @p_16 @p_46) :rule subproof :discharge (t72.a0 t72.a1 t72.a2))
(step t73 (cl (! (not @p_53) :named @p_54) @p_6) :rule and_pos :args (0))
(step t74 (cl @p_54 @p_23) :rule and_pos :args (1))
(step t75 (cl @p_54 @p_13) :rule and_pos :args (2))
(step t76 (cl @p_46 @p_54 @p_54 @p_54) :rule resolution :premises (t72 t73 t74 t75))
(step t77 (cl @p_54 @p_54 @p_54 @p_46) :rule reordering :premises (t76))
(step t78 (cl @p_54 @p_46) :rule contraction :premises (t77))
(step t79 (cl @p_55 @p_46) :rule resolution :premises (t71 t78))
(step t80 (cl @p_55 (! (not @p_46) :named @p_50)) :rule implies_neg2)
(step t81 (cl @p_55 @p_55) :rule resolution :premises (t79 t80))
(step t82 (cl @p_55) :rule contraction :premises (t81))
(step t83 (cl @p_54 @p_46) :rule implies :premises (t82))
(step t84 (cl @p_48 @p_45 @p_16 @p_46) :rule resolution :premises (t70 t83))
(step t85 (cl @p_49 @p_52) :rule or_neg :args (0))
(step t86 (cl @p_49 (not @p_45)) :rule or_neg :args (1))
(step t87 (cl @p_49 @p_51) :rule or_neg :args (2))
(step t88 (cl @p_49 @p_50) :rule or_neg :args (3))
(step t89 (cl @p_49 @p_49 @p_49 @p_49) :rule resolution :premises (t84 t85 t86 t87 t88))
(step t90 (cl @p_49) :rule contraction :premises (t89))
(step t91 (cl @p_47) :rule resolution :premises (t66 t69 t90))
(step t92 (cl @p_5 @p_45 @p_16 @p_46) :rule or :premises (t91))
(step t93 (cl (not @p_17) (not @p_15) @p_15) :rule equiv_pos2)
(step t94 (cl (= (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))) (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))))) :rule refl)
(step t95 (cl (= @p_1 @p_1)) :rule refl)
(step t96 (cl (= @p_19 @p_18)) :rule equiv_simplify)
(step t97 (cl (not @p_19) @p_18) :rule equiv1 :premises (t96))
(step t98 (cl @p_20) :rule refl)
(step t99 (cl @p_18) :rule refl)
(step t100 (cl @p_18) :rule refl)
(step t101 (cl @p_20) :rule cong :premises (t99 t100))
(step t102 (cl @p_19) :rule hole :args ("TRUST_THEORY_REWRITE" @p_19 2 5))
(step t103 (cl @p_19) :rule trans :premises (t98 t101 t102))
(step t104 (cl @p_18) :rule resolution :premises (t97 t103))
(step t105 (cl (= @p_13 @p_13)) :rule cong :premises (t95 t104))
(step t106 (cl @p_17) :rule cong :premises (t94 t105))
(step t107 (cl @p_15 (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2)))))) :rule implies_neg1)
(anchor :step t108)
(assume t108.a0 (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (= (fun_app$c (fun_app$bc (case_llist$ ?v0) ?v1) ?v2) (ite (fun_app$q lnull$d ?v2) ?v0 (fun_app$c (fun_app$e ?v1 (lhd$ ?v2)) (ltl$ ?v2))))))
(step t108.t0 (cl (or @p_14 @p_13)) :rule forall_inst :args (lNil$ uu$ xs$))
(step t108.t1 (cl @p_14 @p_13) :rule or :premises (t108.t0))
(step t108.t2 (cl @p_13) :rule resolution :premises (t108.t1 t108.a0))
(step t108 (cl @p_14 @p_13) :rule subproof :discharge (t108.a0))
(step t109 (cl @p_15 @p_13) :rule resolution :premises (t107 t108))
(step t110 (cl @p_15 @p_16) :rule implies_neg2)
(step t111 (cl @p_15 @p_15) :rule resolution :premises (t109 t110))
(step t112 (cl @p_15) :rule contraction :premises (t111))
(step t113 (cl @p_15) :rule resolution :premises (t93 t106 t112))
(step t114 (cl @p_14 @p_13) :rule implies :premises (t113))
(step t115 (cl @p_13) :rule resolution :premises (t114 a184))
(step t116 (cl (not (! (= (! (ite @p_11 (! (= @p_12 lNil$) :named @p_38) @p_37) :named @p_39) (! (ite @p_11 @p_35 @p_21) :named @p_36)) :named @p_42)) (! (not @p_39) :named @p_41) @p_36) :rule equiv_pos2)
(step t117 (cl (= @p_11 @p_11)) :rule refl)
(step t118 (cl (! (= @p_38 @p_35) :named @p_44)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_44 2 6))
(step t119 (cl (! (= @p_37 @p_21) :named @p_43)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_43 2 6))
(step t120 (cl @p_42) :rule cong :premises (t117 t118 t119))
(step t121 (cl (not (! (= @p_39 @p_39) :named @p_40)) @p_41 @p_39) :rule equiv_pos2)
(step t122 (cl (= lNil$ lNil$)) :rule refl)
(step t123 (cl (= @p_38 @p_38)) :rule cong :premises (t104 t122))
(step t124 (cl (= @p_10 @p_10)) :rule refl)
(step t125 (cl (= @p_37 @p_37)) :rule cong :premises (t104 t124))
(step t126 (cl @p_40) :rule cong :premises (t117 t123 t125))
(step t127 (cl @p_39) :rule hole)
(step t128 (cl @p_39) :rule resolution :premises (t121 t126 t127))
(step t129 (cl @p_36) :rule resolution :premises (t116 t120 t128))
(step t130 (cl (! (not @p_11) :named @p_22) @p_35) :rule ite2 :premises (t129))
(step t131 (cl (! (not (! (or @p_22 @p_23) :named @p_24)) :named @p_34) @p_22 @p_23) :rule or_pos)
(step t132 (cl @p_22 @p_23 @p_34) :rule reordering :premises (t131))
(step t133 (cl (or (! (not (forall ((?v0 A_llist$) (?v1 Nat$)) (or (not (fun_app$q lnull$d ?v0)) (= lNil$ (fun_app$c (ldropn$ ?v1) ?v0))))) :named @p_33) @p_24)) :rule forall_inst :args (xs$ @p_2))
(step t134 (cl @p_33 @p_24) :rule or :premises (t133))
(step t135 (cl (not (! (= (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (fun_app$q lnull$d ?v0) (= (fun_app$c (ldropn$ ?v1) ?v0) lNil$))) (forall ((?v0 A_llist$) (?v1 Nat$)) (or (not (fun_app$q lnull$d ?v0)) (= lNil$ (fun_app$c (ldropn$ ?v1) ?v0))))) :named @p_25)) (not (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (fun_app$q lnull$d ?v0) (= (fun_app$c (ldropn$ ?v1) ?v0) lNil$)))) (forall ((?v0 A_llist$) (?v1 Nat$)) (or (not (fun_app$q lnull$d ?v0)) (= lNil$ (fun_app$c (ldropn$ ?v1) ?v0))))) :rule equiv_pos2)
(anchor :step t136 :args ((?v0 A_llist$) (?v1 Nat$) (:= (?v0 A_llist$) ?v0) (:= (?v1 Nat$) ?v1)))
(step t136.t0 (cl (= (! (fun_app$q lnull$d ?v0) :named @p_30) @p_30)) :rule refl)
(step t136.t1 (cl (! (= (! (= (! (fun_app$c (ldropn$ ?v1) ?v0) :named @p_28) lNil$) :named @p_31) (! (= lNil$ @p_28) :named @p_29)) :named @p_32)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_32 2 6))
(step t136.t2 (cl (= (=> @p_30 @p_31) (=> @p_30 @p_29))) :rule cong :premises (t136.t0 t136.t1))
(step t136 (cl (= (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (fun_app$q lnull$d ?v0) (= (fun_app$c (ldropn$ ?v1) ?v0) lNil$))) (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (fun_app$q lnull$d ?v0) (= lNil$ (fun_app$c (ldropn$ ?v1) ?v0)))))) :rule bind)
(step t137 (cl (! (= (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (fun_app$q lnull$d ?v0) (= lNil$ (fun_app$c (ldropn$ ?v1) ?v0)))) (forall ((?v0 A_llist$) (?v1 Nat$)) (or (not (fun_app$q lnull$d ?v0)) (= lNil$ (fun_app$c (ldropn$ ?v1) ?v0))))) :named @p_26)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_26 13 6))
(step t138 (cl @p_25) :rule trans :premises (t136 t137))
(step t139 (cl (forall ((?v0 A_llist$) (?v1 Nat$)) (or (not (fun_app$q lnull$d ?v0)) (= lNil$ (fun_app$c (ldropn$ ?v1) ?v0))))) :rule resolution :premises (t135 t138 a101))
(step t140 (cl @p_24) :rule resolution :premises (t134 t139))
(step t141 (cl @p_22) :rule resolution :premises (t92 t115 a58 t130 t132 t140))
(step t142 (cl (or (! (not (forall ((?v0 A_llist$)) (or (fun_app$q lnull$d ?v0) (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0)))))) :named @p_78) @p_70)) :rule forall_inst :args (xs$))
(step t143 (cl @p_78 @p_70) :rule or :premises (t142))
(step t144 (cl (not (! (= (forall ((?v0 A_llist$)) (=> (not (fun_app$q lnull$d ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0))) (forall ((?v0 A_llist$)) (or (fun_app$q lnull$d ?v0) (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0)))))) :named @p_71)) (not (forall ((?v0 A_llist$)) (=> (not (fun_app$q lnull$d ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0)))) (forall ((?v0 A_llist$)) (or (fun_app$q lnull$d ?v0) (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0)))))) :rule equiv_pos2)
(anchor :step t145 :args ((?v0 A_llist$) (:= (?v0 A_llist$) ?v0)))
(step t145.t0 (cl (= (! (not @p_30) :named @p_75) @p_75)) :rule refl)
(step t145.t1 (cl (! (= (! (= (! (lCons$ (lhd$ ?v0) (ltl$ ?v0)) :named @p_73) ?v0) :named @p_76) (! (= ?v0 @p_73) :named @p_74)) :named @p_77)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_77 2 6))
(step t145.t2 (cl (= (=> @p_75 @p_76) (=> @p_75 @p_74))) :rule cong :premises (t145.t0 t145.t1))
(step t145 (cl (= (forall ((?v0 A_llist$)) (=> (not (fun_app$q lnull$d ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0))) (forall ((?v0 A_llist$)) (=> (not (fun_app$q lnull$d ?v0)) (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0))))))) :rule bind)
(step t146 (cl (! (= (forall ((?v0 A_llist$)) (=> (not (fun_app$q lnull$d ?v0)) (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0))))) (forall ((?v0 A_llist$)) (or (fun_app$q lnull$d ?v0) (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0)))))) :named @p_72)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_72 13 6))
(step t147 (cl @p_71) :rule trans :premises (t145 t146))
(step t148 (cl (forall ((?v0 A_llist$)) (or (fun_app$q lnull$d ?v0) (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0)))))) :rule resolution :premises (t144 t147 a242))
(step t149 (cl @p_70) :rule resolution :premises (t143 t148))
(step t150 (cl @p_69) :rule resolution :premises (t65 t141 t149))
(step t151 (cl (not @p_66) (not @p_65) @p_63) :rule equiv_pos2)
(step t152 (cl (= (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$))) (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$))))) :rule refl)
(step t153 (cl @p_67) :rule hole :args ("TRUST_THEORY_REWRITE" @p_67 2 6))
(step t154 (cl @p_66) :rule cong :premises (t152 t153))
(step t155 (cl @p_65 (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$)))) :rule implies_neg1)
(anchor :step t156)
(assume t156.a0 (forall ((?v0 A$)) (= (fun_app$e uu$ ?v0) (ldropn$ n$))))
(step t156.t0 (cl (or @p_62 @p_64)) :rule forall_inst :args (@p_8))
(step t156.t1 (cl @p_62 @p_64) :rule or :premises (t156.t0))
(step t156.t2 (cl @p_64) :rule resolution :premises (t156.t1 t156.a0))
(step t156 (cl @p_62 @p_64) :rule subproof :discharge (t156.a0))
(step t157 (cl @p_65 @p_64) :rule resolution :premises (t155 t156))
(step t158 (cl @p_65 (not @p_64)) :rule implies_neg2)
(step t159 (cl @p_65 @p_65) :rule resolution :premises (t157 t158))
(step t160 (cl @p_65) :rule contraction :premises (t159))
(step t161 (cl @p_63) :rule resolution :premises (t151 t154 t160))
(step t162 (cl @p_62 @p_61) :rule implies :premises (t161))
(step t163 (cl @p_61) :rule resolution :premises (t162 a5))
(step t164 (cl @p_11 @p_21) :rule ite1 :premises (t129))
(step t165 (cl @p_21) :rule resolution :premises (t164 t141))
(step t166 (cl) :rule resolution :premises (t41 t44 t60 t63 t150 t163 t165 t115 a58))
