(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_list_set$ 0)
(declare-sort A_a_list_fun$ 0)
(declare-sort A_b_option_fun$ 0)
(declare-sort A_set_bool_fun$ 0)
(declare-sort A_list_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_rbt_bool_fun$ 0)
(declare-sort A_a_list_list_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort A_list_a_list_fun$ 0)
(declare-sort A_a_b_prod_list_fun$ 0)
(declare-sort A_b_prod_a_list_fun$ 0)
(declare-sort A_list_list_bool_fun$ 0)
(declare-sort A_b_prod_list_bool_fun$ 0)
(declare-sort A_list_a_list_list_fun$ 0)
(declare-sort A_b_prod_a_list_list_fun$ 0)
(declare-sort A_list_a_b_prod_list_fun$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_list_fun$ 0)
(declare-sort A_b_rbt_a_b_option_fun_fun$ 0)
(declare-sort A_list_a_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_list_fun$ 0)
(declare-sort A_b_prod_a_b_prod_bool_fun_fun$ 0)
(declare-sort A_b_prod_list_a_b_prod_list_fun$ 0)
(declare-sort A_list_a_list_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_bool_fun_fun$ 0)
(declare-sort A_b_prod_list_a_list_bool_fun_fun$ 0)
(declare-sort A_list_a_b_prod_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_list_bool_fun_fun$ 0)
(declare-sort A_a_bool_fun_fun_a_a_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_list_a_list_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_b_prod_list_bool_fun_fun$ 0)
(declare-sort A_b_prod_list_a_b_prod_list_bool_fun_fun$ 0)
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-sort A_list$ 0)
(declare-sort A_list_list$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort A_b_prod_list_list$ 0)
(declare-sort A_list_list_list$ 0)
(declare-sort B_option$ 0)
(declare-fun r$ () Color$)
(declare-fun b$ () Color$)
(declare-fun empty$ () A_b_rbt$)
(declare-fun select$ (A_b_rbt$) Color$)
(declare-fun selecta$ (A_b_rbt$) A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$) A$)
(declare-fun selectc$ (A_b_rbt$) B$)
(declare-fun selectd$ (A_b_rbt$) A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$) A_b_rbt$)
(declare-fun nil$ () A_list$)
(declare-fun hd$ (A_list$) A$)
(declare-fun tl$ (A_list$) A_list$)
(declare-fun cons$ (A$ A_list$) A_list$)
(declare-fun nil$a () A_list_list$)
(declare-fun hd$a (A_list_list$) A_list$)
(declare-fun tl$a (A_list_list$) A_list_list$)
(declare-fun cons$a (A_list$ A_list_list$) A_list_list$)
(declare-fun fst$ (A_b_prod$) A$)
(declare-fun snd$ (A_b_prod$) B$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun nil$b () A_b_prod_list$)
(declare-fun hd$b (A_b_prod_list$) A_b_prod$)
(declare-fun tl$b (A_b_prod_list$) A_b_prod_list$)
(declare-fun cons$b (A_b_prod$ A_b_prod_list$) A_b_prod_list$)
(declare-fun nil$c () A_b_prod_list_list$)
(declare-fun hd$c (A_b_prod_list_list$) A_b_prod_list$)
(declare-fun tl$c (A_b_prod_list_list$) A_b_prod_list_list$)
(declare-fun cons$c (A_b_prod_list$ A_b_prod_list_list$) A_b_prod_list_list$)
(declare-fun nil$d () A_list_list_list$)
(declare-fun hd$d (A_list_list_list$) A_list_list$)
(declare-fun tl$d (A_list_list_list$) A_list_list_list$)
(declare-fun cons$d (A_list_list$ A_list_list_list$) A_list_list_list$)
(declare-fun none$ () B_option$)
(declare-fun the$ (B_option$) B$)
(declare-fun some$ (B$) B_option$)
(declare-fun c$ () Color$)
(declare-fun k$ () A$)
(declare-fun v$ () B$)
(declare-fun t1$ () A_b_rbt$)
(declare-fun t2$ () A_b_rbt$)
(declare-fun uu$ (A_set$) A_bool_fun$)
(declare-fun bot$ () A_set$)
(declare-fun dom$ (A_b_option_fun$) A_set$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun uua$ (A$) A_bool_fun$)
(declare-fun uub$ (A_a_bool_fun_fun$) A_a_bool_fun_fun$)
(declare-fun uuc$ (A_b_option_fun$) A_bool_fun$)
(declare-fun uud$ (A_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun uue$ (A_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun uuf$ (A_set$) A_a_bool_fun_fun_a_a_bool_fun_fun_fun$)
(declare-fun uug$ () A_b_option_fun$)
(declare-fun bind$ (A_list_list$ A_list_a_list_fun$) A_list$)
(declare-fun keys$ (A_b_rbt$) A_list$)
(declare-fun less$ () A_a_bool_fun_fun$)
(declare-fun maps$ (A_a_list_fun$) A_list_a_list_fun$)
(declare-fun set$a (A_list_list$) A_list_set$)
(declare-fun bind$a (A_list$ A_a_list_fun$) A_list$)
(declare-fun bind$b (A_list$ A_a_list_list_fun$) A_list_list$)
(declare-fun bind$c (A_list$ A_a_b_prod_list_fun$) A_b_prod_list$)
(declare-fun bind$d (A_list_list$ A_list_a_list_list_fun$) A_list_list$)
(declare-fun bind$e (A_list_list$ A_list_a_b_prod_list_fun$) A_b_prod_list$)
(declare-fun bind$f (A_b_prod_list$ A_b_prod_a_list_fun$) A_list$)
(declare-fun bind$g (A_b_prod_list$ A_b_prod_a_list_list_fun$) A_list_list$)
(declare-fun bind$h (A_b_prod_list$ A_b_prod_a_b_prod_list_fun$) A_b_prod_list$)
(declare-fun append$ (A_list$) A_list_a_list_fun$)
(declare-fun finite$ (A_set$) Bool)
(declare-fun insert$ (A$) A_list_a_list_fun$)
(declare-fun map_of$ (A_b_prod_list$) A_b_option_fun$)
(declare-fun member$ (A$) A_set_bool_fun$)
(declare-fun append$a (A_list_list$) A_list_list_a_list_list_fun$)
(declare-fun append$b (A_b_prod_list$) A_b_prod_list_a_b_prod_list_fun$)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun entries$ (A_b_rbt$) A_b_prod_list$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun insert$a (A$ A_set$) A_set$)
(declare-fun lexordp$ (A_a_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun member$a (A_list$ A_list_set$) Bool)
(declare-fun distinct$ (A_list$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$b (A_set_bool_fun$ A_set$) Bool)
(declare-fun fun_app$c (A_b_option_fun$ A$) B_option$)
(declare-fun fun_app$d (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$e (A_a_bool_fun_fun_a_a_bool_fun_fun_fun$ A_a_bool_fun_fun$) A_a_bool_fun_fun$)
(declare-fun fun_app$f (A_b_rbt_bool_fun$ A_b_rbt$) Bool)
(declare-fun fun_app$g (A_list_bool_fun$ A_list$) Bool)
(declare-fun fun_app$h (A_list_a_list_bool_fun_fun$ A_list$) A_list_bool_fun$)
(declare-fun fun_app$i (A_list_list_bool_fun$ A_list_list$) Bool)
(declare-fun fun_app$j (A_list_list_a_list_list_bool_fun_fun$ A_list_list$) A_list_list_bool_fun$)
(declare-fun fun_app$k (A_b_prod_list_a_b_prod_list_bool_fun_fun$ A_b_prod_list$) A_b_prod_list_bool_fun$)
(declare-fun fun_app$l (A_b_prod_list_bool_fun$ A_b_prod_list$) Bool)
(declare-fun fun_app$m (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun fun_app$n (A_b_prod_a_b_prod_bool_fun_fun$ A_b_prod$) A_b_prod_bool_fun$)
(declare-fun fun_app$o (A_b_prod_list_a_list_bool_fun_fun$ A_b_prod_list$) A_list_bool_fun$)
(declare-fun fun_app$p (A_b_prod_list_a_list_list_bool_fun_fun$ A_b_prod_list$) A_list_list_bool_fun$)
(declare-fun fun_app$q (A_list_a_b_prod_list_bool_fun_fun$ A_list$) A_b_prod_list_bool_fun$)
(declare-fun fun_app$r (A_list_a_list_list_bool_fun_fun$ A_list$) A_list_list_bool_fun$)
(declare-fun fun_app$s (A_list_list_a_b_prod_list_bool_fun_fun$ A_list_list$) A_b_prod_list_bool_fun$)
(declare-fun fun_app$t (A_list_list_a_list_bool_fun_fun$ A_list_list$) A_list_bool_fun$)
(declare-fun fun_app$u (A_list_a_list_fun$ A_list$) A_list$)
(declare-fun fun_app$v (A_list_list_a_list_list_fun$ A_list_list$) A_list_list$)
(declare-fun fun_app$w (A_b_prod_list_a_b_prod_list_fun$ A_b_prod_list$) A_b_prod_list$)
(declare-fun fun_app$x (A_a_list_fun$ A$) A_list$)
(declare-fun fun_app$y (A_b_rbt_a_b_option_fun_fun$ A_b_rbt$) A_b_option_fun$)
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun lexordp$a (A_list_a_list_bool_fun_fun$) A_list_list_a_list_list_bool_fun_fun$)
(declare-fun lexordp$b (A_b_prod_a_b_prod_bool_fun_fun$) A_b_prod_list_a_b_prod_list_bool_fun_fun$)
(declare-fun rbt_less$ (A_a_bool_fun_fun$ A$) A_b_rbt_bool_fun$)
(declare-fun sublists$ (A_list_list$) A_list_list_list$)
(declare-fun the_elem$ (A_set$) A$)
(declare-fun distinct$a (A_list_list$) Bool)
(declare-fun distinct$b (A_b_prod_list$) Bool)
(declare-fun sublists$a (A_b_prod_list$) A_b_prod_list_list$)
(declare-fun sublists$b (A_list$) A_list_list$)
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun rbt_lookup$ (A_a_bool_fun_fun$) A_b_rbt_a_b_option_fun_fun$)
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$) A_b_rbt_bool_fun$)
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun lexordp_eq$a (A_list_a_list_bool_fun_fun$) A_list_list_a_list_list_bool_fun_fun$)
(declare-fun lexordp_eq$b (A_b_prod_a_b_prod_bool_fun_fun$) A_b_prod_list_a_b_prod_list_bool_fun_fun$)
(declare-fun rbt_greater$ (A_a_bool_fun_fun$ A$) A_b_rbt_bool_fun$)
(declare-fun product_lists$ (A_list_list_list$) A_list_list_list$)
(declare-fun product_lists$a (A_b_prod_list_list$) A_b_prod_list_list$)
(declare-fun product_lists$b (A_list_list$) A_list_list$)
(assert (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v0)) :pattern ((fun_app$ (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (fun_app$b (member$ ?v1) ?v0)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_b_option_fun$) (?v1 A$)) (! (= (fun_app$ (uuc$ ?v0) ?v1) (not (= (fun_app$c ?v0 ?v1) none$))) :pattern ((fun_app$ (uuc$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$ (fun_app$a (uub$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$a ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$a (uub$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$ (fun_app$d (uud$ ?v0) ?v1) ?v2) (or (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$d (uud$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$ (fun_app$d (uue$ ?v0) ?v1) ?v2) (and (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$d (uue$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_set$) (?v1 A_a_bool_fun_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$ (fun_app$a (fun_app$e (uuf$ ?v0) ?v1) ?v2) ?v3) (and (fun_app$b (member$ ?v3) ?v0) (fun_app$ (fun_app$a ?v1 ?v3) ?v2))) :pattern ((fun_app$ (fun_app$a (fun_app$e (uuf$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$c uug$ ?v0) none$) :pattern ((fun_app$c uug$ ?v0)))))
(assert (not (fun_app$f (rbt_greater$ less$ k$) t2$)))
(assert (forall ((?v0 A$) (?v1 A$)) (= (not (fun_app$ (fun_app$a less$ ?v0) ?v1)) (or (fun_app$ (fun_app$a less$ ?v1) ?v0) (= ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A$)) (= (not (= ?v0 ?v1)) (or (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (and (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$ (fun_app$a less$ ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (=> (not false) (fun_app$ (fun_app$a less$ ?v1) ?v0))) false) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v2)) (fun_app$ (fun_app$a less$ ?v0) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v2)) (fun_app$ (fun_app$a less$ ?v0) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v2) ?v0)) (fun_app$ (fun_app$a less$ ?v2) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v0)) false) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v0)) false) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v0)) false) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (fun_app$a less$ ?v0) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (= (= ?v1 ?v0) false)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (= (= ?v0 ?v1) false)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 Bool)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (= (=> (fun_app$ (fun_app$a less$ ?v1) ?v0) ?v2) true)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (= (not (fun_app$ (fun_app$a less$ ?v1) ?v0)) true)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (not (fun_app$ (fun_app$a less$ ?v1) ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (not (= ?v1 ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v2)) (fun_app$ (fun_app$a less$ ?v0) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (not (fun_app$ (fun_app$a less$ ?v0) ?v1)) (= (not (fun_app$ (fun_app$a less$ ?v1) ?v0)) (= ?v1 ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) false) (=> (fun_app$ (fun_app$a less$ ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 A$) (?v1 A$)) (or (fun_app$ (fun_app$a less$ ?v0) ?v1) (or (= ?v0 ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v0))) ))
(assert (forall ((?v0 A$)) (not (fun_app$ (fun_app$a less$ ?v0) ?v0)) ))
(assert (forall ((?v0 A$)) (not (fun_app$ (fun_app$a less$ ?v0) ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_b_rbt$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$f (rbt_greater$ less$ ?v1) ?v2)) (fun_app$f (rbt_greater$ less$ ?v0) ?v2)) ))
(assert (fun_app$f (rbt_sorted$ less$) (branch$ c$ t1$ k$ v$ t2$)))
(assert (forall ((?v0 A$) (?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (! (= (fun_app$f (rbt_greater$ less$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) (and (fun_app$ (fun_app$a less$ ?v0) ?v3) (and (fun_app$f (rbt_greater$ less$ ?v0) ?v2) (fun_app$f (rbt_greater$ less$ ?v0) ?v5)))) :pattern ((fun_app$f (rbt_greater$ less$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5))))))
(assert (forall ((?v0 A$) (?v1 A_b_rbt$) (?v2 A$)) (=> (and (fun_app$f (rbt_less$ less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v0) ?v2)) (fun_app$f (rbt_less$ less$ ?v2) ?v1)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 Color$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$)) (! (= (fun_app$f (rbt_greater$ ?v0 ?v1) (branch$ ?v2 ?v3 ?v4 ?v5 ?v6)) (and (fun_app$ (fun_app$a ?v0 ?v1) ?v4) (and (fun_app$f (rbt_greater$ ?v0 ?v1) ?v3) (fun_app$f (rbt_greater$ ?v0 ?v1) ?v6)))) :pattern ((fun_app$f (rbt_greater$ ?v0 ?v1) (branch$ ?v2 ?v3 ?v4 ?v5 ?v6))))))
(assert (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (fun_app$f (rbt_sorted$ less$) (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) (and (fun_app$f (rbt_less$ less$ ?v2) ?v1) (and (fun_app$f (rbt_greater$ less$ ?v2) ?v4) (and (fun_app$f (rbt_sorted$ less$) ?v1) (fun_app$f (rbt_sorted$ less$) ?v4))))) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) ?v1) (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v1) ?v2)) (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) ?v1) (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_list$)) (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) ?v0) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (or (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) ?v1) (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v1) ?v0)) ))
(assert (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 Color$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4) (branch$ ?v5 ?v6 ?v7 ?v8 ?v9)) (and (= ?v0 ?v5) (and (= ?v1 ?v6) (and (= ?v2 ?v7) (and (= ?v3 ?v8) (= ?v4 ?v9)))))) ))
(assert (= (fun_app$f (rbt_sorted$ less$) empty$) true))
(assert (forall ((?v0 A$)) (! (= (fun_app$f (rbt_greater$ less$ ?v0) empty$) true) :pattern ((rbt_greater$ less$ ?v0)))))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1) (fun_app$g (fun_app$h (lexordp$ less$) ?v1) ?v2)) (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v2)) ))
(assert (forall ((?v0 A_list$)) (not (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (or (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1) (or (= ?v0 ?v1) (fun_app$g (fun_app$h (lexordp$ less$) ?v1) ?v0))) ))
(assert (forall ((?v0 A_list$)) (=> (forall ((?v1 A$)) (not (fun_app$ (fun_app$a less$ ?v1) ?v1)) ) (not (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v0))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1) (fun_app$g (fun_app$h (lexordp$ less$) ?v1) ?v0)) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1) (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) ?v1)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 A_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (fun_app$b (member$ ?v0) (collect$ ?v1)) (fun_app$ ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) ?v1) (or (= ?v0 ?v1) (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1))) :pattern ((fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) ?v1)))))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1) (and (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) ?v1) (not (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v1) ?v0)))) :pattern ((fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (! (= (fun_app$f (rbt_less$ less$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) (and (fun_app$ (fun_app$a less$ ?v3) ?v0) (and (fun_app$f (rbt_less$ less$ ?v0) ?v2) (fun_app$f (rbt_less$ less$ ?v0) ?v5)))) :pattern ((fun_app$f (rbt_less$ less$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5))))))
(assert (forall ((?v0 A$)) (! (= (fun_app$f (rbt_less$ less$ ?v0) empty$) true) :pattern ((rbt_less$ less$ ?v0)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 Color$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$)) (! (= (fun_app$f (rbt_less$ ?v0 ?v1) (branch$ ?v2 ?v3 ?v4 ?v5 ?v6)) (and (fun_app$ (fun_app$a ?v0 ?v4) ?v1) (and (fun_app$f (rbt_less$ ?v0 ?v1) ?v3) (fun_app$f (rbt_less$ ?v0 ?v1) ?v6)))) :pattern ((fun_app$f (rbt_less$ ?v0 ?v1) (branch$ ?v2 ?v3 ?v4 ?v5 ?v6))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (! (= (fun_app$f (rbt_less$ ?v0 ?v1) empty$) true) :pattern ((rbt_less$ ?v0 ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (! (= (fun_app$f (rbt_sorted$ ?v0) empty$) true) :pattern ((rbt_sorted$ ?v0)))))
(assert (forall ((?v0 A_b_rbt$)) (=> (and (=> (= ?v0 empty$) false) (forall ((?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) false) )) false) ))
(assert (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (! (= (fun_app$f (rbt_sorted$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) (and (fun_app$f (rbt_less$ ?v0 ?v3) ?v2) (and (fun_app$f (rbt_greater$ ?v0 ?v3) ?v5) (and (fun_app$f (rbt_sorted$ ?v0) ?v2) (fun_app$f (rbt_sorted$ ?v0) ?v5))))) :pattern ((fun_app$f (rbt_sorted$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (! (= (fun_app$f (rbt_greater$ ?v0 ?v1) empty$) true) :pattern ((rbt_greater$ ?v0 ?v1)))))
(assert (fun_app$f (rbt_sorted$ less$) (branch$ c$ t1$ k$ v$ t2$)))
(assert (forall ((?v0 A_list$)) (fun_app$g (fun_app$h (lexordp_eq$ less$) nil$) ?v0) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (fun_app$g (fun_app$h (lexordp$ ?v0) ?v1) ?v2) (fun_app$g (fun_app$h (lexordp_eq$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (and (not (fun_app$ (fun_app$a less$ ?v0) ?v1)) (and (not (fun_app$ (fun_app$a less$ ?v1) ?v0)) (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v2) ?v3))) (fun_app$g (fun_app$h (lexordp_eq$ less$) (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$g (fun_app$h (lexordp$ less$) (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (and (not (fun_app$ (fun_app$a less$ ?v0) ?v1)) (and (not (fun_app$ (fun_app$a less$ ?v1) ?v0)) (fun_app$g (fun_app$h (lexordp$ less$) ?v2) ?v3))) (fun_app$g (fun_app$h (lexordp$ less$) (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$g (fun_app$h (lexordp_eq$ less$) (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_list$)) (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) ) (or (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$ (fun_app$a less$ ?v2) ?v3))) ) (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$ (fun_app$a less$ ?v2) ?v3)) (and (not (fun_app$ (fun_app$a less$ ?v3) ?v2)) (fun_app$g (fun_app$h (lexordp$ less$) ?v4) ?v5))))) )))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_a_list_bool_fun_fun$)) (=> (and (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$g (fun_app$h ?v2 nil$) (cons$ ?v3 ?v4)) ) (and (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$ (fun_app$a less$ ?v3) ?v5) (fun_app$g (fun_app$h ?v2 (cons$ ?v3 ?v4)) (cons$ ?v5 ?v6))) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp$ less$) ?v4) ?v5) (fun_app$g (fun_app$h ?v2 ?v4) ?v5)) (fun_app$g (fun_app$h ?v2 (cons$ ?v3 ?v4)) (cons$ ?v3 ?v5))) )))) (fun_app$g (fun_app$h ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_list$)) (=> (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) false) ) (and (forall ((?v2 A$) (?v3 A_list$) (?v4 A$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (and (= ?v1 (cons$ ?v4 ?v5)) (fun_app$ (fun_app$a less$ ?v2) ?v4))) false) ) (forall ((?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (and (= ?v1 (cons$ ?v2 ?v4)) (fun_app$g (fun_app$h (lexordp$ less$) ?v3) ?v4))) false) )))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_list$)) (=> (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) false) ) (and (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$ (fun_app$a less$ ?v2) ?v3))) false) ) (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$ (fun_app$a less$ ?v2) ?v3)) (and (not (fun_app$ (fun_app$a less$ ?v3) ?v2)) (fun_app$g (fun_app$h (lexordp$ less$) ?v4) ?v5))))) false) )))) false) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (fun_app$g (fun_app$h (lexordp$ less$) nil$) (cons$ ?v0 ?v1)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) ?v1) (or (exists ((?v2 A_list$)) (and (= ?v0 nil$) (= ?v1 ?v2)) ) (or (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$ (fun_app$a less$ ?v2) ?v3))) ) (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$ (fun_app$a less$ ?v2) ?v3)) (and (not (fun_app$ (fun_app$a less$ ?v3) ?v2)) (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v4) ?v5))))) )))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) ?v1) (and (forall ((?v2 A_list$)) (=> (and (= ?v0 nil$) (= ?v1 ?v2)) false) ) (and (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$ (fun_app$a less$ ?v2) ?v3))) false) ) (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$ (fun_app$a less$ ?v2) ?v3)) (and (not (fun_app$ (fun_app$a less$ ?v3) ?v2)) (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v4) ?v5))))) false) )))) false) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (! (= (fun_app$i (fun_app$j (lexordp$a ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4)) (or (fun_app$g (fun_app$h ?v0 ?v1) ?v3) (and (not (fun_app$g (fun_app$h ?v0 ?v3) ?v1)) (fun_app$i (fun_app$j (lexordp$a ?v0) ?v2) ?v4)))) :pattern ((fun_app$i (fun_app$j (lexordp$a ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4)) (or (fun_app$ (fun_app$a ?v0 ?v1) ?v3) (and (not (fun_app$ (fun_app$a ?v0 ?v3) ?v1)) (fun_app$g (fun_app$h (lexordp$ ?v0) ?v2) ?v4)))) :pattern ((fun_app$g (fun_app$h (lexordp$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (! (= (fun_app$i (fun_app$j (lexordp$a ?v0) ?v1) nil$a) false) :pattern ((fun_app$j (lexordp$a ?v0) ?v1)))))
(assert (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_list$)) (! (= (fun_app$l (fun_app$k (lexordp$b ?v0) ?v1) nil$b) false) :pattern ((fun_app$k (lexordp$b ?v0) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp$ ?v0) ?v1) nil$) false) :pattern ((fun_app$h (lexordp$ ?v0) ?v1)))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (! (= (fun_app$i (fun_app$j (lexordp$a ?v0) nil$a) ?v1) (not (= ?v1 nil$a))) :pattern ((fun_app$i (fun_app$j (lexordp$a ?v0) nil$a) ?v1)))))
(assert (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_list$)) (! (= (fun_app$l (fun_app$k (lexordp$b ?v0) nil$b) ?v1) (not (= ?v1 nil$b))) :pattern ((fun_app$l (fun_app$k (lexordp$b ?v0) nil$b) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp$ ?v0) nil$) ?v1) (not (= ?v1 nil$))) :pattern ((fun_app$g (fun_app$h (lexordp$ ?v0) nil$) ?v1)))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (! (= (fun_app$i (fun_app$j (lexordp_eq$a ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4)) (or (fun_app$g (fun_app$h ?v0 ?v1) ?v3) (and (not (fun_app$g (fun_app$h ?v0 ?v3) ?v1)) (fun_app$i (fun_app$j (lexordp_eq$a ?v0) ?v2) ?v4)))) :pattern ((fun_app$i (fun_app$j (lexordp_eq$a ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4)) (or (fun_app$ (fun_app$a ?v0 ?v1) ?v3) (and (not (fun_app$ (fun_app$a ?v0 ?v3) ?v1)) (fun_app$g (fun_app$h (lexordp_eq$ ?v0) ?v2) ?v4)))) :pattern ((fun_app$g (fun_app$h (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (! (= (fun_app$i (fun_app$j (lexordp_eq$a ?v0) nil$a) ?v1) true) :pattern ((fun_app$i (fun_app$j (lexordp_eq$a ?v0) nil$a) ?v1)))))
(assert (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_list$)) (! (= (fun_app$l (fun_app$k (lexordp_eq$b ?v0) nil$b) ?v1) true) :pattern ((fun_app$l (fun_app$k (lexordp_eq$b ?v0) nil$b) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp_eq$ ?v0) nil$) ?v1) true) :pattern ((fun_app$g (fun_app$h (lexordp_eq$ ?v0) nil$) ?v1)))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (! (= (fun_app$i (fun_app$j (lexordp_eq$a ?v0) ?v1) nil$a) (= ?v1 nil$a)) :pattern ((fun_app$j (lexordp_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_list$)) (! (= (fun_app$l (fun_app$k (lexordp_eq$b ?v0) ?v1) nil$b) (= ?v1 nil$b)) :pattern ((fun_app$k (lexordp_eq$b ?v0) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp_eq$ ?v0) ?v1) nil$) (= ?v1 nil$)) :pattern ((fun_app$h (lexordp_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod$) (?v2 A_b_prod_list$)) (! (= (fun_app$l (fun_app$k (lexordp_eq$b ?v0) (cons$b ?v1 ?v2)) nil$b) false) :pattern ((fun_app$k (lexordp_eq$b ?v0) (cons$b ?v1 ?v2))))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (! (= (fun_app$i (fun_app$j (lexordp_eq$a ?v0) (cons$a ?v1 ?v2)) nil$a) false) :pattern ((fun_app$j (lexordp_eq$a ?v0) (cons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) nil$) false) :pattern ((fun_app$h (lexordp_eq$ ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp$ less$) (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (or (fun_app$ (fun_app$a less$ ?v0) ?v2) (and (not (fun_app$ (fun_app$a less$ ?v2) ?v0)) (fun_app$g (fun_app$h (lexordp$ less$) ?v1) ?v3)))) :pattern ((fun_app$g (fun_app$h (lexordp$ less$) (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp_eq$ less$) (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (or (fun_app$ (fun_app$a less$ ?v0) ?v2) (and (not (fun_app$ (fun_app$a less$ ?v2) ?v0)) (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v1) ?v3)))) :pattern ((fun_app$g (fun_app$h (lexordp_eq$ less$) (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp$ less$) nil$) ?v0) (not (= ?v0 nil$))) :pattern ((fun_app$g (fun_app$h (lexordp$ less$) nil$) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp$ less$) ?v0) nil$) false) :pattern ((fun_app$h (lexordp$ less$) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp_eq$ less$) ?v0) nil$) (= ?v0 nil$)) :pattern ((fun_app$h (lexordp_eq$ less$) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp_eq$ less$) nil$) ?v0) true) :pattern ((fun_app$g (fun_app$h (lexordp_eq$ less$) nil$) ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$g (fun_app$h (lexordp_eq$ less$) (cons$ ?v0 ?v1)) nil$) false) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (= (fun_app$l (fun_app$k (lexordp$b ?v0) ?v1) ?v2) (or (exists ((?v3 A_b_prod$) (?v4 A_b_prod_list$)) (and (= ?v1 nil$b) (= ?v2 (cons$b ?v3 ?v4))) ) (or (exists ((?v3 A_b_prod$) (?v4 A_b_prod$) (?v5 A_b_prod_list$) (?v6 A_b_prod_list$)) (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (fun_app$m (fun_app$n ?v0 ?v3) ?v4))) ) (exists ((?v3 A_b_prod$) (?v4 A_b_prod$) (?v5 A_b_prod_list$) (?v6 A_b_prod_list$)) (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (and (not (fun_app$m (fun_app$n ?v0 ?v3) ?v4)) (and (not (fun_app$m (fun_app$n ?v0 ?v4) ?v3)) (fun_app$l (fun_app$k (lexordp$b ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (= (fun_app$i (fun_app$j (lexordp$a ?v0) ?v1) ?v2) (or (exists ((?v3 A_list$) (?v4 A_list_list$)) (and (= ?v1 nil$a) (= ?v2 (cons$a ?v3 ?v4))) ) (or (exists ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (fun_app$g (fun_app$h ?v0 ?v3) ?v4))) ) (exists ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (not (fun_app$g (fun_app$h ?v0 ?v3) ?v4)) (and (not (fun_app$g (fun_app$h ?v0 ?v4) ?v3)) (fun_app$i (fun_app$j (lexordp$a ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$g (fun_app$h (lexordp$ ?v0) ?v1) ?v2) (or (exists ((?v3 A$) (?v4 A_list$)) (and (= ?v1 nil$) (= ?v2 (cons$ ?v3 ?v4))) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) ) (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$ (fun_app$a ?v0 ?v3) ?v4)) (and (not (fun_app$ (fun_app$a ?v0 ?v4) ?v3)) (fun_app$g (fun_app$h (lexordp$ ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (= (fun_app$l (fun_app$k (lexordp_eq$b ?v0) ?v1) ?v2) (or (exists ((?v3 A_b_prod_list$)) (and (= ?v1 nil$b) (= ?v2 ?v3)) ) (or (exists ((?v3 A_b_prod$) (?v4 A_b_prod$) (?v5 A_b_prod_list$) (?v6 A_b_prod_list$)) (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (fun_app$m (fun_app$n ?v0 ?v3) ?v4))) ) (exists ((?v3 A_b_prod$) (?v4 A_b_prod$) (?v5 A_b_prod_list$) (?v6 A_b_prod_list$)) (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (and (not (fun_app$m (fun_app$n ?v0 ?v3) ?v4)) (and (not (fun_app$m (fun_app$n ?v0 ?v4) ?v3)) (fun_app$l (fun_app$k (lexordp_eq$b ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (= (fun_app$i (fun_app$j (lexordp_eq$a ?v0) ?v1) ?v2) (or (exists ((?v3 A_list_list$)) (and (= ?v1 nil$a) (= ?v2 ?v3)) ) (or (exists ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (fun_app$g (fun_app$h ?v0 ?v3) ?v4))) ) (exists ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (not (fun_app$g (fun_app$h ?v0 ?v3) ?v4)) (and (not (fun_app$g (fun_app$h ?v0 ?v4) ?v3)) (fun_app$i (fun_app$j (lexordp_eq$a ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$g (fun_app$h (lexordp_eq$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_list$)) (and (= ?v1 nil$) (= ?v2 ?v3)) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) ) (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$ (fun_app$a ?v0 ?v3) ?v4)) (and (not (fun_app$ (fun_app$a ?v0 ?v4) ?v3)) (fun_app$g (fun_app$h (lexordp_eq$ ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (=> (and (fun_app$l (fun_app$k (lexordp$b ?v0) ?v1) ?v2) (and (forall ((?v3 A_b_prod$) (?v4 A_b_prod_list$)) (=> (and (= ?v1 nil$b) (= ?v2 (cons$b ?v3 ?v4))) false) ) (and (forall ((?v3 A_b_prod$) (?v4 A_b_prod$) (?v5 A_b_prod_list$) (?v6 A_b_prod_list$)) (=> (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (fun_app$m (fun_app$n ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_b_prod$) (?v4 A_b_prod$) (?v5 A_b_prod_list$) (?v6 A_b_prod_list$)) (=> (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (and (not (fun_app$m (fun_app$n ?v0 ?v3) ?v4)) (and (not (fun_app$m (fun_app$n ?v0 ?v4) ?v3)) (fun_app$l (fun_app$k (lexordp$b ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$i (fun_app$j (lexordp$a ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (=> (and (= ?v1 nil$a) (= ?v2 (cons$a ?v3 ?v4))) false) ) (and (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (fun_app$g (fun_app$h ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (not (fun_app$g (fun_app$h ?v0 ?v3) ?v4)) (and (not (fun_app$g (fun_app$h ?v0 ?v4) ?v3)) (fun_app$i (fun_app$j (lexordp$a ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp$ ?v0) ?v1) ?v2) (and (forall ((?v3 A$) (?v4 A_list$)) (=> (and (= ?v1 nil$) (= ?v2 (cons$ ?v3 ?v4))) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$ (fun_app$a ?v0 ?v3) ?v4)) (and (not (fun_app$ (fun_app$a ?v0 ?v4) ?v3)) (fun_app$g (fun_app$h (lexordp$ ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (=> (and (fun_app$l (fun_app$k (lexordp_eq$b ?v0) ?v1) ?v2) (and (forall ((?v3 A_b_prod_list$)) (=> (and (= ?v1 nil$b) (= ?v2 ?v3)) false) ) (and (forall ((?v3 A_b_prod$) (?v4 A_b_prod$) (?v5 A_b_prod_list$) (?v6 A_b_prod_list$)) (=> (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (fun_app$m (fun_app$n ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_b_prod$) (?v4 A_b_prod$) (?v5 A_b_prod_list$) (?v6 A_b_prod_list$)) (=> (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (and (not (fun_app$m (fun_app$n ?v0 ?v3) ?v4)) (and (not (fun_app$m (fun_app$n ?v0 ?v4) ?v3)) (fun_app$l (fun_app$k (lexordp_eq$b ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$i (fun_app$j (lexordp_eq$a ?v0) ?v1) ?v2) (and (forall ((?v3 A_list_list$)) (=> (and (= ?v1 nil$a) (= ?v2 ?v3)) false) ) (and (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (fun_app$g (fun_app$h ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (not (fun_app$g (fun_app$h ?v0 ?v3) ?v4)) (and (not (fun_app$g (fun_app$h ?v0 ?v4) ?v3)) (fun_app$i (fun_app$j (lexordp_eq$a ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp_eq$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$)) (=> (and (= ?v1 nil$) (= ?v2 ?v3)) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$ (fun_app$a ?v0 ?v3) ?v4)) (and (not (fun_app$ (fun_app$a ?v0 ?v4) ?v3)) (fun_app$g (fun_app$h (lexordp_eq$ ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod$) (?v2 A_b_prod_list$)) (fun_app$l (fun_app$k (lexordp$b ?v0) nil$b) (cons$b ?v1 ?v2)) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (fun_app$i (fun_app$j (lexordp$a ?v0) nil$a) (cons$a ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$)) (fun_app$g (fun_app$h (lexordp$ ?v0) nil$) (cons$ ?v1 ?v2)) ))
(assert (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$)) (not (= nil$b (cons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (not (= nil$a (cons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (not (= nil$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (not (= (cons$a ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (not (= (cons$ ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 A_b_prod_list_a_b_prod_list_bool_fun_fun$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (=> (and (fun_app$l (fun_app$k ?v0 nil$b) nil$b) (and (forall ((?v3 A_b_prod$) (?v4 A_b_prod_list$)) (fun_app$l (fun_app$k ?v0 (cons$b ?v3 ?v4)) nil$b) ) (and (forall ((?v3 A_b_prod$) (?v4 A_b_prod_list$)) (fun_app$l (fun_app$k ?v0 nil$b) (cons$b ?v3 ?v4)) ) (forall ((?v3 A_b_prod$) (?v4 A_b_prod_list$) (?v5 A_b_prod$) (?v6 A_b_prod_list$)) (=> (fun_app$l (fun_app$k ?v0 ?v4) ?v6) (fun_app$l (fun_app$k ?v0 (cons$b ?v3 ?v4)) (cons$b ?v5 ?v6))) )))) (fun_app$l (fun_app$k ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_b_prod_list_a_list_bool_fun_fun$) (?v1 A_b_prod_list$) (?v2 A_list$)) (=> (and (fun_app$g (fun_app$o ?v0 nil$b) nil$) (and (forall ((?v3 A_b_prod$) (?v4 A_b_prod_list$)) (fun_app$g (fun_app$o ?v0 (cons$b ?v3 ?v4)) nil$) ) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$g (fun_app$o ?v0 nil$b) (cons$ ?v3 ?v4)) ) (forall ((?v3 A_b_prod$) (?v4 A_b_prod_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$g (fun_app$o ?v0 ?v4) ?v6) (fun_app$g (fun_app$o ?v0 (cons$b ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$g (fun_app$o ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_b_prod_list_a_list_list_bool_fun_fun$) (?v1 A_b_prod_list$) (?v2 A_list_list$)) (=> (and (fun_app$i (fun_app$p ?v0 nil$b) nil$a) (and (forall ((?v3 A_b_prod$) (?v4 A_b_prod_list$)) (fun_app$i (fun_app$p ?v0 (cons$b ?v3 ?v4)) nil$a) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$i (fun_app$p ?v0 nil$b) (cons$a ?v3 ?v4)) ) (forall ((?v3 A_b_prod$) (?v4 A_b_prod_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$i (fun_app$p ?v0 ?v4) ?v6) (fun_app$i (fun_app$p ?v0 (cons$b ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$i (fun_app$p ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_a_b_prod_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_b_prod_list$)) (=> (and (fun_app$l (fun_app$q ?v0 nil$) nil$b) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$l (fun_app$q ?v0 (cons$ ?v3 ?v4)) nil$b) ) (and (forall ((?v3 A_b_prod$) (?v4 A_b_prod_list$)) (fun_app$l (fun_app$q ?v0 nil$) (cons$b ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_b_prod$) (?v6 A_b_prod_list$)) (=> (fun_app$l (fun_app$q ?v0 ?v4) ?v6) (fun_app$l (fun_app$q ?v0 (cons$ ?v3 ?v4)) (cons$b ?v5 ?v6))) )))) (fun_app$l (fun_app$q ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_a_list_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (=> (and (fun_app$i (fun_app$r ?v0 nil$) nil$a) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$i (fun_app$r ?v0 (cons$ ?v3 ?v4)) nil$a) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$i (fun_app$r ?v0 nil$) (cons$a ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$i (fun_app$r ?v0 ?v4) ?v6) (fun_app$i (fun_app$r ?v0 (cons$ ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$i (fun_app$r ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_b_prod_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_b_prod_list$)) (=> (and (fun_app$l (fun_app$s ?v0 nil$a) nil$b) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$l (fun_app$s ?v0 (cons$a ?v3 ?v4)) nil$b) ) (and (forall ((?v3 A_b_prod$) (?v4 A_b_prod_list$)) (fun_app$l (fun_app$s ?v0 nil$a) (cons$b ?v3 ?v4)) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_b_prod$) (?v6 A_b_prod_list$)) (=> (fun_app$l (fun_app$s ?v0 ?v4) ?v6) (fun_app$l (fun_app$s ?v0 (cons$a ?v3 ?v4)) (cons$b ?v5 ?v6))) )))) (fun_app$l (fun_app$s ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list$)) (=> (and (fun_app$g (fun_app$t ?v0 nil$a) nil$) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$g (fun_app$t ?v0 (cons$a ?v3 ?v4)) nil$) ) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$g (fun_app$t ?v0 nil$a) (cons$ ?v3 ?v4)) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$g (fun_app$t ?v0 ?v4) ?v6) (fun_app$g (fun_app$t ?v0 (cons$a ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$g (fun_app$t ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$i (fun_app$j ?v0 nil$a) nil$a) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$i (fun_app$j ?v0 (cons$a ?v3 ?v4)) nil$a) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$i (fun_app$j ?v0 nil$a) (cons$a ?v3 ?v4)) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$i (fun_app$j ?v0 ?v4) ?v6) (fun_app$i (fun_app$j ?v0 (cons$a ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$i (fun_app$j ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$g (fun_app$h ?v0 nil$) nil$) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$g (fun_app$h ?v0 (cons$ ?v3 ?v4)) nil$) ) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$g (fun_app$h ?v0 nil$) (cons$ ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$g (fun_app$h ?v0 ?v4) ?v6) (fun_app$g (fun_app$h ?v0 (cons$ ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$g (fun_app$h ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list_bool_fun$)) (=> (and (not (= ?v0 nil$b)) (and (forall ((?v2 A_b_prod$)) (fun_app$l ?v1 (cons$b ?v2 nil$b)) ) (forall ((?v2 A_b_prod$) (?v3 A_b_prod_list$)) (=> (and (not (= ?v3 nil$b)) (fun_app$l ?v1 ?v3)) (fun_app$l ?v1 (cons$b ?v2 ?v3))) ))) (fun_app$l ?v1 ?v0)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$a)) (and (forall ((?v2 A_list$)) (fun_app$i ?v1 (cons$a ?v2 nil$a)) ) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (not (= ?v3 nil$a)) (fun_app$i ?v1 ?v3)) (fun_app$i ?v1 (cons$a ?v2 ?v3))) ))) (fun_app$i ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 A$)) (fun_app$g ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$g ?v1 ?v3)) (fun_app$g ?v1 (cons$ ?v2 ?v3))) ))) (fun_app$g ?v1 ?v0)) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod$) (?v2 A_b_prod_list$)) (=> (= ?v0 (cons$b ?v1 ?v2)) (not (= ?v0 nil$b))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$)) (=> (= ?v0 (cons$a ?v1 ?v2)) (not (= ?v0 nil$a))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) (not (= ?v0 nil$))) ))
(assert (forall ((?v0 A_b_prod_list$)) (=> (and (=> (= ?v0 nil$b) false) (forall ((?v1 A_b_prod$) (?v2 A_b_prod_list$)) (=> (= ?v0 (cons$b ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (forall ((?v1 A_list$) (?v2 A_list_list$)) (=> (= ?v0 (cons$a ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A$) (?v2 A_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_b_prod_list_list$)) (=> (and (=> (= ?v0 nil$c) false) (and (forall ((?v1 A_b_prod_list_list$)) (=> (= ?v0 (cons$c nil$b ?v1)) false) ) (forall ((?v1 A_b_prod$) (?v2 A_b_prod_list$) (?v3 A_b_prod_list_list$)) (=> (= ?v0 (cons$c (cons$b ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 A_list_list_list$)) (=> (and (=> (= ?v0 nil$d) false) (and (forall ((?v1 A_list_list_list$)) (=> (= ?v0 (cons$d nil$a ?v1)) false) ) (forall ((?v1 A_list$) (?v2 A_list_list$) (?v3 A_list_list_list$)) (=> (= ?v0 (cons$d (cons$a ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 A_list_list$)) (=> (= ?v0 (cons$a nil$ ?v1)) false) ) (forall ((?v1 A$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= ?v0 (cons$a (cons$ ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 A_b_prod_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 A_b_prod$)) (=> (= ?v0 (cons$b ?v1 nil$b)) false) ) (forall ((?v1 A_b_prod$) (?v2 A_b_prod$) (?v3 A_b_prod_list$)) (=> (= ?v0 (cons$b ?v1 (cons$b ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 A_list$)) (=> (= ?v0 (cons$a ?v1 nil$a)) false) ) (forall ((?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= ?v0 (cons$a ?v1 (cons$a ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 A$)) (=> (= ?v0 (cons$ ?v1 nil$)) false) ) (forall ((?v1 A$) (?v2 A$) (?v3 A_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (=> (not (= ?v0 nil$a)) false)) false) ))
(assert (forall ((?v0 A_b_prod_list$)) (=> (and (=> (= ?v0 nil$b) false) (=> (not (= ?v0 nil$b)) false)) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false) ))
(assert (forall ((?v0 A_b_prod_list$)) (= (not (= ?v0 nil$b)) (exists ((?v1 A_b_prod$) (?v2 A_b_prod_list$)) (= ?v0 (cons$b ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_list_list$)) (= (not (= ?v0 nil$a)) (exists ((?v1 A_list$) (?v2 A_list_list$)) (= ?v0 (cons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 A$) (?v2 A_list$)) (= ?v0 (cons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (fun_app$g (fun_app$h ?v0 ?v1) ?v2) (fun_app$i (fun_app$j (lexordp$a ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$g (fun_app$h (lexordp$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (and (not (fun_app$g (fun_app$h ?v0 ?v1) ?v2)) (and (not (fun_app$g (fun_app$h ?v0 ?v2) ?v1)) (fun_app$i (fun_app$j (lexordp$a ?v0) ?v3) ?v4))) (fun_app$i (fun_app$j (lexordp$a ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (not (fun_app$ (fun_app$a ?v0 ?v1) ?v2)) (and (not (fun_app$ (fun_app$a ?v0 ?v2) ?v1)) (fun_app$g (fun_app$h (lexordp$ ?v0) ?v3) ?v4))) (fun_app$g (fun_app$h (lexordp$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (fun_app$g (fun_app$h ?v0 ?v1) ?v2) (fun_app$i (fun_app$j (lexordp_eq$a ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$g (fun_app$h (lexordp_eq$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (and (not (fun_app$g (fun_app$h ?v0 ?v1) ?v2)) (and (not (fun_app$g (fun_app$h ?v0 ?v2) ?v1)) (fun_app$i (fun_app$j (lexordp_eq$a ?v0) ?v3) ?v4))) (fun_app$i (fun_app$j (lexordp_eq$a ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (not (fun_app$ (fun_app$a ?v0 ?v1) ?v2)) (and (not (fun_app$ (fun_app$a ?v0 ?v2) ?v1)) (fun_app$g (fun_app$h (lexordp_eq$ ?v0) ?v3) ?v4))) (fun_app$g (fun_app$h (lexordp_eq$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (fun_app$i (fun_app$j (lexordp_eq$a ?v0) nil$a) ?v1) ))
(assert (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_list$)) (fun_app$l (fun_app$k (lexordp_eq$b ?v0) nil$b) ?v1) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (fun_app$g (fun_app$h (lexordp_eq$ ?v0) nil$) ?v1) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (=> (forall ((?v2 A$)) (not (fun_app$ (fun_app$a ?v0 ?v2) ?v2)) ) (not (fun_app$g (fun_app$h (lexordp$ ?v0) ?v1) ?v1))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (fun_app$g (fun_app$h (lexordp_eq$ ?v0) ?v1) ?v1) ))
(assert (forall ((?v0 A$)) (! (= (greaterThan$ less$ ?v0) (collect$ (fun_app$a less$ ?v0))) :pattern ((greaterThan$ less$ ?v0)))))
(assert (forall ((?v0 A$)) (= (lessThan$ less$ ?v0) (collect$ (uua$ ?v0))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= ?v0 nil$)) (fun_app$g (fun_app$h (lexordp$ less$) ?v1) (fun_app$u (append$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_list$)) (= ?v1 (fun_app$u (append$ ?v0) (cons$ ?v2 ?v3))) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (fun_app$ (fun_app$a less$ ?v3) ?v4) (and (= ?v0 (fun_app$u (append$ ?v2) (cons$ ?v3 ?v5))) (= ?v1 (fun_app$u (append$ ?v2) (cons$ ?v4 ?v6))))) ))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$g (fun_app$h (lexordp$ less$) (fun_app$u (append$ ?v2) (cons$ ?v0 ?v3))) (fun_app$u (append$ ?v2) (cons$ ?v1 ?v4)))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp$ less$) (fun_app$u (append$ ?v0) ?v1)) (fun_app$u (append$ ?v0) ?v2)) (forall ((?v3 A$)) (not (fun_app$ (fun_app$a less$ ?v3) ?v3)) )) (fun_app$g (fun_app$h (lexordp$ less$) ?v1) ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (fun_app$g (fun_app$h (lexordp$ less$) ?v0) ?v1) (fun_app$g (fun_app$h (lexordp$ less$) (fun_app$u (append$ ?v2) ?v0)) (fun_app$u (append$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$u (append$ (fun_app$u (append$ ?v0) ?v1)) ?v2) (fun_app$u (append$ ?v0) (fun_app$u (append$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (fun_app$u (append$ ?v0) ?v1) (fun_app$u (append$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (fun_app$u (append$ ?v0) ?v1) (fun_app$u (append$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$v (append$a ?v0) ?v1) ?v1) (= ?v0 nil$a)) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (= (= (fun_app$w (append$b ?v0) ?v1) ?v1) (= ?v0 nil$b)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$u (append$ ?v0) ?v1) ?v1) (= ?v0 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$v (append$a ?v0) ?v1) ?v0) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (= (= (fun_app$w (append$b ?v0) ?v1) ?v0) (= ?v1 nil$b)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$u (append$ ?v0) ?v1) ?v0) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= ?v0 (fun_app$v (append$a ?v1) ?v0)) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (= (= ?v0 (fun_app$w (append$b ?v1) ?v0)) (= ?v1 nil$b)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= ?v0 (fun_app$u (append$ ?v1) ?v0)) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= ?v0 (fun_app$v (append$a ?v0) ?v1)) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (= (= ?v0 (fun_app$w (append$b ?v0) ?v1)) (= ?v1 nil$b)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= ?v0 (fun_app$u (append$ ?v0) ?v1)) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= nil$a (fun_app$v (append$a ?v0) ?v1)) (and (= ?v0 nil$a) (= ?v1 nil$a))) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (= (= nil$b (fun_app$w (append$b ?v0) ?v1)) (and (= ?v0 nil$b) (= ?v1 nil$b))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= nil$ (fun_app$u (append$ ?v0) ?v1)) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$v (append$a ?v0) ?v1) nil$a) (and (= ?v0 nil$a) (= ?v1 nil$a))) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (= (= (fun_app$w (append$b ?v0) ?v1) nil$b) (and (= ?v0 nil$b) (= ?v1 nil$b))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$u (append$ ?v0) ?v1) nil$) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 A_list_list$)) (! (= (fun_app$v (append$a ?v0) nil$a) ?v0) :pattern ((append$a ?v0)))))
(assert (forall ((?v0 A_b_prod_list$)) (! (= (fun_app$w (append$b ?v0) nil$b) ?v0) :pattern ((append$b ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$u (append$ ?v0) nil$) ?v0) :pattern ((append$ ?v0)))))
(assert (forall ((?v0 A$) (?v1 A$)) (= (fun_app$b (member$ ?v0) (lessThan$ less$ ?v1)) (fun_app$ (fun_app$a less$ ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (= (fun_app$b (member$ ?v0) (greaterThan$ less$ ?v1)) (fun_app$ (fun_app$a less$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod$) (?v2 A_b_prod_list$) (?v3 A_b_prod$)) (= (= (fun_app$w (append$b ?v0) (cons$b ?v1 nil$b)) (fun_app$w (append$b ?v2) (cons$b ?v3 nil$b))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$)) (= (= (fun_app$v (append$a ?v0) (cons$a ?v1 nil$a)) (fun_app$v (append$a ?v2) (cons$a ?v3 nil$a))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$) (?v3 A$)) (= (= (fun_app$u (append$ ?v0) (cons$ ?v1 nil$)) (fun_app$u (append$ ?v2) (cons$ ?v3 nil$))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (fun_app$u (append$ ?v0) ?v1) ?v2) (= ?v3 (fun_app$u (append$ ?v1) ?v4))) (= (fun_app$u (append$ ?v0) ?v3) (fun_app$u (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (fun_app$u (append$ ?v0) ?v1) (fun_app$u (append$ ?v2) ?v3)) (exists ((?v4 A_list$)) (or (and (= ?v0 (fun_app$u (append$ ?v2) ?v4)) (= (fun_app$u (append$ ?v4) ?v1) ?v3)) (and (= (fun_app$u (append$ ?v0) ?v4) ?v2) (= ?v1 (fun_app$u (append$ ?v4) ?v3)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$)) (! (= (fun_app$v (append$a (cons$a ?v0 ?v1)) ?v2) (cons$a ?v0 (fun_app$v (append$a ?v1) ?v2))) :pattern ((fun_app$v (append$a (cons$a ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$)) (! (= (fun_app$u (append$ (cons$ ?v0 ?v1)) ?v2) (cons$ ?v0 (fun_app$u (append$ ?v1) ?v2))) :pattern ((fun_app$u (append$ (cons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (and (= (cons$a ?v0 ?v1) ?v2) (= ?v3 (fun_app$v (append$a ?v1) ?v4))) (= (cons$a ?v0 ?v3) (fun_app$v (append$a ?v2) ?v4))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (cons$ ?v0 ?v1) ?v2) (= ?v3 (fun_app$u (append$ ?v1) ?v4))) (= (cons$ ?v0 ?v3) (fun_app$u (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_list_list$)) (! (= (fun_app$v (append$a nil$a) ?v0) ?v0) :pattern ((fun_app$v (append$a nil$a) ?v0)))))
(assert (forall ((?v0 A_b_prod_list$)) (! (= (fun_app$w (append$b nil$b) ?v0) ?v0) :pattern ((fun_app$w (append$b nil$b) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$u (append$ nil$) ?v0) ?v0) :pattern ((fun_app$u (append$ nil$) ?v0)))))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$v (append$a nil$a) ?v1))) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$w (append$b nil$b) ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$u (append$ nil$) ?v1))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (fun_app$g (fun_app$h (lexordp$ ?v0) ?v1) ?v2) (fun_app$g (fun_app$h (lexordp$ ?v0) (fun_app$u (append$ ?v3) ?v1)) (fun_app$u (append$ ?v3) ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (and (fun_app$g (fun_app$h (lexordp$ ?v0) (fun_app$u (append$ ?v1) ?v2)) (fun_app$u (append$ ?v1) ?v3)) (forall ((?v4 A$)) (not (fun_app$ (fun_app$a ?v0 ?v4) ?v4)) )) (fun_app$g (fun_app$h (lexordp$ ?v0) ?v2) ?v3)) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$) (?v2 A_b_prod$) (?v3 A_b_prod_list$)) (= (= (fun_app$w (append$b ?v0) ?v1) (cons$b ?v2 ?v3)) (or (and (= ?v0 nil$b) (= ?v1 (cons$b ?v2 ?v3))) (exists ((?v4 A_b_prod_list$)) (and (= ?v0 (cons$b ?v2 ?v4)) (= (fun_app$w (append$b ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (fun_app$v (append$a ?v0) ?v1) (cons$a ?v2 ?v3)) (or (and (= ?v0 nil$a) (= ?v1 (cons$a ?v2 ?v3))) (exists ((?v4 A_list_list$)) (and (= ?v0 (cons$a ?v2 ?v4)) (= (fun_app$v (append$a ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (fun_app$u (append$ ?v0) ?v1) (cons$ ?v2 ?v3)) (or (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) (exists ((?v4 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (= (fun_app$u (append$ ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$) (?v3 A_b_prod_list$)) (= (= (cons$b ?v0 ?v1) (fun_app$w (append$b ?v2) ?v3)) (or (and (= ?v2 nil$b) (= (cons$b ?v0 ?v1) ?v3)) (exists ((?v4 A_b_prod_list$)) (and (= (cons$b ?v0 ?v4) ?v2) (= ?v1 (fun_app$w (append$b ?v4) ?v3))) ))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (= (= (cons$a ?v0 ?v1) (fun_app$v (append$a ?v2) ?v3)) (or (and (= ?v2 nil$a) (= (cons$a ?v0 ?v1) ?v3)) (exists ((?v4 A_list_list$)) (and (= (cons$a ?v0 ?v4) ?v2) (= ?v1 (fun_app$v (append$a ?v4) ?v3))) ))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (fun_app$u (append$ ?v2) ?v3)) (or (and (= ?v2 nil$) (= (cons$ ?v0 ?v1) ?v3)) (exists ((?v4 A_list$)) (and (= (cons$ ?v0 ?v4) ?v2) (= ?v1 (fun_app$u (append$ ?v4) ?v3))) ))) ))
(assert (forall ((?v0 A_b_prod_list$)) (=> (and (=> (= ?v0 nil$b) false) (forall ((?v1 A_b_prod_list$) (?v2 A_b_prod$)) (=> (= ?v0 (fun_app$w (append$b ?v1) (cons$b ?v2 nil$b))) false) )) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (forall ((?v1 A_list_list$) (?v2 A_list$)) (=> (= ?v0 (fun_app$v (append$a ?v1) (cons$a ?v2 nil$a))) false) )) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A_list$) (?v2 A$)) (=> (= ?v0 (fun_app$u (append$ ?v1) (cons$ ?v2 nil$))) false) )) false) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list_bool_fun$)) (=> (and (not (= ?v0 nil$b)) (and (forall ((?v2 A_b_prod$)) (fun_app$l ?v1 (cons$b ?v2 nil$b)) ) (forall ((?v2 A_b_prod$) (?v3 A_b_prod_list$)) (=> (and (not (= ?v3 nil$b)) (fun_app$l ?v1 ?v3)) (fun_app$l ?v1 (fun_app$w (append$b ?v3) (cons$b ?v2 nil$b)))) ))) (fun_app$l ?v1 ?v0)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$a)) (and (forall ((?v2 A_list$)) (fun_app$i ?v1 (cons$a ?v2 nil$a)) ) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (not (= ?v3 nil$a)) (fun_app$i ?v1 ?v3)) (fun_app$i ?v1 (fun_app$v (append$a ?v3) (cons$a ?v2 nil$a)))) ))) (fun_app$i ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 A$)) (fun_app$g ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$g ?v1 ?v3)) (fun_app$g ?v1 (fun_app$u (append$ ?v3) (cons$ ?v2 nil$)))) ))) (fun_app$g ?v1 ?v0)) ))
(assert (forall ((?v0 A_b_prod_list_bool_fun$) (?v1 A_b_prod_list$)) (=> (and (fun_app$l ?v0 nil$b) (forall ((?v2 A_b_prod$) (?v3 A_b_prod_list$)) (=> (fun_app$l ?v0 ?v3) (fun_app$l ?v0 (fun_app$w (append$b ?v3) (cons$b ?v2 nil$b)))) )) (fun_app$l ?v0 ?v1)) ))
(assert (forall ((?v0 A_list_list_bool_fun$) (?v1 A_list_list$)) (=> (and (fun_app$i ?v0 nil$a) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (fun_app$i ?v0 ?v3) (fun_app$i ?v0 (fun_app$v (append$a ?v3) (cons$a ?v2 nil$a)))) )) (fun_app$i ?v0 ?v1)) ))
(assert (forall ((?v0 A_list_bool_fun$) (?v1 A_list$)) (=> (and (fun_app$g ?v0 nil$) (forall ((?v2 A$) (?v3 A_list$)) (=> (fun_app$g ?v0 ?v3) (fun_app$g ?v0 (fun_app$u (append$ ?v3) (cons$ ?v2 nil$)))) )) (fun_app$g ?v0 ?v1)) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$) (?v5 A_list_list$)) (=> (fun_app$g (fun_app$h ?v0 ?v1) ?v2) (fun_app$i (fun_app$j (lexordp$a ?v0) (fun_app$v (append$a ?v3) (cons$a ?v1 ?v4))) (fun_app$v (append$a ?v3) (cons$a ?v2 ?v5)))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$) (?v5 A_list$)) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$g (fun_app$h (lexordp$ ?v0) (fun_app$u (append$ ?v3) (cons$ ?v1 ?v4))) (fun_app$u (append$ ?v3) (cons$ ?v2 ?v5)))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_a_list_bool_fun_fun$) (?v2 A_list_list$)) (=> (not (= ?v0 nil$a)) (fun_app$i (fun_app$j (lexordp$a ?v1) ?v2) (fun_app$v (append$a ?v2) ?v0))) ))
(assert (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_a_b_prod_bool_fun_fun$) (?v2 A_b_prod_list$)) (=> (not (= ?v0 nil$b)) (fun_app$l (fun_app$k (lexordp$b ?v1) ?v2) (fun_app$w (append$b ?v2) ?v0))) ))
(assert (forall ((?v0 A_list$) (?v1 A_a_bool_fun_fun$) (?v2 A_list$)) (=> (not (= ?v0 nil$)) (fun_app$g (fun_app$h (lexordp$ ?v1) ?v2) (fun_app$u (append$ ?v2) ?v0))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_a_list_fun$)) (! (= (bind$ (cons$a ?v0 ?v1) ?v2) (fun_app$u (append$ (fun_app$u ?v2 ?v0)) (bind$ ?v1 ?v2))) :pattern ((bind$ (cons$a ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_a_list_fun$)) (! (= (bind$a (cons$ ?v0 ?v1) ?v2) (fun_app$u (append$ (fun_app$x ?v2 ?v0)) (bind$a ?v1 ?v2))) :pattern ((bind$a (cons$ ?v0 ?v1) ?v2)))))
(assert (= (sublists$ nil$a) (cons$d nil$a nil$d)))
(assert (= (sublists$a nil$b) (cons$c nil$b nil$c)))
(assert (= (sublists$b nil$) (cons$a nil$ nil$a)))
(assert (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (keys$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) (fun_app$u (append$ (keys$ ?v1)) (cons$ ?v2 (keys$ ?v4)))) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))))
(assert (= (product_lists$ nil$d) (cons$d nil$a nil$d)))
(assert (= (product_lists$a nil$c) (cons$c nil$b nil$c)))
(assert (= (product_lists$b nil$a) (cons$a nil$ nil$a)))
(assert (forall ((?v0 A_a_list_list_fun$)) (! (= (bind$b nil$ ?v0) nil$a) :pattern ((bind$b nil$ ?v0)))))
(assert (forall ((?v0 A_a_b_prod_list_fun$)) (! (= (bind$c nil$ ?v0) nil$b) :pattern ((bind$c nil$ ?v0)))))
(assert (forall ((?v0 A_list_a_list_fun$)) (! (= (bind$ nil$a ?v0) nil$) :pattern ((bind$ nil$a ?v0)))))
(assert (forall ((?v0 A_list_a_list_list_fun$)) (! (= (bind$d nil$a ?v0) nil$a) :pattern ((bind$d nil$a ?v0)))))
(assert (forall ((?v0 A_list_a_b_prod_list_fun$)) (! (= (bind$e nil$a ?v0) nil$b) :pattern ((bind$e nil$a ?v0)))))
(assert (forall ((?v0 A_b_prod_a_list_fun$)) (! (= (bind$f nil$b ?v0) nil$) :pattern ((bind$f nil$b ?v0)))))
(assert (forall ((?v0 A_b_prod_a_list_list_fun$)) (! (= (bind$g nil$b ?v0) nil$a) :pattern ((bind$g nil$b ?v0)))))
(assert (forall ((?v0 A_b_prod_a_b_prod_list_fun$)) (! (= (bind$h nil$b ?v0) nil$b) :pattern ((bind$h nil$b ?v0)))))
(assert (forall ((?v0 A_a_list_fun$)) (! (= (bind$a nil$ ?v0) nil$) :pattern ((bind$a nil$ ?v0)))))
(assert (= (keys$ empty$) nil$))
(assert (forall ((?v0 A_b_rbt$)) (=> (not (= ?v0 empty$)) (not (= (keys$ ?v0) nil$))) ))
(assert (forall ((?v0 A$) (?v1 A_b_rbt$)) (= (fun_app$f (rbt_greater$ less$ ?v0) ?v1) (forall ((?v2 A$)) (=> (fun_app$b (member$ ?v2) (set$ (keys$ ?v1))) (fun_app$ (fun_app$a less$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 A$) (?v1 A_b_rbt$)) (= (fun_app$f (rbt_less$ less$ ?v0) ?v1) (forall ((?v2 A$)) (=> (fun_app$b (member$ ?v2) (set$ (keys$ ?v1))) (fun_app$ (fun_app$a less$ ?v2) ?v0)) )) ))
(assert (forall ((?v0 A_b_rbt$)) (=> (fun_app$f (rbt_sorted$ less$) ?v0) (distinct$ (keys$ ?v0))) ))
(assert (forall ((?v0 A_list_list$)) (= (not (distinct$a ?v0)) (exists ((?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (and (member$a ?v2 (set$a ?v1)) (and (distinct$a ?v1) (= ?v0 (fun_app$v (append$a ?v1) (cons$a ?v2 ?v3))))) )) ))
(assert (forall ((?v0 A_list$)) (= (not (distinct$ ?v0)) (exists ((?v1 A_list$) (?v2 A$) (?v3 A_list$)) (and (fun_app$b (member$ ?v2) (set$ ?v1)) (and (distinct$ ?v1) (= ?v0 (fun_app$u (append$ ?v1) (cons$ ?v2 ?v3))))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (member$a ?v0 (set$a (cons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (fun_app$b (member$ ?v0) (set$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$)) (=> (member$a ?v0 (set$a ?v1)) (member$a ?v0 (set$a (cons$a ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$)) (=> (fun_app$b (member$ ?v0) (set$ ?v1)) (fun_app$b (member$ ?v0) (set$ (cons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (=> (and (member$a ?v0 (set$a ?v1)) (and (forall ((?v2 A_list_list$)) (=> (= ?v1 (cons$a ?v0 ?v2)) false) ) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (= ?v1 (cons$a ?v2 ?v3)) (member$a ?v0 (set$a ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (=> (and (fun_app$b (member$ ?v0) (set$ ?v1)) (and (forall ((?v2 A_list$)) (=> (= ?v1 (cons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (= ?v1 (cons$ ?v2 ?v3)) (fun_app$b (member$ ?v0) (set$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_list$)) (=> (member$a ?v0 (set$a (cons$a ?v1 ?v2))) (or (= ?v0 ?v1) (member$a ?v0 (set$a ?v2)))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$)) (=> (fun_app$b (member$ ?v0) (set$ (cons$ ?v1 ?v2))) (or (= ?v0 ?v1) (fun_app$b (member$ ?v0) (set$ ?v2)))) ))
(assert (= (distinct$a nil$a) true))
(assert (= (distinct$b nil$b) true))
(assert (= (distinct$ nil$) true))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_list$)) (! (= (distinct$a (cons$a ?v0 (cons$a ?v1 ?v2))) (and (not (= ?v0 ?v1)) (and (distinct$a (cons$a ?v0 ?v2)) (distinct$a (cons$a ?v1 ?v2))))) :pattern ((cons$a ?v0 (cons$a ?v1 ?v2))))))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$)) (! (= (distinct$ (cons$ ?v0 (cons$ ?v1 ?v2))) (and (not (= ?v0 ?v1)) (and (distinct$ (cons$ ?v0 ?v2)) (distinct$ (cons$ ?v1 ?v2))))) :pattern ((cons$ ?v0 (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (! (= (distinct$a (cons$a ?v0 ?v1)) (and (not (member$a ?v0 (set$a ?v1))) (distinct$a ?v1))) :pattern ((cons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (distinct$ (cons$ ?v0 ?v1)) (and (not (fun_app$b (member$ ?v0) (set$ ?v1))) (distinct$ ?v1))) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_b_prod$)) (distinct$b (cons$b ?v0 nil$b)) ))
(assert (forall ((?v0 A_list$)) (distinct$a (cons$a ?v0 nil$a)) ))
(assert (forall ((?v0 A$)) (distinct$ (cons$ ?v0 nil$)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (=> (member$a ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (= ?v1 (fun_app$v (append$a ?v2) (cons$a ?v0 ?v3))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (=> (fun_app$b (member$ ?v0) (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (= ?v1 (fun_app$u (append$ ?v2) (cons$ ?v0 ?v3))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (=> (member$a ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (and (= ?v1 (fun_app$v (append$a ?v2) (cons$a ?v0 ?v3))) (not (member$a ?v0 (set$a ?v3)))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (=> (fun_app$b (member$ ?v0) (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (and (= ?v1 (fun_app$u (append$ ?v2) (cons$ ?v0 ?v3))) (not (fun_app$b (member$ ?v0) (set$ ?v3)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (=> (member$a ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (and (= ?v1 (fun_app$v (append$a ?v2) (cons$a ?v0 ?v3))) (not (member$a ?v0 (set$a ?v2)))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (=> (fun_app$b (member$ ?v0) (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (and (= ?v1 (fun_app$u (append$ ?v2) (cons$ ?v0 ?v3))) (not (fun_app$b (member$ ?v0) (set$ ?v2)))) )) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (exists ((?v2 A_list$)) (and (member$a ?v2 (set$a ?v0)) (fun_app$g ?v1 ?v2)) ) (exists ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (and (= ?v0 (fun_app$v (append$a ?v2) (cons$a ?v3 ?v4))) (fun_app$g ?v1 ?v3)) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (exists ((?v2 A$)) (and (fun_app$b (member$ ?v2) (set$ ?v0)) (fun_app$ ?v1 ?v2)) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (and (= ?v0 (fun_app$u (append$ ?v2) (cons$ ?v3 ?v4))) (fun_app$ ?v1 ?v3)) )) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (exists ((?v2 A_list$)) (and (member$a ?v2 (set$a ?v0)) (fun_app$g ?v1 ?v2)) ) (exists ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (and (= ?v0 (fun_app$v (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$g ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$a ?v5 (set$a ?v4)) (not (fun_app$g ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (exists ((?v2 A$)) (and (fun_app$b (member$ ?v2) (set$ ?v0)) (fun_app$ ?v1 ?v2)) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (and (= ?v0 (fun_app$u (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A$)) (=> (fun_app$b (member$ ?v5) (set$ ?v4)) (not (fun_app$ ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (exists ((?v2 A_list$)) (and (member$a ?v2 (set$a ?v0)) (fun_app$g ?v1 ?v2)) ) (exists ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (and (= ?v0 (fun_app$v (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$g ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$a ?v5 (set$a ?v2)) (not (fun_app$g ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (exists ((?v2 A$)) (and (fun_app$b (member$ ?v2) (set$ ?v0)) (fun_app$ ?v1 ?v2)) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (and (= ?v0 (fun_app$u (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A$)) (=> (fun_app$b (member$ ?v5) (set$ ?v2)) (not (fun_app$ ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (and (exists ((?v2 A_list$)) (and (member$a ?v2 (set$a ?v0)) (fun_app$g ?v1 ?v2)) ) (forall ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (=> (and (= ?v0 (fun_app$v (append$a ?v2) (cons$a ?v3 ?v4))) (fun_app$g ?v1 ?v3)) false) )) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (and (exists ((?v2 A$)) (and (fun_app$b (member$ ?v2) (set$ ?v0)) (fun_app$ ?v1 ?v2)) ) (forall ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (fun_app$u (append$ ?v2) (cons$ ?v3 ?v4))) (fun_app$ ?v1 ?v3)) false) )) false) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (and (exists ((?v2 A_list$)) (and (member$a ?v2 (set$a ?v0)) (fun_app$g ?v1 ?v2)) ) (forall ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (=> (and (= ?v0 (fun_app$v (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$g ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$a ?v5 (set$a ?v4)) (not (fun_app$g ?v1 ?v5))) ))) false) )) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (and (exists ((?v2 A$)) (and (fun_app$b (member$ ?v2) (set$ ?v0)) (fun_app$ ?v1 ?v2)) ) (forall ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (fun_app$u (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A$)) (=> (fun_app$b (member$ ?v5) (set$ ?v4)) (not (fun_app$ ?v1 ?v5))) ))) false) )) false) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (and (exists ((?v2 A_list$)) (and (member$a ?v2 (set$a ?v0)) (fun_app$g ?v1 ?v2)) ) (forall ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (=> (and (= ?v0 (fun_app$v (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$g ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$a ?v5 (set$a ?v2)) (not (fun_app$g ?v1 ?v5))) ))) false) )) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (and (exists ((?v2 A$)) (and (fun_app$b (member$ ?v2) (set$ ?v0)) (fun_app$ ?v1 ?v2)) ) (forall ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (fun_app$u (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A$)) (=> (fun_app$b (member$ ?v5) (set$ ?v2)) (not (fun_app$ ?v1 ?v5))) ))) false) )) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (= (member$a ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (= ?v1 (fun_app$v (append$a ?v2) (cons$a ?v0 ?v3))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (= (fun_app$b (member$ ?v0) (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (= ?v1 (fun_app$u (append$ ?v2) (cons$ ?v0 ?v3))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (= (member$a ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (and (= ?v1 (fun_app$v (append$a ?v2) (cons$a ?v0 ?v3))) (not (member$a ?v0 (set$a ?v3)))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (= (fun_app$b (member$ ?v0) (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (and (= ?v1 (fun_app$u (append$ ?v2) (cons$ ?v0 ?v3))) (not (fun_app$b (member$ ?v0) (set$ ?v3)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (= (member$a ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (and (= ?v1 (fun_app$v (append$a ?v2) (cons$a ?v0 ?v3))) (not (member$a ?v0 (set$a ?v2)))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (= (fun_app$b (member$ ?v0) (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (and (= ?v1 (fun_app$u (append$ ?v2) (cons$ ?v0 ?v3))) (not (fun_app$b (member$ ?v0) (set$ ?v2)))) )) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (= (exists ((?v2 A_list$)) (and (member$a ?v2 (set$a ?v0)) (fun_app$g ?v1 ?v2)) ) (exists ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (and (= ?v0 (fun_app$v (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$g ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$a ?v5 (set$a ?v4)) (not (fun_app$g ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (= (exists ((?v2 A$)) (and (fun_app$b (member$ ?v2) (set$ ?v0)) (fun_app$ ?v1 ?v2)) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (and (= ?v0 (fun_app$u (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A$)) (=> (fun_app$b (member$ ?v5) (set$ ?v4)) (not (fun_app$ ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (= (exists ((?v2 A_list$)) (and (member$a ?v2 (set$a ?v0)) (fun_app$g ?v1 ?v2)) ) (exists ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (and (= ?v0 (fun_app$v (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$g ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$a ?v5 (set$a ?v2)) (not (fun_app$g ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (= (exists ((?v2 A$)) (and (fun_app$b (member$ ?v2) (set$ ?v0)) (fun_app$ ?v1 ?v2)) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (and (= ?v0 (fun_app$u (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A$)) (=> (fun_app$b (member$ ?v5) (set$ ?v2)) (not (fun_app$ ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_b_rbt$)) (= (fun_app$f (rbt_greater$ ?v0 ?v1) ?v2) (forall ((?v3 A$)) (=> (fun_app$b (member$ ?v3) (set$ (keys$ ?v2))) (fun_app$ (fun_app$a ?v0 ?v1) ?v3)) )) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_b_rbt$)) (= (fun_app$f (rbt_less$ ?v0 ?v1) ?v2) (forall ((?v3 A$)) (=> (fun_app$b (member$ ?v3) (set$ (keys$ ?v2))) (fun_app$ (fun_app$a ?v0 ?v3) ?v1)) )) ))
(assert (forall ((?v0 A_b_prod_list$)) (=> (not (distinct$b ?v0)) (exists ((?v1 A_b_prod_list$) (?v2 A_b_prod_list$) (?v3 A_b_prod_list$) (?v4 A_b_prod$)) (= ?v0 (fun_app$w (append$b ?v1) (fun_app$w (append$b (cons$b ?v4 nil$b)) (fun_app$w (append$b ?v2) (fun_app$w (append$b (cons$b ?v4 nil$b)) ?v3))))) )) ))
(assert (forall ((?v0 A_list_list$)) (=> (not (distinct$a ?v0)) (exists ((?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$) (?v4 A_list$)) (= ?v0 (fun_app$v (append$a ?v1) (fun_app$v (append$a (cons$a ?v4 nil$a)) (fun_app$v (append$a ?v2) (fun_app$v (append$a (cons$a ?v4 nil$a)) ?v3))))) )) ))
(assert (forall ((?v0 A_list$)) (=> (not (distinct$ ?v0)) (exists ((?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A$)) (= ?v0 (fun_app$u (append$ ?v1) (fun_app$u (append$ (cons$ ?v4 nil$)) (fun_app$u (append$ ?v2) (fun_app$u (append$ (cons$ ?v4 nil$)) ?v3))))) )) ))
(assert (forall ((?v0 A$)) (= (the_elem$ (set$ (cons$ ?v0 nil$))) ?v0) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (! (= (greaterThan$ ?v0 ?v1) (collect$ (fun_app$a ?v0 ?v1))) :pattern ((greaterThan$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A$)) (= (fun_app$b (member$ ?v0) (lessThan$ ?v1 ?v2)) (fun_app$ (fun_app$a ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A$)) (= (fun_app$b (member$ ?v0) (greaterThan$ ?v1 ?v2)) (fun_app$ (fun_app$a ?v1 ?v2) ?v0)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (= (lessThan$ ?v0 ?v1) (collect$ (fun_app$a (uub$ ?v0) ?v1))) ))
(assert (forall ((?v0 A$)) (=> (fun_app$b (member$ ?v0) (dom$ (fun_app$y (rbt_lookup$ less$) t1$))) (fun_app$ (fun_app$a less$ ?v0) k$)) ))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A$) (?v2 A_list$)) (! (= (fun_app$u (maps$ ?v0) (cons$ ?v1 ?v2)) (fun_app$u (append$ (fun_app$x ?v0 ?v1)) (fun_app$u (maps$ ?v0) ?v2))) :pattern ((fun_app$u (maps$ ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_b_rbt$)) (=> (fun_app$f (rbt_sorted$ less$) ?v0) (= (dom$ (fun_app$y (rbt_lookup$ less$) ?v0)) (set$ (keys$ ?v0)))) ))
(assert (forall ((?v0 A_a_list_fun$)) (! (= (fun_app$u (maps$ ?v0) nil$) nil$) :pattern ((maps$ ?v0)))))
(assert (=> (fun_app$f (rbt_sorted$ less$) t2$) (= (map_of$ (entries$ t2$)) (fun_app$y (rbt_lookup$ less$) t2$))))
(assert (=> (fun_app$f (rbt_sorted$ less$) t1$) (= (map_of$ (entries$ t1$)) (fun_app$y (rbt_lookup$ less$) t1$))))
(assert (= (entries$ empty$) nil$b))
(assert (forall ((?v0 A$)) (! (= (fun_app$c (fun_app$y (rbt_lookup$ less$) empty$) ?v0) none$) :pattern ((fun_app$c (fun_app$y (rbt_lookup$ less$) empty$) ?v0)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$c (fun_app$y (rbt_lookup$ less$) empty$) ?v0) none$) :pattern ((fun_app$c (fun_app$y (rbt_lookup$ less$) empty$) ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_b_rbt$)) (! (=> (fun_app$f (rbt_greater$ less$ ?v0) ?v1) (= (fun_app$c (fun_app$y (rbt_lookup$ less$) ?v1) ?v0) none$)) :pattern ((fun_app$c (fun_app$y (rbt_lookup$ less$) ?v1) ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_b_rbt$)) (! (=> (fun_app$f (rbt_less$ less$ ?v0) ?v1) (= (fun_app$c (fun_app$y (rbt_lookup$ less$) ?v1) ?v0) none$)) :pattern ((fun_app$c (fun_app$y (rbt_lookup$ less$) ?v1) ?v0)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (! (= (fun_app$c (fun_app$y (rbt_lookup$ ?v0) empty$) ?v1) none$) :pattern ((fun_app$c (fun_app$y (rbt_lookup$ ?v0) empty$) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (! (= (fun_app$c (fun_app$y (rbt_lookup$ ?v0) empty$) ?v1) none$) :pattern ((fun_app$c (fun_app$y (rbt_lookup$ ?v0) empty$) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_b_rbt$)) (! (=> (fun_app$f (rbt_greater$ ?v0 ?v1) ?v2) (= (fun_app$c (fun_app$y (rbt_lookup$ ?v0) ?v2) ?v1) none$)) :pattern ((fun_app$c (fun_app$y (rbt_lookup$ ?v0) ?v2) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_b_rbt$)) (! (=> (fun_app$f (rbt_less$ ?v0 ?v1) ?v2) (= (fun_app$c (fun_app$y (rbt_lookup$ ?v0) ?v2) ?v1) none$)) :pattern ((fun_app$c (fun_app$y (rbt_lookup$ ?v0) ?v2) ?v1)))))
(assert (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 A$)) (! (= (fun_app$c (fun_app$y (rbt_lookup$ less$) (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) ?v5) (ite (fun_app$ (fun_app$a less$ ?v5) ?v2) (fun_app$c (fun_app$y (rbt_lookup$ less$) ?v1) ?v5) (ite (fun_app$ (fun_app$a less$ ?v2) ?v5) (fun_app$c (fun_app$y (rbt_lookup$ less$) ?v4) ?v5) (some$ ?v3)))) :pattern ((fun_app$c (fun_app$y (rbt_lookup$ less$) (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) ?v5)))))
(assert (forall ((?v0 A_b_option_fun$)) (= (dom$ ?v0) (collect$ (uuc$ ?v0))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$) (?v6 A$)) (! (= (fun_app$c (fun_app$y (rbt_lookup$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) ?v6) (ite (fun_app$ (fun_app$a ?v0 ?v6) ?v3) (fun_app$c (fun_app$y (rbt_lookup$ ?v0) ?v2) ?v6) (ite (fun_app$ (fun_app$a ?v0 ?v3) ?v6) (fun_app$c (fun_app$y (rbt_lookup$ ?v0) ?v5) ?v6) (some$ ?v4)))) :pattern ((fun_app$c (fun_app$y (rbt_lookup$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) ?v6)))))
(assert (forall ((?v0 A_b_rbt$)) (finite$ (dom$ (fun_app$y (rbt_lookup$ less$) ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (=> (not (fun_app$b (member$ ?v0) (set$ ?v1))) (= (fun_app$u (insert$ ?v0) ?v1) (cons$ ?v0 ?v1))) :pattern ((fun_app$u (insert$ ?v0) ?v1)))))
(assert (forall ((?v0 A_list$)) (finite$ (set$ ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (=> (fun_app$b (member$ ?v0) (set$ ?v1)) (= (fun_app$u (insert$ ?v0) ?v1) ?v1)) :pattern ((fun_app$u (insert$ ?v0) ?v1)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$u (insert$ ?v0) nil$) (cons$ ?v0 nil$)) :pattern ((insert$ ?v0)))))
(assert (forall ((?v0 A_set$)) (=> (finite$ ?v0) (exists ((?v1 A_list$)) (= (set$ ?v1) ?v0) )) ))
(assert (forall ((?v0 A_set$)) (=> (finite$ ?v0) (exists ((?v1 A_list$)) (and (= (set$ ?v1) ?v0) (distinct$ ?v1)) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$u (insert$ ?v0) ?v1) (ite (fun_app$b (member$ ?v0) (set$ ?v1)) ?v1 (cons$ ?v0 ?v1))) :pattern ((fun_app$u (insert$ ?v0) ?v1)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (= (finite$ (collect$ (fun_app$d (uud$ ?v0) ?v1))) (and (finite$ (collect$ ?v0)) (finite$ (collect$ ?v1)))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (=> (or (finite$ (collect$ ?v0)) (finite$ (collect$ ?v1))) (finite$ (collect$ (fun_app$d (uue$ ?v0) ?v1)))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_bool_fun_fun$)) (=> (and (not (finite$ ?v0)) (and (finite$ ?v1) (forall ((?v3 A$)) (=> (fun_app$b (member$ ?v3) ?v0) (exists ((?v4 A$)) (and (fun_app$b (member$ ?v4) ?v1) (fun_app$ (fun_app$a ?v2 ?v3) ?v4)) )) ))) (exists ((?v3 A$)) (and (fun_app$b (member$ ?v3) ?v1) (not (finite$ (collect$ (fun_app$a (fun_app$e (uuf$ ?v0) ?v2) ?v3))))) )) ))
(assert (forall ((?v0 A_bool_fun$)) (=> (not (finite$ (collect$ ?v0))) (exists ((?v1 A$)) (fun_app$ ?v0 ?v1) )) ))
(assert (forall ((?v0 A_set$)) (=> (and (not (= ?v0 bot$)) (forall ((?v1 A$)) (=> (fun_app$b (member$ ?v1) ?v0) (exists ((?v2 A$)) (and (fun_app$b (member$ ?v2) ?v0) (fun_app$ (fun_app$a less$ ?v1) ?v2)) )) )) (not (finite$ ?v0))) ))
(assert (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (=> (fun_app$f (rbt_sorted$ less$) (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) (= (dom$ (fun_app$y (rbt_lookup$ less$) (branch$ ?v0 ?v1 ?v2 ?v3 ?v4))) (insert$a ?v2 (sup$ (dom$ (fun_app$y (rbt_lookup$ less$) ?v1)) (dom$ (fun_app$y (rbt_lookup$ less$) ?v4)))))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set_bool_fun$)) (=> (and (finite$ ?v0) (and (fun_app$b ?v1 bot$) (forall ((?v2 A$) (?v3 A_set$)) (=> (and (finite$ ?v3) (and (forall ((?v4 A$)) (=> (fun_app$b (member$ ?v4) ?v3) (fun_app$ (fun_app$a less$ ?v4) ?v2)) ) (fun_app$b ?v1 ?v3))) (fun_app$b ?v1 (insert$a ?v2 ?v3))) ))) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set_bool_fun$)) (=> (and (finite$ ?v0) (and (fun_app$b ?v1 bot$) (forall ((?v2 A$) (?v3 A_set$)) (=> (and (finite$ ?v3) (and (forall ((?v4 A$)) (=> (fun_app$b (member$ ?v4) ?v3) (fun_app$ (fun_app$a less$ ?v2) ?v4)) ) (fun_app$b ?v1 ?v3))) (fun_app$b ?v1 (insert$a ?v2 ?v3))) ))) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$)) (= (= (set$ ?v0) bot$) (= ?v0 nil$)) ))
(assert (forall ((?v0 A_list$)) (= (= bot$ (set$ ?v0)) (= ?v0 nil$)) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (set$ (cons$ ?v0 ?v1)) (insert$a ?v0 (set$ ?v1))) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (set$ (fun_app$u (append$ ?v0) ?v1)) (sup$ (set$ ?v0) (set$ ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (= (set$ (fun_app$u (insert$ ?v0) ?v1)) (insert$a ?v0 (set$ ?v1))) ))
(assert (= (dom$ uug$) bot$))
(assert (= bot$ (set$ nil$)))
(check-sat)
(exit)

