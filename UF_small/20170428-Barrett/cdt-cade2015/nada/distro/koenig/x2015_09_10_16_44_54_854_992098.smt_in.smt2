(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_treeFI$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Bool_stream$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_treeFI_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort A_a_a_prod_fun$ 0)
(declare-sort A_a_prod_a_fun$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_a_treeFI_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_treeFI_a_fun$ 0)
(declare-sort Nat_stream_set$ 0)
(declare-sort A_a_prod_treeFI$ 0)
(declare-sort A_stream_treeFI$ 0)
(declare-sort A_treeFI_treeFI$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_bool_stream_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_treeFI_bool_fun$ 0)
(declare-sort Nat_nat_stream_fun$ 0)
(declare-sort Nat_stream_nat_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_prod_stream_set$ 0)
(declare-sort A_a_prod_treeFI_set$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort A_stream_treeFI_set$ 0)
(declare-sort A_treeFI_list_a_fun$ 0)
(declare-sort A_treeFI_stream_set$ 0)
(declare-sort A_treeFI_treeFI_set$ 0)
(declare-sort A_a_a_a_prod_fun_fun$ 0)
(declare-sort A_a_a_prod_a_fun_fun$ 0)
(declare-sort A_a_prod_a_a_fun_fun$ 0)
(declare-sort A_a_stream_a_fun_fun$ 0)
(declare-sort Nat_nat_nat_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_a_treeFI_fun$ 0)
(declare-sort A_treeFI_a_stream_fun$ 0)
(declare-sort A_treeFI_a_treeFI_fun$ 0)
(declare-sort Nat_nat_prod_bool_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_fun$ 0)
(declare-sort A_a_stream_bool_fun_fun$ 0)
(declare-sort A_a_treeFI_bool_fun_fun$ 0)
(declare-sort A_a_prod_stream_bool_fun$ 0)
(declare-sort A_a_prod_treeFI_bool_fun$ 0)
(declare-sort A_stream_stream_bool_fun$ 0)
(declare-sort A_stream_treeFI_bool_fun$ 0)
(declare-sort A_treeFI_stream_bool_fun$ 0)
(declare-sort A_treeFI_treeFI_bool_fun$ 0)
(declare-sort A_a_treeFI_list_a_fun_fun$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort Nat_nat_stream_stream_fun$ 0)
(declare-sort Nat_stream_nat_stream_fun$ 0)
(declare-sort A_a_a_prod_a_a_prod_fun_fun$ 0)
(declare-sort A_a_prod_a_a_a_prod_fun_fun$ 0)
(declare-sort A_a_prod_a_a_prod_a_fun_fun$ 0)
(declare-sort Bool_stream_bool_stream_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0)
(declare-sort Nat_nat_nat_prod_stream_fun$ 0)
(declare-sort Nat_nat_prod_nat_stream_fun$ 0)
(declare-sort A_a_fun_a_bool_stream_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun$ 0)
(declare-sort A_stream_a_stream_bool_fun_fun$ 0)
(declare-sort A_stream_a_treeFI_bool_fun_fun$ 0)
(declare-sort Bool_bool_fun_bool_bool_fun_fun$ 0)
(declare-sort A_a_prod_a_a_prod_a_a_prod_fun_fun$ 0)
(declare-sort A_stream_a_stream_a_stream_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_stream_fun_fun$ 0)
(declare-sort Nat_nat_prod_stream_nat_stream_fun$ 0)
(declare-sort Nat_nat_stream_fun_nat_nat_fun_fun$ 0)
(declare-sort Nat_stream_nat_nat_prod_stream_fun$ 0)
(declare-sort A_bool_fun_a_stream_a_stream_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_prod_nat_fun_fun$ 0)
(declare-sort Nat_nat_nat_prod_fun_nat_nat_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_stream_fun$ 0)
(declare-sort A_stream_a_stream_treeFI_bool_fun_fun$ 0)
(declare-sort A_treeFI_a_treeFI_treeFI_bool_fun_fun$ 0)
(declare-sort A_a_prod_bool_fun_a_a_prod_bool_fun_fun$ 0)
(declare-sort A_bool_stream_fun_a_bool_stream_fun_fun$ 0)
(declare-sort Nat_stream_stream_nat_stream_stream_fun$ 0)
(declare-sort A_a_prod_stream_a_stream_a_stream_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_stream_stream_fun_fun$ 0)
(declare-sort Nat_nat_stream_fun_nat_nat_stream_fun_fun$ 0)
(declare-sort Nat_stream_nat_fun_nat_stream_nat_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_nat_prod_stream_fun_fun$ 0)
(declare-sort Nat_nat_prod_stream_nat_nat_prod_stream_fun$ 0)
(declare-sort A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ 0)
(declare-sort A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_nat_prod_fun_nat_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_fun_nat_nat_prod_nat_fun_fun$ 0)
(declare-sort A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$ 0)
(declare-sort Nat_stream_nat_fun_nat_stream_nat_stream_fun_fun$ 0)
(declare-sort Nat_stream_nat_stream_fun_nat_stream_nat_fun_fun$ 0)
(declare-sort Nat_nat_stream_fun_nat_nat_nat_prod_stream_fun_fun$ 0)
(declare-sort A_bool_stream_fun_a_a_fun_a_bool_stream_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_fun_nat_nat_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_fun_fun$ 0)
(declare-sort Nat_nat_stream_stream_fun_nat_nat_stream_stream_fun_fun$ 0)
(declare-sort Nat_stream_nat_stream_fun_nat_stream_nat_stream_fun_fun$ 0)
(declare-sort Nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun$ 0)
(declare-sort Nat_nat_nat_prod_stream_fun_nat_nat_nat_prod_stream_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort A_bool_fun_a_bool_stream_fun_a_a_fun_a_bool_stream_fun_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_stream_fun_fun$ 0)
(declare-sort Nat_nat_stream_stream_fun_nat_nat_fun_nat_nat_stream_stream_fun_fun_fun$ 0)
(declare-sort Nat_bool_fun_nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun_fun$ 0)
(declare-sort Nat_nat_nat_prod_stream_fun_nat_nat_fun_nat_nat_nat_prod_stream_fun_fun_fun$ 0)
(declare-sort Nat_bool_fun_nat_nat_stream_stream_fun_nat_nat_fun_nat_nat_stream_stream_fun_fun_fun_fun$ 0)
(declare-sort Nat_bool_fun_nat_nat_nat_prod_stream_fun_nat_nat_fun_nat_nat_nat_prod_stream_fun_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_stream_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_stream_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_bool_fun_nat_nat_prod_nat_nat_prod_stream_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_stream_fun_fun_fun_fun$ 0)
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$) A$)
(declare-fun stl$ (A_stream$) A_stream$)
(declare-fun sCons$ (A$ A_stream$) A_stream$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$ (A_a_prod$) A$)
(declare-fun snd$ (A_a_prod$) A$)
(declare-fun pair$ (A$ A$) A_a_prod$)
(declare-sort A_a_prod_stream$ 0)
(declare-fun shd$a (A_a_prod_stream$) A_a_prod$)
(declare-fun stl$a (A_a_prod_stream$) A_a_prod_stream$)
(declare-fun sCons$a (A_a_prod$ A_a_prod_stream$) A_a_prod_stream$)
(declare-sort A_a_prod_treeFI_list$ 0)
(declare-sort A_treeFI_list$ 0)
(declare-fun nil$ () A_a_prod_treeFI_list$)
(declare-fun hd$ (A_a_prod_treeFI_list$) A_a_prod_treeFI$)
(declare-fun tl$ (A_a_prod_treeFI_list$) A_a_prod_treeFI_list$)
(declare-fun cons$ (A_a_prod_treeFI$ A_a_prod_treeFI_list$) A_a_prod_treeFI_list$)
(declare-fun nil$a () A_treeFI_list$)
(declare-fun hd$a (A_treeFI_list$) A_treeFI$)
(declare-fun tl$a (A_treeFI_list$) A_treeFI_list$)
(declare-fun cons$a (A_treeFI$ A_treeFI_list$) A_treeFI_list$)
(declare-sort Nat_stream$ 0)
(declare-fun shd$b (Nat_stream$) Nat$)
(declare-fun stl$b (Nat_stream$) Nat_stream$)
(declare-fun sCons$b (Nat$ Nat_stream$) Nat_stream$)
(declare-sort A_treeFI_treeFI_list$ 0)
(declare-sort A_stream_treeFI_list$ 0)
(declare-fun nil$b () A_treeFI_treeFI_list$)
(declare-fun hd$b (A_treeFI_treeFI_list$) A_treeFI_treeFI$)
(declare-fun tl$b (A_treeFI_treeFI_list$) A_treeFI_treeFI_list$)
(declare-fun cons$b (A_treeFI_treeFI$ A_treeFI_treeFI_list$) A_treeFI_treeFI_list$)
(declare-fun nil$c () A_stream_treeFI_list$)
(declare-fun hd$c (A_stream_treeFI_list$) A_stream_treeFI$)
(declare-fun tl$c (A_stream_treeFI_list$) A_stream_treeFI_list$)
(declare-fun cons$c (A_stream_treeFI$ A_stream_treeFI_list$) A_stream_treeFI_list$)
(declare-sort A_treeFI_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-fun shd$c (A_treeFI_stream$) A_treeFI$)
(declare-fun stl$c (A_treeFI_stream$) A_treeFI_stream$)
(declare-fun sCons$c (A_treeFI$ A_treeFI_stream$) A_treeFI_stream$)
(declare-fun shd$d (A_stream_stream$) A_stream$)
(declare-fun stl$d (A_stream_stream$) A_stream_stream$)
(declare-fun sCons$d (A_stream$ A_stream_stream$) A_stream_stream$)
(declare-sort Nat_nat_prod$ 0)
(declare-fun fst$a (Nat_nat_prod$) Nat$)
(declare-fun snd$a (Nat_nat_prod$) Nat$)
(declare-fun pair$a (Nat$ Nat$) Nat_nat_prod$)
(declare-sort Nat_nat_prod_stream$ 0)
(declare-sort Nat_stream_stream$ 0)
(declare-fun shd$e (Nat_nat_prod_stream$) Nat_nat_prod$)
(declare-fun stl$e (Nat_nat_prod_stream$) Nat_nat_prod_stream$)
(declare-fun sCons$e (Nat_nat_prod$ Nat_nat_prod_stream$) Nat_nat_prod_stream$)
(declare-fun shd$f (Nat_stream_stream$) Nat_stream$)
(declare-fun stl$f (Nat_stream_stream$) Nat_stream_stream$)
(declare-fun sCons$f (Nat_stream$ Nat_stream_stream$) Nat_stream_stream$)
(declare-sort A_bool_fun_a_stream_prod$ 0)
(declare-sort A_list$ 0)
(declare-fun select$ (A_bool_fun_a_stream_prod$) A_bool_fun$)
(declare-fun selecta$ (A_bool_fun_a_stream_prod$) A_stream$)
(declare-fun pair$b (A_bool_fun$ A_stream$) A_bool_fun_a_stream_prod$)
(declare-fun nil$d () A_list$)
(declare-fun hd$d (A_list$) A$)
(declare-fun tl$d (A_list$) A_list$)
(declare-fun cons$d (A$ A_list$) A_list$)
(declare-fun as$ () A_stream$)
(declare-fun id$ () Nat_nat_fun$)
(declare-fun tr$ () A_treeFI$)
(declare-fun uu$ (A_treeFI_set$) A_treeFI_bool_fun$)
(declare-fun eps$ (A_treeFI_bool_fun$) A_treeFI$)
(declare-fun id$a () Nat_nat_fun_nat_nat_fun_fun$)
(declare-fun lab$ (A_treeFI$) A$)
(declare-fun set$ (A_treeFI_list$) A_treeFI_set$)
(declare-fun sub$ (A_treeFI$) A_treeFI_list$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun uua$ (A_set$) A_bool_fun$)
(declare-fun uub$ (A_stream_set$) A_stream_bool_fun$)
(declare-fun uuc$ () Bool_bool_fun$)
(declare-fun uud$ (A_treeFI$) A_treeFI_bool_fun$)
(declare-fun uue$ () Nat_nat_fun$)
(declare-fun uuf$ () A_a_stream_a_fun_fun$)
(declare-fun uug$ () A_a_treeFI_list_a_fun_fun$)
(declare-fun uuh$ (Nat$) Nat_nat_fun$)
(declare-fun comp$ (Bool_bool_fun$) A_a_prod_bool_fun_a_a_prod_bool_fun_fun$)
(declare-fun lab$a (A_a_prod_treeFI$) A_a_prod$)
(declare-fun lab$b (A_treeFI_treeFI$) A_treeFI$)
(declare-fun lab$c (A_stream_treeFI$) A_stream$)
(declare-fun set$a (A_a_prod_treeFI_list$) A_a_prod_treeFI_set$)
(declare-fun set$b (A_treeFI_treeFI_list$) A_treeFI_treeFI_set$)
(declare-fun set$c (A_stream_treeFI_list$) A_stream_treeFI_set$)
(declare-fun smap$ (Nat_nat_fun$) Nat_stream_nat_stream_fun$)
(declare-fun snth$ (A_stream$ Nat$) A$)
(declare-fun sset$ (A_stream$) A_set$)
(declare-fun sub$a (A_a_prod_treeFI$) A_a_prod_treeFI_list$)
(declare-fun sub$b (A_treeFI_treeFI$) A_treeFI_treeFI_list$)
(declare-fun sub$c (A_stream_treeFI$) A_stream_treeFI_list$)
(declare-fun szip$ (A_stream$ A_stream$) A_a_prod_stream$)
(declare-fun tree$ (A$ A_treeFI_list$) A_treeFI$)
(declare-fun trev$ (A_treeFI$) A_treeFI$)
(declare-fun comp$a (Bool_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun comp$b (Nat_nat_prod_stream_nat_nat_prod_stream_fun$) Nat_nat_nat_prod_stream_fun_nat_nat_nat_prod_stream_fun_fun$)
(declare-fun comp$c (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_nat_prod_fun_nat_nat_nat_prod_fun_fun$)
(declare-fun comp$d (Nat_nat_prod_stream_nat_stream_fun$ Nat_nat_prod_nat_nat_prod_stream_fun$) Nat_nat_prod_nat_stream_fun$)
(declare-fun comp$e (Nat_nat_prod_nat_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_fun_fun$)
(declare-fun comp$f (Nat_stream_stream_nat_stream_stream_fun$) Nat_nat_stream_stream_fun_nat_nat_stream_stream_fun_fun$)
(declare-fun comp$g (Nat_stream_nat_stream_fun$) Nat_nat_stream_fun_nat_nat_stream_fun_fun$)
(declare-fun comp$h (Bool_stream_bool_stream_fun$) A_bool_stream_fun_a_bool_stream_fun_fun$)
(declare-fun comp$i (Nat_stream_nat_nat_prod_stream_fun$) Nat_nat_stream_fun_nat_nat_nat_prod_stream_fun_fun$)
(declare-fun comp$j (Nat_nat_nat_prod_fun$) Nat_nat_fun_nat_nat_nat_prod_fun_fun$)
(declare-fun comp$k (Nat_nat_fun$) Nat_nat_fun_nat_nat_fun_fun$)
(declare-fun comp$l (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun comp$m (A_bool_fun$) A_a_fun_a_bool_fun_fun$)
(declare-fun comp$n (Bool_bool_fun$) Bool_bool_fun_bool_bool_fun_fun$)
(declare-fun comp$o (Nat_nat_stream_fun$) Nat_nat_fun_nat_nat_stream_fun_fun$)
(declare-fun comp$p (Nat_stream_nat_stream_fun$) Nat_stream_nat_stream_fun_nat_stream_nat_stream_fun_fun$)
(declare-fun comp$q (Nat_nat_fun$) Nat_nat_prod_nat_fun_nat_nat_prod_nat_fun_fun$)
(declare-fun comp$r (Nat_nat_prod_nat_fun$) Nat_nat_nat_prod_fun_nat_nat_fun_fun$)
(declare-fun comp$s (Nat_nat_nat_prod_fun$) Nat_nat_prod_nat_fun_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun comp$t (Nat_stream_nat_fun$) Nat_nat_stream_fun_nat_nat_fun_fun$)
(declare-fun comp$u (Nat_nat_stream_fun$) Nat_stream_nat_fun_nat_stream_nat_stream_fun_fun$)
(declare-fun comp$v (Nat_stream_nat_fun$) Nat_stream_nat_stream_fun_nat_stream_nat_fun_fun$)
(declare-fun comp$w (Nat_nat_fun$) Nat_stream_nat_fun_nat_stream_nat_fun_fun$)
(declare-fun comp$x (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun sdrop$ (Nat$) A_stream_a_stream_fun$)
(declare-fun smap$a (A_a_prod_a_fun$ A_a_prod_stream$) A_stream$)
(declare-fun smap$b (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun smap$c (A_a_prod_a_a_prod_fun$ A_a_prod_stream$) A_a_prod_stream$)
(declare-fun smap$d (A_a_a_prod_fun$ A_stream$) A_a_prod_stream$)
(declare-fun smap$e (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_stream_nat_nat_prod_stream_fun$)
(declare-fun smap$f (Nat_nat_prod_nat_fun$) Nat_nat_prod_stream_nat_stream_fun$)
(declare-fun smap$g (Nat_stream_nat_stream_fun$) Nat_stream_stream_nat_stream_stream_fun$)
(declare-fun smap$h (Bool_bool_fun$) Bool_stream_bool_stream_fun$)
(declare-fun smap$i (Nat_nat_nat_prod_fun$) Nat_stream_nat_nat_prod_stream_fun$)
(declare-fun smap$j (Nat_nat_stream_fun$ Nat_stream$) Nat_stream_stream$)
(declare-fun smap$k (A_bool_fun$ A_stream$) Bool_stream$)
(declare-fun smap$l (A_treeFI_a_treeFI_fun$ A_treeFI_stream$) A_treeFI_stream$)
(declare-fun smap$m (A_treeFI_a_stream_fun$ A_treeFI_stream$) A_stream_stream$)
(declare-fun smap$n (A_stream_a_treeFI_fun$ A_stream_stream$) A_treeFI_stream$)
(declare-fun smap$o (A_stream_a_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun smap$p (A_treeFI_a_fun$ A_treeFI_stream$) A_stream$)
(declare-fun smap$q (A_stream_a_fun$ A_stream_stream$) A_stream$)
(declare-fun smap$r (A_a_treeFI_fun$ A_stream$) A_treeFI_stream$)
(declare-fun smap$s (A_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun smap2$ (A_a_a_prod_a_fun_fun$ A_stream$ A_a_prod_stream$) A_stream$)
(declare-fun stake$ (Nat$ A_stream$) A_list$)
(declare-fun tree$a (A_treeFI$ A_treeFI_treeFI_list$) A_treeFI_treeFI$)
(declare-fun tree$b (A_stream$ A_stream_treeFI_list$) A_stream_treeFI$)
(declare-fun convol$ (Nat_nat_fun$) Nat_nat_fun_nat_nat_nat_prod_fun_fun$)
(declare-fun member$ (A_treeFI$ A_treeFI_set$) Bool)
(declare-fun smap2$a (A_a_prod_a_a_fun_fun$) A_a_prod_stream_a_stream_a_stream_fun_fun$)
(declare-fun smap2$b (A_a_prod_a_a_prod_a_fun_fun$ A_a_prod_stream$ A_a_prod_stream$) A_stream$)
(declare-fun smap2$c (A_a_a_a_prod_fun_fun$ A_stream$ A_stream$) A_a_prod_stream$)
(declare-fun smap2$d (A_a_a_prod_a_a_prod_fun_fun$ A_stream$ A_a_prod_stream$) A_a_prod_stream$)
(declare-fun smap2$e (A_a_prod_a_a_a_prod_fun_fun$ A_a_prod_stream$ A_stream$) A_a_prod_stream$)
(declare-fun smap2$f (A_a_prod_a_a_prod_a_a_prod_fun_fun$ A_a_prod_stream$ A_a_prod_stream$) A_a_prod_stream$)
(declare-fun smap2$g (A_a_a_fun_fun$) A_stream_a_stream_a_stream_fun_fun$)
(declare-fun collect$ (A_treeFI_bool_fun$) A_treeFI_set$)
(declare-fun fun_app$ (Bool_bool_fun$ Bool) Bool)
(declare-fun member$a (A_stream$ A_stream_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun member$c (A_a_prod_treeFI$ A_a_prod_treeFI_set$) Bool)
(declare-fun member$d (A_treeFI_treeFI$ A_treeFI_treeFI_set$) Bool)
(declare-fun member$e (A_stream_treeFI$ A_stream_treeFI_set$) Bool)
(declare-fun member$f (A_treeFI_stream$ A_treeFI_stream_set$) Bool)
(declare-fun member$g (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$h (A_a_prod_stream$ A_a_prod_stream_set$) Bool)
(declare-fun member$i (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun member$j (Nat_stream$ Nat_stream_set$) Bool)
(declare-fun member$k (Nat$ Nat_set$) Bool)
(declare-fun sfilter$ (A_a_prod_bool_fun$ A_a_prod_stream$) A_a_prod_stream$)
(declare-fun smember$ (A$) A_stream_bool_fun$)
(declare-fun streams$ (A_treeFI_set$) A_treeFI_stream_set$)
(declare-fun collect$a (A_bool_fun$) A_set$)
(declare-fun collect$b (A_stream_bool_fun$) A_stream_set$)
(declare-fun fun_app$a (A_treeFI_bool_fun$ A_treeFI$) Bool)
(declare-fun fun_app$b (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun fun_app$d (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$e (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$f (A_a_stream_a_fun_fun$ A$) A_stream_a_fun$)
(declare-fun fun_app$g (A_treeFI_list_a_fun$ A_treeFI_list$) A$)
(declare-fun fun_app$h (A_a_treeFI_list_a_fun_fun$ A$) A_treeFI_list_a_fun$)
(declare-fun fun_app$i (A_a_prod_treeFI_bool_fun$ A_a_prod_treeFI$) Bool)
(declare-fun fun_app$j (A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ A_a_prod_stream$) A_a_prod_treeFI_bool_fun$)
(declare-fun fun_app$k (A_stream_a_treeFI_bool_fun_fun$ A_stream$) A_treeFI_bool_fun$)
(declare-fun fun_app$l (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$m (Nat_nat_stream_fun$ Nat$) Nat_stream$)
(declare-fun fun_app$n (Nat_nat_fun_nat_nat_stream_fun_fun$ Nat_nat_fun$) Nat_nat_stream_fun$)
(declare-fun fun_app$o (Nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun$ Nat_nat_stream_fun$) Nat_nat_fun_nat_nat_stream_fun_fun$)
(declare-fun fun_app$p (Nat_bool_fun_nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun_fun$ Nat_bool_fun$) Nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun$)
(declare-fun fun_app$q (A_a_prod_a_fun$ A_a_prod$) A$)
(declare-fun fun_app$r (A_a_a_prod_a_fun_fun$ A$) A_a_prod_a_fun$)
(declare-fun fun_app$s (A_a_prod_stream_a_stream_a_stream_fun_fun$ A_a_prod_stream$) A_stream_a_stream_fun$)
(declare-fun fun_app$t (A_a_fun$ A$) A$)
(declare-fun fun_app$u (A_a_prod_a_a_fun_fun$ A_a_prod$) A_a_fun$)
(declare-fun fun_app$v (A_a_prod_a_a_prod_a_fun_fun$ A_a_prod$) A_a_prod_a_fun$)
(declare-fun fun_app$w (A_a_a_prod_fun$ A$) A_a_prod$)
(declare-fun fun_app$x (A_a_a_a_prod_fun_fun$ A$) A_a_a_prod_fun$)
(declare-fun fun_app$y (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod$)
(declare-fun fun_app$z (A_a_a_prod_a_a_prod_fun_fun$ A$) A_a_prod_a_a_prod_fun$)
(declare-fun map_prod$ (Nat_nat_fun$) Nat_nat_fun_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun sfilter$a (A_bool_fun$) A_stream_a_stream_fun$)
(declare-fun smember$a (A_a_prod$) A_a_prod_stream_bool_fun$)
(declare-fun streams$a (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$b (A_a_prod_set$) A_a_prod_stream_set$)
(declare-fun streams$c (A_set$) A_stream_set$)
(declare-fun streams$d (Nat_set$) Nat_stream_set$)
(declare-fun streamsp$ (A_bool_fun$) A_stream_bool_fun$)
(declare-fun fun_app$aa (A_a_prod_a_a_a_prod_fun_fun$ A_a_prod$) A_a_a_prod_fun$)
(declare-fun fun_app$ab (A_a_prod_a_a_prod_a_a_prod_fun_fun$ A_a_prod$) A_a_prod_a_a_prod_fun$)
(declare-fun fun_app$ac (A_stream_a_stream_a_stream_fun_fun$ A_stream$) A_stream_a_stream_fun$)
(declare-fun fun_app$ad (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$ae (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$af (A_a_prod_stream_bool_fun$ A_a_prod_stream$) Bool)
(declare-fun fun_app$ag (A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ A_a_prod_stream$) A_a_prod_stream_bool_fun$)
(declare-fun fun_app$ah (A_stream_a_stream_bool_fun_fun$ A_stream$) A_stream_bool_fun$)
(declare-fun fun_app$ai (A_treeFI_a_fun$ A_treeFI$) A$)
(declare-fun fun_app$aj (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$ak (A_treeFI_treeFI_bool_fun$ A_treeFI_treeFI$) Bool)
(declare-fun fun_app$al (A_treeFI_a_treeFI_treeFI_bool_fun_fun$ A_treeFI$) A_treeFI_treeFI_bool_fun$)
(declare-fun fun_app$am (A_stream_treeFI_bool_fun$ A_stream_treeFI$) Bool)
(declare-fun fun_app$an (A_stream_a_stream_treeFI_bool_fun_fun$ A_stream$) A_stream_treeFI_bool_fun$)
(declare-fun fun_app$ao (A_a_treeFI_bool_fun_fun$ A$) A_treeFI_bool_fun$)
(declare-fun fun_app$ap (Nat_stream_nat_stream_fun$ Nat_stream$) Nat_stream$)
(declare-fun fun_app$aq (A_a_prod_bool_fun_a_a_prod_bool_fun_fun$ A_a_prod_bool_fun$) A_a_prod_bool_fun$)
(declare-fun fun_app$ar (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$as (Nat_nat_nat_prod_stream_fun_nat_nat_nat_prod_stream_fun_fun$ Nat_nat_nat_prod_stream_fun$) Nat_nat_nat_prod_stream_fun$)
(declare-fun fun_app$at (Nat_nat_fun_nat_nat_nat_prod_stream_fun_fun$ Nat_nat_fun$) Nat_nat_nat_prod_stream_fun$)
(declare-fun fun_app$au (Nat_nat_nat_prod_stream_fun_nat_nat_fun_nat_nat_nat_prod_stream_fun_fun_fun$ Nat_nat_nat_prod_stream_fun$) Nat_nat_fun_nat_nat_nat_prod_stream_fun_fun$)
(declare-fun fun_app$av (Nat_bool_fun_nat_nat_nat_prod_stream_fun_nat_nat_fun_nat_nat_nat_prod_stream_fun_fun_fun_fun$ Nat_bool_fun$) Nat_nat_nat_prod_stream_fun_nat_nat_fun_nat_nat_nat_prod_stream_fun_fun_fun$)
(declare-fun fun_app$aw (Nat_nat_nat_prod_fun_nat_nat_nat_prod_fun_fun$ Nat_nat_nat_prod_fun$) Nat_nat_nat_prod_fun$)
(declare-fun fun_app$ax (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_stream_fun_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_stream_fun$)
(declare-fun fun_app$ay (Nat_nat_prod_nat_nat_prod_stream_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_stream_fun_fun_fun$ Nat_nat_prod_nat_nat_prod_stream_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_stream_fun_fun$)
(declare-fun fun_app$az (Nat_nat_prod_bool_fun_nat_nat_prod_nat_nat_prod_stream_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_stream_fun_fun_fun_fun$ Nat_nat_prod_bool_fun$) Nat_nat_prod_nat_nat_prod_stream_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_stream_fun_fun_fun$)
(declare-fun fun_app$ba (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_fun_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_fun$)
(declare-fun fun_app$bb (Nat_nat_stream_stream_fun_nat_nat_stream_stream_fun_fun$ Nat_nat_stream_stream_fun$) Nat_nat_stream_stream_fun$)
(declare-fun fun_app$bc (Nat_nat_fun_nat_nat_stream_stream_fun_fun$ Nat_nat_fun$) Nat_nat_stream_stream_fun$)
(declare-fun fun_app$bd (Nat_nat_stream_stream_fun_nat_nat_fun_nat_nat_stream_stream_fun_fun_fun$ Nat_nat_stream_stream_fun$) Nat_nat_fun_nat_nat_stream_stream_fun_fun$)
(declare-fun fun_app$be (Nat_bool_fun_nat_nat_stream_stream_fun_nat_nat_fun_nat_nat_stream_stream_fun_fun_fun_fun$ Nat_bool_fun$) Nat_nat_stream_stream_fun_nat_nat_fun_nat_nat_stream_stream_fun_fun_fun$)
(declare-fun fun_app$bf (Nat_nat_stream_fun_nat_nat_stream_fun_fun$ Nat_nat_stream_fun$) Nat_nat_stream_fun$)
(declare-fun fun_app$bg (A_bool_stream_fun_a_bool_stream_fun_fun$ A_bool_stream_fun$) A_bool_stream_fun$)
(declare-fun fun_app$bh (A_a_fun_a_bool_stream_fun_fun$ A_a_fun$) A_bool_stream_fun$)
(declare-fun fun_app$bi (A_bool_stream_fun_a_a_fun_a_bool_stream_fun_fun_fun$ A_bool_stream_fun$) A_a_fun_a_bool_stream_fun_fun$)
(declare-fun fun_app$bj (A_bool_fun_a_bool_stream_fun_a_a_fun_a_bool_stream_fun_fun_fun_fun$ A_bool_fun$) A_bool_stream_fun_a_a_fun_a_bool_stream_fun_fun_fun$)
(declare-fun fun_app$bk (Nat_nat_stream_fun_nat_nat_nat_prod_stream_fun_fun$ Nat_nat_stream_fun$) Nat_nat_nat_prod_stream_fun$)
(declare-fun fun_app$bl (Nat_nat_fun_nat_nat_nat_prod_fun_fun$ Nat_nat_fun$) Nat_nat_nat_prod_fun$)
(declare-fun fun_app$bm (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$) Nat_nat_fun$)
(declare-fun fun_app$bn (Nat_nat_prod_stream_nat_nat_prod_stream_fun$ Nat_nat_prod_stream$) Nat_nat_prod_stream$)
(declare-fun fun_app$bo (Nat_stream_nat_nat_prod_stream_fun$ Nat_stream$) Nat_nat_prod_stream$)
(declare-fun fun_app$bp (Nat_nat_prod_stream_nat_stream_fun$ Nat_nat_prod_stream$) Nat_stream$)
(declare-fun fun_app$bq (Nat_stream_stream_nat_stream_stream_fun$ Nat_stream_stream$) Nat_stream_stream$)
(declare-fun fun_app$br (Bool_stream_bool_stream_fun$ Bool_stream$) Bool_stream$)
(declare-fun fun_app$bs (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$bt (A_treeFI_a_treeFI_fun$ A_treeFI$) A_treeFI$)
(declare-fun fun_app$bu (A_treeFI_a_stream_fun$ A_treeFI$) A_stream$)
(declare-fun fun_app$bv (A_stream_a_treeFI_fun$ A_stream$) A_treeFI$)
(declare-fun fun_app$bw (A_a_treeFI_fun$ A$) A_treeFI$)
(declare-fun fun_app$bx (A_a_stream_fun$ A$) A_stream$)
(declare-fun fun_app$by (A_treeFI_stream_bool_fun$ A_treeFI_stream$) Bool)
(declare-fun fun_app$bz (A_stream_stream_bool_fun$ A_stream_stream$) Bool)
(declare-fun fun_app$ca (Nat_nat_nat_prod_fun$ Nat$) Nat_nat_prod$)
(declare-fun fun_app$cb (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$) Nat_nat_prod$)
(declare-fun fun_app$cc (Nat_nat_prod_nat_fun$ Nat_nat_prod$) Nat$)
(declare-fun fun_app$cd (A_a_fun_a_bool_fun_fun$ A_a_fun$) A_bool_fun$)
(declare-fun fun_app$ce (Bool_bool_fun_bool_bool_fun_fun$ Bool_bool_fun$) Bool_bool_fun$)
(declare-fun fun_app$cf (Nat_stream_nat_stream_fun_nat_stream_nat_stream_fun_fun$ Nat_stream_nat_stream_fun$) Nat_stream_nat_stream_fun$)
(declare-fun fun_app$cg (Nat_nat_prod_nat_fun_nat_nat_prod_nat_fun_fun$ Nat_nat_prod_nat_fun$) Nat_nat_prod_nat_fun$)
(declare-fun fun_app$ch (Nat_nat_nat_prod_fun_nat_nat_fun_fun$ Nat_nat_nat_prod_fun$) Nat_nat_fun$)
(declare-fun fun_app$ci (Nat_nat_prod_nat_fun_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_fun$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$cj (Nat_nat_stream_fun_nat_nat_fun_fun$ Nat_nat_stream_fun$) Nat_nat_fun$)
(declare-fun fun_app$ck (Nat_stream_nat_fun_nat_stream_nat_stream_fun_fun$ Nat_stream_nat_fun$) Nat_stream_nat_stream_fun$)
(declare-fun fun_app$cl (Nat_stream_nat_stream_fun_nat_stream_nat_fun_fun$ Nat_stream_nat_stream_fun$) Nat_stream_nat_fun$)
(declare-fun fun_app$cm (Nat_stream_nat_fun_nat_stream_nat_fun_fun$ Nat_stream_nat_fun$) Nat_stream_nat_fun$)
(declare-fun fun_app$cn (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$co (A_a_stream_bool_fun_fun$ A$) A_stream_bool_fun$)
(declare-fun fun_app$cp (A_bool_fun_a_stream_a_stream_fun_fun$ A_bool_fun$) A_stream_a_stream_fun$)
(declare-fun fun_app$cq (A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$ A_bool_fun_a_stream_prod$) A_stream_bool_fun$)
(declare-fun fun_app$cr (Nat_nat_fun_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_fun$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$cs (Nat_nat_fun_nat_nat_prod_nat_fun_fun$ Nat_nat_fun$) Nat_nat_prod_nat_fun$)
(declare-fun konigPath$ (A_a_prod_treeFI$) A_a_prod_stream$)
(declare-fun size_prod$ (Nat_nat_fun$) Nat_nat_fun_nat_nat_prod_nat_fun_fun$)
(declare-fun streamsp$a (A_a_prod_bool_fun$) A_a_prod_stream_bool_fun$)
(declare-fun undefined$ () A_stream$)
(declare-fun infiniteTr$ (A_treeFI$) Bool)
(declare-fun konigPath$a (A_treeFI$) A_stream$)
(declare-fun properPath$ (A_stream$) A_treeFI_bool_fun$)
(declare-fun set_treeFI$ (A_treeFI_treeFI$) A_treeFI_set$)
(declare-fun stream_all$ (A_bool_fun$) A_stream_bool_fun$)
(declare-fun case_stream$ (A_a_stream_a_fun_fun$) A_stream_a_fun$)
(declare-fun case_treeFI$ (A_a_treeFI_list_a_fun_fun$) A_treeFI_a_fun$)
(declare-fun pred_stream$ (A_bool_fun$) A_stream_bool_fun$)
(declare-fun properPath$a (A_a_prod_stream$ A_a_prod_treeFI$) Bool)
(declare-fun sdrop_while$ (A_a_prod_bool_fun$ A_a_prod_stream$) A_a_prod_stream$)
(declare-fun set_treeFI$a (A_stream_treeFI$) A_stream_set$)
(declare-fun set_treeFI$b (A_treeFI$) A_set$)
(declare-fun sinterleave$ (A_a_prod_stream$ A_a_prod_stream$) A_a_prod_stream$)
(declare-fun stream_all$a (A_a_prod_bool_fun$) A_a_prod_stream_bool_fun$)
(declare-fun corec_stream$ (Nat_nat_fun$) Nat_bool_fun_nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun_fun$)
(declare-fun pred_stream$a (A_a_prod_bool_fun$) A_a_prod_stream_bool_fun$)
(declare-fun sdrop_while$a (A_bool_fun$) A_stream_a_stream_fun$)
(declare-fun sinterleave$a (A_stream$) A_stream_a_stream_fun$)
(declare-fun corec_stream$a (Nat_nat_nat_prod_fun$) Nat_bool_fun_nat_nat_nat_prod_stream_fun_nat_nat_fun_nat_nat_nat_prod_stream_fun_fun_fun_fun$)
(declare-fun corec_stream$b (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_bool_fun_nat_nat_prod_nat_nat_prod_stream_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_stream_fun_fun_fun_fun$)
(declare-fun corec_stream$c (Nat_nat_prod_nat_fun$ Nat_nat_prod_bool_fun$ Nat_nat_prod_nat_stream_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_stream_fun$)
(declare-fun corec_stream$d (Nat_nat_stream_fun$) Nat_bool_fun_nat_nat_stream_stream_fun_nat_nat_fun_nat_nat_stream_stream_fun_fun_fun_fun$)
(declare-fun corec_stream$e (A_bool_fun$) A_bool_fun_a_bool_stream_fun_a_a_fun_a_bool_stream_fun_fun_fun_fun$)
(assert (forall ((?v0 Bool)) (! (= (fun_app$ uuc$ ?v0) (not ?v0)) :pattern ((fun_app$ uuc$ ?v0)))))
(assert (forall ((?v0 A_treeFI$) (?v1 A_treeFI$)) (! (= (fun_app$a (uud$ ?v0) ?v1) (and (member$ ?v1 (set$ (sub$ ?v0))) (infiniteTr$ ?v1))) :pattern ((fun_app$a (uud$ ?v0) ?v1)))))
(assert (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI$)) (! (= (fun_app$a (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$a (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_stream_set$) (?v1 A_stream$)) (! (= (fun_app$b (uub$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$b (uub$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$c (uua$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$c (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (uuh$ ?v0) ?v1) ?v0) :pattern ((fun_app$d (uuh$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_stream$)) (! (= (fun_app$e (fun_app$f uuf$ ?v0) ?v1) ?v0) :pattern ((fun_app$e (fun_app$f uuf$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_treeFI_list$)) (! (= (fun_app$g (fun_app$h uug$ ?v0) ?v1) ?v0) :pattern ((fun_app$g (fun_app$h uug$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$d uue$ ?v0) ?v0) :pattern ((fun_app$d uue$ ?v0)))))
(assert (not (= (shd$ as$) (lab$ tr$))))
(assert (fun_app$a (properPath$ as$) tr$))
(assert (forall ((?v0 A_a_prod_treeFI$)) (= (shd$a (konigPath$ ?v0)) (lab$a ?v0)) ))
(assert (forall ((?v0 A_treeFI$)) (= (shd$ (konigPath$a ?v0)) (lab$ ?v0)) ))
(assert (forall ((?v0 A_treeFI$)) (= (lab$ (trev$ ?v0)) (lab$ ?v0)) ))
(assert (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_treeFI$)) (= (properPath$a ?v0 ?v1) (exists ((?v2 A_a_prod_stream$) (?v3 A_a_prod_treeFI$) (?v4 A_a_prod_treeFI$)) (and (= ?v0 ?v2) (and (= ?v1 ?v3) (and (= (shd$a ?v2) (lab$a ?v3)) (and (member$c ?v4 (set$a (sub$a ?v3))) (properPath$a (stl$a ?v2) ?v4))))) )) ))
(assert (forall ((?v0 A_stream$) (?v1 A_treeFI$)) (= (fun_app$a (properPath$ ?v0) ?v1) (exists ((?v2 A_stream$) (?v3 A_treeFI$) (?v4 A_treeFI$)) (and (= ?v0 ?v2) (and (= ?v1 ?v3) (and (= (shd$ ?v2) (lab$ ?v3)) (and (member$ ?v4 (set$ (sub$ ?v3))) (fun_app$a (properPath$ (stl$ ?v2)) ?v4))))) )) ))
(assert (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_treeFI$) (?v2 A_a_prod_treeFI$)) (=> (and (= (shd$a ?v0) (lab$a ?v1)) (and (member$c ?v2 (set$a (sub$a ?v1))) (properPath$a (stl$a ?v0) ?v2))) (properPath$a ?v0 ?v1)) ))
(assert (forall ((?v0 A_stream$) (?v1 A_treeFI$) (?v2 A_treeFI$)) (=> (and (= (shd$ ?v0) (lab$ ?v1)) (and (member$ ?v2 (set$ (sub$ ?v1))) (fun_app$a (properPath$ (stl$ ?v0)) ?v2))) (fun_app$a (properPath$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_treeFI$)) (=> (and (properPath$a ?v0 ?v1) (forall ((?v2 A_a_prod_stream$) (?v3 A_a_prod_treeFI$) (?v4 A_a_prod_treeFI$)) (=> (and (= ?v0 ?v2) (and (= ?v1 ?v3) (and (= (shd$a ?v2) (lab$a ?v3)) (and (member$c ?v4 (set$a (sub$a ?v3))) (properPath$a (stl$a ?v2) ?v4))))) false) )) false) ))
(assert (forall ((?v0 A_stream$) (?v1 A_treeFI$)) (=> (and (fun_app$a (properPath$ ?v0) ?v1) (forall ((?v2 A_stream$) (?v3 A_treeFI$) (?v4 A_treeFI$)) (=> (and (= ?v0 ?v2) (and (= ?v1 ?v3) (and (= (shd$ ?v2) (lab$ ?v3)) (and (member$ ?v4 (set$ (sub$ ?v3))) (fun_app$a (properPath$ (stl$ ?v2)) ?v4))))) false) )) false) ))
(assert (forall ((?v0 A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_treeFI$)) (=> (and (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (and (forall ((?v3 A_a_prod_stream$) (?v4 A_a_prod_treeFI$)) (=> (fun_app$i (fun_app$j ?v0 ?v3) ?v4) (= (shd$a ?v3) (lab$a ?v4))) ) (forall ((?v3 A_a_prod_stream$) (?v4 A_a_prod_treeFI$)) (=> (fun_app$i (fun_app$j ?v0 ?v3) ?v4) (exists ((?v5 A_a_prod_treeFI$)) (and (member$c ?v5 (set$a (sub$a ?v4))) (or (fun_app$i (fun_app$j ?v0 (stl$a ?v3)) ?v5) (properPath$a (stl$a ?v3) ?v5))) )) ))) (properPath$a ?v1 ?v2)) ))
(assert (forall ((?v0 A_stream_a_treeFI_bool_fun_fun$) (?v1 A_stream$) (?v2 A_treeFI$)) (=> (and (fun_app$a (fun_app$k ?v0 ?v1) ?v2) (and (forall ((?v3 A_stream$) (?v4 A_treeFI$)) (=> (fun_app$a (fun_app$k ?v0 ?v3) ?v4) (= (shd$ ?v3) (lab$ ?v4))) ) (forall ((?v3 A_stream$) (?v4 A_treeFI$)) (=> (fun_app$a (fun_app$k ?v0 ?v3) ?v4) (exists ((?v5 A_treeFI$)) (and (member$ ?v5 (set$ (sub$ ?v4))) (or (fun_app$a (fun_app$k ?v0 (stl$ ?v3)) ?v5) (fun_app$a (properPath$ (stl$ ?v3)) ?v5))) )) ))) (fun_app$a (properPath$ ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_treeFI$)) (=> (and (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (and (forall ((?v3 A_a_prod_stream$) (?v4 A_a_prod_treeFI$)) (=> (fun_app$i (fun_app$j ?v0 ?v3) ?v4) (= (shd$a ?v3) (lab$a ?v4))) ) (forall ((?v3 A_a_prod_stream$) (?v4 A_a_prod_treeFI$)) (=> (fun_app$i (fun_app$j ?v0 ?v3) ?v4) (exists ((?v5 A_a_prod_treeFI$)) (and (member$c ?v5 (set$a (sub$a ?v4))) (fun_app$i (fun_app$j ?v0 (stl$a ?v3)) ?v5)) )) ))) (properPath$a ?v1 ?v2)) ))
(assert (forall ((?v0 A_stream_a_treeFI_bool_fun_fun$) (?v1 A_stream$) (?v2 A_treeFI$)) (=> (and (fun_app$a (fun_app$k ?v0 ?v1) ?v2) (and (forall ((?v3 A_stream$) (?v4 A_treeFI$)) (=> (fun_app$a (fun_app$k ?v0 ?v3) ?v4) (= (shd$ ?v3) (lab$ ?v4))) ) (forall ((?v3 A_stream$) (?v4 A_treeFI$)) (=> (fun_app$a (fun_app$k ?v0 ?v3) ?v4) (exists ((?v5 A_treeFI$)) (and (member$ ?v5 (set$ (sub$ ?v4))) (fun_app$a (fun_app$k ?v0 (stl$ ?v3)) ?v5)) )) ))) (fun_app$a (properPath$ ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_treeFI$)) (=> (and (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_stream$) (?v4 A_a_prod_treeFI$)) (=> (fun_app$i (fun_app$j ?v0 ?v3) ?v4) (exists ((?v5 A_a_prod_stream$) (?v6 A_a_prod_treeFI$) (?v7 A_a_prod_treeFI$)) (and (= ?v3 ?v5) (and (= ?v4 ?v6) (and (= (shd$a ?v5) (lab$a ?v6)) (and (member$c ?v7 (set$a (sub$a ?v6))) (or (fun_app$i (fun_app$j ?v0 (stl$a ?v5)) ?v7) (properPath$a (stl$a ?v5) ?v7)))))) )) )) (properPath$a ?v1 ?v2)) ))
(assert (forall ((?v0 A_stream_a_treeFI_bool_fun_fun$) (?v1 A_stream$) (?v2 A_treeFI$)) (=> (and (fun_app$a (fun_app$k ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_treeFI$)) (=> (fun_app$a (fun_app$k ?v0 ?v3) ?v4) (exists ((?v5 A_stream$) (?v6 A_treeFI$) (?v7 A_treeFI$)) (and (= ?v3 ?v5) (and (= ?v4 ?v6) (and (= (shd$ ?v5) (lab$ ?v6)) (and (member$ ?v7 (set$ (sub$ ?v6))) (or (fun_app$a (fun_app$k ?v0 (stl$ ?v5)) ?v7) (fun_app$a (properPath$ (stl$ ?v5)) ?v7)))))) )) )) (fun_app$a (properPath$ ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_stream$)) (= (shd$a (sinterleave$ ?v0 ?v1)) (shd$a ?v0)) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (shd$ (fun_app$l (sinterleave$a ?v0) ?v1)) (shd$ ?v0)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_nat_stream_fun$) (?v3 Nat_nat_fun$) (?v4 Nat$)) (= (shd$b (fun_app$m (fun_app$n (fun_app$o (fun_app$p (corec_stream$ ?v0) ?v1) ?v2) ?v3) ?v4)) (fun_app$d ?v0 ?v4)) ))
(assert (forall ((?v0 A_a_a_prod_a_fun_fun$) (?v1 A_stream$) (?v2 A_a_prod_stream$)) (= (shd$ (smap2$ ?v0 ?v1 ?v2)) (fun_app$q (fun_app$r ?v0 (shd$ ?v1)) (shd$a ?v2))) ))
(assert (forall ((?v0 A_a_prod_a_a_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_stream$)) (= (shd$ (fun_app$l (fun_app$s (smap2$a ?v0) ?v1) ?v2)) (fun_app$t (fun_app$u ?v0 (shd$a ?v1)) (shd$ ?v2))) ))
(assert (forall ((?v0 A_a_prod_a_a_prod_a_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_stream$)) (= (shd$ (smap2$b ?v0 ?v1 ?v2)) (fun_app$q (fun_app$v ?v0 (shd$a ?v1)) (shd$a ?v2))) ))
(assert (forall ((?v0 A_a_a_a_prod_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (shd$a (smap2$c ?v0 ?v1 ?v2)) (fun_app$w (fun_app$x ?v0 (shd$ ?v1)) (shd$ ?v2))) ))
(assert (forall ((?v0 A_a_a_prod_a_a_prod_fun_fun$) (?v1 A_stream$) (?v2 A_a_prod_stream$)) (= (shd$a (smap2$d ?v0 ?v1 ?v2)) (fun_app$y (fun_app$z ?v0 (shd$ ?v1)) (shd$a ?v2))) ))
(assert (forall ((?v0 A_a_prod_a_a_a_prod_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_stream$)) (= (shd$a (smap2$e ?v0 ?v1 ?v2)) (fun_app$w (fun_app$aa ?v0 (shd$a ?v1)) (shd$ ?v2))) ))
(assert (forall ((?v0 A_a_prod_a_a_prod_a_a_prod_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_stream$)) (= (shd$a (smap2$f ?v0 ?v1 ?v2)) (fun_app$y (fun_app$ab ?v0 (shd$a ?v1)) (shd$a ?v2))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (shd$ (fun_app$l (fun_app$ac (smap2$g ?v0) ?v1) ?v2)) (fun_app$t (fun_app$ad ?v0 (shd$ ?v1)) (shd$ ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_nat_stream_fun$) (?v3 Nat_nat_fun$) (?v4 Nat$)) (! (= (fun_app$m (fun_app$n (fun_app$o (fun_app$p (corec_stream$ ?v0) ?v1) ?v2) ?v3) ?v4) (fun_app$m (fun_app$n (fun_app$o (fun_app$p (corec_stream$ ?v0) ?v1) ?v2) ?v3) ?v4)) :pattern ((fun_app$m (fun_app$n (fun_app$o (fun_app$p (corec_stream$ ?v0) ?v1) ?v2) ?v3) ?v4)))))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_nat_stream_fun$) (?v3 Nat_nat_fun$) (?v4 Nat$)) (= (stl$b (fun_app$m (fun_app$n (fun_app$o (fun_app$p (corec_stream$ ?v0) ?v1) ?v2) ?v3) ?v4)) (ite (fun_app$ae ?v1 ?v4) (fun_app$m ?v2 ?v4) (fun_app$m (fun_app$n (fun_app$o (fun_app$p (corec_stream$ ?v0) ?v1) ?v2) ?v3) (fun_app$d ?v3 ?v4)))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (stl$ (fun_app$l (fun_app$ac (smap2$g ?v0) ?v1) ?v2)) (fun_app$l (fun_app$ac (smap2$g ?v0) (stl$ ?v1)) (stl$ ?v2))) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (stl$ (fun_app$l (sinterleave$a ?v0) ?v1)) (fun_app$l (sinterleave$a ?v1) (stl$ ?v0))) ))
(assert (forall ((?v0 A_treeFI$)) (= (trev$ (trev$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_prod_stream_a_a_prod_stream_bool_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_stream$)) (=> (and (fun_app$af (fun_app$ag ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_stream$) (?v4 A_a_prod_stream$)) (=> (fun_app$af (fun_app$ag ?v0 ?v3) ?v4) (and (= (shd$a ?v3) (shd$a ?v4)) (fun_app$af (fun_app$ag ?v0 (stl$a ?v3)) (stl$a ?v4)))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$b (fun_app$ah ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$b (fun_app$ah ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (fun_app$b (fun_app$ah ?v0 (stl$ ?v3)) (stl$ ?v4)))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_prod_stream_a_a_prod_stream_bool_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_stream$)) (=> (and (fun_app$af (fun_app$ag ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_stream$) (?v4 A_a_prod_stream$)) (=> (fun_app$af (fun_app$ag ?v0 ?v3) ?v4) (and (= (shd$a ?v3) (shd$a ?v4)) (or (fun_app$af (fun_app$ag ?v0 (stl$a ?v3)) (stl$a ?v4)) (= (stl$a ?v3) (stl$a ?v4))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$b (fun_app$ah ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$b (fun_app$ah ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (or (fun_app$b (fun_app$ah ?v0 (stl$ ?v3)) (stl$ ?v4)) (= (stl$ ?v3) (stl$ ?v4))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_stream$)) (=> (and (= (shd$a ?v0) (shd$a ?v1)) (= (stl$a ?v0) (stl$a ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream$)) (=> (and (= (shd$ ?v0) (shd$ ?v1)) (= (stl$ ?v0) (stl$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_treeFI$) (?v1 A_treeFI$)) (=> (and (= (lab$ ?v0) (lab$ ?v1)) (= (sub$ ?v0) (sub$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_treeFI_list_a_fun_fun$) (?v1 A_treeFI$)) (! (= (fun_app$ai (case_treeFI$ ?v0) ?v1) (fun_app$g (fun_app$h ?v0 (lab$ ?v1)) (sub$ ?v1))) :pattern ((fun_app$ai (case_treeFI$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_stream_a_fun_fun$) (?v1 A_stream$)) (! (= (fun_app$e (case_stream$ ?v0) ?v1) (fun_app$e (fun_app$f ?v0 (shd$ ?v1)) (stl$ ?v1))) :pattern ((fun_app$e (case_stream$ ?v0) ?v1)))))
(assert (forall ((?v0 A_treeFI$)) (= (infiniteTr$ ?v0) (exists ((?v1 A_treeFI$) (?v2 A_treeFI$)) (and (= ?v0 ?v2) (and (member$ ?v1 (set$ (sub$ ?v2))) (infiniteTr$ ?v1))) )) ))
(assert (forall ((?v0 A_treeFI$) (?v1 A_treeFI$)) (=> (and (member$ ?v0 (set$ (sub$ ?v1))) (infiniteTr$ ?v0)) (infiniteTr$ ?v1)) ))
(assert (forall ((?v0 A_treeFI$)) (=> (and (infiniteTr$ ?v0) (forall ((?v1 A_treeFI$) (?v2 A_treeFI$)) (=> (and (= ?v0 ?v2) (and (member$ ?v1 (set$ (sub$ ?v2))) (infiniteTr$ ?v1))) false) )) false) ))
(assert (forall ((?v0 A_treeFI$)) (=> (infiniteTr$ ?v0) (exists ((?v1 A_treeFI$)) (and (member$ ?v1 (set$ (sub$ ?v0))) (infiniteTr$ ?v1)) )) ))
(assert (forall ((?v0 A_treeFI_bool_fun$) (?v1 A_treeFI$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v2 A_treeFI$)) (=> (fun_app$a ?v0 ?v2) (exists ((?v3 A_treeFI$)) (and (member$ ?v3 (set$ (sub$ ?v2))) (or (fun_app$a ?v0 ?v3) (infiniteTr$ ?v3))) )) )) (infiniteTr$ ?v1)) ))
(assert (forall ((?v0 A_treeFI_bool_fun$) (?v1 A_treeFI$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v2 A_treeFI$)) (=> (fun_app$a ?v0 ?v2) (exists ((?v3 A_treeFI$) (?v4 A_treeFI$)) (and (= ?v2 ?v4) (and (member$ ?v3 (set$ (sub$ ?v4))) (or (fun_app$a ?v0 ?v3) (infiniteTr$ ?v3)))) )) )) (infiniteTr$ ?v1)) ))
(assert (forall ((?v0 A_treeFI_bool_fun$) (?v1 A_treeFI$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v2 A_treeFI$)) (=> (fun_app$a ?v0 ?v2) (exists ((?v3 A_treeFI$)) (and (member$ ?v3 (set$ (sub$ ?v2))) (fun_app$a ?v0 ?v3)) )) )) (infiniteTr$ ?v1)) ))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_stream$)) (= (sdrop_while$ ?v0 ?v1) (ite (fun_app$aj ?v0 (shd$a ?v1)) (sdrop_while$ ?v0 (stl$a ?v1)) ?v1)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (fun_app$l (sdrop_while$a ?v0) ?v1) (ite (fun_app$c ?v0 (shd$ ?v1)) (fun_app$l (sdrop_while$a ?v0) (stl$ ?v1)) ?v1)) ))
(assert (forall ((?v0 A_treeFI$)) (= (tree$ (lab$ ?v0) (sub$ ?v0)) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A_treeFI_list$) (?v2 A$) (?v3 A_treeFI_list$)) (= (= (tree$ ?v0 ?v1) (tree$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_a_treeFI_list_a_fun_fun$) (?v1 A$) (?v2 A_treeFI_list$)) (! (= (fun_app$ai (case_treeFI$ ?v0) (tree$ ?v1 ?v2)) (fun_app$g (fun_app$h ?v0 ?v1) ?v2)) :pattern ((fun_app$ai (case_treeFI$ ?v0) (tree$ ?v1 ?v2))))))
(assert (forall ((?v0 A_treeFI$)) (=> (forall ((?v1 A$) (?v2 A_treeFI_list$)) (=> (= ?v0 (tree$ ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 A$) (?v1 A_treeFI_list$)) (! (= (sub$ (tree$ ?v0 ?v1)) ?v1) :pattern ((tree$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_treeFI_list$)) (! (= (lab$ (tree$ ?v0 ?v1)) ?v0) :pattern ((tree$ ?v0 ?v1)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_treeFI_list_a_fun_fun$) (?v2 A_treeFI$)) (= (fun_app$c ?v0 (fun_app$ai (case_treeFI$ ?v1) ?v2)) (=> (= ?v2 (tree$ (lab$ ?v2) (sub$ ?v2))) (fun_app$c ?v0 (fun_app$g (fun_app$h ?v1 (lab$ ?v2)) (sub$ ?v2))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_treeFI_list_a_fun_fun$) (?v2 A_treeFI$)) (= (fun_app$c ?v0 (fun_app$ai (case_treeFI$ ?v1) ?v2)) (not (and (= ?v2 (tree$ (lab$ ?v2) (sub$ ?v2))) (not (fun_app$c ?v0 (fun_app$g (fun_app$h ?v1 (lab$ ?v2)) (sub$ ?v2))))))) ))
(assert (forall ((?v0 A_treeFI$)) (=> (=> (= ?v0 (tree$ (lab$ ?v0) (sub$ ?v0))) false) false) ))
(assert (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_stream$)) (= (sinterleave$ ?v0 ?v1) (sCons$a (shd$a ?v0) (sinterleave$ ?v1 (stl$a ?v0)))) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (fun_app$l (sinterleave$a ?v0) ?v1) (sCons$ (shd$ ?v0) (fun_app$l (sinterleave$a ?v1) (stl$ ?v0)))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_stream_a_fun_fun$) (?v2 A_stream$)) (= (fun_app$c ?v0 (fun_app$e (case_stream$ ?v1) ?v2)) (=> (= ?v2 (sCons$ (shd$ ?v2) (stl$ ?v2))) (fun_app$c ?v0 (fun_app$e (fun_app$f ?v1 (shd$ ?v2)) (stl$ ?v2))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_stream_a_fun_fun$) (?v2 A_stream$)) (= (fun_app$c ?v0 (fun_app$e (case_stream$ ?v1) ?v2)) (not (and (= ?v2 (sCons$ (shd$ ?v2) (stl$ ?v2))) (not (fun_app$c ?v0 (fun_app$e (fun_app$f ?v1 (shd$ ?v2)) (stl$ ?v2))))))) ))
(assert (forall ((?v0 A_a_prod_a_a_prod_a_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_stream$)) (= (smap2$b ?v0 ?v1 ?v2) (sCons$ (fun_app$q (fun_app$v ?v0 (shd$a ?v1)) (shd$a ?v2)) (smap2$b ?v0 (stl$a ?v1) (stl$a ?v2)))) ))
(assert (forall ((?v0 A_a_prod_a_a_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_stream$)) (= (fun_app$l (fun_app$s (smap2$a ?v0) ?v1) ?v2) (sCons$ (fun_app$t (fun_app$u ?v0 (shd$a ?v1)) (shd$ ?v2)) (fun_app$l (fun_app$s (smap2$a ?v0) (stl$a ?v1)) (stl$ ?v2)))) ))
(assert (forall ((?v0 A_a_a_prod_a_fun_fun$) (?v1 A_stream$) (?v2 A_a_prod_stream$)) (= (smap2$ ?v0 ?v1 ?v2) (sCons$ (fun_app$q (fun_app$r ?v0 (shd$ ?v1)) (shd$a ?v2)) (smap2$ ?v0 (stl$ ?v1) (stl$a ?v2)))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (fun_app$l (fun_app$ac (smap2$g ?v0) ?v1) ?v2) (sCons$ (fun_app$t (fun_app$ad ?v0 (shd$ ?v1)) (shd$ ?v2)) (fun_app$l (fun_app$ac (smap2$g ?v0) (stl$ ?v1)) (stl$ ?v2)))) ))
(assert (forall ((?v0 A_a_prod_a_a_prod_a_a_prod_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_stream$)) (= (smap2$f ?v0 ?v1 ?v2) (sCons$a (fun_app$y (fun_app$ab ?v0 (shd$a ?v1)) (shd$a ?v2)) (smap2$f ?v0 (stl$a ?v1) (stl$a ?v2)))) ))
(assert (forall ((?v0 A_a_prod_a_a_a_prod_fun_fun$) (?v1 A_a_prod_stream$) (?v2 A_stream$)) (= (smap2$e ?v0 ?v1 ?v2) (sCons$a (fun_app$w (fun_app$aa ?v0 (shd$a ?v1)) (shd$ ?v2)) (smap2$e ?v0 (stl$a ?v1) (stl$ ?v2)))) ))
(assert (forall ((?v0 A_a_a_prod_a_a_prod_fun_fun$) (?v1 A_stream$) (?v2 A_a_prod_stream$)) (= (smap2$d ?v0 ?v1 ?v2) (sCons$a (fun_app$y (fun_app$z ?v0 (shd$ ?v1)) (shd$a ?v2)) (smap2$d ?v0 (stl$ ?v1) (stl$a ?v2)))) ))
(assert (forall ((?v0 A_a_a_a_prod_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (smap2$c ?v0 ?v1 ?v2) (sCons$a (fun_app$w (fun_app$x ?v0 (shd$ ?v1)) (shd$ ?v2)) (smap2$c ?v0 (stl$ ?v1) (stl$ ?v2)))) ))
(assert (forall ((?v0 A_treeFI_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_set$)) (= (collect$a (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_stream_set$)) (= (collect$b (uub$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_treeFI$) (?v1 A_treeFI_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$a ?v1 ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$b ?v0 (collect$a ?v1)) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream_bool_fun$)) (= (member$a ?v0 (collect$b ?v1)) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 A_treeFI$) (?v1 A_treeFI_treeFI$)) (=> (and (member$ ?v0 (set_treeFI$ ?v1)) (and (forall ((?v2 A_treeFI_treeFI_list$)) (=> (= ?v1 (tree$a ?v0 ?v2)) false) ) (forall ((?v2 A_treeFI$) (?v3 A_treeFI_treeFI_list$) (?v4 A_treeFI_treeFI$)) (=> (and (= ?v1 (tree$a ?v2 ?v3)) (and (member$d ?v4 (set$b ?v3)) (member$ ?v0 (set_treeFI$ ?v4)))) false) ))) false) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream_treeFI$)) (=> (and (member$a ?v0 (set_treeFI$a ?v1)) (and (forall ((?v2 A_stream_treeFI_list$)) (=> (= ?v1 (tree$b ?v0 ?v2)) false) ) (forall ((?v2 A_stream$) (?v3 A_stream_treeFI_list$) (?v4 A_stream_treeFI$)) (=> (and (= ?v1 (tree$b ?v2 ?v3)) (and (member$e ?v4 (set$c ?v3)) (member$a ?v0 (set_treeFI$a ?v4)))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_treeFI$)) (=> (and (member$b ?v0 (set_treeFI$b ?v1)) (and (forall ((?v2 A_treeFI_list$)) (=> (= ?v1 (tree$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_treeFI_list$) (?v4 A_treeFI$)) (=> (and (= ?v1 (tree$ ?v2 ?v3)) (and (member$ ?v4 (set$ ?v3)) (member$b ?v0 (set_treeFI$b ?v4)))) false) ))) false) ))
(assert (forall ((?v0 A_treeFI$) (?v1 A_treeFI_treeFI$) (?v2 A_treeFI_a_treeFI_treeFI_bool_fun_fun$)) (=> (and (member$ ?v0 (set_treeFI$ ?v1)) (and (forall ((?v3 A_treeFI$) (?v4 A_treeFI_treeFI_list$)) (fun_app$ak (fun_app$al ?v2 ?v3) (tree$a ?v3 ?v4)) ) (forall ((?v3 A_treeFI$) (?v4 A_treeFI_treeFI_list$) (?v5 A_treeFI_treeFI$) (?v6 A_treeFI$)) (=> (and (member$d ?v5 (set$b ?v4)) (and (member$ ?v6 (set_treeFI$ ?v5)) (fun_app$ak (fun_app$al ?v2 ?v6) ?v5))) (fun_app$ak (fun_app$al ?v2 ?v6) (tree$a ?v3 ?v4))) ))) (fun_app$ak (fun_app$al ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream_treeFI$) (?v2 A_stream_a_stream_treeFI_bool_fun_fun$)) (=> (and (member$a ?v0 (set_treeFI$a ?v1)) (and (forall ((?v3 A_stream$) (?v4 A_stream_treeFI_list$)) (fun_app$am (fun_app$an ?v2 ?v3) (tree$b ?v3 ?v4)) ) (forall ((?v3 A_stream$) (?v4 A_stream_treeFI_list$) (?v5 A_stream_treeFI$) (?v6 A_stream$)) (=> (and (member$e ?v5 (set$c ?v4)) (and (member$a ?v6 (set_treeFI$a ?v5)) (fun_app$am (fun_app$an ?v2 ?v6) ?v5))) (fun_app$am (fun_app$an ?v2 ?v6) (tree$b ?v3 ?v4))) ))) (fun_app$am (fun_app$an ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_treeFI$) (?v2 A_a_treeFI_bool_fun_fun$)) (=> (and (member$b ?v0 (set_treeFI$b ?v1)) (and (forall ((?v3 A$) (?v4 A_treeFI_list$)) (fun_app$a (fun_app$ao ?v2 ?v3) (tree$ ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_treeFI_list$) (?v5 A_treeFI$) (?v6 A$)) (=> (and (member$ ?v5 (set$ ?v4)) (and (member$b ?v6 (set_treeFI$b ?v5)) (fun_app$a (fun_app$ao ?v2 ?v6) ?v5))) (fun_app$a (fun_app$ao ?v2 ?v6) (tree$ ?v3 ?v4))) ))) (fun_app$a (fun_app$ao ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$) (?v2 A_treeFI$) (?v3 A_treeFI$)) (=> (and (member$d ?v0 (set$b ?v1)) (member$ ?v2 (set_treeFI$ ?v0))) (member$ ?v2 (set_treeFI$ (tree$a ?v3 ?v1)))) ))
(assert (forall ((?v0 A_stream_treeFI$) (?v1 A_stream_treeFI_list$) (?v2 A_stream$) (?v3 A_stream$)) (=> (and (member$e ?v0 (set$c ?v1)) (member$a ?v2 (set_treeFI$a ?v0))) (member$a ?v2 (set_treeFI$a (tree$b ?v3 ?v1)))) ))
(assert (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$) (?v2 A$) (?v3 A$)) (=> (and (member$ ?v0 (set$ ?v1)) (member$b ?v2 (set_treeFI$b ?v0))) (member$b ?v2 (set_treeFI$b (tree$ ?v3 ?v1)))) ))
(assert (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI$) (?v2 A_treeFI$)) (=> (and (member$d ?v0 (set$b (sub$b ?v1))) (member$ ?v2 (set_treeFI$ ?v0))) (member$ ?v2 (set_treeFI$ ?v1))) ))
(assert (forall ((?v0 A_stream_treeFI$) (?v1 A_stream_treeFI$) (?v2 A_stream$)) (=> (and (member$e ?v0 (set$c (sub$c ?v1))) (member$a ?v2 (set_treeFI$a ?v0))) (member$a ?v2 (set_treeFI$a ?v1))) ))
(assert (forall ((?v0 A_treeFI$) (?v1 A_treeFI$) (?v2 A$)) (=> (and (member$ ?v0 (set$ (sub$ ?v1))) (member$b ?v2 (set_treeFI$b ?v0))) (member$b ?v2 (set_treeFI$b ?v1))) ))
(assert (forall ((?v0 A_a_prod_stream$)) (= (sCons$a (shd$a ?v0) (stl$a ?v0)) ?v0) ))
(assert (forall ((?v0 A_stream$)) (= (sCons$ (shd$ ?v0) (stl$ ?v0)) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_stream$) (?v2 A_a_prod$) (?v3 A_a_prod_stream$)) (= (= (sCons$a ?v0 ?v1) (sCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_stream$)) (=> (forall ((?v1 A$) (?v2 A_stream$)) (=> (= ?v0 (sCons$ ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 A_a_prod_stream$)) (=> (forall ((?v1 A_a_prod$) (?v2 A_a_prod_stream$)) (=> (= ?v0 (sCons$a ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 A$) (?v1 A_stream$)) (! (= (stl$ (sCons$ ?v0 ?v1)) ?v1) :pattern ((sCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_stream$)) (! (= (stl$a (sCons$a ?v0 ?v1)) ?v1) :pattern ((sCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_stream$)) (! (= (shd$a (sCons$a ?v0 ?v1)) ?v0) :pattern ((sCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_stream$)) (! (= (shd$ (sCons$ ?v0 ?v1)) ?v0) :pattern ((sCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (fun_app$l (fun_app$ac (smap2$g ?v0) (sCons$ ?v1 ?v2)) (sCons$ ?v3 ?v4)) (sCons$ (fun_app$t (fun_app$ad ?v0 ?v1) ?v3) (fun_app$l (fun_app$ac (smap2$g ?v0) ?v2) ?v4))) :pattern ((fun_app$l (fun_app$ac (smap2$g ?v0) (sCons$ ?v1 ?v2)) (sCons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_a_a_a_prod_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (smap2$c ?v0 (sCons$ ?v1 ?v2) (sCons$ ?v3 ?v4)) (sCons$a (fun_app$w (fun_app$x ?v0 ?v1) ?v3) (smap2$c ?v0 ?v2 ?v4))) :pattern ((smap2$c ?v0 (sCons$ ?v1 ?v2) (sCons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_a_a_prod_a_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 A_a_prod$) (?v4 A_a_prod_stream$)) (! (= (smap2$ ?v0 (sCons$ ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$ (fun_app$q (fun_app$r ?v0 ?v1) ?v3) (smap2$ ?v0 ?v2 ?v4))) :pattern ((smap2$ ?v0 (sCons$ ?v1 ?v2) (sCons$a ?v3 ?v4))))))
(assert (forall ((?v0 A_a_a_prod_a_a_prod_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 A_a_prod$) (?v4 A_a_prod_stream$)) (! (= (smap2$d ?v0 (sCons$ ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$a (fun_app$y (fun_app$z ?v0 ?v1) ?v3) (smap2$d ?v0 ?v2 ?v4))) :pattern ((smap2$d ?v0 (sCons$ ?v1 ?v2) (sCons$a ?v3 ?v4))))))
(assert (forall ((?v0 A_a_prod_a_a_fun_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (fun_app$l (fun_app$s (smap2$a ?v0) (sCons$a ?v1 ?v2)) (sCons$ ?v3 ?v4)) (sCons$ (fun_app$t (fun_app$u ?v0 ?v1) ?v3) (fun_app$l (fun_app$s (smap2$a ?v0) ?v2) ?v4))) :pattern ((fun_app$l (fun_app$s (smap2$a ?v0) (sCons$a ?v1 ?v2)) (sCons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_a_prod_a_a_a_prod_fun_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (smap2$e ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4)) (sCons$a (fun_app$w (fun_app$aa ?v0 ?v1) ?v3) (smap2$e ?v0 ?v2 ?v4))) :pattern ((smap2$e ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_a_prod_a_a_prod_a_fun_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_stream$) (?v3 A_a_prod$) (?v4 A_a_prod_stream$)) (! (= (smap2$b ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$ (fun_app$q (fun_app$v ?v0 ?v1) ?v3) (smap2$b ?v0 ?v2 ?v4))) :pattern ((smap2$b ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4))))))
(assert (forall ((?v0 A_a_prod_a_a_prod_a_a_prod_fun_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_stream$) (?v3 A_a_prod$) (?v4 A_a_prod_stream$)) (! (= (smap2$f ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$a (fun_app$y (fun_app$ab ?v0 ?v1) ?v3) (smap2$f ?v0 ?v2 ?v4))) :pattern ((smap2$f ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4))))))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_nat_stream_fun$) (?v3 Nat_nat_fun$) (?v4 Nat$)) (= (fun_app$m (fun_app$n (fun_app$o (fun_app$p (corec_stream$ ?v0) ?v1) ?v2) ?v3) ?v4) (sCons$b (fun_app$d ?v0 ?v4) (ite (fun_app$ae ?v1 ?v4) (fun_app$m ?v2 ?v4) (fun_app$m (fun_app$n (fun_app$o (fun_app$p (corec_stream$ ?v0) ?v1) ?v2) ?v3) (fun_app$d ?v3 ?v4))))) ))
(assert (forall ((?v0 A_a_stream_a_fun_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$e (case_stream$ ?v0) (sCons$ ?v1 ?v2)) (fun_app$e (fun_app$f ?v0 ?v1) ?v2)) :pattern ((fun_app$e (case_stream$ ?v0) (sCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$l (sdrop_while$a ?v0) (sCons$ ?v1 ?v2)) (ite (fun_app$c ?v0 ?v1) (fun_app$l (sdrop_while$a ?v0) ?v2) (sCons$ ?v1 ?v2))) :pattern ((fun_app$l (sdrop_while$a ?v0) (sCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_stream$)) (! (= (sdrop_while$ ?v0 (sCons$a ?v1 ?v2)) (ite (fun_app$aj ?v0 ?v1) (sdrop_while$ ?v0 ?v2) (sCons$a ?v1 ?v2))) :pattern ((sdrop_while$ ?v0 (sCons$a ?v1 ?v2))))))
(assert (forall ((?v0 A$) (?v1 A_stream$) (?v2 A_stream$)) (! (= (fun_app$l (sinterleave$a (sCons$ ?v0 ?v1)) ?v2) (sCons$ ?v0 (fun_app$l (sinterleave$a ?v2) ?v1))) :pattern ((fun_app$l (sinterleave$a (sCons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_stream$)) (! (= (sinterleave$ (sCons$a ?v0 ?v1) ?v2) (sCons$a ?v0 (sinterleave$ ?v2 ?v1))) :pattern ((sinterleave$ (sCons$a ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 A_treeFI_treeFI$)) (member$ (lab$b ?v0) (set_treeFI$ ?v0)) ))
(assert (forall ((?v0 A_stream_treeFI$)) (member$a (lab$c ?v0) (set_treeFI$a ?v0)) ))
(assert (forall ((?v0 A_treeFI$)) (member$b (lab$ ?v0) (set_treeFI$b ?v0)) ))
(assert (forall ((?v0 A_treeFI$) (?v1 A_treeFI_treeFI_list$)) (member$ ?v0 (set_treeFI$ (tree$a ?v0 ?v1))) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream_treeFI_list$)) (member$a ?v0 (set_treeFI$a (tree$b ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_treeFI_list$)) (member$b ?v0 (set_treeFI$b (tree$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_prod_stream$)) (=> (=> (= ?v0 (sCons$a (shd$a ?v0) (stl$a ?v0))) false) false) ))
(assert (forall ((?v0 A_stream$)) (=> (=> (= ?v0 (sCons$ (shd$ ?v0) (stl$ ?v0))) false) false) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$b (smember$ ?v0) (sCons$ ?v1 ?v2)) (ite (= ?v0 ?v1) true (fun_app$b (smember$ ?v0) ?v2))) :pattern ((fun_app$b (smember$ ?v0) (sCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod$) (?v2 A_a_prod_stream$)) (! (= (fun_app$af (smember$a ?v0) (sCons$a ?v1 ?v2)) (ite (= ?v0 ?v1) true (fun_app$af (smember$a ?v0) ?v2))) :pattern ((fun_app$af (smember$a ?v0) (sCons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$b (pred_stream$ ?v0) (sCons$ ?v1 ?v2)) (and (fun_app$c ?v0 ?v1) (fun_app$b (pred_stream$ ?v0) ?v2))) :pattern ((fun_app$b (pred_stream$ ?v0) (sCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_stream$)) (! (= (fun_app$af (pred_stream$a ?v0) (sCons$a ?v1 ?v2)) (and (fun_app$aj ?v0 ?v1) (fun_app$af (pred_stream$a ?v0) ?v2))) :pattern ((fun_app$af (pred_stream$a ?v0) (sCons$a ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_stream$) (?v2 Nat$) (?v3 Nat_stream$)) (= (= (fun_app$ap (smap$ ?v0) ?v1) (sCons$b ?v2 ?v3)) (and (= (fun_app$d ?v0 (shd$b ?v1)) ?v2) (= (fun_app$ap (smap$ ?v0) (stl$b ?v1)) ?v3))) ))
(assert (forall ((?v0 A_a_prod_a_fun$) (?v1 A_a_prod_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (smap$a ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= (fun_app$q ?v0 (shd$a ?v1)) ?v2) (= (smap$a ?v0 (stl$a ?v1)) ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (fun_app$l (smap$b ?v0) ?v1) (sCons$ ?v2 ?v3)) (and (= (fun_app$t ?v0 (shd$ ?v1)) ?v2) (= (fun_app$l (smap$b ?v0) (stl$ ?v1)) ?v3))) ))
(assert (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod$) (?v3 A_a_prod_stream$)) (= (= (smap$c ?v0 ?v1) (sCons$a ?v2 ?v3)) (and (= (fun_app$y ?v0 (shd$a ?v1)) ?v2) (= (smap$c ?v0 (stl$a ?v1)) ?v3))) ))
(assert (forall ((?v0 A_a_a_prod_fun$) (?v1 A_stream$) (?v2 A_a_prod$) (?v3 A_a_prod_stream$)) (= (= (smap$d ?v0 ?v1) (sCons$a ?v2 ?v3)) (and (= (fun_app$w ?v0 (shd$ ?v1)) ?v2) (= (smap$d ?v0 (stl$ ?v1)) ?v3))) ))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_stream$)) (= (sfilter$ ?v0 ?v1) (sCons$a (shd$a (sdrop_while$ (fun_app$aq (comp$ uuc$) ?v0) ?v1)) (sfilter$ ?v0 (stl$a (sdrop_while$ (fun_app$aq (comp$ uuc$) ?v0) ?v1))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (fun_app$l (sfilter$a ?v0) ?v1) (sCons$ (shd$ (fun_app$l (sdrop_while$a (fun_app$ar (comp$a uuc$) ?v0)) ?v1)) (fun_app$l (sfilter$a ?v0) (stl$ (fun_app$l (sdrop_while$a (fun_app$ar (comp$a uuc$) ?v0)) ?v1))))) ))
(assert (forall ((?v0 A_treeFI_stream$) (?v1 A_treeFI_set$)) (=> (and (member$f (stl$c ?v0) (streams$ ?v1)) (member$ (shd$c ?v0) ?v1)) (member$f ?v0 (streams$ ?v1))) ))
(assert (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (=> (and (member$g (stl$d ?v0) (streams$a ?v1)) (member$a (shd$d ?v0) ?v1)) (member$g ?v0 (streams$a ?v1))) ))
(assert (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_set$)) (=> (and (member$h (stl$a ?v0) (streams$b ?v1)) (member$i (shd$a ?v0) ?v1)) (member$h ?v0 (streams$b ?v1))) ))
(assert (forall ((?v0 A_stream$) (?v1 A_set$)) (=> (and (member$a (stl$ ?v0) (streams$c ?v1)) (member$b (shd$ ?v0) ?v1)) (member$a ?v0 (streams$c ?v1))) ))
(assert (forall ((?v0 A_treeFI_stream$) (?v1 A_treeFI_set$)) (=> (and (member$f ?v0 (streams$ ?v1)) (=> (and (member$ (shd$c ?v0) ?v1) (member$f (stl$c ?v0) (streams$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (=> (and (member$g ?v0 (streams$a ?v1)) (=> (and (member$a (shd$d ?v0) ?v1) (member$g (stl$d ?v0) (streams$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_set$)) (=> (and (member$h ?v0 (streams$b ?v1)) (=> (and (member$i (shd$a ?v0) ?v1) (member$h (stl$a ?v0) (streams$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_stream$) (?v1 A_set$)) (=> (and (member$a ?v0 (streams$c ?v1)) (=> (and (member$b (shd$ ?v0) ?v1) (member$a (stl$ ?v0) (streams$c ?v1))) false)) false) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$b (stream_all$ ?v0) (sCons$ ?v1 ?v2)) (and (fun_app$c ?v0 ?v1) (fun_app$b (stream_all$ ?v0) ?v2))) :pattern ((fun_app$b (stream_all$ ?v0) (sCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_stream$)) (! (= (fun_app$af (stream_all$a ?v0) (sCons$a ?v1 ?v2)) (and (fun_app$aj ?v0 ?v1) (fun_app$af (stream_all$a ?v0) ?v2))) :pattern ((fun_app$af (stream_all$a ?v0) (sCons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$) (?v2 A_bool_fun$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 A_stream$)) (=> (fun_app$b ?v0 ?v3) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v3 (sCons$ ?v4 ?v5)) (and (fun_app$c ?v2 ?v4) (or (fun_app$b ?v0 ?v5) (fun_app$b (streamsp$ ?v2) ?v5)))) )) )) (fun_app$b (streamsp$ ?v2) ?v1)) ))
(assert (forall ((?v0 A_a_prod_stream_bool_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_bool_fun$)) (=> (and (fun_app$af ?v0 ?v1) (forall ((?v3 A_a_prod_stream$)) (=> (fun_app$af ?v0 ?v3) (exists ((?v4 A_a_prod$) (?v5 A_a_prod_stream$)) (and (= ?v3 (sCons$a ?v4 ?v5)) (and (fun_app$aj ?v2 ?v4) (or (fun_app$af ?v0 ?v5) (fun_app$af (streamsp$a ?v2) ?v5)))) )) )) (fun_app$af (streamsp$a ?v2) ?v1)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (fun_app$l (smap$b ?v0) ?v1)) (fun_app$l (smap$b ?v0) (stl$ ?v1))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_stream$)) (= (stl$b (fun_app$ap (smap$ ?v0) ?v1)) (fun_app$ap (smap$ ?v0) (stl$b ?v1))) ))
(assert (forall ((?v0 A_a_prod_a_fun$) (?v1 A_a_prod_stream$)) (= (shd$ (smap$a ?v0 ?v1)) (fun_app$q ?v0 (shd$a ?v1))) ))
(assert (forall ((?v0 A_a_a_prod_fun$) (?v1 A_stream$)) (= (shd$a (smap$d ?v0 ?v1)) (fun_app$w ?v0 (shd$ ?v1))) ))
(assert (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod_stream$)) (= (shd$a (smap$c ?v0 ?v1)) (fun_app$y ?v0 (shd$a ?v1))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_stream$)) (= (shd$b (fun_app$ap (smap$ ?v0) ?v1)) (fun_app$d ?v0 (shd$b ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (fun_app$l (smap$b ?v0) ?v1)) (fun_app$t ?v0 (shd$ ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_nat_nat_prod_stream_fun$) (?v4 Nat_nat_fun$)) (= (fun_app$as (comp$b (smap$e ?v0)) (fun_app$at (fun_app$au (fun_app$av (corec_stream$a ?v1) ?v2) ?v3) ?v4)) (fun_app$at (fun_app$au (fun_app$av (corec_stream$a (fun_app$aw (comp$c ?v0) ?v1)) ?v2) (fun_app$as (comp$b (smap$e ?v0)) ?v3)) ?v4)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_bool_fun$) (?v3 Nat_nat_prod_nat_nat_prod_stream_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$)) (= (comp$d (smap$f ?v0) (fun_app$ax (fun_app$ay (fun_app$az (corec_stream$b ?v1) ?v2) ?v3) ?v4)) (corec_stream$c (fun_app$ba (comp$e ?v0) ?v1) ?v2 (comp$d (smap$f ?v0) ?v3) ?v4)) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_nat_stream_stream_fun$) (?v4 Nat_nat_fun$)) (= (fun_app$bb (comp$f (smap$g ?v0)) (fun_app$bc (fun_app$bd (fun_app$be (corec_stream$d ?v1) ?v2) ?v3) ?v4)) (fun_app$bc (fun_app$bd (fun_app$be (corec_stream$d (fun_app$bf (comp$g ?v0) ?v1)) ?v2) (fun_app$bb (comp$f (smap$g ?v0)) ?v3)) ?v4)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_bool_stream_fun$) (?v4 A_a_fun$)) (= (fun_app$bg (comp$h (smap$h ?v0)) (fun_app$bh (fun_app$bi (fun_app$bj (corec_stream$e ?v1) ?v2) ?v3) ?v4)) (fun_app$bh (fun_app$bi (fun_app$bj (corec_stream$e (fun_app$ar (comp$a ?v0) ?v1)) ?v2) (fun_app$bg (comp$h (smap$h ?v0)) ?v3)) ?v4)) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_nat_stream_fun$) (?v4 Nat_nat_fun$)) (= (fun_app$bk (comp$i (smap$i ?v0)) (fun_app$n (fun_app$o (fun_app$p (corec_stream$ ?v1) ?v2) ?v3) ?v4)) (fun_app$at (fun_app$au (fun_app$av (corec_stream$a (fun_app$bl (comp$j ?v0) ?v1)) ?v2) (fun_app$bk (comp$i (smap$i ?v0)) ?v3)) ?v4)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_nat_stream_fun$) (?v4 Nat_nat_fun$)) (= (fun_app$bf (comp$g (smap$ ?v0)) (fun_app$n (fun_app$o (fun_app$p (corec_stream$ ?v1) ?v2) ?v3) ?v4)) (fun_app$n (fun_app$o (fun_app$p (corec_stream$ (fun_app$bm (comp$k ?v0) ?v1)) ?v2) (fun_app$bf (comp$g (smap$ ?v0)) ?v3)) ?v4)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_stream$)) (= (fun_app$bn (smap$e ?v0) (fun_app$bo (smap$i ?v1) ?v2)) (fun_app$bo (smap$i (fun_app$aw (comp$c ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_stream$)) (= (fun_app$bp (smap$f ?v0) (fun_app$bn (smap$e ?v1) ?v2)) (fun_app$bp (smap$f (fun_app$ba (comp$e ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_stream$)) (= (fun_app$bq (smap$g ?v0) (smap$j ?v1 ?v2)) (smap$j (fun_app$bf (comp$g ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_stream$)) (= (fun_app$br (smap$h ?v0) (smap$k ?v1 ?v2)) (smap$k (fun_app$ar (comp$a ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_stream$)) (= (fun_app$bo (smap$i ?v0) (fun_app$ap (smap$ ?v1) ?v2)) (fun_app$bo (smap$i (fun_app$bl (comp$j ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (fun_app$l (smap$b ?v0) (fun_app$l (smap$b ?v1) ?v2)) (fun_app$l (smap$b (fun_app$bs (comp$l ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_stream$)) (= (fun_app$ap (smap$ ?v0) (fun_app$ap (smap$ ?v1) ?v2)) (fun_app$ap (smap$ (fun_app$bm (comp$k ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_treeFI_stream$) (?v1 A_treeFI_set$) (?v2 A_treeFI_a_treeFI_fun$) (?v3 A_treeFI_set$)) (=> (and (member$f ?v0 (streams$ ?v1)) (forall ((?v4 A_treeFI$)) (=> (member$ ?v4 ?v1) (member$ (fun_app$bt ?v2 ?v4) ?v3)) )) (member$f (smap$l ?v2 ?v0) (streams$ ?v3))) ))
(assert (forall ((?v0 A_treeFI_stream$) (?v1 A_treeFI_set$) (?v2 A_treeFI_a_stream_fun$) (?v3 A_stream_set$)) (=> (and (member$f ?v0 (streams$ ?v1)) (forall ((?v4 A_treeFI$)) (=> (member$ ?v4 ?v1) (member$a (fun_app$bu ?v2 ?v4) ?v3)) )) (member$g (smap$m ?v2 ?v0) (streams$a ?v3))) ))
(assert (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$) (?v2 A_stream_a_treeFI_fun$) (?v3 A_treeFI_set$)) (=> (and (member$g ?v0 (streams$a ?v1)) (forall ((?v4 A_stream$)) (=> (member$a ?v4 ?v1) (member$ (fun_app$bv ?v2 ?v4) ?v3)) )) (member$f (smap$n ?v2 ?v0) (streams$ ?v3))) ))
(assert (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$) (?v2 A_stream_a_stream_fun$) (?v3 A_stream_set$)) (=> (and (member$g ?v0 (streams$a ?v1)) (forall ((?v4 A_stream$)) (=> (member$a ?v4 ?v1) (member$a (fun_app$l ?v2 ?v4) ?v3)) )) (member$g (smap$o ?v2 ?v0) (streams$a ?v3))) ))
(assert (forall ((?v0 A_treeFI_stream$) (?v1 A_treeFI_set$) (?v2 A_treeFI_a_fun$) (?v3 A_set$)) (=> (and (member$f ?v0 (streams$ ?v1)) (forall ((?v4 A_treeFI$)) (=> (member$ ?v4 ?v1) (member$b (fun_app$ai ?v2 ?v4) ?v3)) )) (member$a (smap$p ?v2 ?v0) (streams$c ?v3))) ))
(assert (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$) (?v2 A_stream_a_fun$) (?v3 A_set$)) (=> (and (member$g ?v0 (streams$a ?v1)) (forall ((?v4 A_stream$)) (=> (member$a ?v4 ?v1) (member$b (fun_app$e ?v2 ?v4) ?v3)) )) (member$a (smap$q ?v2 ?v0) (streams$c ?v3))) ))
(assert (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 A_a_treeFI_fun$) (?v3 A_treeFI_set$)) (=> (and (member$a ?v0 (streams$c ?v1)) (forall ((?v4 A$)) (=> (member$b ?v4 ?v1) (member$ (fun_app$bw ?v2 ?v4) ?v3)) )) (member$f (smap$r ?v2 ?v0) (streams$ ?v3))) ))
(assert (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 A_a_stream_fun$) (?v3 A_stream_set$)) (=> (and (member$a ?v0 (streams$c ?v1)) (forall ((?v4 A$)) (=> (member$b ?v4 ?v1) (member$a (fun_app$bx ?v2 ?v4) ?v3)) )) (member$g (smap$s ?v2 ?v0) (streams$a ?v3))) ))
(assert (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 A_a_fun$) (?v3 A_set$)) (=> (and (member$a ?v0 (streams$c ?v1)) (forall ((?v4 A$)) (=> (member$b ?v4 ?v1) (member$b (fun_app$t ?v2 ?v4) ?v3)) )) (member$a (fun_app$l (smap$b ?v2) ?v0) (streams$c ?v3))) ))
(assert (forall ((?v0 Nat_stream$) (?v1 Nat_set$) (?v2 Nat_nat_fun$) (?v3 Nat_set$)) (=> (and (member$j ?v0 (streams$d ?v1)) (forall ((?v4 Nat$)) (=> (member$k ?v4 ?v1) (member$k (fun_app$d ?v2 ?v4) ?v3)) )) (member$j (fun_app$ap (smap$ ?v2) ?v0) (streams$d ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat_stream$)) (! (= (fun_app$ap (smap$ ?v0) (sCons$b ?v1 ?v2)) (sCons$b (fun_app$d ?v0 ?v1) (fun_app$ap (smap$ ?v0) ?v2))) :pattern ((fun_app$ap (smap$ ?v0) (sCons$b ?v1 ?v2))))))
(assert (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$l (smap$b ?v0) (sCons$ ?v1 ?v2)) (sCons$ (fun_app$t ?v0 ?v1) (fun_app$l (smap$b ?v0) ?v2))) :pattern ((fun_app$l (smap$b ?v0) (sCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_a_prod_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (smap$d ?v0 (sCons$ ?v1 ?v2)) (sCons$a (fun_app$w ?v0 ?v1) (smap$d ?v0 ?v2))) :pattern ((smap$d ?v0 (sCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_prod_a_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_stream$)) (! (= (smap$a ?v0 (sCons$a ?v1 ?v2)) (sCons$ (fun_app$q ?v0 ?v1) (smap$a ?v0 ?v2))) :pattern ((smap$a ?v0 (sCons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_stream$)) (! (= (smap$c ?v0 (sCons$a ?v1 ?v2)) (sCons$a (fun_app$y ?v0 ?v1) (smap$c ?v0 ?v2))) :pattern ((smap$c ?v0 (sCons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (stl$ (fun_app$l (sfilter$a ?v0) ?v1)) (fun_app$l (sfilter$a ?v0) (stl$ (fun_app$l (sdrop_while$a (fun_app$ar (comp$a uuc$) ?v0)) ?v1)))) ))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_stream$)) (= (shd$a (sfilter$ ?v0 ?v1)) (shd$a (sdrop_while$ (fun_app$aq (comp$ uuc$) ?v0) ?v1))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (shd$ (fun_app$l (sfilter$a ?v0) ?v1)) (shd$ (fun_app$l (sdrop_while$a (fun_app$ar (comp$a uuc$) ?v0)) ?v1))) ))
(assert (forall ((?v0 A_stream$) (?v1 A_set$)) (=> (member$a ?v0 (streams$c ?v1)) (member$a (stl$ ?v0) (streams$c ?v1))) ))
(assert (forall ((?v0 A_treeFI_stream$) (?v1 A_treeFI_set$)) (=> (member$f ?v0 (streams$ ?v1)) (member$ (shd$c ?v0) ?v1)) ))
(assert (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (=> (member$g ?v0 (streams$a ?v1)) (member$a (shd$d ?v0) ?v1)) ))
(assert (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_set$)) (=> (member$h ?v0 (streams$b ?v1)) (member$i (shd$a ?v0) ?v1)) ))
(assert (forall ((?v0 A_stream$) (?v1 A_set$)) (=> (member$a ?v0 (streams$c ?v1)) (member$b (shd$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_treeFI$) (?v1 A_treeFI_stream$) (?v2 A_treeFI_set$)) (= (member$f (sCons$c ?v0 ?v1) (streams$ ?v2)) (and (member$ ?v0 ?v2) (member$f ?v1 (streams$ ?v2)))) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream_stream$) (?v2 A_stream_set$)) (= (member$g (sCons$d ?v0 ?v1) (streams$a ?v2)) (and (member$a ?v0 ?v2) (member$g ?v1 (streams$a ?v2)))) ))
(assert (forall ((?v0 A$) (?v1 A_stream$) (?v2 A_set$)) (= (member$a (sCons$ ?v0 ?v1) (streams$c ?v2)) (and (member$b ?v0 ?v2) (member$a ?v1 (streams$c ?v2)))) ))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_set$)) (= (member$h (sCons$a ?v0 ?v1) (streams$b ?v2)) (and (member$i ?v0 ?v2) (member$h ?v1 (streams$b ?v2)))) ))
(assert (forall ((?v0 A_treeFI_stream$) (?v1 A_treeFI_set$)) (= (member$f ?v0 (streams$ ?v1)) (exists ((?v2 A_treeFI$) (?v3 A_treeFI_stream$)) (and (= ?v0 (sCons$c ?v2 ?v3)) (and (member$ ?v2 ?v1) (member$f ?v3 (streams$ ?v1)))) )) ))
(assert (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (= (member$g ?v0 (streams$a ?v1)) (exists ((?v2 A_stream$) (?v3 A_stream_stream$)) (and (= ?v0 (sCons$d ?v2 ?v3)) (and (member$a ?v2 ?v1) (member$g ?v3 (streams$a ?v1)))) )) ))
(assert (forall ((?v0 A_stream$) (?v1 A_set$)) (= (member$a ?v0 (streams$c ?v1)) (exists ((?v2 A$) (?v3 A_stream$)) (and (= ?v0 (sCons$ ?v2 ?v3)) (and (member$b ?v2 ?v1) (member$a ?v3 (streams$c ?v1)))) )) ))
(assert (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_set$)) (= (member$h ?v0 (streams$b ?v1)) (exists ((?v2 A_a_prod$) (?v3 A_a_prod_stream$)) (and (= ?v0 (sCons$a ?v2 ?v3)) (and (member$i ?v2 ?v1) (member$h ?v3 (streams$b ?v1)))) )) ))
(assert (forall ((?v0 A_treeFI_stream$) (?v1 A_treeFI_set$)) (=> (and (member$f ?v0 (streams$ ?v1)) (forall ((?v2 A_treeFI$) (?v3 A_treeFI_stream$)) (=> (and (= ?v0 (sCons$c ?v2 ?v3)) (and (member$ ?v2 ?v1) (member$f ?v3 (streams$ ?v1)))) false) )) false) ))
(assert (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (=> (and (member$g ?v0 (streams$a ?v1)) (forall ((?v2 A_stream$) (?v3 A_stream_stream$)) (=> (and (= ?v0 (sCons$d ?v2 ?v3)) (and (member$a ?v2 ?v1) (member$g ?v3 (streams$a ?v1)))) false) )) false) ))
(assert (forall ((?v0 A_stream$) (?v1 A_set$)) (=> (and (member$a ?v0 (streams$c ?v1)) (forall ((?v2 A$) (?v3 A_stream$)) (=> (and (= ?v0 (sCons$ ?v2 ?v3)) (and (member$b ?v2 ?v1) (member$a ?v3 (streams$c ?v1)))) false) )) false) ))
(assert (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_set$)) (=> (and (member$h ?v0 (streams$b ?v1)) (forall ((?v2 A_a_prod$) (?v3 A_a_prod_stream$)) (=> (and (= ?v0 (sCons$a ?v2 ?v3)) (and (member$i ?v2 ?v1) (member$h ?v3 (streams$b ?v1)))) false) )) false) ))
(assert (forall ((?v0 A_treeFI_stream_bool_fun$) (?v1 A_treeFI_stream$) (?v2 A_treeFI_set$)) (=> (and (fun_app$by ?v0 ?v1) (forall ((?v3 A_treeFI_stream$)) (=> (fun_app$by ?v0 ?v3) (exists ((?v4 A_treeFI$) (?v5 A_treeFI_stream$)) (and (= ?v3 (sCons$c ?v4 ?v5)) (and (member$ ?v4 ?v2) (or (fun_app$by ?v0 ?v5) (member$f ?v5 (streams$ ?v2))))) )) )) (member$f ?v1 (streams$ ?v2))) ))
(assert (forall ((?v0 A_stream_stream_bool_fun$) (?v1 A_stream_stream$) (?v2 A_stream_set$)) (=> (and (fun_app$bz ?v0 ?v1) (forall ((?v3 A_stream_stream$)) (=> (fun_app$bz ?v0 ?v3) (exists ((?v4 A_stream$) (?v5 A_stream_stream$)) (and (= ?v3 (sCons$d ?v4 ?v5)) (and (member$a ?v4 ?v2) (or (fun_app$bz ?v0 ?v5) (member$g ?v5 (streams$a ?v2))))) )) )) (member$g ?v1 (streams$a ?v2))) ))
(assert (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$) (?v2 A_set$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 A_stream$)) (=> (fun_app$b ?v0 ?v3) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v3 (sCons$ ?v4 ?v5)) (and (member$b ?v4 ?v2) (or (fun_app$b ?v0 ?v5) (member$a ?v5 (streams$c ?v2))))) )) )) (member$a ?v1 (streams$c ?v2))) ))
(assert (forall ((?v0 A_a_prod_stream_bool_fun$) (?v1 A_a_prod_stream$) (?v2 A_a_prod_set$)) (=> (and (fun_app$af ?v0 ?v1) (forall ((?v3 A_a_prod_stream$)) (=> (fun_app$af ?v0 ?v3) (exists ((?v4 A_a_prod$) (?v5 A_a_prod_stream$)) (and (= ?v3 (sCons$a ?v4 ?v5)) (and (member$i ?v4 ?v2) (or (fun_app$af ?v0 ?v5) (member$h ?v5 (streams$b ?v2))))) )) )) (member$h ?v1 (streams$b ?v2))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$l (sfilter$a ?v0) (sCons$ ?v1 ?v2)) (ite (fun_app$c ?v0 ?v1) (sCons$ ?v1 (fun_app$l (sfilter$a ?v0) ?v2)) (fun_app$l (sfilter$a ?v0) ?v2))) :pattern ((fun_app$l (sfilter$a ?v0) (sCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_stream$)) (! (= (sfilter$ ?v0 (sCons$a ?v1 ?v2)) (ite (fun_app$aj ?v0 ?v1) (sCons$a ?v1 (sfilter$ ?v0 ?v2)) (sfilter$ ?v0 ?v2))) :pattern ((sfilter$ ?v0 (sCons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (fun_app$b (streamsp$ ?v0) ?v1) (exists ((?v2 A$) (?v3 A_stream$)) (and (= ?v1 (sCons$ ?v2 ?v3)) (and (fun_app$c ?v0 ?v2) (fun_app$b (streamsp$ ?v0) ?v3))) )) ))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_stream$)) (= (fun_app$af (streamsp$a ?v0) ?v1) (exists ((?v2 A_a_prod$) (?v3 A_a_prod_stream$)) (and (= ?v1 (sCons$a ?v2 ?v3)) (and (fun_app$aj ?v0 ?v2) (fun_app$af (streamsp$a ?v0) ?v3))) )) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (=> (and (fun_app$b (streamsp$ ?v0) ?v1) (forall ((?v2 A$) (?v3 A_stream$)) (=> (and (= ?v1 (sCons$ ?v2 ?v3)) (and (fun_app$c ?v0 ?v2) (fun_app$b (streamsp$ ?v0) ?v3))) false) )) false) ))
(assert (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_stream$)) (=> (and (fun_app$af (streamsp$a ?v0) ?v1) (forall ((?v2 A_a_prod$) (?v3 A_a_prod_stream$)) (=> (and (= ?v1 (sCons$a ?v2 ?v3)) (and (fun_app$aj ?v0 ?v2) (fun_app$af (streamsp$a ?v0) ?v3))) false) )) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat$)) (! (= (fun_app$ca (fun_app$aw (comp$c ?v0) ?v1) ?v2) (fun_app$cb ?v0 (fun_app$ca ?v1 ?v2))) :pattern ((fun_app$ca (fun_app$aw (comp$c ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod$)) (! (= (fun_app$cc (fun_app$ba (comp$e ?v0) ?v1) ?v2) (fun_app$cc ?v0 (fun_app$cb ?v1 ?v2))) :pattern ((fun_app$cc (fun_app$ba (comp$e ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat$)) (! (= (fun_app$m (fun_app$bf (comp$g ?v0) ?v1) ?v2) (fun_app$ap ?v0 (fun_app$m ?v1 ?v2))) :pattern ((fun_app$m (fun_app$bf (comp$g ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$c (fun_app$ar (comp$a ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$ar (comp$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$ca (fun_app$bl (comp$j ?v0) ?v1) ?v2) (fun_app$ca ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$ca (fun_app$bl (comp$j ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$d (fun_app$bm (comp$k ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (fun_app$bm (comp$k ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_nat_prod_nat_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod$)) (=> (= (fun_app$d ?v0 (fun_app$d ?v1 ?v2)) (fun_app$cc ?v3 (fun_app$cb ?v4 ?v5))) (= (fun_app$d (fun_app$bm (comp$k ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ba (comp$e ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_nat_prod_fun$) (?v5 Nat$)) (=> (= (fun_app$cb ?v0 (fun_app$ca ?v1 ?v2)) (fun_app$cb ?v3 (fun_app$ca ?v4 ?v5))) (= (fun_app$ca (fun_app$aw (comp$c ?v0) ?v1) ?v2) (fun_app$ca (fun_app$aw (comp$c ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat$) (?v3 Nat_nat_nat_prod_fun$) (?v4 Nat_nat_fun$) (?v5 Nat$)) (=> (= (fun_app$cb ?v0 (fun_app$ca ?v1 ?v2)) (fun_app$ca ?v3 (fun_app$d ?v4 ?v5))) (= (fun_app$ca (fun_app$aw (comp$c ?v0) ?v1) ?v2) (fun_app$ca (fun_app$bl (comp$j ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat$)) (=> (= (fun_app$cc ?v0 (fun_app$cb ?v1 ?v2)) (fun_app$d ?v3 (fun_app$d ?v4 ?v5))) (= (fun_app$cc (fun_app$ba (comp$e ?v0) ?v1) ?v2) (fun_app$d (fun_app$bm (comp$k ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod_nat_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod$)) (=> (= (fun_app$cc ?v0 (fun_app$cb ?v1 ?v2)) (fun_app$cc ?v3 (fun_app$cb ?v4 ?v5))) (= (fun_app$cc (fun_app$ba (comp$e ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ba (comp$e ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat$) (?v3 Nat_stream_nat_stream_fun$) (?v4 Nat_nat_stream_fun$) (?v5 Nat$)) (=> (= (fun_app$ap ?v0 (fun_app$m ?v1 ?v2)) (fun_app$ap ?v3 (fun_app$m ?v4 ?v5))) (= (fun_app$m (fun_app$bf (comp$g ?v0) ?v1) ?v2) (fun_app$m (fun_app$bf (comp$g ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A$) (?v3 Bool_bool_fun$) (?v4 A_bool_fun$) (?v5 A$)) (=> (= (fun_app$ ?v0 (fun_app$c ?v1 ?v2)) (fun_app$ ?v3 (fun_app$c ?v4 ?v5))) (= (fun_app$c (fun_app$ar (comp$a ?v0) ?v1) ?v2) (fun_app$c (fun_app$ar (comp$a ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_nat_prod_fun$) (?v5 Nat$)) (=> (= (fun_app$ca ?v0 (fun_app$d ?v1 ?v2)) (fun_app$cb ?v3 (fun_app$ca ?v4 ?v5))) (= (fun_app$ca (fun_app$bl (comp$j ?v0) ?v1) ?v2) (fun_app$ca (fun_app$aw (comp$c ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_nat_nat_prod_fun$) (?v4 Nat_nat_fun$) (?v5 Nat$)) (=> (= (fun_app$ca ?v0 (fun_app$d ?v1 ?v2)) (fun_app$ca ?v3 (fun_app$d ?v4 ?v5))) (= (fun_app$ca (fun_app$bl (comp$j ?v0) ?v1) ?v2) (fun_app$ca (fun_app$bl (comp$j ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat$)) (=> (= (fun_app$d ?v0 (fun_app$d ?v1 ?v2)) (fun_app$d ?v3 (fun_app$d ?v4 ?v5))) (= (fun_app$d (fun_app$bm (comp$k ?v0) ?v1) ?v2) (fun_app$d (fun_app$bm (comp$k ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_nat_prod_fun$)) (=> (= (fun_app$cb ?v0 (fun_app$ca ?v1 ?v2)) (fun_app$cb ?v3 (fun_app$ca ?v4 ?v2))) (= (fun_app$ca (fun_app$aw (comp$c ?v0) ?v1) ?v2) (fun_app$ca (fun_app$aw (comp$c ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat$) (?v3 Nat_nat_nat_prod_fun$) (?v4 Nat_nat_fun$)) (=> (= (fun_app$cb ?v0 (fun_app$ca ?v1 ?v2)) (fun_app$ca ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$ca (fun_app$aw (comp$c ?v0) ?v1) ?v2) (fun_app$ca (fun_app$bl (comp$j ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod_nat_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= (fun_app$cc ?v0 (fun_app$cb ?v1 ?v2)) (fun_app$cc ?v3 (fun_app$cb ?v4 ?v2))) (= (fun_app$cc (fun_app$ba (comp$e ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ba (comp$e ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat$) (?v3 Nat_stream_nat_stream_fun$) (?v4 Nat_nat_stream_fun$)) (=> (= (fun_app$ap ?v0 (fun_app$m ?v1 ?v2)) (fun_app$ap ?v3 (fun_app$m ?v4 ?v2))) (= (fun_app$m (fun_app$bf (comp$g ?v0) ?v1) ?v2) (fun_app$m (fun_app$bf (comp$g ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A$) (?v3 Bool_bool_fun$) (?v4 A_bool_fun$)) (=> (= (fun_app$ ?v0 (fun_app$c ?v1 ?v2)) (fun_app$ ?v3 (fun_app$c ?v4 ?v2))) (= (fun_app$c (fun_app$ar (comp$a ?v0) ?v1) ?v2) (fun_app$c (fun_app$ar (comp$a ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_nat_prod_fun$)) (=> (= (fun_app$ca ?v0 (fun_app$d ?v1 ?v2)) (fun_app$cb ?v3 (fun_app$ca ?v4 ?v2))) (= (fun_app$ca (fun_app$bl (comp$j ?v0) ?v1) ?v2) (fun_app$ca (fun_app$aw (comp$c ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_nat_nat_prod_fun$) (?v4 Nat_nat_fun$)) (=> (= (fun_app$ca ?v0 (fun_app$d ?v1 ?v2)) (fun_app$ca ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$ca (fun_app$bl (comp$j ?v0) ?v1) ?v2) (fun_app$ca (fun_app$bl (comp$j ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$)) (=> (= (fun_app$d ?v0 (fun_app$d ?v1 ?v2)) (fun_app$d ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$d (fun_app$bm (comp$k ?v0) ?v1) ?v2) (fun_app$d (fun_app$bm (comp$k ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_fun$)) (=> (= (fun_app$d ?v0 (fun_app$d ?v1 ?v2)) (fun_app$d ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$d (fun_app$bm (comp$k (fun_app$bm (comp$k ?v5) ?v0)) ?v1) ?v2) (fun_app$d (fun_app$bm (comp$k (fun_app$bm (comp$k ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A$) (?v3 Bool_bool_fun$) (?v4 A_bool_fun$) (?v5 Bool_bool_fun$)) (=> (= (fun_app$c ?v0 (fun_app$t ?v1 ?v2)) (fun_app$ ?v3 (fun_app$c ?v4 ?v2))) (= (fun_app$c (fun_app$cd (comp$m (fun_app$ar (comp$a ?v5) ?v0)) ?v1) ?v2) (fun_app$c (fun_app$ar (comp$a (fun_app$ce (comp$n ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A$) (?v3 A_bool_fun$) (?v4 A_a_fun$) (?v5 Bool_bool_fun$)) (=> (= (fun_app$ ?v0 (fun_app$c ?v1 ?v2)) (fun_app$c ?v3 (fun_app$t ?v4 ?v2))) (= (fun_app$c (fun_app$ar (comp$a (fun_app$ce (comp$n ?v5) ?v0)) ?v1) ?v2) (fun_app$c (fun_app$cd (comp$m (fun_app$ar (comp$a ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_nat_prod_fun$)) (=> (= (fun_app$d ?v0 (fun_app$d ?v1 ?v2)) (fun_app$d ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$ca (fun_app$bl (comp$j (fun_app$bl (comp$j ?v5) ?v0)) ?v1) ?v2) (fun_app$ca (fun_app$bl (comp$j (fun_app$bl (comp$j ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_stream_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_stream_nat_stream_fun$) (?v4 Nat_nat_stream_fun$) (?v5 Nat_stream_nat_stream_fun$)) (=> (= (fun_app$m ?v0 (fun_app$d ?v1 ?v2)) (fun_app$ap ?v3 (fun_app$m ?v4 ?v2))) (= (fun_app$m (fun_app$n (comp$o (fun_app$bf (comp$g ?v5) ?v0)) ?v1) ?v2) (fun_app$m (fun_app$bf (comp$g (fun_app$cf (comp$p ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat$) (?v3 Nat_nat_stream_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_stream_nat_stream_fun$)) (=> (= (fun_app$ap ?v0 (fun_app$m ?v1 ?v2)) (fun_app$m ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$m (fun_app$bf (comp$g (fun_app$cf (comp$p ?v5) ?v0)) ?v1) ?v2) (fun_app$m (fun_app$n (comp$o (fun_app$bf (comp$g ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_prod_nat_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod_nat_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_fun$)) (=> (= (fun_app$d ?v0 (fun_app$cc ?v1 ?v2)) (fun_app$cc ?v3 (fun_app$cb ?v4 ?v2))) (= (fun_app$cc (fun_app$cg (comp$q (fun_app$bm (comp$k ?v5) ?v0)) ?v1) ?v2) (fun_app$cc (fun_app$ba (comp$e (fun_app$cg (comp$q ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat$) (?v3 Nat_nat_nat_prod_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_prod_nat_fun$)) (=> (= (fun_app$cb ?v0 (fun_app$ca ?v1 ?v2)) (fun_app$ca ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$d (fun_app$ch (comp$r (fun_app$ba (comp$e ?v5) ?v0)) ?v1) ?v2) (fun_app$d (fun_app$bm (comp$k (fun_app$ch (comp$r ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_fun$)) (=> (= (fun_app$ca ?v0 (fun_app$d ?v1 ?v2)) (fun_app$cb ?v3 (fun_app$ca ?v4 ?v2))) (= (fun_app$d (fun_app$bm (comp$k (fun_app$ch (comp$r ?v5) ?v0)) ?v1) ?v2) (fun_app$d (fun_app$ch (comp$r (fun_app$ba (comp$e ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_nat_prod_fun$)) (=> (= (fun_app$cc ?v0 (fun_app$ca ?v1 ?v2)) (fun_app$d ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$ca (fun_app$aw (comp$c (fun_app$ci (comp$s ?v5) ?v0)) ?v1) ?v2) (fun_app$ca (fun_app$bl (comp$j (fun_app$bl (comp$j ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat$)) (=> (= (fun_app$aw (comp$c ?v0) ?v1) ?v2) (= (fun_app$cb ?v0 (fun_app$ca ?v1 ?v3)) (fun_app$ca ?v2 ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_fun$) (?v3 Nat_nat_prod$)) (=> (= (fun_app$ba (comp$e ?v0) ?v1) ?v2) (= (fun_app$cc ?v0 (fun_app$cb ?v1 ?v3)) (fun_app$cc ?v2 ?v3))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_nat_stream_fun$) (?v3 Nat$)) (=> (= (fun_app$bf (comp$g ?v0) ?v1) ?v2) (= (fun_app$ap ?v0 (fun_app$m ?v1 ?v3)) (fun_app$m ?v2 ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A$)) (=> (= (fun_app$ar (comp$a ?v0) ?v1) ?v2) (= (fun_app$ ?v0 (fun_app$c ?v1 ?v3)) (fun_app$c ?v2 ?v3))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat$)) (=> (= (fun_app$bl (comp$j ?v0) ?v1) ?v2) (= (fun_app$ca ?v0 (fun_app$d ?v1 ?v3)) (fun_app$ca ?v2 ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (= (fun_app$bm (comp$k ?v0) ?v1) ?v2) (= (fun_app$d ?v0 (fun_app$d ?v1 ?v3)) (fun_app$d ?v2 ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$bm (comp$k ?v0) ?v1) ?v2) (= (fun_app$bm (comp$k ?v0) (fun_app$bm (comp$k ?v1) ?v3)) (fun_app$bm (comp$k ?v2) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$)) (=> (= (fun_app$ce (comp$n ?v0) ?v1) ?v2) (= (fun_app$ar (comp$a ?v0) (fun_app$ar (comp$a ?v1) ?v3)) (fun_app$ar (comp$a ?v2) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$ar (comp$a ?v0) ?v1) ?v2) (= (fun_app$ar (comp$a ?v0) (fun_app$cd (comp$m ?v1) ?v3)) (fun_app$cd (comp$m ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$ch (comp$r ?v0) ?v1) ?v2) (= (fun_app$ch (comp$r ?v0) (fun_app$bl (comp$j ?v1) ?v3)) (fun_app$bm (comp$k ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_nat_stream_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$bf (comp$g ?v0) ?v1) ?v2) (= (fun_app$bf (comp$g ?v0) (fun_app$n (comp$o ?v1) ?v3)) (fun_app$n (comp$o ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$bl (comp$j ?v0) ?v1) ?v2) (= (fun_app$bl (comp$j ?v0) (fun_app$bm (comp$k ?v1) ?v3)) (fun_app$bl (comp$j ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_stream_nat_stream_fun$) (?v2 Nat_stream_nat_stream_fun$) (?v3 Nat_nat_stream_fun$)) (=> (= (fun_app$cf (comp$p ?v0) ?v1) ?v2) (= (fun_app$bf (comp$g ?v0) (fun_app$bf (comp$g ?v1) ?v3)) (fun_app$bf (comp$g ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_prod_nat_fun$) (?v2 Nat_nat_prod_nat_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= (fun_app$cg (comp$q ?v0) ?v1) ?v2) (= (fun_app$cg (comp$q ?v0) (fun_app$ba (comp$e ?v1) ?v3)) (fun_app$ba (comp$e ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_nat_prod_fun$)) (=> (= (fun_app$ci (comp$s ?v0) ?v1) ?v2) (= (fun_app$bl (comp$j ?v0) (fun_app$ch (comp$r ?v1) ?v3)) (fun_app$aw (comp$c ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$aw (comp$c ?v0) ?v1) ?v2) (= (fun_app$aw (comp$c ?v0) (fun_app$bl (comp$j ?v1) ?v3)) (fun_app$bl (comp$j ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$bm (comp$k (fun_app$bm (comp$k ?v0) ?v1)) ?v2) (fun_app$bm (comp$k ?v0) (fun_app$bm (comp$k ?v1) ?v2))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$)) (= (fun_app$cd (comp$m (fun_app$ar (comp$a ?v0) ?v1)) ?v2) (fun_app$ar (comp$a ?v0) (fun_app$cd (comp$m ?v1) ?v2))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$)) (= (fun_app$ar (comp$a (fun_app$ce (comp$n ?v0) ?v1)) ?v2) (fun_app$ar (comp$a ?v0) (fun_app$ar (comp$a ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$n (comp$o (fun_app$bf (comp$g ?v0) ?v1)) ?v2) (fun_app$bf (comp$g ?v0) (fun_app$n (comp$o ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$bm (comp$k (fun_app$ch (comp$r ?v0) ?v1)) ?v2) (fun_app$ch (comp$r ?v0) (fun_app$bl (comp$j ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$bl (comp$j (fun_app$bl (comp$j ?v0) ?v1)) ?v2) (fun_app$bl (comp$j ?v0) (fun_app$bm (comp$k ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_stream_nat_stream_fun$) (?v2 Nat_nat_stream_fun$)) (= (fun_app$bf (comp$g (fun_app$cf (comp$p ?v0) ?v1)) ?v2) (fun_app$bf (comp$g ?v0) (fun_app$bf (comp$g ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_nat_prod_fun$)) (= (fun_app$ch (comp$r (fun_app$ba (comp$e ?v0) ?v1)) ?v2) (fun_app$ch (comp$r ?v0) (fun_app$aw (comp$c ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_fun$) (?v2 Nat_nat_nat_prod_fun$)) (= (fun_app$aw (comp$c (fun_app$ci (comp$s ?v0) ?v1)) ?v2) (fun_app$bl (comp$j ?v0) (fun_app$ch (comp$r ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_prod_nat_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$)) (= (fun_app$ba (comp$e (fun_app$cg (comp$q ?v0) ?v1)) ?v2) (fun_app$cg (comp$q ?v0) (fun_app$ba (comp$e ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat$)) (! (= (fun_app$ca (fun_app$aw (comp$c ?v0) ?v1) ?v2) (fun_app$cb ?v0 (fun_app$ca ?v1 ?v2))) :pattern ((fun_app$ca (fun_app$aw (comp$c ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod$)) (! (= (fun_app$cc (fun_app$ba (comp$e ?v0) ?v1) ?v2) (fun_app$cc ?v0 (fun_app$cb ?v1 ?v2))) :pattern ((fun_app$cc (fun_app$ba (comp$e ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat$)) (! (= (fun_app$m (fun_app$bf (comp$g ?v0) ?v1) ?v2) (fun_app$ap ?v0 (fun_app$m ?v1 ?v2))) :pattern ((fun_app$m (fun_app$bf (comp$g ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$c (fun_app$ar (comp$a ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$ar (comp$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$ca (fun_app$bl (comp$j ?v0) ?v1) ?v2) (fun_app$ca ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$ca (fun_app$bl (comp$j ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$d (fun_app$bm (comp$k ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (fun_app$bm (comp$k ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_nat_prod_fun$)) (=> (and (= (fun_app$aw (comp$c ?v0) ?v1) (fun_app$aw (comp$c ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$cb ?v0 (fun_app$ca ?v1 ?v4)) (fun_app$cb ?v2 (fun_app$ca ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat_nat_fun$)) (=> (and (= (fun_app$aw (comp$c ?v0) ?v1) (fun_app$bl (comp$j ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$cb ?v0 (fun_app$ca ?v1 ?v4)) (fun_app$ca ?v2 (fun_app$d ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (=> (and (= (fun_app$ba (comp$e ?v0) ?v1) (fun_app$ba (comp$e ?v2) ?v3)) (=> (forall ((?v4 Nat_nat_prod$)) (= (fun_app$cc ?v0 (fun_app$cb ?v1 ?v4)) (fun_app$cc ?v2 (fun_app$cb ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_stream_nat_stream_fun$) (?v3 Nat_nat_stream_fun$)) (=> (and (= (fun_app$bf (comp$g ?v0) ?v1) (fun_app$bf (comp$g ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$ap ?v0 (fun_app$m ?v1 ?v4)) (fun_app$ap ?v2 (fun_app$m ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$)) (=> (and (= (fun_app$ar (comp$a ?v0) ?v1) (fun_app$ar (comp$a ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$ ?v0 (fun_app$c ?v1 ?v4)) (fun_app$ ?v2 (fun_app$c ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_nat_prod_fun$)) (=> (and (= (fun_app$bl (comp$j ?v0) ?v1) (fun_app$aw (comp$c ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$ca ?v0 (fun_app$d ?v1 ?v4)) (fun_app$cb ?v2 (fun_app$ca ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat_nat_fun$)) (=> (and (= (fun_app$bl (comp$j ?v0) ?v1) (fun_app$bl (comp$j ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$ca ?v0 (fun_app$d ?v1 ?v4)) (fun_app$ca ?v2 (fun_app$d ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$)) (=> (and (= (fun_app$bm (comp$k ?v0) ?v1) (fun_app$bm (comp$k ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$d ?v0 (fun_app$d ?v1 ?v4)) (fun_app$d ?v2 (fun_app$d ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_fun$)) (=> (and (= (fun_app$bm (comp$k ?v0) ?v1) (fun_app$bm (comp$k ?v2) ?v3)) (= (fun_app$bm (comp$k ?v4) ?v2) ?v5)) (= (fun_app$bm (comp$k (fun_app$bm (comp$k ?v4) ?v0)) ?v1) (fun_app$bm (comp$k ?v5) ?v3))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 Bool_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$cd (comp$m ?v0) ?v1) (fun_app$ar (comp$a ?v2) ?v3)) (= (fun_app$ce (comp$n ?v4) ?v2) ?v5)) (= (fun_app$cd (comp$m (fun_app$ar (comp$a ?v4) ?v0)) ?v1) (fun_app$ar (comp$a ?v5) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$) (?v4 Bool_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$ar (comp$a ?v0) ?v1) (fun_app$cd (comp$m ?v2) ?v3)) (= (fun_app$ar (comp$a ?v4) ?v2) ?v5)) (= (fun_app$ar (comp$a (fun_app$ce (comp$n ?v4) ?v0)) ?v1) (fun_app$cd (comp$m ?v5) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 Bool_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$ar (comp$a ?v0) ?v1) (fun_app$ar (comp$a ?v2) ?v3)) (= (fun_app$ce (comp$n ?v4) ?v2) ?v5)) (= (fun_app$ar (comp$a (fun_app$ce (comp$n ?v4) ?v0)) ?v1) (fun_app$ar (comp$a ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_stream_nat_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_stream_fun$) (?v5 Nat_nat_stream_fun$)) (=> (and (= (fun_app$cj (comp$t ?v0) ?v1) (fun_app$bm (comp$k ?v2) ?v3)) (= (fun_app$n (comp$o ?v4) ?v2) ?v5)) (= (fun_app$bf (comp$g (fun_app$ck (comp$u ?v4) ?v0)) ?v1) (fun_app$n (comp$o ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_stream_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_stream_nat_stream_fun$) (?v3 Nat_nat_stream_fun$) (?v4 Nat_stream_nat_fun$) (?v5 Nat_stream_nat_fun$)) (=> (and (= (fun_app$n (comp$o ?v0) ?v1) (fun_app$bf (comp$g ?v2) ?v3)) (= (fun_app$cl (comp$v ?v4) ?v2) ?v5)) (= (fun_app$bm (comp$k (fun_app$cj (comp$t ?v4) ?v0)) ?v1) (fun_app$cj (comp$t ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_stream_nat_fun$) (?v3 Nat_nat_stream_fun$) (?v4 Nat_nat_stream_fun$) (?v5 Nat_stream_nat_stream_fun$)) (=> (and (= (fun_app$bm (comp$k ?v0) ?v1) (fun_app$cj (comp$t ?v2) ?v3)) (= (fun_app$ck (comp$u ?v4) ?v2) ?v5)) (= (fun_app$n (comp$o (fun_app$n (comp$o ?v4) ?v0)) ?v1) (fun_app$bf (comp$g ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_nat_prod_fun$) (?v5 Nat_nat_nat_prod_fun$)) (=> (and (= (fun_app$bm (comp$k ?v0) ?v1) (fun_app$bm (comp$k ?v2) ?v3)) (= (fun_app$bl (comp$j ?v4) ?v2) ?v5)) (= (fun_app$bl (comp$j (fun_app$bl (comp$j ?v4) ?v0)) ?v1) (fun_app$bl (comp$j ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_nat_stream_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_stream_nat_fun$) (?v5 Nat_nat_fun$)) (=> (and (= (fun_app$bf (comp$g ?v0) ?v1) (fun_app$n (comp$o ?v2) ?v3)) (= (fun_app$cj (comp$t ?v4) ?v2) ?v5)) (= (fun_app$cj (comp$t (fun_app$cl (comp$v ?v4) ?v0)) ?v1) (fun_app$bm (comp$k ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_prod_nat_fun$) (?v5 Nat_nat_fun$)) (=> (and (= (fun_app$bl (comp$j ?v0) ?v1) (fun_app$bl (comp$j ?v2) ?v3)) (= (fun_app$ch (comp$r ?v4) ?v2) ?v5)) (= (fun_app$bm (comp$k (fun_app$ch (comp$r ?v4) ?v0)) ?v1) (fun_app$bm (comp$k ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_fun$)) (=> (and (= (fun_app$bm (comp$k ?v0) ?v1) (fun_app$bm (comp$k ?v2) ?v3)) (= (fun_app$bm (comp$k ?v3) ?v4) ?v5)) (= (fun_app$bm (comp$k ?v0) (fun_app$bm (comp$k ?v1) ?v4)) (fun_app$bm (comp$k ?v2) ?v5))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$) (?v4 A_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$ce (comp$n ?v0) ?v1) (fun_app$ce (comp$n ?v2) ?v3)) (= (fun_app$ar (comp$a ?v3) ?v4) ?v5)) (= (fun_app$ar (comp$a ?v0) (fun_app$ar (comp$a ?v1) ?v4)) (fun_app$ar (comp$a ?v2) ?v5))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 A_a_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$ar (comp$a ?v0) ?v1) (fun_app$ar (comp$a ?v2) ?v3)) (= (fun_app$cd (comp$m ?v3) ?v4) ?v5)) (= (fun_app$ar (comp$a ?v0) (fun_app$cd (comp$m ?v1) ?v4)) (fun_app$ar (comp$a ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_stream_nat_fun$) (?v1 Nat_stream_nat_stream_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_stream_nat_fun$) (?v4 Nat_nat_stream_fun$) (?v5 Nat_nat_fun$)) (=> (and (= (fun_app$cl (comp$v ?v0) ?v1) (fun_app$cm (comp$w ?v2) ?v3)) (= (fun_app$cj (comp$t ?v3) ?v4) ?v5)) (= (fun_app$cj (comp$t ?v0) (fun_app$bf (comp$g ?v1) ?v4)) (fun_app$bm (comp$k ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_stream_nat_fun$) (?v2 Nat_stream_nat_fun$) (?v3 Nat_stream_nat_stream_fun$) (?v4 Nat_nat_stream_fun$) (?v5 Nat_nat_stream_fun$)) (=> (and (= (fun_app$cm (comp$w ?v0) ?v1) (fun_app$cl (comp$v ?v2) ?v3)) (= (fun_app$bf (comp$g ?v3) ?v4) ?v5)) (= (fun_app$bm (comp$k ?v0) (fun_app$cj (comp$t ?v1) ?v4)) (fun_app$cj (comp$t ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_fun$)) (=> (and (= (fun_app$ch (comp$r ?v0) ?v1) (fun_app$bm (comp$k ?v2) ?v3)) (= (fun_app$bm (comp$k ?v3) ?v4) ?v5)) (= (fun_app$ch (comp$r ?v0) (fun_app$bl (comp$j ?v1) ?v4)) (fun_app$bm (comp$k ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_stream_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_stream_nat_stream_fun$) (?v3 Nat_nat_stream_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_stream_fun$)) (=> (and (= (fun_app$n (comp$o ?v0) ?v1) (fun_app$bf (comp$g ?v2) ?v3)) (= (fun_app$n (comp$o ?v3) ?v4) ?v5)) (= (fun_app$n (comp$o ?v0) (fun_app$bm (comp$k ?v1) ?v4)) (fun_app$bf (comp$g ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_prod_nat_fun$) (?v3 Nat_nat_nat_prod_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_nat_prod_fun$)) (=> (and (= (fun_app$bm (comp$k ?v0) ?v1) (fun_app$ch (comp$r ?v2) ?v3)) (= (fun_app$bl (comp$j ?v3) ?v4) ?v5)) (= (fun_app$bm (comp$k ?v0) (fun_app$bm (comp$k ?v1) ?v4)) (fun_app$ch (comp$r ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_nat_stream_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_fun$)) (=> (and (= (fun_app$bf (comp$g ?v0) ?v1) (fun_app$n (comp$o ?v2) ?v3)) (= (fun_app$bm (comp$k ?v3) ?v4) ?v5)) (= (fun_app$bf (comp$g ?v0) (fun_app$n (comp$o ?v1) ?v4)) (fun_app$n (comp$o ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_fun$)) (=> (and (= (fun_app$bl (comp$j ?v0) ?v1) (fun_app$bl (comp$j ?v2) ?v3)) (= (fun_app$bm (comp$k ?v3) ?v4) ?v5)) (= (fun_app$bl (comp$j ?v0) (fun_app$bm (comp$k ?v1) ?v4)) (fun_app$bl (comp$j ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_nat_prod_fun$) (?v4 Nat$)) (=> (= (fun_app$aw (comp$c ?v0) ?v1) (fun_app$aw (comp$c ?v2) ?v3)) (= (fun_app$cb ?v0 (fun_app$ca ?v1 ?v4)) (fun_app$cb ?v2 (fun_app$ca ?v3 ?v4)))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat_nat_fun$) (?v4 Nat$)) (=> (= (fun_app$aw (comp$c ?v0) ?v1) (fun_app$bl (comp$j ?v2) ?v3)) (= (fun_app$cb ?v0 (fun_app$ca ?v1 ?v4)) (fun_app$ca ?v2 (fun_app$d ?v3 ?v4)))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod$)) (=> (= (fun_app$ba (comp$e ?v0) ?v1) (fun_app$ba (comp$e ?v2) ?v3)) (= (fun_app$cc ?v0 (fun_app$cb ?v1 ?v4)) (fun_app$cc ?v2 (fun_app$cb ?v3 ?v4)))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_stream_nat_stream_fun$) (?v3 Nat_nat_stream_fun$) (?v4 Nat$)) (=> (= (fun_app$bf (comp$g ?v0) ?v1) (fun_app$bf (comp$g ?v2) ?v3)) (= (fun_app$ap ?v0 (fun_app$m ?v1 ?v4)) (fun_app$ap ?v2 (fun_app$m ?v3 ?v4)))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 A$)) (=> (= (fun_app$ar (comp$a ?v0) ?v1) (fun_app$ar (comp$a ?v2) ?v3)) (= (fun_app$ ?v0 (fun_app$c ?v1 ?v4)) (fun_app$ ?v2 (fun_app$c ?v3 ?v4)))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_nat_prod_fun$) (?v4 Nat$)) (=> (= (fun_app$bl (comp$j ?v0) ?v1) (fun_app$aw (comp$c ?v2) ?v3)) (= (fun_app$ca ?v0 (fun_app$d ?v1 ?v4)) (fun_app$cb ?v2 (fun_app$ca ?v3 ?v4)))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat_nat_fun$) (?v4 Nat$)) (=> (= (fun_app$bl (comp$j ?v0) ?v1) (fun_app$bl (comp$j ?v2) ?v3)) (= (fun_app$ca ?v0 (fun_app$d ?v1 ?v4)) (fun_app$ca ?v2 (fun_app$d ?v3 ?v4)))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$) (?v4 Nat$)) (=> (= (fun_app$bm (comp$k ?v0) ?v1) (fun_app$bm (comp$k ?v2) ?v3)) (= (fun_app$d ?v0 (fun_app$d ?v1 ?v4)) (fun_app$d ?v2 (fun_app$d ?v3 ?v4)))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$bm (comp$k ?v0) ?v1) ?v2) (= (fun_app$bm (comp$k (fun_app$bm (comp$k ?v3) ?v0)) ?v1) (fun_app$bm (comp$k ?v3) ?v2))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$cd (comp$m ?v0) ?v1) ?v2) (= (fun_app$cd (comp$m (fun_app$ar (comp$a ?v3) ?v0)) ?v1) (fun_app$ar (comp$a ?v3) ?v2))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$ar (comp$a ?v0) ?v1) ?v2) (= (fun_app$ar (comp$a (fun_app$ce (comp$n ?v3) ?v0)) ?v1) (fun_app$ar (comp$a ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_stream_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_stream_fun$) (?v3 Nat_stream_nat_stream_fun$)) (=> (= (fun_app$n (comp$o ?v0) ?v1) ?v2) (= (fun_app$n (comp$o (fun_app$bf (comp$g ?v3) ?v0)) ?v1) (fun_app$bf (comp$g ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_nat_prod_fun$)) (=> (= (fun_app$bm (comp$k ?v0) ?v1) ?v2) (= (fun_app$bl (comp$j (fun_app$bl (comp$j ?v3) ?v0)) ?v1) (fun_app$bl (comp$j ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_fun$)) (=> (= (fun_app$bl (comp$j ?v0) ?v1) ?v2) (= (fun_app$bm (comp$k (fun_app$ch (comp$r ?v3) ?v0)) ?v1) (fun_app$ch (comp$r ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_nat_stream_fun$) (?v3 Nat_stream_nat_stream_fun$)) (=> (= (fun_app$bf (comp$g ?v0) ?v1) ?v2) (= (fun_app$bf (comp$g (fun_app$cf (comp$p ?v3) ?v0)) ?v1) (fun_app$bf (comp$g ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_nat_prod_fun$)) (=> (= (fun_app$ch (comp$r ?v0) ?v1) ?v2) (= (fun_app$aw (comp$c (fun_app$ci (comp$s ?v3) ?v0)) ?v1) (fun_app$bl (comp$j ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_fun$)) (=> (= (fun_app$aw (comp$c ?v0) ?v1) ?v2) (= (fun_app$ch (comp$r (fun_app$ba (comp$e ?v3) ?v0)) ?v1) (fun_app$ch (comp$r ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$ba (comp$e ?v0) ?v1) ?v2) (= (fun_app$ba (comp$e (fun_app$cg (comp$q ?v3) ?v0)) ?v1) (fun_app$cg (comp$q ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_prod_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$aw (comp$c ?v0) (fun_app$bl (comp$j ?v1) ?v2)) (fun_app$bl (comp$j (fun_app$aw (comp$c ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$)) (= (fun_app$ba (comp$e ?v0) (fun_app$cn (comp$x ?v1) ?v2)) (fun_app$ba (comp$e (fun_app$ba (comp$e ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_nat_stream_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$bf (comp$g ?v0) (fun_app$n (comp$o ?v1) ?v2)) (fun_app$n (comp$o (fun_app$bf (comp$g ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_stream_nat_stream_fun$) (?v1 Nat_stream_nat_stream_fun$) (?v2 Nat_nat_stream_fun$)) (= (fun_app$bf (comp$g ?v0) (fun_app$bf (comp$g ?v1) ?v2)) (fun_app$bf (comp$g (fun_app$cf (comp$p ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$)) (= (fun_app$ar (comp$a ?v0) (fun_app$cd (comp$m ?v1) ?v2)) (fun_app$cd (comp$m (fun_app$ar (comp$a ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$)) (= (fun_app$ar (comp$a ?v0) (fun_app$ar (comp$a ?v1) ?v2)) (fun_app$ar (comp$a (fun_app$ce (comp$n ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_fun$) (?v2 Nat_nat_nat_prod_fun$)) (= (fun_app$bl (comp$j ?v0) (fun_app$ch (comp$r ?v1) ?v2)) (fun_app$aw (comp$c (fun_app$ci (comp$s ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_nat_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$bl (comp$j ?v0) (fun_app$bm (comp$k ?v1) ?v2)) (fun_app$bl (comp$j (fun_app$bl (comp$j ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$bm (comp$k ?v0) (fun_app$bm (comp$k ?v1) ?v2)) (fun_app$bm (comp$k (fun_app$bm (comp$k ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A_stream$) (?v2 A_a_stream_bool_fun_fun$)) (=> (and (member$b ?v0 (sset$ ?v1)) (and (forall ((?v3 A_stream$)) (fun_app$b (fun_app$co ?v2 (shd$ ?v3)) ?v3) ) (forall ((?v3 A_stream$) (?v4 A$)) (=> (and (member$b ?v4 (sset$ (stl$ ?v3))) (fun_app$b (fun_app$co ?v2 ?v4) (stl$ ?v3))) (fun_app$b (fun_app$co ?v2 ?v4) ?v3)) ))) (fun_app$b (fun_app$co ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_treeFI$)) (= (konigPath$a ?v0) (sCons$ (lab$ ?v0) (konigPath$a (eps$ (uud$ ?v0))))) ))
(assert (forall ((?v0 Nat_nat_fun$)) (= (fun_app$bm (comp$k uue$) ?v0) ?v0) ))
(assert (forall ((?v0 A_stream$)) (= (shd$ ?v0) (fun_app$e (case_stream$ uuf$) ?v0)) ))
(assert (forall ((?v0 A_treeFI$)) (= (lab$ ?v0) (fun_app$ai (case_treeFI$ uug$) ?v0)) ))
(assert (forall ((?v0 A_stream$)) (member$b (shd$ ?v0) (sset$ ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (= (fun_app$d (fun_app$bm (comp$k (uuh$ ?v0)) ?v1) ?v2) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 A_stream$)) (= (shd$ (fun_app$l (sdrop$ ?v0) ?v1)) (snth$ ?v1 ?v0)) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (szip$ ?v0 ?v1) (sCons$a (pair$ (shd$ ?v0) (shd$ ?v1)) (szip$ (stl$ ?v0) (stl$ ?v1)))) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (shd$a (szip$ ?v0 ?v1)) (pair$ (shd$ ?v0) (shd$ ?v1))) ))
(assert (forall ((?v0 A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$) (?v1 A_bool_fun$) (?v2 A_stream$) (?v3 A_stream$)) (=> (and (forall ((?v4 A_bool_fun_a_stream_a_stream_fun_fun$) (?v5 A_bool_fun$) (?v6 A_stream$) (?v7 A_stream$)) (=> (and (forall ((?v8 A_bool_fun$) (?v9 A_stream$) (?v10 A_stream$)) (=> (and (= (fun_app$l (fun_app$cp ?v4 ?v8) ?v9) ?v10) (not (= ?v10 undefined$))) (fun_app$b (fun_app$cq ?v0 (pair$b ?v8 ?v9)) ?v10)) ) (and (= (ite (fun_app$c ?v5 (shd$ ?v6)) (fun_app$l (fun_app$cp ?v4 ?v5) (stl$ ?v6)) ?v6) ?v7) (not (= ?v7 undefined$)))) (fun_app$b (fun_app$cq ?v0 (pair$b ?v5 ?v6)) ?v7)) ) (and (= (fun_app$l (sdrop_while$a ?v1) ?v2) ?v3) (not (= ?v3 undefined$)))) (fun_app$b (fun_app$cq ?v0 (pair$b ?v1 ?v2)) ?v3)) ))
(assert (= (fun_app$bm (comp$k suc$) suc$) (fun_app$bm (comp$k suc$) suc$)))
(assert (forall ((?v0 Nat$) (?v1 A_stream$)) (! (= (stake$ (fun_app$d suc$ ?v0) ?v1) (cons$d (shd$ ?v1) (stake$ ?v0 (stl$ ?v1)))) :pattern ((stake$ (fun_app$d suc$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$bl (comp$j (fun_app$bl (convol$ ?v0) ?v1)) ?v2) (fun_app$bl (convol$ (fun_app$bm (comp$k ?v0) ?v2)) (fun_app$bm (comp$k ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$)) (= (fun_app$cn (comp$x (fun_app$cr (map_prod$ ?v0) ?v1)) (fun_app$cr (map_prod$ ?v2) ?v3)) (fun_app$cr (map_prod$ (fun_app$bm (comp$k ?v0) ?v2)) (fun_app$bm (comp$k ?v1) ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$)) (= (fun_app$cr (map_prod$ (fun_app$bm (comp$k ?v0) ?v1)) (fun_app$bm (comp$k ?v2) ?v3)) (fun_app$cn (comp$x (fun_app$cr (map_prod$ ?v0) ?v2)) (fun_app$cr (map_prod$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$)) (= (fun_app$aw (comp$c (fun_app$cr (map_prod$ ?v0) ?v1)) (fun_app$bl (convol$ ?v2) ?v3)) (fun_app$bl (convol$ (fun_app$bm (comp$k ?v0) ?v2)) (fun_app$bm (comp$k ?v1) ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_prod$)) (= (fun_app$cb (fun_app$cr (map_prod$ ?v0) ?v1) (fun_app$cb (fun_app$cr (map_prod$ ?v2) ?v3) ?v4)) (fun_app$cb (fun_app$cr (map_prod$ (fun_app$bm (comp$k ?v0) ?v2)) (fun_app$bm (comp$k ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_prod$)) (= (fun_app$cb (fun_app$cr (map_prod$ ?v0) ?v1) (fun_app$cb (fun_app$cr (map_prod$ ?v2) ?v3) ?v4)) (fun_app$cb (fun_app$cr (map_prod$ (fun_app$bm (comp$k ?v0) ?v2)) (fun_app$bm (comp$k ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$)) (= (fun_app$ba (comp$e (fun_app$cs (size_prod$ ?v0) ?v1)) (fun_app$cr (map_prod$ ?v2) ?v3)) (fun_app$cs (size_prod$ (fun_app$bm (comp$k ?v0) ?v2)) (fun_app$bm (comp$k ?v1) ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$)) (= (fun_app$bm (comp$k id$) ?v0) ?v0) ))
(assert (forall ((?v0 Nat_nat_fun$)) (= (fun_app$bm (comp$k ?v0) id$) ?v0) ))
(assert (forall ((?v0 Nat_nat_fun$)) (= (fun_app$bm (comp$k id$) ?v0) ?v0) ))
(assert (= (comp$k id$) id$a))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (= (fun_app$bm (comp$k ?v0) ?v1) (fun_app$bm (comp$k id$) ?v2)) (= (fun_app$d ?v0 (fun_app$d ?v1 ?v3)) (fun_app$d ?v2 ?v3))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (=> (= (fun_app$bm (comp$k ?v0) ?v1) id$) (= (fun_app$d ?v0 (fun_app$d ?v1 ?v2)) ?v2)) ))
(check-sat)
(exit)

