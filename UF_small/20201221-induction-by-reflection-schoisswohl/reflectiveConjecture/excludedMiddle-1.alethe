unsat
(define-fun @quantifiers_skolemize_3 () alpha (choice ((x alpha)) (not (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))))
(assume a0 (forall ((env env) (v var_alpha) (x alpha)) (= (evalV_alpha (push_alpha env v x) v) x)))
(assume a1 (forall ((env env) (v var_alpha) (w var_alpha) (x alpha)) (=> (not (= v w)) (= (evalV_alpha (push_alpha env w x) v) (evalV_alpha env v)))))
(assume a2 (forall ((env env) (v var_alpha)) (= (eval_alpha env (inj_alpha v)) (evalV_alpha env v))))
(assume a3 (forall ((env env)) (= (eval_alpha env aR) a)))
(assume a4 (forall ((env env)) (= (eval_alpha env bR) b)))
(assume a5 (forall ((env env)) (= (eval_alpha env cR) c)))
(assume a6 (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))))
(assume a7 (forall ((env env) (t0 term_alpha)) (= (models env (pR t0)) (p (eval_alpha env t0)))))
(assume a8 (forall ((env env) (t0 term_alpha)) (= (models env (qR t0)) (q (eval_alpha env t0)))))
(assume a9 (forall ((env env) (t0 term_alpha)) (= (models env (rR t0)) (r (eval_alpha env t0)))))
(assume a10 (forall ((env env)) (= (models env falseR) false)))
(assume a11 (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi)))))
(assume a12 (forall ((env env) (phi form) (psi form)) (= (models env (orR phi psi)) (or (models env phi) (models env psi)))))
(assume a13 (forall ((env env) (phi form) (v var_alpha)) (= (models env (forallR_alpha v phi)) (forall ((x alpha)) (models (push_alpha env v x) phi)))))
(assume a14 (! (not (! (models empty (forallR_alpha v0_alpha (! (orR (! (pR (inj_alpha v0_alpha)) :named @p_1) (! (notR @p_1) :named @p_2)) :named @p_3))) :named @p_4)) :named @p_5))
(step t0 (cl (! (=> (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi)))) (! (= (! (models (! (push_alpha empty v0_alpha @quantifiers_skolemize_3) :named @p_6) @p_2) :named @p_9) (! (not (! (models @p_6 @p_1) :named @p_7)) :named @p_8)) :named @p_10)) :named @p_31) (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi))))) :rule implies_neg1)
(anchor :step t1)
(assume t1.a0 (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi)))))
(step t1.t0 (cl (or (! (not (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi))))) :named @p_30) @p_10)) :rule forall_inst :args (@p_6 @p_1))
(step t1.t1 (cl @p_30 @p_10) :rule or :premises (t1.t0))
(step t1.t2 (cl @p_10) :rule resolution :premises (t1.t1 t1.a0))
(step t1 (cl @p_30 @p_10) :rule subproof :discharge (t1.a0))
(step t2 (cl @p_31 @p_10) :rule resolution :premises (t0 t1))
(step t3 (cl @p_31 (! (not @p_10) :named @p_11)) :rule implies_neg2)
(step t4 (cl @p_31 @p_31) :rule resolution :premises (t2 t3))
(step t5 (cl @p_31) :rule contraction :premises (t4))
(step t6 (cl @p_30 @p_10) :rule implies :premises (t5))
(step t7 (cl (not (! (= (! (or @p_11 @p_9 (! (not @p_8) :named @p_26)) :named @p_27) (! (or @p_11 @p_9 @p_7) :named @p_25)) :named @p_28)) (not @p_27) @p_25) :rule equiv_pos2)
(step t8 (cl (= @p_11 @p_11)) :rule refl)
(step t9 (cl (= @p_9 @p_9)) :rule refl)
(step t10 (cl (! (= @p_26 @p_7) :named @p_29)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_29 1 5))
(step t11 (cl @p_28) :rule cong :premises (t8 t9 t10))
(step t12 (cl @p_11 @p_9 @p_26) :rule equiv_pos1)
(step t13 (cl @p_27 (not @p_11)) :rule or_neg :args (0))
(step t14 (cl @p_27 (! (not @p_9) :named @p_12)) :rule or_neg :args (1))
(step t15 (cl @p_27 (not @p_26)) :rule or_neg :args (2))
(step t16 (cl @p_27 @p_27 @p_27) :rule resolution :premises (t12 t13 t14 t15))
(step t17 (cl @p_27) :rule contraction :premises (t16))
(step t18 (cl @p_25) :rule resolution :premises (t7 t11 t17))
(step t19 (cl @p_11 @p_9 @p_7) :rule or :premises (t18))
(step t20 (cl @p_7 @p_9 @p_11) :rule reordering :premises (t19))
(step t21 (cl (! (or @p_7 @p_9) :named @p_13) @p_8) :rule or_neg :args (0))
(step t22 (cl (! (not (! (= (! (models @p_6 @p_3) :named @p_15) @p_13) :named @p_16)) :named @p_24) @p_15 (! (not @p_13) :named @p_14)) :rule equiv_pos1)
(step t23 (cl @p_15 @p_14 @p_24) :rule reordering :premises (t22))
(step t24 (cl (not (! (= (! (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))) :named @p_19) (! (not @p_15) :named @p_18)) :named @p_23)) (not @p_19) @p_18) :rule equiv_pos2)
(anchor :step t25 :args ((:= (x alpha) @quantifiers_skolemize_3)))
(step t25.t0 (cl (= (models (push_alpha empty v0_alpha x) @p_3) @p_15)) :rule refl)
(step t25 (cl (= (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha)))))) @p_15)) :rule sko_forall)
(step t26 (cl @p_23) :rule cong :premises (t25))
(step t27 (cl (! (not (! (= @p_4 (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (orR (pR (inj_alpha v0_alpha)) (notR (pR (inj_alpha v0_alpha))))))) :named @p_20)) :named @p_22) @p_4 @p_19) :rule equiv_pos1)
(step t28 (cl @p_4 @p_19 @p_22) :rule reordering :premises (t27))
(step t29 (cl (or (! (not (forall ((env env) (phi form) (v var_alpha)) (= (models env (forallR_alpha v phi)) (forall ((x alpha)) (models (push_alpha env v x) phi))))) :named @p_21) @p_20)) :rule forall_inst :args (empty @p_3 v0_alpha))
(step t30 (cl @p_21 @p_20) :rule or :premises (t29))
(step t31 (cl @p_20) :rule resolution :premises (t30 a13))
(step t32 (cl @p_19) :rule resolution :premises (t28 a14 t31))
(step t33 (cl @p_18) :rule resolution :premises (t24 t26 t32))
(step t34 (cl (or (! (not (forall ((env env) (phi form) (psi form)) (= (models env (orR phi psi)) (or (models env phi) (models env psi))))) :named @p_17) @p_16)) :rule forall_inst :args (@p_6 @p_1 @p_2))
(step t35 (cl @p_17 @p_16) :rule or :premises (t34))
(step t36 (cl @p_16) :rule resolution :premises (t35 a12))
(step t37 (cl @p_14) :rule resolution :premises (t23 t33 t36))
(step t38 (cl @p_8) :rule resolution :premises (t21 t37))
(step t39 (cl @p_13 @p_12) :rule or_neg :args (1))
(step t40 (cl @p_12) :rule resolution :premises (t39 t37))
(step t41 (cl @p_11) :rule resolution :premises (t20 t38 t40))
(step t42 (cl) :rule resolution :premises (t6 t41 a11))
