unsat
(define-fun @quantifiers_skolemize_3 () alpha (choice ((x alpha)) (not (models (push_alpha empty v0_alpha x) (forallR_alpha (next_alpha v0_alpha) (forallR_alpha (next_alpha (next_alpha v0_alpha)) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))))))
(define-fun @quantifiers_skolemize_4 () alpha (choice ((x alpha)) (not (models (push_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (next_alpha v0_alpha) x) (forallR_alpha (next_alpha (next_alpha v0_alpha)) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha))))))))))
(define-fun @quantifiers_skolemize_5 () alpha (choice ((x alpha)) (not (models (push_alpha (push_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (next_alpha v0_alpha) @quantifiers_skolemize_4) (next_alpha (next_alpha v0_alpha)) x) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))))
(assume a0 (forall ((env env) (v var_alpha) (x alpha)) (= (evalV_alpha (push_alpha env v x) v) x)))
(assume a1 (forall ((env env) (v var_alpha) (w var_alpha) (x alpha)) (=> (not (= v w)) (= (evalV_alpha (push_alpha env w x) v) (evalV_alpha env v)))))
(assume a2 (forall ((env env) (v var_alpha)) (= (eval_alpha env (inj_alpha v)) (evalV_alpha env v))))
(assume a3 (forall ((env env)) (= (eval_alpha env aR) a)))
(assume a4 (forall ((env env)) (= (eval_alpha env bR) b)))
(assume a5 (forall ((env env)) (= (eval_alpha env cR) c)))
(assume a6 (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))))
(assume a7 (forall ((env env) (t0 term_alpha)) (= (models env (pR t0)) (p (eval_alpha env t0)))))
(assume a8 (forall ((env env) (t0 term_alpha)) (= (models env (qR t0)) (q (eval_alpha env t0)))))
(assume a9 (forall ((env env) (t0 term_alpha)) (= (models env (rR t0)) (r (eval_alpha env t0)))))
(assume a10 (forall ((env env)) (= (models env falseR) false)))
(assume a11 (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi)))))
(assume a12 (forall ((env env) (phi form) (psi form)) (= (models env (orR phi psi)) (or (models env phi) (models env psi)))))
(assume a13 (forall ((env env) (phi form) (v var_alpha)) (= (models env (forallR_alpha v phi)) (forall ((x alpha)) (models (push_alpha env v x) phi)))))
(assume a14 (! (not (! (models empty (forallR_alpha v0_alpha (! (forallR_alpha (! (next_alpha v0_alpha) :named @p_1) (! (forallR_alpha (! (next_alpha @p_1) :named @p_2) (! (orR (! (notR (! (notR (! (orR (! (notR (! (eq_alpha (! (inj_alpha v0_alpha) :named @p_4) (! (inj_alpha @p_1) :named @p_6)) :named @p_9)) :named @p_10) (! (notR (! (eq_alpha @p_6 (! (inj_alpha @p_2) :named @p_3)) :named @p_7)) :named @p_8)) :named @p_11)) :named @p_12)) :named @p_13) (! (eq_alpha @p_4 @p_3) :named @p_5)) :named @p_14)) :named @p_15)) :named @p_16))) :named @p_17)) :named @p_18))
(step t0 (cl (not (! (= (! (=> (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi)))) (! (= (! (models (! (push_alpha (! (push_alpha (! (push_alpha empty v0_alpha @quantifiers_skolemize_3) :named @p_19) @p_1 @quantifiers_skolemize_4) :named @p_20) @p_2 @quantifiers_skolemize_5) :named @p_21) @p_10) :named @p_22) (! (not (! (models @p_21 @p_9) :named @p_23)) :named @p_24)) :named @p_124)) :named @p_125) (! (=> (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi)))) (! (= @p_24 @p_22) :named @p_25)) :named @p_123)) :named @p_126)) (not @p_125) @p_123) :rule equiv_pos2)
(step t1 (cl (= (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi)))) (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi)))))) :rule refl)
(step t2 (cl (! (= @p_124 @p_25) :named @p_127)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_127 1 5))
(step t3 (cl @p_126) :rule cong :premises (t1 t2))
(step t4 (cl @p_125 (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi))))) :rule implies_neg1)
(anchor :step t5)
(assume t5.a0 (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi)))))
(step t5.t0 (cl (or (! (not (forall ((env env) (phi form)) (= (models env (notR phi)) (not (models env phi))))) :named @p_37) @p_124)) :rule forall_inst :args (@p_21 @p_9))
(step t5.t1 (cl @p_37 @p_124) :rule or :premises (t5.t0))
(step t5.t2 (cl @p_124) :rule resolution :premises (t5.t1 t5.a0))
(step t5 (cl @p_37 @p_124) :rule subproof :discharge (t5.a0))
(step t6 (cl @p_125 @p_124) :rule resolution :premises (t4 t5))
(step t7 (cl @p_125 (not @p_124)) :rule implies_neg2)
(step t8 (cl @p_125 @p_125) :rule resolution :premises (t6 t7))
(step t9 (cl @p_125) :rule contraction :premises (t8))
(step t10 (cl @p_123) :rule resolution :premises (t0 t3 t9))
(step t11 (cl @p_37 @p_25) :rule implies :premises (t10))
(step t12 (cl (not (! (= (! (or (! (not @p_25) :named @p_26) (! (not @p_24) :named @p_119) @p_22) :named @p_120) (! (or @p_26 @p_23 @p_22) :named @p_118)) :named @p_121)) (not @p_120) @p_118) :rule equiv_pos2)
(step t13 (cl (= @p_26 @p_26)) :rule refl)
(step t14 (cl (! (= @p_119 @p_23) :named @p_122)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_122 1 5))
(step t15 (cl (= @p_22 @p_22)) :rule refl)
(step t16 (cl @p_121) :rule cong :premises (t13 t14 t15))
(step t17 (cl @p_26 @p_119 @p_22) :rule equiv_pos2)
(step t18 (cl @p_120 (not @p_26)) :rule or_neg :args (0))
(step t19 (cl @p_120 (not @p_119)) :rule or_neg :args (1))
(step t20 (cl @p_120 (! (not @p_22) :named @p_27)) :rule or_neg :args (2))
(step t21 (cl @p_120 @p_120 @p_120) :rule resolution :premises (t17 t18 t19 t20))
(step t22 (cl @p_120) :rule contraction :premises (t21))
(step t23 (cl @p_118) :rule resolution :premises (t12 t16 t22))
(step t24 (cl @p_26 @p_23 @p_22) :rule or :premises (t23))
(step t25 (cl @p_23 @p_22 @p_26) :rule reordering :premises (t24))
(step t26 (cl (! (not (! (= @p_23 (! (= (! (eval_alpha @p_21 @p_4) :named @p_75) (! (eval_alpha @p_21 @p_6) :named @p_74)) :named @p_76)) :named @p_77)) :named @p_117) @p_24 @p_76) :rule equiv_pos2)
(step t27 (cl @p_76 @p_24 @p_117) :rule reordering :premises (t26))
(step t28 (cl (! (and @p_76 (! (= (! (eval_alpha @p_21 @p_3) :named @p_80) @p_74) :named @p_81)) :named @p_114) (! (not @p_76) :named @p_79) (! (not @p_81) :named @p_113)) :rule and_neg)
(step t29 (cl (! (=> @p_114 (! (= @p_80 @p_75) :named @p_102)) :named @p_116) @p_114) :rule implies_neg1)
(anchor :step t30)
(assume t30.a0 @p_76)
(assume t30.a1 @p_81)
(step t30.t0 (cl (! (not (! (= @p_81 (! (models @p_21 @p_7) :named @p_82)) :named @p_83)) :named @p_101) @p_81 (! (not @p_82) :named @p_92)) :rule equiv_pos1)
(step t30.t1 (cl @p_81 @p_92 @p_101) :rule reordering :premises (t30.t0))
(step t30.t2 (cl (not (! (= (! (or (! (not (! (= (! (models @p_21 @p_8) :named @p_28) @p_92) :named @p_93)) :named @p_95) @p_28 (! (not @p_92) :named @p_97)) :named @p_98) (! (or @p_95 @p_28 @p_82) :named @p_96)) :named @p_99)) (not @p_98) @p_96) :rule equiv_pos2)
(step t30.t3 (cl (= @p_95 @p_95)) :rule refl)
(step t30.t4 (cl (= @p_28 @p_28)) :rule refl)
(step t30.t5 (cl (! (= @p_97 @p_82) :named @p_100)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_100 1 5))
(step t30.t6 (cl @p_99) :rule cong :premises (t30.t3 t30.t4 t30.t5))
(step t30.t7 (cl @p_95 @p_28 @p_97) :rule equiv_pos1)
(step t30.t8 (cl @p_98 (not @p_95)) :rule or_neg :args (0))
(step t30.t9 (cl @p_98 (! (not @p_28) :named @p_94)) :rule or_neg :args (1))
(step t30.t10 (cl @p_98 (not @p_97)) :rule or_neg :args (2))
(step t30.t11 (cl @p_98 @p_98 @p_98) :rule resolution :premises (t30.t7 t30.t8 t30.t9 t30.t10))
(step t30.t12 (cl @p_98) :rule contraction :premises (t30.t11))
(step t30.t13 (cl @p_96) :rule resolution :premises (t30.t2 t30.t6 t30.t12))
(step t30.t14 (cl @p_95 @p_28 @p_82) :rule or :premises (t30.t13))
(step t30.t15 (cl @p_28 @p_82 @p_95) :rule reordering :premises (t30.t14))
(step t30.t16 (cl (! (or @p_22 @p_28) :named @p_29) @p_94) :rule or_neg :args (1))
(step t30.t17 (cl (! (not (! (= (! (models @p_21 @p_11) :named @p_31) @p_29) :named @p_32)) :named @p_73) @p_31 (! (not @p_29) :named @p_30)) :rule equiv_pos1)
(step t30.t18 (cl @p_31 @p_30 @p_73) :rule reordering :premises (t30.t17))
(step t30.t19 (cl (! (not (! (= (! (models @p_21 @p_12) :named @p_35) (! (not @p_31) :named @p_34)) :named @p_36)) :named @p_72) (! (not @p_35) :named @p_38) @p_34) :rule equiv_pos2)
(step t30.t20 (cl @p_38 @p_34 @p_72) :rule reordering :premises (t30.t19))
(step t30.t21 (cl (not (! (= (! (or (! (not (! (= (! (models @p_21 @p_13) :named @p_39) @p_38) :named @p_40)) :named @p_66) @p_39 (! (not @p_38) :named @p_68)) :named @p_69) (! (or @p_66 @p_39 @p_35) :named @p_67)) :named @p_70)) (not @p_69) @p_67) :rule equiv_pos2)
(step t30.t22 (cl (= @p_66 @p_66)) :rule refl)
(step t30.t23 (cl (= @p_39 @p_39)) :rule refl)
(step t30.t24 (cl (! (= @p_68 @p_35) :named @p_71)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_71 1 5))
(step t30.t25 (cl @p_70) :rule cong :premises (t30.t22 t30.t23 t30.t24))
(step t30.t26 (cl @p_66 @p_39 @p_68) :rule equiv_pos1)
(step t30.t27 (cl @p_69 (not @p_66)) :rule or_neg :args (0))
(step t30.t28 (cl @p_69 (! (not @p_39) :named @p_41)) :rule or_neg :args (1))
(step t30.t29 (cl @p_69 (not @p_68)) :rule or_neg :args (2))
(step t30.t30 (cl @p_69 @p_69 @p_69) :rule resolution :premises (t30.t26 t30.t27 t30.t28 t30.t29))
(step t30.t31 (cl @p_69) :rule contraction :premises (t30.t30))
(step t30.t32 (cl @p_67) :rule resolution :premises (t30.t21 t30.t25 t30.t31))
(step t30.t33 (cl @p_66 @p_39 @p_35) :rule or :premises (t30.t32))
(step t30.t34 (cl @p_39 @p_35 @p_66) :rule reordering :premises (t30.t33))
(step t30.t35 (cl (! (or @p_39 (! (models @p_21 @p_5) :named @p_42)) :named @p_43) @p_41) :rule or_neg :args (0))
(step t30.t36 (cl (! (not (! (= (! (models @p_21 @p_14) :named @p_45) @p_43) :named @p_46)) :named @p_65) @p_45 (! (not @p_43) :named @p_44)) :rule equiv_pos1)
(step t30.t37 (cl @p_45 @p_44 @p_65) :rule reordering :premises (t30.t36))
(step t30.t38 (cl (not (! (= (! (not (forall ((x alpha)) (models (push_alpha (push_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (next_alpha v0_alpha) @quantifiers_skolemize_4) (next_alpha (next_alpha v0_alpha)) x) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) :named @p_48) (! (not @p_45) :named @p_47)) :named @p_64)) (not @p_48) @p_47) :rule equiv_pos2)
(anchor :step t30.t39 :args ((:= (x alpha) @quantifiers_skolemize_5)))
(step t30.t39.t0 (cl (= (models (push_alpha @p_20 @p_2 x) @p_14) @p_45)) :rule refl)
(step t30.t39 (cl (= (forall ((x alpha)) (models (push_alpha (push_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (next_alpha v0_alpha) @quantifiers_skolemize_4) (next_alpha (next_alpha v0_alpha)) x) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha))))))) @p_45)) :rule sko_forall)
(step t30.t40 (cl @p_64) :rule cong :premises (t30.t39))
(step t30.t41 (cl (! (not (! (= (! (models @p_20 @p_15) :named @p_49) (forall ((x alpha)) (models (push_alpha (push_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (next_alpha v0_alpha) @quantifiers_skolemize_4) (next_alpha (next_alpha v0_alpha)) x) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) :named @p_50)) :named @p_63) @p_49 @p_48) :rule equiv_pos1)
(step t30.t42 (cl @p_49 @p_48 @p_63) :rule reordering :premises (t30.t41))
(step t30.t43 (cl (not (! (= (! (not (forall ((x alpha)) (models (push_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (next_alpha v0_alpha) x) (forallR_alpha (next_alpha (next_alpha v0_alpha)) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha))))))))) :named @p_53) (! (not @p_49) :named @p_52)) :named @p_62)) (not @p_53) @p_52) :rule equiv_pos2)
(anchor :step t30.t44 :args ((:= (x alpha) @quantifiers_skolemize_4)))
(step t30.t44.t0 (cl (= (models (push_alpha @p_19 @p_1 x) @p_15) @p_49)) :rule refl)
(step t30.t44 (cl (= (forall ((x alpha)) (models (push_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (next_alpha v0_alpha) x) (forallR_alpha (next_alpha (next_alpha v0_alpha)) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) @p_49)) :rule sko_forall)
(step t30.t45 (cl @p_62) :rule cong :premises (t30.t44))
(step t30.t46 (cl (! (not (! (= (! (models @p_19 @p_16) :named @p_54) (forall ((x alpha)) (models (push_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (next_alpha v0_alpha) x) (forallR_alpha (next_alpha (next_alpha v0_alpha)) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha))))))))) :named @p_55)) :named @p_61) @p_54 @p_53) :rule equiv_pos1)
(step t30.t47 (cl @p_54 @p_53 @p_61) :rule reordering :premises (t30.t46))
(step t30.t48 (cl (not (! (= (! (not (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (forallR_alpha (next_alpha v0_alpha) (forallR_alpha (next_alpha (next_alpha v0_alpha)) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))))) :named @p_57) (! (not @p_54) :named @p_56)) :named @p_60)) (not @p_57) @p_56) :rule equiv_pos2)
(anchor :step t30.t49 :args ((:= (x alpha) @quantifiers_skolemize_3)))
(step t30.t49.t0 (cl (= (models (push_alpha empty v0_alpha x) @p_16) @p_54)) :rule refl)
(step t30.t49 (cl (= (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (forallR_alpha (next_alpha v0_alpha) (forallR_alpha (next_alpha (next_alpha v0_alpha)) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha))))))))) @p_54)) :rule sko_forall)
(step t30.t50 (cl @p_60) :rule cong :premises (t30.t49))
(step t30.t51 (cl (! (not (! (= @p_17 (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (forallR_alpha (next_alpha v0_alpha) (forallR_alpha (next_alpha (next_alpha v0_alpha)) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))))) :named @p_58)) :named @p_59) @p_17 @p_57) :rule equiv_pos1)
(step t30.t52 (cl @p_17 @p_57 @p_59) :rule reordering :premises (t30.t51))
(step t30.t53 (cl (or (! (not (forall ((env env) (phi form) (v var_alpha)) (= (models env (forallR_alpha v phi)) (forall ((x alpha)) (models (push_alpha env v x) phi))))) :named @p_51) @p_58)) :rule forall_inst :args (empty @p_16 v0_alpha))
(step t30.t54 (cl @p_51 @p_58) :rule or :premises (t30.t53))
(step t30.t55 (cl @p_58) :rule resolution :premises (t30.t54 a13))
(step t30.t56 (cl @p_57) :rule resolution :premises (t30.t52 a14 t30.t55))
(step t30.t57 (cl @p_56) :rule resolution :premises (t30.t48 t30.t50 t30.t56))
(step t30.t58 (cl (or @p_51 @p_55)) :rule forall_inst :args (@p_19 @p_15 @p_1))
(step t30.t59 (cl @p_51 @p_55) :rule or :premises (t30.t58))
(step t30.t60 (cl @p_55) :rule resolution :premises (t30.t59 a13))
(step t30.t61 (cl @p_53) :rule resolution :premises (t30.t47 t30.t57 t30.t60))
(step t30.t62 (cl @p_52) :rule resolution :premises (t30.t43 t30.t45 t30.t61))
(step t30.t63 (cl (or @p_51 @p_50)) :rule forall_inst :args (@p_20 @p_14 @p_2))
(step t30.t64 (cl @p_51 @p_50) :rule or :premises (t30.t63))
(step t30.t65 (cl @p_50) :rule resolution :premises (t30.t64 a13))
(step t30.t66 (cl @p_48) :rule resolution :premises (t30.t42 t30.t62 t30.t65))
(step t30.t67 (cl @p_47) :rule resolution :premises (t30.t38 t30.t40 t30.t66))
(step t30.t68 (cl (or (! (not (forall ((env env) (phi form) (psi form)) (= (models env (orR phi psi)) (or (models env phi) (models env psi))))) :named @p_33) @p_46)) :rule forall_inst :args (@p_21 @p_13 @p_5))
(step t30.t69 (cl @p_33 @p_46) :rule or :premises (t30.t68))
(step t30.t70 (cl @p_46) :rule resolution :premises (t30.t69 a12))
(step t30.t71 (cl @p_44) :rule resolution :premises (t30.t37 t30.t67 t30.t70))
(step t30.t72 (cl @p_41) :rule resolution :premises (t30.t35 t30.t71))
(step t30.t73 (cl (or @p_37 @p_40)) :rule forall_inst :args (@p_21 @p_12))
(step t30.t74 (cl @p_37 @p_40) :rule or :premises (t30.t73))
(step t30.t75 (cl @p_40) :rule resolution :premises (t30.t74 a11))
(step t30.t76 (cl @p_35) :rule resolution :premises (t30.t34 t30.t72 t30.t75))
(step t30.t77 (cl (or @p_37 @p_36)) :rule forall_inst :args (@p_21 @p_11))
(step t30.t78 (cl @p_37 @p_36) :rule or :premises (t30.t77))
(step t30.t79 (cl @p_36) :rule resolution :premises (t30.t78 a11))
(step t30.t80 (cl @p_34) :rule resolution :premises (t30.t20 t30.t76 t30.t79))
(step t30.t81 (cl (or @p_33 @p_32)) :rule forall_inst :args (@p_21 @p_10 @p_8))
(step t30.t82 (cl @p_33 @p_32) :rule or :premises (t30.t81))
(step t30.t83 (cl @p_32) :rule resolution :premises (t30.t82 a12))
(step t30.t84 (cl @p_30) :rule resolution :premises (t30.t18 t30.t80 t30.t83))
(step t30.t85 (cl @p_94) :rule resolution :premises (t30.t16 t30.t84))
(step t30.t86 (cl (or @p_37 @p_93)) :rule forall_inst :args (@p_21 @p_7))
(step t30.t87 (cl @p_37 @p_93) :rule or :premises (t30.t86))
(step t30.t88 (cl @p_93) :rule resolution :premises (t30.t87 a11))
(step t30.t89 (cl @p_82) :rule resolution :premises (t30.t15 t30.t85 t30.t88))
(step t30.t90 (cl (not (! (= (! (=> (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))) (! (= @p_82 (! (= @p_74 @p_80) :named @p_85)) :named @p_86)) :named @p_87) (! (=> (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))) @p_83) :named @p_84)) :named @p_88)) (not @p_87) @p_84) :rule equiv_pos2)
(step t30.t91 (cl (= (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))) (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))))) :rule refl)
(step t30.t92 (cl (! (= @p_86 (! (= @p_85 @p_82) :named @p_89)) :named @p_91)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_91 1 5))
(step t30.t93 (cl (! (= @p_85 @p_81) :named @p_90)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_90 2 6))
(step t30.t94 (cl (= @p_82 @p_82)) :rule refl)
(step t30.t95 (cl (= @p_89 @p_83)) :rule cong :premises (t30.t93 t30.t94))
(step t30.t96 (cl (= @p_86 @p_83)) :rule trans :premises (t30.t92 t30.t95))
(step t30.t97 (cl @p_88) :rule cong :premises (t30.t91 t30.t96))
(step t30.t98 (cl @p_87 (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y))))) :rule implies_neg1)
(anchor :step t30.t99)
(assume t30.t99.a0 (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))))
(step t30.t99.t0 (cl (or (! (not (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y))))) :named @p_78) @p_86)) :rule forall_inst :args (@p_21 @p_6 @p_3))
(step t30.t99.t1 (cl @p_78 @p_86) :rule or :premises (t30.t99.t0))
(step t30.t99.t2 (cl @p_86) :rule resolution :premises (t30.t99.t1 t30.t99.a0))
(step t30.t99 (cl @p_78 @p_86) :rule subproof :discharge (t30.t99.a0))
(step t30.t100 (cl @p_87 @p_86) :rule resolution :premises (t30.t98 t30.t99))
(step t30.t101 (cl @p_87 (not @p_86)) :rule implies_neg2)
(step t30.t102 (cl @p_87 @p_87) :rule resolution :premises (t30.t100 t30.t101))
(step t30.t103 (cl @p_87) :rule contraction :premises (t30.t102))
(step t30.t104 (cl @p_84) :rule resolution :premises (t30.t90 t30.t97 t30.t103))
(step t30.t105 (cl @p_78 @p_83) :rule implies :premises (t30.t104))
(step t30.t106 (cl @p_83) :rule resolution :premises (t30.t105 a6))
(step t30.t107 (cl @p_81) :rule resolution :premises (t30.t1 t30.t89 t30.t106))
(step t30.t108 (cl (= @p_74 @p_75)) :rule symm :premises (t30.a0))
(step t30.t109 (cl @p_102) :rule trans :premises (t30.t107 t30.t108))
(step t30 (cl @p_79 @p_113 @p_102) :rule subproof :discharge (t30.a0 t30.a1))
(step t31 (cl (! (not @p_114) :named @p_115) @p_76) :rule and_pos :args (0))
(step t32 (cl @p_115 @p_81) :rule and_pos :args (1))
(step t33 (cl @p_102 @p_115 @p_115) :rule resolution :premises (t30 t31 t32))
(step t34 (cl @p_115 @p_115 @p_102) :rule reordering :premises (t33))
(step t35 (cl @p_115 @p_102) :rule contraction :premises (t34))
(step t36 (cl @p_116 @p_102) :rule resolution :premises (t29 t35))
(step t37 (cl @p_116 (! (not @p_102) :named @p_103)) :rule implies_neg2)
(step t38 (cl @p_116 @p_116) :rule resolution :premises (t36 t37))
(step t39 (cl @p_116) :rule contraction :premises (t38))
(step t40 (cl @p_115 @p_102) :rule implies :premises (t39))
(step t41 (cl @p_79 @p_113 @p_102) :rule resolution :premises (t28 t40))
(step t42 (cl @p_102 @p_79 @p_113) :rule reordering :premises (t41))
(step t43 (cl (! (not (! (= @p_42 @p_102) :named @p_104)) :named @p_112) @p_42 @p_103) :rule equiv_pos1)
(step t44 (cl @p_42 @p_103 @p_112) :rule reordering :premises (t43))
(step t45 (cl @p_43 (! (not @p_42) :named @p_111)) :rule or_neg :args (1))
(step t46 (cl @p_65 @p_45 @p_44) :rule equiv_pos1)
(step t47 (cl @p_45 @p_44 @p_65) :rule reordering :premises (t46))
(step t48 (cl (not @p_64) (not @p_48) @p_47) :rule equiv_pos2)
(anchor :step t49 :args ((:= (x alpha) @quantifiers_skolemize_5)))
(step t49.t0 (cl (= (models (push_alpha @p_20 @p_2 x) @p_14) @p_45)) :rule refl)
(step t49 (cl (= (forall ((x alpha)) (models (push_alpha (push_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (next_alpha v0_alpha) @quantifiers_skolemize_4) (next_alpha (next_alpha v0_alpha)) x) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha))))))) @p_45)) :rule sko_forall)
(step t50 (cl @p_64) :rule cong :premises (t49))
(step t51 (cl @p_63 @p_49 @p_48) :rule equiv_pos1)
(step t52 (cl @p_49 @p_48 @p_63) :rule reordering :premises (t51))
(step t53 (cl (not @p_62) (not @p_53) @p_52) :rule equiv_pos2)
(anchor :step t54 :args ((:= (x alpha) @quantifiers_skolemize_4)))
(step t54.t0 (cl (= (models (push_alpha @p_19 @p_1 x) @p_15) @p_49)) :rule refl)
(step t54 (cl (= (forall ((x alpha)) (models (push_alpha (push_alpha empty v0_alpha @quantifiers_skolemize_3) (next_alpha v0_alpha) x) (forallR_alpha (next_alpha (next_alpha v0_alpha)) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) @p_49)) :rule sko_forall)
(step t55 (cl @p_62) :rule cong :premises (t54))
(step t56 (cl @p_61 @p_54 @p_53) :rule equiv_pos1)
(step t57 (cl @p_54 @p_53 @p_61) :rule reordering :premises (t56))
(step t58 (cl (not @p_60) (not @p_57) @p_56) :rule equiv_pos2)
(anchor :step t59 :args ((:= (x alpha) @quantifiers_skolemize_3)))
(step t59.t0 (cl (= (models (push_alpha empty v0_alpha x) @p_16) @p_54)) :rule refl)
(step t59 (cl (= (forall ((x alpha)) (models (push_alpha empty v0_alpha x) (forallR_alpha (next_alpha v0_alpha) (forallR_alpha (next_alpha (next_alpha v0_alpha)) (orR (notR (notR (orR (notR (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha v0_alpha)))) (notR (eq_alpha (inj_alpha (next_alpha v0_alpha)) (inj_alpha (next_alpha (next_alpha v0_alpha)))))))) (eq_alpha (inj_alpha v0_alpha) (inj_alpha (next_alpha (next_alpha v0_alpha))))))))) @p_54)) :rule sko_forall)
(step t60 (cl @p_60) :rule cong :premises (t59))
(step t61 (cl @p_59 @p_17 @p_57) :rule equiv_pos1)
(step t62 (cl @p_17 @p_57 @p_59) :rule reordering :premises (t61))
(step t63 (cl (or @p_51 @p_58)) :rule forall_inst :args (empty @p_16 v0_alpha))
(step t64 (cl @p_51 @p_58) :rule or :premises (t63))
(step t65 (cl @p_58) :rule resolution :premises (t64 a13))
(step t66 (cl @p_57) :rule resolution :premises (t62 a14 t65))
(step t67 (cl @p_56) :rule resolution :premises (t58 t60 t66))
(step t68 (cl (or @p_51 @p_55)) :rule forall_inst :args (@p_19 @p_15 @p_1))
(step t69 (cl @p_51 @p_55) :rule or :premises (t68))
(step t70 (cl @p_55) :rule resolution :premises (t69 a13))
(step t71 (cl @p_53) :rule resolution :premises (t57 t67 t70))
(step t72 (cl @p_52) :rule resolution :premises (t53 t55 t71))
(step t73 (cl (or @p_51 @p_50)) :rule forall_inst :args (@p_20 @p_14 @p_2))
(step t74 (cl @p_51 @p_50) :rule or :premises (t73))
(step t75 (cl @p_50) :rule resolution :premises (t74 a13))
(step t76 (cl @p_48) :rule resolution :premises (t52 t72 t75))
(step t77 (cl @p_47) :rule resolution :premises (t48 t50 t76))
(step t78 (cl (or @p_33 @p_46)) :rule forall_inst :args (@p_21 @p_13 @p_5))
(step t79 (cl @p_33 @p_46) :rule or :premises (t78))
(step t80 (cl @p_46) :rule resolution :premises (t79 a12))
(step t81 (cl @p_44) :rule resolution :premises (t47 t77 t80))
(step t82 (cl @p_111) :rule resolution :premises (t45 t81))
(step t83 (cl (not (! (= (! (=> (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))) (! (= @p_42 (! (= @p_75 @p_80) :named @p_106)) :named @p_107)) :named @p_108) (! (=> (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))) @p_104) :named @p_105)) :named @p_109)) (not @p_108) @p_105) :rule equiv_pos2)
(step t84 (cl (= (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))) (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))))) :rule refl)
(step t85 (cl (= @p_42 @p_42)) :rule refl)
(step t86 (cl (! (= @p_106 @p_102) :named @p_110)) :rule hole :args ("TRUST_THEORY_REWRITE" @p_110 2 6))
(step t87 (cl (= @p_107 @p_104)) :rule cong :premises (t85 t86))
(step t88 (cl @p_109) :rule cong :premises (t84 t87))
(step t89 (cl @p_108 (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y))))) :rule implies_neg1)
(anchor :step t90)
(assume t90.a0 (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))))
(step t90.t0 (cl (or @p_78 @p_107)) :rule forall_inst :args (@p_21 @p_4 @p_3))
(step t90.t1 (cl @p_78 @p_107) :rule or :premises (t90.t0))
(step t90.t2 (cl @p_107) :rule resolution :premises (t90.t1 t90.a0))
(step t90 (cl @p_78 @p_107) :rule subproof :discharge (t90.a0))
(step t91 (cl @p_108 @p_107) :rule resolution :premises (t89 t90))
(step t92 (cl @p_108 (not @p_107)) :rule implies_neg2)
(step t93 (cl @p_108 @p_108) :rule resolution :premises (t91 t92))
(step t94 (cl @p_108) :rule contraction :premises (t93))
(step t95 (cl @p_105) :rule resolution :premises (t83 t88 t94))
(step t96 (cl @p_78 @p_104) :rule implies :premises (t95))
(step t97 (cl @p_104) :rule resolution :premises (t96 a6))
(step t98 (cl @p_103) :rule resolution :premises (t44 t82 t97))
(step t99 (cl @p_101 @p_81 @p_92) :rule equiv_pos1)
(step t100 (cl @p_81 @p_92 @p_101) :rule reordering :premises (t99))
(step t101 (cl (not @p_99) (not @p_98) @p_96) :rule equiv_pos2)
(step t102 (cl (= @p_95 @p_95)) :rule refl)
(step t103 (cl (= @p_28 @p_28)) :rule refl)
(step t104 (cl @p_100) :rule hole :args ("TRUST_THEORY_REWRITE" @p_100 1 5))
(step t105 (cl @p_99) :rule cong :premises (t102 t103 t104))
(step t106 (cl @p_95 @p_28 @p_97) :rule equiv_pos1)
(step t107 (cl @p_98 (not @p_95)) :rule or_neg :args (0))
(step t108 (cl @p_98 @p_94) :rule or_neg :args (1))
(step t109 (cl @p_98 (not @p_97)) :rule or_neg :args (2))
(step t110 (cl @p_98 @p_98 @p_98) :rule resolution :premises (t106 t107 t108 t109))
(step t111 (cl @p_98) :rule contraction :premises (t110))
(step t112 (cl @p_96) :rule resolution :premises (t101 t105 t111))
(step t113 (cl @p_95 @p_28 @p_82) :rule or :premises (t112))
(step t114 (cl @p_28 @p_82 @p_95) :rule reordering :premises (t113))
(step t115 (cl @p_29 @p_94) :rule or_neg :args (1))
(step t116 (cl @p_73 @p_31 @p_30) :rule equiv_pos1)
(step t117 (cl @p_31 @p_30 @p_73) :rule reordering :premises (t116))
(step t118 (cl @p_72 @p_38 @p_34) :rule equiv_pos2)
(step t119 (cl @p_38 @p_34 @p_72) :rule reordering :premises (t118))
(step t120 (cl (not @p_70) (not @p_69) @p_67) :rule equiv_pos2)
(step t121 (cl (= @p_66 @p_66)) :rule refl)
(step t122 (cl (= @p_39 @p_39)) :rule refl)
(step t123 (cl @p_71) :rule hole :args ("TRUST_THEORY_REWRITE" @p_71 1 5))
(step t124 (cl @p_70) :rule cong :premises (t121 t122 t123))
(step t125 (cl @p_66 @p_39 @p_68) :rule equiv_pos1)
(step t126 (cl @p_69 (not @p_66)) :rule or_neg :args (0))
(step t127 (cl @p_69 @p_41) :rule or_neg :args (1))
(step t128 (cl @p_69 (not @p_68)) :rule or_neg :args (2))
(step t129 (cl @p_69 @p_69 @p_69) :rule resolution :premises (t125 t126 t127 t128))
(step t130 (cl @p_69) :rule contraction :premises (t129))
(step t131 (cl @p_67) :rule resolution :premises (t120 t124 t130))
(step t132 (cl @p_66 @p_39 @p_35) :rule or :premises (t131))
(step t133 (cl @p_39 @p_35 @p_66) :rule reordering :premises (t132))
(step t134 (cl @p_43 @p_41) :rule or_neg :args (0))
(step t135 (cl @p_41) :rule resolution :premises (t134 t81))
(step t136 (cl (or @p_37 @p_40)) :rule forall_inst :args (@p_21 @p_12))
(step t137 (cl @p_37 @p_40) :rule or :premises (t136))
(step t138 (cl @p_40) :rule resolution :premises (t137 a11))
(step t139 (cl @p_35) :rule resolution :premises (t133 t135 t138))
(step t140 (cl (or @p_37 @p_36)) :rule forall_inst :args (@p_21 @p_11))
(step t141 (cl @p_37 @p_36) :rule or :premises (t140))
(step t142 (cl @p_36) :rule resolution :premises (t141 a11))
(step t143 (cl @p_34) :rule resolution :premises (t119 t139 t142))
(step t144 (cl (or @p_33 @p_32)) :rule forall_inst :args (@p_21 @p_10 @p_8))
(step t145 (cl @p_33 @p_32) :rule or :premises (t144))
(step t146 (cl @p_32) :rule resolution :premises (t145 a12))
(step t147 (cl @p_30) :rule resolution :premises (t117 t143 t146))
(step t148 (cl @p_94) :rule resolution :premises (t115 t147))
(step t149 (cl (or @p_37 @p_93)) :rule forall_inst :args (@p_21 @p_7))
(step t150 (cl @p_37 @p_93) :rule or :premises (t149))
(step t151 (cl @p_93) :rule resolution :premises (t150 a11))
(step t152 (cl @p_82) :rule resolution :premises (t114 t148 t151))
(step t153 (cl (not @p_88) (not @p_87) @p_84) :rule equiv_pos2)
(step t154 (cl @p_91) :rule hole :args ("TRUST_THEORY_REWRITE" @p_91 1 5))
(step t155 (cl @p_90) :rule hole :args ("TRUST_THEORY_REWRITE" @p_90 2 6))
(step t156 (cl (= @p_82 @p_82)) :rule refl)
(step t157 (cl (= @p_89 @p_83)) :rule cong :premises (t155 t156))
(step t158 (cl (= @p_86 @p_83)) :rule trans :premises (t154 t157))
(step t159 (cl @p_88) :rule cong :premises (t84 t158))
(step t160 (cl @p_87 (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y))))) :rule implies_neg1)
(anchor :step t161)
(assume t161.a0 (forall ((env env) (x term_alpha) (y term_alpha)) (= (models env (eq_alpha x y)) (= (eval_alpha env x) (eval_alpha env y)))))
(step t161.t0 (cl (or @p_78 @p_86)) :rule forall_inst :args (@p_21 @p_6 @p_3))
(step t161.t1 (cl @p_78 @p_86) :rule or :premises (t161.t0))
(step t161.t2 (cl @p_86) :rule resolution :premises (t161.t1 t161.a0))
(step t161 (cl @p_78 @p_86) :rule subproof :discharge (t161.a0))
(step t162 (cl @p_87 @p_86) :rule resolution :premises (t160 t161))
(step t163 (cl @p_87 (not @p_86)) :rule implies_neg2)
(step t164 (cl @p_87 @p_87) :rule resolution :premises (t162 t163))
(step t165 (cl @p_87) :rule contraction :premises (t164))
(step t166 (cl @p_84) :rule resolution :premises (t153 t159 t165))
(step t167 (cl @p_78 @p_83) :rule implies :premises (t166))
(step t168 (cl @p_83) :rule resolution :premises (t167 a6))
(step t169 (cl @p_81) :rule resolution :premises (t100 t152 t168))
(step t170 (cl @p_79) :rule resolution :premises (t42 t98 t169))
(step t171 (cl (or @p_78 @p_77)) :rule forall_inst :args (@p_21 @p_4 @p_6))
(step t172 (cl @p_78 @p_77) :rule or :premises (t171))
(step t173 (cl @p_77) :rule resolution :premises (t172 a6))
(step t174 (cl @p_24) :rule resolution :premises (t27 t170 t173))
(step t175 (cl @p_29 @p_27) :rule or_neg :args (0))
(step t176 (cl @p_27) :rule resolution :premises (t175 t147))
(step t177 (cl @p_26) :rule resolution :premises (t25 t174 t176))
(step t178 (cl) :rule resolution :premises (t11 t177 a11))
