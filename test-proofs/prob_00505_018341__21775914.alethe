unsat
(define-fun @quantifiers_skolemize_3 () Type$ (choice ((?v5 Type$)) (not (or (not (= t$ (return$ (the$ (type_get$ ?v5 l$))))) (not (typing$ e$ (obj$ f$ u$) ?v5)) (not (typing$ e$ b$ (param$ (the$ (type_get$ ?v5 l$))))) (not (member$ l$ (do$ ?v5)))))))
(define-fun @quantifiers_skolemize_4 () Char_list_set$ (choice ((?v3 Char_list_set$)) (not (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))))))))))
(define-fun @quantifiers_skolemize_5 () Char_list$ (choice ((?v1 Char_list$)) (not (forall ((?v2 Char_list$)) (or (member$a ?v1 @quantifiers_skolemize_4) (member$a ?v2 @quantifiers_skolemize_4) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))
(define-fun @quantifiers_skolemize_6 () Char_list$ (choice ((?v2 Char_list$)) (not (or (member$a @quantifiers_skolemize_5 @quantifiers_skolemize_4) (member$a ?v2 @quantifiers_skolemize_4) (= @quantifiers_skolemize_5 ?v2) (typing$ (add$ (add$ e$ @quantifiers_skolemize_5 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ @quantifiers_skolemize_5) (fvar$ ?v2)) t$)))))
(assume a2 (! (not p$) :named @p_1))
(assume a3 (! (=> (exists ((?v0 Char_list_set$)) (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (=> (and (not (member$a ?v1 ?v0)) (and (not (member$a ?v2 ?v0)) (not (= ?v1 ?v2)))) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))) p$) :named @p_2))
(assume a4 (! (typing$ e$ (call$ (! (obj$ f$ u$) :named @p_3) l$ b$) t$) :named @p_4))
(assume a6 (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v3) (= ?v3 ?v2))))
(assume a9 (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v2) (and (= (dom$ ?v1) (do$ ?v2)) (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))))))
(assume a12 (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (=> (and (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4) (forall ((?v5 Type$)) (=> (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (and (typing$ ?v0 ?v1 ?v5) (and (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) false))) false)))
(step t0 (cl (! (=> (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))))) (! (or (! (not (! (member$ l$ (! (do$ @quantifiers_skolemize_3) :named @p_11)) :named @p_96)) :named @p_97) (! (member$a @quantifiers_skolemize_5 @quantifiers_skolemize_4) :named @p_187) (! (member$a @quantifiers_skolemize_6 @quantifiers_skolemize_4) :named @p_186) (! (= @quantifiers_skolemize_5 @quantifiers_skolemize_6) :named @p_185) (! (typing$ (! (add$ (! (add$ e$ @quantifiers_skolemize_5 @quantifiers_skolemize_3) :named @p_182) @quantifiers_skolemize_6 (! (param$ (! (the$ (! (type_get$ @quantifiers_skolemize_3 l$) :named @p_98)) :named @p_99)) :named @p_100)) :named @p_183) (! (openz$ (! (the$a (fun_app$b f$ l$)) :named @p_180) (fvar$ @quantifiers_skolemize_5) (fvar$ @quantifiers_skolemize_6)) :named @p_181) (! (return$ @p_99) :named @p_102)) :named @p_184)) :named @p_188)) :named @p_279) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))) :rule implies_neg1)
(anchor :step t1)
(assume t1.a0 (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))))))
(step t1.t0 (cl (or (! (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))) :named @p_5) @p_188)) :rule forall_inst :args (l$ @quantifiers_skolemize_5 @quantifiers_skolemize_6))
(step t1.t1 (cl @p_5 @p_188) :rule or :premises (t1.t0))
(step t1.t2 (cl (not (! (= (! (or (! (or (! (not (! (finite$ @quantifiers_skolemize_4) :named @p_6)) :named @p_7) @p_5) :named @p_8) (! (not @p_5) :named @p_173)) :named @p_174) (! (or @p_8 (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))) :named @p_172)) :named @p_175)) (not @p_174) @p_172) :rule equiv_pos2)
(step t1.t3 (cl (= @p_8 @p_8)) :rule refl)
(step t1.t4 (cl (= (! (= (! (= @p_173 (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))) :named @p_176) true) :named @p_177) @p_176)) :rule equiv_simplify)
(step t1.t5 (cl (not @p_177) @p_176) :rule equiv1 :premises (t1.t4))
(step t1.t6 (cl (= @p_176 (! (= (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))))) @p_173) :named @p_178))) :rule rare_rewrite :args ("eq-symm" @p_173 (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))))
(step t1.t7 (cl (! (= (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))) :named @p_179)) :rule refl)
(step t1.t8 (cl @p_176) :rule rare_rewrite :args ("bool-double-not-elim" (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))))
(step t1.t9 (cl (= @p_178 @p_179)) :rule cong :premises (t1.t7 t1.t8))
(step t1.t10 (cl (= @p_179 true)) :rule rare_rewrite :args ("eq-refl" (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))))
(step t1.t11 (cl (= @p_178 true)) :rule trans :premises (t1.t9 t1.t10))
(step t1.t12 (cl @p_177) :rule trans :premises (t1.t6 t1.t11))
(step t1.t13 (cl @p_176) :rule resolution :premises (t1.t5 t1.t12))
(step t1.t14 (cl @p_175) :rule cong :premises (t1.t3 t1.t13))
(step t1.t15 (cl @p_8 @p_173) :rule or_neg :args (1))
(step t1.t16 (cl @p_174 (! (not @p_8) :named @p_9)) :rule or_neg :args (0))
(step t1.t17 (cl @p_174 (not @p_173)) :rule or_neg :args (1))
(step t1.t18 (cl @p_174 @p_174) :rule resolution :premises (t1.t15 t1.t16 t1.t17))
(step t1.t19 (cl @p_174) :rule contraction :premises (t1.t18))
(step t1.t20 (cl @p_172) :rule resolution :premises (t1.t2 t1.t14 t1.t19))
(step t1.t21 (cl @p_8 (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))) :rule or :premises (t1.t20))
(step t1.t22 (cl (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))))) @p_8) :rule reordering :premises (t1.t21))
(step t1.t23 (cl (not (! (= (! (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))))))))) :named @p_10) @p_9) :named @p_171)) (not @p_10) @p_9) :rule equiv_pos2)
(anchor :step t1.t24 :args ((:= (?v3 Char_list_set$) @quantifiers_skolemize_4)))
(step t1.t24.t0 (cl (= (or (! (not (! (finite$ ?v3) :named @p_33)) :named @p_34) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))))))) @p_8)) :rule refl)
(step t1.t24 (cl (= (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))))) @p_8)) :rule sko_forall)
(step t1.t25 (cl @p_171) :rule cong :premises (t1.t24))
(step t1.t26 (cl (! (not (! (and (= @p_11 (dom$ f$)) @p_10) :named @p_12)) :named @p_170) @p_10) :rule and_pos :args (1))
(step t1.t27 (cl @p_10 @p_170) :rule reordering :premises (t1.t26))
(step t1.t28 (cl (! (not (! (or (! (not (! (typing$ e$ (! (obj$ f$ @quantifiers_skolemize_3) :named @p_13) @quantifiers_skolemize_3) :named @p_14)) :named @p_15) @p_12) :named @p_16)) :named @p_169) @p_15 @p_12) :rule or_pos)
(step t1.t29 (cl @p_15 @p_12 @p_169) :rule reordering :premises (t1.t28))
(step t1.t30 (cl (= (! (= @p_14 true) :named @p_93) @p_14)) :rule equiv_simplify)
(step t1.t31 (cl (not @p_93) @p_14) :rule equiv1 :premises (t1.t30))
(step t1.t32 (cl (= e$ e$)) :rule refl)
(step t1.t33 (cl (= f$ f$)) :rule refl)
(step t1.t34 (cl (! (not (! (or (! (not (! (typing$ e$ @p_3 @quantifiers_skolemize_3) :named @p_94)) :named @p_101) (! (= u$ @quantifiers_skolemize_3) :named @p_159)) :named @p_160)) :named @p_168) @p_101 @p_159) :rule or_pos)
(step t1.t35 (cl @p_101 @p_159 @p_168) :rule reordering :premises (t1.t34))
(step t1.t36 (cl (not (! (= (! (or (! (or (! (not (! (= t$ @p_102) :named @p_103)) :named @p_104) @p_101 (not (typing$ e$ b$ @p_100)) @p_97) :named @p_105) (! (not @p_101) :named @p_152)) :named @p_153) (! (or @p_105 @p_94) :named @p_151)) :named @p_154)) (not @p_153) @p_151) :rule equiv_pos2)
(step t1.t37 (cl (= @p_105 @p_105)) :rule refl)
(step t1.t38 (cl (= (! (= (! (= @p_152 @p_94) :named @p_155) true) :named @p_156) @p_155)) :rule equiv_simplify)
(step t1.t39 (cl (not @p_156) @p_155) :rule equiv1 :premises (t1.t38))
(step t1.t40 (cl (= @p_155 (! (= @p_94 @p_152) :named @p_157))) :rule rare_rewrite :args ("eq-symm" @p_152 @p_94))
(step t1.t41 (cl (! (= @p_94 @p_94) :named @p_158)) :rule refl)
(step t1.t42 (cl @p_155) :rule rare_rewrite :args ("bool-double-not-elim" @p_94))
(step t1.t43 (cl (= @p_157 @p_158)) :rule cong :premises (t1.t41 t1.t42))
(step t1.t44 (cl (= @p_158 true)) :rule rare_rewrite :args ("eq-refl" @p_94))
(step t1.t45 (cl (= @p_157 true)) :rule trans :premises (t1.t43 t1.t44))
(step t1.t46 (cl @p_156) :rule trans :premises (t1.t40 t1.t45))
(step t1.t47 (cl @p_155) :rule resolution :premises (t1.t39 t1.t46))
(step t1.t48 (cl @p_154) :rule cong :premises (t1.t37 t1.t47))
(step t1.t49 (cl @p_105 @p_152) :rule or_neg :args (1))
(step t1.t50 (cl @p_153 (! (not @p_105) :named @p_106)) :rule or_neg :args (0))
(step t1.t51 (cl @p_153 (not @p_152)) :rule or_neg :args (1))
(step t1.t52 (cl @p_153 @p_153) :rule resolution :premises (t1.t49 t1.t50 t1.t51))
(step t1.t53 (cl @p_153) :rule contraction :premises (t1.t52))
(step t1.t54 (cl @p_151) :rule resolution :premises (t1.t36 t1.t48 t1.t53))
(step t1.t55 (cl @p_105 @p_94) :rule or :premises (t1.t54))
(step t1.t56 (cl @p_94 @p_105) :rule reordering :premises (t1.t55))
(step t1.t57 (cl (not (! (= (! (not (forall ((?v5 Type$)) (or (not (= t$ (return$ (the$ (type_get$ ?v5 l$))))) (not (typing$ e$ (obj$ f$ u$) ?v5)) (not (typing$ e$ b$ (param$ (the$ (type_get$ ?v5 l$))))) (not (member$ l$ (do$ ?v5)))))) :named @p_107) @p_106) :named @p_149)) (not @p_107) @p_106) :rule equiv_pos2)
(anchor :step t1.t58 :args ((:= (?v5 Type$) @quantifiers_skolemize_3)))
(step t1.t58.t0 (cl (= (or (not (= t$ (return$ (! (the$ (type_get$ ?v5 l$)) :named @p_150)))) (not (typing$ e$ @p_3 ?v5)) (not (typing$ e$ b$ (param$ @p_150))) (not (member$ l$ (! (do$ ?v5) :named @p_122)))) @p_105)) :rule refl)
(step t1.t58 (cl (= (forall ((?v5 Type$)) (or (not (= t$ (return$ (the$ (type_get$ ?v5 l$))))) (not (typing$ e$ (obj$ f$ u$) ?v5)) (not (typing$ e$ b$ (param$ (the$ (type_get$ ?v5 l$))))) (not (member$ l$ (do$ ?v5))))) @p_105)) :rule sko_forall)
(step t1.t59 (cl @p_149) :rule cong :premises (t1.t58))
(step t1.t60 (cl (! (not (! (or (! (not @p_4) :named @p_108) @p_107) :named @p_109)) :named @p_148) @p_108 @p_107) :rule or_pos)
(step t1.t61 (cl @p_108 @p_107 @p_148) :rule reordering :premises (t1.t60))
(step t1.t62 (cl (or (! (not (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (or (not (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4)) (not (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))))) :named @p_147) @p_109)) :rule forall_inst :args (e$ @p_3 l$ b$ t$))
(step t1.t63 (cl @p_147 @p_109) :rule or :premises (t1.t62))
(step t1.t64 (cl (not (! (= (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (=> (and (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4) (forall ((?v5 Type$)) (=> (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (and (typing$ ?v0 ?v1 ?v5) (and (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) false))) false)) (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (or (not (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4)) (not (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))))) :named @p_110)) (not (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (=> (and (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4) (forall ((?v5 Type$)) (=> (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (and (typing$ ?v0 ?v1 ?v5) (and (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) false))) false))) (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (or (not (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4)) (not (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))))) :rule equiv_pos2)
(anchor :step t1.t65 :args ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Sterm$) ?v1) (:= (?v2 Label$) ?v2) (:= (?v3 Sterm$) ?v3) (:= (?v4 Type$) ?v4)))
(step t1.t65.t0 (cl (= (! (=> (! (and (! (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4) :named @p_115) (forall ((?v5 Type$)) (=> (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (and (typing$ ?v0 ?v1 ?v5) (and (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) false))) :named @p_118) false) :named @p_119) (! (not @p_118) :named @p_120))) :rule rare_rewrite :args ("bool-impl-false1" @p_118))
(step t1.t65.t1 (cl (= @p_115 @p_115)) :rule refl)
(anchor :step t1.t65.t2 :args ((?v5 Type$) (:= (?v5 Type$) ?v5)))
(step t1.t65.t2.t0 (cl (= (! (=> (! (and (! (= ?v4 (return$ (! (the$ (type_get$ ?v5 ?v2)) :named @p_125))) :named @p_130) (and (! (typing$ ?v0 ?v1 ?v5) :named @p_128) (! (and (! (typing$ ?v0 ?v3 (param$ @p_125)) :named @p_126) (! (member$ ?v2 @p_122) :named @p_123)) :named @p_138))) :named @p_144) false) :named @p_145) (! (not @p_144) :named @p_146))) :rule rare_rewrite :args ("bool-impl-false1" @p_144))
(step t1.t65.t2.t1 (cl (= @p_144 (! (and @p_130 @p_128 @p_126 @p_123) :named @p_133))) :rule ac_simp)
(step t1.t65.t2.t2 (cl (= @p_146 (! (not @p_133) :named @p_134))) :rule cong :premises (t1.t65.t2.t1))
(step t1.t65.t2.t3 (cl (= @p_145 @p_134)) :rule trans :premises (t1.t65.t2.t0 t1.t65.t2.t2))
(step t1.t65.t2 (cl (= (forall ((?v5 Type$)) (=> (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (and (typing$ ?v0 ?v1 ?v5) (and (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) false)) (forall ((?v5 Type$)) (not (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (typing$ ?v0 ?v1 ?v5) (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))))) :rule bind)
(anchor :step t1.t65.t3 :args ((?v5 Type$) (:= (?v5 Type$) ?v5)))
(step t1.t65.t3.t0 (cl (= @p_134 (! (or (! (not @p_130) :named @p_131) (! (not (and @p_128 @p_126 @p_123)) :named @p_142)) :named @p_143))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_130 @p_128 (rare-list @p_126 @p_123)))
(step t1.t65.t3.t1 (cl (= @p_131 @p_131)) :rule refl)
(step t1.t65.t3.t2 (cl (= @p_142 (! (or (! (not @p_128) :named @p_129) (! (not @p_138) :named @p_139)) :named @p_140))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_128 @p_126 (rare-list @p_123)))
(step t1.t65.t3.t3 (cl (= @p_143 (! (or @p_131 @p_140) :named @p_141))) :rule cong :premises (t1.t65.t3.t1 t1.t65.t3.t2))
(step t1.t65.t3.t4 (cl (= @p_129 @p_129)) :rule refl)
(step t1.t65.t3.t5 (cl (= @p_139 (! (or (! (not @p_126) :named @p_127) (! (not @p_123) :named @p_124)) :named @p_135))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_126 @p_123 rare-list))
(step t1.t65.t3.t6 (cl (= @p_140 (! (or @p_129 @p_135) :named @p_136))) :rule cong :premises (t1.t65.t3.t4 t1.t65.t3.t5))
(step t1.t65.t3.t7 (cl (= @p_141 (! (or @p_131 @p_136) :named @p_137))) :rule cong :premises (t1.t65.t3.t1 t1.t65.t3.t6))
(step t1.t65.t3.t8 (cl (= @p_134 @p_137)) :rule trans :premises (t1.t65.t3.t0 t1.t65.t3.t3 t1.t65.t3.t7))
(step t1.t65.t3.t9 (cl (= @p_137 (! (or @p_131 @p_129 @p_127 @p_124) :named @p_132))) :rule ac_simp)
(step t1.t65.t3.t10 (cl (= @p_134 @p_132)) :rule trans :premises (t1.t65.t3.t8 t1.t65.t3.t9))
(step t1.t65.t3 (cl (= (forall ((?v5 Type$)) (not (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (typing$ ?v0 ?v1 ?v5) (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))) :rule bind)
(step t1.t65.t4 (cl (= (forall ((?v5 Type$)) (=> (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (and (typing$ ?v0 ?v1 ?v5) (and (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) false)) (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))) :rule trans :premises (t1.t65.t2 t1.t65.t3))
(step t1.t65.t5 (cl (= @p_118 (! (and @p_115 (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5)))))) :named @p_116))) :rule cong :premises (t1.t65.t1 t1.t65.t4))
(step t1.t65.t6 (cl (= @p_120 (! (not @p_116) :named @p_117))) :rule cong :premises (t1.t65.t5))
(step t1.t65.t7 (cl (= @p_119 @p_117)) :rule trans :premises (t1.t65.t0 t1.t65.t6))
(step t1.t65 (cl (= (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (=> (and (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4) (forall ((?v5 Type$)) (=> (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (and (typing$ ?v0 ?v1 ?v5) (and (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) false))) false)) (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (not (and (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4) (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5)))))))))) :rule bind)
(anchor :step t1.t66 :args ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Sterm$) ?v1) (:= (?v2 Label$) ?v2) (:= (?v3 Sterm$) ?v3) (:= (?v4 Type$) ?v4)))
(step t1.t66.t0 (cl (= @p_117 (or (not @p_115) (not (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_115 (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))) rare-list))
(step t1.t66 (cl (= (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (not (and (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4) (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5)))))))) (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (or (not (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4)) (not (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5)))))))))) :rule bind)
(step t1.t67 (cl @p_110) :rule trans :premises (t1.t65 t1.t66))
(step t1.t68 (cl (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (or (not (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4)) (not (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))))) :rule resolution :premises (t1.t64 t1.t67 a12))
(step t1.t69 (cl @p_109) :rule resolution :premises (t1.t63 t1.t68))
(step t1.t70 (cl @p_107) :rule resolution :premises (t1.t61 a4 t1.t69))
(step t1.t71 (cl @p_106) :rule resolution :premises (t1.t57 t1.t59 t1.t70))
(step t1.t72 (cl @p_94) :rule resolution :premises (t1.t56 t1.t71))
(step t1.t73 (cl (or (! (not (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v3)) (= ?v2 ?v3)))) :named @p_167) @p_160)) :rule forall_inst :args (e$ f$ u$ @quantifiers_skolemize_3))
(step t1.t74 (cl @p_167 @p_160) :rule or :premises (t1.t73))
(step t1.t75 (cl (not (! (= (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v3) (= ?v3 ?v2))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v3)) (= ?v2 ?v3)))) :named @p_161)) (not (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v3) (= ?v3 ?v2)))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v3)) (= ?v2 ?v3)))) :rule equiv_pos2)
(anchor :step t1.t76 :args ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Label_sterm_option_fun$) ?v1) (:= (?v2 Type$) ?v2) (:= (?v3 Type$) ?v3)))
(step t1.t76.t0 (cl (= (! (typing$ ?v0 (! (obj$ ?v1 ?v2) :named @p_26) ?v3) :named @p_164) @p_164)) :rule refl)
(step t1.t76.t1 (cl (= (! (= ?v3 ?v2) :named @p_166) (! (= ?v2 ?v3) :named @p_163))) :rule rare_rewrite :args ("eq-symm" ?v3 ?v2))
(step t1.t76.t2 (cl (= (=> @p_164 @p_166) (! (=> @p_164 @p_163) :named @p_165))) :rule cong :premises (t1.t76.t0 t1.t76.t1))
(step t1.t76 (cl (= (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v3) (= ?v3 ?v2))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v3) (= ?v2 ?v3))))) :rule bind)
(anchor :step t1.t77 :args ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Label_sterm_option_fun$) ?v1) (:= (?v2 Type$) ?v2) (:= (?v3 Type$) ?v3)))
(step t1.t77.t0 (cl (= @p_165 (or (not @p_164) @p_163))) :rule rare_rewrite :args ("bool-impl-elim" @p_164 @p_163))
(step t1.t77 (cl (= (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v3) (= ?v2 ?v3))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v3)) (= ?v2 ?v3))))) :rule bind)
(step t1.t78 (cl @p_161) :rule trans :premises (t1.t76 t1.t77))
(step t1.t79 (cl (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v3)) (= ?v2 ?v3)))) :rule resolution :premises (t1.t75 t1.t78 a6))
(step t1.t80 (cl @p_160) :rule resolution :premises (t1.t74 t1.t79))
(step t1.t81 (cl @p_159) :rule resolution :premises (t1.t35 t1.t72 t1.t80))
(step t1.t82 (cl (= @quantifiers_skolemize_3 u$)) :rule symm :premises (t1.t81))
(step t1.t83 (cl (= @p_13 @p_3)) :rule cong :premises (t1.t33 t1.t82))
(step t1.t84 (cl (= @quantifiers_skolemize_3 @quantifiers_skolemize_3)) :rule refl)
(step t1.t85 (cl (= @p_14 @p_94)) :rule cong :premises (t1.t32 t1.t83 t1.t84))
(step t1.t86 (cl (= (! (= @p_94 true) :named @p_95) @p_94)) :rule equiv_simplify)
(step t1.t87 (cl @p_95 @p_101) :rule equiv2 :premises (t1.t86))
(step t1.t88 (cl @p_95) :rule resolution :premises (t1.t87 t1.t72))
(step t1.t89 (cl @p_93) :rule trans :premises (t1.t85 t1.t88))
(step t1.t90 (cl @p_14) :rule resolution :premises (t1.t31 t1.t89))
(step t1.t91 (cl (or (! (not (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v2)) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))))))) :named @p_92) @p_16)) :rule forall_inst :args (e$ f$ @quantifiers_skolemize_3))
(step t1.t92 (cl @p_92 @p_16) :rule or :premises (t1.t91))
(step t1.t93 (cl (not (! (= (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v2) (and (= (dom$ ?v1) (do$ ?v2)) (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v2)) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))))))) :named @p_17)) (not (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v2) (and (= (dom$ ?v1) (do$ ?v2)) (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))))))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v2)) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))))))) :rule equiv_pos2)
(anchor :step t1.t94 :args ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Label_sterm_option_fun$) ?v1) (:= (?v2 Type$) ?v2)))
(step t1.t94.t0 (cl (= (! (typing$ ?v0 @p_26 ?v2) :named @p_27) @p_27)) :rule refl)
(step t1.t94.t1 (cl (= (! (= (! (dom$ ?v1) :named @p_22) (! (do$ ?v2) :named @p_23)) :named @p_29) (! (= @p_23 @p_22) :named @p_24))) :rule rare_rewrite :args ("eq-symm" @p_22 @p_23))
(anchor :step t1.t94.t2 :args ((?v3 Char_list_set$) (:= (?v3 Char_list_set$) ?v3)))
(step t1.t94.t2.t0 (cl (= @p_33 @p_33)) :rule refl)
(anchor :step t1.t94.t2.t1 :args ((?v4 Label$) (:= (?v4 Label$) ?v4)))
(step t1.t94.t2.t1.t0 (cl (= (! (member$ ?v4 @p_23) :named @p_52) @p_52)) :rule refl)
(anchor :step t1.t94.t2.t1.t1 :args ((?v5 Char_list$) (?v6 Char_list$) (:= (?v5 Char_list$) ?v5) (:= (?v6 Char_list$) ?v6)))
(step t1.t94.t2.t1.t1.t0 (cl (= (! (and (! (not (! (member$a ?v5 ?v3) :named @p_65)) :named @p_72) (and (! (not (! (member$a ?v6 ?v3) :named @p_64)) :named @p_71) (! (not (! (= ?v5 ?v6) :named @p_88)) :named @p_89))) :named @p_90) (! (and @p_72 @p_71 @p_89) :named @p_91))) :rule ac_simp)
(step t1.t94.t2.t1.t1.t1 (cl (= @p_72 @p_72)) :rule refl)
(step t1.t94.t2.t1.t1.t2 (cl (= @p_71 @p_71)) :rule refl)
(step t1.t94.t2.t1.t1.t3 (cl (= @p_88 (! (= ?v6 ?v5) :named @p_63))) :rule rare_rewrite :args ("eq-symm" ?v5 ?v6))
(step t1.t94.t2.t1.t1.t4 (cl (= @p_89 (! (not @p_63) :named @p_70))) :rule cong :premises (t1.t94.t2.t1.t1.t3))
(step t1.t94.t2.t1.t1.t5 (cl (= @p_91 (! (and @p_72 @p_71 @p_70) :named @p_73))) :rule cong :premises (t1.t94.t2.t1.t1.t1 t1.t94.t2.t1.t1.t2 t1.t94.t2.t1.t1.t4))
(step t1.t94.t2.t1.t1.t6 (cl (= @p_90 @p_73)) :rule trans :premises (t1.t94.t2.t1.t1.t0 t1.t94.t2.t1.t1.t5))
(step t1.t94.t2.t1.t1.t7 (cl (! (= (! (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (! (param$ (! (the$ (type_get$ ?v2 ?v4)) :named @p_44)) :named @p_47)) (openz$ (! (the$a (fun_app$b ?v1 ?v4)) :named @p_46) (fvar$ ?v5) (fvar$ ?v6)) (! (return$ @p_44) :named @p_45)) :named @p_62) @p_62) :named @p_79)) :rule refl)
(step t1.t94.t2.t1.t1.t8 (cl (= (=> @p_90 @p_62) (! (=> @p_73 @p_62) :named @p_74))) :rule cong :premises (t1.t94.t2.t1.t1.t6 t1.t94.t2.t1.t1.t7))
(step t1.t94.t2.t1.t1 (cl (= (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (not (member$a ?v6 ?v3)) (not (= ?v6 ?v5))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule bind)
(anchor :step t1.t94.t2.t1.t2 :args ((?v5 Char_list$) (?v6 Char_list$) (:= (?v5 Char_list$) ?v5) (:= (?v6 Char_list$) ?v6)))
(step t1.t94.t2.t1.t2.t0 (cl (= @p_74 (! (or (! (not @p_73) :named @p_75) @p_62) :named @p_76))) :rule rare_rewrite :args ("bool-impl-elim" @p_73 @p_62))
(step t1.t94.t2.t1.t2.t1 (cl (= @p_75 (! (or (! (not @p_72) :named @p_83) (! (not (and @p_71 @p_70)) :named @p_86)) :named @p_87))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_72 @p_71 (rare-list @p_70)))
(step t1.t94.t2.t1.t2.t2 (cl (= @p_83 @p_83)) :rule refl)
(step t1.t94.t2.t1.t2.t3 (cl (= @p_86 (! (or (! (not @p_71) :named @p_81) (! (not @p_70) :named @p_80)) :named @p_82))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_71 @p_70 rare-list))
(step t1.t94.t2.t1.t2.t4 (cl (= @p_87 (! (or @p_83 @p_82) :named @p_84))) :rule cong :premises (t1.t94.t2.t1.t2.t2 t1.t94.t2.t1.t2.t3))
(step t1.t94.t2.t1.t2.t5 (cl (= @p_75 @p_84)) :rule trans :premises (t1.t94.t2.t1.t2.t1 t1.t94.t2.t1.t2.t4))
(step t1.t94.t2.t1.t2.t6 (cl (= @p_84 (! (or @p_83 @p_81 @p_80) :named @p_85))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list @p_83) @p_81 (rare-list @p_80) rare-list))
(step t1.t94.t2.t1.t2.t7 (cl (= @p_83 @p_65)) :rule rare_rewrite :args ("bool-double-not-elim" @p_65))
(step t1.t94.t2.t1.t2.t8 (cl (= @p_81 @p_64)) :rule rare_rewrite :args ("bool-double-not-elim" @p_64))
(step t1.t94.t2.t1.t2.t9 (cl (= @p_80 @p_63)) :rule rare_rewrite :args ("bool-double-not-elim" @p_63))
(step t1.t94.t2.t1.t2.t10 (cl (= @p_85 (! (or @p_65 @p_64 @p_63) :named @p_77))) :rule cong :premises (t1.t94.t2.t1.t2.t7 t1.t94.t2.t1.t2.t8 t1.t94.t2.t1.t2.t9))
(step t1.t94.t2.t1.t2.t11 (cl (= @p_84 @p_77)) :rule trans :premises (t1.t94.t2.t1.t2.t6 t1.t94.t2.t1.t2.t10))
(step t1.t94.t2.t1.t2.t12 (cl (= @p_75 @p_77)) :rule trans :premises (t1.t94.t2.t1.t2.t5 t1.t94.t2.t1.t2.t11))
(step t1.t94.t2.t1.t2.t13 (cl @p_79) :rule refl)
(step t1.t94.t2.t1.t2.t14 (cl (= @p_76 (! (or @p_77 @p_62) :named @p_78))) :rule cong :premises (t1.t94.t2.t1.t2.t12 t1.t94.t2.t1.t2.t13))
(step t1.t94.t2.t1.t2.t15 (cl (= @p_78 (! (or @p_65 @p_64 @p_63 @p_62) :named @p_66))) :rule ac_simp)
(step t1.t94.t2.t1.t2.t16 (cl (= @p_76 @p_66)) :rule trans :premises (t1.t94.t2.t1.t2.t14 t1.t94.t2.t1.t2.t15))
(step t1.t94.t2.t1.t2.t17 (cl (= @p_74 @p_66)) :rule trans :premises (t1.t94.t2.t1.t2.t0 t1.t94.t2.t1.t2.t16))
(step t1.t94.t2.t1.t2 (cl (= (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (not (member$a ?v6 ?v3)) (not (= ?v6 ?v5))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule bind)
(step t1.t94.t2.t1.t3 (cl (= (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule trans :premises (t1.t94.t2.t1.t1 t1.t94.t2.t1.t2))
(step t1.t94.t2.t1.t4 (cl (= (=> @p_52 (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))) (! (=> @p_52 (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))) :named @p_67))) :rule cong :premises (t1.t94.t2.t1.t0 t1.t94.t2.t1.t3))
(step t1.t94.t2.t1 (cl (= (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule bind)
(anchor :step t1.t94.t2.t2 :args ((?v4 Label$) (:= (?v4 Label$) ?v4)))
(step t1.t94.t2.t2.t0 (cl (= @p_67 (! (or (! (not @p_52) :named @p_53) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))) :named @p_60))) :rule rare_rewrite :args ("bool-impl-elim" @p_52 (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))))
(step t1.t94.t2.t2 (cl (= (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$)) (or (not (member$ ?v4 (do$ ?v2))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule bind)
(anchor :step t1.t94.t2.t3 :args ((?v4 Label$) (:= (?v4 Label$) ?v4)))
(step t1.t94.t2.t3.t0 (cl (= (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))) (! (or @p_53 (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))) :named @p_61))) :rule qnt_miniscope_or)
(step t1.t94.t2.t3.t1 (cl (! (= @p_53 @p_53) :named @p_59)) :rule refl)
(anchor :step t1.t94.t2.t3.t2 :args ((?v5 Char_list$) (?v6 Char_list$) (:= (BOUND_VARIABLE_8538 Char_list$) ?v5) (:= (BOUND_VARIABLE_8540 Char_list$) ?v6)))
(step t1.t94.t2.t3.t2.t0 (cl (= (! (or (! (member$a BOUND_VARIABLE_8538 ?v3) :named @p_51) (! (member$a BOUND_VARIABLE_8540 ?v3) :named @p_50) (! (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) :named @p_55) (! (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 @p_47) (openz$ @p_46 (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) @p_45) :named @p_48)) :named @p_56) @p_66)) :rule refl)
(step t1.t94.t2.t3.t2 (cl (= (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule bind)
(step t1.t94.t2.t3.t3 (cl (= @p_61 @p_60)) :rule cong :premises (t1.t94.t2.t3.t1 t1.t94.t2.t3.t2))
(step t1.t94.t2.t3.t4 (cl (= (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))) @p_60)) :rule trans :premises (t1.t94.t2.t3.t0 t1.t94.t2.t3.t3))
(step t1.t94.t2.t3.t5 (cl (= @p_60 (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) :rule symm :premises (t1.t94.t2.t3.t4))
(step t1.t94.t2.t3 (cl (= (forall ((?v4 Label$)) (or (not (member$ ?v4 (do$ ?v2))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$)) (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule bind)
(step t1.t94.t2.t4 (cl (= (forall ((?v4 Label$)) (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) :rule qnt_join)
(step t1.t94.t2.t5 (cl (= (forall ((?v4 Label$)) (or (not (member$ ?v4 (do$ ?v2))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) :rule trans :premises (t1.t94.t2.t3 t1.t94.t2.t4))
(anchor :step t1.t94.t2.t6 :args ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$) (:= (?v4 Label$) ?v4) (:= (BOUND_VARIABLE_8538 Char_list$) BOUND_VARIABLE_8538) (:= (BOUND_VARIABLE_8540 Char_list$) BOUND_VARIABLE_8540)))
(step t1.t94.t2.t6.t0 (cl (= (! (or @p_53 @p_56) :named @p_57) (! (or @p_53 @p_51 @p_50 @p_55 @p_48) :named @p_58))) :rule ac_simp)
(step t1.t94.t2.t6.t1 (cl @p_59) :rule refl)
(step t1.t94.t2.t6.t2 (cl (= @p_51 @p_51)) :rule refl)
(step t1.t94.t2.t6.t3 (cl (= @p_50 @p_50)) :rule refl)
(step t1.t94.t2.t6.t4 (cl (= @p_55 (! (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) :named @p_49))) :rule rare_rewrite :args ("eq-symm" BOUND_VARIABLE_8540 BOUND_VARIABLE_8538))
(step t1.t94.t2.t6.t5 (cl (= @p_48 @p_48)) :rule refl)
(step t1.t94.t2.t6.t6 (cl (= @p_58 (! (or @p_53 @p_51 @p_50 @p_49 @p_48) :named @p_54))) :rule cong :premises (t1.t94.t2.t6.t1 t1.t94.t2.t6.t2 t1.t94.t2.t6.t3 t1.t94.t2.t6.t4 t1.t94.t2.t6.t5))
(step t1.t94.t2.t6.t7 (cl (= @p_57 @p_54)) :rule trans :premises (t1.t94.t2.t6.t0 t1.t94.t2.t6.t6))
(step t1.t94.t2.t6 (cl (= (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule bind)
(step t1.t94.t2.t7 (cl (= (forall ((?v4 Label$)) (or (not (member$ ?v4 (do$ ?v2))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule trans :premises (t1.t94.t2.t5 t1.t94.t2.t6))
(step t1.t94.t2.t8 (cl (= (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule trans :premises (t1.t94.t2.t2 t1.t94.t2.t7))
(step t1.t94.t2.t9 (cl (= (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule trans :premises (t1.t94.t2.t1 t1.t94.t2.t8))
(step t1.t94.t2.t10 (cl (= (and @p_33 (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) (! (and @p_33 (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))) :named @p_35))) :rule cong :premises (t1.t94.t2.t0 t1.t94.t2.t9))
(step t1.t94.t2 (cl (= (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule bind)
(step t1.t94.t3 (cl (= (forall ((?v3 Char_list_set$)) (not (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) (! (not (exists ((?v3 Char_list_set$)) (not (not (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))) :named @p_39))) :rule connective_def)
(anchor :step t1.t94.t4 :args ((?v3 Char_list_set$) (:= (?v3 Char_list_set$) ?v3)))
(step t1.t94.t4.t0 (cl (! (= (! (not (! (not @p_35) :named @p_36)) :named @p_40) @p_35) :named @p_41) @p_40 @p_35) :rule equiv_neg2)
(step t1.t94.t4.t1 (cl (or (! (not @p_40) :named @p_42) @p_35)) :rule not_not)
(step t1.t94.t4.t2 (cl (or @p_41 @p_35)) :rule resolution :premises (t1.t94.t4.t0 t1.t94.t4.t1))
(step t1.t94.t4.t3 (cl @p_41 @p_42 @p_36) :rule equiv_neg1)
(step t1.t94.t4.t4 (cl (or (not @p_42) @p_36)) :rule not_not)
(step t1.t94.t4.t5 (cl (or @p_41 @p_36)) :rule resolution :premises (t1.t94.t4.t3 t1.t94.t4.t4))
(step t1.t94.t4.t6 (cl @p_41) :rule resolution :premises (t1.t94.t4.t2 t1.t94.t4.t5))
(step t1.t94.t4 (cl (= (exists ((?v3 Char_list_set$)) (not (not (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule bind)
(step t1.t94.t5 (cl (= @p_39 (! (not (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) :named @p_37))) :rule cong :premises (t1.t94.t4))
(step t1.t94.t6 (cl (= (forall ((?v3 Char_list_set$)) (not (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) @p_37)) :rule trans :premises (t1.t94.t3 t1.t94.t5))
(step t1.t94.t7 (cl (= (! (not (forall ((?v3 Char_list_set$)) (not (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :named @p_31) (! (not @p_37) :named @p_38))) :rule cong :premises (t1.t94.t6))
(step t1.t94.t8 (cl (= @p_38 (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule not_simplify)
(step t1.t94.t9 (cl (= @p_31 (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule trans :premises (t1.t94.t7 t1.t94.t8))
(step t1.t94.t10 (cl (= (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) @p_31)) :rule symm :premises (t1.t94.t9))
(anchor :step t1.t94.t11 :args ((?v3 Char_list_set$) (:= (?v3 Char_list_set$) ?v3)))
(step t1.t94.t11.t0 (cl (= @p_36 (or @p_34 (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_33 (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))) rare-list))
(step t1.t94.t11 (cl (= (forall ((?v3 Char_list_set$)) (not (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))) :rule bind)
(step t1.t94.t12 (cl (= @p_31 (! (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :named @p_21))) :rule cong :premises (t1.t94.t11))
(step t1.t94.t13 (cl (= (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) @p_21)) :rule trans :premises (t1.t94.t10 t1.t94.t12))
(step t1.t94.t14 (cl (= (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) @p_21)) :rule trans :premises (t1.t94.t2 t1.t94.t13))
(step t1.t94.t15 (cl (= (! (and @p_29 (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))) :named @p_30) (! (and @p_24 @p_21) :named @p_25))) :rule cong :premises (t1.t94.t1 t1.t94.t14))
(step t1.t94.t16 (cl (= (=> @p_27 @p_30) (! (=> @p_27 @p_25) :named @p_28))) :rule cong :premises (t1.t94.t0 t1.t94.t15))
(step t1.t94 (cl (= (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v2) (and (= (dom$ ?v1) (do$ ?v2)) (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v2) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))))))) :rule bind)
(anchor :step t1.t95 :args ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Label_sterm_option_fun$) ?v1) (:= (?v2 Type$) ?v2)))
(step t1.t95.t0 (cl (= @p_28 (or (not @p_27) @p_25))) :rule rare_rewrite :args ("bool-impl-elim" @p_27 @p_25))
(step t1.t95 (cl (= (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v2) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v2)) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))))))) :rule bind)
(step t1.t96 (cl @p_17) :rule trans :premises (t1.t94 t1.t95))
(step t1.t97 (cl (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v2)) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))))))) :rule resolution :premises (t1.t93 t1.t96 a9))
(step t1.t98 (cl @p_16) :rule resolution :premises (t1.t92 t1.t97))
(step t1.t99 (cl @p_12) :rule resolution :premises (t1.t29 t1.t90 t1.t98))
(step t1.t100 (cl @p_10) :rule resolution :premises (t1.t27 t1.t99))
(step t1.t101 (cl @p_9) :rule resolution :premises (t1.t23 t1.t25 t1.t100))
(step t1.t102 (cl (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))) :rule resolution :premises (t1.t22 t1.t101))
(step t1.t103 (cl @p_188) :rule resolution :premises (t1.t1 t1.t102))
(step t1 (cl @p_5 @p_188) :rule subproof :discharge (t1.a0))
(step t2 (cl @p_279 @p_188) :rule resolution :premises (t0 t1))
(step t3 (cl @p_279 (! (not @p_188) :named @p_189)) :rule implies_neg2)
(step t4 (cl @p_279 @p_279) :rule resolution :premises (t2 t3))
(step t5 (cl @p_279) :rule contraction :premises (t4))
(step t6 (cl @p_5 @p_188) :rule implies :premises (t5))
(step t7 (cl @p_189 @p_97 @p_187 @p_186 @p_185 @p_184) :rule or_pos)
(step t8 (cl @p_97 @p_187 @p_186 @p_185 @p_184 @p_189) :rule reordering :premises (t7))
(step t9 (cl (not (! (= (! (or @p_105 (! (not @p_97) :named @p_272)) :named @p_273) (! (or @p_105 @p_96) :named @p_271)) :named @p_274)) (not @p_273) @p_271) :rule equiv_pos2)
(step t10 (cl (= @p_105 @p_105)) :rule refl)
(step t11 (cl (= (! (= (! (= @p_272 @p_96) :named @p_275) true) :named @p_276) @p_275)) :rule equiv_simplify)
(step t12 (cl (not @p_276) @p_275) :rule equiv1 :premises (t11))
(step t13 (cl (= @p_275 (! (= @p_96 @p_272) :named @p_277))) :rule rare_rewrite :args ("eq-symm" @p_272 @p_96))
(step t14 (cl (! (= @p_96 @p_96) :named @p_278)) :rule refl)
(step t15 (cl @p_275) :rule rare_rewrite :args ("bool-double-not-elim" @p_96))
(step t16 (cl (= @p_277 @p_278)) :rule cong :premises (t14 t15))
(step t17 (cl (= @p_278 true)) :rule rare_rewrite :args ("eq-refl" @p_96))
(step t18 (cl (= @p_277 true)) :rule trans :premises (t16 t17))
(step t19 (cl @p_276) :rule trans :premises (t13 t18))
(step t20 (cl @p_275) :rule resolution :premises (t12 t19))
(step t21 (cl @p_274) :rule cong :premises (t10 t20))
(step t22 (cl @p_105 @p_272) :rule or_neg :args (3))
(step t23 (cl @p_273 @p_106) :rule or_neg :args (0))
(step t24 (cl @p_273 (not @p_272)) :rule or_neg :args (1))
(step t25 (cl @p_273 @p_273) :rule resolution :premises (t22 t23 t24))
(step t26 (cl @p_273) :rule contraction :premises (t25))
(step t27 (cl @p_271) :rule resolution :premises (t9 t21 t26))
(step t28 (cl @p_105 @p_96) :rule or :premises (t27))
(step t29 (cl @p_96 @p_105) :rule reordering :premises (t28))
(step t30 (cl (not @p_149) (not @p_107) @p_106) :rule equiv_pos2)
(anchor :step t31 :args ((:= (?v5 Type$) @quantifiers_skolemize_3)))
(step t31.t0 (cl (= (or (not (= t$ (return$ @p_150))) (not (typing$ e$ @p_3 ?v5)) (not (typing$ e$ b$ (param$ @p_150))) (not (member$ l$ @p_122))) @p_105)) :rule refl)
(step t31 (cl (= (forall ((?v5 Type$)) (or (not (= t$ (return$ (the$ (type_get$ ?v5 l$))))) (not (typing$ e$ (obj$ f$ u$) ?v5)) (not (typing$ e$ b$ (param$ (the$ (type_get$ ?v5 l$))))) (not (member$ l$ (do$ ?v5))))) @p_105)) :rule sko_forall)
(step t32 (cl @p_149) :rule cong :premises (t31))
(step t33 (cl @p_148 @p_108 @p_107) :rule or_pos)
(step t34 (cl @p_108 @p_107 @p_148) :rule reordering :premises (t33))
(step t35 (cl (or @p_147 @p_109)) :rule forall_inst :args (e$ @p_3 l$ b$ t$))
(step t36 (cl @p_147 @p_109) :rule or :premises (t35))
(step t37 (cl (not @p_110) (not (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (=> (and (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4) (forall ((?v5 Type$)) (=> (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (and (typing$ ?v0 ?v1 ?v5) (and (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) false))) false))) (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (or (not (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4)) (not (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))))) :rule equiv_pos2)
(anchor :step t38 :args ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Sterm$) ?v1) (:= (?v2 Label$) ?v2) (:= (?v3 Sterm$) ?v3) (:= (?v4 Type$) ?v4)))
(step t38.t0 (cl (= @p_119 @p_120)) :rule rare_rewrite :args ("bool-impl-false1" @p_118))
(step t38.t1 (cl (= @p_115 @p_115)) :rule refl)
(anchor :step t38.t2 :args ((?v5 Type$) (:= (?v5 Type$) ?v5)))
(step t38.t2.t0 (cl (= @p_145 @p_146)) :rule rare_rewrite :args ("bool-impl-false1" @p_144))
(step t38.t2.t1 (cl (= @p_144 @p_133)) :rule ac_simp)
(step t38.t2.t2 (cl (= @p_146 @p_134)) :rule cong :premises (t38.t2.t1))
(step t38.t2.t3 (cl (= @p_145 @p_134)) :rule trans :premises (t38.t2.t0 t38.t2.t2))
(step t38.t2 (cl (= (forall ((?v5 Type$)) (=> (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (and (typing$ ?v0 ?v1 ?v5) (and (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) false)) (forall ((?v5 Type$)) (not (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (typing$ ?v0 ?v1 ?v5) (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))))) :rule bind)
(anchor :step t38.t3 :args ((?v5 Type$) (:= (?v5 Type$) ?v5)))
(step t38.t3.t0 (cl (= @p_134 @p_143)) :rule rare_rewrite :args ("bool-and-de-morgan" @p_130 @p_128 (rare-list @p_126 @p_123)))
(step t38.t3.t1 (cl (= @p_131 @p_131)) :rule refl)
(step t38.t3.t2 (cl (= @p_142 @p_140)) :rule rare_rewrite :args ("bool-and-de-morgan" @p_128 @p_126 (rare-list @p_123)))
(step t38.t3.t3 (cl (= @p_143 @p_141)) :rule cong :premises (t38.t3.t1 t38.t3.t2))
(step t38.t3.t4 (cl (= @p_129 @p_129)) :rule refl)
(step t38.t3.t5 (cl (= @p_139 @p_135)) :rule rare_rewrite :args ("bool-and-de-morgan" @p_126 @p_123 rare-list))
(step t38.t3.t6 (cl (= @p_140 @p_136)) :rule cong :premises (t38.t3.t4 t38.t3.t5))
(step t38.t3.t7 (cl (= @p_141 @p_137)) :rule cong :premises (t38.t3.t1 t38.t3.t6))
(step t38.t3.t8 (cl (= @p_134 @p_137)) :rule trans :premises (t38.t3.t0 t38.t3.t3 t38.t3.t7))
(step t38.t3.t9 (cl (= @p_137 @p_132)) :rule ac_simp)
(step t38.t3.t10 (cl (= @p_134 @p_132)) :rule trans :premises (t38.t3.t8 t38.t3.t9))
(step t38.t3 (cl (= (forall ((?v5 Type$)) (not (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (typing$ ?v0 ?v1 ?v5) (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))) :rule bind)
(step t38.t4 (cl (= (forall ((?v5 Type$)) (=> (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (and (typing$ ?v0 ?v1 ?v5) (and (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) false)) (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))) :rule trans :premises (t38.t2 t38.t3))
(step t38.t5 (cl (= @p_118 @p_116)) :rule cong :premises (t38.t1 t38.t4))
(step t38.t6 (cl (= @p_120 @p_117)) :rule cong :premises (t38.t5))
(step t38.t7 (cl (= @p_119 @p_117)) :rule trans :premises (t38.t0 t38.t6))
(step t38 (cl (= (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (=> (and (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4) (forall ((?v5 Type$)) (=> (and (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2)))) (and (typing$ ?v0 ?v1 ?v5) (and (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2)))) (member$ ?v2 (do$ ?v5))))) false))) false)) (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (not (and (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4) (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5)))))))))) :rule bind)
(anchor :step t39 :args ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Sterm$) ?v1) (:= (?v2 Label$) ?v2) (:= (?v3 Sterm$) ?v3) (:= (?v4 Type$) ?v4)))
(step t39.t0 (cl (= @p_117 (or (not @p_115) (not (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_115 (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))) rare-list))
(step t39 (cl (= (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (not (and (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4) (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5)))))))) (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (or (not (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4)) (not (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5)))))))))) :rule bind)
(step t40 (cl @p_110) :rule trans :premises (t38 t39))
(step t41 (cl (forall ((?v0 Type_environment$) (?v1 Sterm$) (?v2 Label$) (?v3 Sterm$) (?v4 Type$)) (or (not (typing$ ?v0 (call$ ?v1 ?v2 ?v3) ?v4)) (not (forall ((?v5 Type$)) (or (not (= ?v4 (return$ (the$ (type_get$ ?v5 ?v2))))) (not (typing$ ?v0 ?v1 ?v5)) (not (typing$ ?v0 ?v3 (param$ (the$ (type_get$ ?v5 ?v2))))) (not (member$ ?v2 (do$ ?v5))))))))) :rule resolution :premises (t37 t40 a12))
(step t42 (cl @p_109) :rule resolution :premises (t36 t41))
(step t43 (cl @p_107) :rule resolution :premises (t34 a4 t42))
(step t44 (cl @p_106) :rule resolution :premises (t30 t32 t43))
(step t45 (cl @p_96) :rule resolution :premises (t29 t44))
(step t46 (cl (! (or @p_187 @p_186 @p_185 (! (typing$ (! (add$ (! (add$ e$ @quantifiers_skolemize_5 u$) :named @p_195) @quantifiers_skolemize_6 (! (param$ (! (the$ (! (type_get$ u$ l$) :named @p_192)) :named @p_193)) :named @p_194)) :named @p_196) @p_181 t$) :named @p_197)) :named @p_200) (! (not @p_187) :named @p_270)) :rule or_neg :args (0))
(step t47 (cl (not (! (= (! (not (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 @quantifiers_skolemize_4) (member$a ?v2 @quantifiers_skolemize_4) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))) :named @p_202) (! (not @p_200) :named @p_201)) :named @p_258)) (not @p_202) @p_201) :rule equiv_pos2)
(anchor :step t48 :args ((:= (?v1 Char_list$) @quantifiers_skolemize_5) (:= (?v2 Char_list$) @quantifiers_skolemize_6)))
(step t48.t0 (cl (= (or (member$a ?v1 @quantifiers_skolemize_4) (member$a ?v2 @quantifiers_skolemize_4) (! (= ?v1 ?v2) :named @p_225) (! (typing$ (add$ (add$ e$ ?v1 u$) ?v2 @p_194) (openz$ @p_180 (fvar$ ?v1) (fvar$ ?v2)) t$) :named @p_224)) @p_200)) :rule refl)
(step t48 (cl (= (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 @quantifiers_skolemize_4) (member$a ?v2 @quantifiers_skolemize_4) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))) @p_200)) :rule sko_forall)
(step t49 (cl @p_258) :rule cong :premises (t48))
(step t50 (cl (! (not (! (or @p_7 @p_202) :named @p_203)) :named @p_257) @p_7 @p_202) :rule or_pos)
(step t51 (cl @p_7 @p_202 @p_257) :rule reordering :premises (t50))
(step t52 (cl (not (! (= (! (or @p_8 (! (not @p_7) :named @p_250)) :named @p_251) (! (or @p_8 @p_6) :named @p_249)) :named @p_252)) (not @p_251) @p_249) :rule equiv_pos2)
(step t53 (cl (= @p_8 @p_8)) :rule refl)
(step t54 (cl (= (! (= (! (= @p_250 @p_6) :named @p_253) true) :named @p_254) @p_253)) :rule equiv_simplify)
(step t55 (cl (not @p_254) @p_253) :rule equiv1 :premises (t54))
(step t56 (cl (= @p_253 (! (= @p_6 @p_250) :named @p_255))) :rule rare_rewrite :args ("eq-symm" @p_250 @p_6))
(step t57 (cl (! (= @p_6 @p_6) :named @p_256)) :rule refl)
(step t58 (cl @p_253) :rule rare_rewrite :args ("bool-double-not-elim" @p_6))
(step t59 (cl (= @p_255 @p_256)) :rule cong :premises (t57 t58))
(step t60 (cl (= @p_256 true)) :rule rare_rewrite :args ("eq-refl" @p_6))
(step t61 (cl (= @p_255 true)) :rule trans :premises (t59 t60))
(step t62 (cl @p_254) :rule trans :premises (t56 t61))
(step t63 (cl @p_253) :rule resolution :premises (t55 t62))
(step t64 (cl @p_252) :rule cong :premises (t53 t63))
(step t65 (cl @p_8 @p_250) :rule or_neg :args (0))
(step t66 (cl @p_251 @p_9) :rule or_neg :args (0))
(step t67 (cl @p_251 (not @p_250)) :rule or_neg :args (1))
(step t68 (cl @p_251 @p_251) :rule resolution :premises (t65 t66 t67))
(step t69 (cl @p_251) :rule contraction :premises (t68))
(step t70 (cl @p_249) :rule resolution :premises (t52 t64 t69))
(step t71 (cl @p_8 @p_6) :rule or :premises (t70))
(step t72 (cl @p_6 @p_8) :rule reordering :premises (t71))
(step t73 (cl (not @p_171) (not @p_10) @p_9) :rule equiv_pos2)
(anchor :step t74 :args ((:= (?v3 Char_list_set$) @quantifiers_skolemize_4)))
(step t74.t0 (cl (= (or @p_34 (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))))))) @p_8)) :rule refl)
(step t74 (cl (= (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))))) @p_8)) :rule sko_forall)
(step t75 (cl @p_171) :rule cong :premises (t74))
(step t76 (cl @p_170 @p_10) :rule and_pos :args (1))
(step t77 (cl @p_10 @p_170) :rule reordering :premises (t76))
(step t78 (cl @p_169 @p_15 @p_12) :rule or_pos)
(step t79 (cl @p_15 @p_12 @p_169) :rule reordering :premises (t78))
(step t80 (cl (= @p_93 @p_14)) :rule equiv_simplify)
(step t81 (cl (not @p_93) @p_14) :rule equiv1 :premises (t80))
(step t82 (cl (= e$ e$)) :rule refl)
(step t83 (cl (= f$ f$)) :rule refl)
(step t84 (cl @p_168 @p_101 @p_159) :rule or_pos)
(step t85 (cl @p_101 @p_159 @p_168) :rule reordering :premises (t84))
(step t86 (cl (not @p_154) (not @p_153) @p_151) :rule equiv_pos2)
(step t87 (cl (= @p_156 @p_155)) :rule equiv_simplify)
(step t88 (cl (not @p_156) @p_155) :rule equiv1 :premises (t87))
(step t89 (cl (= @p_155 @p_157)) :rule rare_rewrite :args ("eq-symm" @p_152 @p_94))
(step t90 (cl @p_158) :rule refl)
(step t91 (cl @p_155) :rule rare_rewrite :args ("bool-double-not-elim" @p_94))
(step t92 (cl (= @p_157 @p_158)) :rule cong :premises (t90 t91))
(step t93 (cl (= @p_158 true)) :rule rare_rewrite :args ("eq-refl" @p_94))
(step t94 (cl (= @p_157 true)) :rule trans :premises (t92 t93))
(step t95 (cl @p_156) :rule trans :premises (t89 t94))
(step t96 (cl @p_155) :rule resolution :premises (t88 t95))
(step t97 (cl @p_154) :rule cong :premises (t10 t96))
(step t98 (cl @p_105 @p_152) :rule or_neg :args (1))
(step t99 (cl @p_153 @p_106) :rule or_neg :args (0))
(step t100 (cl @p_153 (not @p_152)) :rule or_neg :args (1))
(step t101 (cl @p_153 @p_153) :rule resolution :premises (t98 t99 t100))
(step t102 (cl @p_153) :rule contraction :premises (t101))
(step t103 (cl @p_151) :rule resolution :premises (t86 t97 t102))
(step t104 (cl @p_105 @p_94) :rule or :premises (t103))
(step t105 (cl @p_94 @p_105) :rule reordering :premises (t104))
(step t106 (cl @p_94) :rule resolution :premises (t105 t44))
(step t107 (cl (or @p_167 @p_160)) :rule forall_inst :args (e$ f$ u$ @quantifiers_skolemize_3))
(step t108 (cl @p_167 @p_160) :rule or :premises (t107))
(step t109 (cl (not @p_161) (not (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v3) (= ?v3 ?v2)))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v3)) (= ?v2 ?v3)))) :rule equiv_pos2)
(anchor :step t110 :args ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Label_sterm_option_fun$) ?v1) (:= (?v2 Type$) ?v2) (:= (?v3 Type$) ?v3)))
(step t110.t0 (cl (= @p_164 @p_164)) :rule refl)
(step t110.t1 (cl (= @p_166 @p_163)) :rule rare_rewrite :args ("eq-symm" ?v3 ?v2))
(step t110.t2 (cl (= (=> @p_164 @p_166) @p_165)) :rule cong :premises (t110.t0 t110.t1))
(step t110 (cl (= (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v3) (= ?v3 ?v2))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v3) (= ?v2 ?v3))))) :rule bind)
(anchor :step t111 :args ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Label_sterm_option_fun$) ?v1) (:= (?v2 Type$) ?v2) (:= (?v3 Type$) ?v3)))
(step t111.t0 (cl (= @p_165 (or (not @p_164) @p_163))) :rule rare_rewrite :args ("bool-impl-elim" @p_164 @p_163))
(step t111 (cl (= (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v3) (= ?v2 ?v3))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v3)) (= ?v2 ?v3))))) :rule bind)
(step t112 (cl @p_161) :rule trans :premises (t110 t111))
(step t113 (cl (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (?v3 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v3)) (= ?v2 ?v3)))) :rule resolution :premises (t109 t112 a6))
(step t114 (cl @p_160) :rule resolution :premises (t108 t113))
(step t115 (cl @p_159) :rule resolution :premises (t85 t106 t114))
(step t116 (cl (= @quantifiers_skolemize_3 u$)) :rule symm :premises (t115))
(step t117 (cl (= @p_13 @p_3)) :rule cong :premises (t83 t116))
(step t118 (cl (= @quantifiers_skolemize_3 @quantifiers_skolemize_3)) :rule refl)
(step t119 (cl (= @p_14 @p_94)) :rule cong :premises (t82 t117 t118))
(step t120 (cl (= @p_95 @p_94)) :rule equiv_simplify)
(step t121 (cl @p_95 @p_101) :rule equiv2 :premises (t120))
(step t122 (cl @p_95) :rule resolution :premises (t121 t106))
(step t123 (cl @p_93) :rule trans :premises (t119 t122))
(step t124 (cl @p_14) :rule resolution :premises (t81 t123))
(step t125 (cl (or @p_92 @p_16)) :rule forall_inst :args (e$ f$ @quantifiers_skolemize_3))
(step t126 (cl @p_92 @p_16) :rule or :premises (t125))
(step t127 (cl (not @p_17) (not (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v2) (and (= (dom$ ?v1) (do$ ?v2)) (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))))))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v2)) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))))))) :rule equiv_pos2)
(anchor :step t128 :args ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Label_sterm_option_fun$) ?v1) (:= (?v2 Type$) ?v2)))
(step t128.t0 (cl (= @p_27 @p_27)) :rule refl)
(step t128.t1 (cl (= @p_29 @p_24)) :rule rare_rewrite :args ("eq-symm" @p_22 @p_23))
(anchor :step t128.t2 :args ((?v3 Char_list_set$) (:= (?v3 Char_list_set$) ?v3)))
(step t128.t2.t0 (cl (= @p_33 @p_33)) :rule refl)
(anchor :step t128.t2.t1 :args ((?v4 Label$) (:= (?v4 Label$) ?v4)))
(step t128.t2.t1.t0 (cl (= @p_52 @p_52)) :rule refl)
(anchor :step t128.t2.t1.t1 :args ((?v5 Char_list$) (?v6 Char_list$) (:= (?v5 Char_list$) ?v5) (:= (?v6 Char_list$) ?v6)))
(step t128.t2.t1.t1.t0 (cl (= @p_90 @p_91)) :rule ac_simp)
(step t128.t2.t1.t1.t1 (cl (= @p_72 @p_72)) :rule refl)
(step t128.t2.t1.t1.t2 (cl (= @p_71 @p_71)) :rule refl)
(step t128.t2.t1.t1.t3 (cl (= @p_88 @p_63)) :rule rare_rewrite :args ("eq-symm" ?v5 ?v6))
(step t128.t2.t1.t1.t4 (cl (= @p_89 @p_70)) :rule cong :premises (t128.t2.t1.t1.t3))
(step t128.t2.t1.t1.t5 (cl (= @p_91 @p_73)) :rule cong :premises (t128.t2.t1.t1.t1 t128.t2.t1.t1.t2 t128.t2.t1.t1.t4))
(step t128.t2.t1.t1.t6 (cl (= @p_90 @p_73)) :rule trans :premises (t128.t2.t1.t1.t0 t128.t2.t1.t1.t5))
(step t128.t2.t1.t1.t7 (cl @p_79) :rule refl)
(step t128.t2.t1.t1.t8 (cl (= (=> @p_90 @p_62) @p_74)) :rule cong :premises (t128.t2.t1.t1.t6 t128.t2.t1.t1.t7))
(step t128.t2.t1.t1 (cl (= (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (not (member$a ?v6 ?v3)) (not (= ?v6 ?v5))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule bind)
(anchor :step t128.t2.t1.t2 :args ((?v5 Char_list$) (?v6 Char_list$) (:= (?v5 Char_list$) ?v5) (:= (?v6 Char_list$) ?v6)))
(step t128.t2.t1.t2.t0 (cl (= @p_74 @p_76)) :rule rare_rewrite :args ("bool-impl-elim" @p_73 @p_62))
(step t128.t2.t1.t2.t1 (cl (= @p_75 @p_87)) :rule rare_rewrite :args ("bool-and-de-morgan" @p_72 @p_71 (rare-list @p_70)))
(step t128.t2.t1.t2.t2 (cl (= @p_83 @p_83)) :rule refl)
(step t128.t2.t1.t2.t3 (cl (= @p_86 @p_82)) :rule rare_rewrite :args ("bool-and-de-morgan" @p_71 @p_70 rare-list))
(step t128.t2.t1.t2.t4 (cl (= @p_87 @p_84)) :rule cong :premises (t128.t2.t1.t2.t2 t128.t2.t1.t2.t3))
(step t128.t2.t1.t2.t5 (cl (= @p_75 @p_84)) :rule trans :premises (t128.t2.t1.t2.t1 t128.t2.t1.t2.t4))
(step t128.t2.t1.t2.t6 (cl (= @p_84 @p_85)) :rule rare_rewrite :args ("bool-or-flatten" (rare-list @p_83) @p_81 (rare-list @p_80) rare-list))
(step t128.t2.t1.t2.t7 (cl (= @p_83 @p_65)) :rule rare_rewrite :args ("bool-double-not-elim" @p_65))
(step t128.t2.t1.t2.t8 (cl (= @p_81 @p_64)) :rule rare_rewrite :args ("bool-double-not-elim" @p_64))
(step t128.t2.t1.t2.t9 (cl (= @p_80 @p_63)) :rule rare_rewrite :args ("bool-double-not-elim" @p_63))
(step t128.t2.t1.t2.t10 (cl (= @p_85 @p_77)) :rule cong :premises (t128.t2.t1.t2.t7 t128.t2.t1.t2.t8 t128.t2.t1.t2.t9))
(step t128.t2.t1.t2.t11 (cl (= @p_84 @p_77)) :rule trans :premises (t128.t2.t1.t2.t6 t128.t2.t1.t2.t10))
(step t128.t2.t1.t2.t12 (cl (= @p_75 @p_77)) :rule trans :premises (t128.t2.t1.t2.t5 t128.t2.t1.t2.t11))
(step t128.t2.t1.t2.t13 (cl @p_79) :rule refl)
(step t128.t2.t1.t2.t14 (cl (= @p_76 @p_78)) :rule cong :premises (t128.t2.t1.t2.t12 t128.t2.t1.t2.t13))
(step t128.t2.t1.t2.t15 (cl (= @p_78 @p_66)) :rule ac_simp)
(step t128.t2.t1.t2.t16 (cl (= @p_76 @p_66)) :rule trans :premises (t128.t2.t1.t2.t14 t128.t2.t1.t2.t15))
(step t128.t2.t1.t2.t17 (cl (= @p_74 @p_66)) :rule trans :premises (t128.t2.t1.t2.t0 t128.t2.t1.t2.t16))
(step t128.t2.t1.t2 (cl (= (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (not (member$a ?v6 ?v3)) (not (= ?v6 ?v5))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule bind)
(step t128.t2.t1.t3 (cl (= (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule trans :premises (t128.t2.t1.t1 t128.t2.t1.t2))
(step t128.t2.t1.t4 (cl (= (=> @p_52 (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))) @p_67)) :rule cong :premises (t128.t2.t1.t0 t128.t2.t1.t3))
(step t128.t2.t1 (cl (= (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule bind)
(anchor :step t128.t2.t2 :args ((?v4 Label$) (:= (?v4 Label$) ?v4)))
(step t128.t2.t2.t0 (cl (= @p_67 @p_60)) :rule rare_rewrite :args ("bool-impl-elim" @p_52 (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))))
(step t128.t2.t2 (cl (= (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$)) (or (not (member$ ?v4 (do$ ?v2))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule bind)
(anchor :step t128.t2.t3 :args ((?v4 Label$) (:= (?v4 Label$) ?v4)))
(step t128.t2.t3.t0 (cl (= (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))) @p_61)) :rule qnt_miniscope_or)
(step t128.t2.t3.t1 (cl @p_59) :rule refl)
(anchor :step t128.t2.t3.t2 :args ((?v5 Char_list$) (?v6 Char_list$) (:= (BOUND_VARIABLE_8538 Char_list$) ?v5) (:= (BOUND_VARIABLE_8540 Char_list$) ?v6)))
(step t128.t2.t3.t2.t0 (cl (= @p_56 @p_66)) :rule refl)
(step t128.t2.t3.t2 (cl (= (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule bind)
(step t128.t2.t3.t3 (cl (= @p_61 @p_60)) :rule cong :premises (t128.t2.t3.t1 t128.t2.t3.t2))
(step t128.t2.t3.t4 (cl (= (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))) @p_60)) :rule trans :premises (t128.t2.t3.t0 t128.t2.t3.t3))
(step t128.t2.t3.t5 (cl (= @p_60 (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) :rule symm :premises (t128.t2.t3.t4))
(step t128.t2.t3 (cl (= (forall ((?v4 Label$)) (or (not (member$ ?v4 (do$ ?v2))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$)) (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule bind)
(step t128.t2.t4 (cl (= (forall ((?v4 Label$)) (forall ((BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) :rule qnt_join)
(step t128.t2.t5 (cl (= (forall ((?v4 Label$)) (or (not (member$ ?v4 (do$ ?v2))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) :rule trans :premises (t128.t2.t3 t128.t2.t4))
(anchor :step t128.t2.t6 :args ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$) (:= (?v4 Label$) ?v4) (:= (BOUND_VARIABLE_8538 Char_list$) BOUND_VARIABLE_8538) (:= (BOUND_VARIABLE_8540 Char_list$) BOUND_VARIABLE_8540)))
(step t128.t2.t6.t0 (cl (= @p_57 @p_58)) :rule ac_simp)
(step t128.t2.t6.t1 (cl @p_59) :rule refl)
(step t128.t2.t6.t2 (cl (= @p_51 @p_51)) :rule refl)
(step t128.t2.t6.t3 (cl (= @p_50 @p_50)) :rule refl)
(step t128.t2.t6.t4 (cl (= @p_55 @p_49)) :rule rare_rewrite :args ("eq-symm" BOUND_VARIABLE_8540 BOUND_VARIABLE_8538))
(step t128.t2.t6.t5 (cl (= @p_48 @p_48)) :rule refl)
(step t128.t2.t6.t6 (cl (= @p_58 @p_54)) :rule cong :premises (t128.t2.t6.t1 t128.t2.t6.t2 t128.t2.t6.t3 t128.t2.t6.t4 t128.t2.t6.t5))
(step t128.t2.t6.t7 (cl (= @p_57 @p_54)) :rule trans :premises (t128.t2.t6.t0 t128.t2.t6.t6))
(step t128.t2.t6 (cl (= (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (or (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8540 BOUND_VARIABLE_8538) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule bind)
(step t128.t2.t7 (cl (= (forall ((?v4 Label$)) (or (not (member$ ?v4 (do$ ?v2))) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule trans :premises (t128.t2.t5 t128.t2.t6))
(step t128.t2.t8 (cl (= (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (or (member$a ?v5 ?v3) (member$a ?v6 ?v3) (= ?v6 ?v5) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule trans :premises (t128.t2.t2 t128.t2.t7))
(step t128.t2.t9 (cl (= (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) :rule trans :premises (t128.t2.t1 t128.t2.t8))
(step t128.t2.t10 (cl (= (and @p_33 (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) @p_35)) :rule cong :premises (t128.t2.t0 t128.t2.t9))
(step t128.t2 (cl (= (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule bind)
(step t128.t3 (cl (= (forall ((?v3 Char_list_set$)) (not (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) @p_39)) :rule connective_def)
(anchor :step t128.t4 :args ((?v3 Char_list_set$) (:= (?v3 Char_list_set$) ?v3)))
(step t128.t4.t0 (cl @p_41 @p_40 @p_35) :rule equiv_neg2)
(step t128.t4.t1 (cl (or @p_42 @p_35)) :rule not_not)
(step t128.t4.t2 (cl (or @p_41 @p_35)) :rule resolution :premises (t128.t4.t0 t128.t4.t1))
(step t128.t4.t3 (cl @p_41 @p_42 @p_36) :rule equiv_neg1)
(step t128.t4.t4 (cl (or (not @p_42) @p_36)) :rule not_not)
(step t128.t4.t5 (cl (or @p_41 @p_36)) :rule resolution :premises (t128.t4.t3 t128.t4.t4))
(step t128.t4.t6 (cl @p_41) :rule resolution :premises (t128.t4.t2 t128.t4.t5))
(step t128.t4 (cl (= (exists ((?v3 Char_list_set$)) (not (not (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule bind)
(step t128.t5 (cl (= @p_39 @p_37)) :rule cong :premises (t128.t4))
(step t128.t6 (cl (= (forall ((?v3 Char_list_set$)) (not (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) @p_37)) :rule trans :premises (t128.t3 t128.t5))
(step t128.t7 (cl (= @p_31 @p_38)) :rule cong :premises (t128.t6))
(step t128.t8 (cl (= @p_38 (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule not_simplify)
(step t128.t9 (cl (= @p_31 (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule trans :premises (t128.t7 t128.t8))
(step t128.t10 (cl (= (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) @p_31)) :rule symm :premises (t128.t9))
(anchor :step t128.t11 :args ((?v3 Char_list_set$) (:= (?v3 Char_list_set$) ?v3)))
(step t128.t11.t0 (cl (= @p_36 (or @p_34 (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_33 (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))) rare-list))
(step t128.t11 (cl (= (forall ((?v3 Char_list_set$)) (not (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))) (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))) :rule bind)
(step t128.t12 (cl (= @p_31 @p_21)) :rule cong :premises (t128.t11))
(step t128.t13 (cl (= (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))) @p_21)) :rule trans :premises (t128.t10 t128.t12))
(step t128.t14 (cl (= (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))) @p_21)) :rule trans :premises (t128.t2 t128.t13))
(step t128.t15 (cl (= @p_30 @p_25)) :rule cong :premises (t128.t1 t128.t14))
(step t128.t16 (cl (= (=> @p_27 @p_30) @p_28)) :rule cong :premises (t128.t0 t128.t15))
(step t128 (cl (= (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v2) (and (= (dom$ ?v1) (do$ ?v2)) (exists ((?v3 Char_list_set$)) (and (finite$ ?v3) (forall ((?v4 Label$)) (=> (member$ ?v4 (do$ ?v2)) (forall ((?v5 Char_list$) (?v6 Char_list$)) (=> (and (not (member$a ?v5 ?v3)) (and (not (member$a ?v6 ?v3)) (not (= ?v5 ?v6)))) (typing$ (add$ (add$ ?v0 ?v5 ?v2) ?v6 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ ?v5) (fvar$ ?v6)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v2) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))))))) :rule bind)
(anchor :step t129 :args ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$) (:= (?v0 Type_environment$) ?v0) (:= (?v1 Label_sterm_option_fun$) ?v1) (:= (?v2 Type$) ?v2)))
(step t129.t0 (cl (= @p_28 (or (not @p_27) @p_25))) :rule rare_rewrite :args ("bool-impl-elim" @p_27 @p_25))
(step t129 (cl (= (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (=> (typing$ ?v0 (obj$ ?v1 ?v2) ?v2) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))))) (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v2)) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4))))))))))))))) :rule bind)
(step t130 (cl @p_17) :rule trans :premises (t128 t129))
(step t131 (cl (forall ((?v0 Type_environment$) (?v1 Label_sterm_option_fun$) (?v2 Type$)) (or (not (typing$ ?v0 (obj$ ?v1 ?v2) ?v2)) (and (= (do$ ?v2) (dom$ ?v1)) (not (forall ((?v3 Char_list_set$)) (or (not (finite$ ?v3)) (not (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ ?v2))) (member$a BOUND_VARIABLE_8538 ?v3) (member$a BOUND_VARIABLE_8540 ?v3) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ ?v0 BOUND_VARIABLE_8538 ?v2) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ ?v2 ?v4)))) (openz$ (the$a (fun_app$b ?v1 ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ ?v2 ?v4)))))))))))))) :rule resolution :premises (t127 t130 a9))
(step t132 (cl @p_16) :rule resolution :premises (t126 t131))
(step t133 (cl @p_12) :rule resolution :premises (t79 t124 t132))
(step t134 (cl @p_10) :rule resolution :premises (t77 t133))
(step t135 (cl @p_9) :rule resolution :premises (t73 t75 t134))
(step t136 (cl @p_6) :rule resolution :premises (t72 t135))
(step t137 (cl (or (! (not (forall ((?v0 Char_list_set$)) (or (not (finite$ ?v0)) (not (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))) :named @p_205) @p_203)) :rule forall_inst :args (@quantifiers_skolemize_4))
(step t138 (cl @p_205 @p_203) :rule or :premises (t137))
(step t139 (cl (not (! (= @p_2 (forall ((?v0 Char_list_set$)) (or (not (finite$ ?v0)) (not (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))) :named @p_204)) (not @p_2) (forall ((?v0 Char_list_set$)) (or (not (finite$ ?v0)) (not (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))) :rule equiv_pos2)
(anchor :step t140 :args ((?v0 Char_list_set$) (:= (?v0 Char_list_set$) ?v0)))
(step t140.t0 (cl (= (! (finite$ ?v0) :named @p_213) @p_213)) :rule refl)
(anchor :step t140.t1 :args ((?v1 Char_list$) (?v2 Char_list$) (:= (?v1 Char_list$) ?v1) (:= (?v2 Char_list$) ?v2)))
(step t140.t1.t0 (cl (= (! (and (! (not (! (member$a ?v1 ?v0) :named @p_227)) :named @p_231) (! (and (! (not (! (member$a ?v2 ?v0) :named @p_226)) :named @p_230) (! (not @p_225) :named @p_229)) :named @p_245)) :named @p_248) (! (and @p_231 @p_230 @p_229) :named @p_232))) :rule ac_simp)
(step t140.t1.t1 (cl (! (= @p_224 @p_224) :named @p_238)) :rule refl)
(step t140.t1.t2 (cl (= (=> @p_248 @p_224) (! (=> @p_232 @p_224) :named @p_233))) :rule cong :premises (t140.t1.t0 t140.t1.t1))
(step t140.t1 (cl (= (forall ((?v1 Char_list$) (?v2 Char_list$)) (=> (and (not (member$a ?v1 ?v0)) (and (not (member$a ?v2 ?v0)) (not (= ?v1 ?v2)))) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))) (forall ((?v1 Char_list$) (?v2 Char_list$)) (=> (and (not (member$a ?v1 ?v0)) (not (member$a ?v2 ?v0)) (not (= ?v1 ?v2))) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))) :rule bind)
(anchor :step t140.t2 :args ((?v1 Char_list$) (?v2 Char_list$) (:= (?v1 Char_list$) ?v1) (:= (?v2 Char_list$) ?v2)))
(step t140.t2.t0 (cl (= @p_233 (! (or (! (not @p_232) :named @p_234) @p_224) :named @p_235))) :rule rare_rewrite :args ("bool-impl-elim" @p_232 @p_224))
(step t140.t2.t1 (cl (= @p_234 (! (or (! (not @p_231) :named @p_242) (! (not @p_245) :named @p_246)) :named @p_247))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_231 @p_230 (rare-list @p_229)))
(step t140.t2.t2 (cl (= @p_242 @p_242)) :rule refl)
(step t140.t2.t3 (cl (= @p_246 (! (or (! (not @p_230) :named @p_240) (! (not @p_229) :named @p_239)) :named @p_241))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_230 @p_229 rare-list))
(step t140.t2.t4 (cl (= @p_247 (! (or @p_242 @p_241) :named @p_243))) :rule cong :premises (t140.t2.t2 t140.t2.t3))
(step t140.t2.t5 (cl (= @p_234 @p_243)) :rule trans :premises (t140.t2.t1 t140.t2.t4))
(step t140.t2.t6 (cl (= @p_243 (! (or @p_242 @p_240 @p_239) :named @p_244))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list @p_242) @p_240 (rare-list @p_239) rare-list))
(step t140.t2.t7 (cl (= @p_242 @p_227)) :rule rare_rewrite :args ("bool-double-not-elim" @p_227))
(step t140.t2.t8 (cl (= @p_240 @p_226)) :rule rare_rewrite :args ("bool-double-not-elim" @p_226))
(step t140.t2.t9 (cl (= @p_239 @p_225)) :rule rare_rewrite :args ("bool-double-not-elim" @p_225))
(step t140.t2.t10 (cl (= @p_244 (! (or @p_227 @p_226 @p_225) :named @p_236))) :rule cong :premises (t140.t2.t7 t140.t2.t8 t140.t2.t9))
(step t140.t2.t11 (cl (= @p_243 @p_236)) :rule trans :premises (t140.t2.t6 t140.t2.t10))
(step t140.t2.t12 (cl (= @p_234 @p_236)) :rule trans :premises (t140.t2.t5 t140.t2.t11))
(step t140.t2.t13 (cl @p_238) :rule refl)
(step t140.t2.t14 (cl (= @p_235 (! (or @p_236 @p_224) :named @p_237))) :rule cong :premises (t140.t2.t12 t140.t2.t13))
(step t140.t2.t15 (cl (= @p_237 (! (or @p_227 @p_226 @p_225 @p_224) :named @p_228))) :rule ac_simp)
(step t140.t2.t16 (cl (= @p_235 @p_228)) :rule trans :premises (t140.t2.t14 t140.t2.t15))
(step t140.t2.t17 (cl (= @p_233 @p_228)) :rule trans :premises (t140.t2.t0 t140.t2.t16))
(step t140.t2 (cl (= (forall ((?v1 Char_list$) (?v2 Char_list$)) (=> (and (not (member$a ?v1 ?v0)) (not (member$a ?v2 ?v0)) (not (= ?v1 ?v2))) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))) :rule bind)
(step t140.t3 (cl (= (forall ((?v1 Char_list$) (?v2 Char_list$)) (=> (and (not (member$a ?v1 ?v0)) (and (not (member$a ?v2 ?v0)) (not (= ?v1 ?v2)))) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))) :rule trans :premises (t140.t1 t140.t2))
(step t140.t4 (cl (= (and @p_213 (forall ((?v1 Char_list$) (?v2 Char_list$)) (=> (and (not (member$a ?v1 ?v0)) (and (not (member$a ?v2 ?v0)) (not (= ?v1 ?v2)))) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))) (! (and @p_213 (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))) :named @p_214))) :rule cong :premises (t140.t0 t140.t3))
(step t140 (cl (= (exists ((?v0 Char_list_set$)) (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (=> (and (not (member$a ?v1 ?v0)) (and (not (member$a ?v2 ?v0)) (not (= ?v1 ?v2)))) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))) (exists ((?v0 Char_list_set$)) (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))) :rule bind)
(step t141 (cl (= (forall ((?v0 Char_list_set$)) (not (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))))) (! (not (exists ((?v0 Char_list_set$)) (not (not (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))))))) :named @p_218))) :rule connective_def)
(anchor :step t142 :args ((?v0 Char_list_set$) (:= (?v0 Char_list_set$) ?v0)))
(step t142.t0 (cl (! (= (! (not (! (not @p_214) :named @p_215)) :named @p_219) @p_214) :named @p_220) @p_219 @p_214) :rule equiv_neg2)
(step t142.t1 (cl (or (! (not @p_219) :named @p_221) @p_214)) :rule not_not)
(step t142.t2 (cl (or @p_220 @p_214)) :rule resolution :premises (t142.t0 t142.t1))
(step t142.t3 (cl @p_220 @p_221 @p_215) :rule equiv_neg1)
(step t142.t4 (cl (or (not @p_221) @p_215)) :rule not_not)
(step t142.t5 (cl (or @p_220 @p_215)) :rule resolution :premises (t142.t3 t142.t4))
(step t142.t6 (cl @p_220) :rule resolution :premises (t142.t2 t142.t5))
(step t142 (cl (= (exists ((?v0 Char_list_set$)) (not (not (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))) (exists ((?v0 Char_list_set$)) (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))) :rule bind)
(step t143 (cl (= @p_218 (! (not (exists ((?v0 Char_list_set$)) (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))))) :named @p_216))) :rule cong :premises (t142))
(step t144 (cl (= (forall ((?v0 Char_list_set$)) (not (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))))) @p_216)) :rule trans :premises (t141 t143))
(step t145 (cl (= (! (not (forall ((?v0 Char_list_set$)) (not (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))) :named @p_211) (! (not @p_216) :named @p_217))) :rule cong :premises (t144))
(step t146 (cl (= @p_217 (exists ((?v0 Char_list_set$)) (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))) :rule not_simplify)
(step t147 (cl (= @p_211 (exists ((?v0 Char_list_set$)) (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))) :rule trans :premises (t145 t146))
(step t148 (cl (= (exists ((?v0 Char_list_set$)) (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))) @p_211)) :rule symm :premises (t147))
(anchor :step t149 :args ((?v0 Char_list_set$) (:= (?v0 Char_list_set$) ?v0)))
(step t149.t0 (cl (= @p_215 (or (not @p_213) (not (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))) :rule rare_rewrite :args ("bool-and-de-morgan" @p_213 (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))) rare-list))
(step t149 (cl (= (forall ((?v0 Char_list_set$)) (not (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))))) (forall ((?v0 Char_list_set$)) (or (not (finite$ ?v0)) (not (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))))))) :rule bind)
(step t150 (cl (= @p_211 @p_205)) :rule cong :premises (t149))
(step t151 (cl (= (exists ((?v0 Char_list_set$)) (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))) @p_205)) :rule trans :premises (t148 t150))
(step t152 (cl (= (exists ((?v0 Char_list_set$)) (and (finite$ ?v0) (forall ((?v1 Char_list$) (?v2 Char_list$)) (=> (and (not (member$a ?v1 ?v0)) (and (not (member$a ?v2 ?v0)) (not (= ?v1 ?v2)))) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))) @p_205)) :rule trans :premises (t140 t151))
(step t153 (cl (= p$ p$)) :rule refl)
(step t154 (cl (= @p_2 (! (=> @p_205 p$) :named @p_206))) :rule cong :premises (t152 t153))
(step t155 (cl (= @p_205 @p_205)) :rule refl)
(step t156 (cl (not (! (= @p_1 (! (= p$ false) :named @p_209)) :named @p_210)) (not @p_1) @p_209) :rule equiv_pos2)
(step t157 (cl (= @p_209 @p_1)) :rule rare_rewrite :args ("bool-eq-false" p$))
(step t158 (cl @p_210) :rule symm :premises (t157))
(step t159 (cl @p_209) :rule resolution :premises (t156 t158 a2))
(step t160 (cl (= @p_206 (! (=> @p_205 false) :named @p_207))) :rule cong :premises (t155 t159))
(step t161 (cl (= @p_207 (! (not @p_205) :named @p_208))) :rule rare_rewrite :args ("bool-impl-false1" @p_205))
(step t162 (cl (= @p_208 (forall ((?v0 Char_list_set$)) (or (not (finite$ ?v0)) (not (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))))))) :rule rare_rewrite :args ("bool-double-not-elim" (forall ((?v0 Char_list_set$)) (or (not (finite$ ?v0)) (not (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))))
(step t163 (cl (= @p_207 (forall ((?v0 Char_list_set$)) (or (not (finite$ ?v0)) (not (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))))))) :rule trans :premises (t161 t162))
(step t164 (cl (= @p_206 (forall ((?v0 Char_list_set$)) (or (not (finite$ ?v0)) (not (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$)))))))) :rule trans :premises (t160 t163))
(step t165 (cl @p_204) :rule trans :premises (t154 t164))
(step t166 (cl (forall ((?v0 Char_list_set$)) (or (not (finite$ ?v0)) (not (forall ((?v1 Char_list$) (?v2 Char_list$)) (or (member$a ?v1 ?v0) (member$a ?v2 ?v0) (= ?v1 ?v2) (typing$ (add$ (add$ e$ ?v1 u$) ?v2 (param$ (the$ (type_get$ u$ l$)))) (openz$ (the$a (fun_app$b f$ l$)) (fvar$ ?v1) (fvar$ ?v2)) t$))))))) :rule resolution :premises (t139 t165 a3))
(step t167 (cl @p_203) :rule resolution :premises (t138 t166))
(step t168 (cl @p_202) :rule resolution :premises (t51 t136 t167))
(step t169 (cl @p_201) :rule resolution :premises (t47 t49 t168))
(step t170 (cl @p_270) :rule resolution :premises (t46 t169))
(step t171 (cl @p_200 (! (not @p_186) :named @p_269)) :rule or_neg :args (1))
(step t172 (cl @p_269) :rule resolution :premises (t171 t169))
(step t173 (cl @p_200 (! (not @p_185) :named @p_268)) :rule or_neg :args (2))
(step t174 (cl @p_268) :rule resolution :premises (t173 t169))
(step t175 (cl (= (! (= @p_184 false) :named @p_191) (! (not @p_184) :named @p_190))) :rule equiv_simplify)
(step t176 (cl (not @p_191) @p_190) :rule equiv1 :premises (t175))
(step t177 (cl (= @quantifiers_skolemize_5 @quantifiers_skolemize_5)) :rule refl)
(step t178 (cl (= @p_182 @p_195)) :rule cong :premises (t82 t177 t116))
(step t179 (cl (= @quantifiers_skolemize_6 @quantifiers_skolemize_6)) :rule refl)
(step t180 (cl (= l$ l$)) :rule refl)
(step t181 (cl (= @p_98 @p_192)) :rule cong :premises (t116 t180))
(step t182 (cl (= @p_99 @p_193)) :rule cong :premises (t181))
(step t183 (cl (= @p_100 @p_194)) :rule cong :premises (t182))
(step t184 (cl (= @p_183 @p_196)) :rule cong :premises (t178 t179 t183))
(step t185 (cl (= @p_181 @p_181)) :rule refl)
(step t186 (cl (not (! (= (! (or @p_105 (! (not @p_104) :named @p_261)) :named @p_262) (! (or @p_105 @p_103) :named @p_260)) :named @p_263)) (not @p_262) @p_260) :rule equiv_pos2)
(step t187 (cl (= (! (= (! (= @p_261 @p_103) :named @p_264) true) :named @p_265) @p_264)) :rule equiv_simplify)
(step t188 (cl (not @p_265) @p_264) :rule equiv1 :premises (t187))
(step t189 (cl (= @p_264 (! (= @p_103 @p_261) :named @p_266))) :rule rare_rewrite :args ("eq-symm" @p_261 @p_103))
(step t190 (cl (! (= @p_103 @p_103) :named @p_267)) :rule refl)
(step t191 (cl @p_264) :rule rare_rewrite :args ("bool-double-not-elim" @p_103))
(step t192 (cl (= @p_266 @p_267)) :rule cong :premises (t190 t191))
(step t193 (cl (= @p_267 true)) :rule rare_rewrite :args ("eq-refl" @p_103))
(step t194 (cl (= @p_266 true)) :rule trans :premises (t192 t193))
(step t195 (cl @p_265) :rule trans :premises (t189 t194))
(step t196 (cl @p_264) :rule resolution :premises (t188 t195))
(step t197 (cl @p_263) :rule cong :premises (t10 t196))
(step t198 (cl @p_105 @p_261) :rule or_neg :args (0))
(step t199 (cl @p_262 @p_106) :rule or_neg :args (0))
(step t200 (cl @p_262 (not @p_261)) :rule or_neg :args (1))
(step t201 (cl @p_262 @p_262) :rule resolution :premises (t198 t199 t200))
(step t202 (cl @p_262) :rule contraction :premises (t201))
(step t203 (cl @p_260) :rule resolution :premises (t186 t197 t202))
(step t204 (cl @p_105 @p_103) :rule or :premises (t203))
(step t205 (cl @p_103 @p_105) :rule reordering :premises (t204))
(step t206 (cl @p_103) :rule resolution :premises (t205 t44))
(step t207 (cl (= @p_102 t$)) :rule symm :premises (t206))
(step t208 (cl (= @p_184 @p_197)) :rule cong :premises (t184 t185 t207))
(step t209 (cl (= (! (= @p_197 false) :named @p_198) (! (not @p_197) :named @p_199))) :rule equiv_simplify)
(step t210 (cl @p_198 (! (not @p_199) :named @p_259)) :rule equiv2 :premises (t209))
(step t211 (cl (not @p_259) @p_197) :rule not_not)
(step t212 (cl @p_198 @p_197) :rule resolution :premises (t210 t211))
(step t213 (cl @p_200 @p_199) :rule or_neg :args (3))
(step t214 (cl @p_199) :rule resolution :premises (t213 t169))
(step t215 (cl @p_198) :rule resolution :premises (t212 t214))
(step t216 (cl @p_191) :rule trans :premises (t208 t215))
(step t217 (cl @p_190) :rule resolution :premises (t176 t216))
(step t218 (cl @p_189) :rule resolution :premises (t8 t45 t170 t172 t174 t217))
(step t219 (cl (not @p_175) (not @p_174) @p_172) :rule equiv_pos2)
(step t220 (cl (= @p_177 @p_176)) :rule equiv_simplify)
(step t221 (cl (not @p_177) @p_176) :rule equiv1 :premises (t220))
(step t222 (cl (= @p_176 @p_178)) :rule rare_rewrite :args ("eq-symm" @p_173 (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))))
(step t223 (cl @p_179) :rule refl)
(step t224 (cl @p_176) :rule rare_rewrite :args ("bool-double-not-elim" (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))))
(step t225 (cl (= @p_178 @p_179)) :rule cong :premises (t223 t224))
(step t226 (cl (= @p_179 true)) :rule rare_rewrite :args ("eq-refl" (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))))
(step t227 (cl (= @p_178 true)) :rule trans :premises (t225 t226))
(step t228 (cl @p_177) :rule trans :premises (t222 t227))
(step t229 (cl @p_176) :rule resolution :premises (t221 t228))
(step t230 (cl @p_175) :rule cong :premises (t53 t229))
(step t231 (cl @p_8 @p_173) :rule or_neg :args (1))
(step t232 (cl @p_174 @p_9) :rule or_neg :args (0))
(step t233 (cl @p_174 (not @p_173)) :rule or_neg :args (1))
(step t234 (cl @p_174 @p_174) :rule resolution :premises (t231 t232 t233))
(step t235 (cl @p_174) :rule contraction :premises (t234))
(step t236 (cl @p_172) :rule resolution :premises (t219 t230 t235))
(step t237 (cl @p_8 (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))) :rule or :premises (t236))
(step t238 (cl (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))))) @p_8) :rule reordering :premises (t237))
(step t239 (cl (forall ((?v4 Label$) (BOUND_VARIABLE_8538 Char_list$) (BOUND_VARIABLE_8540 Char_list$)) (or (not (member$ ?v4 (do$ @quantifiers_skolemize_3))) (member$a BOUND_VARIABLE_8538 @quantifiers_skolemize_4) (member$a BOUND_VARIABLE_8540 @quantifiers_skolemize_4) (= BOUND_VARIABLE_8538 BOUND_VARIABLE_8540) (typing$ (add$ (add$ e$ BOUND_VARIABLE_8538 @quantifiers_skolemize_3) BOUND_VARIABLE_8540 (param$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4)))) (openz$ (the$a (fun_app$b f$ ?v4)) (fvar$ BOUND_VARIABLE_8538) (fvar$ BOUND_VARIABLE_8540)) (return$ (the$ (type_get$ @quantifiers_skolemize_3 ?v4))))))) :rule resolution :premises (t238 t135))
(step t240 (cl) :rule resolution :premises (t6 t218 t239))
