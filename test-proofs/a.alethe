unsat
(assume a0 (= (not (= (f a) d)) (not (= d (f b)))))
(assume a1 (or (not (= (f a) d)) (not (= d (f b)))))
(assume a2 (or (= (f a) d) (= d (f b))))
(step t0 (cl (not (= (or (not (= (f a) d)) (not (= d (f b)))) (or (not (= d (f a))) (not (= d (f b)))))) (not (or (not (= (f a) d)) (not (= d (f b))))) (or (not (= d (f a))) (not (= d (f b))))) :rule equiv_pos2)
(step t1 (cl (= (= (f a) d) (= d (f a)))) :rule hole :args ("TRUST_THEORY_REWRITE" (= (= (f a) d) (= d (f a))) 2 7))
(step t2 (cl (= (not (= (f a) d)) (not (= d (f a))))) :rule cong :premises (t1))
(step t3 (cl (= (not (= d (f b))) (not (= d (f b))))) :rule refl)
(step t4 (cl (= (or (not (= (f a) d)) (not (= d (f b)))) (or (not (= d (f a))) (not (= d (f b)))))) :rule cong :premises (t2 t3))
(step t5 (cl (or (not (= d (f a))) (not (= d (f b))))) :rule resolution :premises (t0 t4 a1))
(step t6 (cl (not (= d (f a))) (not (= d (f b)))) :rule or :premises (t5))
(step t7 (cl (not (= d (f b))) (not (= d (f a)))) :rule reordering :premises (t6))
(step t8 (cl (not (= (or (not (= d (f b))) (not (not (= d (f a))))) (or (not (= d (f b))) (= d (f a))))) (not (or (not (= d (f b))) (not (not (= d (f a)))))) (or (not (= d (f b))) (= d (f a)))) :rule equiv_pos2)
(step t9 (cl (= (not (not (= d (f a)))) (= d (f a)))) :rule hole :args ("TRUST_THEORY_REWRITE" (= (not (not (= d (f a)))) (= d (f a))) 1 6))
(step t10 (cl (= (or (not (= d (f b))) (not (not (= d (f a))))) (or (not (= d (f b))) (= d (f a))))) :rule cong :premises (t3 t9))
(step t11 (cl (not (= (= (not (= (f a) d)) (not (= d (f b)))) (= (not (= d (f b))) (not (= d (f a)))))) (not (= (not (= (f a) d)) (not (= d (f b))))) (= (not (= d (f b))) (not (= d (f a))))) :rule equiv_pos2)
(step t12 (cl (= (= (not (= (f a) d)) (not (= d (f b)))) (= (not (= d (f a))) (not (= d (f b)))))) :rule cong :premises (t2 t3))
(step t13 (cl (= (= (not (= d (f a))) (not (= d (f b)))) (= (not (= d (f b))) (not (= d (f a)))))) :rule hole :args ("TRUST_THEORY_REWRITE" (= (= (not (= d (f a))) (not (= d (f b)))) (= (not (= d (f b))) (not (= d (f a))))) 1 7))
(step t14 (cl (= (= (not (= (f a) d)) (not (= d (f b)))) (= (not (= d (f b))) (not (= d (f a)))))) :rule trans :premises (t12 t13))
(step t15 (cl (= (not (= d (f b))) (not (= d (f a))))) :rule resolution :premises (t11 t14 a0))
(step t16 (cl (not (= d (f b))) (not (not (= d (f a))))) :rule equiv2 :premises (t15))
(step t17 (cl (or (not (= d (f b))) (not (not (= d (f a))))) (not (not (= d (f b))))) :rule or_neg :args (0))
(step t18 (cl (or (not (= d (f b))) (not (not (= d (f a))))) (not (not (not (= d (f a)))))) :rule or_neg :args (1))
(step t19 (cl (or (not (= d (f b))) (not (not (= d (f a))))) (or (not (= d (f b))) (not (not (= d (f a)))))) :rule resolution :premises (t16 t17 t18))
(step t20 (cl (or (not (= d (f b))) (not (not (= d (f a)))))) :rule contraction :premises (t19))
(step t21 (cl (or (not (= d (f b))) (= d (f a)))) :rule resolution :premises (t8 t10 t20))
(step t22 (cl (not (= d (f b))) (= d (f a))) :rule or :premises (t21))
(step t23 (cl (not (= (or (= (f a) d) (= d (f b))) (or (= d (f a)) (= d (f b))))) (not (or (= (f a) d) (= d (f b)))) (or (= d (f a)) (= d (f b)))) :rule equiv_pos2)
(step t24 (cl (= (= d (f b)) (= d (f b)))) :rule refl)
(step t25 (cl (= (or (= (f a) d) (= d (f b))) (or (= d (f a)) (= d (f b))))) :rule cong :premises (t1 t24))
(step t26 (cl (or (= d (f a)) (= d (f b)))) :rule resolution :premises (t23 t25 a2))
(step t27 (cl (= d (f a)) (= d (f b))) :rule or :premises (t26))
(step t28 (cl (= d (f b)) (= d (f a))) :rule reordering :premises (t27))
(step t29 (cl (not (= (or (not (not (= d (f b)))) (not (= d (f a)))) (or (= d (f b)) (not (= d (f a)))))) (not (or (not (not (= d (f b)))) (not (= d (f a))))) (or (= d (f b)) (not (= d (f a))))) :rule equiv_pos2)
(step t30 (cl (= (not (not (= d (f b)))) (= d (f b)))) :rule hole :args ("TRUST_THEORY_REWRITE" (= (not (not (= d (f b)))) (= d (f b))) 1 6))
(step t31 (cl (= (not (= d (f a))) (not (= d (f a))))) :rule refl)
(step t32 (cl (= (or (not (not (= d (f b)))) (not (= d (f a)))) (or (= d (f b)) (not (= d (f a)))))) :rule cong :premises (t30 t31))
(step t33 (cl (not (not (= d (f b)))) (not (= d (f a)))) :rule equiv1 :premises (t15))
(step t34 (cl (or (not (not (= d (f b)))) (not (= d (f a)))) (not (not (not (= d (f b)))))) :rule or_neg :args (0))
(step t35 (cl (or (not (not (= d (f b)))) (not (= d (f a)))) (not (not (= d (f a))))) :rule or_neg :args (1))
(step t36 (cl (or (not (not (= d (f b)))) (not (= d (f a)))) (or (not (not (= d (f b)))) (not (= d (f a))))) :rule resolution :premises (t33 t34 t35))
(step t37 (cl (or (not (not (= d (f b)))) (not (= d (f a))))) :rule contraction :premises (t36))
(step t38 (cl (or (= d (f b)) (not (= d (f a))))) :rule resolution :premises (t29 t32 t37))
(step t39 (cl (= d (f b)) (not (= d (f a)))) :rule or :premises (t38))
(step t40 (cl (= d (f b))) :rule resolution :premises (t28 t39))
(step t41 (cl (= d (f a))) :rule resolution :premises (t22 t40))
(step t42 (cl) :rule resolution :premises (t7 t41 t40))

