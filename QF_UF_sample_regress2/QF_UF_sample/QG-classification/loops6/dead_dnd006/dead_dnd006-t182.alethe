(assume nst182.0 (not (not (= e3 (op e3 e0)))))
(assume nst182.1 (not (not (= e0 (op e3 (op e3 e0))))))
(assume nst182.2 (not (= e3 (op e3 (op e3 e3)))))
(assume t169 (or (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0))))))
(assume t181 (or (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 (op e3 e3)))))
(step t169' (cl (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0))))) :rule or :premises (t169))
(step t181' (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 (op e3 e3)))) :rule or :premises (t181))
(step st182 (cl (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) :rule resolution :premises (t169' t181'))
(step t.end (cl) :rule resolution :premises (nst182.0 nst182.1 nst182.2 st182))
