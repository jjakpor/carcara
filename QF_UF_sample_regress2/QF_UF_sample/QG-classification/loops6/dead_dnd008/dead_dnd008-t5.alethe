(assume nst5.0 (not (= e2 (op e2 (op e2 e2)))))
(assume nst5.1 (not (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))))))
(assume nst5.2 (not (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))))))
(assume t2 (or (not (= e2 (op e2 e0))) (not (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))))
(assume t3 (or (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e2 (op e2 e0))))
(assume t4 (or (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e0 (op e2 (op e2 e0)))))
(step t3' (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e2 (op e2 e0))) :rule or :premises (t3))
(step t4' (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e0 (op e2 (op e2 e0)))) :rule or :premises (t4))
(step t2' (cl (not (= e2 (op e2 e0))) (not (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) :rule or :premises (t2))
(step st5 (cl (= e2 (op e2 (op e2 e2))) (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))))) :rule resolution :premises (t2' t3' t4'))
(step t.end (cl) :rule resolution :premises (nst5.0 nst5.1 nst5.2 st5))
