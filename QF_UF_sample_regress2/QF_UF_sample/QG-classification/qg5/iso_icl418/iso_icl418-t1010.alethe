(assume nst1010.0 (not (= (op e3 (op e4 e3)) (op (op e4 e3) e3))))
(assume nst1010.1 (not (not (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))))
(assume t1009 (or (not (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))))
(step t1009' (cl (not (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))) :rule or :premises (t1009))
(step st1010 (cl (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (not (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule reordering :premises (t1009'))
(step t.end (cl) :rule resolution :premises (nst1010.0 nst1010.1 st1010))
