(assume nst1018.0 (not (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3))))
(assume t892 (or (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (not (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))))
(assume t1017 (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))
(step t892' (cl (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (not (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule or :premises (t892))
(step st1018 (cl (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3))) :rule resolution :premises (t892' t1017))
(step t.end (cl) :rule resolution :premises (nst1018.0 st1018))
