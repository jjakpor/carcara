(assume nst481.0 (not (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)))))
(assume t477 (or (not (= (not (= (op e0 e0) (op e0 e4))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4))))) (not (not (= (op e0 e0) (op e0 e4)))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)))))
(assume t479 (= (not (= (op e0 e0) (op e0 e4))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)))))
(assume t480 (not (= (op e0 e0) (op e0 e4))))
(step t477' (cl (not (= (not (= (op e0 e0) (op e0 e4))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4))))) (not (not (= (op e0 e0) (op e0 e4)))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule or :premises (t477))
(step st481 (cl (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule resolution :premises (t477' t479 t480))
(step t.end (cl) :rule resolution :premises (nst481.0 st481))
