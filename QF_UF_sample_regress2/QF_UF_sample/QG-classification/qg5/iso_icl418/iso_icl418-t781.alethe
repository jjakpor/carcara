(assume nst781.0 (not (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))
(assume nst781.1 (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))))
(assume nst781.2 (not (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4)))))
(assume nst781.3 (not (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3)))))
(assume nst781.4 (not (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4)))))
(assume t780 (or (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))
(step t780' (cl (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))) :rule or :premises (t780))
(step st781 (cl (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4)))) :rule reordering :premises (t780'))
(step t.end (cl) :rule resolution :premises (nst781.0 nst781.1 nst781.2 nst781.3 nst781.4 st781))
