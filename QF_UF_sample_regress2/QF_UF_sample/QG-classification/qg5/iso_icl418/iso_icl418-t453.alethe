(assume nst453.0 (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4))))
(assume nst453.1 (not (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4))))
(assume nst453.2 (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4))))
(assume nst453.3 (not (= e3 (op (op (op e4 e3) (op e4 e3)) e4))))
(assume nst453.4 (not (= e4 (op (op (op e4 e3) (op e4 e3)) e4))))
(assume t452 (or (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4))))
(step t452' (cl (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4))) :rule or :premises (t452))
(step st453 (cl (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= e4 (op (op (op e4 e3) (op e4 e3)) e4))) :rule reordering :premises (t452'))
(step t.end (cl) :rule resolution :premises (nst453.0 nst453.1 nst453.2 nst453.3 nst453.4 st453))
