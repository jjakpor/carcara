(assume nst912.0 (not (= (and (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e3 e3)) (= (op e3 e2) (op e2 e3)) (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))))))
(assume t910 (= (and (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e3 e3)) (= (op e3 e2) (op e2 e3)) (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (and (= (op e3 e4) (op e4 e3)) true (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1)))))
(assume t911 (= (and (= (op e3 e4) (op e4 e3)) true (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1)))))
(step st912 (cl (= (and (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e3 e3)) (= (op e3 e2) (op e2 e3)) (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))))) :rule trans :premises (t910 t911))
(step t.end (cl) :rule resolution :premises (nst912.0 st912))
