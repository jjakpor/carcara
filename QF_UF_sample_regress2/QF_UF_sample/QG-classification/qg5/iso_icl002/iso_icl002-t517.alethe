(assume nst517.0 (not (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))))
(assume t508 (or (not (= (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3)) (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) (not (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3))) (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))))
(assume t513 (= (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3)) (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))))
(assume t516 (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3)))
(step t508' (cl (not (= (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3)) (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) (not (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3))) (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule or :premises (t508))
(step st517 (cl (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t508' t513 t516))
(step t.end (cl) :rule resolution :premises (nst517.0 st517))
