(assume nst160.0 (not (= (op e0 e0) (op (op e0 (op e0 e0)) e0))))
(assume nst160.1 (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))
(assume nst160.2 (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))
(assume nst160.3 (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))))
(assume nst160.4 (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0)))))
(assume t159 (or (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))
(step t159' (cl (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) :rule or :premises (t159))
(step st160 (cl (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule reordering :premises (t159'))
(step t.end (cl) :rule resolution :premises (nst160.0 nst160.1 nst160.2 nst160.3 nst160.4 st160))
