(assume nst624.0 (not (= (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) false)))
(assume nst624.1 (not (not (not (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))))))
(assume t623 (= (= (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))))
(step st624 (cl (= (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (not (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule equiv2 :premises (t623))
(step t.end (cl) :rule resolution :premises (nst624.0 nst624.1 st624))
