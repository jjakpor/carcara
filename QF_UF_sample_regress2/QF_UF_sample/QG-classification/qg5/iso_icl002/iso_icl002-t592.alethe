(assume nst592.0 (not (= (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))))
(assume t580 (= (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)) (or (= e3 (op e4 e4)) (= e3 (op e3 e4)) (= e3 (op e2 e4)) (= e3 (op e0 e4)) (= e3 (op e1 e4)))))
(assume t591 (= (or (= e3 (op e4 e4)) (= e3 (op e3 e4)) (= e3 (op e2 e4)) (= e3 (op e0 e4)) (= e3 (op e1 e4))) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))))))
(step st592 (cl (= (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule trans :premises (t580 t591))
(step t.end (cl) :rule resolution :premises (nst592.0 st592))
