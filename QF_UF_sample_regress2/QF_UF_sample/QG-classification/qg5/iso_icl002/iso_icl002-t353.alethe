(assume nst353.0 (not (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0))))))
(assume t343 (or (not (= (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4)) (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0)))))) (not (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4))) (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0))))))
(assume t350 (= (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4)) (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0))))))
(assume t352 (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4)))
(step t343' (cl (not (= (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4)) (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0)))))) (not (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4))) (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0))))) :rule or :premises (t343))
(step st353 (cl (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0))))) :rule resolution :premises (t343' t350 t352))
(step t.end (cl) :rule resolution :premises (nst353.0 st353))
