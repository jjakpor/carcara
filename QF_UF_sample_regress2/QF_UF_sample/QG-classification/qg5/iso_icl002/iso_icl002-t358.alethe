(assume nst358.0 (not (not (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))))))
(assume nst358.1 (not (not (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)))))
(assume nst358.2 (not (or (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))))
(step st358 (cl (not (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) (not (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nst358.0 nst358.1 nst358.2 st358))
