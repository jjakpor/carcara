(assume nst809.0 (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))))
(assume t160 (or (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0)))))
(assume t178 (not (= (op e0 e0) (op (op e0 (op e0 e0)) e0))))
(assume t698 (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))
(assume t792 (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))
(assume t808 (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0)))))
(step t160' (cl (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule or :premises (t160))
(step st809 (cl (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t160' t178 t698 t792 t808))
(step t.end (cl) :rule resolution :premises (nst809.0 st809))
