(assume nst223.0 (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))
(assume nst223.1 (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))
(assume nst223.2 (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)))))
(assume nst223.3 (not (= (op e0 e0) (op e0 (op e0 e0)))))
(assume nst223.4 (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))
(assume t222 (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))
(step st223 (cl (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) :rule or :premises (t222))
(step t.end (cl) :rule resolution :premises (nst223.0 nst223.1 nst223.2 nst223.3 nst223.4 st223))
