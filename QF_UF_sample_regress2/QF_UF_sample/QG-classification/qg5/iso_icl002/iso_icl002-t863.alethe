(assume nst863.0 (not (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))))
(assume t850 (or (not (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))) (not (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))))
(assume t861 (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))))
(assume t862 (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)))
(step t850' (cl (not (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))) (not (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule or :premises (t850))
(step st863 (cl (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t850' t861 t862))
(step t.end (cl) :rule resolution :premises (nst863.0 st863))
