(assume nst669.0 (not (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))) false)))
(assume nst669.1 (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))))
(assume t667 (or (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))) false) (not (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))))))
(assume t668 (or (not (not (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))))
(step t667' (cl (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))) false) (not (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule or :premises (t667))
(step t668' (cl (not (not (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule or :premises (t668))
(step st669 (cl (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))) false) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule resolution :premises (t667' t668'))
(step t.end (cl) :rule resolution :premises (nst669.0 nst669.1 st669))
