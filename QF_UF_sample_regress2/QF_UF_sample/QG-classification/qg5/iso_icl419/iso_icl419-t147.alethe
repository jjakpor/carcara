(assume nst147.0 (not (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))
(assume t135 (or (not (= (= (op (op e2 e0) e2) e0) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op (op e2 e0) e2) e0)) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))
(assume t139 (= (= (op (op e2 e0) e2) e0) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))
(assume t146 (= (op (op e2 e0) e2) e0))
(step t135' (cl (not (= (= (op (op e2 e0) e2) e0) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op (op e2 e0) e2) e0)) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule or :premises (t135))
(step st147 (cl (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t135' t139 t146))
(step t.end (cl) :rule resolution :premises (nst147.0 st147))
