(assume nst607.0 (not (= (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))) false)))
(assume nst607.1 (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))
(assume t605 (or (= (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))) false) (not (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))))
(assume t606 (or (not (not (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))
(step t605' (cl (= (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))) false) (not (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) :rule or :premises (t605))
(step t606' (cl (not (not (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))) :rule or :premises (t606))
(step st607 (cl (= (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))) false) (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))) :rule resolution :premises (t605' t606'))
(step t.end (cl) :rule resolution :premises (nst607.0 nst607.1 st607))
