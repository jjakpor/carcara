(assume nt780.0 (not (not (not (= (op e3 e1) (op e3 e3))))))
(assume nt780.1 (not (not (= e1 (op e3 (op (op e1 e3) e3))))))
(assume nt780.2 (not (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))))
(assume nt780.3 (not (not (= e3 (op e3 e3)))))
(assume nt780.4 (not (not (= e3 (op (op e1 e3) (op (op e1 e3) e3))))))
(assume nt780.5 (not (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))))
(assume nt780.6 (not (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))))
(assume nt780.7 (not (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))))
(assume t383 (= e3 (op e1 (op e1 e3))))
(anchor :step t780)
(assume t780.a0 (not (= (op e3 e1) (op e3 e3))))
(assume t780.a1 (= e1 (op e3 (op (op e1 e3) e3))))
(assume t780.a2 (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))
(assume t780.a3 (= e3 (op e3 e3)))
(assume t780.a4 (= e3 (op (op e1 e3) (op (op e1 e3) e3))))
(assume t780.a5 (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))
(assume t780.a6 (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))
(step t780.t5 (cl (= (op (op e1 e3) (op (op e1 e3) e3)) e3)) :rule trust)
(step st780.t19 (cl (= (op (op e1 e3) (op (op e1 e3) e3)) (op e1 (op e1 e3)))) :rule trans :premises (t780.t5 t383))
(step t780.t33 (cl (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule trust)
(step t780 (cl (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule subproof :discharge (t780.a0 t780.a1 t780.a2 t780.a3 t780.a4 t780.a5 t780.a6))
(step t.end (cl) :rule resolution :premises (nt780.0 nt780.1 nt780.2 nt780.3 nt780.4 nt780.5 nt780.6 nt780.7 t780))
