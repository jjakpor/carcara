(assume nst675.0 (not (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) false)))
(assume nst675.1 (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))
(assume t673 (or (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) false) (not (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))))
(assume t674 (or (not (not (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))) (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))
(step t674' (cl (not (not (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))) (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))) :rule or :premises (t674))
(step t673' (cl (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) false) (not (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))) :rule or :premises (t673))
(step st675 (cl (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) false) (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))) :rule resolution :premises (t673' t674'))
(step t.end (cl) :rule resolution :premises (nst675.0 nst675.1 st675))
