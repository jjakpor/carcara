(assume nst457.0 (not (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) e0)))))
(assume t453 (or (not (= (not (= (op e1 e0) (op e4 e0))) (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) e0))))) (not (not (= (op e1 e0) (op e4 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) e0)))))
(assume t455 (= (not (= (op e1 e0) (op e4 e0))) (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) e0)))))
(assume t456 (not (= (op e1 e0) (op e4 e0))))
(step t453' (cl (not (= (not (= (op e1 e0) (op e4 e0))) (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) e0))))) (not (not (= (op e1 e0) (op e4 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) e0)))) :rule or :premises (t453))
(step st457 (cl (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) e0)))) :rule resolution :premises (t453' t455 t456))
(step t.end (cl) :rule resolution :premises (nst457.0 st457))
