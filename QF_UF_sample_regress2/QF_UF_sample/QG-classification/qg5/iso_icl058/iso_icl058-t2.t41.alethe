(assume nt2.0 (not (not (= e0 (op (op (op (op e0 e0) e0) e0) e0)))))
(assume nt2.1 (not (not (= e0 (op (op e0 e0) (op e0 e0))))))
(assume nt2.2 (not (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))))))
(assume nt2.3 (not (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))))
(assume nt2.4 (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))))
(assume a5 (and (and (and (and (not (= (op e0 e0) e0)) (not (= (op e1 e1) e1))) (not (= (op e2 e2) e2))) (not (= (op e3 e3) e3))) (not (= (op e4 e4) e4))))
(anchor :step t2)
(assume t2.a0 (= e0 (op (op (op (op e0 e0) e0) e0) e0)))
(assume t2.a1 (= e0 (op (op e0 e0) (op e0 e0))))
(assume t2.a2 (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))))
(assume t2.a3 (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))
(step st2.t41 (cl (and (and (and (not (= (op e0 e0) e0)) (not (= (op e1 e1) e1))) (not (= (op e2 e2) e2))) (not (= (op e3 e3) e3)))) :rule and :premises (a5) :args (0))
(step t2.t200 (cl (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule trust)
(step t2 (cl (not (= e0 (op (op (op (op e0 e0) e0) e0) e0))) (not (= e0 (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule subproof :discharge (t2.a0 t2.a1 t2.a2 t2.a3))
(step t.end (cl) :rule resolution :premises (nt2.0 nt2.1 nt2.2 nt2.3 nt2.4 t2))
