(assume nst932.0 (not (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))))
(assume nst932.1 (not (not (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))))))
(assume nst932.2 (not (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))))
(assume nst932.3 (not (not (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))))))
(assume t931 (or (not (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))))
(step t931' (cl (not (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule or :premises (t931))
(step st932 (cl (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))) (not (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (not (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))))) :rule reordering :premises (t931'))
(step t.end (cl) :rule resolution :premises (nst932.0 nst932.1 nst932.2 nst932.3 st932))
