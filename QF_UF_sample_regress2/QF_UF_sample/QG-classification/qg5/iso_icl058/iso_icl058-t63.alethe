(assume nst63.0 (not (= e0 (op (op e0 e0) e0))))
(assume nst63.1 (not (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))
(assume nst63.2 (not (= e0 (op (op e0 e0) (op e0 e0)))))
(assume nst63.3 (not (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0)))))
(assume nst63.4 (not (= e0 (op (op e0 e0) (op (op e0 e0) e0)))))
(assume t62 (or (= e0 (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= e0 (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) e0)) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))
(step t62' (cl (= e0 (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= e0 (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) e0)) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule or :premises (t62))
(step st63 (cl (= e0 (op (op e0 e0) e0)) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= e0 (op (op e0 e0) (op (op e0 e0) e0)))) :rule reordering :premises (t62'))
(step t.end (cl) :rule resolution :premises (nst63.0 nst63.1 nst63.2 nst63.3 nst63.4 st63))
