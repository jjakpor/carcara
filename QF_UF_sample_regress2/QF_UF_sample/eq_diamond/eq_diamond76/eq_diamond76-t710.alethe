(assume nst710.0 (not (not (= (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64)))) true))))
(assume nst710.1 (not (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64))))))
(assume t709 (= (= (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64)))) true) (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64))))))
(step st710 (cl (not (= (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64)))) true)) (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64))))) :rule equiv1 :premises (t709))
(step t.end (cl) :rule resolution :premises (nst710.0 nst710.1 st710))
