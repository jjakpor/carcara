(assume nt265.0 (not (not (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))))))))
(assume nt265.1 (not (not (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))))
(assume nt265.2 (not (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))))))
(step t265 (cl (not (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) (not (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2))) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nt265.0 nt265.1 nt265.2 t265))
