(assume t825 (or (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))))
(assume nt826.0 (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))
(assume nt826.1 (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))))
(assume nt826.2 (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))))
(assume nt826.3 (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)))))
(assume nt826.4 (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))
(step t825' (cl (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))) :rule or :premises (t825))
(step t826 (cl (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule reordering :premises (t825'))
(step t.end (cl) :rule resolution :premises (nt826.0 nt826.1 nt826.2 nt826.3 nt826.4 t826))
