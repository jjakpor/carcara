(assume t540 (or (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) false) (not (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))))
(assume t541 (or (not (not (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))
(assume nt542.0 (not (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) false)))
(assume nt542.1 (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))
(step t540' (cl (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) false) (not (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))) :rule or :premises (t540))
(step t541' (cl (not (not (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))) :rule or :premises (t541))
(step t542 (cl (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) false) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))) :rule resolution :premises (t540' t541'))
(step t.end (cl) :rule resolution :premises (nt542.0 nt542.1 t542))
