(assume nt645.0 (not (not (= (= (op (op e1 e4) e1) e4) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op e3 e3) (op e3 e3))))))))
(assume nt645.1 (not (not (= (op (op e1 e4) e1) e4))))
(assume nt645.2 (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op e3 e3) (op e3 e3))))))
(step t645 (cl (not (= (= (op (op e1 e4) e1) e4) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op e3 e3) (op e3 e3)))))) (not (= (op (op e1 e4) e1) e4)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op e3 e3) (op e3 e3))))) :rule equiv_pos2)
(step t.end (cl) :rule resolution :premises (nt645.0 nt645.1 nt645.2 t645))
