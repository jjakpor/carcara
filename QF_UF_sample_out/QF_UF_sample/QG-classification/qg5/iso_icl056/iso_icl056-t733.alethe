(assume t732 (or (= (op e1 e1) (op (op e1 (op e1 e1)) (op (op e1 e1) (op e1 (op e1 e1))))) (= (op e1 e1) (op (op e1 (op e1 e1)) (op e1 (op e1 e1)))) (= (op e1 e1) (op (op e1 (op e1 e1)) (op e1 e1))) (= (op e1 e1) (op (op e1 (op e1 e1)) (op (op (op e1 e1) (op e1 (op e1 e1))) (op (op e1 e1) (op e1 (op e1 e1)))))) (= (op e1 e1) (op (op e1 (op e1 e1)) e1))))
(assume nt733.0 (not (= (op e1 e1) (op (op e1 (op e1 e1)) e1))))
(assume nt733.1 (not (= (op e1 e1) (op (op e1 (op e1 e1)) (op (op (op e1 e1) (op e1 (op e1 e1))) (op (op e1 e1) (op e1 (op e1 e1))))))))
(assume nt733.2 (not (= (op e1 e1) (op (op e1 (op e1 e1)) (op e1 e1)))))
(assume nt733.3 (not (= (op e1 e1) (op (op e1 (op e1 e1)) (op e1 (op e1 e1))))))
(assume nt733.4 (not (= (op e1 e1) (op (op e1 (op e1 e1)) (op (op e1 e1) (op e1 (op e1 e1)))))))
(step t732' (cl (= (op e1 e1) (op (op e1 (op e1 e1)) (op (op e1 e1) (op e1 (op e1 e1))))) (= (op e1 e1) (op (op e1 (op e1 e1)) (op e1 (op e1 e1)))) (= (op e1 e1) (op (op e1 (op e1 e1)) (op e1 e1))) (= (op e1 e1) (op (op e1 (op e1 e1)) (op (op (op e1 e1) (op e1 (op e1 e1))) (op (op e1 e1) (op e1 (op e1 e1)))))) (= (op e1 e1) (op (op e1 (op e1 e1)) e1))) :rule or :premises (t732))
(step t733 (cl (= (op e1 e1) (op (op e1 (op e1 e1)) e1)) (= (op e1 e1) (op (op e1 (op e1 e1)) (op (op (op e1 e1) (op e1 (op e1 e1))) (op (op e1 e1) (op e1 (op e1 e1)))))) (= (op e1 e1) (op (op e1 (op e1 e1)) (op e1 e1))) (= (op e1 e1) (op (op e1 (op e1 e1)) (op e1 (op e1 e1)))) (= (op e1 e1) (op (op e1 (op e1 e1)) (op (op e1 e1) (op e1 (op e1 e1)))))) :rule reordering :premises (t732'))
(step t.end (cl) :rule resolution :premises (nt733.0 nt733.1 nt733.2 nt733.3 nt733.4 t733))
