(set-logic QF_UF)
(declare-sort U 0)
(declare-sort I 0)
(declare-fun unit () I)
(declare-fun op (I I) I)
(declare-fun e5 () I)
(declare-fun e4 () I)
(declare-fun e3 () I)
(declare-fun e2 () I)
(declare-fun e1 () I)
(declare-fun e0 () I)
(assert (and (and (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e3)) e3) (not (= (op e0 e3) unit))) (and (= (op e1 (op e1 e3)) e3) (not (= (op e1 e3) unit)))) (and (= (op e2 (op e2 e3)) e3) (not (= (op e2 e3) unit)))) (and (= (op e3 (op e3 e3)) e3) (not (= (op e3 e3) unit)))) (and (= (op e4 (op e4 e3)) e3) (not (= (op e4 e3) unit)))) (and (= (op e5 (op e5 e3)) e3) (not (= (op e5 e3) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e4)) e4) (not (= (op e0 e4) unit))) (and (= (op e1 (op e1 e4)) e4) (not (= (op e1 e4) unit)))) (and (= (op e2 (op e2 e4)) e4) (not (= (op e2 e4) unit)))) (and (= (op e3 (op e3 e4)) e4) (not (= (op e3 e4) unit)))) (and (= (op e4 (op e4 e4)) e4) (not (= (op e4 e4) unit)))) (and (= (op e5 (op e5 e4)) e4) (not (= (op e5 e4) unit))))))
(assert (not (and (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e3)) e3) (not (= (op e0 e3) unit))) (and (= (op e1 (op e1 e3)) e3) (not (= (op e1 e3) unit)))) (and (= (op e2 (op e2 e3)) e3) (not (= (op e2 e3) unit)))) (and (= (op e3 (op e3 e3)) e3) (not (= (op e3 e3) unit)))) (and (= (op e4 (op e4 e3)) e3) (not (= (op e4 e3) unit)))) (and (= (op e5 (op e5 e3)) e3) (not (= (op e5 e3) unit)))))))
(check-sat)
(exit)
