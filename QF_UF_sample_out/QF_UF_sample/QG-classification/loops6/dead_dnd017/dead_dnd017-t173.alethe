(assume t170 (or (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))))
(assume t171 (or (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 e0))))
(assume t172 (or (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e0 (op e3 (op e3 e0)))))
(assume nt173.0 (not (= e3 (op e3 (op e3 e3)))))
(assume nt173.1 (not (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))))))
(assume nt173.2 (not (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))))))
(step t171' (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 e0))) :rule or :premises (t171))
(step t172' (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e0 (op e3 (op e3 e0)))) :rule or :premises (t172))
(step t170' (cl (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) :rule or :premises (t170))
(step t173 (cl (= e3 (op e3 (op e3 e3))) (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))))) :rule resolution :premises (t170' t171' t172'))
(step t.end (cl) :rule resolution :premises (nt173.0 nt173.1 nt173.2 t173))
