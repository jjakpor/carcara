unsat
(assume a0 (and (and (and (and (and (and (and (and (and (and (or (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (= (op e0 e0) e5)) (or (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4)) (= (op e0 e1) e5))) (or (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4)) (= (op e0 e2) e5))) (or (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (= (op e0 e3) e5))) (or (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)) (= (op e0 e4) e5))) (or (or (or (or (or (= (op e0 e5) e0) (= (op e0 e5) e1)) (= (op e0 e5) e2)) (= (op e0 e5) e3)) (= (op e0 e5) e4)) (= (op e0 e5) e5))) (and (and (and (and (and (or (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (= (op e1 e0) e5)) (or (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4)) (= (op e1 e1) e5))) (or (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4)) (= (op e1 e2) e5))) (or (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4)) (= (op e1 e3) e5))) (or (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)) (= (op e1 e4) e5))) (or (or (or (or (or (= (op e1 e5) e0) (= (op e1 e5) e1)) (= (op e1 e5) e2)) (= (op e1 e5) e3)) (= (op e1 e5) e4)) (= (op e1 e5) e5)))) (and (and (and (and (and (or (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (= (op e2 e0) e5)) (or (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4)) (= (op e2 e1) e5))) (or (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4)) (= (op e2 e2) e5))) (or (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4)) (= (op e2 e3) e5))) (or (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)) (= (op e2 e4) e5))) (or (or (or (or (or (= (op e2 e5) e0) (= (op e2 e5) e1)) (= (op e2 e5) e2)) (= (op e2 e5) e3)) (= (op e2 e5) e4)) (= (op e2 e5) e5)))) (and (and (and (and (and (or (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (= (op e3 e0) e5)) (or (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4)) (= (op e3 e1) e5))) (or (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4)) (= (op e3 e2) e5))) (or (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4)) (= (op e3 e3) e5))) (or (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4)) (= (op e3 e4) e5))) (or (or (or (or (or (= (op e3 e5) e0) (= (op e3 e5) e1)) (= (op e3 e5) e2)) (= (op e3 e5) e3)) (= (op e3 e5) e4)) (= (op e3 e5) e5)))) (and (and (and (and (and (or (or (or (or (or (= (op e4 e0) e0) (= (op e4 e0) e1)) (= (op e4 e0) e2)) (= (op e4 e0) e3)) (= (op e4 e0) e4)) (= (op e4 e0) e5)) (or (or (or (or (or (= (op e4 e1) e0) (= (op e4 e1) e1)) (= (op e4 e1) e2)) (= (op e4 e1) e3)) (= (op e4 e1) e4)) (= (op e4 e1) e5))) (or (or (or (or (or (= (op e4 e2) e0) (= (op e4 e2) e1)) (= (op e4 e2) e2)) (= (op e4 e2) e3)) (= (op e4 e2) e4)) (= (op e4 e2) e5))) (or (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4)) (= (op e4 e3) e5))) (or (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)) (= (op e4 e4) e5))) (or (or (or (or (or (= (op e4 e5) e0) (= (op e4 e5) e1)) (= (op e4 e5) e2)) (= (op e4 e5) e3)) (= (op e4 e5) e4)) (= (op e4 e5) e5)))) (and (and (and (and (and (or (or (or (or (or (= (op e5 e0) e0) (= (op e5 e0) e1)) (= (op e5 e0) e2)) (= (op e5 e0) e3)) (= (op e5 e0) e4)) (= (op e5 e0) e5)) (or (or (or (or (or (= (op e5 e1) e0) (= (op e5 e1) e1)) (= (op e5 e1) e2)) (= (op e5 e1) e3)) (= (op e5 e1) e4)) (= (op e5 e1) e5))) (or (or (or (or (or (= (op e5 e2) e0) (= (op e5 e2) e1)) (= (op e5 e2) e2)) (= (op e5 e2) e3)) (= (op e5 e2) e4)) (= (op e5 e2) e5))) (or (or (or (or (or (= (op e5 e3) e0) (= (op e5 e3) e1)) (= (op e5 e3) e2)) (= (op e5 e3) e3)) (= (op e5 e3) e4)) (= (op e5 e3) e5))) (or (or (or (or (or (= (op e5 e4) e0) (= (op e5 e4) e1)) (= (op e5 e4) e2)) (= (op e5 e4) e3)) (= (op e5 e4) e4)) (= (op e5 e4) e5))) (or (or (or (or (or (= (op e5 e5) e0) (= (op e5 e5) e1)) (= (op e5 e5) e2)) (= (op e5 e5) e3)) (= (op e5 e5) e4)) (= (op e5 e5) e5)))))
(assume a1 (and (and (and (and (and (and (and (and (and (and (and (or (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (= (op e0 e5) e0)) (or (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0)) (= (op e5 e0) e0))) (and (or (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (= (op e0 e5) e1)) (or (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)) (= (op e5 e0) e1)))) (and (or (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (= (op e0 e5) e2)) (or (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)) (= (op e5 e0) e2)))) (and (or (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (= (op e0 e5) e3)) (or (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)) (= (op e5 e0) e3)))) (and (or (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (= (op e0 e5) e4)) (or (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)) (= (op e5 e0) e4)))) (and (or (or (or (or (or (= (op e0 e0) e5) (= (op e0 e1) e5)) (= (op e0 e2) e5)) (= (op e0 e3) e5)) (= (op e0 e4) e5)) (= (op e0 e5) e5)) (or (or (or (or (or (= (op e0 e0) e5) (= (op e1 e0) e5)) (= (op e2 e0) e5)) (= (op e3 e0) e5)) (= (op e4 e0) e5)) (= (op e5 e0) e5)))) (and (and (and (and (and (and (or (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (= (op e1 e5) e0)) (or (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0)) (= (op e5 e1) e0))) (and (or (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (= (op e1 e5) e1)) (or (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)) (= (op e5 e1) e1)))) (and (or (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (= (op e1 e5) e2)) (or (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)) (= (op e5 e1) e2)))) (and (or (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (= (op e1 e5) e3)) (or (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)) (= (op e5 e1) e3)))) (and (or (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (= (op e1 e5) e4)) (or (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)) (= (op e5 e1) e4)))) (and (or (or (or (or (or (= (op e1 e0) e5) (= (op e1 e1) e5)) (= (op e1 e2) e5)) (= (op e1 e3) e5)) (= (op e1 e4) e5)) (= (op e1 e5) e5)) (or (or (or (or (or (= (op e0 e1) e5) (= (op e1 e1) e5)) (= (op e2 e1) e5)) (= (op e3 e1) e5)) (= (op e4 e1) e5)) (= (op e5 e1) e5))))) (and (and (and (and (and (and (or (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (= (op e2 e5) e0)) (or (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (= (op e5 e2) e0))) (and (or (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (= (op e2 e5) e1)) (or (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)) (= (op e5 e2) e1)))) (and (or (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (= (op e2 e5) e2)) (or (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)) (= (op e5 e2) e2)))) (and (or (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (= (op e2 e5) e3)) (or (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)) (= (op e5 e2) e3)))) (and (or (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (= (op e2 e5) e4)) (or (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4)) (= (op e5 e2) e4)))) (and (or (or (or (or (or (= (op e2 e0) e5) (= (op e2 e1) e5)) (= (op e2 e2) e5)) (= (op e2 e3) e5)) (= (op e2 e4) e5)) (= (op e2 e5) e5)) (or (or (or (or (or (= (op e0 e2) e5) (= (op e1 e2) e5)) (= (op e2 e2) e5)) (= (op e3 e2) e5)) (= (op e4 e2) e5)) (= (op e5 e2) e5))))) (and (and (and (and (and (and (or (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (= (op e3 e5) e0)) (or (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0)) (= (op e5 e3) e0))) (and (or (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (= (op e3 e5) e1)) (or (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)) (= (op e5 e3) e1)))) (and (or (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (= (op e3 e5) e2)) (or (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)) (= (op e5 e3) e2)))) (and (or (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (= (op e3 e5) e3)) (or (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)) (= (op e5 e3) e3)))) (and (or (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (= (op e3 e5) e4)) (or (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4)) (= (op e5 e3) e4)))) (and (or (or (or (or (or (= (op e3 e0) e5) (= (op e3 e1) e5)) (= (op e3 e2) e5)) (= (op e3 e3) e5)) (= (op e3 e4) e5)) (= (op e3 e5) e5)) (or (or (or (or (or (= (op e0 e3) e5) (= (op e1 e3) e5)) (= (op e2 e3) e5)) (= (op e3 e3) e5)) (= (op e4 e3) e5)) (= (op e5 e3) e5))))) (and (and (and (and (and (and (or (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (= (op e4 e5) e0)) (or (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0)) (= (op e5 e4) e0))) (and (or (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (= (op e4 e5) e1)) (or (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (= (op e5 e4) e1)))) (and (or (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (= (op e4 e5) e2)) (or (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (= (op e5 e4) e2)))) (and (or (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (= (op e4 e5) e3)) (or (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)) (= (op e5 e4) e3)))) (and (or (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (= (op e4 e5) e4)) (or (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4)) (= (op e5 e4) e4)))) (and (or (or (or (or (or (= (op e4 e0) e5) (= (op e4 e1) e5)) (= (op e4 e2) e5)) (= (op e4 e3) e5)) (= (op e4 e4) e5)) (= (op e4 e5) e5)) (or (or (or (or (or (= (op e0 e4) e5) (= (op e1 e4) e5)) (= (op e2 e4) e5)) (= (op e3 e4) e5)) (= (op e4 e4) e5)) (= (op e5 e4) e5))))) (and (and (and (and (and (and (or (or (or (or (or (= (op e5 e0) e0) (= (op e5 e1) e0)) (= (op e5 e2) e0)) (= (op e5 e3) e0)) (= (op e5 e4) e0)) (= (op e5 e5) e0)) (or (or (or (or (or (= (op e0 e5) e0) (= (op e1 e5) e0)) (= (op e2 e5) e0)) (= (op e3 e5) e0)) (= (op e4 e5) e0)) (= (op e5 e5) e0))) (and (or (or (or (or (or (= (op e5 e0) e1) (= (op e5 e1) e1)) (= (op e5 e2) e1)) (= (op e5 e3) e1)) (= (op e5 e4) e1)) (= (op e5 e5) e1)) (or (or (or (or (or (= (op e0 e5) e1) (= (op e1 e5) e1)) (= (op e2 e5) e1)) (= (op e3 e5) e1)) (= (op e4 e5) e1)) (= (op e5 e5) e1)))) (and (or (or (or (or (or (= (op e5 e0) e2) (= (op e5 e1) e2)) (= (op e5 e2) e2)) (= (op e5 e3) e2)) (= (op e5 e4) e2)) (= (op e5 e5) e2)) (or (or (or (or (or (= (op e0 e5) e2) (= (op e1 e5) e2)) (= (op e2 e5) e2)) (= (op e3 e5) e2)) (= (op e4 e5) e2)) (= (op e5 e5) e2)))) (and (or (or (or (or (or (= (op e5 e0) e3) (= (op e5 e1) e3)) (= (op e5 e2) e3)) (= (op e5 e3) e3)) (= (op e5 e4) e3)) (= (op e5 e5) e3)) (or (or (or (or (or (= (op e0 e5) e3) (= (op e1 e5) e3)) (= (op e2 e5) e3)) (= (op e3 e5) e3)) (= (op e4 e5) e3)) (= (op e5 e5) e3)))) (and (or (or (or (or (or (= (op e5 e0) e4) (= (op e5 e1) e4)) (= (op e5 e2) e4)) (= (op e5 e3) e4)) (= (op e5 e4) e4)) (= (op e5 e5) e4)) (or (or (or (or (or (= (op e0 e5) e4) (= (op e1 e5) e4)) (= (op e2 e5) e4)) (= (op e3 e5) e4)) (= (op e4 e5) e4)) (= (op e5 e5) e4)))) (and (or (or (or (or (or (= (op e5 e0) e5) (= (op e5 e1) e5)) (= (op e5 e2) e5)) (= (op e5 e3) e5)) (= (op e5 e4) e5)) (= (op e5 e5) e5)) (or (or (or (or (or (= (op e0 e5) e5) (= (op e1 e5) e5)) (= (op e2 e5) e5)) (= (op e3 e5) e5)) (= (op e4 e5) e5)) (= (op e5 e5) e5))))))
(assume a2 (and (and (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4))) (and (= (op unit e5) e5) (= (op e5 unit) e5))) (or (or (or (or (or (= unit e0) (= unit e1)) (= unit e2)) (= unit e3)) (= unit e4)) (= unit e5))))
(assume a3 (or (or (or (or (or (or (or (or (or (or (not (= (op e0 e0) (op e0 e0))) (not (= (op e1 e0) (op e0 e1)))) (not (= (op e2 e0) (op e0 e2)))) (not (= (op e3 e0) (op e0 e3)))) (not (= (op e4 e0) (op e0 e4)))) (not (= (op e5 e0) (op e0 e5)))) (or (or (or (or (or (not (= (op e0 e1) (op e1 e0))) (not (= (op e1 e1) (op e1 e1)))) (not (= (op e2 e1) (op e1 e2)))) (not (= (op e3 e1) (op e1 e3)))) (not (= (op e4 e1) (op e1 e4)))) (not (= (op e5 e1) (op e1 e5))))) (or (or (or (or (or (not (= (op e0 e2) (op e2 e0))) (not (= (op e1 e2) (op e2 e1)))) (not (= (op e2 e2) (op e2 e2)))) (not (= (op e3 e2) (op e2 e3)))) (not (= (op e4 e2) (op e2 e4)))) (not (= (op e5 e2) (op e2 e5))))) (or (or (or (or (or (not (= (op e0 e3) (op e3 e0))) (not (= (op e1 e3) (op e3 e1)))) (not (= (op e2 e3) (op e3 e2)))) (not (= (op e3 e3) (op e3 e3)))) (not (= (op e4 e3) (op e3 e4)))) (not (= (op e5 e3) (op e3 e5))))) (or (or (or (or (or (not (= (op e0 e4) (op e4 e0))) (not (= (op e1 e4) (op e4 e1)))) (not (= (op e2 e4) (op e4 e2)))) (not (= (op e3 e4) (op e4 e3)))) (not (= (op e4 e4) (op e4 e4)))) (not (= (op e5 e4) (op e4 e5))))) (or (or (or (or (or (not (= (op e0 e5) (op e5 e0))) (not (= (op e1 e5) (op e5 e1)))) (not (= (op e2 e5) (op e5 e2)))) (not (= (op e3 e5) (op e5 e3)))) (not (= (op e4 e5) (op e5 e4)))) (not (= (op e5 e5) (op e5 e5))))))
(assume a4 (or (or (or (or (or (and (and (and (and (and (not (= (op (op e0 e0) e0) e0)) (not (= (op (op e0 e1) e0) e1))) (not (= (op (op e0 e2) e0) e2))) (not (= (op (op e0 e3) e0) e3))) (not (= (op (op e0 e4) e0) e4))) (not (= (op (op e0 e5) e0) e5))) (and (and (and (and (and (not (= (op (op e1 e0) e1) e0)) (not (= (op (op e1 e1) e1) e1))) (not (= (op (op e1 e2) e1) e2))) (not (= (op (op e1 e3) e1) e3))) (not (= (op (op e1 e4) e1) e4))) (not (= (op (op e1 e5) e1) e5)))) (and (and (and (and (and (not (= (op (op e2 e0) e2) e0)) (not (= (op (op e2 e1) e2) e1))) (not (= (op (op e2 e2) e2) e2))) (not (= (op (op e2 e3) e2) e3))) (not (= (op (op e2 e4) e2) e4))) (not (= (op (op e2 e5) e2) e5)))) (and (and (and (and (and (not (= (op (op e3 e0) e3) e0)) (not (= (op (op e3 e1) e3) e1))) (not (= (op (op e3 e2) e3) e2))) (not (= (op (op e3 e3) e3) e3))) (not (= (op (op e3 e4) e3) e4))) (not (= (op (op e3 e5) e3) e5)))) (and (and (and (and (and (not (= (op (op e4 e0) e4) e0)) (not (= (op (op e4 e1) e4) e1))) (not (= (op (op e4 e2) e4) e2))) (not (= (op (op e4 e3) e4) e3))) (not (= (op (op e4 e4) e4) e4))) (not (= (op (op e4 e5) e4) e5)))) (and (and (and (and (and (not (= (op (op e5 e0) e5) e0)) (not (= (op (op e5 e1) e5) e1))) (not (= (op (op e5 e2) e5) e2))) (not (= (op (op e5 e3) e5) e3))) (not (= (op (op e5 e4) e5) e4))) (not (= (op (op e5 e5) e5) e5)))))
(assume a5 (or (or (or (or (or (and (and (and (and (and (not (= (op (op e0 e0) (op e0 e0)) e0)) (not (= (op (op e0 e1) (op e0 e1)) e1))) (not (= (op (op e0 e2) (op e0 e2)) e2))) (not (= (op (op e0 e3) (op e0 e3)) e3))) (not (= (op (op e0 e4) (op e0 e4)) e4))) (not (= (op (op e0 e5) (op e0 e5)) e5))) (and (and (and (and (and (not (= (op (op e1 e0) (op e1 e0)) e0)) (not (= (op (op e1 e1) (op e1 e1)) e1))) (not (= (op (op e1 e2) (op e1 e2)) e2))) (not (= (op (op e1 e3) (op e1 e3)) e3))) (not (= (op (op e1 e4) (op e1 e4)) e4))) (not (= (op (op e1 e5) (op e1 e5)) e5)))) (and (and (and (and (and (not (= (op (op e2 e0) (op e2 e0)) e0)) (not (= (op (op e2 e1) (op e2 e1)) e1))) (not (= (op (op e2 e2) (op e2 e2)) e2))) (not (= (op (op e2 e3) (op e2 e3)) e3))) (not (= (op (op e2 e4) (op e2 e4)) e4))) (not (= (op (op e2 e5) (op e2 e5)) e5)))) (and (and (and (and (and (not (= (op (op e3 e0) (op e3 e0)) e0)) (not (= (op (op e3 e1) (op e3 e1)) e1))) (not (= (op (op e3 e2) (op e3 e2)) e2))) (not (= (op (op e3 e3) (op e3 e3)) e3))) (not (= (op (op e3 e4) (op e3 e4)) e4))) (not (= (op (op e3 e5) (op e3 e5)) e5)))) (and (and (and (and (and (not (= (op (op e4 e0) (op e4 e0)) e0)) (not (= (op (op e4 e1) (op e4 e1)) e1))) (not (= (op (op e4 e2) (op e4 e2)) e2))) (not (= (op (op e4 e3) (op e4 e3)) e3))) (not (= (op (op e4 e4) (op e4 e4)) e4))) (not (= (op (op e4 e5) (op e4 e5)) e5)))) (and (and (and (and (and (not (= (op (op e5 e0) (op e5 e0)) e0)) (not (= (op (op e5 e1) (op e5 e1)) e1))) (not (= (op (op e5 e2) (op e5 e2)) e2))) (not (= (op (op e5 e3) (op e5 e3)) e3))) (not (= (op (op e5 e4) (op e5 e4)) e4))) (not (= (op (op e5 e5) (op e5 e5)) e5)))))
(assume a6 (or (or (or (or (or (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0))) (or (not (= (op e0 e3) e0)) (= (op e3 e0) e0))) (or (not (= (op e0 e4) e0)) (= (op e4 e0) e0))) (or (not (= (op e0 e5) e0)) (= (op e5 e0) e0))) (and (and (and (and (and (or (not (= (op e1 e0) e0)) (= (op e0 e1) e0)) (or (not (= (op e1 e1) e0)) (= (op e1 e1) e0))) (or (not (= (op e1 e2) e0)) (= (op e2 e1) e0))) (or (not (= (op e1 e3) e0)) (= (op e3 e1) e0))) (or (not (= (op e1 e4) e0)) (= (op e4 e1) e0))) (or (not (= (op e1 e5) e0)) (= (op e5 e1) e0)))) (and (and (and (and (and (or (not (= (op e2 e0) e0)) (= (op e0 e2) e0)) (or (not (= (op e2 e1) e0)) (= (op e1 e2) e0))) (or (not (= (op e2 e2) e0)) (= (op e2 e2) e0))) (or (not (= (op e2 e3) e0)) (= (op e3 e2) e0))) (or (not (= (op e2 e4) e0)) (= (op e4 e2) e0))) (or (not (= (op e2 e5) e0)) (= (op e5 e2) e0)))) (and (and (and (and (and (or (not (= (op e3 e0) e0)) (= (op e0 e3) e0)) (or (not (= (op e3 e1) e0)) (= (op e1 e3) e0))) (or (not (= (op e3 e2) e0)) (= (op e2 e3) e0))) (or (not (= (op e3 e3) e0)) (= (op e3 e3) e0))) (or (not (= (op e3 e4) e0)) (= (op e4 e3) e0))) (or (not (= (op e3 e5) e0)) (= (op e5 e3) e0)))) (and (and (and (and (and (or (not (= (op e4 e0) e0)) (= (op e0 e4) e0)) (or (not (= (op e4 e1) e0)) (= (op e1 e4) e0))) (or (not (= (op e4 e2) e0)) (= (op e2 e4) e0))) (or (not (= (op e4 e3) e0)) (= (op e3 e4) e0))) (or (not (= (op e4 e4) e0)) (= (op e4 e4) e0))) (or (not (= (op e4 e5) e0)) (= (op e5 e4) e0)))) (and (and (and (and (and (or (not (= (op e5 e0) e0)) (= (op e0 e5) e0)) (or (not (= (op e5 e1) e0)) (= (op e1 e5) e0))) (or (not (= (op e5 e2) e0)) (= (op e2 e5) e0))) (or (not (= (op e5 e3) e0)) (= (op e3 e5) e0))) (or (not (= (op e5 e4) e0)) (= (op e4 e5) e0))) (or (not (= (op e5 e5) e0)) (= (op e5 e5) e0)))) (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e1)) (= (op e0 e0) e1)) (or (not (= (op e0 e1) e1)) (= (op e1 e0) e1))) (or (not (= (op e0 e2) e1)) (= (op e2 e0) e1))) (or (not (= (op e0 e3) e1)) (= (op e3 e0) e1))) (or (not (= (op e0 e4) e1)) (= (op e4 e0) e1))) (or (not (= (op e0 e5) e1)) (= (op e5 e0) e1))) (and (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1))) (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1))) (or (not (= (op e1 e5) e1)) (= (op e5 e1) e1)))) (and (and (and (and (and (or (not (= (op e2 e0) e1)) (= (op e0 e2) e1)) (or (not (= (op e2 e1) e1)) (= (op e1 e2) e1))) (or (not (= (op e2 e2) e1)) (= (op e2 e2) e1))) (or (not (= (op e2 e3) e1)) (= (op e3 e2) e1))) (or (not (= (op e2 e4) e1)) (= (op e4 e2) e1))) (or (not (= (op e2 e5) e1)) (= (op e5 e2) e1)))) (and (and (and (and (and (or (not (= (op e3 e0) e1)) (= (op e0 e3) e1)) (or (not (= (op e3 e1) e1)) (= (op e1 e3) e1))) (or (not (= (op e3 e2) e1)) (= (op e2 e3) e1))) (or (not (= (op e3 e3) e1)) (= (op e3 e3) e1))) (or (not (= (op e3 e4) e1)) (= (op e4 e3) e1))) (or (not (= (op e3 e5) e1)) (= (op e5 e3) e1)))) (and (and (and (and (and (or (not (= (op e4 e0) e1)) (= (op e0 e4) e1)) (or (not (= (op e4 e1) e1)) (= (op e1 e4) e1))) (or (not (= (op e4 e2) e1)) (= (op e2 e4) e1))) (or (not (= (op e4 e3) e1)) (= (op e3 e4) e1))) (or (not (= (op e4 e4) e1)) (= (op e4 e4) e1))) (or (not (= (op e4 e5) e1)) (= (op e5 e4) e1)))) (and (and (and (and (and (or (not (= (op e5 e0) e1)) (= (op e0 e5) e1)) (or (not (= (op e5 e1) e1)) (= (op e1 e5) e1))) (or (not (= (op e5 e2) e1)) (= (op e2 e5) e1))) (or (not (= (op e5 e3) e1)) (= (op e3 e5) e1))) (or (not (= (op e5 e4) e1)) (= (op e4 e5) e1))) (or (not (= (op e5 e5) e1)) (= (op e5 e5) e1))))) (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e2)) (= (op e0 e0) e2)) (or (not (= (op e0 e1) e2)) (= (op e1 e0) e2))) (or (not (= (op e0 e2) e2)) (= (op e2 e0) e2))) (or (not (= (op e0 e3) e2)) (= (op e3 e0) e2))) (or (not (= (op e0 e4) e2)) (= (op e4 e0) e2))) (or (not (= (op e0 e5) e2)) (= (op e5 e0) e2))) (and (and (and (and (and (or (not (= (op e1 e0) e2)) (= (op e0 e1) e2)) (or (not (= (op e1 e1) e2)) (= (op e1 e1) e2))) (or (not (= (op e1 e2) e2)) (= (op e2 e1) e2))) (or (not (= (op e1 e3) e2)) (= (op e3 e1) e2))) (or (not (= (op e1 e4) e2)) (= (op e4 e1) e2))) (or (not (= (op e1 e5) e2)) (= (op e5 e1) e2)))) (and (and (and (and (and (or (not (= (op e2 e0) e2)) (= (op e0 e2) e2)) (or (not (= (op e2 e1) e2)) (= (op e1 e2) e2))) (or (not (= (op e2 e2) e2)) (= (op e2 e2) e2))) (or (not (= (op e2 e3) e2)) (= (op e3 e2) e2))) (or (not (= (op e2 e4) e2)) (= (op e4 e2) e2))) (or (not (= (op e2 e5) e2)) (= (op e5 e2) e2)))) (and (and (and (and (and (or (not (= (op e3 e0) e2)) (= (op e0 e3) e2)) (or (not (= (op e3 e1) e2)) (= (op e1 e3) e2))) (or (not (= (op e3 e2) e2)) (= (op e2 e3) e2))) (or (not (= (op e3 e3) e2)) (= (op e3 e3) e2))) (or (not (= (op e3 e4) e2)) (= (op e4 e3) e2))) (or (not (= (op e3 e5) e2)) (= (op e5 e3) e2)))) (and (and (and (and (and (or (not (= (op e4 e0) e2)) (= (op e0 e4) e2)) (or (not (= (op e4 e1) e2)) (= (op e1 e4) e2))) (or (not (= (op e4 e2) e2)) (= (op e2 e4) e2))) (or (not (= (op e4 e3) e2)) (= (op e3 e4) e2))) (or (not (= (op e4 e4) e2)) (= (op e4 e4) e2))) (or (not (= (op e4 e5) e2)) (= (op e5 e4) e2)))) (and (and (and (and (and (or (not (= (op e5 e0) e2)) (= (op e0 e5) e2)) (or (not (= (op e5 e1) e2)) (= (op e1 e5) e2))) (or (not (= (op e5 e2) e2)) (= (op e2 e5) e2))) (or (not (= (op e5 e3) e2)) (= (op e3 e5) e2))) (or (not (= (op e5 e4) e2)) (= (op e4 e5) e2))) (or (not (= (op e5 e5) e2)) (= (op e5 e5) e2))))) (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e3)) (= (op e0 e0) e3)) (or (not (= (op e0 e1) e3)) (= (op e1 e0) e3))) (or (not (= (op e0 e2) e3)) (= (op e2 e0) e3))) (or (not (= (op e0 e3) e3)) (= (op e3 e0) e3))) (or (not (= (op e0 e4) e3)) (= (op e4 e0) e3))) (or (not (= (op e0 e5) e3)) (= (op e5 e0) e3))) (and (and (and (and (and (or (not (= (op e1 e0) e3)) (= (op e0 e1) e3)) (or (not (= (op e1 e1) e3)) (= (op e1 e1) e3))) (or (not (= (op e1 e2) e3)) (= (op e2 e1) e3))) (or (not (= (op e1 e3) e3)) (= (op e3 e1) e3))) (or (not (= (op e1 e4) e3)) (= (op e4 e1) e3))) (or (not (= (op e1 e5) e3)) (= (op e5 e1) e3)))) (and (and (and (and (and (or (not (= (op e2 e0) e3)) (= (op e0 e2) e3)) (or (not (= (op e2 e1) e3)) (= (op e1 e2) e3))) (or (not (= (op e2 e2) e3)) (= (op e2 e2) e3))) (or (not (= (op e2 e3) e3)) (= (op e3 e2) e3))) (or (not (= (op e2 e4) e3)) (= (op e4 e2) e3))) (or (not (= (op e2 e5) e3)) (= (op e5 e2) e3)))) (and (and (and (and (and (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= (op e3 e1) e3)) (= (op e1 e3) e3))) (or (not (= (op e3 e2) e3)) (= (op e2 e3) e3))) (or (not (= (op e3 e3) e3)) (= (op e3 e3) e3))) (or (not (= (op e3 e4) e3)) (= (op e4 e3) e3))) (or (not (= (op e3 e5) e3)) (= (op e5 e3) e3)))) (and (and (and (and (and (or (not (= (op e4 e0) e3)) (= (op e0 e4) e3)) (or (not (= (op e4 e1) e3)) (= (op e1 e4) e3))) (or (not (= (op e4 e2) e3)) (= (op e2 e4) e3))) (or (not (= (op e4 e3) e3)) (= (op e3 e4) e3))) (or (not (= (op e4 e4) e3)) (= (op e4 e4) e3))) (or (not (= (op e4 e5) e3)) (= (op e5 e4) e3)))) (and (and (and (and (and (or (not (= (op e5 e0) e3)) (= (op e0 e5) e3)) (or (not (= (op e5 e1) e3)) (= (op e1 e5) e3))) (or (not (= (op e5 e2) e3)) (= (op e2 e5) e3))) (or (not (= (op e5 e3) e3)) (= (op e3 e5) e3))) (or (not (= (op e5 e4) e3)) (= (op e4 e5) e3))) (or (not (= (op e5 e5) e3)) (= (op e5 e5) e3))))) (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e4)) (= (op e0 e0) e4)) (or (not (= (op e0 e1) e4)) (= (op e1 e0) e4))) (or (not (= (op e0 e2) e4)) (= (op e2 e0) e4))) (or (not (= (op e0 e3) e4)) (= (op e3 e0) e4))) (or (not (= (op e0 e4) e4)) (= (op e4 e0) e4))) (or (not (= (op e0 e5) e4)) (= (op e5 e0) e4))) (and (and (and (and (and (or (not (= (op e1 e0) e4)) (= (op e0 e1) e4)) (or (not (= (op e1 e1) e4)) (= (op e1 e1) e4))) (or (not (= (op e1 e2) e4)) (= (op e2 e1) e4))) (or (not (= (op e1 e3) e4)) (= (op e3 e1) e4))) (or (not (= (op e1 e4) e4)) (= (op e4 e1) e4))) (or (not (= (op e1 e5) e4)) (= (op e5 e1) e4)))) (and (and (and (and (and (or (not (= (op e2 e0) e4)) (= (op e0 e2) e4)) (or (not (= (op e2 e1) e4)) (= (op e1 e2) e4))) (or (not (= (op e2 e2) e4)) (= (op e2 e2) e4))) (or (not (= (op e2 e3) e4)) (= (op e3 e2) e4))) (or (not (= (op e2 e4) e4)) (= (op e4 e2) e4))) (or (not (= (op e2 e5) e4)) (= (op e5 e2) e4)))) (and (and (and (and (and (or (not (= (op e3 e0) e4)) (= (op e0 e3) e4)) (or (not (= (op e3 e1) e4)) (= (op e1 e3) e4))) (or (not (= (op e3 e2) e4)) (= (op e2 e3) e4))) (or (not (= (op e3 e3) e4)) (= (op e3 e3) e4))) (or (not (= (op e3 e4) e4)) (= (op e4 e3) e4))) (or (not (= (op e3 e5) e4)) (= (op e5 e3) e4)))) (and (and (and (and (and (or (not (= (op e4 e0) e4)) (= (op e0 e4) e4)) (or (not (= (op e4 e1) e4)) (= (op e1 e4) e4))) (or (not (= (op e4 e2) e4)) (= (op e2 e4) e4))) (or (not (= (op e4 e3) e4)) (= (op e3 e4) e4))) (or (not (= (op e4 e4) e4)) (= (op e4 e4) e4))) (or (not (= (op e4 e5) e4)) (= (op e5 e4) e4)))) (and (and (and (and (and (or (not (= (op e5 e0) e4)) (= (op e0 e5) e4)) (or (not (= (op e5 e1) e4)) (= (op e1 e5) e4))) (or (not (= (op e5 e2) e4)) (= (op e2 e5) e4))) (or (not (= (op e5 e3) e4)) (= (op e3 e5) e4))) (or (not (= (op e5 e4) e4)) (= (op e4 e5) e4))) (or (not (= (op e5 e5) e4)) (= (op e5 e5) e4))))) (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e5)) (= (op e0 e0) e5)) (or (not (= (op e0 e1) e5)) (= (op e1 e0) e5))) (or (not (= (op e0 e2) e5)) (= (op e2 e0) e5))) (or (not (= (op e0 e3) e5)) (= (op e3 e0) e5))) (or (not (= (op e0 e4) e5)) (= (op e4 e0) e5))) (or (not (= (op e0 e5) e5)) (= (op e5 e0) e5))) (and (and (and (and (and (or (not (= (op e1 e0) e5)) (= (op e0 e1) e5)) (or (not (= (op e1 e1) e5)) (= (op e1 e1) e5))) (or (not (= (op e1 e2) e5)) (= (op e2 e1) e5))) (or (not (= (op e1 e3) e5)) (= (op e3 e1) e5))) (or (not (= (op e1 e4) e5)) (= (op e4 e1) e5))) (or (not (= (op e1 e5) e5)) (= (op e5 e1) e5)))) (and (and (and (and (and (or (not (= (op e2 e0) e5)) (= (op e0 e2) e5)) (or (not (= (op e2 e1) e5)) (= (op e1 e2) e5))) (or (not (= (op e2 e2) e5)) (= (op e2 e2) e5))) (or (not (= (op e2 e3) e5)) (= (op e3 e2) e5))) (or (not (= (op e2 e4) e5)) (= (op e4 e2) e5))) (or (not (= (op e2 e5) e5)) (= (op e5 e2) e5)))) (and (and (and (and (and (or (not (= (op e3 e0) e5)) (= (op e0 e3) e5)) (or (not (= (op e3 e1) e5)) (= (op e1 e3) e5))) (or (not (= (op e3 e2) e5)) (= (op e2 e3) e5))) (or (not (= (op e3 e3) e5)) (= (op e3 e3) e5))) (or (not (= (op e3 e4) e5)) (= (op e4 e3) e5))) (or (not (= (op e3 e5) e5)) (= (op e5 e3) e5)))) (and (and (and (and (and (or (not (= (op e4 e0) e5)) (= (op e0 e4) e5)) (or (not (= (op e4 e1) e5)) (= (op e1 e4) e5))) (or (not (= (op e4 e2) e5)) (= (op e2 e4) e5))) (or (not (= (op e4 e3) e5)) (= (op e3 e4) e5))) (or (not (= (op e4 e4) e5)) (= (op e4 e4) e5))) (or (not (= (op e4 e5) e5)) (= (op e5 e4) e5)))) (and (and (and (and (and (or (not (= (op e5 e0) e5)) (= (op e0 e5) e5)) (or (not (= (op e5 e1) e5)) (= (op e1 e5) e5))) (or (not (= (op e5 e2) e5)) (= (op e2 e5) e5))) (or (not (= (op e5 e3) e5)) (= (op e3 e5) e5))) (or (not (= (op e5 e4) e5)) (= (op e4 e5) e5))) (or (not (= (op e5 e5) e5)) (= (op e5 e5) e5))))))
(assume a7 (or (or (or (or (or (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e0)) (or (= (op e0 e0) e0) (not (= (op e0 e0) e0)))) (or (not (= (op e0 e1) e0)) (or (= (op e0 e0) e1) (not (= (op e1 e0) e0))))) (or (not (= (op e0 e2) e0)) (or (= (op e0 e0) e2) (not (= (op e2 e0) e0))))) (or (not (= (op e0 e3) e0)) (or (= (op e0 e0) e3) (not (= (op e3 e0) e0))))) (or (not (= (op e0 e4) e0)) (or (= (op e0 e0) e4) (not (= (op e4 e0) e0))))) (or (not (= (op e0 e5) e0)) (or (= (op e0 e0) e5) (not (= (op e5 e0) e0))))) (and (and (and (and (and (or (not (= (op e1 e0) e0)) (or (= (op e1 e0) e0) (not (= (op e0 e1) e0)))) (or (not (= (op e1 e1) e0)) (or (= (op e1 e0) e1) (not (= (op e1 e1) e0))))) (or (not (= (op e1 e2) e0)) (or (= (op e1 e0) e2) (not (= (op e2 e1) e0))))) (or (not (= (op e1 e3) e0)) (or (= (op e1 e0) e3) (not (= (op e3 e1) e0))))) (or (not (= (op e1 e4) e0)) (or (= (op e1 e0) e4) (not (= (op e4 e1) e0))))) (or (not (= (op e1 e5) e0)) (or (= (op e1 e0) e5) (not (= (op e5 e1) e0)))))) (and (and (and (and (and (or (not (= (op e2 e0) e0)) (or (= (op e2 e0) e0) (not (= (op e0 e2) e0)))) (or (not (= (op e2 e1) e0)) (or (= (op e2 e0) e1) (not (= (op e1 e2) e0))))) (or (not (= (op e2 e2) e0)) (or (= (op e2 e0) e2) (not (= (op e2 e2) e0))))) (or (not (= (op e2 e3) e0)) (or (= (op e2 e0) e3) (not (= (op e3 e2) e0))))) (or (not (= (op e2 e4) e0)) (or (= (op e2 e0) e4) (not (= (op e4 e2) e0))))) (or (not (= (op e2 e5) e0)) (or (= (op e2 e0) e5) (not (= (op e5 e2) e0)))))) (and (and (and (and (and (or (not (= (op e3 e0) e0)) (or (= (op e3 e0) e0) (not (= (op e0 e3) e0)))) (or (not (= (op e3 e1) e0)) (or (= (op e3 e0) e1) (not (= (op e1 e3) e0))))) (or (not (= (op e3 e2) e0)) (or (= (op e3 e0) e2) (not (= (op e2 e3) e0))))) (or (not (= (op e3 e3) e0)) (or (= (op e3 e0) e3) (not (= (op e3 e3) e0))))) (or (not (= (op e3 e4) e0)) (or (= (op e3 e0) e4) (not (= (op e4 e3) e0))))) (or (not (= (op e3 e5) e0)) (or (= (op e3 e0) e5) (not (= (op e5 e3) e0)))))) (and (and (and (and (and (or (not (= (op e4 e0) e0)) (or (= (op e4 e0) e0) (not (= (op e0 e4) e0)))) (or (not (= (op e4 e1) e0)) (or (= (op e4 e0) e1) (not (= (op e1 e4) e0))))) (or (not (= (op e4 e2) e0)) (or (= (op e4 e0) e2) (not (= (op e2 e4) e0))))) (or (not (= (op e4 e3) e0)) (or (= (op e4 e0) e3) (not (= (op e3 e4) e0))))) (or (not (= (op e4 e4) e0)) (or (= (op e4 e0) e4) (not (= (op e4 e4) e0))))) (or (not (= (op e4 e5) e0)) (or (= (op e4 e0) e5) (not (= (op e5 e4) e0)))))) (and (and (and (and (and (or (not (= (op e5 e0) e0)) (or (= (op e5 e0) e0) (not (= (op e0 e5) e0)))) (or (not (= (op e5 e1) e0)) (or (= (op e5 e0) e1) (not (= (op e1 e5) e0))))) (or (not (= (op e5 e2) e0)) (or (= (op e5 e0) e2) (not (= (op e2 e5) e0))))) (or (not (= (op e5 e3) e0)) (or (= (op e5 e0) e3) (not (= (op e3 e5) e0))))) (or (not (= (op e5 e4) e0)) (or (= (op e5 e0) e4) (not (= (op e4 e5) e0))))) (or (not (= (op e5 e5) e0)) (or (= (op e5 e0) e5) (not (= (op e5 e5) e0)))))) (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e1)) (or (= (op e0 e1) e0) (not (= (op e0 e0) e1)))) (or (not (= (op e0 e1) e1)) (or (= (op e0 e1) e1) (not (= (op e1 e0) e1))))) (or (not (= (op e0 e2) e1)) (or (= (op e0 e1) e2) (not (= (op e2 e0) e1))))) (or (not (= (op e0 e3) e1)) (or (= (op e0 e1) e3) (not (= (op e3 e0) e1))))) (or (not (= (op e0 e4) e1)) (or (= (op e0 e1) e4) (not (= (op e4 e0) e1))))) (or (not (= (op e0 e5) e1)) (or (= (op e0 e1) e5) (not (= (op e5 e0) e1))))) (and (and (and (and (and (or (not (= (op e1 e0) e1)) (or (= (op e1 e1) e0) (not (= (op e0 e1) e1)))) (or (not (= (op e1 e1) e1)) (or (= (op e1 e1) e1) (not (= (op e1 e1) e1))))) (or (not (= (op e1 e2) e1)) (or (= (op e1 e1) e2) (not (= (op e2 e1) e1))))) (or (not (= (op e1 e3) e1)) (or (= (op e1 e1) e3) (not (= (op e3 e1) e1))))) (or (not (= (op e1 e4) e1)) (or (= (op e1 e1) e4) (not (= (op e4 e1) e1))))) (or (not (= (op e1 e5) e1)) (or (= (op e1 e1) e5) (not (= (op e5 e1) e1)))))) (and (and (and (and (and (or (not (= (op e2 e0) e1)) (or (= (op e2 e1) e0) (not (= (op e0 e2) e1)))) (or (not (= (op e2 e1) e1)) (or (= (op e2 e1) e1) (not (= (op e1 e2) e1))))) (or (not (= (op e2 e2) e1)) (or (= (op e2 e1) e2) (not (= (op e2 e2) e1))))) (or (not (= (op e2 e3) e1)) (or (= (op e2 e1) e3) (not (= (op e3 e2) e1))))) (or (not (= (op e2 e4) e1)) (or (= (op e2 e1) e4) (not (= (op e4 e2) e1))))) (or (not (= (op e2 e5) e1)) (or (= (op e2 e1) e5) (not (= (op e5 e2) e1)))))) (and (and (and (and (and (or (not (= (op e3 e0) e1)) (or (= (op e3 e1) e0) (not (= (op e0 e3) e1)))) (or (not (= (op e3 e1) e1)) (or (= (op e3 e1) e1) (not (= (op e1 e3) e1))))) (or (not (= (op e3 e2) e1)) (or (= (op e3 e1) e2) (not (= (op e2 e3) e1))))) (or (not (= (op e3 e3) e1)) (or (= (op e3 e1) e3) (not (= (op e3 e3) e1))))) (or (not (= (op e3 e4) e1)) (or (= (op e3 e1) e4) (not (= (op e4 e3) e1))))) (or (not (= (op e3 e5) e1)) (or (= (op e3 e1) e5) (not (= (op e5 e3) e1)))))) (and (and (and (and (and (or (not (= (op e4 e0) e1)) (or (= (op e4 e1) e0) (not (= (op e0 e4) e1)))) (or (not (= (op e4 e1) e1)) (or (= (op e4 e1) e1) (not (= (op e1 e4) e1))))) (or (not (= (op e4 e2) e1)) (or (= (op e4 e1) e2) (not (= (op e2 e4) e1))))) (or (not (= (op e4 e3) e1)) (or (= (op e4 e1) e3) (not (= (op e3 e4) e1))))) (or (not (= (op e4 e4) e1)) (or (= (op e4 e1) e4) (not (= (op e4 e4) e1))))) (or (not (= (op e4 e5) e1)) (or (= (op e4 e1) e5) (not (= (op e5 e4) e1)))))) (and (and (and (and (and (or (not (= (op e5 e0) e1)) (or (= (op e5 e1) e0) (not (= (op e0 e5) e1)))) (or (not (= (op e5 e1) e1)) (or (= (op e5 e1) e1) (not (= (op e1 e5) e1))))) (or (not (= (op e5 e2) e1)) (or (= (op e5 e1) e2) (not (= (op e2 e5) e1))))) (or (not (= (op e5 e3) e1)) (or (= (op e5 e1) e3) (not (= (op e3 e5) e1))))) (or (not (= (op e5 e4) e1)) (or (= (op e5 e1) e4) (not (= (op e4 e5) e1))))) (or (not (= (op e5 e5) e1)) (or (= (op e5 e1) e5) (not (= (op e5 e5) e1))))))) (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e2)) (or (= (op e0 e2) e0) (not (= (op e0 e0) e2)))) (or (not (= (op e0 e1) e2)) (or (= (op e0 e2) e1) (not (= (op e1 e0) e2))))) (or (not (= (op e0 e2) e2)) (or (= (op e0 e2) e2) (not (= (op e2 e0) e2))))) (or (not (= (op e0 e3) e2)) (or (= (op e0 e2) e3) (not (= (op e3 e0) e2))))) (or (not (= (op e0 e4) e2)) (or (= (op e0 e2) e4) (not (= (op e4 e0) e2))))) (or (not (= (op e0 e5) e2)) (or (= (op e0 e2) e5) (not (= (op e5 e0) e2))))) (and (and (and (and (and (or (not (= (op e1 e0) e2)) (or (= (op e1 e2) e0) (not (= (op e0 e1) e2)))) (or (not (= (op e1 e1) e2)) (or (= (op e1 e2) e1) (not (= (op e1 e1) e2))))) (or (not (= (op e1 e2) e2)) (or (= (op e1 e2) e2) (not (= (op e2 e1) e2))))) (or (not (= (op e1 e3) e2)) (or (= (op e1 e2) e3) (not (= (op e3 e1) e2))))) (or (not (= (op e1 e4) e2)) (or (= (op e1 e2) e4) (not (= (op e4 e1) e2))))) (or (not (= (op e1 e5) e2)) (or (= (op e1 e2) e5) (not (= (op e5 e1) e2)))))) (and (and (and (and (and (or (not (= (op e2 e0) e2)) (or (= (op e2 e2) e0) (not (= (op e0 e2) e2)))) (or (not (= (op e2 e1) e2)) (or (= (op e2 e2) e1) (not (= (op e1 e2) e2))))) (or (not (= (op e2 e2) e2)) (or (= (op e2 e2) e2) (not (= (op e2 e2) e2))))) (or (not (= (op e2 e3) e2)) (or (= (op e2 e2) e3) (not (= (op e3 e2) e2))))) (or (not (= (op e2 e4) e2)) (or (= (op e2 e2) e4) (not (= (op e4 e2) e2))))) (or (not (= (op e2 e5) e2)) (or (= (op e2 e2) e5) (not (= (op e5 e2) e2)))))) (and (and (and (and (and (or (not (= (op e3 e0) e2)) (or (= (op e3 e2) e0) (not (= (op e0 e3) e2)))) (or (not (= (op e3 e1) e2)) (or (= (op e3 e2) e1) (not (= (op e1 e3) e2))))) (or (not (= (op e3 e2) e2)) (or (= (op e3 e2) e2) (not (= (op e2 e3) e2))))) (or (not (= (op e3 e3) e2)) (or (= (op e3 e2) e3) (not (= (op e3 e3) e2))))) (or (not (= (op e3 e4) e2)) (or (= (op e3 e2) e4) (not (= (op e4 e3) e2))))) (or (not (= (op e3 e5) e2)) (or (= (op e3 e2) e5) (not (= (op e5 e3) e2)))))) (and (and (and (and (and (or (not (= (op e4 e0) e2)) (or (= (op e4 e2) e0) (not (= (op e0 e4) e2)))) (or (not (= (op e4 e1) e2)) (or (= (op e4 e2) e1) (not (= (op e1 e4) e2))))) (or (not (= (op e4 e2) e2)) (or (= (op e4 e2) e2) (not (= (op e2 e4) e2))))) (or (not (= (op e4 e3) e2)) (or (= (op e4 e2) e3) (not (= (op e3 e4) e2))))) (or (not (= (op e4 e4) e2)) (or (= (op e4 e2) e4) (not (= (op e4 e4) e2))))) (or (not (= (op e4 e5) e2)) (or (= (op e4 e2) e5) (not (= (op e5 e4) e2)))))) (and (and (and (and (and (or (not (= (op e5 e0) e2)) (or (= (op e5 e2) e0) (not (= (op e0 e5) e2)))) (or (not (= (op e5 e1) e2)) (or (= (op e5 e2) e1) (not (= (op e1 e5) e2))))) (or (not (= (op e5 e2) e2)) (or (= (op e5 e2) e2) (not (= (op e2 e5) e2))))) (or (not (= (op e5 e3) e2)) (or (= (op e5 e2) e3) (not (= (op e3 e5) e2))))) (or (not (= (op e5 e4) e2)) (or (= (op e5 e2) e4) (not (= (op e4 e5) e2))))) (or (not (= (op e5 e5) e2)) (or (= (op e5 e2) e5) (not (= (op e5 e5) e2))))))) (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e3)) (or (= (op e0 e3) e0) (not (= (op e0 e0) e3)))) (or (not (= (op e0 e1) e3)) (or (= (op e0 e3) e1) (not (= (op e1 e0) e3))))) (or (not (= (op e0 e2) e3)) (or (= (op e0 e3) e2) (not (= (op e2 e0) e3))))) (or (not (= (op e0 e3) e3)) (or (= (op e0 e3) e3) (not (= (op e3 e0) e3))))) (or (not (= (op e0 e4) e3)) (or (= (op e0 e3) e4) (not (= (op e4 e0) e3))))) (or (not (= (op e0 e5) e3)) (or (= (op e0 e3) e5) (not (= (op e5 e0) e3))))) (and (and (and (and (and (or (not (= (op e1 e0) e3)) (or (= (op e1 e3) e0) (not (= (op e0 e1) e3)))) (or (not (= (op e1 e1) e3)) (or (= (op e1 e3) e1) (not (= (op e1 e1) e3))))) (or (not (= (op e1 e2) e3)) (or (= (op e1 e3) e2) (not (= (op e2 e1) e3))))) (or (not (= (op e1 e3) e3)) (or (= (op e1 e3) e3) (not (= (op e3 e1) e3))))) (or (not (= (op e1 e4) e3)) (or (= (op e1 e3) e4) (not (= (op e4 e1) e3))))) (or (not (= (op e1 e5) e3)) (or (= (op e1 e3) e5) (not (= (op e5 e1) e3)))))) (and (and (and (and (and (or (not (= (op e2 e0) e3)) (or (= (op e2 e3) e0) (not (= (op e0 e2) e3)))) (or (not (= (op e2 e1) e3)) (or (= (op e2 e3) e1) (not (= (op e1 e2) e3))))) (or (not (= (op e2 e2) e3)) (or (= (op e2 e3) e2) (not (= (op e2 e2) e3))))) (or (not (= (op e2 e3) e3)) (or (= (op e2 e3) e3) (not (= (op e3 e2) e3))))) (or (not (= (op e2 e4) e3)) (or (= (op e2 e3) e4) (not (= (op e4 e2) e3))))) (or (not (= (op e2 e5) e3)) (or (= (op e2 e3) e5) (not (= (op e5 e2) e3)))))) (and (and (and (and (and (or (not (= (op e3 e0) e3)) (or (= (op e3 e3) e0) (not (= (op e0 e3) e3)))) (or (not (= (op e3 e1) e3)) (or (= (op e3 e3) e1) (not (= (op e1 e3) e3))))) (or (not (= (op e3 e2) e3)) (or (= (op e3 e3) e2) (not (= (op e2 e3) e3))))) (or (not (= (op e3 e3) e3)) (or (= (op e3 e3) e3) (not (= (op e3 e3) e3))))) (or (not (= (op e3 e4) e3)) (or (= (op e3 e3) e4) (not (= (op e4 e3) e3))))) (or (not (= (op e3 e5) e3)) (or (= (op e3 e3) e5) (not (= (op e5 e3) e3)))))) (and (and (and (and (and (or (not (= (op e4 e0) e3)) (or (= (op e4 e3) e0) (not (= (op e0 e4) e3)))) (or (not (= (op e4 e1) e3)) (or (= (op e4 e3) e1) (not (= (op e1 e4) e3))))) (or (not (= (op e4 e2) e3)) (or (= (op e4 e3) e2) (not (= (op e2 e4) e3))))) (or (not (= (op e4 e3) e3)) (or (= (op e4 e3) e3) (not (= (op e3 e4) e3))))) (or (not (= (op e4 e4) e3)) (or (= (op e4 e3) e4) (not (= (op e4 e4) e3))))) (or (not (= (op e4 e5) e3)) (or (= (op e4 e3) e5) (not (= (op e5 e4) e3)))))) (and (and (and (and (and (or (not (= (op e5 e0) e3)) (or (= (op e5 e3) e0) (not (= (op e0 e5) e3)))) (or (not (= (op e5 e1) e3)) (or (= (op e5 e3) e1) (not (= (op e1 e5) e3))))) (or (not (= (op e5 e2) e3)) (or (= (op e5 e3) e2) (not (= (op e2 e5) e3))))) (or (not (= (op e5 e3) e3)) (or (= (op e5 e3) e3) (not (= (op e3 e5) e3))))) (or (not (= (op e5 e4) e3)) (or (= (op e5 e3) e4) (not (= (op e4 e5) e3))))) (or (not (= (op e5 e5) e3)) (or (= (op e5 e3) e5) (not (= (op e5 e5) e3))))))) (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e4)) (or (= (op e0 e4) e0) (not (= (op e0 e0) e4)))) (or (not (= (op e0 e1) e4)) (or (= (op e0 e4) e1) (not (= (op e1 e0) e4))))) (or (not (= (op e0 e2) e4)) (or (= (op e0 e4) e2) (not (= (op e2 e0) e4))))) (or (not (= (op e0 e3) e4)) (or (= (op e0 e4) e3) (not (= (op e3 e0) e4))))) (or (not (= (op e0 e4) e4)) (or (= (op e0 e4) e4) (not (= (op e4 e0) e4))))) (or (not (= (op e0 e5) e4)) (or (= (op e0 e4) e5) (not (= (op e5 e0) e4))))) (and (and (and (and (and (or (not (= (op e1 e0) e4)) (or (= (op e1 e4) e0) (not (= (op e0 e1) e4)))) (or (not (= (op e1 e1) e4)) (or (= (op e1 e4) e1) (not (= (op e1 e1) e4))))) (or (not (= (op e1 e2) e4)) (or (= (op e1 e4) e2) (not (= (op e2 e1) e4))))) (or (not (= (op e1 e3) e4)) (or (= (op e1 e4) e3) (not (= (op e3 e1) e4))))) (or (not (= (op e1 e4) e4)) (or (= (op e1 e4) e4) (not (= (op e4 e1) e4))))) (or (not (= (op e1 e5) e4)) (or (= (op e1 e4) e5) (not (= (op e5 e1) e4)))))) (and (and (and (and (and (or (not (= (op e2 e0) e4)) (or (= (op e2 e4) e0) (not (= (op e0 e2) e4)))) (or (not (= (op e2 e1) e4)) (or (= (op e2 e4) e1) (not (= (op e1 e2) e4))))) (or (not (= (op e2 e2) e4)) (or (= (op e2 e4) e2) (not (= (op e2 e2) e4))))) (or (not (= (op e2 e3) e4)) (or (= (op e2 e4) e3) (not (= (op e3 e2) e4))))) (or (not (= (op e2 e4) e4)) (or (= (op e2 e4) e4) (not (= (op e4 e2) e4))))) (or (not (= (op e2 e5) e4)) (or (= (op e2 e4) e5) (not (= (op e5 e2) e4)))))) (and (and (and (and (and (or (not (= (op e3 e0) e4)) (or (= (op e3 e4) e0) (not (= (op e0 e3) e4)))) (or (not (= (op e3 e1) e4)) (or (= (op e3 e4) e1) (not (= (op e1 e3) e4))))) (or (not (= (op e3 e2) e4)) (or (= (op e3 e4) e2) (not (= (op e2 e3) e4))))) (or (not (= (op e3 e3) e4)) (or (= (op e3 e4) e3) (not (= (op e3 e3) e4))))) (or (not (= (op e3 e4) e4)) (or (= (op e3 e4) e4) (not (= (op e4 e3) e4))))) (or (not (= (op e3 e5) e4)) (or (= (op e3 e4) e5) (not (= (op e5 e3) e4)))))) (and (and (and (and (and (or (not (= (op e4 e0) e4)) (or (= (op e4 e4) e0) (not (= (op e0 e4) e4)))) (or (not (= (op e4 e1) e4)) (or (= (op e4 e4) e1) (not (= (op e1 e4) e4))))) (or (not (= (op e4 e2) e4)) (or (= (op e4 e4) e2) (not (= (op e2 e4) e4))))) (or (not (= (op e4 e3) e4)) (or (= (op e4 e4) e3) (not (= (op e3 e4) e4))))) (or (not (= (op e4 e4) e4)) (or (= (op e4 e4) e4) (not (= (op e4 e4) e4))))) (or (not (= (op e4 e5) e4)) (or (= (op e4 e4) e5) (not (= (op e5 e4) e4)))))) (and (and (and (and (and (or (not (= (op e5 e0) e4)) (or (= (op e5 e4) e0) (not (= (op e0 e5) e4)))) (or (not (= (op e5 e1) e4)) (or (= (op e5 e4) e1) (not (= (op e1 e5) e4))))) (or (not (= (op e5 e2) e4)) (or (= (op e5 e4) e2) (not (= (op e2 e5) e4))))) (or (not (= (op e5 e3) e4)) (or (= (op e5 e4) e3) (not (= (op e3 e5) e4))))) (or (not (= (op e5 e4) e4)) (or (= (op e5 e4) e4) (not (= (op e4 e5) e4))))) (or (not (= (op e5 e5) e4)) (or (= (op e5 e4) e5) (not (= (op e5 e5) e4))))))) (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e5)) (or (= (op e0 e5) e0) (not (= (op e0 e0) e5)))) (or (not (= (op e0 e1) e5)) (or (= (op e0 e5) e1) (not (= (op e1 e0) e5))))) (or (not (= (op e0 e2) e5)) (or (= (op e0 e5) e2) (not (= (op e2 e0) e5))))) (or (not (= (op e0 e3) e5)) (or (= (op e0 e5) e3) (not (= (op e3 e0) e5))))) (or (not (= (op e0 e4) e5)) (or (= (op e0 e5) e4) (not (= (op e4 e0) e5))))) (or (not (= (op e0 e5) e5)) (or (= (op e0 e5) e5) (not (= (op e5 e0) e5))))) (and (and (and (and (and (or (not (= (op e1 e0) e5)) (or (= (op e1 e5) e0) (not (= (op e0 e1) e5)))) (or (not (= (op e1 e1) e5)) (or (= (op e1 e5) e1) (not (= (op e1 e1) e5))))) (or (not (= (op e1 e2) e5)) (or (= (op e1 e5) e2) (not (= (op e2 e1) e5))))) (or (not (= (op e1 e3) e5)) (or (= (op e1 e5) e3) (not (= (op e3 e1) e5))))) (or (not (= (op e1 e4) e5)) (or (= (op e1 e5) e4) (not (= (op e4 e1) e5))))) (or (not (= (op e1 e5) e5)) (or (= (op e1 e5) e5) (not (= (op e5 e1) e5)))))) (and (and (and (and (and (or (not (= (op e2 e0) e5)) (or (= (op e2 e5) e0) (not (= (op e0 e2) e5)))) (or (not (= (op e2 e1) e5)) (or (= (op e2 e5) e1) (not (= (op e1 e2) e5))))) (or (not (= (op e2 e2) e5)) (or (= (op e2 e5) e2) (not (= (op e2 e2) e5))))) (or (not (= (op e2 e3) e5)) (or (= (op e2 e5) e3) (not (= (op e3 e2) e5))))) (or (not (= (op e2 e4) e5)) (or (= (op e2 e5) e4) (not (= (op e4 e2) e5))))) (or (not (= (op e2 e5) e5)) (or (= (op e2 e5) e5) (not (= (op e5 e2) e5)))))) (and (and (and (and (and (or (not (= (op e3 e0) e5)) (or (= (op e3 e5) e0) (not (= (op e0 e3) e5)))) (or (not (= (op e3 e1) e5)) (or (= (op e3 e5) e1) (not (= (op e1 e3) e5))))) (or (not (= (op e3 e2) e5)) (or (= (op e3 e5) e2) (not (= (op e2 e3) e5))))) (or (not (= (op e3 e3) e5)) (or (= (op e3 e5) e3) (not (= (op e3 e3) e5))))) (or (not (= (op e3 e4) e5)) (or (= (op e3 e5) e4) (not (= (op e4 e3) e5))))) (or (not (= (op e3 e5) e5)) (or (= (op e3 e5) e5) (not (= (op e5 e3) e5)))))) (and (and (and (and (and (or (not (= (op e4 e0) e5)) (or (= (op e4 e5) e0) (not (= (op e0 e4) e5)))) (or (not (= (op e4 e1) e5)) (or (= (op e4 e5) e1) (not (= (op e1 e4) e5))))) (or (not (= (op e4 e2) e5)) (or (= (op e4 e5) e2) (not (= (op e2 e4) e5))))) (or (not (= (op e4 e3) e5)) (or (= (op e4 e5) e3) (not (= (op e3 e4) e5))))) (or (not (= (op e4 e4) e5)) (or (= (op e4 e5) e4) (not (= (op e4 e4) e5))))) (or (not (= (op e4 e5) e5)) (or (= (op e4 e5) e5) (not (= (op e5 e4) e5)))))) (and (and (and (and (and (or (not (= (op e5 e0) e5)) (or (= (op e5 e5) e0) (not (= (op e0 e5) e5)))) (or (not (= (op e5 e1) e5)) (or (= (op e5 e5) e1) (not (= (op e1 e5) e5))))) (or (not (= (op e5 e2) e5)) (or (= (op e5 e5) e2) (not (= (op e2 e5) e5))))) (or (not (= (op e5 e3) e5)) (or (= (op e5 e5) e3) (not (= (op e3 e5) e5))))) (or (not (= (op e5 e4) e5)) (or (= (op e5 e5) e4) (not (= (op e4 e5) e5))))) (or (not (= (op e5 e5) e5)) (or (= (op e5 e5) e5) (not (= (op e5 e5) e5))))))))
(assume a8 (and (and (and (and (and (or (or (or (or (or (or (not (= (op e0 (op e0 e0)) e0)) (= (op (op e0 e0) (op e0 e0)) e0)) (or (not (= (op e0 (op e0 e1)) e1)) (= (op (op e0 e1) (op e0 e1)) e0))) (or (not (= (op e0 (op e0 e2)) e2)) (= (op (op e0 e2) (op e0 e2)) e0))) (or (not (= (op e0 (op e0 e3)) e3)) (= (op (op e0 e3) (op e0 e3)) e0))) (or (not (= (op e0 (op e0 e4)) e4)) (= (op (op e0 e4) (op e0 e4)) e0))) (or (not (= (op e0 (op e0 e5)) e5)) (= (op (op e0 e5) (op e0 e5)) e0))) (or (or (or (or (or (or (not (= (op e1 (op e1 e0)) e0)) (= (op (op e1 e0) (op e1 e0)) e1)) (or (not (= (op e1 (op e1 e1)) e1)) (= (op (op e1 e1) (op e1 e1)) e1))) (or (not (= (op e1 (op e1 e2)) e2)) (= (op (op e1 e2) (op e1 e2)) e1))) (or (not (= (op e1 (op e1 e3)) e3)) (= (op (op e1 e3) (op e1 e3)) e1))) (or (not (= (op e1 (op e1 e4)) e4)) (= (op (op e1 e4) (op e1 e4)) e1))) (or (not (= (op e1 (op e1 e5)) e5)) (= (op (op e1 e5) (op e1 e5)) e1)))) (or (or (or (or (or (or (not (= (op e2 (op e2 e0)) e0)) (= (op (op e2 e0) (op e2 e0)) e2)) (or (not (= (op e2 (op e2 e1)) e1)) (= (op (op e2 e1) (op e2 e1)) e2))) (or (not (= (op e2 (op e2 e2)) e2)) (= (op (op e2 e2) (op e2 e2)) e2))) (or (not (= (op e2 (op e2 e3)) e3)) (= (op (op e2 e3) (op e2 e3)) e2))) (or (not (= (op e2 (op e2 e4)) e4)) (= (op (op e2 e4) (op e2 e4)) e2))) (or (not (= (op e2 (op e2 e5)) e5)) (= (op (op e2 e5) (op e2 e5)) e2)))) (or (or (or (or (or (or (not (= (op e3 (op e3 e0)) e0)) (= (op (op e3 e0) (op e3 e0)) e3)) (or (not (= (op e3 (op e3 e1)) e1)) (= (op (op e3 e1) (op e3 e1)) e3))) (or (not (= (op e3 (op e3 e2)) e2)) (= (op (op e3 e2) (op e3 e2)) e3))) (or (not (= (op e3 (op e3 e3)) e3)) (= (op (op e3 e3) (op e3 e3)) e3))) (or (not (= (op e3 (op e3 e4)) e4)) (= (op (op e3 e4) (op e3 e4)) e3))) (or (not (= (op e3 (op e3 e5)) e5)) (= (op (op e3 e5) (op e3 e5)) e3)))) (or (or (or (or (or (or (not (= (op e4 (op e4 e0)) e0)) (= (op (op e4 e0) (op e4 e0)) e4)) (or (not (= (op e4 (op e4 e1)) e1)) (= (op (op e4 e1) (op e4 e1)) e4))) (or (not (= (op e4 (op e4 e2)) e2)) (= (op (op e4 e2) (op e4 e2)) e4))) (or (not (= (op e4 (op e4 e3)) e3)) (= (op (op e4 e3) (op e4 e3)) e4))) (or (not (= (op e4 (op e4 e4)) e4)) (= (op (op e4 e4) (op e4 e4)) e4))) (or (not (= (op e4 (op e4 e5)) e5)) (= (op (op e4 e5) (op e4 e5)) e4)))) (or (or (or (or (or (or (not (= (op e5 (op e5 e0)) e0)) (= (op (op e5 e0) (op e5 e0)) e5)) (or (not (= (op e5 (op e5 e1)) e1)) (= (op (op e5 e1) (op e5 e1)) e5))) (or (not (= (op e5 (op e5 e2)) e2)) (= (op (op e5 e2) (op e5 e2)) e5))) (or (not (= (op e5 (op e5 e3)) e3)) (= (op (op e5 e3) (op e5 e3)) e5))) (or (not (= (op e5 (op e5 e4)) e4)) (= (op (op e5 e4) (op e5 e4)) e5))) (or (not (= (op e5 (op e5 e5)) e5)) (= (op (op e5 e5) (op e5 e5)) e5)))))
(assume a9 (and (and (and (and (and (or (or (or (or (or (and (not (= (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op e0 e0))) (and (not (= (op e1 (op e1 e0)) e0)) (= (op e0 e1) (op e1 e0)))) (and (not (= (op e2 (op e2 e0)) e0)) (= (op e0 e2) (op e2 e0)))) (and (not (= (op e3 (op e3 e0)) e0)) (= (op e0 e3) (op e3 e0)))) (and (not (= (op e4 (op e4 e0)) e0)) (= (op e0 e4) (op e4 e0)))) (and (not (= (op e5 (op e5 e0)) e0)) (= (op e0 e5) (op e5 e0)))) (or (or (or (or (or (and (not (= (op e0 (op e0 e1)) e1)) (= (op e1 e0) (op e0 e1))) (and (not (= (op e1 (op e1 e1)) e1)) (= (op e1 e1) (op e1 e1)))) (and (not (= (op e2 (op e2 e1)) e1)) (= (op e1 e2) (op e2 e1)))) (and (not (= (op e3 (op e3 e1)) e1)) (= (op e1 e3) (op e3 e1)))) (and (not (= (op e4 (op e4 e1)) e1)) (= (op e1 e4) (op e4 e1)))) (and (not (= (op e5 (op e5 e1)) e1)) (= (op e1 e5) (op e5 e1))))) (or (or (or (or (or (and (not (= (op e0 (op e0 e2)) e2)) (= (op e2 e0) (op e0 e2))) (and (not (= (op e1 (op e1 e2)) e2)) (= (op e2 e1) (op e1 e2)))) (and (not (= (op e2 (op e2 e2)) e2)) (= (op e2 e2) (op e2 e2)))) (and (not (= (op e3 (op e3 e2)) e2)) (= (op e2 e3) (op e3 e2)))) (and (not (= (op e4 (op e4 e2)) e2)) (= (op e2 e4) (op e4 e2)))) (and (not (= (op e5 (op e5 e2)) e2)) (= (op e2 e5) (op e5 e2))))) (or (or (or (or (or (and (not (= (op e0 (op e0 e3)) e3)) (= (op e3 e0) (op e0 e3))) (and (not (= (op e1 (op e1 e3)) e3)) (= (op e3 e1) (op e1 e3)))) (and (not (= (op e2 (op e2 e3)) e3)) (= (op e3 e2) (op e2 e3)))) (and (not (= (op e3 (op e3 e3)) e3)) (= (op e3 e3) (op e3 e3)))) (and (not (= (op e4 (op e4 e3)) e3)) (= (op e3 e4) (op e4 e3)))) (and (not (= (op e5 (op e5 e3)) e3)) (= (op e3 e5) (op e5 e3))))) (or (or (or (or (or (and (not (= (op e0 (op e0 e4)) e4)) (= (op e4 e0) (op e0 e4))) (and (not (= (op e1 (op e1 e4)) e4)) (= (op e4 e1) (op e1 e4)))) (and (not (= (op e2 (op e2 e4)) e4)) (= (op e4 e2) (op e2 e4)))) (and (not (= (op e3 (op e3 e4)) e4)) (= (op e4 e3) (op e3 e4)))) (and (not (= (op e4 (op e4 e4)) e4)) (= (op e4 e4) (op e4 e4)))) (and (not (= (op e5 (op e5 e4)) e4)) (= (op e4 e5) (op e5 e4))))) (or (or (or (or (or (and (not (= (op e0 (op e0 e5)) e5)) (= (op e5 e0) (op e0 e5))) (and (not (= (op e1 (op e1 e5)) e5)) (= (op e5 e1) (op e1 e5)))) (and (not (= (op e2 (op e2 e5)) e5)) (= (op e5 e2) (op e2 e5)))) (and (not (= (op e3 (op e3 e5)) e5)) (= (op e5 e3) (op e3 e5)))) (and (not (= (op e4 (op e4 e5)) e5)) (= (op e5 e4) (op e4 e5)))) (and (not (= (op e5 (op e5 e5)) e5)) (= (op e5 e5) (op e5 e5))))))
(assume a10 (and (and (and (and (and (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit))) (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit))) (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit))) (and (and (and (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e3)) e3) (not (= (op e0 e3) unit))) (and (= (op e1 (op e1 e3)) e3) (not (= (op e1 e3) unit)))) (and (= (op e2 (op e2 e3)) e3) (not (= (op e2 e3) unit)))) (and (= (op e3 (op e3 e3)) e3) (not (= (op e3 e3) unit)))) (and (= (op e4 (op e4 e3)) e3) (not (= (op e4 e3) unit)))) (and (= (op e5 (op e5 e3)) e3) (not (= (op e5 e3) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e4)) e4) (not (= (op e0 e4) unit))) (and (= (op e1 (op e1 e4)) e4) (not (= (op e1 e4) unit)))) (and (= (op e2 (op e2 e4)) e4) (not (= (op e2 e4) unit)))) (and (= (op e3 (op e3 e4)) e4) (not (= (op e3 e4) unit)))) (and (= (op e4 (op e4 e4)) e4) (not (= (op e4 e4) unit)))) (and (= (op e5 (op e5 e4)) e4) (not (= (op e5 e4) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e5)) e5) (not (= (op e0 e5) unit))) (and (= (op e1 (op e1 e5)) e5) (not (= (op e1 e5) unit)))) (and (= (op e2 (op e2 e5)) e5) (not (= (op e2 e5) unit)))) (and (= (op e3 (op e3 e5)) e5) (not (= (op e3 e5) unit)))) (and (= (op e4 (op e4 e5)) e5) (not (= (op e4 e5) unit)))) (and (= (op e5 (op e5 e5)) e5) (not (= (op e5 e5) unit)))))))
(assume a11 (= unit e0))
(assume a12 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e0 e0) (op e5 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e1 e0) (op e5 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e2 e0) (op e5 e0)))) (not (= (op e3 e0) (op e4 e0)))) (not (= (op e3 e0) (op e5 e0)))) (not (= (op e4 e0) (op e5 e0)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e0 e1) (op e5 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e1 e1) (op e5 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e2 e1) (op e5 e1)))) (not (= (op e3 e1) (op e4 e1)))) (not (= (op e3 e1) (op e5 e1)))) (not (= (op e4 e1) (op e5 e1))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e0 e2) (op e5 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e1 e2) (op e5 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e2 e2) (op e5 e2)))) (not (= (op e3 e2) (op e4 e2)))) (not (= (op e3 e2) (op e5 e2)))) (not (= (op e4 e2) (op e5 e2))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e0 e3) (op e5 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e1 e3) (op e5 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e2 e3) (op e5 e3)))) (not (= (op e3 e3) (op e4 e3)))) (not (= (op e3 e3) (op e5 e3)))) (not (= (op e4 e3) (op e5 e3))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e0 e4) (op e5 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e1 e4) (op e5 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e2 e4) (op e5 e4)))) (not (= (op e3 e4) (op e4 e4)))) (not (= (op e3 e4) (op e5 e4)))) (not (= (op e4 e4) (op e5 e4))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e5) (op e1 e5))) (not (= (op e0 e5) (op e2 e5)))) (not (= (op e0 e5) (op e3 e5)))) (not (= (op e0 e5) (op e4 e5)))) (not (= (op e0 e5) (op e5 e5)))) (not (= (op e1 e5) (op e2 e5)))) (not (= (op e1 e5) (op e3 e5)))) (not (= (op e1 e5) (op e4 e5)))) (not (= (op e1 e5) (op e5 e5)))) (not (= (op e2 e5) (op e3 e5)))) (not (= (op e2 e5) (op e4 e5)))) (not (= (op e2 e5) (op e5 e5)))) (not (= (op e3 e5) (op e4 e5)))) (not (= (op e3 e5) (op e5 e5)))) (not (= (op e4 e5) (op e5 e5))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e0) (op e0 e5)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e1) (op e0 e5)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e2) (op e0 e5)))) (not (= (op e0 e3) (op e0 e4)))) (not (= (op e0 e3) (op e0 e5)))) (not (= (op e0 e4) (op e0 e5)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e0) (op e1 e5)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e1) (op e1 e5)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e2) (op e1 e5)))) (not (= (op e1 e3) (op e1 e4)))) (not (= (op e1 e3) (op e1 e5)))) (not (= (op e1 e4) (op e1 e5))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e0) (op e2 e5)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e1) (op e2 e5)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e2) (op e2 e5)))) (not (= (op e2 e3) (op e2 e4)))) (not (= (op e2 e3) (op e2 e5)))) (not (= (op e2 e4) (op e2 e5))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e0) (op e3 e5)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e1) (op e3 e5)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e2) (op e3 e5)))) (not (= (op e3 e3) (op e3 e4)))) (not (= (op e3 e3) (op e3 e5)))) (not (= (op e3 e4) (op e3 e5))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e0) (op e4 e5)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e1) (op e4 e5)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e2) (op e4 e5)))) (not (= (op e4 e3) (op e4 e4)))) (not (= (op e4 e3) (op e4 e5)))) (not (= (op e4 e4) (op e4 e5))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e5 e0) (op e5 e1))) (not (= (op e5 e0) (op e5 e2)))) (not (= (op e5 e0) (op e5 e3)))) (not (= (op e5 e0) (op e5 e4)))) (not (= (op e5 e0) (op e5 e5)))) (not (= (op e5 e1) (op e5 e2)))) (not (= (op e5 e1) (op e5 e3)))) (not (= (op e5 e1) (op e5 e4)))) (not (= (op e5 e1) (op e5 e5)))) (not (= (op e5 e2) (op e5 e3)))) (not (= (op e5 e2) (op e5 e4)))) (not (= (op e5 e2) (op e5 e5)))) (not (= (op e5 e3) (op e5 e4)))) (not (= (op e5 e3) (op e5 e5)))) (not (= (op e5 e4) (op e5 e5)))))))
(assume a13 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3))) (not (= e2 e4))) (not (= e2 e5))) (not (= e3 e4))) (not (= e3 e5))) (not (= e4 e5))))
(step t0 (cl (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (not (= e1 (op e1 e0))) (not (= e0 (op e1 (op e1 e0))))) :rule and_neg)
(step t1 (cl (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) :rule implies_neg1)
(anchor :step t2)
(assume t2.a0 (= e1 (op e1 e0)))
(assume t2.a1 (= e0 (op e1 (op e1 e0))))
(step t2.t0 (cl (not (= (= (op e1 unit) e1) (= e1 (op e1 e0)))) (not (= (op e1 unit) e1)) (= e1 (op e1 e0))) :rule equiv_pos2)
(step t2.t1 (cl (= (= (op e1 unit) e1) (= e1 (op e1 unit)))) :rule rare_rewrite :args ("eq-symm" (op e1 unit) e1))
(step t2.t2 (cl (= e1 e1)) :rule refl)
(step t2.t3 (cl (= (op e1 unit) (op e1 e0))) :rule cong :premises (t2.t2 a11))
(step t2.t4 (cl (= (= e1 (op e1 unit)) (= e1 (op e1 e0)))) :rule cong :premises (t2.t2 t2.t3))
(step t2.t5 (cl (= (= (op e1 unit) e1) (= e1 (op e1 e0)))) :rule trans :premises (t2.t1 t2.t4))
(step t2.t6 (cl (and (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4))) (and (= (op unit e5) e5) (= (op e5 unit) e5)))) :rule and :premises (a2) :args (0))
(step t2.t7 (cl (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4)))) :rule and :premises (t2.t6) :args (0))
(step t2.t8 (cl (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3)))) :rule and :premises (t2.t7) :args (0))
(step t2.t9 (cl (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2)))) :rule and :premises (t2.t8) :args (0))
(step t2.t10 (cl (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1)))) :rule and :premises (t2.t9) :args (0))
(step t2.t11 (cl (and (= (op unit e1) e1) (= (op e1 unit) e1))) :rule and :premises (t2.t10) :args (1))
(step t2.t12 (cl (= (op e1 unit) e1)) :rule and :premises (t2.t11) :args (1))
(step t2.t13 (cl (= e1 (op e1 e0))) :rule resolution :premises (t2.t0 t2.t5 t2.t12))
(step t2.t14 (cl (= (op e1 (op e1 e0)) e0)) :rule symm :premises (t2.a1))
(step t2.t15 (cl (= e0 (op e1 (op e1 e0)))) :rule symm :premises (t2.t14))
(step t2.t16 (cl (= (op e1 e0) e1)) :rule symm :premises (t2.t13))
(step t2.t17 (cl (= (op e1 (op e1 e0)) (op e1 e1))) :rule cong :premises (t2.t2 t2.t16))
(step t2.t18 (cl (= e0 (op e1 e1))) :rule trans :premises (t2.t15 t2.t17))
(step t2.t19 (cl (= (op e1 e0) (op e1 (op e1 e1)))) :rule cong :premises (t2.t2 t2.t18))
(step t2.t20 (cl (= e1 (op e1 (op e1 e1)))) :rule trans :premises (t2.t13 t2.t19))
(step t2 (cl (not (= e1 (op e1 e0))) (not (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) :rule subproof :discharge (t2.a0 t2.a1))
(step t3 (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e1 (op e1 e0))) :rule and_pos :args (0))
(step t4 (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e0 (op e1 (op e1 e0)))) :rule and_pos :args (1))
(step t5 (cl (= e1 (op e1 (op e1 e1))) (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))))) :rule resolution :premises (t2 t3 t4))
(step t6 (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e1 (op e1 (op e1 e1)))) :rule reordering :premises (t5))
(step t7 (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e1 (op e1 (op e1 e1)))) :rule contraction :premises (t6))
(step t8 (cl (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) (= e1 (op e1 (op e1 e1)))) :rule resolution :premises (t1 t7))
(step t9 (cl (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) (not (= e1 (op e1 (op e1 e1))))) :rule implies_neg2)
(step t10 (cl (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1))))) :rule resolution :premises (t8 t9))
(step t11 (cl (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1))))) :rule contraction :premises (t10))
(step t12 (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e1 (op e1 (op e1 e1)))) :rule implies :premises (t11))
(step t13 (cl (not (= e1 (op e1 e0))) (not (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) :rule resolution :premises (t0 t12))
(step t14 (cl (not (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))) (= e0 (op e1 (op e1 e0)))) :rule and_pos :args (0))
(step t15 (cl (= e0 (op e1 (op e1 e0))) (not (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))))) :rule reordering :premises (t14))
(step t16 (cl (not (= (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))))) (not (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))))) (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))))) :rule equiv_pos2)
(step t17 (cl (= (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit))) (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit))) (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))))))
(step t18 (cl (= (= (op e5 (op e5 e0)) e0) (= e0 (op e5 (op e5 e0))))) :rule rare_rewrite :args ("eq-symm" (op e5 (op e5 e0)) e0))
(step t19 (cl (= (= (op e5 e0) unit) (= unit (op e5 e0)))) :rule rare_rewrite :args ("eq-symm" (op e5 e0) unit))
(step t20 (cl (= (not (= (op e5 e0) unit)) (not (= unit (op e5 e0))))) :rule cong :premises (t19))
(step t21 (cl (= (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))) (and (= e0 (op e5 (op e5 e0))) (not (= unit (op e5 e0)))))) :rule cong :premises (t18 t20))
(step t22 (cl (= (= (op e4 (op e4 e0)) e0) (= e0 (op e4 (op e4 e0))))) :rule rare_rewrite :args ("eq-symm" (op e4 (op e4 e0)) e0))
(step t23 (cl (= (= (op e4 e0) unit) (= unit (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) unit))
(step t24 (cl (= (not (= (op e4 e0) unit)) (not (= unit (op e4 e0))))) :rule cong :premises (t23))
(step t25 (cl (= (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit))) (and (= e0 (op e4 (op e4 e0))) (not (= unit (op e4 e0)))))) :rule cong :premises (t22 t24))
(step t26 (cl (= (= (op e3 (op e3 e0)) e0) (= e0 (op e3 (op e3 e0))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op e3 e0)) e0))
(step t27 (cl (= (= (op e3 e0) unit) (= unit (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) unit))
(step t28 (cl (= (not (= (op e3 e0) unit)) (not (= unit (op e3 e0))))) :rule cong :premises (t27))
(step t29 (cl (= (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit))) (and (= e0 (op e3 (op e3 e0))) (not (= unit (op e3 e0)))))) :rule cong :premises (t26 t28))
(step t30 (cl (= (= (op e2 (op e2 e0)) e0) (= e0 (op e2 (op e2 e0))))) :rule rare_rewrite :args ("eq-symm" (op e2 (op e2 e0)) e0))
(step t31 (cl (= (= (op e2 e0) unit) (= unit (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) unit))
(step t32 (cl (= (not (= (op e2 e0) unit)) (not (= unit (op e2 e0))))) :rule cong :premises (t31))
(step t33 (cl (= (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit))) (and (= e0 (op e2 (op e2 e0))) (not (= unit (op e2 e0)))))) :rule cong :premises (t30 t32))
(step t34 (cl (= (= (op e0 (op e0 e0)) e0) (= e0 (op e0 (op e0 e0))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op e0 e0)) e0))
(step t35 (cl (= (= (op e0 e0) unit) (= unit (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) unit))
(step t36 (cl (= (not (= (op e0 e0) unit)) (not (= unit (op e0 e0))))) :rule cong :premises (t35))
(step t37 (cl (= (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= e0 (op e0 (op e0 e0))) (not (= unit (op e0 e0)))))) :rule cong :premises (t34 t36))
(step t38 (cl (= (= (op e1 (op e1 e0)) e0) (= e0 (op e1 (op e1 e0))))) :rule rare_rewrite :args ("eq-symm" (op e1 (op e1 e0)) e0))
(step t39 (cl (= (= (op e1 e0) unit) (= unit (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) unit))
(step t40 (cl (= (not (= (op e1 e0) unit)) (not (= unit (op e1 e0))))) :rule cong :premises (t39))
(step t41 (cl (= (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit))) (and (= e0 (op e1 (op e1 e0))) (not (= unit (op e1 e0)))))) :rule cong :premises (t38 t40))
(step t42 (cl (= (or (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit))) (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (or (and (= e0 (op e5 (op e5 e0))) (not (= unit (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= unit (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= unit (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= unit (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= unit (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= unit (op e1 e0))))))) :rule cong :premises (t21 t25 t29 t33 t37 t41))
(step t43 (cl (= (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (and (= e0 (op e5 (op e5 e0))) (not (= unit (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= unit (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= unit (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= unit (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= unit (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= unit (op e1 e0))))))) :rule trans :premises (t17 t42))
(step t44 (cl (= (= e0 (op e5 (op e5 e0))) (= e0 (op e5 (op e5 e0))))) :rule refl)
(step t45 (cl (= (op e5 e0) (op e5 e0))) :rule refl)
(step t46 (cl (= (= unit (op e5 e0)) (= e0 (op e5 e0)))) :rule cong :premises (a11 t45))
(step t47 (cl (= (not (= unit (op e5 e0))) (not (= e0 (op e5 e0))))) :rule cong :premises (t46))
(step t48 (cl (= (and (= e0 (op e5 (op e5 e0))) (not (= unit (op e5 e0)))) (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))))) :rule cong :premises (t44 t47))
(step t49 (cl (= (= e0 (op e4 (op e4 e0))) (= e0 (op e4 (op e4 e0))))) :rule refl)
(step t50 (cl (= (op e4 e0) (op e4 e0))) :rule refl)
(step t51 (cl (= (= unit (op e4 e0)) (= e0 (op e4 e0)))) :rule cong :premises (a11 t50))
(step t52 (cl (= (not (= unit (op e4 e0))) (not (= e0 (op e4 e0))))) :rule cong :premises (t51))
(step t53 (cl (= (and (= e0 (op e4 (op e4 e0))) (not (= unit (op e4 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))))) :rule cong :premises (t49 t52))
(step t54 (cl (= (= e0 (op e3 (op e3 e0))) (= e0 (op e3 (op e3 e0))))) :rule refl)
(step t55 (cl (= (op e3 e0) (op e3 e0))) :rule refl)
(step t56 (cl (= (= unit (op e3 e0)) (= e0 (op e3 e0)))) :rule cong :premises (a11 t55))
(step t57 (cl (= (not (= unit (op e3 e0))) (not (= e0 (op e3 e0))))) :rule cong :premises (t56))
(step t58 (cl (= (and (= e0 (op e3 (op e3 e0))) (not (= unit (op e3 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))))) :rule cong :premises (t54 t57))
(step t59 (cl (= (= e0 (op e2 (op e2 e0))) (= e0 (op e2 (op e2 e0))))) :rule refl)
(step t60 (cl (= (op e2 e0) (op e2 e0))) :rule refl)
(step t61 (cl (= (= unit (op e2 e0)) (= e0 (op e2 e0)))) :rule cong :premises (a11 t60))
(step t62 (cl (= (not (= unit (op e2 e0))) (not (= e0 (op e2 e0))))) :rule cong :premises (t61))
(step t63 (cl (= (and (= e0 (op e2 (op e2 e0))) (not (= unit (op e2 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))))) :rule cong :premises (t59 t62))
(step t64 (cl (= (= e0 (op e0 (op e0 e0))) (= e0 (op e0 (op e0 e0))))) :rule refl)
(step t65 (cl (= (op e0 e0) (op e0 e0))) :rule refl)
(step t66 (cl (= (= unit (op e0 e0)) (= e0 (op e0 e0)))) :rule cong :premises (a11 t65))
(step t67 (cl (= (not (= unit (op e0 e0))) (not (= e0 (op e0 e0))))) :rule cong :premises (t66))
(step t68 (cl (= (and (= e0 (op e0 (op e0 e0))) (not (= unit (op e0 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))))) :rule cong :premises (t64 t67))
(step t69 (cl (= (= e0 (op e1 (op e1 e0))) (= e0 (op e1 (op e1 e0))))) :rule refl)
(step t70 (cl (= (op e1 e0) (op e1 e0))) :rule refl)
(step t71 (cl (= (= unit (op e1 e0)) (= e0 (op e1 e0)))) :rule cong :premises (a11 t70))
(step t72 (cl (= (not (= unit (op e1 e0))) (not (= e0 (op e1 e0))))) :rule cong :premises (t71))
(step t73 (cl (= (and (= e0 (op e1 (op e1 e0))) (not (= unit (op e1 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))))) :rule cong :premises (t69 t72))
(step t74 (cl (= (or (and (= e0 (op e5 (op e5 e0))) (not (= unit (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= unit (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= unit (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= unit (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= unit (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= unit (op e1 e0))))) (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))))) :rule cong :premises (t48 t53 t58 t63 t68 t73))
(step t75 (cl (= (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))))) :rule trans :premises (t43 t74))
(step t76 (cl (and (and (and (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e3)) e3) (not (= (op e0 e3) unit))) (and (= (op e1 (op e1 e3)) e3) (not (= (op e1 e3) unit)))) (and (= (op e2 (op e2 e3)) e3) (not (= (op e2 e3) unit)))) (and (= (op e3 (op e3 e3)) e3) (not (= (op e3 e3) unit)))) (and (= (op e4 (op e4 e3)) e3) (not (= (op e4 e3) unit)))) (and (= (op e5 (op e5 e3)) e3) (not (= (op e5 e3) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e4)) e4) (not (= (op e0 e4) unit))) (and (= (op e1 (op e1 e4)) e4) (not (= (op e1 e4) unit)))) (and (= (op e2 (op e2 e4)) e4) (not (= (op e2 e4) unit)))) (and (= (op e3 (op e3 e4)) e4) (not (= (op e3 e4) unit)))) (and (= (op e4 (op e4 e4)) e4) (not (= (op e4 e4) unit)))) (and (= (op e5 (op e5 e4)) e4) (not (= (op e5 e4) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e5)) e5) (not (= (op e0 e5) unit))) (and (= (op e1 (op e1 e5)) e5) (not (= (op e1 e5) unit)))) (and (= (op e2 (op e2 e5)) e5) (not (= (op e2 e5) unit)))) (and (= (op e3 (op e3 e5)) e5) (not (= (op e3 e5) unit)))) (and (= (op e4 (op e4 e5)) e5) (not (= (op e4 e5) unit)))) (and (= (op e5 (op e5 e5)) e5) (not (= (op e5 e5) unit)))))) :rule and :premises (a10) :args (1))
(step t77 (cl (and (and (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e3)) e3) (not (= (op e0 e3) unit))) (and (= (op e1 (op e1 e3)) e3) (not (= (op e1 e3) unit)))) (and (= (op e2 (op e2 e3)) e3) (not (= (op e2 e3) unit)))) (and (= (op e3 (op e3 e3)) e3) (not (= (op e3 e3) unit)))) (and (= (op e4 (op e4 e3)) e3) (not (= (op e4 e3) unit)))) (and (= (op e5 (op e5 e3)) e3) (not (= (op e5 e3) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e4)) e4) (not (= (op e0 e4) unit))) (and (= (op e1 (op e1 e4)) e4) (not (= (op e1 e4) unit)))) (and (= (op e2 (op e2 e4)) e4) (not (= (op e2 e4) unit)))) (and (= (op e3 (op e3 e4)) e4) (not (= (op e3 e4) unit)))) (and (= (op e4 (op e4 e4)) e4) (not (= (op e4 e4) unit)))) (and (= (op e5 (op e5 e4)) e4) (not (= (op e5 e4) unit)))))) :rule and :premises (t76) :args (0))
(step t78 (cl (and (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e3)) e3) (not (= (op e0 e3) unit))) (and (= (op e1 (op e1 e3)) e3) (not (= (op e1 e3) unit)))) (and (= (op e2 (op e2 e3)) e3) (not (= (op e2 e3) unit)))) (and (= (op e3 (op e3 e3)) e3) (not (= (op e3 e3) unit)))) (and (= (op e4 (op e4 e3)) e3) (not (= (op e4 e3) unit)))) (and (= (op e5 (op e5 e3)) e3) (not (= (op e5 e3) unit)))))) :rule and :premises (t77) :args (0))
(step t79 (cl (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit)))))) :rule and :premises (t78) :args (0))
(step t80 (cl (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit)))))) :rule and :premises (t79) :args (0))
(step t81 (cl (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))))) :rule and :premises (t80) :args (0))
(step t82 (cl (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))))) :rule resolution :premises (t16 t75 t81))
(step t83 (cl (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))) :rule or :premises (t82))
(step t84 (cl (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0))))) :rule reordering :premises (t83))
(step t85 (cl (not (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0))))) (not (= e0 (op e0 e0)))) :rule and_pos :args (1))
(step t86 (cl (not (= e0 (op e0 e0))) (not (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))))) :rule reordering :premises (t85))
(step t87 (cl (not (= (= (op unit e0) e0) (= e0 (op e0 e0)))) (not (= (op unit e0) e0)) (= e0 (op e0 e0))) :rule equiv_pos2)
(step t88 (cl (= (= (op unit e0) e0) (= e0 (op unit e0)))) :rule rare_rewrite :args ("eq-symm" (op unit e0) e0))
(step t89 (cl (= e0 e0)) :rule refl)
(step t90 (cl (= (op unit e0) (op e0 e0))) :rule cong :premises (a11 t89))
(step t91 (cl (= (= e0 (op unit e0)) (= e0 (op e0 e0)))) :rule cong :premises (t89 t90))
(step t92 (cl (= (= (op unit e0) e0) (= e0 (op e0 e0)))) :rule trans :premises (t88 t91))
(step t93 (cl (and (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4))) (and (= (op unit e5) e5) (= (op e5 unit) e5)))) :rule and :premises (a2) :args (0))
(step t94 (cl (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4)))) :rule and :premises (t93) :args (0))
(step t95 (cl (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3)))) :rule and :premises (t94) :args (0))
(step t96 (cl (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2)))) :rule and :premises (t95) :args (0))
(step t97 (cl (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1)))) :rule and :premises (t96) :args (0))
(step t98 (cl (and (= (op unit e0) e0) (= (op e0 unit) e0))) :rule and :premises (t97) :args (0))
(step t99 (cl (= (op unit e0) e0)) :rule and :premises (t98) :args (0))
(step t100 (cl (= e0 (op e0 e0))) :rule resolution :premises (t87 t92 t99))
(step t101 (cl (not (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))))) :rule resolution :premises (t86 t100))
(step t102 (cl (not (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0))))) (= e0 (op e2 (op e2 e0)))) :rule and_pos :args (0))
(step t103 (cl (= e0 (op e2 (op e2 e0))) (not (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))))) :rule reordering :premises (t102))
(step t104 (cl (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (not (= e2 (op e2 e0))) (not (= e0 (op e2 (op e2 e0))))) :rule and_neg)
(step t105 (cl (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) :rule implies_neg1)
(anchor :step t106)
(assume t106.a0 (= e2 (op e2 e0)))
(assume t106.a1 (= e0 (op e2 (op e2 e0))))
(step t106.t0 (cl (not (= (= (op e2 unit) e2) (= e2 (op e2 e0)))) (not (= (op e2 unit) e2)) (= e2 (op e2 e0))) :rule equiv_pos2)
(step t106.t1 (cl (= (= (op e2 unit) e2) (= e2 (op e2 unit)))) :rule rare_rewrite :args ("eq-symm" (op e2 unit) e2))
(step t106.t2 (cl (= e2 e2)) :rule refl)
(step t106.t3 (cl (= (op e2 unit) (op e2 e0))) :rule cong :premises (t106.t2 a11))
(step t106.t4 (cl (= (= e2 (op e2 unit)) (= e2 (op e2 e0)))) :rule cong :premises (t106.t2 t106.t3))
(step t106.t5 (cl (= (= (op e2 unit) e2) (= e2 (op e2 e0)))) :rule trans :premises (t106.t1 t106.t4))
(step t106.t6 (cl (and (= (op unit e2) e2) (= (op e2 unit) e2))) :rule and :premises (t96) :args (1))
(step t106.t7 (cl (= (op e2 unit) e2)) :rule and :premises (t106.t6) :args (1))
(step t106.t8 (cl (= e2 (op e2 e0))) :rule resolution :premises (t106.t0 t106.t5 t106.t7))
(step t106.t9 (cl (= (op e2 (op e2 e0)) e0)) :rule symm :premises (t106.a1))
(step t106.t10 (cl (= e0 (op e2 (op e2 e0)))) :rule symm :premises (t106.t9))
(step t106.t11 (cl (= (op e2 e0) e2)) :rule symm :premises (t106.t8))
(step t106.t12 (cl (= (op e2 (op e2 e0)) (op e2 e2))) :rule cong :premises (t106.t2 t106.t11))
(step t106.t13 (cl (= e0 (op e2 e2))) :rule trans :premises (t106.t10 t106.t12))
(step t106.t14 (cl (= (op e2 e0) (op e2 (op e2 e2)))) :rule cong :premises (t106.t2 t106.t13))
(step t106.t15 (cl (= e2 (op e2 (op e2 e2)))) :rule trans :premises (t106.t8 t106.t14))
(step t106 (cl (not (= e2 (op e2 e0))) (not (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) :rule subproof :discharge (t106.a0 t106.a1))
(step t107 (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e2 (op e2 e0))) :rule and_pos :args (0))
(step t108 (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e0 (op e2 (op e2 e0)))) :rule and_pos :args (1))
(step t109 (cl (= e2 (op e2 (op e2 e2))) (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))))) :rule resolution :premises (t106 t107 t108))
(step t110 (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e2 (op e2 (op e2 e2)))) :rule reordering :premises (t109))
(step t111 (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e2 (op e2 (op e2 e2)))) :rule contraction :premises (t110))
(step t112 (cl (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) (= e2 (op e2 (op e2 e2)))) :rule resolution :premises (t105 t111))
(step t113 (cl (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) (not (= e2 (op e2 (op e2 e2))))) :rule implies_neg2)
(step t114 (cl (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2))))) :rule resolution :premises (t112 t113))
(step t115 (cl (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2))))) :rule contraction :premises (t114))
(step t116 (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e2 (op e2 (op e2 e2)))) :rule implies :premises (t115))
(step t117 (cl (not (= e2 (op e2 e0))) (not (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) :rule resolution :premises (t104 t116))
(step t118 (cl (not (= e2 (op e2 e0))) (= e2 (op e2 (op e2 e2))) (not (= e0 (op e2 (op e2 e0))))) :rule reordering :premises (t117))
(step t119 (cl (not (= (= (op e2 unit) e2) (= e2 (op e2 e0)))) (not (= (op e2 unit) e2)) (= e2 (op e2 e0))) :rule equiv_pos2)
(step t120 (cl (= (= (op e2 unit) e2) (= e2 (op e2 unit)))) :rule rare_rewrite :args ("eq-symm" (op e2 unit) e2))
(step t121 (cl (= e2 e2)) :rule refl)
(step t122 (cl (= (op e2 unit) (op e2 e0))) :rule cong :premises (t121 a11))
(step t123 (cl (= (= e2 (op e2 unit)) (= e2 (op e2 e0)))) :rule cong :premises (t121 t122))
(step t124 (cl (= (= (op e2 unit) e2) (= e2 (op e2 e0)))) :rule trans :premises (t120 t123))
(step t125 (cl (and (= (op unit e2) e2) (= (op e2 unit) e2))) :rule and :premises (t96) :args (1))
(step t126 (cl (= (op e2 unit) e2)) :rule and :premises (t125) :args (1))
(step t127 (cl (= e2 (op e2 e0))) :rule resolution :premises (t119 t124 t126))
(step t128 (cl (not (= (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit)) (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0)))) (not (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0))) :rule equiv_pos2)
(step t129 (cl (= (= (op e2 (op e2 e2)) e2) (= e2 (op e2 (op e2 e2))))) :rule rare_rewrite :args ("eq-symm" (op e2 (op e2 e2)) e2))
(step t130 (cl (= (not (= (op e2 (op e2 e2)) e2)) (not (= e2 (op e2 (op e2 e2)))))) :rule cong :premises (t129))
(step t131 (cl (= (= e2 unit) (= unit e2))) :rule rare_rewrite :args ("eq-symm" e2 unit))
(step t132 (cl (= (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit)) (or (not (= e2 (op e2 (op e2 e2)))) (= unit e2)))) :rule cong :premises (t130 t131))
(step t133 (cl (= (not (= e2 (op e2 (op e2 e2)))) (not (= e2 (op e2 (op e2 e2)))))) :rule refl)
(step t134 (cl (= (= unit e2) (= e0 e2))) :rule cong :premises (a11 t121))
(step t135 (cl (= (or (not (= e2 (op e2 (op e2 e2)))) (= unit e2)) (or (not (= e2 (op e2 (op e2 e2)))) (= e0 e2)))) :rule cong :premises (t133 t134))
(step t136 (cl (= (= e0 e2) (= e2 e0))) :rule rare_rewrite :args ("eq-symm" e0 e2))
(step t137 (cl (= (or (not (= e2 (op e2 (op e2 e2)))) (= e0 e2)) (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0)))) :rule cong :premises (t133 t136))
(step t138 (cl (= (or (not (= e2 (op e2 (op e2 e2)))) (= unit e2)) (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0)))) :rule trans :premises (t135 t137))
(step t139 (cl (= (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit)) (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0)))) :rule trans :premises (t132 t138))
(step t140 (cl (and (and (and (and (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit))) (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit))) (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit)))) :rule and :premises (a10) :args (0))
(step t141 (cl (and (and (and (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit))) (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit)))) :rule and :premises (t140) :args (0))
(step t142 (cl (and (and (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit)))) :rule and :premises (t141) :args (0))
(step t143 (cl (and (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit)))) :rule and :premises (t142) :args (0))
(step t144 (cl (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) :rule and :premises (t143) :args (1))
(step t145 (cl (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0))) :rule resolution :premises (t128 t139 t144))
(step t146 (cl (not (= e2 (op e2 (op e2 e2)))) (= e2 e0)) :rule or :premises (t145))
(step t147 (cl (= e2 e0) (not (= e2 (op e2 (op e2 e2))))) :rule reordering :premises (t146))
(step t148 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3))) (not (= e2 e4))) (not (= e2 e5))) (not (= e3 e4))) (not (= e3 e5)))) :rule and :premises (a13) :args (0))
(step t149 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3))) (not (= e2 e4))) (not (= e2 e5))) (not (= e3 e4)))) :rule and :premises (t148) :args (0))
(step t150 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3))) (not (= e2 e4))) (not (= e2 e5)))) :rule and :premises (t149) :args (0))
(step t151 (cl (and (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3))) (not (= e2 e4)))) :rule and :premises (t150) :args (0))
(step t152 (cl (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3)))) :rule and :premises (t151) :args (0))
(step t153 (cl (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5)))) :rule and :premises (t152) :args (0))
(step t154 (cl (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4)))) :rule and :premises (t153) :args (0))
(step t155 (cl (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3)))) :rule and :premises (t154) :args (0))
(step t156 (cl (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2)))) :rule and :premises (t155) :args (0))
(step t157 (cl (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5)))) :rule and :premises (t156) :args (0))
(step t158 (cl (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4)))) :rule and :premises (t157) :args (0))
(step t159 (cl (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3)))) :rule and :premises (t158) :args (0))
(step t160 (cl (and (not (= e0 e1)) (not (= e0 e2)))) :rule and :premises (t159) :args (0))
(step t161 (cl (not (= e0 e2))) :rule and :premises (t160) :args (1))
(step t162 (cl (not (= e2 e0))) :rule not_symm :premises (t161))
(step t163 (cl (not (= e2 (op e2 (op e2 e2))))) :rule resolution :premises (t147 t162))
(step t164 (cl (not (= e0 (op e2 (op e2 e0))))) :rule resolution :premises (t118 t127 t163))
(step t165 (cl (not (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))))) :rule resolution :premises (t103 t164))
(step t166 (cl (not (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0))))) (= e0 (op e3 (op e3 e0)))) :rule and_pos :args (0))
(step t167 (cl (= e0 (op e3 (op e3 e0))) (not (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))))) :rule reordering :premises (t166))
(step t168 (cl (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0))))) :rule and_neg)
(step t169 (cl (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) :rule implies_neg1)
(anchor :step t170)
(assume t170.a0 (= e3 (op e3 e0)))
(assume t170.a1 (= e0 (op e3 (op e3 e0))))
(step t170.t0 (cl (not (= (= (op e3 unit) e3) (= e3 (op e3 e0)))) (not (= (op e3 unit) e3)) (= e3 (op e3 e0))) :rule equiv_pos2)
(step t170.t1 (cl (= (= (op e3 unit) e3) (= e3 (op e3 unit)))) :rule rare_rewrite :args ("eq-symm" (op e3 unit) e3))
(step t170.t2 (cl (= e3 e3)) :rule refl)
(step t170.t3 (cl (= (op e3 unit) (op e3 e0))) :rule cong :premises (t170.t2 a11))
(step t170.t4 (cl (= (= e3 (op e3 unit)) (= e3 (op e3 e0)))) :rule cong :premises (t170.t2 t170.t3))
(step t170.t5 (cl (= (= (op e3 unit) e3) (= e3 (op e3 e0)))) :rule trans :premises (t170.t1 t170.t4))
(step t170.t6 (cl (and (= (op unit e3) e3) (= (op e3 unit) e3))) :rule and :premises (t95) :args (1))
(step t170.t7 (cl (= (op e3 unit) e3)) :rule and :premises (t170.t6) :args (1))
(step t170.t8 (cl (= e3 (op e3 e0))) :rule resolution :premises (t170.t0 t170.t5 t170.t7))
(step t170.t9 (cl (= (op e3 (op e3 e0)) e0)) :rule symm :premises (t170.a1))
(step t170.t10 (cl (= e0 (op e3 (op e3 e0)))) :rule symm :premises (t170.t9))
(step t170.t11 (cl (= (op e3 e0) e3)) :rule symm :premises (t170.t8))
(step t170.t12 (cl (= (op e3 (op e3 e0)) (op e3 e3))) :rule cong :premises (t170.t2 t170.t11))
(step t170.t13 (cl (= e0 (op e3 e3))) :rule trans :premises (t170.t10 t170.t12))
(step t170.t14 (cl (= (op e3 e0) (op e3 (op e3 e3)))) :rule cong :premises (t170.t2 t170.t13))
(step t170.t15 (cl (= e3 (op e3 (op e3 e3)))) :rule trans :premises (t170.t8 t170.t14))
(step t170 (cl (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) :rule subproof :discharge (t170.a0 t170.a1))
(step t171 (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 e0))) :rule and_pos :args (0))
(step t172 (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e0 (op e3 (op e3 e0)))) :rule and_pos :args (1))
(step t173 (cl (= e3 (op e3 (op e3 e3))) (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))))) :rule resolution :premises (t170 t171 t172))
(step t174 (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 (op e3 e3)))) :rule reordering :premises (t173))
(step t175 (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 (op e3 e3)))) :rule contraction :premises (t174))
(step t176 (cl (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) (= e3 (op e3 (op e3 e3)))) :rule resolution :premises (t169 t175))
(step t177 (cl (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) (not (= e3 (op e3 (op e3 e3))))) :rule implies_neg2)
(step t178 (cl (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3))))) :rule resolution :premises (t176 t177))
(step t179 (cl (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3))))) :rule contraction :premises (t178))
(step t180 (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 (op e3 e3)))) :rule implies :premises (t179))
(step t181 (cl (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) :rule resolution :premises (t168 t180))
(step t182 (cl (not (= e3 (op e3 e0))) (= e3 (op e3 (op e3 e3))) (not (= e0 (op e3 (op e3 e0))))) :rule reordering :premises (t181))
(step t183 (cl (not (= (= (op e3 unit) e3) (= e3 (op e3 e0)))) (not (= (op e3 unit) e3)) (= e3 (op e3 e0))) :rule equiv_pos2)
(step t184 (cl (= (= (op e3 unit) e3) (= e3 (op e3 unit)))) :rule rare_rewrite :args ("eq-symm" (op e3 unit) e3))
(step t185 (cl (= e3 e3)) :rule refl)
(step t186 (cl (= (op e3 unit) (op e3 e0))) :rule cong :premises (t185 a11))
(step t187 (cl (= (= e3 (op e3 unit)) (= e3 (op e3 e0)))) :rule cong :premises (t185 t186))
(step t188 (cl (= (= (op e3 unit) e3) (= e3 (op e3 e0)))) :rule trans :premises (t184 t187))
(step t189 (cl (and (= (op unit e3) e3) (= (op e3 unit) e3))) :rule and :premises (t95) :args (1))
(step t190 (cl (= (op e3 unit) e3)) :rule and :premises (t189) :args (1))
(step t191 (cl (= e3 (op e3 e0))) :rule resolution :premises (t183 t188 t190))
(step t192 (cl (not (= (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit)) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0)))) (not (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit))) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0))) :rule equiv_pos2)
(step t193 (cl (= (= (op e3 (op e3 e3)) e3) (= e3 (op e3 (op e3 e3))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op e3 e3)) e3))
(step t194 (cl (= (not (= (op e3 (op e3 e3)) e3)) (not (= e3 (op e3 (op e3 e3)))))) :rule cong :premises (t193))
(step t195 (cl (= (= e3 unit) (= unit e3))) :rule rare_rewrite :args ("eq-symm" e3 unit))
(step t196 (cl (= (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit)) (or (not (= e3 (op e3 (op e3 e3)))) (= unit e3)))) :rule cong :premises (t194 t195))
(step t197 (cl (= (not (= e3 (op e3 (op e3 e3)))) (not (= e3 (op e3 (op e3 e3)))))) :rule refl)
(step t198 (cl (= (= unit e3) (= e0 e3))) :rule cong :premises (a11 t185))
(step t199 (cl (= (or (not (= e3 (op e3 (op e3 e3)))) (= unit e3)) (or (not (= e3 (op e3 (op e3 e3)))) (= e0 e3)))) :rule cong :premises (t197 t198))
(step t200 (cl (= (= e0 e3) (= e3 e0))) :rule rare_rewrite :args ("eq-symm" e0 e3))
(step t201 (cl (= (or (not (= e3 (op e3 (op e3 e3)))) (= e0 e3)) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0)))) :rule cong :premises (t197 t200))
(step t202 (cl (= (or (not (= e3 (op e3 (op e3 e3)))) (= unit e3)) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0)))) :rule trans :premises (t199 t201))
(step t203 (cl (= (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit)) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0)))) :rule trans :premises (t196 t202))
(step t204 (cl (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit))) :rule and :premises (t142) :args (1))
(step t205 (cl (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0))) :rule resolution :premises (t192 t203 t204))
(step t206 (cl (not (= e3 (op e3 (op e3 e3)))) (= e3 e0)) :rule or :premises (t205))
(step t207 (cl (= e3 e0) (not (= e3 (op e3 (op e3 e3))))) :rule reordering :premises (t206))
(step t208 (cl (not (= e0 e3))) :rule and :premises (t159) :args (1))
(step t209 (cl (not (= e3 e0))) :rule not_symm :premises (t208))
(step t210 (cl (not (= e3 (op e3 (op e3 e3))))) :rule resolution :premises (t207 t209))
(step t211 (cl (not (= e0 (op e3 (op e3 e0))))) :rule resolution :premises (t182 t191 t210))
(step t212 (cl (not (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))))) :rule resolution :premises (t167 t211))
(step t213 (cl (not (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0))))) (= e0 (op e4 (op e4 e0)))) :rule and_pos :args (0))
(step t214 (cl (= e0 (op e4 (op e4 e0))) (not (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))))) :rule reordering :premises (t213))
(step t215 (cl (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (not (= e4 (op e4 e0))) (not (= e0 (op e4 (op e4 e0))))) :rule and_neg)
(step t216 (cl (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) :rule implies_neg1)
(anchor :step t217)
(assume t217.a0 (= e4 (op e4 e0)))
(assume t217.a1 (= e0 (op e4 (op e4 e0))))
(step t217.t0 (cl (not (= (= (op e4 unit) e4) (= e4 (op e4 e0)))) (not (= (op e4 unit) e4)) (= e4 (op e4 e0))) :rule equiv_pos2)
(step t217.t1 (cl (= (= (op e4 unit) e4) (= e4 (op e4 unit)))) :rule rare_rewrite :args ("eq-symm" (op e4 unit) e4))
(step t217.t2 (cl (= e4 e4)) :rule refl)
(step t217.t3 (cl (= (op e4 unit) (op e4 e0))) :rule cong :premises (t217.t2 a11))
(step t217.t4 (cl (= (= e4 (op e4 unit)) (= e4 (op e4 e0)))) :rule cong :premises (t217.t2 t217.t3))
(step t217.t5 (cl (= (= (op e4 unit) e4) (= e4 (op e4 e0)))) :rule trans :premises (t217.t1 t217.t4))
(step t217.t6 (cl (and (= (op unit e4) e4) (= (op e4 unit) e4))) :rule and :premises (t94) :args (1))
(step t217.t7 (cl (= (op e4 unit) e4)) :rule and :premises (t217.t6) :args (1))
(step t217.t8 (cl (= e4 (op e4 e0))) :rule resolution :premises (t217.t0 t217.t5 t217.t7))
(step t217.t9 (cl (= (op e4 (op e4 e0)) e0)) :rule symm :premises (t217.a1))
(step t217.t10 (cl (= e0 (op e4 (op e4 e0)))) :rule symm :premises (t217.t9))
(step t217.t11 (cl (= (op e4 e0) e4)) :rule symm :premises (t217.t8))
(step t217.t12 (cl (= (op e4 (op e4 e0)) (op e4 e4))) :rule cong :premises (t217.t2 t217.t11))
(step t217.t13 (cl (= e0 (op e4 e4))) :rule trans :premises (t217.t10 t217.t12))
(step t217.t14 (cl (= (op e4 e0) (op e4 (op e4 e4)))) :rule cong :premises (t217.t2 t217.t13))
(step t217.t15 (cl (= e4 (op e4 (op e4 e4)))) :rule trans :premises (t217.t8 t217.t14))
(step t217 (cl (not (= e4 (op e4 e0))) (not (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) :rule subproof :discharge (t217.a0 t217.a1))
(step t218 (cl (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (= e4 (op e4 e0))) :rule and_pos :args (0))
(step t219 (cl (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (= e0 (op e4 (op e4 e0)))) :rule and_pos :args (1))
(step t220 (cl (= e4 (op e4 (op e4 e4))) (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))))) :rule resolution :premises (t217 t218 t219))
(step t221 (cl (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (= e4 (op e4 (op e4 e4)))) :rule reordering :premises (t220))
(step t222 (cl (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (= e4 (op e4 (op e4 e4)))) :rule contraction :premises (t221))
(step t223 (cl (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) (= e4 (op e4 (op e4 e4)))) :rule resolution :premises (t216 t222))
(step t224 (cl (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) (not (= e4 (op e4 (op e4 e4))))) :rule implies_neg2)
(step t225 (cl (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4))))) :rule resolution :premises (t223 t224))
(step t226 (cl (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4))))) :rule contraction :premises (t225))
(step t227 (cl (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (= e4 (op e4 (op e4 e4)))) :rule implies :premises (t226))
(step t228 (cl (not (= e4 (op e4 e0))) (not (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) :rule resolution :premises (t215 t227))
(step t229 (cl (not (= e4 (op e4 e0))) (= e4 (op e4 (op e4 e4))) (not (= e0 (op e4 (op e4 e0))))) :rule reordering :premises (t228))
(step t230 (cl (not (= (= (op e4 unit) e4) (= e4 (op e4 e0)))) (not (= (op e4 unit) e4)) (= e4 (op e4 e0))) :rule equiv_pos2)
(step t231 (cl (= (= (op e4 unit) e4) (= e4 (op e4 unit)))) :rule rare_rewrite :args ("eq-symm" (op e4 unit) e4))
(step t232 (cl (= e4 e4)) :rule refl)
(step t233 (cl (= (op e4 unit) (op e4 e0))) :rule cong :premises (t232 a11))
(step t234 (cl (= (= e4 (op e4 unit)) (= e4 (op e4 e0)))) :rule cong :premises (t232 t233))
(step t235 (cl (= (= (op e4 unit) e4) (= e4 (op e4 e0)))) :rule trans :premises (t231 t234))
(step t236 (cl (and (= (op unit e4) e4) (= (op e4 unit) e4))) :rule and :premises (t94) :args (1))
(step t237 (cl (= (op e4 unit) e4)) :rule and :premises (t236) :args (1))
(step t238 (cl (= e4 (op e4 e0))) :rule resolution :premises (t230 t235 t237))
(step t239 (cl (not (= (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit)) (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0)))) (not (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit))) (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0))) :rule equiv_pos2)
(step t240 (cl (= (= (op e4 (op e4 e4)) e4) (= e4 (op e4 (op e4 e4))))) :rule rare_rewrite :args ("eq-symm" (op e4 (op e4 e4)) e4))
(step t241 (cl (= (not (= (op e4 (op e4 e4)) e4)) (not (= e4 (op e4 (op e4 e4)))))) :rule cong :premises (t240))
(step t242 (cl (= (= e4 unit) (= unit e4))) :rule rare_rewrite :args ("eq-symm" e4 unit))
(step t243 (cl (= (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit)) (or (not (= e4 (op e4 (op e4 e4)))) (= unit e4)))) :rule cong :premises (t241 t242))
(step t244 (cl (= (not (= e4 (op e4 (op e4 e4)))) (not (= e4 (op e4 (op e4 e4)))))) :rule refl)
(step t245 (cl (= (= unit e4) (= e0 e4))) :rule cong :premises (a11 t232))
(step t246 (cl (= (or (not (= e4 (op e4 (op e4 e4)))) (= unit e4)) (or (not (= e4 (op e4 (op e4 e4)))) (= e0 e4)))) :rule cong :premises (t244 t245))
(step t247 (cl (= (= e0 e4) (= e4 e0))) :rule rare_rewrite :args ("eq-symm" e0 e4))
(step t248 (cl (= (or (not (= e4 (op e4 (op e4 e4)))) (= e0 e4)) (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0)))) :rule cong :premises (t244 t247))
(step t249 (cl (= (or (not (= e4 (op e4 (op e4 e4)))) (= unit e4)) (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0)))) :rule trans :premises (t246 t248))
(step t250 (cl (= (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit)) (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0)))) :rule trans :premises (t243 t249))
(step t251 (cl (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit))) :rule and :premises (t141) :args (1))
(step t252 (cl (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0))) :rule resolution :premises (t239 t250 t251))
(step t253 (cl (not (= e4 (op e4 (op e4 e4)))) (= e4 e0)) :rule or :premises (t252))
(step t254 (cl (= e4 e0) (not (= e4 (op e4 (op e4 e4))))) :rule reordering :premises (t253))
(step t255 (cl (not (= e0 e4))) :rule and :premises (t158) :args (1))
(step t256 (cl (not (= e4 e0))) :rule not_symm :premises (t255))
(step t257 (cl (not (= e4 (op e4 (op e4 e4))))) :rule resolution :premises (t254 t256))
(step t258 (cl (not (= e0 (op e4 (op e4 e0))))) :rule resolution :premises (t229 t238 t257))
(step t259 (cl (not (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))))) :rule resolution :premises (t214 t258))
(step t260 (cl (not (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0))))) (= e0 (op e5 (op e5 e0)))) :rule and_pos :args (0))
(step t261 (cl (= e0 (op e5 (op e5 e0))) (not (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))))) :rule reordering :premises (t260))
(step t262 (cl (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (not (= e5 (op e5 e0))) (not (= e0 (op e5 (op e5 e0))))) :rule and_neg)
(step t263 (cl (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) :rule implies_neg1)
(anchor :step t264)
(assume t264.a0 (= e5 (op e5 e0)))
(assume t264.a1 (= e0 (op e5 (op e5 e0))))
(step t264.t0 (cl (not (= (= (op e5 unit) e5) (= e5 (op e5 e0)))) (not (= (op e5 unit) e5)) (= e5 (op e5 e0))) :rule equiv_pos2)
(step t264.t1 (cl (= (= (op e5 unit) e5) (= e5 (op e5 unit)))) :rule rare_rewrite :args ("eq-symm" (op e5 unit) e5))
(step t264.t2 (cl (= e5 e5)) :rule refl)
(step t264.t3 (cl (= (op e5 unit) (op e5 e0))) :rule cong :premises (t264.t2 a11))
(step t264.t4 (cl (= (= e5 (op e5 unit)) (= e5 (op e5 e0)))) :rule cong :premises (t264.t2 t264.t3))
(step t264.t5 (cl (= (= (op e5 unit) e5) (= e5 (op e5 e0)))) :rule trans :premises (t264.t1 t264.t4))
(step t264.t6 (cl (and (= (op unit e5) e5) (= (op e5 unit) e5))) :rule and :premises (t93) :args (1))
(step t264.t7 (cl (= (op e5 unit) e5)) :rule and :premises (t264.t6) :args (1))
(step t264.t8 (cl (= e5 (op e5 e0))) :rule resolution :premises (t264.t0 t264.t5 t264.t7))
(step t264.t9 (cl (= (op e5 (op e5 e0)) e0)) :rule symm :premises (t264.a1))
(step t264.t10 (cl (= e0 (op e5 (op e5 e0)))) :rule symm :premises (t264.t9))
(step t264.t11 (cl (= (op e5 e0) e5)) :rule symm :premises (t264.t8))
(step t264.t12 (cl (= (op e5 (op e5 e0)) (op e5 e5))) :rule cong :premises (t264.t2 t264.t11))
(step t264.t13 (cl (= e0 (op e5 e5))) :rule trans :premises (t264.t10 t264.t12))
(step t264.t14 (cl (= (op e5 e0) (op e5 (op e5 e5)))) :rule cong :premises (t264.t2 t264.t13))
(step t264.t15 (cl (= e5 (op e5 (op e5 e5)))) :rule trans :premises (t264.t8 t264.t14))
(step t264 (cl (not (= e5 (op e5 e0))) (not (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) :rule subproof :discharge (t264.a0 t264.a1))
(step t265 (cl (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (= e5 (op e5 e0))) :rule and_pos :args (0))
(step t266 (cl (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (= e0 (op e5 (op e5 e0)))) :rule and_pos :args (1))
(step t267 (cl (= e5 (op e5 (op e5 e5))) (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))))) :rule resolution :premises (t264 t265 t266))
(step t268 (cl (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (= e5 (op e5 (op e5 e5)))) :rule reordering :premises (t267))
(step t269 (cl (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (= e5 (op e5 (op e5 e5)))) :rule contraction :premises (t268))
(step t270 (cl (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) (= e5 (op e5 (op e5 e5)))) :rule resolution :premises (t263 t269))
(step t271 (cl (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) (not (= e5 (op e5 (op e5 e5))))) :rule implies_neg2)
(step t272 (cl (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5))))) :rule resolution :premises (t270 t271))
(step t273 (cl (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5))))) :rule contraction :premises (t272))
(step t274 (cl (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (= e5 (op e5 (op e5 e5)))) :rule implies :premises (t273))
(step t275 (cl (not (= e5 (op e5 e0))) (not (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) :rule resolution :premises (t262 t274))
(step t276 (cl (not (= e5 (op e5 e0))) (= e5 (op e5 (op e5 e5))) (not (= e0 (op e5 (op e5 e0))))) :rule reordering :premises (t275))
(step t277 (cl (not (= (= (op e5 unit) e5) (= e5 (op e5 e0)))) (not (= (op e5 unit) e5)) (= e5 (op e5 e0))) :rule equiv_pos2)
(step t278 (cl (= (= (op e5 unit) e5) (= e5 (op e5 unit)))) :rule rare_rewrite :args ("eq-symm" (op e5 unit) e5))
(step t279 (cl (= e5 e5)) :rule refl)
(step t280 (cl (= (op e5 unit) (op e5 e0))) :rule cong :premises (t279 a11))
(step t281 (cl (= (= e5 (op e5 unit)) (= e5 (op e5 e0)))) :rule cong :premises (t279 t280))
(step t282 (cl (= (= (op e5 unit) e5) (= e5 (op e5 e0)))) :rule trans :premises (t278 t281))
(step t283 (cl (and (= (op unit e5) e5) (= (op e5 unit) e5))) :rule and :premises (t93) :args (1))
(step t284 (cl (= (op e5 unit) e5)) :rule and :premises (t283) :args (1))
(step t285 (cl (= e5 (op e5 e0))) :rule resolution :premises (t277 t282 t284))
(step t286 (cl (not (= (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit)) (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0)))) (not (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit))) (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0))) :rule equiv_pos2)
(step t287 (cl (= (= (op e5 (op e5 e5)) e5) (= e5 (op e5 (op e5 e5))))) :rule rare_rewrite :args ("eq-symm" (op e5 (op e5 e5)) e5))
(step t288 (cl (= (not (= (op e5 (op e5 e5)) e5)) (not (= e5 (op e5 (op e5 e5)))))) :rule cong :premises (t287))
(step t289 (cl (= (= e5 unit) (= unit e5))) :rule rare_rewrite :args ("eq-symm" e5 unit))
(step t290 (cl (= (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit)) (or (not (= e5 (op e5 (op e5 e5)))) (= unit e5)))) :rule cong :premises (t288 t289))
(step t291 (cl (= (not (= e5 (op e5 (op e5 e5)))) (not (= e5 (op e5 (op e5 e5)))))) :rule refl)
(step t292 (cl (= (= unit e5) (= e0 e5))) :rule cong :premises (a11 t279))
(step t293 (cl (= (or (not (= e5 (op e5 (op e5 e5)))) (= unit e5)) (or (not (= e5 (op e5 (op e5 e5)))) (= e0 e5)))) :rule cong :premises (t291 t292))
(step t294 (cl (= (= e0 e5) (= e5 e0))) :rule rare_rewrite :args ("eq-symm" e0 e5))
(step t295 (cl (= (or (not (= e5 (op e5 (op e5 e5)))) (= e0 e5)) (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0)))) :rule cong :premises (t291 t294))
(step t296 (cl (= (or (not (= e5 (op e5 (op e5 e5)))) (= unit e5)) (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0)))) :rule trans :premises (t293 t295))
(step t297 (cl (= (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit)) (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0)))) :rule trans :premises (t290 t296))
(step t298 (cl (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit))) :rule and :premises (t140) :args (1))
(step t299 (cl (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0))) :rule resolution :premises (t286 t297 t298))
(step t300 (cl (not (= e5 (op e5 (op e5 e5)))) (= e5 e0)) :rule or :premises (t299))
(step t301 (cl (= e5 e0) (not (= e5 (op e5 (op e5 e5))))) :rule reordering :premises (t300))
(step t302 (cl (not (= e0 e5))) :rule and :premises (t157) :args (1))
(step t303 (cl (not (= e5 e0))) :rule not_symm :premises (t302))
(step t304 (cl (not (= e5 (op e5 (op e5 e5))))) :rule resolution :premises (t301 t303))
(step t305 (cl (not (= e0 (op e5 (op e5 e0))))) :rule resolution :premises (t276 t285 t304))
(step t306 (cl (not (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))))) :rule resolution :premises (t261 t305))
(step t307 (cl (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))) :rule resolution :premises (t84 t101 t165 t212 t259 t306))
(step t308 (cl (= e0 (op e1 (op e1 e0)))) :rule resolution :premises (t15 t307))
(step t309 (cl (not (= (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit)) (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0)))) (not (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0))) :rule equiv_pos2)
(step t310 (cl (= (= (op e1 (op e1 e1)) e1) (= e1 (op e1 (op e1 e1))))) :rule rare_rewrite :args ("eq-symm" (op e1 (op e1 e1)) e1))
(step t311 (cl (= (not (= (op e1 (op e1 e1)) e1)) (not (= e1 (op e1 (op e1 e1)))))) :rule cong :premises (t310))
(step t312 (cl (= (= e1 unit) (= unit e1))) :rule rare_rewrite :args ("eq-symm" e1 unit))
(step t313 (cl (= (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit)) (or (not (= e1 (op e1 (op e1 e1)))) (= unit e1)))) :rule cong :premises (t311 t312))
(step t314 (cl (= (not (= e1 (op e1 (op e1 e1)))) (not (= e1 (op e1 (op e1 e1)))))) :rule refl)
(step t315 (cl (= e1 e1)) :rule refl)
(step t316 (cl (= (= unit e1) (= e0 e1))) :rule cong :premises (a11 t315))
(step t317 (cl (= (or (not (= e1 (op e1 (op e1 e1)))) (= unit e1)) (or (not (= e1 (op e1 (op e1 e1)))) (= e0 e1)))) :rule cong :premises (t314 t316))
(step t318 (cl (= (= e0 e1) (= e1 e0))) :rule rare_rewrite :args ("eq-symm" e0 e1))
(step t319 (cl (= (or (not (= e1 (op e1 (op e1 e1)))) (= e0 e1)) (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0)))) :rule cong :premises (t314 t318))
(step t320 (cl (= (or (not (= e1 (op e1 (op e1 e1)))) (= unit e1)) (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0)))) :rule trans :premises (t317 t319))
(step t321 (cl (= (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit)) (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0)))) :rule trans :premises (t313 t320))
(step t322 (cl (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit)))) :rule and :premises (t143) :args (0))
(step t323 (cl (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) :rule and :premises (t322) :args (1))
(step t324 (cl (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0))) :rule resolution :premises (t309 t321 t323))
(step t325 (cl (not (= e1 (op e1 (op e1 e1)))) (= e1 e0)) :rule or :premises (t324))
(step t326 (cl (= e1 e0) (not (= e1 (op e1 (op e1 e1))))) :rule reordering :premises (t325))
(step t327 (cl (not (= e0 e1))) :rule and :premises (t160) :args (0))
(step t328 (cl (not (= e1 e0))) :rule not_symm :premises (t327))
(step t329 (cl (not (= e1 (op e1 (op e1 e1))))) :rule resolution :premises (t326 t328))
(step t330 (cl (not (= (= (op e1 unit) e1) (= e1 (op e1 e0)))) (not (= (op e1 unit) e1)) (= e1 (op e1 e0))) :rule equiv_pos2)
(step t331 (cl (= (= (op e1 unit) e1) (= e1 (op e1 unit)))) :rule rare_rewrite :args ("eq-symm" (op e1 unit) e1))
(step t332 (cl (= (op e1 unit) (op e1 e0))) :rule cong :premises (t315 a11))
(step t333 (cl (= (= e1 (op e1 unit)) (= e1 (op e1 e0)))) :rule cong :premises (t315 t332))
(step t334 (cl (= (= (op e1 unit) e1) (= e1 (op e1 e0)))) :rule trans :premises (t331 t333))
(step t335 (cl (and (= (op unit e1) e1) (= (op e1 unit) e1))) :rule and :premises (t97) :args (1))
(step t336 (cl (= (op e1 unit) e1)) :rule and :premises (t335) :args (1))
(step t337 (cl (= e1 (op e1 e0))) :rule resolution :premises (t330 t334 t336))
(step t338 (cl) :rule resolution :premises (t13 t308 t329 t337))
