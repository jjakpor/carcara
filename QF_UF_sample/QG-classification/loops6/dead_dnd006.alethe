unsat
(assume a0 (and (and (and (and (and (and (and (and (and (and (or (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (= (op e0 e0) e5)) (or (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4)) (= (op e0 e1) e5))) (or (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4)) (= (op e0 e2) e5))) (or (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (= (op e0 e3) e5))) (or (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)) (= (op e0 e4) e5))) (or (or (or (or (or (= (op e0 e5) e0) (= (op e0 e5) e1)) (= (op e0 e5) e2)) (= (op e0 e5) e3)) (= (op e0 e5) e4)) (= (op e0 e5) e5))) (and (and (and (and (and (or (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (= (op e1 e0) e5)) (or (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4)) (= (op e1 e1) e5))) (or (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4)) (= (op e1 e2) e5))) (or (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4)) (= (op e1 e3) e5))) (or (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)) (= (op e1 e4) e5))) (or (or (or (or (or (= (op e1 e5) e0) (= (op e1 e5) e1)) (= (op e1 e5) e2)) (= (op e1 e5) e3)) (= (op e1 e5) e4)) (= (op e1 e5) e5)))) (and (and (and (and (and (or (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (= (op e2 e0) e5)) (or (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4)) (= (op e2 e1) e5))) (or (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4)) (= (op e2 e2) e5))) (or (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4)) (= (op e2 e3) e5))) (or (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)) (= (op e2 e4) e5))) (or (or (or (or (or (= (op e2 e5) e0) (= (op e2 e5) e1)) (= (op e2 e5) e2)) (= (op e2 e5) e3)) (= (op e2 e5) e4)) (= (op e2 e5) e5)))) (and (and (and (and (and (or (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (= (op e3 e0) e5)) (or (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4)) (= (op e3 e1) e5))) (or (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4)) (= (op e3 e2) e5))) (or (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4)) (= (op e3 e3) e5))) (or (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4)) (= (op e3 e4) e5))) (or (or (or (or (or (= (op e3 e5) e0) (= (op e3 e5) e1)) (= (op e3 e5) e2)) (= (op e3 e5) e3)) (= (op e3 e5) e4)) (= (op e3 e5) e5)))) (and (and (and (and (and (or (or (or (or (or (= (op e4 e0) e0) (= (op e4 e0) e1)) (= (op e4 e0) e2)) (= (op e4 e0) e3)) (= (op e4 e0) e4)) (= (op e4 e0) e5)) (or (or (or (or (or (= (op e4 e1) e0) (= (op e4 e1) e1)) (= (op e4 e1) e2)) (= (op e4 e1) e3)) (= (op e4 e1) e4)) (= (op e4 e1) e5))) (or (or (or (or (or (= (op e4 e2) e0) (= (op e4 e2) e1)) (= (op e4 e2) e2)) (= (op e4 e2) e3)) (= (op e4 e2) e4)) (= (op e4 e2) e5))) (or (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4)) (= (op e4 e3) e5))) (or (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)) (= (op e4 e4) e5))) (or (or (or (or (or (= (op e4 e5) e0) (= (op e4 e5) e1)) (= (op e4 e5) e2)) (= (op e4 e5) e3)) (= (op e4 e5) e4)) (= (op e4 e5) e5)))) (and (and (and (and (and (or (or (or (or (or (= (op e5 e0) e0) (= (op e5 e0) e1)) (= (op e5 e0) e2)) (= (op e5 e0) e3)) (= (op e5 e0) e4)) (= (op e5 e0) e5)) (or (or (or (or (or (= (op e5 e1) e0) (= (op e5 e1) e1)) (= (op e5 e1) e2)) (= (op e5 e1) e3)) (= (op e5 e1) e4)) (= (op e5 e1) e5))) (or (or (or (or (or (= (op e5 e2) e0) (= (op e5 e2) e1)) (= (op e5 e2) e2)) (= (op e5 e2) e3)) (= (op e5 e2) e4)) (= (op e5 e2) e5))) (or (or (or (or (or (= (op e5 e3) e0) (= (op e5 e3) e1)) (= (op e5 e3) e2)) (= (op e5 e3) e3)) (= (op e5 e3) e4)) (= (op e5 e3) e5))) (or (or (or (or (or (= (op e5 e4) e0) (= (op e5 e4) e1)) (= (op e5 e4) e2)) (= (op e5 e4) e3)) (= (op e5 e4) e4)) (= (op e5 e4) e5))) (or (or (or (or (or (= (op e5 e5) e0) (= (op e5 e5) e1)) (= (op e5 e5) e2)) (= (op e5 e5) e3)) (= (op e5 e5) e4)) (= (op e5 e5) e5)))))
(assume a1 (and (and (and (and (and (and (and (and (and (and (and (or (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (= (op e0 e5) e0)) (or (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0)) (= (op e5 e0) e0))) (and (or (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (= (op e0 e5) e1)) (or (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)) (= (op e5 e0) e1)))) (and (or (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (= (op e0 e5) e2)) (or (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)) (= (op e5 e0) e2)))) (and (or (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (= (op e0 e5) e3)) (or (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)) (= (op e5 e0) e3)))) (and (or (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (= (op e0 e5) e4)) (or (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)) (= (op e5 e0) e4)))) (and (or (or (or (or (or (= (op e0 e0) e5) (= (op e0 e1) e5)) (= (op e0 e2) e5)) (= (op e0 e3) e5)) (= (op e0 e4) e5)) (= (op e0 e5) e5)) (or (or (or (or (or (= (op e0 e0) e5) (= (op e1 e0) e5)) (= (op e2 e0) e5)) (= (op e3 e0) e5)) (= (op e4 e0) e5)) (= (op e5 e0) e5)))) (and (and (and (and (and (and (or (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (= (op e1 e5) e0)) (or (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0)) (= (op e5 e1) e0))) (and (or (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (= (op e1 e5) e1)) (or (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)) (= (op e5 e1) e1)))) (and (or (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (= (op e1 e5) e2)) (or (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)) (= (op e5 e1) e2)))) (and (or (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (= (op e1 e5) e3)) (or (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)) (= (op e5 e1) e3)))) (and (or (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (= (op e1 e5) e4)) (or (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)) (= (op e5 e1) e4)))) (and (or (or (or (or (or (= (op e1 e0) e5) (= (op e1 e1) e5)) (= (op e1 e2) e5)) (= (op e1 e3) e5)) (= (op e1 e4) e5)) (= (op e1 e5) e5)) (or (or (or (or (or (= (op e0 e1) e5) (= (op e1 e1) e5)) (= (op e2 e1) e5)) (= (op e3 e1) e5)) (= (op e4 e1) e5)) (= (op e5 e1) e5))))) (and (and (and (and (and (and (or (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (= (op e2 e5) e0)) (or (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (= (op e5 e2) e0))) (and (or (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (= (op e2 e5) e1)) (or (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)) (= (op e5 e2) e1)))) (and (or (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (= (op e2 e5) e2)) (or (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)) (= (op e5 e2) e2)))) (and (or (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (= (op e2 e5) e3)) (or (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)) (= (op e5 e2) e3)))) (and (or (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (= (op e2 e5) e4)) (or (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4)) (= (op e5 e2) e4)))) (and (or (or (or (or (or (= (op e2 e0) e5) (= (op e2 e1) e5)) (= (op e2 e2) e5)) (= (op e2 e3) e5)) (= (op e2 e4) e5)) (= (op e2 e5) e5)) (or (or (or (or (or (= (op e0 e2) e5) (= (op e1 e2) e5)) (= (op e2 e2) e5)) (= (op e3 e2) e5)) (= (op e4 e2) e5)) (= (op e5 e2) e5))))) (and (and (and (and (and (and (or (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (= (op e3 e5) e0)) (or (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0)) (= (op e5 e3) e0))) (and (or (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (= (op e3 e5) e1)) (or (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)) (= (op e5 e3) e1)))) (and (or (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (= (op e3 e5) e2)) (or (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)) (= (op e5 e3) e2)))) (and (or (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (= (op e3 e5) e3)) (or (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)) (= (op e5 e3) e3)))) (and (or (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (= (op e3 e5) e4)) (or (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4)) (= (op e5 e3) e4)))) (and (or (or (or (or (or (= (op e3 e0) e5) (= (op e3 e1) e5)) (= (op e3 e2) e5)) (= (op e3 e3) e5)) (= (op e3 e4) e5)) (= (op e3 e5) e5)) (or (or (or (or (or (= (op e0 e3) e5) (= (op e1 e3) e5)) (= (op e2 e3) e5)) (= (op e3 e3) e5)) (= (op e4 e3) e5)) (= (op e5 e3) e5))))) (and (and (and (and (and (and (or (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (= (op e4 e5) e0)) (or (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0)) (= (op e5 e4) e0))) (and (or (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (= (op e4 e5) e1)) (or (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (= (op e5 e4) e1)))) (and (or (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (= (op e4 e5) e2)) (or (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (= (op e5 e4) e2)))) (and (or (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (= (op e4 e5) e3)) (or (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)) (= (op e5 e4) e3)))) (and (or (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (= (op e4 e5) e4)) (or (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4)) (= (op e5 e4) e4)))) (and (or (or (or (or (or (= (op e4 e0) e5) (= (op e4 e1) e5)) (= (op e4 e2) e5)) (= (op e4 e3) e5)) (= (op e4 e4) e5)) (= (op e4 e5) e5)) (or (or (or (or (or (= (op e0 e4) e5) (= (op e1 e4) e5)) (= (op e2 e4) e5)) (= (op e3 e4) e5)) (= (op e4 e4) e5)) (= (op e5 e4) e5))))) (and (and (and (and (and (and (or (or (or (or (or (= (op e5 e0) e0) (= (op e5 e1) e0)) (= (op e5 e2) e0)) (= (op e5 e3) e0)) (= (op e5 e4) e0)) (= (op e5 e5) e0)) (or (or (or (or (or (= (op e0 e5) e0) (= (op e1 e5) e0)) (= (op e2 e5) e0)) (= (op e3 e5) e0)) (= (op e4 e5) e0)) (= (op e5 e5) e0))) (and (or (or (or (or (or (= (op e5 e0) e1) (= (op e5 e1) e1)) (= (op e5 e2) e1)) (= (op e5 e3) e1)) (= (op e5 e4) e1)) (= (op e5 e5) e1)) (or (or (or (or (or (= (op e0 e5) e1) (= (op e1 e5) e1)) (= (op e2 e5) e1)) (= (op e3 e5) e1)) (= (op e4 e5) e1)) (= (op e5 e5) e1)))) (and (or (or (or (or (or (= (op e5 e0) e2) (= (op e5 e1) e2)) (= (op e5 e2) e2)) (= (op e5 e3) e2)) (= (op e5 e4) e2)) (= (op e5 e5) e2)) (or (or (or (or (or (= (op e0 e5) e2) (= (op e1 e5) e2)) (= (op e2 e5) e2)) (= (op e3 e5) e2)) (= (op e4 e5) e2)) (= (op e5 e5) e2)))) (and (or (or (or (or (or (= (op e5 e0) e3) (= (op e5 e1) e3)) (= (op e5 e2) e3)) (= (op e5 e3) e3)) (= (op e5 e4) e3)) (= (op e5 e5) e3)) (or (or (or (or (or (= (op e0 e5) e3) (= (op e1 e5) e3)) (= (op e2 e5) e3)) (= (op e3 e5) e3)) (= (op e4 e5) e3)) (= (op e5 e5) e3)))) (and (or (or (or (or (or (= (op e5 e0) e4) (= (op e5 e1) e4)) (= (op e5 e2) e4)) (= (op e5 e3) e4)) (= (op e5 e4) e4)) (= (op e5 e5) e4)) (or (or (or (or (or (= (op e0 e5) e4) (= (op e1 e5) e4)) (= (op e2 e5) e4)) (= (op e3 e5) e4)) (= (op e4 e5) e4)) (= (op e5 e5) e4)))) (and (or (or (or (or (or (= (op e5 e0) e5) (= (op e5 e1) e5)) (= (op e5 e2) e5)) (= (op e5 e3) e5)) (= (op e5 e4) e5)) (= (op e5 e5) e5)) (or (or (or (or (or (= (op e0 e5) e5) (= (op e1 e5) e5)) (= (op e2 e5) e5)) (= (op e3 e5) e5)) (= (op e4 e5) e5)) (= (op e5 e5) e5))))))
(assume a2 (and (and (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4))) (and (= (op unit e5) e5) (= (op e5 unit) e5))) (or (or (or (or (or (= unit e0) (= unit e1)) (= unit e2)) (= unit e3)) (= unit e4)) (= unit e5))))
(assume a3 (or (or (or (or (or (or (or (or (or (or (not (= (op e0 e0) (op e0 e0))) (not (= (op e1 e0) (op e0 e1)))) (not (= (op e2 e0) (op e0 e2)))) (not (= (op e3 e0) (op e0 e3)))) (not (= (op e4 e0) (op e0 e4)))) (not (= (op e5 e0) (op e0 e5)))) (or (or (or (or (or (not (= (op e0 e1) (op e1 e0))) (not (= (op e1 e1) (op e1 e1)))) (not (= (op e2 e1) (op e1 e2)))) (not (= (op e3 e1) (op e1 e3)))) (not (= (op e4 e1) (op e1 e4)))) (not (= (op e5 e1) (op e1 e5))))) (or (or (or (or (or (not (= (op e0 e2) (op e2 e0))) (not (= (op e1 e2) (op e2 e1)))) (not (= (op e2 e2) (op e2 e2)))) (not (= (op e3 e2) (op e2 e3)))) (not (= (op e4 e2) (op e2 e4)))) (not (= (op e5 e2) (op e2 e5))))) (or (or (or (or (or (not (= (op e0 e3) (op e3 e0))) (not (= (op e1 e3) (op e3 e1)))) (not (= (op e2 e3) (op e3 e2)))) (not (= (op e3 e3) (op e3 e3)))) (not (= (op e4 e3) (op e3 e4)))) (not (= (op e5 e3) (op e3 e5))))) (or (or (or (or (or (not (= (op e0 e4) (op e4 e0))) (not (= (op e1 e4) (op e4 e1)))) (not (= (op e2 e4) (op e4 e2)))) (not (= (op e3 e4) (op e4 e3)))) (not (= (op e4 e4) (op e4 e4)))) (not (= (op e5 e4) (op e4 e5))))) (or (or (or (or (or (not (= (op e0 e5) (op e5 e0))) (not (= (op e1 e5) (op e5 e1)))) (not (= (op e2 e5) (op e5 e2)))) (not (= (op e3 e5) (op e5 e3)))) (not (= (op e4 e5) (op e5 e4)))) (not (= (op e5 e5) (op e5 e5))))))
(assume a4 (or (or (or (or (or (and (and (and (and (and (not (= (op (op e0 e0) e0) e0)) (not (= (op (op e0 e1) e0) e1))) (not (= (op (op e0 e2) e0) e2))) (not (= (op (op e0 e3) e0) e3))) (not (= (op (op e0 e4) e0) e4))) (not (= (op (op e0 e5) e0) e5))) (and (and (and (and (and (not (= (op (op e1 e0) e1) e0)) (not (= (op (op e1 e1) e1) e1))) (not (= (op (op e1 e2) e1) e2))) (not (= (op (op e1 e3) e1) e3))) (not (= (op (op e1 e4) e1) e4))) (not (= (op (op e1 e5) e1) e5)))) (and (and (and (and (and (not (= (op (op e2 e0) e2) e0)) (not (= (op (op e2 e1) e2) e1))) (not (= (op (op e2 e2) e2) e2))) (not (= (op (op e2 e3) e2) e3))) (not (= (op (op e2 e4) e2) e4))) (not (= (op (op e2 e5) e2) e5)))) (and (and (and (and (and (not (= (op (op e3 e0) e3) e0)) (not (= (op (op e3 e1) e3) e1))) (not (= (op (op e3 e2) e3) e2))) (not (= (op (op e3 e3) e3) e3))) (not (= (op (op e3 e4) e3) e4))) (not (= (op (op e3 e5) e3) e5)))) (and (and (and (and (and (not (= (op (op e4 e0) e4) e0)) (not (= (op (op e4 e1) e4) e1))) (not (= (op (op e4 e2) e4) e2))) (not (= (op (op e4 e3) e4) e3))) (not (= (op (op e4 e4) e4) e4))) (not (= (op (op e4 e5) e4) e5)))) (and (and (and (and (and (not (= (op (op e5 e0) e5) e0)) (not (= (op (op e5 e1) e5) e1))) (not (= (op (op e5 e2) e5) e2))) (not (= (op (op e5 e3) e5) e3))) (not (= (op (op e5 e4) e5) e4))) (not (= (op (op e5 e5) e5) e5)))))
(assume a5 (and (and (and (and (and (or (or (or (or (or (= (op (op e0 e0) (op e0 e0)) e0) (= (op (op e0 e1) (op e0 e1)) e1)) (= (op (op e0 e2) (op e0 e2)) e2)) (= (op (op e0 e3) (op e0 e3)) e3)) (= (op (op e0 e4) (op e0 e4)) e4)) (= (op (op e0 e5) (op e0 e5)) e5)) (or (or (or (or (or (= (op (op e1 e0) (op e1 e0)) e0) (= (op (op e1 e1) (op e1 e1)) e1)) (= (op (op e1 e2) (op e1 e2)) e2)) (= (op (op e1 e3) (op e1 e3)) e3)) (= (op (op e1 e4) (op e1 e4)) e4)) (= (op (op e1 e5) (op e1 e5)) e5))) (or (or (or (or (or (= (op (op e2 e0) (op e2 e0)) e0) (= (op (op e2 e1) (op e2 e1)) e1)) (= (op (op e2 e2) (op e2 e2)) e2)) (= (op (op e2 e3) (op e2 e3)) e3)) (= (op (op e2 e4) (op e2 e4)) e4)) (= (op (op e2 e5) (op e2 e5)) e5))) (or (or (or (or (or (= (op (op e3 e0) (op e3 e0)) e0) (= (op (op e3 e1) (op e3 e1)) e1)) (= (op (op e3 e2) (op e3 e2)) e2)) (= (op (op e3 e3) (op e3 e3)) e3)) (= (op (op e3 e4) (op e3 e4)) e4)) (= (op (op e3 e5) (op e3 e5)) e5))) (or (or (or (or (or (= (op (op e4 e0) (op e4 e0)) e0) (= (op (op e4 e1) (op e4 e1)) e1)) (= (op (op e4 e2) (op e4 e2)) e2)) (= (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e4 e4) (op e4 e4)) e4)) (= (op (op e4 e5) (op e4 e5)) e5))) (or (or (or (or (or (= (op (op e5 e0) (op e5 e0)) e0) (= (op (op e5 e1) (op e5 e1)) e1)) (= (op (op e5 e2) (op e5 e2)) e2)) (= (op (op e5 e3) (op e5 e3)) e3)) (= (op (op e5 e4) (op e5 e4)) e4)) (= (op (op e5 e5) (op e5 e5)) e5))))
(assume a6 (and (and (and (and (and (or (or (or (or (or (= (op (op e0 e0) (op e0 e0)) e0) (= (op (op e1 e0) (op e1 e0)) e1)) (= (op (op e2 e0) (op e2 e0)) e2)) (= (op (op e3 e0) (op e3 e0)) e3)) (= (op (op e4 e0) (op e4 e0)) e4)) (= (op (op e5 e0) (op e5 e0)) e5)) (or (or (or (or (or (= (op (op e0 e1) (op e0 e1)) e0) (= (op (op e1 e1) (op e1 e1)) e1)) (= (op (op e2 e1) (op e2 e1)) e2)) (= (op (op e3 e1) (op e3 e1)) e3)) (= (op (op e4 e1) (op e4 e1)) e4)) (= (op (op e5 e1) (op e5 e1)) e5))) (or (or (or (or (or (= (op (op e0 e2) (op e0 e2)) e0) (= (op (op e1 e2) (op e1 e2)) e1)) (= (op (op e2 e2) (op e2 e2)) e2)) (= (op (op e3 e2) (op e3 e2)) e3)) (= (op (op e4 e2) (op e4 e2)) e4)) (= (op (op e5 e2) (op e5 e2)) e5))) (or (or (or (or (or (= (op (op e0 e3) (op e0 e3)) e0) (= (op (op e1 e3) (op e1 e3)) e1)) (= (op (op e2 e3) (op e2 e3)) e2)) (= (op (op e3 e3) (op e3 e3)) e3)) (= (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e5 e3) (op e5 e3)) e5))) (or (or (or (or (or (= (op (op e0 e4) (op e0 e4)) e0) (= (op (op e1 e4) (op e1 e4)) e1)) (= (op (op e2 e4) (op e2 e4)) e2)) (= (op (op e3 e4) (op e3 e4)) e3)) (= (op (op e4 e4) (op e4 e4)) e4)) (= (op (op e5 e4) (op e5 e4)) e5))) (or (or (or (or (or (= (op (op e0 e5) (op e0 e5)) e0) (= (op (op e1 e5) (op e1 e5)) e1)) (= (op (op e2 e5) (op e2 e5)) e2)) (= (op (op e3 e5) (op e3 e5)) e3)) (= (op (op e4 e5) (op e4 e5)) e4)) (= (op (op e5 e5) (op e5 e5)) e5))))
(assume a7 (and (and (and (and (and (and (and (and (and (and (or (not (= (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op e0 e0))) (or (not (= (op e0 (op e0 e1)) e1)) (= (op e1 e0) (op e0 e1)))) (or (not (= (op e0 (op e0 e2)) e2)) (= (op e2 e0) (op e0 e2)))) (or (not (= (op e0 (op e0 e3)) e3)) (= (op e3 e0) (op e0 e3)))) (or (not (= (op e0 (op e0 e4)) e4)) (= (op e4 e0) (op e0 e4)))) (or (not (= (op e0 (op e0 e5)) e5)) (= (op e5 e0) (op e0 e5)))) (and (and (and (and (and (or (not (= (op e1 (op e1 e0)) e0)) (= (op e0 e1) (op e1 e0))) (or (not (= (op e1 (op e1 e1)) e1)) (= (op e1 e1) (op e1 e1)))) (or (not (= (op e1 (op e1 e2)) e2)) (= (op e2 e1) (op e1 e2)))) (or (not (= (op e1 (op e1 e3)) e3)) (= (op e3 e1) (op e1 e3)))) (or (not (= (op e1 (op e1 e4)) e4)) (= (op e4 e1) (op e1 e4)))) (or (not (= (op e1 (op e1 e5)) e5)) (= (op e5 e1) (op e1 e5))))) (and (and (and (and (and (or (not (= (op e2 (op e2 e0)) e0)) (= (op e0 e2) (op e2 e0))) (or (not (= (op e2 (op e2 e1)) e1)) (= (op e1 e2) (op e2 e1)))) (or (not (= (op e2 (op e2 e2)) e2)) (= (op e2 e2) (op e2 e2)))) (or (not (= (op e2 (op e2 e3)) e3)) (= (op e3 e2) (op e2 e3)))) (or (not (= (op e2 (op e2 e4)) e4)) (= (op e4 e2) (op e2 e4)))) (or (not (= (op e2 (op e2 e5)) e5)) (= (op e5 e2) (op e2 e5))))) (and (and (and (and (and (or (not (= (op e3 (op e3 e0)) e0)) (= (op e0 e3) (op e3 e0))) (or (not (= (op e3 (op e3 e1)) e1)) (= (op e1 e3) (op e3 e1)))) (or (not (= (op e3 (op e3 e2)) e2)) (= (op e2 e3) (op e3 e2)))) (or (not (= (op e3 (op e3 e3)) e3)) (= (op e3 e3) (op e3 e3)))) (or (not (= (op e3 (op e3 e4)) e4)) (= (op e4 e3) (op e3 e4)))) (or (not (= (op e3 (op e3 e5)) e5)) (= (op e5 e3) (op e3 e5))))) (and (and (and (and (and (or (not (= (op e4 (op e4 e0)) e0)) (= (op e0 e4) (op e4 e0))) (or (not (= (op e4 (op e4 e1)) e1)) (= (op e1 e4) (op e4 e1)))) (or (not (= (op e4 (op e4 e2)) e2)) (= (op e2 e4) (op e4 e2)))) (or (not (= (op e4 (op e4 e3)) e3)) (= (op e3 e4) (op e4 e3)))) (or (not (= (op e4 (op e4 e4)) e4)) (= (op e4 e4) (op e4 e4)))) (or (not (= (op e4 (op e4 e5)) e5)) (= (op e5 e4) (op e4 e5))))) (and (and (and (and (and (or (not (= (op e5 (op e5 e0)) e0)) (= (op e0 e5) (op e5 e0))) (or (not (= (op e5 (op e5 e1)) e1)) (= (op e1 e5) (op e5 e1)))) (or (not (= (op e5 (op e5 e2)) e2)) (= (op e2 e5) (op e5 e2)))) (or (not (= (op e5 (op e5 e3)) e3)) (= (op e3 e5) (op e5 e3)))) (or (not (= (op e5 (op e5 e4)) e4)) (= (op e4 e5) (op e5 e4)))) (or (not (= (op e5 (op e5 e5)) e5)) (= (op e5 e5) (op e5 e5))))))
(assume a8 (and (and (and (and (and (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit))) (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit))) (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit))) (and (and (and (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e3)) e3) (not (= (op e0 e3) unit))) (and (= (op e1 (op e1 e3)) e3) (not (= (op e1 e3) unit)))) (and (= (op e2 (op e2 e3)) e3) (not (= (op e2 e3) unit)))) (and (= (op e3 (op e3 e3)) e3) (not (= (op e3 e3) unit)))) (and (= (op e4 (op e4 e3)) e3) (not (= (op e4 e3) unit)))) (and (= (op e5 (op e5 e3)) e3) (not (= (op e5 e3) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e4)) e4) (not (= (op e0 e4) unit))) (and (= (op e1 (op e1 e4)) e4) (not (= (op e1 e4) unit)))) (and (= (op e2 (op e2 e4)) e4) (not (= (op e2 e4) unit)))) (and (= (op e3 (op e3 e4)) e4) (not (= (op e3 e4) unit)))) (and (= (op e4 (op e4 e4)) e4) (not (= (op e4 e4) unit)))) (and (= (op e5 (op e5 e4)) e4) (not (= (op e5 e4) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e5)) e5) (not (= (op e0 e5) unit))) (and (= (op e1 (op e1 e5)) e5) (not (= (op e1 e5) unit)))) (and (= (op e2 (op e2 e5)) e5) (not (= (op e2 e5) unit)))) (and (= (op e3 (op e3 e5)) e5) (not (= (op e3 e5) unit)))) (and (= (op e4 (op e4 e5)) e5) (not (= (op e4 e5) unit)))) (and (= (op e5 (op e5 e5)) e5) (not (= (op e5 e5) unit)))))))
(assume a9 (= unit e0))
(assume a10 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e0 e0) (op e5 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e1 e0) (op e5 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e2 e0) (op e5 e0)))) (not (= (op e3 e0) (op e4 e0)))) (not (= (op e3 e0) (op e5 e0)))) (not (= (op e4 e0) (op e5 e0)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e0 e1) (op e5 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e1 e1) (op e5 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e2 e1) (op e5 e1)))) (not (= (op e3 e1) (op e4 e1)))) (not (= (op e3 e1) (op e5 e1)))) (not (= (op e4 e1) (op e5 e1))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e0 e2) (op e5 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e1 e2) (op e5 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e2 e2) (op e5 e2)))) (not (= (op e3 e2) (op e4 e2)))) (not (= (op e3 e2) (op e5 e2)))) (not (= (op e4 e2) (op e5 e2))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e0 e3) (op e5 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e1 e3) (op e5 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e2 e3) (op e5 e3)))) (not (= (op e3 e3) (op e4 e3)))) (not (= (op e3 e3) (op e5 e3)))) (not (= (op e4 e3) (op e5 e3))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e0 e4) (op e5 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e1 e4) (op e5 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e2 e4) (op e5 e4)))) (not (= (op e3 e4) (op e4 e4)))) (not (= (op e3 e4) (op e5 e4)))) (not (= (op e4 e4) (op e5 e4))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e5) (op e1 e5))) (not (= (op e0 e5) (op e2 e5)))) (not (= (op e0 e5) (op e3 e5)))) (not (= (op e0 e5) (op e4 e5)))) (not (= (op e0 e5) (op e5 e5)))) (not (= (op e1 e5) (op e2 e5)))) (not (= (op e1 e5) (op e3 e5)))) (not (= (op e1 e5) (op e4 e5)))) (not (= (op e1 e5) (op e5 e5)))) (not (= (op e2 e5) (op e3 e5)))) (not (= (op e2 e5) (op e4 e5)))) (not (= (op e2 e5) (op e5 e5)))) (not (= (op e3 e5) (op e4 e5)))) (not (= (op e3 e5) (op e5 e5)))) (not (= (op e4 e5) (op e5 e5))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e0) (op e0 e5)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e1) (op e0 e5)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e2) (op e0 e5)))) (not (= (op e0 e3) (op e0 e4)))) (not (= (op e0 e3) (op e0 e5)))) (not (= (op e0 e4) (op e0 e5)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e0) (op e1 e5)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e1) (op e1 e5)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e2) (op e1 e5)))) (not (= (op e1 e3) (op e1 e4)))) (not (= (op e1 e3) (op e1 e5)))) (not (= (op e1 e4) (op e1 e5))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e0) (op e2 e5)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e1) (op e2 e5)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e2) (op e2 e5)))) (not (= (op e2 e3) (op e2 e4)))) (not (= (op e2 e3) (op e2 e5)))) (not (= (op e2 e4) (op e2 e5))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e0) (op e3 e5)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e1) (op e3 e5)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e2) (op e3 e5)))) (not (= (op e3 e3) (op e3 e4)))) (not (= (op e3 e3) (op e3 e5)))) (not (= (op e3 e4) (op e3 e5))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e0) (op e4 e5)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e1) (op e4 e5)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e2) (op e4 e5)))) (not (= (op e4 e3) (op e4 e4)))) (not (= (op e4 e3) (op e4 e5)))) (not (= (op e4 e4) (op e4 e5))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e5 e0) (op e5 e1))) (not (= (op e5 e0) (op e5 e2)))) (not (= (op e5 e0) (op e5 e3)))) (not (= (op e5 e0) (op e5 e4)))) (not (= (op e5 e0) (op e5 e5)))) (not (= (op e5 e1) (op e5 e2)))) (not (= (op e5 e1) (op e5 e3)))) (not (= (op e5 e1) (op e5 e4)))) (not (= (op e5 e1) (op e5 e5)))) (not (= (op e5 e2) (op e5 e3)))) (not (= (op e5 e2) (op e5 e4)))) (not (= (op e5 e2) (op e5 e5)))) (not (= (op e5 e3) (op e5 e4)))) (not (= (op e5 e3) (op e5 e5)))) (not (= (op e5 e4) (op e5 e5)))))))
(assume a11 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3))) (not (= e2 e4))) (not (= e2 e5))) (not (= e3 e4))) (not (= e3 e5))) (not (= e4 e5))))
(step t0 (cl (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (not (= e1 (op e1 e0))) (not (= e0 (op e1 (op e1 e0))))) :rule and_neg)
(step t1 (cl (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) :rule implies_neg1)
(anchor :step t2)
(assume t2.a0 (= e1 (op e1 e0)))
(assume t2.a1 (= e0 (op e1 (op e1 e0))))
(step t2.t0 (cl (not (= (= (op e1 unit) e1) (= e1 (op e1 e0)))) (not (= (op e1 unit) e1)) (= e1 (op e1 e0))) :rule equiv_pos2)
(step t2.t1 (cl (= (= (op e1 unit) e1) (= e1 (op e1 unit)))) :rule rare_rewrite :args ("eq-symm" (op e1 unit) e1))
(step t2.t2 (cl (= e1 e1)) :rule refl)
(step t2.t3 (cl (= (op e1 unit) (op e1 e0))) :rule cong :premises (t2.t2 a9))
(step t2.t4 (cl (= (= e1 (op e1 unit)) (= e1 (op e1 e0)))) :rule cong :premises (t2.t2 t2.t3))
(step t2.t5 (cl (= (= (op e1 unit) e1) (= e1 (op e1 e0)))) :rule trans :premises (t2.t1 t2.t4))
(step t2.t6 (cl (and (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4))) (and (= (op unit e5) e5) (= (op e5 unit) e5)))) :rule and :premises (a2) :args (0))
(step t2.t7 (cl (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4)))) :rule and :premises (t2.t6) :args (0))
(step t2.t8 (cl (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3)))) :rule and :premises (t2.t7) :args (0))
(step t2.t9 (cl (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2)))) :rule and :premises (t2.t8) :args (0))
(step t2.t10 (cl (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1)))) :rule and :premises (t2.t9) :args (0))
(step t2.t11 (cl (and (= (op unit e1) e1) (= (op e1 unit) e1))) :rule and :premises (t2.t10) :args (1))
(step t2.t12 (cl (= (op e1 unit) e1)) :rule and :premises (t2.t11) :args (1))
(step t2.t13 (cl (= e1 (op e1 e0))) :rule resolution :premises (t2.t0 t2.t5 t2.t12))
(step t2.t14 (cl (= (op e1 (op e1 e0)) e0)) :rule symm :premises (t2.a1))
(step t2.t15 (cl (= e0 (op e1 (op e1 e0)))) :rule symm :premises (t2.t14))
(step t2.t16 (cl (= (op e1 e0) e1)) :rule symm :premises (t2.t13))
(step t2.t17 (cl (= (op e1 (op e1 e0)) (op e1 e1))) :rule cong :premises (t2.t2 t2.t16))
(step t2.t18 (cl (= e0 (op e1 e1))) :rule trans :premises (t2.t15 t2.t17))
(step t2.t19 (cl (= (op e1 e0) (op e1 (op e1 e1)))) :rule cong :premises (t2.t2 t2.t18))
(step t2.t20 (cl (= e1 (op e1 (op e1 e1)))) :rule trans :premises (t2.t13 t2.t19))
(step t2 (cl (not (= e1 (op e1 e0))) (not (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) :rule subproof :discharge (t2.a0 t2.a1))
(step t3 (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e1 (op e1 e0))) :rule and_pos :args (0))
(step t4 (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e0 (op e1 (op e1 e0)))) :rule and_pos :args (1))
(step t5 (cl (= e1 (op e1 (op e1 e1))) (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))))) :rule resolution :premises (t2 t3 t4))
(step t6 (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e1 (op e1 (op e1 e1)))) :rule reordering :premises (t5))
(step t7 (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e1 (op e1 (op e1 e1)))) :rule contraction :premises (t6))
(step t8 (cl (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) (= e1 (op e1 (op e1 e1)))) :rule resolution :premises (t1 t7))
(step t9 (cl (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) (not (= e1 (op e1 (op e1 e1))))) :rule implies_neg2)
(step t10 (cl (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1))))) :rule resolution :premises (t8 t9))
(step t11 (cl (=> (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1))))) :rule contraction :premises (t10))
(step t12 (cl (not (and (= e1 (op e1 e0)) (= e0 (op e1 (op e1 e0))))) (= e1 (op e1 (op e1 e1)))) :rule implies :premises (t11))
(step t13 (cl (not (= e1 (op e1 e0))) (not (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1)))) :rule resolution :premises (t0 t12))
(step t14 (cl (not (= e0 (op e1 (op e1 e0)))) (= e1 (op e1 (op e1 e1))) (not (= e1 (op e1 e0)))) :rule reordering :premises (t13))
(step t15 (cl (not (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))) (= e0 (op e1 (op e1 e0)))) :rule and_pos :args (0))
(step t16 (cl (= e0 (op e1 (op e1 e0))) (not (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))))) :rule reordering :premises (t15))
(step t17 (cl (not (= (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))))) (not (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))))) (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))))) :rule equiv_pos2)
(step t18 (cl (= (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit))) (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit))) (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))))))
(step t19 (cl (= (= (op e5 (op e5 e0)) e0) (= e0 (op e5 (op e5 e0))))) :rule rare_rewrite :args ("eq-symm" (op e5 (op e5 e0)) e0))
(step t20 (cl (= (= (op e5 e0) unit) (= unit (op e5 e0)))) :rule rare_rewrite :args ("eq-symm" (op e5 e0) unit))
(step t21 (cl (= (not (= (op e5 e0) unit)) (not (= unit (op e5 e0))))) :rule cong :premises (t20))
(step t22 (cl (= (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))) (and (= e0 (op e5 (op e5 e0))) (not (= unit (op e5 e0)))))) :rule cong :premises (t19 t21))
(step t23 (cl (= (= (op e4 (op e4 e0)) e0) (= e0 (op e4 (op e4 e0))))) :rule rare_rewrite :args ("eq-symm" (op e4 (op e4 e0)) e0))
(step t24 (cl (= (= (op e4 e0) unit) (= unit (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) unit))
(step t25 (cl (= (not (= (op e4 e0) unit)) (not (= unit (op e4 e0))))) :rule cong :premises (t24))
(step t26 (cl (= (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit))) (and (= e0 (op e4 (op e4 e0))) (not (= unit (op e4 e0)))))) :rule cong :premises (t23 t25))
(step t27 (cl (= (= (op e3 (op e3 e0)) e0) (= e0 (op e3 (op e3 e0))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op e3 e0)) e0))
(step t28 (cl (= (= (op e3 e0) unit) (= unit (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) unit))
(step t29 (cl (= (not (= (op e3 e0) unit)) (not (= unit (op e3 e0))))) :rule cong :premises (t28))
(step t30 (cl (= (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit))) (and (= e0 (op e3 (op e3 e0))) (not (= unit (op e3 e0)))))) :rule cong :premises (t27 t29))
(step t31 (cl (= (= (op e2 (op e2 e0)) e0) (= e0 (op e2 (op e2 e0))))) :rule rare_rewrite :args ("eq-symm" (op e2 (op e2 e0)) e0))
(step t32 (cl (= (= (op e2 e0) unit) (= unit (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) unit))
(step t33 (cl (= (not (= (op e2 e0) unit)) (not (= unit (op e2 e0))))) :rule cong :premises (t32))
(step t34 (cl (= (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit))) (and (= e0 (op e2 (op e2 e0))) (not (= unit (op e2 e0)))))) :rule cong :premises (t31 t33))
(step t35 (cl (= (= (op e0 (op e0 e0)) e0) (= e0 (op e0 (op e0 e0))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op e0 e0)) e0))
(step t36 (cl (= (= (op e0 e0) unit) (= unit (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) unit))
(step t37 (cl (= (not (= (op e0 e0) unit)) (not (= unit (op e0 e0))))) :rule cong :premises (t36))
(step t38 (cl (= (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= e0 (op e0 (op e0 e0))) (not (= unit (op e0 e0)))))) :rule cong :premises (t35 t37))
(step t39 (cl (= (= (op e1 (op e1 e0)) e0) (= e0 (op e1 (op e1 e0))))) :rule rare_rewrite :args ("eq-symm" (op e1 (op e1 e0)) e0))
(step t40 (cl (= (= (op e1 e0) unit) (= unit (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) unit))
(step t41 (cl (= (not (= (op e1 e0) unit)) (not (= unit (op e1 e0))))) :rule cong :premises (t40))
(step t42 (cl (= (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit))) (and (= e0 (op e1 (op e1 e0))) (not (= unit (op e1 e0)))))) :rule cong :premises (t39 t41))
(step t43 (cl (= (or (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit))) (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (or (and (= e0 (op e5 (op e5 e0))) (not (= unit (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= unit (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= unit (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= unit (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= unit (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= unit (op e1 e0))))))) :rule cong :premises (t22 t26 t30 t34 t38 t42))
(step t44 (cl (= (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (and (= e0 (op e5 (op e5 e0))) (not (= unit (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= unit (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= unit (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= unit (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= unit (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= unit (op e1 e0))))))) :rule trans :premises (t18 t43))
(step t45 (cl (= (= e0 (op e5 (op e5 e0))) (= e0 (op e5 (op e5 e0))))) :rule refl)
(step t46 (cl (= (op e5 e0) (op e5 e0))) :rule refl)
(step t47 (cl (= (= unit (op e5 e0)) (= e0 (op e5 e0)))) :rule cong :premises (a9 t46))
(step t48 (cl (= (not (= unit (op e5 e0))) (not (= e0 (op e5 e0))))) :rule cong :premises (t47))
(step t49 (cl (= (and (= e0 (op e5 (op e5 e0))) (not (= unit (op e5 e0)))) (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))))) :rule cong :premises (t45 t48))
(step t50 (cl (= (= e0 (op e4 (op e4 e0))) (= e0 (op e4 (op e4 e0))))) :rule refl)
(step t51 (cl (= (op e4 e0) (op e4 e0))) :rule refl)
(step t52 (cl (= (= unit (op e4 e0)) (= e0 (op e4 e0)))) :rule cong :premises (a9 t51))
(step t53 (cl (= (not (= unit (op e4 e0))) (not (= e0 (op e4 e0))))) :rule cong :premises (t52))
(step t54 (cl (= (and (= e0 (op e4 (op e4 e0))) (not (= unit (op e4 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))))) :rule cong :premises (t50 t53))
(step t55 (cl (= (= e0 (op e3 (op e3 e0))) (= e0 (op e3 (op e3 e0))))) :rule refl)
(step t56 (cl (= (op e3 e0) (op e3 e0))) :rule refl)
(step t57 (cl (= (= unit (op e3 e0)) (= e0 (op e3 e0)))) :rule cong :premises (a9 t56))
(step t58 (cl (= (not (= unit (op e3 e0))) (not (= e0 (op e3 e0))))) :rule cong :premises (t57))
(step t59 (cl (= (and (= e0 (op e3 (op e3 e0))) (not (= unit (op e3 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))))) :rule cong :premises (t55 t58))
(step t60 (cl (= (= e0 (op e2 (op e2 e0))) (= e0 (op e2 (op e2 e0))))) :rule refl)
(step t61 (cl (= (op e2 e0) (op e2 e0))) :rule refl)
(step t62 (cl (= (= unit (op e2 e0)) (= e0 (op e2 e0)))) :rule cong :premises (a9 t61))
(step t63 (cl (= (not (= unit (op e2 e0))) (not (= e0 (op e2 e0))))) :rule cong :premises (t62))
(step t64 (cl (= (and (= e0 (op e2 (op e2 e0))) (not (= unit (op e2 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))))) :rule cong :premises (t60 t63))
(step t65 (cl (= (= e0 (op e0 (op e0 e0))) (= e0 (op e0 (op e0 e0))))) :rule refl)
(step t66 (cl (= (op e0 e0) (op e0 e0))) :rule refl)
(step t67 (cl (= (= unit (op e0 e0)) (= e0 (op e0 e0)))) :rule cong :premises (a9 t66))
(step t68 (cl (= (not (= unit (op e0 e0))) (not (= e0 (op e0 e0))))) :rule cong :premises (t67))
(step t69 (cl (= (and (= e0 (op e0 (op e0 e0))) (not (= unit (op e0 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))))) :rule cong :premises (t65 t68))
(step t70 (cl (= (= e0 (op e1 (op e1 e0))) (= e0 (op e1 (op e1 e0))))) :rule refl)
(step t71 (cl (= (op e1 e0) (op e1 e0))) :rule refl)
(step t72 (cl (= (= unit (op e1 e0)) (= e0 (op e1 e0)))) :rule cong :premises (a9 t71))
(step t73 (cl (= (not (= unit (op e1 e0))) (not (= e0 (op e1 e0))))) :rule cong :premises (t72))
(step t74 (cl (= (and (= e0 (op e1 (op e1 e0))) (not (= unit (op e1 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))))) :rule cong :premises (t70 t73))
(step t75 (cl (= (or (and (= e0 (op e5 (op e5 e0))) (not (= unit (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= unit (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= unit (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= unit (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= unit (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= unit (op e1 e0))))) (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))))) :rule cong :premises (t49 t54 t59 t64 t69 t74))
(step t76 (cl (= (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))))) :rule trans :premises (t44 t75))
(step t77 (cl (and (and (and (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e3)) e3) (not (= (op e0 e3) unit))) (and (= (op e1 (op e1 e3)) e3) (not (= (op e1 e3) unit)))) (and (= (op e2 (op e2 e3)) e3) (not (= (op e2 e3) unit)))) (and (= (op e3 (op e3 e3)) e3) (not (= (op e3 e3) unit)))) (and (= (op e4 (op e4 e3)) e3) (not (= (op e4 e3) unit)))) (and (= (op e5 (op e5 e3)) e3) (not (= (op e5 e3) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e4)) e4) (not (= (op e0 e4) unit))) (and (= (op e1 (op e1 e4)) e4) (not (= (op e1 e4) unit)))) (and (= (op e2 (op e2 e4)) e4) (not (= (op e2 e4) unit)))) (and (= (op e3 (op e3 e4)) e4) (not (= (op e3 e4) unit)))) (and (= (op e4 (op e4 e4)) e4) (not (= (op e4 e4) unit)))) (and (= (op e5 (op e5 e4)) e4) (not (= (op e5 e4) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e5)) e5) (not (= (op e0 e5) unit))) (and (= (op e1 (op e1 e5)) e5) (not (= (op e1 e5) unit)))) (and (= (op e2 (op e2 e5)) e5) (not (= (op e2 e5) unit)))) (and (= (op e3 (op e3 e5)) e5) (not (= (op e3 e5) unit)))) (and (= (op e4 (op e4 e5)) e5) (not (= (op e4 e5) unit)))) (and (= (op e5 (op e5 e5)) e5) (not (= (op e5 e5) unit)))))) :rule and :premises (a8) :args (1))
(step t78 (cl (and (and (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e3)) e3) (not (= (op e0 e3) unit))) (and (= (op e1 (op e1 e3)) e3) (not (= (op e1 e3) unit)))) (and (= (op e2 (op e2 e3)) e3) (not (= (op e2 e3) unit)))) (and (= (op e3 (op e3 e3)) e3) (not (= (op e3 e3) unit)))) (and (= (op e4 (op e4 e3)) e3) (not (= (op e4 e3) unit)))) (and (= (op e5 (op e5 e3)) e3) (not (= (op e5 e3) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e4)) e4) (not (= (op e0 e4) unit))) (and (= (op e1 (op e1 e4)) e4) (not (= (op e1 e4) unit)))) (and (= (op e2 (op e2 e4)) e4) (not (= (op e2 e4) unit)))) (and (= (op e3 (op e3 e4)) e4) (not (= (op e3 e4) unit)))) (and (= (op e4 (op e4 e4)) e4) (not (= (op e4 e4) unit)))) (and (= (op e5 (op e5 e4)) e4) (not (= (op e5 e4) unit)))))) :rule and :premises (t77) :args (0))
(step t79 (cl (and (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e3)) e3) (not (= (op e0 e3) unit))) (and (= (op e1 (op e1 e3)) e3) (not (= (op e1 e3) unit)))) (and (= (op e2 (op e2 e3)) e3) (not (= (op e2 e3) unit)))) (and (= (op e3 (op e3 e3)) e3) (not (= (op e3 e3) unit)))) (and (= (op e4 (op e4 e3)) e3) (not (= (op e4 e3) unit)))) (and (= (op e5 (op e5 e3)) e3) (not (= (op e5 e3) unit)))))) :rule and :premises (t78) :args (0))
(step t80 (cl (and (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit))))) (or (or (or (or (or (and (= (op e0 (op e0 e2)) e2) (not (= (op e0 e2) unit))) (and (= (op e1 (op e1 e2)) e2) (not (= (op e1 e2) unit)))) (and (= (op e2 (op e2 e2)) e2) (not (= (op e2 e2) unit)))) (and (= (op e3 (op e3 e2)) e2) (not (= (op e3 e2) unit)))) (and (= (op e4 (op e4 e2)) e2) (not (= (op e4 e2) unit)))) (and (= (op e5 (op e5 e2)) e2) (not (= (op e5 e2) unit)))))) :rule and :premises (t79) :args (0))
(step t81 (cl (and (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit)))) (or (or (or (or (or (and (= (op e0 (op e0 e1)) e1) (not (= (op e0 e1) unit))) (and (= (op e1 (op e1 e1)) e1) (not (= (op e1 e1) unit)))) (and (= (op e2 (op e2 e1)) e1) (not (= (op e2 e1) unit)))) (and (= (op e3 (op e3 e1)) e1) (not (= (op e3 e1) unit)))) (and (= (op e4 (op e4 e1)) e1) (not (= (op e4 e1) unit)))) (and (= (op e5 (op e5 e1)) e1) (not (= (op e5 e1) unit)))))) :rule and :premises (t80) :args (0))
(step t82 (cl (or (or (or (or (or (and (= (op e0 (op e0 e0)) e0) (not (= (op e0 e0) unit))) (and (= (op e1 (op e1 e0)) e0) (not (= (op e1 e0) unit)))) (and (= (op e2 (op e2 e0)) e0) (not (= (op e2 e0) unit)))) (and (= (op e3 (op e3 e0)) e0) (not (= (op e3 e0) unit)))) (and (= (op e4 (op e4 e0)) e0) (not (= (op e4 e0) unit)))) (and (= (op e5 (op e5 e0)) e0) (not (= (op e5 e0) unit))))) :rule and :premises (t81) :args (0))
(step t83 (cl (or (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))))) :rule resolution :premises (t17 t76 t82))
(step t84 (cl (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))) :rule or :premises (t83))
(step t85 (cl (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0)))) (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))) (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))) (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))) (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))) (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0))))) :rule reordering :premises (t84))
(step t86 (cl (not (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0))))) (not (= e0 (op e0 e0)))) :rule and_pos :args (1))
(step t87 (cl (not (= e0 (op e0 e0))) (not (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))))) :rule reordering :premises (t86))
(step t88 (cl (not (= (= (op unit e0) e0) (= e0 (op e0 e0)))) (not (= (op unit e0) e0)) (= e0 (op e0 e0))) :rule equiv_pos2)
(step t89 (cl (= (= (op unit e0) e0) (= e0 (op unit e0)))) :rule rare_rewrite :args ("eq-symm" (op unit e0) e0))
(step t90 (cl (= e0 e0)) :rule refl)
(step t91 (cl (= (op unit e0) (op e0 e0))) :rule cong :premises (a9 t90))
(step t92 (cl (= (= e0 (op unit e0)) (= e0 (op e0 e0)))) :rule cong :premises (t90 t91))
(step t93 (cl (= (= (op unit e0) e0) (= e0 (op e0 e0)))) :rule trans :premises (t89 t92))
(step t94 (cl (and (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4))) (and (= (op unit e5) e5) (= (op e5 unit) e5)))) :rule and :premises (a2) :args (0))
(step t95 (cl (and (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3))) (and (= (op unit e4) e4) (= (op e4 unit) e4)))) :rule and :premises (t94) :args (0))
(step t96 (cl (and (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2))) (and (= (op unit e3) e3) (= (op e3 unit) e3)))) :rule and :premises (t95) :args (0))
(step t97 (cl (and (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1))) (and (= (op unit e2) e2) (= (op e2 unit) e2)))) :rule and :premises (t96) :args (0))
(step t98 (cl (and (and (= (op unit e0) e0) (= (op e0 unit) e0)) (and (= (op unit e1) e1) (= (op e1 unit) e1)))) :rule and :premises (t97) :args (0))
(step t99 (cl (and (= (op unit e0) e0) (= (op e0 unit) e0))) :rule and :premises (t98) :args (0))
(step t100 (cl (= (op unit e0) e0)) :rule and :premises (t99) :args (0))
(step t101 (cl (= e0 (op e0 e0))) :rule resolution :premises (t88 t93 t100))
(step t102 (cl (not (and (= e0 (op e0 (op e0 e0))) (not (= e0 (op e0 e0)))))) :rule resolution :premises (t87 t101))
(step t103 (cl (not (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0))))) (= e0 (op e2 (op e2 e0)))) :rule and_pos :args (0))
(step t104 (cl (= e0 (op e2 (op e2 e0))) (not (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))))) :rule reordering :premises (t103))
(step t105 (cl (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (not (= e2 (op e2 e0))) (not (= e0 (op e2 (op e2 e0))))) :rule and_neg)
(step t106 (cl (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) :rule implies_neg1)
(anchor :step t107)
(assume t107.a0 (= e2 (op e2 e0)))
(assume t107.a1 (= e0 (op e2 (op e2 e0))))
(step t107.t0 (cl (not (= (= (op e2 unit) e2) (= e2 (op e2 e0)))) (not (= (op e2 unit) e2)) (= e2 (op e2 e0))) :rule equiv_pos2)
(step t107.t1 (cl (= (= (op e2 unit) e2) (= e2 (op e2 unit)))) :rule rare_rewrite :args ("eq-symm" (op e2 unit) e2))
(step t107.t2 (cl (= e2 e2)) :rule refl)
(step t107.t3 (cl (= (op e2 unit) (op e2 e0))) :rule cong :premises (t107.t2 a9))
(step t107.t4 (cl (= (= e2 (op e2 unit)) (= e2 (op e2 e0)))) :rule cong :premises (t107.t2 t107.t3))
(step t107.t5 (cl (= (= (op e2 unit) e2) (= e2 (op e2 e0)))) :rule trans :premises (t107.t1 t107.t4))
(step t107.t6 (cl (and (= (op unit e2) e2) (= (op e2 unit) e2))) :rule and :premises (t97) :args (1))
(step t107.t7 (cl (= (op e2 unit) e2)) :rule and :premises (t107.t6) :args (1))
(step t107.t8 (cl (= e2 (op e2 e0))) :rule resolution :premises (t107.t0 t107.t5 t107.t7))
(step t107.t9 (cl (= (op e2 (op e2 e0)) e0)) :rule symm :premises (t107.a1))
(step t107.t10 (cl (= e0 (op e2 (op e2 e0)))) :rule symm :premises (t107.t9))
(step t107.t11 (cl (= (op e2 e0) e2)) :rule symm :premises (t107.t8))
(step t107.t12 (cl (= (op e2 (op e2 e0)) (op e2 e2))) :rule cong :premises (t107.t2 t107.t11))
(step t107.t13 (cl (= e0 (op e2 e2))) :rule trans :premises (t107.t10 t107.t12))
(step t107.t14 (cl (= (op e2 e0) (op e2 (op e2 e2)))) :rule cong :premises (t107.t2 t107.t13))
(step t107.t15 (cl (= e2 (op e2 (op e2 e2)))) :rule trans :premises (t107.t8 t107.t14))
(step t107 (cl (not (= e2 (op e2 e0))) (not (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) :rule subproof :discharge (t107.a0 t107.a1))
(step t108 (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e2 (op e2 e0))) :rule and_pos :args (0))
(step t109 (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e0 (op e2 (op e2 e0)))) :rule and_pos :args (1))
(step t110 (cl (= e2 (op e2 (op e2 e2))) (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))))) :rule resolution :premises (t107 t108 t109))
(step t111 (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e2 (op e2 (op e2 e2)))) :rule reordering :premises (t110))
(step t112 (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e2 (op e2 (op e2 e2)))) :rule contraction :premises (t111))
(step t113 (cl (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) (= e2 (op e2 (op e2 e2)))) :rule resolution :premises (t106 t112))
(step t114 (cl (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) (not (= e2 (op e2 (op e2 e2))))) :rule implies_neg2)
(step t115 (cl (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2))))) :rule resolution :premises (t113 t114))
(step t116 (cl (=> (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2))))) :rule contraction :premises (t115))
(step t117 (cl (not (and (= e2 (op e2 e0)) (= e0 (op e2 (op e2 e0))))) (= e2 (op e2 (op e2 e2)))) :rule implies :premises (t116))
(step t118 (cl (not (= e2 (op e2 e0))) (not (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2)))) :rule resolution :premises (t105 t117))
(step t119 (cl (not (= e0 (op e2 (op e2 e0)))) (= e2 (op e2 (op e2 e2))) (not (= e2 (op e2 e0)))) :rule reordering :premises (t118))
(step t120 (cl (not (= (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit)) (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0)))) (not (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0))) :rule equiv_pos2)
(step t121 (cl (= (= (op e2 (op e2 e2)) e2) (= e2 (op e2 (op e2 e2))))) :rule rare_rewrite :args ("eq-symm" (op e2 (op e2 e2)) e2))
(step t122 (cl (= (not (= (op e2 (op e2 e2)) e2)) (not (= e2 (op e2 (op e2 e2)))))) :rule cong :premises (t121))
(step t123 (cl (= (= e2 unit) (= unit e2))) :rule rare_rewrite :args ("eq-symm" e2 unit))
(step t124 (cl (= (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit)) (or (not (= e2 (op e2 (op e2 e2)))) (= unit e2)))) :rule cong :premises (t122 t123))
(step t125 (cl (= (not (= e2 (op e2 (op e2 e2)))) (not (= e2 (op e2 (op e2 e2)))))) :rule refl)
(step t126 (cl (= e2 e2)) :rule refl)
(step t127 (cl (= (= unit e2) (= e0 e2))) :rule cong :premises (a9 t126))
(step t128 (cl (= (or (not (= e2 (op e2 (op e2 e2)))) (= unit e2)) (or (not (= e2 (op e2 (op e2 e2)))) (= e0 e2)))) :rule cong :premises (t125 t127))
(step t129 (cl (= (= e0 e2) (= e2 e0))) :rule rare_rewrite :args ("eq-symm" e0 e2))
(step t130 (cl (= (or (not (= e2 (op e2 (op e2 e2)))) (= e0 e2)) (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0)))) :rule cong :premises (t125 t129))
(step t131 (cl (= (or (not (= e2 (op e2 (op e2 e2)))) (= unit e2)) (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0)))) :rule trans :premises (t128 t130))
(step t132 (cl (= (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit)) (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0)))) :rule trans :premises (t124 t131))
(step t133 (cl (and (and (and (and (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit))) (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit))) (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit)))) :rule and :premises (a8) :args (0))
(step t134 (cl (and (and (and (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit))) (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit)))) :rule and :premises (t133) :args (0))
(step t135 (cl (and (and (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit)))) :rule and :premises (t134) :args (0))
(step t136 (cl (and (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit)))) :rule and :premises (t135) :args (0))
(step t137 (cl (or (not (= (op e2 (op e2 e2)) e2)) (= e2 unit))) :rule and :premises (t136) :args (1))
(step t138 (cl (or (not (= e2 (op e2 (op e2 e2)))) (= e2 e0))) :rule resolution :premises (t120 t132 t137))
(step t139 (cl (not (= e2 (op e2 (op e2 e2)))) (= e2 e0)) :rule or :premises (t138))
(step t140 (cl (= e2 e0) (not (= e2 (op e2 (op e2 e2))))) :rule reordering :premises (t139))
(step t141 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3))) (not (= e2 e4))) (not (= e2 e5))) (not (= e3 e4))) (not (= e3 e5)))) :rule and :premises (a11) :args (0))
(step t142 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3))) (not (= e2 e4))) (not (= e2 e5))) (not (= e3 e4)))) :rule and :premises (t141) :args (0))
(step t143 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3))) (not (= e2 e4))) (not (= e2 e5)))) :rule and :premises (t142) :args (0))
(step t144 (cl (and (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3))) (not (= e2 e4)))) :rule and :premises (t143) :args (0))
(step t145 (cl (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5))) (not (= e2 e3)))) :rule and :premises (t144) :args (0))
(step t146 (cl (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e1 e5)))) :rule and :premises (t145) :args (0))
(step t147 (cl (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4)))) :rule and :premises (t146) :args (0))
(step t148 (cl (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2))) (not (= e1 e3)))) :rule and :premises (t147) :args (0))
(step t149 (cl (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5))) (not (= e1 e2)))) :rule and :premises (t148) :args (0))
(step t150 (cl (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e0 e5)))) :rule and :premises (t149) :args (0))
(step t151 (cl (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4)))) :rule and :premises (t150) :args (0))
(step t152 (cl (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3)))) :rule and :premises (t151) :args (0))
(step t153 (cl (and (not (= e0 e1)) (not (= e0 e2)))) :rule and :premises (t152) :args (0))
(step t154 (cl (not (= e0 e2))) :rule and :premises (t153) :args (1))
(step t155 (cl (not (= e2 e0))) :rule not_symm :premises (t154))
(step t156 (cl (not (= e2 (op e2 (op e2 e2))))) :rule resolution :premises (t140 t155))
(step t157 (cl (not (= (= (op e2 unit) e2) (= e2 (op e2 e0)))) (not (= (op e2 unit) e2)) (= e2 (op e2 e0))) :rule equiv_pos2)
(step t158 (cl (= (= (op e2 unit) e2) (= e2 (op e2 unit)))) :rule rare_rewrite :args ("eq-symm" (op e2 unit) e2))
(step t159 (cl (= (op e2 unit) (op e2 e0))) :rule cong :premises (t126 a9))
(step t160 (cl (= (= e2 (op e2 unit)) (= e2 (op e2 e0)))) :rule cong :premises (t126 t159))
(step t161 (cl (= (= (op e2 unit) e2) (= e2 (op e2 e0)))) :rule trans :premises (t158 t160))
(step t162 (cl (and (= (op unit e2) e2) (= (op e2 unit) e2))) :rule and :premises (t97) :args (1))
(step t163 (cl (= (op e2 unit) e2)) :rule and :premises (t162) :args (1))
(step t164 (cl (= e2 (op e2 e0))) :rule resolution :premises (t157 t161 t163))
(step t165 (cl (not (= e0 (op e2 (op e2 e0))))) :rule resolution :premises (t119 t156 t164))
(step t166 (cl (not (and (= e0 (op e2 (op e2 e0))) (not (= e0 (op e2 e0)))))) :rule resolution :premises (t104 t165))
(step t167 (cl (not (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0))))) (= e0 (op e3 (op e3 e0)))) :rule and_pos :args (0))
(step t168 (cl (= e0 (op e3 (op e3 e0))) (not (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))))) :rule reordering :premises (t167))
(step t169 (cl (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0))))) :rule and_neg)
(step t170 (cl (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) :rule implies_neg1)
(anchor :step t171)
(assume t171.a0 (= e3 (op e3 e0)))
(assume t171.a1 (= e0 (op e3 (op e3 e0))))
(step t171.t0 (cl (not (= (= (op e3 unit) e3) (= e3 (op e3 e0)))) (not (= (op e3 unit) e3)) (= e3 (op e3 e0))) :rule equiv_pos2)
(step t171.t1 (cl (= (= (op e3 unit) e3) (= e3 (op e3 unit)))) :rule rare_rewrite :args ("eq-symm" (op e3 unit) e3))
(step t171.t2 (cl (= e3 e3)) :rule refl)
(step t171.t3 (cl (= (op e3 unit) (op e3 e0))) :rule cong :premises (t171.t2 a9))
(step t171.t4 (cl (= (= e3 (op e3 unit)) (= e3 (op e3 e0)))) :rule cong :premises (t171.t2 t171.t3))
(step t171.t5 (cl (= (= (op e3 unit) e3) (= e3 (op e3 e0)))) :rule trans :premises (t171.t1 t171.t4))
(step t171.t6 (cl (and (= (op unit e3) e3) (= (op e3 unit) e3))) :rule and :premises (t96) :args (1))
(step t171.t7 (cl (= (op e3 unit) e3)) :rule and :premises (t171.t6) :args (1))
(step t171.t8 (cl (= e3 (op e3 e0))) :rule resolution :premises (t171.t0 t171.t5 t171.t7))
(step t171.t9 (cl (= (op e3 (op e3 e0)) e0)) :rule symm :premises (t171.a1))
(step t171.t10 (cl (= e0 (op e3 (op e3 e0)))) :rule symm :premises (t171.t9))
(step t171.t11 (cl (= (op e3 e0) e3)) :rule symm :premises (t171.t8))
(step t171.t12 (cl (= (op e3 (op e3 e0)) (op e3 e3))) :rule cong :premises (t171.t2 t171.t11))
(step t171.t13 (cl (= e0 (op e3 e3))) :rule trans :premises (t171.t10 t171.t12))
(step t171.t14 (cl (= (op e3 e0) (op e3 (op e3 e3)))) :rule cong :premises (t171.t2 t171.t13))
(step t171.t15 (cl (= e3 (op e3 (op e3 e3)))) :rule trans :premises (t171.t8 t171.t14))
(step t171 (cl (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) :rule subproof :discharge (t171.a0 t171.a1))
(step t172 (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 e0))) :rule and_pos :args (0))
(step t173 (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e0 (op e3 (op e3 e0)))) :rule and_pos :args (1))
(step t174 (cl (= e3 (op e3 (op e3 e3))) (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))))) :rule resolution :premises (t171 t172 t173))
(step t175 (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 (op e3 e3)))) :rule reordering :premises (t174))
(step t176 (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 (op e3 e3)))) :rule contraction :premises (t175))
(step t177 (cl (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) (= e3 (op e3 (op e3 e3)))) :rule resolution :premises (t170 t176))
(step t178 (cl (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) (not (= e3 (op e3 (op e3 e3))))) :rule implies_neg2)
(step t179 (cl (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3))))) :rule resolution :premises (t177 t178))
(step t180 (cl (=> (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3))))) :rule contraction :premises (t179))
(step t181 (cl (not (and (= e3 (op e3 e0)) (= e0 (op e3 (op e3 e0))))) (= e3 (op e3 (op e3 e3)))) :rule implies :premises (t180))
(step t182 (cl (not (= e3 (op e3 e0))) (not (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3)))) :rule resolution :premises (t169 t181))
(step t183 (cl (not (= e0 (op e3 (op e3 e0)))) (= e3 (op e3 (op e3 e3))) (not (= e3 (op e3 e0)))) :rule reordering :premises (t182))
(step t184 (cl (not (= (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit)) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0)))) (not (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit))) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0))) :rule equiv_pos2)
(step t185 (cl (= (= (op e3 (op e3 e3)) e3) (= e3 (op e3 (op e3 e3))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op e3 e3)) e3))
(step t186 (cl (= (not (= (op e3 (op e3 e3)) e3)) (not (= e3 (op e3 (op e3 e3)))))) :rule cong :premises (t185))
(step t187 (cl (= (= e3 unit) (= unit e3))) :rule rare_rewrite :args ("eq-symm" e3 unit))
(step t188 (cl (= (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit)) (or (not (= e3 (op e3 (op e3 e3)))) (= unit e3)))) :rule cong :premises (t186 t187))
(step t189 (cl (= (not (= e3 (op e3 (op e3 e3)))) (not (= e3 (op e3 (op e3 e3)))))) :rule refl)
(step t190 (cl (= e3 e3)) :rule refl)
(step t191 (cl (= (= unit e3) (= e0 e3))) :rule cong :premises (a9 t190))
(step t192 (cl (= (or (not (= e3 (op e3 (op e3 e3)))) (= unit e3)) (or (not (= e3 (op e3 (op e3 e3)))) (= e0 e3)))) :rule cong :premises (t189 t191))
(step t193 (cl (= (= e0 e3) (= e3 e0))) :rule rare_rewrite :args ("eq-symm" e0 e3))
(step t194 (cl (= (or (not (= e3 (op e3 (op e3 e3)))) (= e0 e3)) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0)))) :rule cong :premises (t189 t193))
(step t195 (cl (= (or (not (= e3 (op e3 (op e3 e3)))) (= unit e3)) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0)))) :rule trans :premises (t192 t194))
(step t196 (cl (= (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit)) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0)))) :rule trans :premises (t188 t195))
(step t197 (cl (or (not (= (op e3 (op e3 e3)) e3)) (= e3 unit))) :rule and :premises (t135) :args (1))
(step t198 (cl (or (not (= e3 (op e3 (op e3 e3)))) (= e3 e0))) :rule resolution :premises (t184 t196 t197))
(step t199 (cl (not (= e3 (op e3 (op e3 e3)))) (= e3 e0)) :rule or :premises (t198))
(step t200 (cl (= e3 e0) (not (= e3 (op e3 (op e3 e3))))) :rule reordering :premises (t199))
(step t201 (cl (not (= e0 e3))) :rule and :premises (t152) :args (1))
(step t202 (cl (not (= e3 e0))) :rule not_symm :premises (t201))
(step t203 (cl (not (= e3 (op e3 (op e3 e3))))) :rule resolution :premises (t200 t202))
(step t204 (cl (not (= (= (op e3 unit) e3) (= e3 (op e3 e0)))) (not (= (op e3 unit) e3)) (= e3 (op e3 e0))) :rule equiv_pos2)
(step t205 (cl (= (= (op e3 unit) e3) (= e3 (op e3 unit)))) :rule rare_rewrite :args ("eq-symm" (op e3 unit) e3))
(step t206 (cl (= (op e3 unit) (op e3 e0))) :rule cong :premises (t190 a9))
(step t207 (cl (= (= e3 (op e3 unit)) (= e3 (op e3 e0)))) :rule cong :premises (t190 t206))
(step t208 (cl (= (= (op e3 unit) e3) (= e3 (op e3 e0)))) :rule trans :premises (t205 t207))
(step t209 (cl (and (= (op unit e3) e3) (= (op e3 unit) e3))) :rule and :premises (t96) :args (1))
(step t210 (cl (= (op e3 unit) e3)) :rule and :premises (t209) :args (1))
(step t211 (cl (= e3 (op e3 e0))) :rule resolution :premises (t204 t208 t210))
(step t212 (cl (not (= e0 (op e3 (op e3 e0))))) :rule resolution :premises (t183 t203 t211))
(step t213 (cl (not (and (= e0 (op e3 (op e3 e0))) (not (= e0 (op e3 e0)))))) :rule resolution :premises (t168 t212))
(step t214 (cl (not (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0))))) (= e0 (op e4 (op e4 e0)))) :rule and_pos :args (0))
(step t215 (cl (= e0 (op e4 (op e4 e0))) (not (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))))) :rule reordering :premises (t214))
(step t216 (cl (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (not (= e4 (op e4 e0))) (not (= e0 (op e4 (op e4 e0))))) :rule and_neg)
(step t217 (cl (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) :rule implies_neg1)
(anchor :step t218)
(assume t218.a0 (= e4 (op e4 e0)))
(assume t218.a1 (= e0 (op e4 (op e4 e0))))
(step t218.t0 (cl (not (= (= (op e4 unit) e4) (= e4 (op e4 e0)))) (not (= (op e4 unit) e4)) (= e4 (op e4 e0))) :rule equiv_pos2)
(step t218.t1 (cl (= (= (op e4 unit) e4) (= e4 (op e4 unit)))) :rule rare_rewrite :args ("eq-symm" (op e4 unit) e4))
(step t218.t2 (cl (= e4 e4)) :rule refl)
(step t218.t3 (cl (= (op e4 unit) (op e4 e0))) :rule cong :premises (t218.t2 a9))
(step t218.t4 (cl (= (= e4 (op e4 unit)) (= e4 (op e4 e0)))) :rule cong :premises (t218.t2 t218.t3))
(step t218.t5 (cl (= (= (op e4 unit) e4) (= e4 (op e4 e0)))) :rule trans :premises (t218.t1 t218.t4))
(step t218.t6 (cl (and (= (op unit e4) e4) (= (op e4 unit) e4))) :rule and :premises (t95) :args (1))
(step t218.t7 (cl (= (op e4 unit) e4)) :rule and :premises (t218.t6) :args (1))
(step t218.t8 (cl (= e4 (op e4 e0))) :rule resolution :premises (t218.t0 t218.t5 t218.t7))
(step t218.t9 (cl (= (op e4 (op e4 e0)) e0)) :rule symm :premises (t218.a1))
(step t218.t10 (cl (= e0 (op e4 (op e4 e0)))) :rule symm :premises (t218.t9))
(step t218.t11 (cl (= (op e4 e0) e4)) :rule symm :premises (t218.t8))
(step t218.t12 (cl (= (op e4 (op e4 e0)) (op e4 e4))) :rule cong :premises (t218.t2 t218.t11))
(step t218.t13 (cl (= e0 (op e4 e4))) :rule trans :premises (t218.t10 t218.t12))
(step t218.t14 (cl (= (op e4 e0) (op e4 (op e4 e4)))) :rule cong :premises (t218.t2 t218.t13))
(step t218.t15 (cl (= e4 (op e4 (op e4 e4)))) :rule trans :premises (t218.t8 t218.t14))
(step t218 (cl (not (= e4 (op e4 e0))) (not (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) :rule subproof :discharge (t218.a0 t218.a1))
(step t219 (cl (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (= e4 (op e4 e0))) :rule and_pos :args (0))
(step t220 (cl (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (= e0 (op e4 (op e4 e0)))) :rule and_pos :args (1))
(step t221 (cl (= e4 (op e4 (op e4 e4))) (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))))) :rule resolution :premises (t218 t219 t220))
(step t222 (cl (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (= e4 (op e4 (op e4 e4)))) :rule reordering :premises (t221))
(step t223 (cl (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (= e4 (op e4 (op e4 e4)))) :rule contraction :premises (t222))
(step t224 (cl (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) (= e4 (op e4 (op e4 e4)))) :rule resolution :premises (t217 t223))
(step t225 (cl (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) (not (= e4 (op e4 (op e4 e4))))) :rule implies_neg2)
(step t226 (cl (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4))))) :rule resolution :premises (t224 t225))
(step t227 (cl (=> (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4))))) :rule contraction :premises (t226))
(step t228 (cl (not (and (= e4 (op e4 e0)) (= e0 (op e4 (op e4 e0))))) (= e4 (op e4 (op e4 e4)))) :rule implies :premises (t227))
(step t229 (cl (not (= e4 (op e4 e0))) (not (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4)))) :rule resolution :premises (t216 t228))
(step t230 (cl (not (= e0 (op e4 (op e4 e0)))) (= e4 (op e4 (op e4 e4))) (not (= e4 (op e4 e0)))) :rule reordering :premises (t229))
(step t231 (cl (not (= (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit)) (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0)))) (not (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit))) (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0))) :rule equiv_pos2)
(step t232 (cl (= (= (op e4 (op e4 e4)) e4) (= e4 (op e4 (op e4 e4))))) :rule rare_rewrite :args ("eq-symm" (op e4 (op e4 e4)) e4))
(step t233 (cl (= (not (= (op e4 (op e4 e4)) e4)) (not (= e4 (op e4 (op e4 e4)))))) :rule cong :premises (t232))
(step t234 (cl (= (= e4 unit) (= unit e4))) :rule rare_rewrite :args ("eq-symm" e4 unit))
(step t235 (cl (= (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit)) (or (not (= e4 (op e4 (op e4 e4)))) (= unit e4)))) :rule cong :premises (t233 t234))
(step t236 (cl (= (not (= e4 (op e4 (op e4 e4)))) (not (= e4 (op e4 (op e4 e4)))))) :rule refl)
(step t237 (cl (= e4 e4)) :rule refl)
(step t238 (cl (= (= unit e4) (= e0 e4))) :rule cong :premises (a9 t237))
(step t239 (cl (= (or (not (= e4 (op e4 (op e4 e4)))) (= unit e4)) (or (not (= e4 (op e4 (op e4 e4)))) (= e0 e4)))) :rule cong :premises (t236 t238))
(step t240 (cl (= (= e0 e4) (= e4 e0))) :rule rare_rewrite :args ("eq-symm" e0 e4))
(step t241 (cl (= (or (not (= e4 (op e4 (op e4 e4)))) (= e0 e4)) (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0)))) :rule cong :premises (t236 t240))
(step t242 (cl (= (or (not (= e4 (op e4 (op e4 e4)))) (= unit e4)) (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0)))) :rule trans :premises (t239 t241))
(step t243 (cl (= (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit)) (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0)))) :rule trans :premises (t235 t242))
(step t244 (cl (or (not (= (op e4 (op e4 e4)) e4)) (= e4 unit))) :rule and :premises (t134) :args (1))
(step t245 (cl (or (not (= e4 (op e4 (op e4 e4)))) (= e4 e0))) :rule resolution :premises (t231 t243 t244))
(step t246 (cl (not (= e4 (op e4 (op e4 e4)))) (= e4 e0)) :rule or :premises (t245))
(step t247 (cl (= e4 e0) (not (= e4 (op e4 (op e4 e4))))) :rule reordering :premises (t246))
(step t248 (cl (not (= e0 e4))) :rule and :premises (t151) :args (1))
(step t249 (cl (not (= e4 e0))) :rule not_symm :premises (t248))
(step t250 (cl (not (= e4 (op e4 (op e4 e4))))) :rule resolution :premises (t247 t249))
(step t251 (cl (not (= (= (op e4 unit) e4) (= e4 (op e4 e0)))) (not (= (op e4 unit) e4)) (= e4 (op e4 e0))) :rule equiv_pos2)
(step t252 (cl (= (= (op e4 unit) e4) (= e4 (op e4 unit)))) :rule rare_rewrite :args ("eq-symm" (op e4 unit) e4))
(step t253 (cl (= (op e4 unit) (op e4 e0))) :rule cong :premises (t237 a9))
(step t254 (cl (= (= e4 (op e4 unit)) (= e4 (op e4 e0)))) :rule cong :premises (t237 t253))
(step t255 (cl (= (= (op e4 unit) e4) (= e4 (op e4 e0)))) :rule trans :premises (t252 t254))
(step t256 (cl (and (= (op unit e4) e4) (= (op e4 unit) e4))) :rule and :premises (t95) :args (1))
(step t257 (cl (= (op e4 unit) e4)) :rule and :premises (t256) :args (1))
(step t258 (cl (= e4 (op e4 e0))) :rule resolution :premises (t251 t255 t257))
(step t259 (cl (not (= e0 (op e4 (op e4 e0))))) :rule resolution :premises (t230 t250 t258))
(step t260 (cl (not (and (= e0 (op e4 (op e4 e0))) (not (= e0 (op e4 e0)))))) :rule resolution :premises (t215 t259))
(step t261 (cl (not (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0))))) (= e0 (op e5 (op e5 e0)))) :rule and_pos :args (0))
(step t262 (cl (= e0 (op e5 (op e5 e0))) (not (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))))) :rule reordering :premises (t261))
(step t263 (cl (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (not (= e5 (op e5 e0))) (not (= e0 (op e5 (op e5 e0))))) :rule and_neg)
(step t264 (cl (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) :rule implies_neg1)
(anchor :step t265)
(assume t265.a0 (= e5 (op e5 e0)))
(assume t265.a1 (= e0 (op e5 (op e5 e0))))
(step t265.t0 (cl (not (= (= (op e5 unit) e5) (= e5 (op e5 e0)))) (not (= (op e5 unit) e5)) (= e5 (op e5 e0))) :rule equiv_pos2)
(step t265.t1 (cl (= (= (op e5 unit) e5) (= e5 (op e5 unit)))) :rule rare_rewrite :args ("eq-symm" (op e5 unit) e5))
(step t265.t2 (cl (= e5 e5)) :rule refl)
(step t265.t3 (cl (= (op e5 unit) (op e5 e0))) :rule cong :premises (t265.t2 a9))
(step t265.t4 (cl (= (= e5 (op e5 unit)) (= e5 (op e5 e0)))) :rule cong :premises (t265.t2 t265.t3))
(step t265.t5 (cl (= (= (op e5 unit) e5) (= e5 (op e5 e0)))) :rule trans :premises (t265.t1 t265.t4))
(step t265.t6 (cl (and (= (op unit e5) e5) (= (op e5 unit) e5))) :rule and :premises (t94) :args (1))
(step t265.t7 (cl (= (op e5 unit) e5)) :rule and :premises (t265.t6) :args (1))
(step t265.t8 (cl (= e5 (op e5 e0))) :rule resolution :premises (t265.t0 t265.t5 t265.t7))
(step t265.t9 (cl (= (op e5 (op e5 e0)) e0)) :rule symm :premises (t265.a1))
(step t265.t10 (cl (= e0 (op e5 (op e5 e0)))) :rule symm :premises (t265.t9))
(step t265.t11 (cl (= (op e5 e0) e5)) :rule symm :premises (t265.t8))
(step t265.t12 (cl (= (op e5 (op e5 e0)) (op e5 e5))) :rule cong :premises (t265.t2 t265.t11))
(step t265.t13 (cl (= e0 (op e5 e5))) :rule trans :premises (t265.t10 t265.t12))
(step t265.t14 (cl (= (op e5 e0) (op e5 (op e5 e5)))) :rule cong :premises (t265.t2 t265.t13))
(step t265.t15 (cl (= e5 (op e5 (op e5 e5)))) :rule trans :premises (t265.t8 t265.t14))
(step t265 (cl (not (= e5 (op e5 e0))) (not (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) :rule subproof :discharge (t265.a0 t265.a1))
(step t266 (cl (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (= e5 (op e5 e0))) :rule and_pos :args (0))
(step t267 (cl (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (= e0 (op e5 (op e5 e0)))) :rule and_pos :args (1))
(step t268 (cl (= e5 (op e5 (op e5 e5))) (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))))) :rule resolution :premises (t265 t266 t267))
(step t269 (cl (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (= e5 (op e5 (op e5 e5)))) :rule reordering :premises (t268))
(step t270 (cl (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (= e5 (op e5 (op e5 e5)))) :rule contraction :premises (t269))
(step t271 (cl (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) (= e5 (op e5 (op e5 e5)))) :rule resolution :premises (t264 t270))
(step t272 (cl (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) (not (= e5 (op e5 (op e5 e5))))) :rule implies_neg2)
(step t273 (cl (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5))))) :rule resolution :premises (t271 t272))
(step t274 (cl (=> (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5))))) :rule contraction :premises (t273))
(step t275 (cl (not (and (= e5 (op e5 e0)) (= e0 (op e5 (op e5 e0))))) (= e5 (op e5 (op e5 e5)))) :rule implies :premises (t274))
(step t276 (cl (not (= e5 (op e5 e0))) (not (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5)))) :rule resolution :premises (t263 t275))
(step t277 (cl (not (= e0 (op e5 (op e5 e0)))) (= e5 (op e5 (op e5 e5))) (not (= e5 (op e5 e0)))) :rule reordering :premises (t276))
(step t278 (cl (not (= (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit)) (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0)))) (not (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit))) (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0))) :rule equiv_pos2)
(step t279 (cl (= (= (op e5 (op e5 e5)) e5) (= e5 (op e5 (op e5 e5))))) :rule rare_rewrite :args ("eq-symm" (op e5 (op e5 e5)) e5))
(step t280 (cl (= (not (= (op e5 (op e5 e5)) e5)) (not (= e5 (op e5 (op e5 e5)))))) :rule cong :premises (t279))
(step t281 (cl (= (= e5 unit) (= unit e5))) :rule rare_rewrite :args ("eq-symm" e5 unit))
(step t282 (cl (= (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit)) (or (not (= e5 (op e5 (op e5 e5)))) (= unit e5)))) :rule cong :premises (t280 t281))
(step t283 (cl (= (not (= e5 (op e5 (op e5 e5)))) (not (= e5 (op e5 (op e5 e5)))))) :rule refl)
(step t284 (cl (= e5 e5)) :rule refl)
(step t285 (cl (= (= unit e5) (= e0 e5))) :rule cong :premises (a9 t284))
(step t286 (cl (= (or (not (= e5 (op e5 (op e5 e5)))) (= unit e5)) (or (not (= e5 (op e5 (op e5 e5)))) (= e0 e5)))) :rule cong :premises (t283 t285))
(step t287 (cl (= (= e0 e5) (= e5 e0))) :rule rare_rewrite :args ("eq-symm" e0 e5))
(step t288 (cl (= (or (not (= e5 (op e5 (op e5 e5)))) (= e0 e5)) (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0)))) :rule cong :premises (t283 t287))
(step t289 (cl (= (or (not (= e5 (op e5 (op e5 e5)))) (= unit e5)) (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0)))) :rule trans :premises (t286 t288))
(step t290 (cl (= (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit)) (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0)))) :rule trans :premises (t282 t289))
(step t291 (cl (or (not (= (op e5 (op e5 e5)) e5)) (= e5 unit))) :rule and :premises (t133) :args (1))
(step t292 (cl (or (not (= e5 (op e5 (op e5 e5)))) (= e5 e0))) :rule resolution :premises (t278 t290 t291))
(step t293 (cl (not (= e5 (op e5 (op e5 e5)))) (= e5 e0)) :rule or :premises (t292))
(step t294 (cl (= e5 e0) (not (= e5 (op e5 (op e5 e5))))) :rule reordering :premises (t293))
(step t295 (cl (not (= e0 e5))) :rule and :premises (t150) :args (1))
(step t296 (cl (not (= e5 e0))) :rule not_symm :premises (t295))
(step t297 (cl (not (= e5 (op e5 (op e5 e5))))) :rule resolution :premises (t294 t296))
(step t298 (cl (not (= (= (op e5 unit) e5) (= e5 (op e5 e0)))) (not (= (op e5 unit) e5)) (= e5 (op e5 e0))) :rule equiv_pos2)
(step t299 (cl (= (= (op e5 unit) e5) (= e5 (op e5 unit)))) :rule rare_rewrite :args ("eq-symm" (op e5 unit) e5))
(step t300 (cl (= (op e5 unit) (op e5 e0))) :rule cong :premises (t284 a9))
(step t301 (cl (= (= e5 (op e5 unit)) (= e5 (op e5 e0)))) :rule cong :premises (t284 t300))
(step t302 (cl (= (= (op e5 unit) e5) (= e5 (op e5 e0)))) :rule trans :premises (t299 t301))
(step t303 (cl (and (= (op unit e5) e5) (= (op e5 unit) e5))) :rule and :premises (t94) :args (1))
(step t304 (cl (= (op e5 unit) e5)) :rule and :premises (t303) :args (1))
(step t305 (cl (= e5 (op e5 e0))) :rule resolution :premises (t298 t302 t304))
(step t306 (cl (not (= e0 (op e5 (op e5 e0))))) :rule resolution :premises (t277 t297 t305))
(step t307 (cl (not (and (= e0 (op e5 (op e5 e0))) (not (= e0 (op e5 e0)))))) :rule resolution :premises (t262 t306))
(step t308 (cl (and (= e0 (op e1 (op e1 e0))) (not (= e0 (op e1 e0))))) :rule resolution :premises (t85 t102 t166 t213 t260 t307))
(step t309 (cl (= e0 (op e1 (op e1 e0)))) :rule resolution :premises (t16 t308))
(step t310 (cl (not (= (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit)) (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0)))) (not (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0))) :rule equiv_pos2)
(step t311 (cl (= (= (op e1 (op e1 e1)) e1) (= e1 (op e1 (op e1 e1))))) :rule rare_rewrite :args ("eq-symm" (op e1 (op e1 e1)) e1))
(step t312 (cl (= (not (= (op e1 (op e1 e1)) e1)) (not (= e1 (op e1 (op e1 e1)))))) :rule cong :premises (t311))
(step t313 (cl (= (= e1 unit) (= unit e1))) :rule rare_rewrite :args ("eq-symm" e1 unit))
(step t314 (cl (= (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit)) (or (not (= e1 (op e1 (op e1 e1)))) (= unit e1)))) :rule cong :premises (t312 t313))
(step t315 (cl (= (not (= e1 (op e1 (op e1 e1)))) (not (= e1 (op e1 (op e1 e1)))))) :rule refl)
(step t316 (cl (= e1 e1)) :rule refl)
(step t317 (cl (= (= unit e1) (= e0 e1))) :rule cong :premises (a9 t316))
(step t318 (cl (= (or (not (= e1 (op e1 (op e1 e1)))) (= unit e1)) (or (not (= e1 (op e1 (op e1 e1)))) (= e0 e1)))) :rule cong :premises (t315 t317))
(step t319 (cl (= (= e0 e1) (= e1 e0))) :rule rare_rewrite :args ("eq-symm" e0 e1))
(step t320 (cl (= (or (not (= e1 (op e1 (op e1 e1)))) (= e0 e1)) (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0)))) :rule cong :premises (t315 t319))
(step t321 (cl (= (or (not (= e1 (op e1 (op e1 e1)))) (= unit e1)) (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0)))) :rule trans :premises (t318 t320))
(step t322 (cl (= (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit)) (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0)))) :rule trans :premises (t314 t321))
(step t323 (cl (and (or (not (= (op e0 (op e0 e0)) e0)) (= e0 unit)) (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit)))) :rule and :premises (t136) :args (0))
(step t324 (cl (or (not (= (op e1 (op e1 e1)) e1)) (= e1 unit))) :rule and :premises (t323) :args (1))
(step t325 (cl (or (not (= e1 (op e1 (op e1 e1)))) (= e1 e0))) :rule resolution :premises (t310 t322 t324))
(step t326 (cl (not (= e1 (op e1 (op e1 e1)))) (= e1 e0)) :rule or :premises (t325))
(step t327 (cl (= e1 e0) (not (= e1 (op e1 (op e1 e1))))) :rule reordering :premises (t326))
(step t328 (cl (not (= e0 e1))) :rule and :premises (t153) :args (0))
(step t329 (cl (not (= e1 e0))) :rule not_symm :premises (t328))
(step t330 (cl (not (= e1 (op e1 (op e1 e1))))) :rule resolution :premises (t327 t329))
(step t331 (cl (not (= (= (op e1 unit) e1) (= e1 (op e1 e0)))) (not (= (op e1 unit) e1)) (= e1 (op e1 e0))) :rule equiv_pos2)
(step t332 (cl (= (= (op e1 unit) e1) (= e1 (op e1 unit)))) :rule rare_rewrite :args ("eq-symm" (op e1 unit) e1))
(step t333 (cl (= (op e1 unit) (op e1 e0))) :rule cong :premises (t316 a9))
(step t334 (cl (= (= e1 (op e1 unit)) (= e1 (op e1 e0)))) :rule cong :premises (t316 t333))
(step t335 (cl (= (= (op e1 unit) e1) (= e1 (op e1 e0)))) :rule trans :premises (t332 t334))
(step t336 (cl (and (= (op unit e1) e1) (= (op e1 unit) e1))) :rule and :premises (t98) :args (1))
(step t337 (cl (= (op e1 unit) e1)) :rule and :premises (t336) :args (1))
(step t338 (cl (= e1 (op e1 e0))) :rule resolution :premises (t331 t335 t337))
(step t339 (cl) :rule resolution :premises (t14 t309 t330 t338))
