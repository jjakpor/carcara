unsat
(assume a0 (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e0) e1)) (= (op e4 e0) e2)) (= (op e4 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e4 e1) e0) (= (op e4 e1) e1)) (= (op e4 e1) e2)) (= (op e4 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e4 e2) e0) (= (op e4 e2) e1)) (= (op e4 e2) e2)) (= (op e4 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4))) (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)))))
(assume a1 (and (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4))))) (and (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) (and (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))))))
(assume a2 (or (or (or (or (and (and (and (and (not (= (op e0 e0) e0)) (not (= (op e1 e1) e0))) (not (= (op e2 e2) e0))) (not (= (op e3 e3) e0))) (not (= (op e4 e4) e0))) (and (and (and (and (not (= (op e0 e0) e1)) (not (= (op e1 e1) e1))) (not (= (op e2 e2) e1))) (not (= (op e3 e3) e1))) (not (= (op e4 e4) e1)))) (and (and (and (and (not (= (op e0 e0) e2)) (not (= (op e1 e1) e2))) (not (= (op e2 e2) e2))) (not (= (op e3 e3) e2))) (not (= (op e4 e4) e2)))) (and (and (and (and (not (= (op e0 e0) e3)) (not (= (op e1 e1) e3))) (not (= (op e2 e2) e3))) (not (= (op e3 e3) e3))) (not (= (op e4 e4) e3)))) (and (and (and (and (not (= (op e0 e0) e4)) (not (= (op e1 e1) e4))) (not (= (op e2 e2) e4))) (not (= (op e3 e3) e4))) (not (= (op e4 e4) e4)))))
(assume a3 (and (and (and (and (or (or (or (or (or (or (or (or (and (= (op e0 e0) e0) (= (op e0 e0) e0)) (and (= (op e0 e1) e0) (= (op e1 e0) e0))) (and (= (op e0 e2) e0) (= (op e2 e0) e0))) (and (= (op e0 e3) e0) (= (op e3 e0) e0))) (and (= (op e0 e4) e0) (= (op e4 e0) e0))) (or (or (or (or (and (= (op e1 e0) e0) (= (op e0 e1) e0)) (and (= (op e1 e1) e0) (= (op e1 e1) e0))) (and (= (op e1 e2) e0) (= (op e2 e1) e0))) (and (= (op e1 e3) e0) (= (op e3 e1) e0))) (and (= (op e1 e4) e0) (= (op e4 e1) e0)))) (or (or (or (or (and (= (op e2 e0) e0) (= (op e0 e2) e0)) (and (= (op e2 e1) e0) (= (op e1 e2) e0))) (and (= (op e2 e2) e0) (= (op e2 e2) e0))) (and (= (op e2 e3) e0) (= (op e3 e2) e0))) (and (= (op e2 e4) e0) (= (op e4 e2) e0)))) (or (or (or (or (and (= (op e3 e0) e0) (= (op e0 e3) e0)) (and (= (op e3 e1) e0) (= (op e1 e3) e0))) (and (= (op e3 e2) e0) (= (op e2 e3) e0))) (and (= (op e3 e3) e0) (= (op e3 e3) e0))) (and (= (op e3 e4) e0) (= (op e4 e3) e0)))) (or (or (or (or (and (= (op e4 e0) e0) (= (op e0 e4) e0)) (and (= (op e4 e1) e0) (= (op e1 e4) e0))) (and (= (op e4 e2) e0) (= (op e2 e4) e0))) (and (= (op e4 e3) e0) (= (op e3 e4) e0))) (and (= (op e4 e4) e0) (= (op e4 e4) e0)))) (or (or (or (or (or (or (or (or (and (= (op e0 e0) e1) (= (op e0 e0) e1)) (and (= (op e0 e1) e1) (= (op e1 e0) e1))) (and (= (op e0 e2) e1) (= (op e2 e0) e1))) (and (= (op e0 e3) e1) (= (op e3 e0) e1))) (and (= (op e0 e4) e1) (= (op e4 e0) e1))) (or (or (or (or (and (= (op e1 e0) e1) (= (op e0 e1) e1)) (and (= (op e1 e1) e1) (= (op e1 e1) e1))) (and (= (op e1 e2) e1) (= (op e2 e1) e1))) (and (= (op e1 e3) e1) (= (op e3 e1) e1))) (and (= (op e1 e4) e1) (= (op e4 e1) e1)))) (or (or (or (or (and (= (op e2 e0) e1) (= (op e0 e2) e1)) (and (= (op e2 e1) e1) (= (op e1 e2) e1))) (and (= (op e2 e2) e1) (= (op e2 e2) e1))) (and (= (op e2 e3) e1) (= (op e3 e2) e1))) (and (= (op e2 e4) e1) (= (op e4 e2) e1)))) (or (or (or (or (and (= (op e3 e0) e1) (= (op e0 e3) e1)) (and (= (op e3 e1) e1) (= (op e1 e3) e1))) (and (= (op e3 e2) e1) (= (op e2 e3) e1))) (and (= (op e3 e3) e1) (= (op e3 e3) e1))) (and (= (op e3 e4) e1) (= (op e4 e3) e1)))) (or (or (or (or (and (= (op e4 e0) e1) (= (op e0 e4) e1)) (and (= (op e4 e1) e1) (= (op e1 e4) e1))) (and (= (op e4 e2) e1) (= (op e2 e4) e1))) (and (= (op e4 e3) e1) (= (op e3 e4) e1))) (and (= (op e4 e4) e1) (= (op e4 e4) e1))))) (or (or (or (or (or (or (or (or (and (= (op e0 e0) e2) (= (op e0 e0) e2)) (and (= (op e0 e1) e2) (= (op e1 e0) e2))) (and (= (op e0 e2) e2) (= (op e2 e0) e2))) (and (= (op e0 e3) e2) (= (op e3 e0) e2))) (and (= (op e0 e4) e2) (= (op e4 e0) e2))) (or (or (or (or (and (= (op e1 e0) e2) (= (op e0 e1) e2)) (and (= (op e1 e1) e2) (= (op e1 e1) e2))) (and (= (op e1 e2) e2) (= (op e2 e1) e2))) (and (= (op e1 e3) e2) (= (op e3 e1) e2))) (and (= (op e1 e4) e2) (= (op e4 e1) e2)))) (or (or (or (or (and (= (op e2 e0) e2) (= (op e0 e2) e2)) (and (= (op e2 e1) e2) (= (op e1 e2) e2))) (and (= (op e2 e2) e2) (= (op e2 e2) e2))) (and (= (op e2 e3) e2) (= (op e3 e2) e2))) (and (= (op e2 e4) e2) (= (op e4 e2) e2)))) (or (or (or (or (and (= (op e3 e0) e2) (= (op e0 e3) e2)) (and (= (op e3 e1) e2) (= (op e1 e3) e2))) (and (= (op e3 e2) e2) (= (op e2 e3) e2))) (and (= (op e3 e3) e2) (= (op e3 e3) e2))) (and (= (op e3 e4) e2) (= (op e4 e3) e2)))) (or (or (or (or (and (= (op e4 e0) e2) (= (op e0 e4) e2)) (and (= (op e4 e1) e2) (= (op e1 e4) e2))) (and (= (op e4 e2) e2) (= (op e2 e4) e2))) (and (= (op e4 e3) e2) (= (op e3 e4) e2))) (and (= (op e4 e4) e2) (= (op e4 e4) e2))))) (or (or (or (or (or (or (or (or (and (= (op e0 e0) e3) (= (op e0 e0) e3)) (and (= (op e0 e1) e3) (= (op e1 e0) e3))) (and (= (op e0 e2) e3) (= (op e2 e0) e3))) (and (= (op e0 e3) e3) (= (op e3 e0) e3))) (and (= (op e0 e4) e3) (= (op e4 e0) e3))) (or (or (or (or (and (= (op e1 e0) e3) (= (op e0 e1) e3)) (and (= (op e1 e1) e3) (= (op e1 e1) e3))) (and (= (op e1 e2) e3) (= (op e2 e1) e3))) (and (= (op e1 e3) e3) (= (op e3 e1) e3))) (and (= (op e1 e4) e3) (= (op e4 e1) e3)))) (or (or (or (or (and (= (op e2 e0) e3) (= (op e0 e2) e3)) (and (= (op e2 e1) e3) (= (op e1 e2) e3))) (and (= (op e2 e2) e3) (= (op e2 e2) e3))) (and (= (op e2 e3) e3) (= (op e3 e2) e3))) (and (= (op e2 e4) e3) (= (op e4 e2) e3)))) (or (or (or (or (and (= (op e3 e0) e3) (= (op e0 e3) e3)) (and (= (op e3 e1) e3) (= (op e1 e3) e3))) (and (= (op e3 e2) e3) (= (op e2 e3) e3))) (and (= (op e3 e3) e3) (= (op e3 e3) e3))) (and (= (op e3 e4) e3) (= (op e4 e3) e3)))) (or (or (or (or (and (= (op e4 e0) e3) (= (op e0 e4) e3)) (and (= (op e4 e1) e3) (= (op e1 e4) e3))) (and (= (op e4 e2) e3) (= (op e2 e4) e3))) (and (= (op e4 e3) e3) (= (op e3 e4) e3))) (and (= (op e4 e4) e3) (= (op e4 e4) e3))))) (or (or (or (or (or (or (or (or (and (= (op e0 e0) e4) (= (op e0 e0) e4)) (and (= (op e0 e1) e4) (= (op e1 e0) e4))) (and (= (op e0 e2) e4) (= (op e2 e0) e4))) (and (= (op e0 e3) e4) (= (op e3 e0) e4))) (and (= (op e0 e4) e4) (= (op e4 e0) e4))) (or (or (or (or (and (= (op e1 e0) e4) (= (op e0 e1) e4)) (and (= (op e1 e1) e4) (= (op e1 e1) e4))) (and (= (op e1 e2) e4) (= (op e2 e1) e4))) (and (= (op e1 e3) e4) (= (op e3 e1) e4))) (and (= (op e1 e4) e4) (= (op e4 e1) e4)))) (or (or (or (or (and (= (op e2 e0) e4) (= (op e0 e2) e4)) (and (= (op e2 e1) e4) (= (op e1 e2) e4))) (and (= (op e2 e2) e4) (= (op e2 e2) e4))) (and (= (op e2 e3) e4) (= (op e3 e2) e4))) (and (= (op e2 e4) e4) (= (op e4 e2) e4)))) (or (or (or (or (and (= (op e3 e0) e4) (= (op e0 e3) e4)) (and (= (op e3 e1) e4) (= (op e1 e3) e4))) (and (= (op e3 e2) e4) (= (op e2 e3) e4))) (and (= (op e3 e3) e4) (= (op e3 e3) e4))) (and (= (op e3 e4) e4) (= (op e4 e3) e4)))) (or (or (or (or (and (= (op e4 e0) e4) (= (op e0 e4) e4)) (and (= (op e4 e1) e4) (= (op e1 e4) e4))) (and (= (op e4 e2) e4) (= (op e2 e4) e4))) (and (= (op e4 e3) e4) (= (op e3 e4) e4))) (and (= (op e4 e4) e4) (= (op e4 e4) e4))))))
(assume a4 (or (or (or (or (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1)))) (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2)))) (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3)))) (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4)))))
(assume a5 (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e1)) (= (op e2 e2) e2)) (= (op e3 e3) e3)) (= (op e4 e4) e4)))
(assume a6 (and (and (and (and (or (or (or (or (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4)) (or (or (or (or (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4))) (or (or (or (or (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3)) (= (op (op e2 e4) e2) e4))) (or (or (or (or (= (op (op e3 e0) e3) e0) (= (op (op e3 e1) e3) e1)) (= (op (op e3 e2) e3) e2)) (= (op (op e3 e3) e3) e3)) (= (op (op e3 e4) e3) e4))) (or (or (or (or (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1)) (= (op (op e4 e2) e4) e2)) (= (op (op e4 e3) e4) e3)) (= (op (op e4 e4) e4) e4))))
(assume a7 (and (and (and (and (or (or (or (or (= (op e0 (op e0 e0)) e0) (= (op e0 (op e0 e1)) e1)) (= (op e0 (op e0 e2)) e2)) (= (op e0 (op e0 e3)) e3)) (= (op e0 (op e0 e4)) e4)) (or (or (or (or (= (op e1 (op e1 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e1 (op e1 e2)) e2)) (= (op e1 (op e1 e3)) e3)) (= (op e1 (op e1 e4)) e4))) (or (or (or (or (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e2 (op e2 e3)) e3)) (= (op e2 (op e2 e4)) e4))) (or (or (or (or (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2)) (= (op e3 (op e3 e3)) e3)) (= (op e3 (op e3 e4)) e4))) (or (or (or (or (= (op e4 (op e4 e0)) e0) (= (op e4 (op e4 e1)) e1)) (= (op e4 (op e4 e2)) e2)) (= (op e4 (op e4 e3)) e3)) (= (op e4 (op e4 e4)) e4))))
(assume a8 (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0))) (or (not (= (op e0 e3) e0)) (= (op e3 e0) e0))) (or (not (= (op e0 e4) e0)) (= (op e4 e0) e0))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1))) (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)))) (and (and (and (and (or (not (= (op e2 e0) e2)) (= (op e0 e2) e2)) (or (not (= (op e2 e1) e2)) (= (op e1 e2) e2))) (or (not (= (op e2 e2) e2)) (= (op e2 e2) e2))) (or (not (= (op e2 e3) e2)) (= (op e3 e2) e2))) (or (not (= (op e2 e4) e2)) (= (op e4 e2) e2)))) (and (and (and (and (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= (op e3 e1) e3)) (= (op e1 e3) e3))) (or (not (= (op e3 e2) e3)) (= (op e2 e3) e3))) (or (not (= (op e3 e3) e3)) (= (op e3 e3) e3))) (or (not (= (op e3 e4) e3)) (= (op e4 e3) e3)))) (and (and (and (and (or (not (= (op e4 e0) e4)) (= (op e0 e4) e4)) (or (not (= (op e4 e1) e4)) (= (op e1 e4) e4))) (or (not (= (op e4 e2) e4)) (= (op e2 e4) e4))) (or (not (= (op e4 e3) e4)) (= (op e3 e4) e4))) (or (not (= (op e4 e4) e4)) (= (op e4 e4) e4)))))
(assume a9 (and (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e3 (op e3 e3)) e3)) (= (op e4 (op e4 e4)) e4)))
(assume a10 (and (and (and (and (and (and (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4)) (and (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4))) (and (and (and (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3)) (= (op (op e2 e4) e2) e4))) (and (and (and (and (= (op (op e3 e0) e3) e0) (= (op (op e3 e1) e3) e1)) (= (op (op e3 e2) e3) e2)) (= (op (op e3 e3) e3) e3)) (= (op (op e3 e4) e3) e4))) (and (and (and (and (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1)) (= (op (op e4 e2) e4) e2)) (= (op (op e4 e3) e4) e3)) (= (op (op e4 e4) e4) e4))))
(assume a11 (or (or (or (or (not (= (op (op e0 e0) (op e0 e0)) (op e0 e0))) (not (= (op (op e1 e1) (op e1 e1)) (op e1 e1)))) (not (= (op (op e2 e2) (op e2 e2)) (op e2 e2)))) (not (= (op (op e3 e3) (op e3 e3)) (op e3 e3)))) (not (= (op (op e4 e4) (op e4 e4)) (op e4 e4)))))
(assume a12 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4)))))))
(assume a13 (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3))) (not (= e2 e4))) (not (= e3 e4))))
(assume a14 (and (and (and (= e0 (op e3 e3)) (= e1 (op e0 e0))) (= e2 (op e1 e3))) (= e4 (op e1 e2))))
(assume a15 (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e1) (= (op e0 e1) e0)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e0)) (= (op e1 e1) e1)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0))))
(step t0 (cl (not (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e1) (= (op e0 e1) e0)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e0)) (= (op e1 e1) e1)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0))) (not (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))))) (not (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e1) (= (op e0 e1) e0)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e0)) (= (op e1 e1) e1)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0)))) (not (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule equiv_pos2)
(step t1 (cl (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e1) (= (op e0 e1) e0)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e0)) (= (op e1 e1) e1)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0)) (and (= (op e4 e4) e0) (= (op e4 e3) e1) (= (op e4 e2) e3) (= (op e4 e1) e2) (= (op e4 e0) e4) (= (op e3 e4) e2) (= (op e3 e3) e0) (= (op e3 e2) e1) (= (op e3 e1) e4) (= (op e3 e0) e3) (= (op e2 e4) e1) (= (op e2 e3) e4) (= (op e2 e2) e0) (= (op e2 e1) e3) (= (op e2 e0) e2) (= (op e1 e4) e3) (= (op e1 e3) e2) (= (op e1 e2) e4) (= (op e1 e1) e1) (= (op e1 e0) e0) (= (op e0 e4) e4) (= (op e0 e3) e3) (= (op e0 e2) e2) (= (op e0 e0) e1) (= (op e0 e1) e0)))) :rule hole :args ("ACI_NORM" (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e1) (= (op e0 e1) e0)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e0)) (= (op e1 e1) e1)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0)) (and (= (op e4 e4) e0) (= (op e4 e3) e1) (= (op e4 e2) e3) (= (op e4 e1) e2) (= (op e4 e0) e4) (= (op e3 e4) e2) (= (op e3 e3) e0) (= (op e3 e2) e1) (= (op e3 e1) e4) (= (op e3 e0) e3) (= (op e2 e4) e1) (= (op e2 e3) e4) (= (op e2 e2) e0) (= (op e2 e1) e3) (= (op e2 e0) e2) (= (op e1 e4) e3) (= (op e1 e3) e2) (= (op e1 e2) e4) (= (op e1 e1) e1) (= (op e1 e0) e0) (= (op e0 e4) e4) (= (op e0 e3) e3) (= (op e0 e2) e2) (= (op e0 e0) e1) (= (op e0 e1) e0)))))
(step t2 (cl (= (= (op e4 e4) e0) (= e0 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e0))
(step t3 (cl (= (= (op e4 e3) e1) (= e1 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e1))
(step t4 (cl (= (= (op e4 e2) e3) (= e3 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e3))
(step t5 (cl (= (= (op e4 e1) e2) (= e2 (op e4 e1)))) :rule rare_rewrite :args ("eq-symm" (op e4 e1) e2))
(step t6 (cl (= (= (op e4 e0) e4) (= e4 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e4))
(step t7 (cl (= (= (op e3 e4) e2) (= e2 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e2))
(step t8 (cl (= (= (op e3 e3) e0) (= e0 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e0))
(step t9 (cl (= (= (op e3 e2) e1) (= e1 (op e3 e2)))) :rule rare_rewrite :args ("eq-symm" (op e3 e2) e1))
(step t10 (cl (= (= (op e3 e1) e4) (= e4 (op e3 e1)))) :rule rare_rewrite :args ("eq-symm" (op e3 e1) e4))
(step t11 (cl (= (= (op e3 e0) e3) (= e3 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e3))
(step t12 (cl (= (= (op e2 e4) e1) (= e1 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e1))
(step t13 (cl (= (= (op e2 e3) e4) (= e4 (op e2 e3)))) :rule rare_rewrite :args ("eq-symm" (op e2 e3) e4))
(step t14 (cl (= (= (op e2 e2) e0) (= e0 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e0))
(step t15 (cl (= (= (op e2 e1) e3) (= e3 (op e2 e1)))) :rule rare_rewrite :args ("eq-symm" (op e2 e1) e3))
(step t16 (cl (= (= (op e2 e0) e2) (= e2 (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) e2))
(step t17 (cl (= (= (op e1 e4) e3) (= e3 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e3))
(step t18 (cl (= (= (op e1 e3) e2) (= e2 (op e1 e3)))) :rule rare_rewrite :args ("eq-symm" (op e1 e3) e2))
(step t19 (cl (= (= (op e1 e2) e4) (= e4 (op e1 e2)))) :rule rare_rewrite :args ("eq-symm" (op e1 e2) e4))
(step t20 (cl (= (= (op e1 e1) e1) (= e1 (op e1 e1)))) :rule rare_rewrite :args ("eq-symm" (op e1 e1) e1))
(step t21 (cl (= (= (op e1 e0) e0) (= e0 (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) e0))
(step t22 (cl (= (= (op e0 e4) e4) (= e4 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e4))
(step t23 (cl (= (= (op e0 e3) e3) (= e3 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e3))
(step t24 (cl (= (= (op e0 e2) e2) (= e2 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e2))
(step t25 (cl (= (= (op e0 e0) e1) (= e1 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e1))
(step t26 (cl (= (= (op e0 e1) e0) (= e0 (op e0 e1)))) :rule rare_rewrite :args ("eq-symm" (op e0 e1) e0))
(step t27 (cl (= (and (= (op e4 e4) e0) (= (op e4 e3) e1) (= (op e4 e2) e3) (= (op e4 e1) e2) (= (op e4 e0) e4) (= (op e3 e4) e2) (= (op e3 e3) e0) (= (op e3 e2) e1) (= (op e3 e1) e4) (= (op e3 e0) e3) (= (op e2 e4) e1) (= (op e2 e3) e4) (= (op e2 e2) e0) (= (op e2 e1) e3) (= (op e2 e0) e2) (= (op e1 e4) e3) (= (op e1 e3) e2) (= (op e1 e2) e4) (= (op e1 e1) e1) (= (op e1 e0) e0) (= (op e0 e4) e4) (= (op e0 e3) e3) (= (op e0 e2) e2) (= (op e0 e0) e1) (= (op e0 e1) e0)) (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e1 (op e1 e1)) (= e0 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e1 (op e0 e0)) (= e0 (op e0 e1))))) :rule cong :premises (t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26))
(step t28 (cl (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e1) (= (op e0 e1) e0)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e0)) (= (op e1 e1) e1)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0)) (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e1 (op e1 e1)) (= e0 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e1 (op e0 e0)) (= e0 (op e0 e1))))) :rule trans :premises (t1 t27))
(step t29 (cl (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e1) (= (op e0 e1) e0)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e0)) (= (op e1 e1) e1)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0))) (not (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e1 (op e1 e1)) (= e0 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e1 (op e0 e0)) (= e0 (op e0 e1)))))) :rule cong :premises (t28))
(step t30 (cl (and (and (= e0 (op e3 e3)) (= e1 (op e0 e0))) (= e2 (op e1 e3)))) :rule and :premises (a14) :args (0))
(step t31 (cl (and (= e0 (op e3 e3)) (= e1 (op e0 e0)))) :rule and :premises (t30) :args (0))
(step t32 (cl (= e0 (op e3 e3))) :rule and :premises (t31) :args (0))
(step t33 (cl (not (= (= e4 (op e1 e2)) (= e4 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= e4 (op e1 e2))) (= e4 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule equiv_pos2)
(step t34 (cl (= e4 e4)) :rule refl)
(step t35 (cl (not (= (= e1 (op e0 e0)) (= e1 (op (op e3 e3) (op e3 e3))))) (not (= e1 (op e0 e0))) (= e1 (op (op e3 e3) (op e3 e3)))) :rule equiv_pos2)
(step t36 (cl (= e1 e1)) :rule refl)
(step t37 (cl (= (op e0 e0) (op (op e3 e3) (op e3 e3)))) :rule cong :premises (t32 t32))
(step t38 (cl (= (= e1 (op e0 e0)) (= e1 (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t36 t37))
(step t39 (cl (= e1 (op e0 e0))) :rule and :premises (t31) :args (1))
(step t40 (cl (= e1 (op (op e3 e3) (op e3 e3)))) :rule resolution :premises (t35 t38 t39))
(step t41 (cl (not (= (= e2 (op e1 e3)) (= e2 (op (op (op e3 e3) (op e3 e3)) e3)))) (not (= e2 (op e1 e3))) (= e2 (op (op (op e3 e3) (op e3 e3)) e3))) :rule equiv_pos2)
(step t42 (cl (= e2 e2)) :rule refl)
(step t43 (cl (= e3 e3)) :rule refl)
(step t44 (cl (= (op e1 e3) (op (op (op e3 e3) (op e3 e3)) e3))) :rule cong :premises (t40 t43))
(step t45 (cl (= (= e2 (op e1 e3)) (= e2 (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t42 t44))
(step t46 (cl (= e2 (op e1 e3))) :rule and :premises (t30) :args (1))
(step t47 (cl (= e2 (op (op (op e3 e3) (op e3 e3)) e3))) :rule resolution :premises (t41 t45 t46))
(step t48 (cl (= (op e1 e2) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t40 t47))
(step t49 (cl (= (= e4 (op e1 e2)) (= e4 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t34 t48))
(step t50 (cl (= e4 (op e1 e2))) :rule and :premises (a14) :args (1))
(step t51 (cl (= e4 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t33 t49 t50))
(step t52 (cl (= (op e4 e4) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t51 t51))
(step t53 (cl (= (= e0 (op e4 e4)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t32 t52))
(step t54 (cl (= (op e4 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3))) :rule cong :premises (t51 t43))
(step t55 (cl (= (= e1 (op e4 e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)))) :rule cong :premises (t40 t54))
(step t56 (cl (= (op e4 e2) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t51 t47))
(step t57 (cl (= (= e3 (op e4 e2)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t43 t56))
(step t58 (cl (= (op e4 e1) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t51 t40))
(step t59 (cl (= (= e2 (op e4 e1)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t47 t58))
(step t60 (cl (= (op e4 e0) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))) :rule cong :premises (t51 t32))
(step t61 (cl (= (= e4 (op e4 e0)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))) :rule cong :premises (t51 t60))
(step t62 (cl (= (op e3 e4) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t43 t51))
(step t63 (cl (= (= e2 (op e3 e4)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t47 t62))
(step t64 (cl (= (op e3 e3) (op e3 e3))) :rule refl)
(step t65 (cl (= (= e0 (op e3 e3)) (= (op e3 e3) (op e3 e3)))) :rule cong :premises (t32 t64))
(step t66 (cl (= (op e3 e2) (op e3 (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t43 t47))
(step t67 (cl (= (= e1 (op e3 e2)) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t40 t66))
(step t68 (cl (= (op e3 e1) (op e3 (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t43 t40))
(step t69 (cl (= (= e4 (op e3 e1)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t51 t68))
(step t70 (cl (= (op e3 e0) (op e3 (op e3 e3)))) :rule cong :premises (t43 t32))
(step t71 (cl (= (= e3 (op e3 e0)) (= e3 (op e3 (op e3 e3))))) :rule cong :premises (t43 t70))
(step t72 (cl (= (op e2 e4) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t47 t51))
(step t73 (cl (= (= e1 (op e2 e4)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t40 t72))
(step t74 (cl (= (op e2 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) e3))) :rule cong :premises (t47 t43))
(step t75 (cl (= (= e4 (op e2 e3)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)))) :rule cong :premises (t51 t74))
(step t76 (cl (= (op e2 e2) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t47 t47))
(step t77 (cl (= (= e0 (op e2 e2)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t32 t76))
(step t78 (cl (= (op e2 e1) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t47 t40))
(step t79 (cl (= (= e3 (op e2 e1)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t43 t78))
(step t80 (cl (= (op e2 e0) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)))) :rule cong :premises (t47 t32))
(step t81 (cl (= (= e2 (op e2 e0)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))))) :rule cong :premises (t47 t80))
(step t82 (cl (= (op e1 e4) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t40 t51))
(step t83 (cl (= (= e3 (op e1 e4)) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t43 t82))
(step t84 (cl (= (= e2 (op e1 e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t47 t44))
(step t85 (cl (= (= e4 (op e1 e2)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t51 t48))
(step t86 (cl (= (op e1 e1) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t40 t40))
(step t87 (cl (= (= e1 (op e1 e1)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t40 t86))
(step t88 (cl (= (op e1 e0) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))) :rule cong :premises (t40 t32))
(step t89 (cl (= (= e0 (op e1 e0)) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule cong :premises (t32 t88))
(step t90 (cl (= (op e0 e4) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t32 t51))
(step t91 (cl (= (= e4 (op e0 e4)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t51 t90))
(step t92 (cl (= (op e0 e3) (op (op e3 e3) e3))) :rule cong :premises (t32 t43))
(step t93 (cl (= (= e3 (op e0 e3)) (= e3 (op (op e3 e3) e3)))) :rule cong :premises (t43 t92))
(step t94 (cl (= (op e0 e2) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t32 t47))
(step t95 (cl (= (= e2 (op e0 e2)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t47 t94))
(step t96 (cl (= (= e1 (op e0 e0)) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t40 t37))
(step t97 (cl (= (op e0 e1) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t32 t40))
(step t98 (cl (= (= e0 (op e0 e1)) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t32 t97))
(step t99 (cl (= (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e1 (op e1 e1)) (= e0 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e1 (op e0 e0)) (= e0 (op e0 e1))) (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op e3 e3)) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule cong :premises (t53 t55 t57 t59 t61 t63 t65 t67 t69 t71 t73 t75 t77 t79 t81 t83 t84 t85 t87 t89 t91 t93 t95 t96 t98))
(step t100 (cl (= (not (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e1 (op e1 e1)) (= e0 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e1 (op e0 e0)) (= e0 (op e0 e1)))) (not (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op e3 e3)) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))))) :rule cong :premises (t99))
(step t101 (cl (= (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule refl)
(step t102 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)))) :rule refl)
(step t103 (cl (= (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule refl)
(step t104 (cl (= (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule refl)
(step t105 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))) :rule refl)
(step t106 (cl (= (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule refl)
(step t107 (cl (= (= (op e3 e3) (op e3 e3)) true)) :rule rare_rewrite :args ("eq-refl" (op e3 e3)))
(step t108 (cl (= (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))))) :rule refl)
(step t109 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))))) :rule refl)
(step t110 (cl (= (= e3 (op e3 (op e3 e3))) (= e3 (op e3 (op e3 e3))))) :rule refl)
(step t111 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule refl)
(step t112 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)))) :rule refl)
(step t113 (cl (= (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule refl)
(step t114 (cl (= (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))))) :rule refl)
(step t115 (cl (= (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))))) :rule refl)
(step t116 (cl (= (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule refl)
(step t117 (cl (= (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)) true)) :rule rare_rewrite :args ("eq-refl" (op (op (op e3 e3) (op e3 e3)) e3)))
(step t118 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) true)) :rule rare_rewrite :args ("eq-refl" (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))
(step t119 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) :rule refl)
(step t120 (cl (= (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule refl)
(step t121 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule refl)
(step t122 (cl (= (= e3 (op (op e3 e3) e3)) (= e3 (op (op e3 e3) e3)))) :rule refl)
(step t123 (cl (= (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule refl)
(step t124 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))) true)) :rule rare_rewrite :args ("eq-refl" (op (op e3 e3) (op e3 e3))))
(step t125 (cl (= (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule refl)
(step t126 (cl (= (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op e3 e3)) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) true (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) true true (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) true (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule cong :premises (t101 t102 t103 t104 t105 t106 t107 t108 t109 t110 t111 t112 t113 t114 t115 t116 t117 t118 t119 t120 t121 t122 t123 t124 t125))
(step t127 (cl (= (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) true (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) true true (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) true (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule hole :args ("ACI_NORM" (= (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) true (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) true true (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) true (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))))
(step t128 (cl (= (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op e3 e3)) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule trans :premises (t126 t127))
(step t129 (cl (= (not (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op e3 e3)) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) (not (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))))) :rule cong :premises (t128))
(step t130 (cl (= (not (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e1 (op e1 e1)) (= e0 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e1 (op e0 e0)) (= e0 (op e0 e1)))) (not (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))))) :rule trans :premises (t100 t129))
(step t131 (cl (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e1) (= (op e0 e1) e0)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e0)) (= (op e1 e1) e1)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0))) (not (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))))) :rule trans :premises (t29 t130))
(step t132 (cl (not (and (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3)))) (= e3 (op e3 (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3)) (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule resolution :premises (t0 t131 a15))
(step t133 (cl (not (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3))) (not (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3)))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3))))) (not (= e3 (op e3 (op e3 e3)))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3))) (not (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))) (not (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))))) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)))) (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))))) (not (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= e3 (op (op e3 e3) e3))) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))) (not (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule not_and :premises (t132))
(step t134 (cl (not (= e3 (op e3 (op e3 e3)))) (not (= e3 (op (op e3 e3) e3))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))))) (not (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))) (not (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))) (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3))))) (not (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3)))) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))) (not (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)))) :rule reordering :premises (t133))
(step t135 (cl (not (= (= (op (op e2 e0) e2) e0) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op (op e2 e0) e2) e0)) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule equiv_pos2)
(step t136 (cl (= (= (op (op e2 e0) e2) e0) (= e0 (op (op e2 e0) e2)))) :rule rare_rewrite :args ("eq-symm" (op (op e2 e0) e2) e0))
(step t137 (cl (= (op (op e2 e0) e2) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t80 t47))
(step t138 (cl (= (= e0 (op (op e2 e0) e2)) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t32 t137))
(step t139 (cl (= (= (op (op e2 e0) e2) e0) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule trans :premises (t136 t138))
(step t140 (cl (and (and (and (and (and (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4)) (and (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4))) (and (and (and (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3)) (= (op (op e2 e4) e2) e4))) (and (and (and (and (= (op (op e3 e0) e3) e0) (= (op (op e3 e1) e3) e1)) (= (op (op e3 e2) e3) e2)) (= (op (op e3 e3) e3) e3)) (= (op (op e3 e4) e3) e4)))) :rule and :premises (a10) :args (0))
(step t141 (cl (and (and (and (and (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4)) (and (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4))) (and (and (and (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3)) (= (op (op e2 e4) e2) e4)))) :rule and :premises (t140) :args (0))
(step t142 (cl (and (and (and (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3)) (= (op (op e2 e4) e2) e4))) :rule and :premises (t141) :args (1))
(step t143 (cl (and (and (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3))) :rule and :premises (t142) :args (0))
(step t144 (cl (and (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2))) :rule and :premises (t143) :args (0))
(step t145 (cl (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1))) :rule and :premises (t144) :args (0))
(step t146 (cl (= (op (op e2 e0) e2) e0)) :rule and :premises (t145) :args (0))
(step t147 (cl (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t135 t139 t146))
(step t148 (cl (not (= (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4)) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t149 (cl (= (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4)) (or (= (op e0 e2) e4) (= (op e0 e2) e3) (= (op e0 e2) e2) (= (op e0 e2) e0) (= (op e0 e2) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4)) (or (= (op e0 e2) e4) (= (op e0 e2) e3) (= (op e0 e2) e2) (= (op e0 e2) e0) (= (op e0 e2) e1)))))
(step t150 (cl (= (= (op e0 e2) e4) (= e4 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e4))
(step t151 (cl (= (= (op e0 e2) e3) (= e3 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e3))
(step t152 (cl (= (= (op e0 e2) e0) (= e0 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e0))
(step t153 (cl (= (= (op e0 e2) e1) (= e1 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e1))
(step t154 (cl (= (or (= (op e0 e2) e4) (= (op e0 e2) e3) (= (op e0 e2) e2) (= (op e0 e2) e0) (= (op e0 e2) e1)) (or (= e4 (op e0 e2)) (= e3 (op e0 e2)) (= e2 (op e0 e2)) (= e0 (op e0 e2)) (= e1 (op e0 e2))))) :rule cong :premises (t150 t151 t24 t152 t153))
(step t155 (cl (= (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4)) (or (= e4 (op e0 e2)) (= e3 (op e0 e2)) (= e2 (op e0 e2)) (= e0 (op e0 e2)) (= e1 (op e0 e2))))) :rule trans :premises (t149 t154))
(step t156 (cl (= (= e4 (op e0 e2)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t51 t94))
(step t157 (cl (= (= e3 (op e0 e2)) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t43 t94))
(step t158 (cl (= (= e0 (op e0 e2)) (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t32 t94))
(step t159 (cl (= (= e1 (op e0 e2)) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t40 t94))
(step t160 (cl (= (or (= e4 (op e0 e2)) (= e3 (op e0 e2)) (= e2 (op e0 e2)) (= e0 (op e0 e2)) (= e1 (op e0 e2))) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t156 t157 t95 t158 t159))
(step t161 (cl (= (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4)) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t155 t160))
(step t162 (cl (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4))))) :rule and :premises (a0) :args (0))
(step t163 (cl (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4))))) :rule and :premises (t162) :args (0))
(step t164 (cl (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4))))) :rule and :premises (t163) :args (0))
(step t165 (cl (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)))) :rule and :premises (t164) :args (0))
(step t166 (cl (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)))) :rule and :premises (t165) :args (0))
(step t167 (cl (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4)))) :rule and :premises (t166) :args (0))
(step t168 (cl (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) :rule and :premises (t167) :args (1))
(step t169 (cl (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t148 t161 t168))
(step t170 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule or :premises (t169))
(step t171 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule reordering :premises (t170))
(step t172 (cl (not (= (not (= (op e0 e2) (op e1 e2))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (not (= (op e0 e2) (op e1 e2)))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t173 (cl (= (= (op e0 e2) (op e1 e2)) (= (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t94 t48))
(step t174 (cl (= (not (= (op e0 e2) (op e1 e2))) (not (= (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t173))
(step t175 (cl (= (= (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule rare_rewrite :args ("eq-symm" (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))
(step t176 (cl (= (not (= (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t175))
(step t177 (cl (= (not (= (op e0 e2) (op e1 e2))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t174 t176))
(step t178 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4)))))) :rule and :premises (a12) :args (0))
(step t179 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3)))))) :rule and :premises (t178) :args (0))
(step t180 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2)))))) :rule and :premises (t179) :args (0))
(step t181 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) :rule and :premises (t180) :args (1))
(step t182 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2))))) :rule and :premises (t181) :args (0))
(step t183 (cl (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2))))) :rule and :premises (t182) :args (0))
(step t184 (cl (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2))))) :rule and :premises (t183) :args (0))
(step t185 (cl (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2))))) :rule and :premises (t184) :args (0))
(step t186 (cl (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2))))) :rule and :premises (t185) :args (0))
(step t187 (cl (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2))))) :rule and :premises (t186) :args (0))
(step t188 (cl (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2))))) :rule and :premises (t187) :args (0))
(step t189 (cl (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2))))) :rule and :premises (t188) :args (0))
(step t190 (cl (not (= (op e0 e2) (op e1 e2)))) :rule and :premises (t189) :args (0))
(step t191 (cl (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t172 t177 t190))
(step t192 (cl (not (= (not (= (op e0 e0) (op e0 e2))) (not (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (not (= (op e0 e0) (op e0 e2)))) (not (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t193 (cl (= (= (op e0 e0) (op e0 e2)) (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t37 t94))
(step t194 (cl (= (not (= (op e0 e0) (op e0 e2))) (not (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t193))
(step t195 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4)))))) :rule and :premises (a12) :args (1))
(step t196 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4)))))) :rule and :premises (t195) :args (0))
(step t197 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4)))))) :rule and :premises (t196) :args (0))
(step t198 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4)))))) :rule and :premises (t197) :args (0))
(step t199 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4))))) :rule and :premises (t198) :args (0))
(step t200 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4))))) :rule and :premises (t199) :args (0))
(step t201 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3))))) :rule and :premises (t200) :args (0))
(step t202 (cl (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4))))) :rule and :premises (t201) :args (0))
(step t203 (cl (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3))))) :rule and :premises (t202) :args (0))
(step t204 (cl (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2))))) :rule and :premises (t203) :args (0))
(step t205 (cl (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4))))) :rule and :premises (t204) :args (0))
(step t206 (cl (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3))))) :rule and :premises (t205) :args (0))
(step t207 (cl (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2))))) :rule and :premises (t206) :args (0))
(step t208 (cl (not (= (op e0 e0) (op e0 e2)))) :rule and :premises (t207) :args (1))
(step t209 (cl (not (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t192 t194 t208))
(step t210 (cl (= (= (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_simplify)
(step t211 (cl (not (= (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false)) (not (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv1 :premises (t210))
(step t212 (cl (not (= (= (op e0 (op e0 e0)) e0) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) (not (= (op e0 (op e0 e0)) e0)) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) :rule equiv_pos2)
(step t213 (cl (= (= (op e0 (op e0 e0)) e0) (= e0 (op e0 (op e0 e0))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op e0 e0)) e0))
(step t214 (cl (= (op e0 (op e0 e0)) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t32 t37))
(step t215 (cl (= (= e0 (op e0 (op e0 e0))) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t32 t214))
(step t216 (cl (= (= (op e0 (op e0 e0)) e0) (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule trans :premises (t213 t215))
(step t217 (cl (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e3 (op e3 e3)) e3))) :rule and :premises (a9) :args (0))
(step t218 (cl (and (and (= (op e0 (op e0 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e2 (op e2 e2)) e2))) :rule and :premises (t217) :args (0))
(step t219 (cl (and (= (op e0 (op e0 e0)) e0) (= (op e1 (op e1 e1)) e1))) :rule and :premises (t218) :args (0))
(step t220 (cl (= (op e0 (op e0 e0)) e0)) :rule and :premises (t219) :args (0))
(step t221 (cl (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) :rule resolution :premises (t212 t216 t220))
(step t222 (cl (= (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule refl)
(step t223 (cl (= (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t221 t222))
(step t224 (cl (= (= (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_simplify)
(step t225 (cl (= (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (not (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv2 :premises (t224))
(step t226 (cl (not (not (not (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule not_not)
(step t227 (cl (= (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t225 t226))
(step t228 (cl (not (= (not (= (op e0 e1) (op e0 e2))) (not (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (not (= (op e0 e1) (op e0 e2)))) (not (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t229 (cl (= (= (op e0 e1) (op e0 e2)) (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t97 t94))
(step t230 (cl (= (not (= (op e0 e1) (op e0 e2))) (not (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t229))
(step t231 (cl (not (= (op e0 e1) (op e0 e2)))) :rule and :premises (t204) :args (1))
(step t232 (cl (not (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t228 t230 t231))
(step t233 (cl (= (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false)) :rule resolution :premises (t227 t232))
(step t234 (cl (= (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false)) :rule trans :premises (t223 t233))
(step t235 (cl (not (= (op e3 e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t211 t234))
(step t236 (cl (= (= (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_simplify)
(step t237 (cl (not (= (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false)) (not (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv1 :premises (t236))
(step t238 (cl (not (= (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 (op (op e3 e3) e3))))) (not (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3))) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 (op (op e3 e3) e3)))) :rule equiv_pos2)
(step t239 (cl (= (not (= (op e3 e0) e3)) (not (= e3 (op e3 e0))))) :rule cong :premises (t11))
(step t240 (cl (= (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= e3 (op e3 e0))) (= e3 (op e0 e3))))) :rule cong :premises (t239 t23))
(step t241 (cl (= (not (= e3 (op e3 e0))) (not (= e3 (op e3 (op e3 e3)))))) :rule cong :premises (t71))
(step t242 (cl (= (or (not (= e3 (op e3 e0))) (= e3 (op e0 e3))) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 (op (op e3 e3) e3))))) :rule cong :premises (t241 t93))
(step t243 (cl (= (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= e3 (op e3 (op e3 e3)))) (= e3 (op (op e3 e3) e3))))) :rule trans :premises (t240 t242))
(step t244 (cl (and (and (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0))) (or (not (= (op e0 e3) e0)) (= (op e3 e0) e0))) (or (not (= (op e0 e4) e0)) (= (op e4 e0) e0))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1))) (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)))) (and (and (and (and (or (not (= (op e2 e0) e2)) (= (op e0 e2) e2)) (or (not (= (op e2 e1) e2)) (= (op e1 e2) e2))) (or (not (= (op e2 e2) e2)) (= (op e2 e2) e2))) (or (not (= (op e2 e3) e2)) (= (op e3 e2) e2))) (or (not (= (op e2 e4) e2)) (= (op e4 e2) e2)))) (and (and (and (and (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= (op e3 e1) e3)) (= (op e1 e3) e3))) (or (not (= (op e3 e2) e3)) (= (op e2 e3) e3))) (or (not (= (op e3 e3) e3)) (= (op e3 e3) e3))) (or (not (= (op e3 e4) e3)) (= (op e4 e3) e3))))) :rule and :premises (a8) :args (0))
(step t245 (cl (and (and (and (and (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= (op e3 e1) e3)) (= (op e1 e3) e3))) (or (not (= (op e3 e2) e3)) (= (op e2 e3) e3))) (or (not (= (op e3 e3) e3)) (= (op e3 e3) e3))) (or (not (= (op e3 e4) e3)) (= (op e4 e3) e3)))) :rule and :premises (t244) :args (1))
(step t246 (cl (and (and (and (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= (op e3 e1) e3)) (= (op e1 e3) e3))) (or (not (= (op e3 e2) e3)) (= (op e2 e3) e3))) (or (not (= (op e3 e3) e3)) (= (op e3 e3) e3)))) :rule and :premises (t245) :args (0))
(step t247 (cl (and (and (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= (op e3 e1) e3)) (= (op e1 e3) e3))) (or (not (= (op e3 e2) e3)) (= (op e2 e3) e3)))) :rule and :premises (t246) :args (0))
(step t248 (cl (and (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= (op e3 e1) e3)) (= (op e1 e3) e3)))) :rule and :premises (t247) :args (0))
(step t249 (cl (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3))) :rule and :premises (t248) :args (0))
(step t250 (cl (or (not (= e3 (op e3 (op e3 e3)))) (= e3 (op (op e3 e3) e3)))) :rule resolution :premises (t238 t243 t249))
(step t251 (cl (not (= e3 (op e3 (op e3 e3)))) (= e3 (op (op e3 e3) e3))) :rule or :premises (t250))
(step t252 (cl (= e3 (op (op e3 e3) e3)) (not (= e3 (op e3 (op e3 e3))))) :rule reordering :premises (t251))
(step t253 (cl (= (op e3 (op e3 e3)) e3)) :rule and :premises (t217) :args (1))
(step t254 (cl (= e3 (op e3 (op e3 e3)))) :rule symm :premises (t253))
(step t255 (cl (= e3 (op (op e3 e3) e3))) :rule resolution :premises (t252 t254))
(step t256 (cl (= (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t255 t222))
(step t257 (cl (= (= (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_simplify)
(step t258 (cl (= (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (not (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv2 :premises (t257))
(step t259 (cl (not (not (not (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule not_not)
(step t260 (cl (= (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t258 t259))
(step t261 (cl (not (= (not (= (op e0 e2) (op e0 e3))) (not (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (not (= (op e0 e2) (op e0 e3)))) (not (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t262 (cl (= (= (op e0 e2) (op e0 e3)) (= (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) e3)))) :rule cong :premises (t94 t92))
(step t263 (cl (= (not (= (op e0 e2) (op e0 e3))) (not (= (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) e3))))) :rule cong :premises (t262))
(step t264 (cl (= (= (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) e3)) (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule rare_rewrite :args ("eq-symm" (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) e3)))
(step t265 (cl (= (not (= (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) e3))) (not (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t264))
(step t266 (cl (= (not (= (op e0 e2) (op e0 e3))) (not (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t263 t265))
(step t267 (cl (not (= (op e0 e2) (op e0 e3)))) :rule and :premises (t201) :args (1))
(step t268 (cl (not (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t261 t266 t267))
(step t269 (cl (= (= (op (op e3 e3) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false)) :rule resolution :premises (t260 t268))
(step t270 (cl (= (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) false)) :rule trans :premises (t256 t269))
(step t271 (cl (not (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t237 t270))
(step t272 (cl (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t171 t191 t209 t235 t271))
(step t273 (cl (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))) :rule cong :premises (t272 t64))
(step t274 (cl (not (= (= (op (op e0 e2) e0) e2) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))) (not (= (op (op e0 e2) e0) e2)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))) :rule equiv_pos2)
(step t275 (cl (= (= (op (op e0 e2) e0) e2) (= e2 (op (op e0 e2) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op e0 e2) e0) e2))
(step t276 (cl (= (op (op e0 e2) e0) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))) :rule cong :premises (t94 t32))
(step t277 (cl (= (= e2 (op (op e0 e2) e0)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))) :rule cong :premises (t47 t276))
(step t278 (cl (= (= (op (op e0 e2) e0) e2) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))) :rule trans :premises (t275 t277))
(step t279 (cl (and (and (and (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4)) (and (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4)))) :rule and :premises (t141) :args (0))
(step t280 (cl (and (and (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4))) :rule and :premises (t279) :args (0))
(step t281 (cl (and (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3))) :rule and :premises (t280) :args (0))
(step t282 (cl (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2))) :rule and :premises (t281) :args (0))
(step t283 (cl (= (op (op e0 e2) e0) e2)) :rule and :premises (t282) :args (1))
(step t284 (cl (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))) :rule resolution :premises (t274 t278 t283))
(step t285 (cl (= (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) :rule symm :premises (t284))
(step t286 (cl (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) :rule trans :premises (t273 t285))
(step t287 (cl (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) :rule refl)
(step t288 (cl (= (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t286 t287))
(step t289 (cl (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule trans :premises (t147 t288))
(step t290 (cl (= (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) :rule symm :premises (t272))
(step t291 (cl (= (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)))) :rule cong :premises (t290 t64))
(step t292 (cl (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) (op e3 e3)))) :rule trans :premises (t284 t291))
(step t293 (cl (not (= (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) (not (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4))) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_pos2)
(step t294 (cl (= (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)) (or (= (op e1 e4) e4) (= (op e1 e4) e3) (= (op e1 e4) e2) (= (op e1 e4) e0) (= (op e1 e4) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)) (or (= (op e1 e4) e4) (= (op e1 e4) e3) (= (op e1 e4) e2) (= (op e1 e4) e0) (= (op e1 e4) e1)))))
(step t295 (cl (= (= (op e1 e4) e4) (= e4 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e4))
(step t296 (cl (= (= (op e1 e4) e2) (= e2 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e2))
(step t297 (cl (= (= (op e1 e4) e0) (= e0 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e0))
(step t298 (cl (= (= (op e1 e4) e1) (= e1 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e1))
(step t299 (cl (= (or (= (op e1 e4) e4) (= (op e1 e4) e3) (= (op e1 e4) e2) (= (op e1 e4) e0) (= (op e1 e4) e1)) (or (= e4 (op e1 e4)) (= e3 (op e1 e4)) (= e2 (op e1 e4)) (= e0 (op e1 e4)) (= e1 (op e1 e4))))) :rule cong :premises (t295 t17 t296 t297 t298))
(step t300 (cl (= (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)) (or (= e4 (op e1 e4)) (= e3 (op e1 e4)) (= e2 (op e1 e4)) (= e0 (op e1 e4)) (= e1 (op e1 e4))))) :rule trans :premises (t294 t299))
(step t301 (cl (= (= e4 (op e1 e4)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t51 t82))
(step t302 (cl (= (= e2 (op e1 e4)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t47 t82))
(step t303 (cl (= (= e0 (op e1 e4)) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t32 t82))
(step t304 (cl (= (= e1 (op e1 e4)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t40 t82))
(step t305 (cl (= (or (= e4 (op e1 e4)) (= e3 (op e1 e4)) (= e2 (op e1 e4)) (= e0 (op e1 e4)) (= e1 (op e1 e4))) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule cong :premises (t301 t83 t302 t303 t304))
(step t306 (cl (= (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule trans :premises (t300 t305))
(step t307 (cl (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) :rule and :premises (t164) :args (1))
(step t308 (cl (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4))) :rule and :premises (t307) :args (1))
(step t309 (cl (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule resolution :premises (t293 t306 t308))
(step t310 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule or :premises (t309))
(step t311 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule reordering :premises (t310))
(step t312 (cl (not (= (not (= (op e1 e2) (op e1 e4))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) (not (not (= (op e1 e2) (op e1 e4)))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_pos2)
(step t313 (cl (= (= (op e1 e2) (op e1 e4)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t48 t82))
(step t314 (cl (= (not (= (op e1 e2) (op e1 e4))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule cong :premises (t313))
(step t315 (cl (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) :rule and :premises (t198) :args (1))
(step t316 (cl (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4))))) :rule and :premises (t315) :args (0))
(step t317 (cl (not (= (op e1 e2) (op e1 e4)))) :rule and :premises (t316) :args (1))
(step t318 (cl (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule resolution :premises (t312 t314 t317))
(step t319 (cl (not (= (not (= (op e1 e3) (op e1 e4))) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) (not (not (= (op e1 e3) (op e1 e4)))) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_pos2)
(step t320 (cl (= (= (op e1 e3) (op e1 e4)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t44 t82))
(step t321 (cl (= (not (= (op e1 e3) (op e1 e4))) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule cong :premises (t320))
(step t322 (cl (not (= (op e1 e3) (op e1 e4)))) :rule and :premises (t315) :args (1))
(step t323 (cl (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule resolution :premises (t319 t321 t322))
(step t324 (cl (not (= (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)) (or (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))))) (not (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1))) (or (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule equiv_pos2)
(step t325 (cl (= (not (= (op e1 e4) e1)) (not (= e1 (op e1 e4))))) :rule cong :premises (t298))
(step t326 (cl (= (= (op e4 e1) e1) (= e1 (op e4 e1)))) :rule rare_rewrite :args ("eq-symm" (op e4 e1) e1))
(step t327 (cl (= (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)) (or (not (= e1 (op e1 e4))) (= e1 (op e4 e1))))) :rule cong :premises (t325 t326))
(step t328 (cl (= (not (= e1 (op e1 e4))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule cong :premises (t304))
(step t329 (cl (= (= e1 (op e4 e1)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t40 t58))
(step t330 (cl (= (or (not (= e1 (op e1 e4))) (= e1 (op e4 e1))) (or (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))))) :rule cong :premises (t328 t329))
(step t331 (cl (= (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)) (or (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))))) :rule trans :premises (t327 t330))
(step t332 (cl (and (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0))) (or (not (= (op e0 e3) e0)) (= (op e3 e0) e0))) (or (not (= (op e0 e4) e0)) (= (op e4 e0) e0))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1))) (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)))) (and (and (and (and (or (not (= (op e2 e0) e2)) (= (op e0 e2) e2)) (or (not (= (op e2 e1) e2)) (= (op e1 e2) e2))) (or (not (= (op e2 e2) e2)) (= (op e2 e2) e2))) (or (not (= (op e2 e3) e2)) (= (op e3 e2) e2))) (or (not (= (op e2 e4) e2)) (= (op e4 e2) e2))))) :rule and :premises (t244) :args (0))
(step t333 (cl (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0))) (or (not (= (op e0 e3) e0)) (= (op e3 e0) e0))) (or (not (= (op e0 e4) e0)) (= (op e4 e0) e0))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1))) (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1))))) :rule and :premises (t332) :args (0))
(step t334 (cl (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1))) (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)))) :rule and :premises (t333) :args (1))
(step t335 (cl (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1))) :rule and :premises (t334) :args (1))
(step t336 (cl (or (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule resolution :premises (t324 t331 t335))
(step t337 (cl (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))) :rule or :premises (t336))
(step t338 (cl (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule reordering :premises (t337))
(step t339 (cl (= (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) false) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))))) :rule equiv_simplify)
(step t340 (cl (not (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) false)) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule equiv1 :premises (t339))
(step t341 (cl (= (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) :rule refl)
(step t342 (cl (not (= (= (op (op e1 e2) e1) e2) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) (not (= (op (op e1 e2) e1) e2)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))) :rule equiv_pos2)
(step t343 (cl (= (= (op (op e1 e2) e1) e2) (= e2 (op (op e1 e2) e1)))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e2) e1) e2))
(step t344 (cl (= (op (op e1 e2) e1) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t48 t40))
(step t345 (cl (= (= e2 (op (op e1 e2) e1)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t47 t344))
(step t346 (cl (= (= (op (op e1 e2) e1) e2) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule trans :premises (t343 t345))
(step t347 (cl (and (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4))) :rule and :premises (t279) :args (1))
(step t348 (cl (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3))) :rule and :premises (t347) :args (0))
(step t349 (cl (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2))) :rule and :premises (t348) :args (0))
(step t350 (cl (= (op (op e1 e2) e1) e2)) :rule and :premises (t349) :args (1))
(step t351 (cl (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))) :rule resolution :premises (t342 t346 t350))
(step t352 (cl (= (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) e3))) :rule symm :premises (t351))
(step t353 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t341 t352))
(step t354 (cl (= (= (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) false) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_simplify)
(step t355 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) false) (not (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv2 :premises (t354))
(step t356 (cl (not (not (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) :rule not_not)
(step t357 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) false) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) :rule resolution :premises (t355 t356))
(step t358 (cl (not (= (not (= e1 e2)) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (not (= e1 e2))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule equiv_pos2)
(step t359 (cl (= (= e1 e2) (= e2 e1))) :rule rare_rewrite :args ("eq-symm" e1 e2))
(step t360 (cl (= (not (= e1 e2)) (not (= e2 e1)))) :rule cong :premises (t359))
(step t361 (cl (= (= e2 e1) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t47 t40))
(step t362 (cl (= (not (= e2 e1)) (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t361))
(step t363 (cl (= (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))))
(step t364 (cl (= (not (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t363))
(step t365 (cl (= (not (= e2 e1)) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule trans :premises (t362 t364))
(step t366 (cl (= (not (= e1 e2)) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule trans :premises (t360 t365))
(step t367 (cl (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3))) (not (= e2 e4)))) :rule and :premises (a13) :args (0))
(step t368 (cl (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3)))) :rule and :premises (t367) :args (0))
(step t369 (cl (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4)))) :rule and :premises (t368) :args (0))
(step t370 (cl (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3)))) :rule and :premises (t369) :args (0))
(step t371 (cl (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2)))) :rule and :premises (t370) :args (0))
(step t372 (cl (not (= e1 e2))) :rule and :premises (t371) :args (1))
(step t373 (cl (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t358 t366 t372))
(step t374 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) false)) :rule resolution :premises (t357 t373))
(step t375 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) false)) :rule trans :premises (t353 t374))
(step t376 (cl (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule resolution :premises (t340 t375))
(step t377 (cl (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule resolution :premises (t338 t376))
(step t378 (cl (= (= (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false) (not (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule equiv_simplify)
(step t379 (cl (not (= (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false)) (not (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv1 :premises (t378))
(step t380 (cl (not (= (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0)) (or (not (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))))) (not (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule equiv_pos2)
(step t381 (cl (= (not (= (op e0 e1) e0)) (not (= e0 (op e0 e1))))) :rule cong :premises (t26))
(step t382 (cl (= (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0)) (or (not (= e0 (op e0 e1))) (= e0 (op e1 e0))))) :rule cong :premises (t381 t21))
(step t383 (cl (= (not (= e0 (op e0 e1))) (not (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule cong :premises (t98))
(step t384 (cl (= (or (not (= e0 (op e0 e1))) (= e0 (op e1 e0))) (or (not (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))))) :rule cong :premises (t383 t89))
(step t385 (cl (= (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0)) (or (not (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))))) :rule trans :premises (t382 t384))
(step t386 (cl (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0))) (or (not (= (op e0 e3) e0)) (= (op e3 e0) e0))) (or (not (= (op e0 e4) e0)) (= (op e4 e0) e0)))) :rule and :premises (t333) :args (0))
(step t387 (cl (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0))) (or (not (= (op e0 e3) e0)) (= (op e3 e0) e0)))) :rule and :premises (t386) :args (0))
(step t388 (cl (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0)))) :rule and :premises (t387) :args (0))
(step t389 (cl (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0)))) :rule and :premises (t388) :args (0))
(step t390 (cl (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) :rule and :premises (t389) :args (1))
(step t391 (cl (or (not (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule resolution :premises (t380 t385 t390))
(step t392 (cl (not (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))) :rule or :premises (t391))
(step t393 (cl (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (not (= (op e3 e3) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule reordering :premises (t392))
(step t394 (cl (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))) :rule resolution :premises (t393 t221))
(step t395 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule refl)
(step t396 (cl (= (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t394 t395))
(step t397 (cl (= (= (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false) (not (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule equiv_simplify)
(step t398 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false) (not (not (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule equiv2 :premises (t397))
(step t399 (cl (not (not (not (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule not_not)
(step t400 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false) (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t398 t399))
(step t401 (cl (not (= (not (= (op e1 e0) (op e1 e4))) (not (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) (not (not (= (op e1 e0) (op e1 e4)))) (not (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_pos2)
(step t402 (cl (= (= (op e1 e0) (op e1 e4)) (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t88 t82))
(step t403 (cl (= (not (= (op e1 e0) (op e1 e4))) (not (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule cong :premises (t402))
(step t404 (cl (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3))))) :rule and :premises (t316) :args (0))
(step t405 (cl (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4))))) :rule and :premises (t404) :args (0))
(step t406 (cl (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3))))) :rule and :premises (t405) :args (0))
(step t407 (cl (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2))))) :rule and :premises (t406) :args (0))
(step t408 (cl (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4))))) :rule and :premises (t407) :args (0))
(step t409 (cl (not (= (op e1 e0) (op e1 e4)))) :rule and :premises (t408) :args (1))
(step t410 (cl (not (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule resolution :premises (t401 t403 t409))
(step t411 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false)) :rule resolution :premises (t400 t410))
(step t412 (cl (= (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false)) :rule trans :premises (t396 t411))
(step t413 (cl (not (= (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule resolution :premises (t379 t412))
(step t414 (cl (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t311 t318 t323 t377 t413))
(step t415 (cl (not (= (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) (not (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4))) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule equiv_pos2)
(step t416 (cl (= (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (= (op e0 e4) e4) (= (op e0 e3) e4) (= (op e0 e2) e4) (= (op e0 e0) e4) (= (op e0 e1) e4)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (= (op e0 e4) e4) (= (op e0 e3) e4) (= (op e0 e2) e4) (= (op e0 e0) e4) (= (op e0 e1) e4)))))
(step t417 (cl (= (= (op e0 e3) e4) (= e4 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e4))
(step t418 (cl (= (= (op e0 e0) e4) (= e4 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e4))
(step t419 (cl (= (= (op e0 e1) e4) (= e4 (op e0 e1)))) :rule rare_rewrite :args ("eq-symm" (op e0 e1) e4))
(step t420 (cl (= (or (= (op e0 e4) e4) (= (op e0 e3) e4) (= (op e0 e2) e4) (= (op e0 e0) e4) (= (op e0 e1) e4)) (or (= e4 (op e0 e4)) (= e4 (op e0 e3)) (= e4 (op e0 e2)) (= e4 (op e0 e0)) (= e4 (op e0 e1))))) :rule cong :premises (t22 t417 t150 t418 t419))
(step t421 (cl (= (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (= e4 (op e0 e4)) (= e4 (op e0 e3)) (= e4 (op e0 e2)) (= e4 (op e0 e0)) (= e4 (op e0 e1))))) :rule trans :premises (t416 t420))
(step t422 (cl (= (= e4 (op e0 e3)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) e3)))) :rule cong :premises (t51 t92))
(step t423 (cl (= (= e4 (op e0 e0)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t51 t37))
(step t424 (cl (= (= e4 (op e0 e1)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t51 t97))
(step t425 (cl (= (or (= e4 (op e0 e4)) (= e4 (op e0 e3)) (= e4 (op e0 e2)) (= e4 (op e0 e0)) (= e4 (op e0 e1))) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule cong :premises (t91 t422 t156 t423 t424))
(step t426 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) e3)) (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule rare_rewrite :args ("eq-symm" (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) e3)))
(step t427 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule refl)
(step t428 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule rare_rewrite :args ("eq-symm" (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))
(step t429 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule refl)
(step t430 (cl (= (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) e3)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule cong :premises (t121 t426 t427 t428 t429))
(step t431 (cl (= (or (= e4 (op e0 e4)) (= e4 (op e0 e3)) (= e4 (op e0 e2)) (= e4 (op e0 e0)) (= e4 (op e0 e1))) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule trans :premises (t425 t430))
(step t432 (cl (= (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule trans :premises (t421 t431))
(step t433 (cl (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4)))))) :rule and :premises (a1) :args (0))
(step t434 (cl (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4)))))) :rule and :premises (t433) :args (0))
(step t435 (cl (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)))))) :rule and :premises (t434) :args (0))
(step t436 (cl (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4))))) :rule and :premises (t435) :args (0))
(step t437 (cl (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) :rule and :premises (t436) :args (1))
(step t438 (cl (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4))) :rule and :premises (t437) :args (0))
(step t439 (cl (or (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule resolution :premises (t415 t432 t438))
(step t440 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))) :rule or :premises (t439))
(step t441 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))) (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule reordering :premises (t440))
(step t442 (cl (not (= (not (= e1 e4)) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (not (= e1 e4))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t443 (cl (= (= e1 e4) (= e4 e1))) :rule rare_rewrite :args ("eq-symm" e1 e4))
(step t444 (cl (= (not (= e1 e4)) (not (= e4 e1)))) :rule cong :premises (t443))
(step t445 (cl (= (= e4 e1) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t51 t40))
(step t446 (cl (= (not (= e4 e1)) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t445))
(step t447 (cl (= (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t428))
(step t448 (cl (= (not (= e4 e1)) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t446 t447))
(step t449 (cl (= (not (= e1 e4)) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t444 t448))
(step t450 (cl (not (= e1 e4))) :rule and :premises (t369) :args (1))
(step t451 (cl (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t442 t449 t450))
(step t452 (cl (= (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))) false) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3))))))) :rule equiv_simplify)
(step t453 (cl (not (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))) false)) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule equiv1 :premises (t452))
(step t454 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule refl)
(step t455 (cl (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op e3 e3))) :rule symm :premises (t221))
(step t456 (cl (= (op (op e3 e3) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))) :rule trans :premises (t455 t394))
(step t457 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule cong :premises (t454 t456))
(step t458 (cl (= (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) false) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))))) :rule equiv_simplify)
(step t459 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) false) (not (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))))) :rule equiv2 :premises (t458))
(step t460 (cl (not (not (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))) :rule not_not)
(step t461 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) false) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))) :rule resolution :premises (t459 t460))
(step t462 (cl (not (= (not (= (op e1 e0) (op e1 e2))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))))) (not (not (= (op e1 e0) (op e1 e2)))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule equiv_pos2)
(step t463 (cl (= (= (op e1 e0) (op e1 e2)) (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t88 t48))
(step t464 (cl (= (not (= (op e1 e0) (op e1 e2))) (not (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t463))
(step t465 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule rare_rewrite :args ("eq-symm" (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))
(step t466 (cl (= (not (= (op (op (op e3 e3) (op e3 e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))))) :rule cong :premises (t465))
(step t467 (cl (= (not (= (op e1 e0) (op e1 e2))) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))))) :rule trans :premises (t464 t466))
(step t468 (cl (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3))))) :rule and :premises (t408) :args (0))
(step t469 (cl (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2))))) :rule and :premises (t468) :args (0))
(step t470 (cl (not (= (op e1 e0) (op e1 e2)))) :rule and :premises (t469) :args (1))
(step t471 (cl (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule resolution :premises (t462 t467 t470))
(step t472 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) false)) :rule resolution :premises (t461 t471))
(step t473 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))) false)) :rule trans :premises (t457 t472))
(step t474 (cl (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op e3 e3) (op e3 e3)))))) :rule resolution :premises (t453 t473))
(step t475 (cl (= (= (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_simplify)
(step t476 (cl (not (= (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false)) (not (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv1 :premises (t475))
(step t477 (cl (= (op (op e3 e3) e3) e3)) :rule symm :premises (t255))
(step t478 (cl (= (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t477 t454))
(step t479 (cl (= (= (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_simplify)
(step t480 (cl (= (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv2 :premises (t479))
(step t481 (cl (not (not (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule not_not)
(step t482 (cl (= (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t480 t481))
(step t483 (cl (not (= (not (= e3 e4)) (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (not (= e3 e4))) (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t484 (cl (= (= e3 e4) (= e4 e3))) :rule rare_rewrite :args ("eq-symm" e3 e4))
(step t485 (cl (= (not (= e3 e4)) (not (= e4 e3)))) :rule cong :premises (t484))
(step t486 (cl (= (= e4 e3) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3))) :rule cong :premises (t51 t43))
(step t487 (cl (= (not (= e4 e3)) (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)))) :rule cong :premises (t486))
(step t488 (cl (= (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule rare_rewrite :args ("eq-symm" (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3))
(step t489 (cl (= (not (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t488))
(step t490 (cl (= (not (= e4 e3)) (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t487 t489))
(step t491 (cl (= (not (= e3 e4)) (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t485 t490))
(step t492 (cl (not (= e3 e4))) :rule and :premises (a13) :args (1))
(step t493 (cl (not (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t483 t491 t492))
(step t494 (cl (= (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false)) :rule resolution :premises (t482 t493))
(step t495 (cl (= (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false)) :rule trans :premises (t478 t494))
(step t496 (cl (not (= (op (op e3 e3) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t476 t495))
(step t497 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t441 t191 t451 t474 t496))
(step t498 (cl (not (= (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))))))) (not (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1))) (or (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) :rule equiv_pos2)
(step t499 (cl (= (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (= (op e1 e4) e1) (= (op e1 e3) e1) (= (op e1 e2) e1) (= (op e1 e0) e1) (= (op e1 e1) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (= (op e1 e4) e1) (= (op e1 e3) e1) (= (op e1 e2) e1) (= (op e1 e0) e1) (= (op e1 e1) e1)))))
(step t500 (cl (= (= (op e1 e3) e1) (= e1 (op e1 e3)))) :rule rare_rewrite :args ("eq-symm" (op e1 e3) e1))
(step t501 (cl (= (= (op e1 e2) e1) (= e1 (op e1 e2)))) :rule rare_rewrite :args ("eq-symm" (op e1 e2) e1))
(step t502 (cl (= (= (op e1 e0) e1) (= e1 (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) e1))
(step t503 (cl (= (or (= (op e1 e4) e1) (= (op e1 e3) e1) (= (op e1 e2) e1) (= (op e1 e0) e1) (= (op e1 e1) e1)) (or (= e1 (op e1 e4)) (= e1 (op e1 e3)) (= e1 (op e1 e2)) (= e1 (op e1 e0)) (= e1 (op e1 e1))))) :rule cong :premises (t298 t500 t501 t502 t20))
(step t504 (cl (= (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (= e1 (op e1 e4)) (= e1 (op e1 e3)) (= e1 (op e1 e2)) (= e1 (op e1 e0)) (= e1 (op e1 e1))))) :rule trans :premises (t499 t503))
(step t505 (cl (= (= e1 (op e1 e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t40 t44))
(step t506 (cl (= (= e1 (op e1 e2)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t40 t48))
(step t507 (cl (= (= e1 (op e1 e0)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule cong :premises (t40 t88))
(step t508 (cl (= (or (= e1 (op e1 e4)) (= e1 (op e1 e3)) (= e1 (op e1 e2)) (= e1 (op e1 e0)) (= e1 (op e1 e1))) (or (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))))))) :rule cong :premises (t304 t505 t506 t507 t87))
(step t509 (cl (= (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))))))) :rule trans :premises (t504 t508))
(step t510 (cl (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) :rule and :premises (t435) :args (1))
(step t511 (cl (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3))))) :rule and :premises (t510) :args (0))
(step t512 (cl (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2))))) :rule and :premises (t511) :args (0))
(step t513 (cl (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1))))) :rule and :premises (t512) :args (0))
(step t514 (cl (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) :rule and :premises (t513) :args (1))
(step t515 (cl (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1))) :rule and :premises (t514) :args (0))
(step t516 (cl (or (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) :rule resolution :premises (t498 t509 t515))
(step t517 (cl (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))))) :rule or :premises (t516))
(step t518 (cl (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule reordering :premises (t517))
(step t519 (cl (not (= (not (= (op e0 e0) (op e1 e0))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))))) (not (not (= (op e0 e0) (op e1 e0)))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule equiv_pos2)
(step t520 (cl (= (= (op e0 e0) (op e1 e0)) (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule cong :premises (t37 t88))
(step t521 (cl (= (not (= (op e0 e0) (op e1 e0))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3)))))) :rule cong :premises (t520))
(step t522 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1)))))) :rule and :premises (t180) :args (0))
(step t523 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0))))) :rule and :premises (t522) :args (0))
(step t524 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0))))) :rule and :premises (t523) :args (0))
(step t525 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0))))) :rule and :premises (t524) :args (0))
(step t526 (cl (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0))))) :rule and :premises (t525) :args (0))
(step t527 (cl (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0))))) :rule and :premises (t526) :args (0))
(step t528 (cl (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0))))) :rule and :premises (t527) :args (0))
(step t529 (cl (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0))))) :rule and :premises (t528) :args (0))
(step t530 (cl (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0))))) :rule and :premises (t529) :args (0))
(step t531 (cl (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0))))) :rule and :premises (t530) :args (0))
(step t532 (cl (not (= (op e0 e0) (op e1 e0)))) :rule and :premises (t531) :args (0))
(step t533 (cl (not (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op e3 e3))))) :rule resolution :premises (t519 t521 t532))
(step t534 (cl (= (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op e3 e3) (op e3 e3))))) :rule resolution :premises (t518 t533 t373 t451 t377))
(step t535 (cl (not (= (= (op (op e3 e4) e3) e4) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) e3)))) (not (= (op (op e3 e4) e3) e4)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) e3))) :rule equiv_pos2)
(step t536 (cl (= (= (op (op e3 e4) e3) e4) (= e4 (op (op e3 e4) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op e3 e4) e3) e4))
(step t537 (cl (= (op (op e3 e4) e3) (op (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) e3))) :rule cong :premises (t62 t43))
(step t538 (cl (= (= e4 (op (op e3 e4) e3)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) e3)))) :rule cong :premises (t51 t537))
(step t539 (cl (= (= (op (op e3 e4) e3) e4) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) e3)))) :rule trans :premises (t536 t538))
(step t540 (cl (and (and (and (and (= (op (op e3 e0) e3) e0) (= (op (op e3 e1) e3) e1)) (= (op (op e3 e2) e3) e2)) (= (op (op e3 e3) e3) e3)) (= (op (op e3 e4) e3) e4))) :rule and :premises (t140) :args (1))
(step t541 (cl (= (op (op e3 e4) e3) e4)) :rule and :premises (t540) :args (1))
(step t542 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) e3))) :rule resolution :premises (t535 t539 t541))
(step t543 (cl (not (= (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)) (or (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3))) (or (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t544 (cl (= (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)) (or (= (op e4 e2) e3) (= (op e3 e2) e3) (= (op e2 e2) e3) (= (op e0 e2) e3) (= (op e1 e2) e3)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)) (or (= (op e4 e2) e3) (= (op e3 e2) e3) (= (op e2 e2) e3) (= (op e0 e2) e3) (= (op e1 e2) e3)))))
(step t545 (cl (= (= (op e3 e2) e3) (= e3 (op e3 e2)))) :rule rare_rewrite :args ("eq-symm" (op e3 e2) e3))
(step t546 (cl (= (= (op e2 e2) e3) (= e3 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e3))
(step t547 (cl (= (= (op e1 e2) e3) (= e3 (op e1 e2)))) :rule rare_rewrite :args ("eq-symm" (op e1 e2) e3))
(step t548 (cl (= (or (= (op e4 e2) e3) (= (op e3 e2) e3) (= (op e2 e2) e3) (= (op e0 e2) e3) (= (op e1 e2) e3)) (or (= e3 (op e4 e2)) (= e3 (op e3 e2)) (= e3 (op e2 e2)) (= e3 (op e0 e2)) (= e3 (op e1 e2))))) :rule cong :premises (t4 t545 t546 t151 t547))
(step t549 (cl (= (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)) (or (= e3 (op e4 e2)) (= e3 (op e3 e2)) (= e3 (op e2 e2)) (= e3 (op e0 e2)) (= e3 (op e1 e2))))) :rule trans :premises (t544 t548))
(step t550 (cl (= (= e3 (op e3 e2)) (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t43 t66))
(step t551 (cl (= (= e3 (op e2 e2)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t43 t76))
(step t552 (cl (= (= e3 (op e1 e2)) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t43 t48))
(step t553 (cl (= (or (= e3 (op e4 e2)) (= e3 (op e3 e2)) (= e3 (op e2 e2)) (= e3 (op e0 e2)) (= e3 (op e1 e2))) (or (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t57 t550 t551 t157 t552))
(step t554 (cl (= (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)) (or (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t549 t553))
(step t555 (cl (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) :rule and :premises (t434) :args (1))
(step t556 (cl (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3))))) :rule and :premises (t555) :args (0))
(step t557 (cl (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) :rule and :premises (t556) :args (1))
(step t558 (cl (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3))) :rule and :premises (t557) :args (1))
(step t559 (cl (or (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t543 t554 t558))
(step t560 (cl (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule or :premises (t559))
(step t561 (cl (= e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule reordering :premises (t560))
(step t562 (cl (= (= (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_simplify)
(step t563 (cl (not (= (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) false)) (not (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv1 :premises (t562))
(step t564 (cl (not (= (= (op (op e1 e3) e1) e3) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))))) (not (= (op (op e1 e3) e1) e3)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))))) :rule equiv_pos2)
(step t565 (cl (= (= (op (op e1 e3) e1) e3) (= e3 (op (op e1 e3) e1)))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e3) e1) e3))
(step t566 (cl (= (op (op e1 e3) e1) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t44 t40))
(step t567 (cl (= (= e3 (op (op e1 e3) e1)) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t43 t566))
(step t568 (cl (= (= (op (op e1 e3) e1) e3) (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3)))))) :rule trans :premises (t565 t567))
(step t569 (cl (= (op (op e1 e3) e1) e3)) :rule and :premises (t348) :args (1))
(step t570 (cl (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))))) :rule resolution :premises (t564 t568 t569))
(step t571 (cl (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule refl)
(step t572 (cl (= (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t570 t571))
(step t573 (cl (= (= (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_simplify)
(step t574 (cl (= (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv2 :premises (t573))
(step t575 (cl (not (not (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule not_not)
(step t576 (cl (= (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) false) (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t574 t575))
(step t577 (cl (not (= (not (= (op e2 e1) (op e2 e2))) (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (not (= (op e2 e1) (op e2 e2)))) (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t578 (cl (= (= (op e2 e1) (op e2 e2)) (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t78 t76))
(step t579 (cl (= (not (= (op e2 e1) (op e2 e2))) (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t578))
(step t580 (cl (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) :rule and :premises (t197) :args (1))
(step t581 (cl (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4))))) :rule and :premises (t580) :args (0))
(step t582 (cl (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3))))) :rule and :premises (t581) :args (0))
(step t583 (cl (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4))))) :rule and :premises (t582) :args (0))
(step t584 (cl (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3))))) :rule and :premises (t583) :args (0))
(step t585 (cl (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2))))) :rule and :premises (t584) :args (0))
(step t586 (cl (not (= (op e2 e1) (op e2 e2)))) :rule and :premises (t585) :args (1))
(step t587 (cl (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t577 t579 t586))
(step t588 (cl (= (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) false)) :rule resolution :premises (t576 t587))
(step t589 (cl (= (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))) false)) :rule trans :premises (t572 t588))
(step t590 (cl (not (= e3 (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t563 t589))
(step t591 (cl (= (= (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_simplify)
(step t592 (cl (not (= (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) false)) (not (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv1 :premises (t591))
(step t593 (cl (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t570 t287))
(step t594 (cl (not (= (= (op (op e2 e1) e2) e1) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) e3))))) (not (= (op (op e2 e1) e2) e1)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule equiv_pos2)
(step t595 (cl (= (= (op (op e2 e1) e2) e1) (= e1 (op (op e2 e1) e2)))) :rule rare_rewrite :args ("eq-symm" (op (op e2 e1) e2) e1))
(step t596 (cl (= (op (op e2 e1) e2) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t78 t47))
(step t597 (cl (= (= e1 (op (op e2 e1) e2)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t40 t596))
(step t598 (cl (= (= (op (op e2 e1) e2) e1) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule trans :premises (t595 t597))
(step t599 (cl (= (op (op e2 e1) e2) e1)) :rule and :premises (t145) :args (1))
(step t600 (cl (= (op (op e3 e3) (op e3 e3)) (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t594 t598 t599))
(step t601 (cl (= (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) :rule symm :premises (t600))
(step t602 (cl (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) :rule trans :premises (t593 t601))
(step t603 (cl (= (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t254 t602))
(step t604 (cl (= (= (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))) false) (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) :rule equiv_simplify)
(step t605 (cl (= (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))) false) (not (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) :rule equiv2 :premises (t604))
(step t606 (cl (not (not (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))) :rule not_not)
(step t607 (cl (= (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))) false) (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))) :rule resolution :premises (t605 t606))
(step t608 (cl (not (= (not (= (op e0 e0) (op e3 e0))) (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) (not (not (= (op e0 e0) (op e3 e0)))) (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))))) :rule equiv_pos2)
(step t609 (cl (= (= (op e0 e0) (op e3 e0)) (= (op (op e3 e3) (op e3 e3)) (op e3 (op e3 e3))))) :rule cong :premises (t37 t70))
(step t610 (cl (= (not (= (op e0 e0) (op e3 e0))) (not (= (op (op e3 e3) (op e3 e3)) (op e3 (op e3 e3)))))) :rule cong :premises (t609))
(step t611 (cl (= (= (op (op e3 e3) (op e3 e3)) (op e3 (op e3 e3))) (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))))) :rule rare_rewrite :args ("eq-symm" (op (op e3 e3) (op e3 e3)) (op e3 (op e3 e3))))
(step t612 (cl (= (not (= (op (op e3 e3) (op e3 e3)) (op e3 (op e3 e3)))) (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t611))
(step t613 (cl (= (not (= (op e0 e0) (op e3 e0))) (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3)))))) :rule trans :premises (t610 t612))
(step t614 (cl (not (= (op e0 e0) (op e3 e0)))) :rule and :premises (t530) :args (1))
(step t615 (cl (not (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))))) :rule resolution :premises (t608 t613 t614))
(step t616 (cl (= (= (op e3 (op e3 e3)) (op (op e3 e3) (op e3 e3))) false)) :rule resolution :premises (t607 t615))
(step t617 (cl (= (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))) false)) :rule trans :premises (t603 t616))
(step t618 (cl (not (= e3 (op e3 (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t592 t617))
(step t619 (cl (= e3 (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t561 t493 t271 t590 t618))
(step t620 (cl (= (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t619 t454))
(step t621 (cl (not (= (= (op (op e4 e2) e4) e2) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (= (op (op e4 e2) e4) e2)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t622 (cl (= (= (op (op e4 e2) e4) e2) (= e2 (op (op e4 e2) e4)))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e2) e4) e2))
(step t623 (cl (= (op (op e4 e2) e4) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t56 t51))
(step t624 (cl (= (= e2 (op (op e4 e2) e4)) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t47 t623))
(step t625 (cl (= (= (op (op e4 e2) e4) e2) (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t622 t624))
(step t626 (cl (and (and (and (and (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1)) (= (op (op e4 e2) e4) e2)) (= (op (op e4 e3) e4) e3)) (= (op (op e4 e4) e4) e4))) :rule and :premises (a10) :args (1))
(step t627 (cl (and (and (and (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1)) (= (op (op e4 e2) e4) e2)) (= (op (op e4 e3) e4) e3))) :rule and :premises (t626) :args (0))
(step t628 (cl (and (and (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1)) (= (op (op e4 e2) e4) e2))) :rule and :premises (t627) :args (0))
(step t629 (cl (= (op (op e4 e2) e4) e2)) :rule and :premises (t628) :args (1))
(step t630 (cl (= (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t621 t625 t629))
(step t631 (cl (= (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op e3 e3) (op e3 e3)) e3))) :rule symm :premises (t630))
(step t632 (cl (= (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op e3 e3) (op e3 e3)) e3))) :rule trans :premises (t620 t631))
(step t633 (cl (= (op (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) e3) (op (op (op (op e3 e3) (op e3 e3)) e3) e3))) :rule cong :premises (t632 t43))
(step t634 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) e3))) :rule trans :premises (t542 t633))
(step t635 (cl (not (= (= (op (op e4 e1) e4) e1) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (= (op (op e4 e1) e4) e1)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t636 (cl (= (= (op (op e4 e1) e4) e1) (= e1 (op (op e4 e1) e4)))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e1) e4) e1))
(step t637 (cl (= (op (op e4 e1) e4) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t58 t51))
(step t638 (cl (= (= e1 (op (op e4 e1) e4)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t40 t637))
(step t639 (cl (= (= (op (op e4 e1) e4) e1) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t636 t638))
(step t640 (cl (and (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1))) :rule and :premises (t628) :args (0))
(step t641 (cl (= (op (op e4 e1) e4) e1)) :rule and :premises (t640) :args (1))
(step t642 (cl (= (op (op e3 e3) (op e3 e3)) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t635 t639 t641))
(step t643 (cl (= (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t352 t454))
(step t644 (cl (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule trans :premises (t642 t643))
(step t645 (cl (not (= (= (op (op e1 e4) e1) e4) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op e3 e3) (op e3 e3)))))) (not (= (op (op e1 e4) e1) e4)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op e3 e3) (op e3 e3))))) :rule equiv_pos2)
(step t646 (cl (= (= (op (op e1 e4) e1) e4) (= e4 (op (op e1 e4) e1)))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e4) e1) e4))
(step t647 (cl (= (op (op e1 e4) e1) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t82 t40))
(step t648 (cl (= (= e4 (op (op e1 e4) e1)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op e3 e3) (op e3 e3)))))) :rule cong :premises (t51 t647))
(step t649 (cl (= (= (op (op e1 e4) e1) e4) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op e3 e3) (op e3 e3)))))) :rule trans :premises (t646 t648))
(step t650 (cl (= (op (op e1 e4) e1) e4)) :rule and :premises (t347) :args (1))
(step t651 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op e3 e3) (op e3 e3))))) :rule resolution :premises (t645 t649 t650))
(step t652 (cl (not (= (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))))) (not (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1))) (or (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule equiv_pos2)
(step t653 (cl (= (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e4 e3) e1) (= (op e4 e2) e1) (= (op e4 e0) e1) (= (op e4 e1) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e4 e3) e1) (= (op e4 e2) e1) (= (op e4 e0) e1) (= (op e4 e1) e1)))))
(step t654 (cl (= (= (op e4 e4) e1) (= e1 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e1))
(step t655 (cl (= (= (op e4 e2) e1) (= e1 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e1))
(step t656 (cl (= (= (op e4 e0) e1) (= e1 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e1))
(step t657 (cl (= (or (= (op e4 e4) e1) (= (op e4 e3) e1) (= (op e4 e2) e1) (= (op e4 e0) e1) (= (op e4 e1) e1)) (or (= e1 (op e4 e4)) (= e1 (op e4 e3)) (= e1 (op e4 e2)) (= e1 (op e4 e0)) (= e1 (op e4 e1))))) :rule cong :premises (t654 t3 t655 t656 t326))
(step t658 (cl (= (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (= e1 (op e4 e4)) (= e1 (op e4 e3)) (= e1 (op e4 e2)) (= e1 (op e4 e0)) (= e1 (op e4 e1))))) :rule trans :premises (t653 t657))
(step t659 (cl (= (= e1 (op e4 e4)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t40 t52))
(step t660 (cl (= (= e1 (op e4 e2)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t40 t56))
(step t661 (cl (= (= e1 (op e4 e0)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))) :rule cong :premises (t40 t60))
(step t662 (cl (= (or (= e1 (op e4 e4)) (= e1 (op e4 e3)) (= e1 (op e4 e2)) (= e1 (op e4 e0)) (= e1 (op e4 e1))) (or (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))))) :rule cong :premises (t659 t55 t660 t661 t329))
(step t663 (cl (= (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))))) :rule trans :premises (t658 t662))
(step t664 (cl (and (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) (and (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))))) :rule and :premises (a1) :args (1))
(step t665 (cl (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3))))) :rule and :premises (t664) :args (0))
(step t666 (cl (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2))))) :rule and :premises (t665) :args (0))
(step t667 (cl (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1))))) :rule and :premises (t666) :args (0))
(step t668 (cl (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) :rule and :premises (t667) :args (1))
(step t669 (cl (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1))) :rule and :premises (t668) :args (0))
(step t670 (cl (or (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))))) :rule resolution :premises (t652 t663 t669))
(step t671 (cl (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3))))) :rule or :premises (t670))
(step t672 (cl (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op e3 e3) (op e3 e3)))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule reordering :premises (t671))
(step t673 (cl (not (= (not (= (op e0 e0) (op e4 e0))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))))) (not (not (= (op e0 e0) (op e4 e0)))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))) :rule equiv_pos2)
(step t674 (cl (= (= (op e0 e0) (op e4 e0)) (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))) :rule cong :premises (t37 t60))
(step t675 (cl (= (not (= (op e0 e0) (op e4 e0))) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))))) :rule cong :premises (t674))
(step t676 (cl (not (= (op e0 e0) (op e4 e0)))) :rule and :premises (t529) :args (1))
(step t677 (cl (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3))))) :rule resolution :premises (t673 t675 t676))
(step t678 (cl (= (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_simplify)
(step t679 (cl (not (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false)) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv1 :premises (t678))
(step t680 (cl (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) e3)) :rule symm :premises (t570))
(step t681 (cl (= (op (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op e3 e3) (op e3 e3))) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3)))) :rule cong :premises (t680 t287))
(step t682 (cl (= (op (op e3 e3) (op e3 e3)) (op e3 (op (op (op e3 e3) (op e3 e3)) e3)))) :rule trans :premises (t600 t681))
(step t683 (cl (= (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule refl)
(step t684 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t682 t683))
(step t685 (cl (= (= (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_simplify)
(step t686 (cl (= (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false) (not (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv2 :premises (t685))
(step t687 (cl (not (not (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule not_not)
(step t688 (cl (= (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false) (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule resolution :premises (t686 t687))
(step t689 (cl (not (= (not (= (op e3 e2) (op e4 e2))) (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (not (= (op e3 e2) (op e4 e2)))) (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t690 (cl (= (= (op e3 e2) (op e4 e2)) (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t66 t56))
(step t691 (cl (= (not (= (op e3 e2) (op e4 e2))) (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t690))
(step t692 (cl (not (= (op e3 e2) (op e4 e2)))) :rule and :premises (t181) :args (1))
(step t693 (cl (not (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t689 t691 t692))
(step t694 (cl (= (= (op e3 (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false)) :rule resolution :premises (t688 t693))
(step t695 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))) false)) :rule trans :premises (t684 t694))
(step t696 (cl (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t679 t695))
(step t697 (cl (= (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule equiv_simplify)
(step t698 (cl (not (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false)) (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv1 :premises (t697))
(step t699 (cl (= (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule refl)
(step t700 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t644 t699))
(step t701 (cl (= (= (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false) (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule equiv_simplify)
(step t702 (cl (= (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false) (not (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule equiv2 :premises (t701))
(step t703 (cl (not (not (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule not_not)
(step t704 (cl (= (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false) (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t702 t703))
(step t705 (cl (not (= (not (= (op e2 e4) (op e4 e4))) (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) (not (not (= (op e2 e4) (op e4 e4)))) (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule equiv_pos2)
(step t706 (cl (= (= (op e2 e4) (op e4 e4)) (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t72 t52))
(step t707 (cl (= (not (= (op e2 e4) (op e4 e4))) (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))))) :rule cong :premises (t706))
(step t708 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4))))) :rule and :premises (t178) :args (1))
(step t709 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4))))) :rule and :premises (t708) :args (0))
(step t710 (cl (not (= (op e2 e4) (op e4 e4)))) :rule and :premises (t709) :args (1))
(step t711 (cl (not (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule resolution :premises (t705 t707 t710))
(step t712 (cl (= (= (op (op (op (op e3 e3) (op e3 e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false)) :rule resolution :premises (t704 t711))
(step t713 (cl (= (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) false)) :rule trans :premises (t700 t712))
(step t714 (cl (not (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule resolution :premises (t698 t713))
(step t715 (cl (= (op (op e3 e3) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3))) :rule resolution :premises (t672 t677 t376 t696 t714))
(step t716 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t715 t454))
(step t717 (cl (not (= (= (op (op e4 e3) e4) e3) (= e3 (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (= (op (op e4 e3) e4) e3)) (= e3 (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t718 (cl (= (= (op (op e4 e3) e4) e3) (= e3 (op (op e4 e3) e4)))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e3) e4) e3))
(step t719 (cl (= (op (op e4 e3) e4) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t54 t51))
(step t720 (cl (= (= e3 (op (op e4 e3) e4)) (= e3 (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t43 t719))
(step t721 (cl (= (= (op (op e4 e3) e4) e3) (= e3 (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t718 t720))
(step t722 (cl (= (op (op e4 e3) e4) e3)) :rule and :premises (t627) :args (1))
(step t723 (cl (= e3 (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t717 t721 t722))
(step t724 (cl (= (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) e3)) :rule symm :premises (t723))
(step t725 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) e3)) :rule trans :premises (t716 t724))
(step t726 (cl (= (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op e3 e3) (op e3 e3))) (op e3 (op (op e3 e3) (op e3 e3))))) :rule cong :premises (t725 t341))
(step t727 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 (op (op e3 e3) (op e3 e3))))) :rule trans :premises (t651 t726))
(step t728 (cl (= (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) e3)) :rule symm :premises (t619))
(step t729 (cl (= (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t728 t454))
(step t730 (cl (= (op (op (op e3 e3) (op e3 e3)) e3) (op e3 (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule trans :premises (t630 t729))
(step t731 (cl (not (= (= (op (op e0 e4) e0) e4) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op e3 e3))))) (not (= (op (op e0 e4) e0) e4)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op e3 e3)))) :rule equiv_pos2)
(step t732 (cl (= (= (op (op e0 e4) e0) e4) (= e4 (op (op e0 e4) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op e0 e4) e0) e4))
(step t733 (cl (= (op (op e0 e4) e0) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op e3 e3)))) :rule cong :premises (t90 t32))
(step t734 (cl (= (= e4 (op (op e0 e4) e0)) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op e3 e3))))) :rule cong :premises (t51 t733))
(step t735 (cl (= (= (op (op e0 e4) e0) e4) (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op e3 e3))))) :rule trans :premises (t732 t734))
(step t736 (cl (= (op (op e0 e4) e0) e4)) :rule and :premises (t280) :args (1))
(step t737 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op e3 e3)))) :rule resolution :premises (t731 t735 t736))
(step t738 (cl (= (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule symm :premises (t497))
(step t739 (cl (= (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op e3 e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))) :rule cong :premises (t738 t64))
(step t740 (cl (= (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)))) :rule trans :premises (t737 t739))
(step t741 (cl (not (= (= (op (op e4 e0) e4) e0) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) (not (= (op (op e4 e0) e4) e0)) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule equiv_pos2)
(step t742 (cl (= (= (op (op e4 e0) e4) e0) (= e0 (op (op e4 e0) e4)))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e0) e4) e0))
(step t743 (cl (= (op (op e4 e0) e4) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t60 t51))
(step t744 (cl (= (= e0 (op (op e4 e0) e4)) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule cong :premises (t32 t743))
(step t745 (cl (= (= (op (op e4 e0) e4) e0) (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))))) :rule trans :premises (t742 t744))
(step t746 (cl (= (op (op e4 e0) e4) e0)) :rule and :premises (t640) :args (0))
(step t747 (cl (= (op e3 e3) (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule resolution :premises (t741 t745 t746))
(step t748 (cl (= (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)) (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op e3 e3)))) :rule cong :premises (t497 t64))
(step t749 (cl (= (op (op (op e3 e3) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule symm :premises (t737))
(step t750 (cl (= (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)))) :rule trans :premises (t748 t749))
(step t751 (cl (= (op (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule cong :premises (t750 t454))
(step t752 (cl (= (op e3 e3) (op (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3)) (op (op (op e3 e3) (op e3 e3)) (op (op (op e3 e3) (op e3 e3)) e3))))) :rule trans :premises (t747 t751))
(step t753 (cl) :rule resolution :premises (t134 t289 t292 t272 t414 t497 t534 t634 t644 t727 t682 t730 t740 t619 t715 t752 t570 t351 t255 t254 t394 t221))
