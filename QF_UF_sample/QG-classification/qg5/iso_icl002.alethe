unsat
(assume a0 (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e0) e1)) (= (op e4 e0) e2)) (= (op e4 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e4 e1) e0) (= (op e4 e1) e1)) (= (op e4 e1) e2)) (= (op e4 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e4 e2) e0) (= (op e4 e2) e1)) (= (op e4 e2) e2)) (= (op e4 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4))) (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)))))
(assume a1 (and (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4))))) (and (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) (and (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))))))
(assume a2 (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2))) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3))) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4))))
(assume a3 (or (or (or (or (and (and (and (and (not (= (op e0 e0) e0)) (not (= (op e1 e0) e1))) (not (= (op e2 e0) e2))) (not (= (op e3 e0) e3))) (not (= (op e4 e0) e4))) (and (and (and (and (not (= (op e0 e1) e0)) (not (= (op e1 e1) e1))) (not (= (op e2 e1) e2))) (not (= (op e3 e1) e3))) (not (= (op e4 e1) e4)))) (and (and (and (and (not (= (op e0 e2) e0)) (not (= (op e1 e2) e1))) (not (= (op e2 e2) e2))) (not (= (op e3 e2) e3))) (not (= (op e4 e2) e4)))) (and (and (and (and (not (= (op e0 e3) e0)) (not (= (op e1 e3) e1))) (not (= (op e2 e3) e2))) (not (= (op e3 e3) e3))) (not (= (op e4 e3) e4)))) (and (and (and (and (not (= (op e0 e4) e0)) (not (= (op e1 e4) e1))) (not (= (op e2 e4) e2))) (not (= (op e3 e4) e3))) (not (= (op e4 e4) e4)))))
(assume a4 (and (and (and (and (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4))) (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4)))) (and (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3))) (= (op e4 e2) (op e2 e4)))) (and (and (and (and (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (= (op e2 e3) (op e3 e2))) (= (op e3 e3) (op e3 e3))) (= (op e4 e3) (op e3 e4)))) (and (and (and (and (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))) (= (op e2 e4) (op e4 e2))) (= (op e3 e4) (op e4 e3))) (= (op e4 e4) (op e4 e4)))))
(assume a5 (or (or (or (or (and (and (and (and (not (= (op e0 (op e0 e0)) e0)) (not (= (op e0 (op e0 e1)) e1))) (not (= (op e0 (op e0 e2)) e2))) (not (= (op e0 (op e0 e3)) e3))) (not (= (op e0 (op e0 e4)) e4))) (and (and (and (and (not (= (op e1 (op e1 e0)) e0)) (not (= (op e1 (op e1 e1)) e1))) (not (= (op e1 (op e1 e2)) e2))) (not (= (op e1 (op e1 e3)) e3))) (not (= (op e1 (op e1 e4)) e4)))) (and (and (and (and (not (= (op e2 (op e2 e0)) e0)) (not (= (op e2 (op e2 e1)) e1))) (not (= (op e2 (op e2 e2)) e2))) (not (= (op e2 (op e2 e3)) e3))) (not (= (op e2 (op e2 e4)) e4)))) (and (and (and (and (not (= (op e3 (op e3 e0)) e0)) (not (= (op e3 (op e3 e1)) e1))) (not (= (op e3 (op e3 e2)) e2))) (not (= (op e3 (op e3 e3)) e3))) (not (= (op e3 (op e3 e4)) e4)))) (and (and (and (and (not (= (op e4 (op e4 e0)) e0)) (not (= (op e4 (op e4 e1)) e1))) (not (= (op e4 (op e4 e2)) e2))) (not (= (op e4 (op e4 e3)) e3))) (not (= (op e4 (op e4 e4)) e4)))))
(assume a6 (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e1)) (= (op e2 e2) e2)) (= (op e3 e3) e3)) (= (op e4 e4) e4)))
(assume a7 (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e1) e1))) (or (not (= (op e0 e2) e0)) (= (op e2 e2) e2))) (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3))) (or (not (= (op e0 e4) e0)) (= (op e4 e4) e4))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e2) e2))) (or (not (= (op e1 e3) e1)) (= (op e3 e3) e3))) (or (not (= (op e1 e4) e1)) (= (op e4 e4) e4)))) (and (and (and (and (or (not (= (op e2 e0) e2)) (= (op e0 e0) e0)) (or (not (= (op e2 e1) e2)) (= (op e1 e1) e1))) (or (not (= (op e2 e2) e2)) (= (op e2 e2) e2))) (or (not (= (op e2 e3) e2)) (= (op e3 e3) e3))) (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4)))) (and (and (and (and (or (not (= (op e3 e0) e3)) (= (op e0 e0) e0)) (or (not (= (op e3 e1) e3)) (= (op e1 e1) e1))) (or (not (= (op e3 e2) e3)) (= (op e2 e2) e2))) (or (not (= (op e3 e3) e3)) (= (op e3 e3) e3))) (or (not (= (op e3 e4) e3)) (= (op e4 e4) e4)))) (and (and (and (and (or (not (= (op e4 e0) e4)) (= (op e0 e0) e0)) (or (not (= (op e4 e1) e4)) (= (op e1 e1) e1))) (or (not (= (op e4 e2) e4)) (= (op e2 e2) e2))) (or (not (= (op e4 e3) e4)) (= (op e3 e3) e3))) (or (not (= (op e4 e4) e4)) (= (op e4 e4) e4)))))
(assume a8 (and (and (and (and (= (op (op e0 e0) (op e0 e0)) e0) (= (op (op e1 e1) (op e1 e1)) e1)) (= (op (op e2 e2) (op e2 e2)) e2)) (= (op (op e3 e3) (op e3 e3)) e3)) (= (op (op e4 e4) (op e4 e4)) e4)))
(assume a9 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4)))))))
(assume a10 (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3))) (not (= e2 e4))) (not (= e3 e4))))
(assume a11 (and (and (and (= e1 (op e0 e4)) (= e2 (op e1 e0))) (= e3 (op e2 e0))) (= e4 (op e0 e0))))
(assume a12 (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e4) (= (op e0 e1) e2)) (= (op e0 e2) e3)) (= (op e0 e3) e0)) (= (op e0 e4) e1)) (= (op e1 e0) e2)) (= (op e1 e1) e1)) (= (op e1 e2) e0)) (= (op e1 e3) e4)) (= (op e1 e4) e3)) (= (op e2 e0) e3)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e1)) (= (op e2 e4) e4)) (= (op e3 e0) e0)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e3)) (= (op e3 e4) e2)) (= (op e4 e0) e1)) (= (op e4 e1) e3)) (= (op e4 e2) e4)) (= (op e4 e3) e2)) (= (op e4 e4) e0))))
(step t0 (cl (not (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e4) (= (op e0 e1) e2)) (= (op e0 e2) e3)) (= (op e0 e3) e0)) (= (op e0 e4) e1)) (= (op e1 e0) e2)) (= (op e1 e1) e1)) (= (op e1 e2) e0)) (= (op e1 e3) e4)) (= (op e1 e4) e3)) (= (op e2 e0) e3)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e1)) (= (op e2 e4) e4)) (= (op e3 e0) e0)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e3)) (= (op e3 e4) e2)) (= (op e4 e0) e1)) (= (op e4 e1) e3)) (= (op e4 e2) e4)) (= (op e4 e3) e2)) (= (op e4 e4) e0))) (not (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))))) (not (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e4) (= (op e0 e1) e2)) (= (op e0 e2) e3)) (= (op e0 e3) e0)) (= (op e0 e4) e1)) (= (op e1 e0) e2)) (= (op e1 e1) e1)) (= (op e1 e2) e0)) (= (op e1 e3) e4)) (= (op e1 e4) e3)) (= (op e2 e0) e3)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e1)) (= (op e2 e4) e4)) (= (op e3 e0) e0)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e3)) (= (op e3 e4) e2)) (= (op e4 e0) e1)) (= (op e4 e1) e3)) (= (op e4 e2) e4)) (= (op e4 e3) e2)) (= (op e4 e4) e0)))) (not (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))))) :rule equiv_pos2)
(step t1 (cl (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e4) (= (op e0 e1) e2)) (= (op e0 e2) e3)) (= (op e0 e3) e0)) (= (op e0 e4) e1)) (= (op e1 e0) e2)) (= (op e1 e1) e1)) (= (op e1 e2) e0)) (= (op e1 e3) e4)) (= (op e1 e4) e3)) (= (op e2 e0) e3)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e1)) (= (op e2 e4) e4)) (= (op e3 e0) e0)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e3)) (= (op e3 e4) e2)) (= (op e4 e0) e1)) (= (op e4 e1) e3)) (= (op e4 e2) e4)) (= (op e4 e3) e2)) (= (op e4 e4) e0)) (and (= (op e4 e4) e0) (= (op e4 e3) e2) (= (op e4 e2) e4) (= (op e4 e1) e3) (= (op e4 e0) e1) (= (op e3 e4) e2) (= (op e3 e3) e3) (= (op e3 e2) e1) (= (op e3 e1) e4) (= (op e3 e0) e0) (= (op e2 e4) e4) (= (op e2 e3) e1) (= (op e2 e2) e2) (= (op e2 e1) e0) (= (op e2 e0) e3) (= (op e1 e4) e3) (= (op e1 e3) e4) (= (op e1 e2) e0) (= (op e1 e1) e1) (= (op e1 e0) e2) (= (op e0 e4) e1) (= (op e0 e3) e0) (= (op e0 e2) e3) (= (op e0 e0) e4) (= (op e0 e1) e2)))) :rule hole :args ("ACI_NORM" (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e4) (= (op e0 e1) e2)) (= (op e0 e2) e3)) (= (op e0 e3) e0)) (= (op e0 e4) e1)) (= (op e1 e0) e2)) (= (op e1 e1) e1)) (= (op e1 e2) e0)) (= (op e1 e3) e4)) (= (op e1 e4) e3)) (= (op e2 e0) e3)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e1)) (= (op e2 e4) e4)) (= (op e3 e0) e0)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e3)) (= (op e3 e4) e2)) (= (op e4 e0) e1)) (= (op e4 e1) e3)) (= (op e4 e2) e4)) (= (op e4 e3) e2)) (= (op e4 e4) e0)) (and (= (op e4 e4) e0) (= (op e4 e3) e2) (= (op e4 e2) e4) (= (op e4 e1) e3) (= (op e4 e0) e1) (= (op e3 e4) e2) (= (op e3 e3) e3) (= (op e3 e2) e1) (= (op e3 e1) e4) (= (op e3 e0) e0) (= (op e2 e4) e4) (= (op e2 e3) e1) (= (op e2 e2) e2) (= (op e2 e1) e0) (= (op e2 e0) e3) (= (op e1 e4) e3) (= (op e1 e3) e4) (= (op e1 e2) e0) (= (op e1 e1) e1) (= (op e1 e0) e2) (= (op e0 e4) e1) (= (op e0 e3) e0) (= (op e0 e2) e3) (= (op e0 e0) e4) (= (op e0 e1) e2)))))
(step t2 (cl (= (= (op e4 e4) e0) (= e0 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e0))
(step t3 (cl (= (= (op e4 e3) e2) (= e2 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e2))
(step t4 (cl (= (= (op e4 e2) e4) (= e4 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e4))
(step t5 (cl (= (= (op e4 e1) e3) (= e3 (op e4 e1)))) :rule rare_rewrite :args ("eq-symm" (op e4 e1) e3))
(step t6 (cl (= (= (op e4 e0) e1) (= e1 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e1))
(step t7 (cl (= (= (op e3 e4) e2) (= e2 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e2))
(step t8 (cl (= (= (op e3 e3) e3) (= e3 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e3))
(step t9 (cl (= (= (op e3 e2) e1) (= e1 (op e3 e2)))) :rule rare_rewrite :args ("eq-symm" (op e3 e2) e1))
(step t10 (cl (= (= (op e3 e1) e4) (= e4 (op e3 e1)))) :rule rare_rewrite :args ("eq-symm" (op e3 e1) e4))
(step t11 (cl (= (= (op e3 e0) e0) (= e0 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e0))
(step t12 (cl (= (= (op e2 e4) e4) (= e4 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e4))
(step t13 (cl (= (= (op e2 e3) e1) (= e1 (op e2 e3)))) :rule rare_rewrite :args ("eq-symm" (op e2 e3) e1))
(step t14 (cl (= (= (op e2 e2) e2) (= e2 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e2))
(step t15 (cl (= (= (op e2 e1) e0) (= e0 (op e2 e1)))) :rule rare_rewrite :args ("eq-symm" (op e2 e1) e0))
(step t16 (cl (= (= (op e2 e0) e3) (= e3 (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) e3))
(step t17 (cl (= (= (op e1 e4) e3) (= e3 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e3))
(step t18 (cl (= (= (op e1 e3) e4) (= e4 (op e1 e3)))) :rule rare_rewrite :args ("eq-symm" (op e1 e3) e4))
(step t19 (cl (= (= (op e1 e2) e0) (= e0 (op e1 e2)))) :rule rare_rewrite :args ("eq-symm" (op e1 e2) e0))
(step t20 (cl (= (= (op e1 e1) e1) (= e1 (op e1 e1)))) :rule rare_rewrite :args ("eq-symm" (op e1 e1) e1))
(step t21 (cl (= (= (op e1 e0) e2) (= e2 (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) e2))
(step t22 (cl (= (= (op e0 e4) e1) (= e1 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e1))
(step t23 (cl (= (= (op e0 e3) e0) (= e0 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e0))
(step t24 (cl (= (= (op e0 e2) e3) (= e3 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e3))
(step t25 (cl (= (= (op e0 e0) e4) (= e4 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e4))
(step t26 (cl (= (= (op e0 e1) e2) (= e2 (op e0 e1)))) :rule rare_rewrite :args ("eq-symm" (op e0 e1) e2))
(step t27 (cl (= (and (= (op e4 e4) e0) (= (op e4 e3) e2) (= (op e4 e2) e4) (= (op e4 e1) e3) (= (op e4 e0) e1) (= (op e3 e4) e2) (= (op e3 e3) e3) (= (op e3 e2) e1) (= (op e3 e1) e4) (= (op e3 e0) e0) (= (op e2 e4) e4) (= (op e2 e3) e1) (= (op e2 e2) e2) (= (op e2 e1) e0) (= (op e2 e0) e3) (= (op e1 e4) e3) (= (op e1 e3) e4) (= (op e1 e2) e0) (= (op e1 e1) e1) (= (op e1 e0) e2) (= (op e0 e4) e1) (= (op e0 e3) e0) (= (op e0 e2) e3) (= (op e0 e0) e4) (= (op e0 e1) e2)) (and (= e0 (op e4 e4)) (= e2 (op e4 e3)) (= e4 (op e4 e2)) (= e3 (op e4 e1)) (= e1 (op e4 e0)) (= e2 (op e3 e4)) (= e3 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e0 (op e3 e0)) (= e4 (op e2 e4)) (= e1 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e3 (op e2 e0)) (= e3 (op e1 e4)) (= e4 (op e1 e3)) (= e0 (op e1 e2)) (= e1 (op e1 e1)) (= e2 (op e1 e0)) (= e1 (op e0 e4)) (= e0 (op e0 e3)) (= e3 (op e0 e2)) (= e4 (op e0 e0)) (= e2 (op e0 e1))))) :rule cong :premises (t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26))
(step t28 (cl (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e4) (= (op e0 e1) e2)) (= (op e0 e2) e3)) (= (op e0 e3) e0)) (= (op e0 e4) e1)) (= (op e1 e0) e2)) (= (op e1 e1) e1)) (= (op e1 e2) e0)) (= (op e1 e3) e4)) (= (op e1 e4) e3)) (= (op e2 e0) e3)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e1)) (= (op e2 e4) e4)) (= (op e3 e0) e0)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e3)) (= (op e3 e4) e2)) (= (op e4 e0) e1)) (= (op e4 e1) e3)) (= (op e4 e2) e4)) (= (op e4 e3) e2)) (= (op e4 e4) e0)) (and (= e0 (op e4 e4)) (= e2 (op e4 e3)) (= e4 (op e4 e2)) (= e3 (op e4 e1)) (= e1 (op e4 e0)) (= e2 (op e3 e4)) (= e3 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e0 (op e3 e0)) (= e4 (op e2 e4)) (= e1 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e3 (op e2 e0)) (= e3 (op e1 e4)) (= e4 (op e1 e3)) (= e0 (op e1 e2)) (= e1 (op e1 e1)) (= e2 (op e1 e0)) (= e1 (op e0 e4)) (= e0 (op e0 e3)) (= e3 (op e0 e2)) (= e4 (op e0 e0)) (= e2 (op e0 e1))))) :rule trans :premises (t1 t27))
(step t29 (cl (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e4) (= (op e0 e1) e2)) (= (op e0 e2) e3)) (= (op e0 e3) e0)) (= (op e0 e4) e1)) (= (op e1 e0) e2)) (= (op e1 e1) e1)) (= (op e1 e2) e0)) (= (op e1 e3) e4)) (= (op e1 e4) e3)) (= (op e2 e0) e3)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e1)) (= (op e2 e4) e4)) (= (op e3 e0) e0)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e3)) (= (op e3 e4) e2)) (= (op e4 e0) e1)) (= (op e4 e1) e3)) (= (op e4 e2) e4)) (= (op e4 e3) e2)) (= (op e4 e4) e0))) (not (and (= e0 (op e4 e4)) (= e2 (op e4 e3)) (= e4 (op e4 e2)) (= e3 (op e4 e1)) (= e1 (op e4 e0)) (= e2 (op e3 e4)) (= e3 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e0 (op e3 e0)) (= e4 (op e2 e4)) (= e1 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e3 (op e2 e0)) (= e3 (op e1 e4)) (= e4 (op e1 e3)) (= e0 (op e1 e2)) (= e1 (op e1 e1)) (= e2 (op e1 e0)) (= e1 (op e0 e4)) (= e0 (op e0 e3)) (= e3 (op e0 e2)) (= e4 (op e0 e0)) (= e2 (op e0 e1)))))) :rule cong :premises (t28))
(step t30 (cl (= e0 e0)) :rule refl)
(step t31 (cl (= e4 (op e0 e0))) :rule and :premises (a11) :args (1))
(step t32 (cl (= (op e4 e4) (op (op e0 e0) (op e0 e0)))) :rule cong :premises (t31 t31))
(step t33 (cl (= (= e0 (op e4 e4)) (= e0 (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t30 t32))
(step t34 (cl (not (= (= e2 (op e1 e0)) (= e2 (op (op e0 e4) e0)))) (not (= e2 (op e1 e0))) (= e2 (op (op e0 e4) e0))) :rule equiv_pos2)
(step t35 (cl (= e2 e2)) :rule refl)
(step t36 (cl (and (and (= e1 (op e0 e4)) (= e2 (op e1 e0))) (= e3 (op e2 e0)))) :rule and :premises (a11) :args (0))
(step t37 (cl (and (= e1 (op e0 e4)) (= e2 (op e1 e0)))) :rule and :premises (t36) :args (0))
(step t38 (cl (= e1 (op e0 e4))) :rule and :premises (t37) :args (0))
(step t39 (cl (= (op e1 e0) (op (op e0 e4) e0))) :rule cong :premises (t38 t30))
(step t40 (cl (= (= e2 (op e1 e0)) (= e2 (op (op e0 e4) e0)))) :rule cong :premises (t35 t39))
(step t41 (cl (= e2 (op e1 e0))) :rule and :premises (t37) :args (1))
(step t42 (cl (= e2 (op (op e0 e4) e0))) :rule resolution :premises (t34 t40 t41))
(step t43 (cl (= (op e0 e4) (op e0 (op e0 e0)))) :rule cong :premises (t30 t31))
(step t44 (cl (= (op (op e0 e4) e0) (op (op e0 (op e0 e0)) e0))) :rule cong :premises (t43 t30))
(step t45 (cl (= e2 (op (op e0 (op e0 e0)) e0))) :rule trans :premises (t42 t44))
(step t46 (cl (not (= (= e3 (op e2 e0)) (= e3 (op (op (op e0 e4) e0) e0)))) (not (= e3 (op e2 e0))) (= e3 (op (op (op e0 e4) e0) e0))) :rule equiv_pos2)
(step t47 (cl (= e3 e3)) :rule refl)
(step t48 (cl (= (op e2 e0) (op (op (op e0 e4) e0) e0))) :rule cong :premises (t42 t30))
(step t49 (cl (= (= e3 (op e2 e0)) (= e3 (op (op (op e0 e4) e0) e0)))) :rule cong :premises (t47 t48))
(step t50 (cl (= e3 (op e2 e0))) :rule and :premises (t36) :args (1))
(step t51 (cl (= e3 (op (op (op e0 e4) e0) e0))) :rule resolution :premises (t46 t49 t50))
(step t52 (cl (= (op (op (op e0 e4) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) :rule cong :premises (t44 t30))
(step t53 (cl (= e3 (op (op (op e0 (op e0 e0)) e0) e0))) :rule trans :premises (t51 t52))
(step t54 (cl (= (op e4 e3) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t31 t53))
(step t55 (cl (= (= e2 (op e4 e3)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t45 t54))
(step t56 (cl (= (op e4 e2) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t31 t45))
(step t57 (cl (= (= e4 (op e4 e2)) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t31 t56))
(step t58 (cl (= e1 (op e0 (op e0 e0)))) :rule trans :premises (t38 t43))
(step t59 (cl (= (op e4 e1) (op (op e0 e0) (op e0 (op e0 e0))))) :rule cong :premises (t31 t58))
(step t60 (cl (= (= e3 (op e4 e1)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))))) :rule cong :premises (t53 t59))
(step t61 (cl (= (op e4 e0) (op (op e0 e0) e0))) :rule cong :premises (t31 t30))
(step t62 (cl (= (= e1 (op e4 e0)) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)))) :rule cong :premises (t58 t61))
(step t63 (cl (= (op e3 e4) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))) :rule cong :premises (t53 t31))
(step t64 (cl (= (= e2 (op e3 e4)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule cong :premises (t45 t63))
(step t65 (cl (= (op e3 e3) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t53 t53))
(step t66 (cl (= (= e3 (op e3 e3)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t53 t65))
(step t67 (cl (= (op e3 e2) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t53 t45))
(step t68 (cl (= (= e1 (op e3 e2)) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t58 t67))
(step t69 (cl (= (op e3 e1) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0))))) :rule cong :premises (t53 t58))
(step t70 (cl (= (= e4 (op e3 e1)) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))))) :rule cong :premises (t31 t69))
(step t71 (cl (= (op e3 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule cong :premises (t53 t30))
(step t72 (cl (= (= e0 (op e3 e0)) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule cong :premises (t30 t71))
(step t73 (cl (= (op e2 e4) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule cong :premises (t45 t31))
(step t74 (cl (= (= e4 (op e2 e4)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule cong :premises (t31 t73))
(step t75 (cl (= (op e2 e3) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t45 t53))
(step t76 (cl (= (= e1 (op e2 e3)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t58 t75))
(step t77 (cl (= (op e2 e2) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t45 t45))
(step t78 (cl (= (= e2 (op e2 e2)) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t45 t77))
(step t79 (cl (= (op e2 e1) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))) :rule cong :premises (t45 t58))
(step t80 (cl (= (= e0 (op e2 e1)) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule cong :premises (t30 t79))
(step t81 (cl (= (op e2 e0) (op (op (op e0 (op e0 e0)) e0) e0))) :rule cong :premises (t45 t30))
(step t82 (cl (= (= e3 (op e2 e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t53 t81))
(step t83 (cl (= (op e1 e4) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule cong :premises (t58 t31))
(step t84 (cl (= (= e3 (op e1 e4)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule cong :premises (t53 t83))
(step t85 (cl (= (op e1 e3) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t58 t53))
(step t86 (cl (= (= e4 (op e1 e3)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t31 t85))
(step t87 (cl (= (op e1 e2) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t58 t45))
(step t88 (cl (= (= e0 (op e1 e2)) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t30 t87))
(step t89 (cl (= (op e1 e1) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) :rule cong :premises (t58 t58))
(step t90 (cl (= (= e1 (op e1 e1)) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule cong :premises (t58 t89))
(step t91 (cl (= (op e1 e0) (op (op e0 (op e0 e0)) e0))) :rule cong :premises (t58 t30))
(step t92 (cl (= (= e2 (op e1 e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t45 t91))
(step t93 (cl (= (= e1 (op e0 e4)) (= (op e0 (op e0 e0)) (op e0 (op e0 e0))))) :rule cong :premises (t58 t43))
(step t94 (cl (= (op e0 e3) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t30 t53))
(step t95 (cl (= (= e0 (op e0 e3)) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t30 t94))
(step t96 (cl (= (op e0 e2) (op e0 (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t30 t45))
(step t97 (cl (= (= e3 (op e0 e2)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t53 t96))
(step t98 (cl (= (op e0 e0) (op e0 e0))) :rule refl)
(step t99 (cl (= (= e4 (op e0 e0)) (= (op e0 e0) (op e0 e0)))) :rule cong :premises (t31 t98))
(step t100 (cl (= (op e0 e1) (op e0 (op e0 (op e0 e0))))) :rule cong :premises (t30 t58))
(step t101 (cl (= (= e2 (op e0 e1)) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))) :rule cong :premises (t45 t100))
(step t102 (cl (= (and (= e0 (op e4 e4)) (= e2 (op e4 e3)) (= e4 (op e4 e2)) (= e3 (op e4 e1)) (= e1 (op e4 e0)) (= e2 (op e3 e4)) (= e3 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e0 (op e3 e0)) (= e4 (op e2 e4)) (= e1 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e3 (op e2 e0)) (= e3 (op e1 e4)) (= e4 (op e1 e3)) (= e0 (op e1 e2)) (= e1 (op e1 e1)) (= e2 (op e1 e0)) (= e1 (op e0 e4)) (= e0 (op e0 e3)) (= e3 (op e0 e2)) (= e4 (op e0 e0)) (= e2 (op e0 e1))) (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 (op e0 e0)) (op e0 (op e0 e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 e0)) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))))) :rule cong :premises (t33 t55 t57 t60 t62 t64 t66 t68 t70 t72 t74 t76 t78 t80 t82 t84 t86 t88 t90 t92 t93 t95 t97 t99 t101))
(step t103 (cl (= (not (and (= e0 (op e4 e4)) (= e2 (op e4 e3)) (= e4 (op e4 e2)) (= e3 (op e4 e1)) (= e1 (op e4 e0)) (= e2 (op e3 e4)) (= e3 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e0 (op e3 e0)) (= e4 (op e2 e4)) (= e1 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e3 (op e2 e0)) (= e3 (op e1 e4)) (= e4 (op e1 e3)) (= e0 (op e1 e2)) (= e1 (op e1 e1)) (= e2 (op e1 e0)) (= e1 (op e0 e4)) (= e0 (op e0 e3)) (= e3 (op e0 e2)) (= e4 (op e0 e0)) (= e2 (op e0 e1)))) (not (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 (op e0 e0)) (op e0 (op e0 e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 e0)) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))))) :rule cong :premises (t102))
(step t104 (cl (= (= e0 (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op e0 e0))))) :rule refl)
(step t105 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule refl)
(step t106 (cl (= (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule refl)
(step t107 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))))) :rule refl)
(step t108 (cl (= (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)))) :rule refl)
(step t109 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule refl)
(step t110 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule refl)
(step t111 (cl (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))))) :rule refl)
(step t112 (cl (= (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))))) :rule refl)
(step t113 (cl (= (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule refl)
(step t114 (cl (= (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule refl)
(step t115 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule refl)
(step t116 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))))) :rule refl)
(step t117 (cl (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule refl)
(step t118 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) true)) :rule rare_rewrite :args ("eq-refl" (op (op (op e0 (op e0 e0)) e0) e0)))
(step t119 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule refl)
(step t120 (cl (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule refl)
(step t121 (cl (= (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule refl)
(step t122 (cl (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule refl)
(step t123 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)) true)) :rule rare_rewrite :args ("eq-refl" (op (op e0 (op e0 e0)) e0)))
(step t124 (cl (= (= (op e0 (op e0 e0)) (op e0 (op e0 e0))) true)) :rule rare_rewrite :args ("eq-refl" (op e0 (op e0 e0))))
(step t125 (cl (= (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule refl)
(step t126 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))))) :rule refl)
(step t127 (cl (= (= (op e0 e0) (op e0 e0)) true)) :rule rare_rewrite :args ("eq-refl" (op e0 e0)))
(step t128 (cl (= (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))) :rule refl)
(step t129 (cl (= (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 (op e0 e0)) (op e0 (op e0 e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 e0)) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))) (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) true (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) true true (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) true (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))))) :rule cong :premises (t104 t105 t106 t107 t108 t109 t110 t111 t112 t113 t114 t115 t116 t117 t118 t119 t120 t121 t122 t123 t124 t125 t126 t127 t128))
(step t130 (cl (= (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) true (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) true true (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) true (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))) (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))))) :rule hole :args ("ACI_NORM" (= (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) true (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) true true (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) true (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))) (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))))))
(step t131 (cl (= (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 (op e0 e0)) (op e0 (op e0 e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 e0)) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))) (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))))) :rule trans :premises (t129 t130))
(step t132 (cl (= (not (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 (op e0 e0)) (op e0 (op e0 e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 e0)) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))) (not (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))))) :rule cong :premises (t131))
(step t133 (cl (= (not (and (= e0 (op e4 e4)) (= e2 (op e4 e3)) (= e4 (op e4 e2)) (= e3 (op e4 e1)) (= e1 (op e4 e0)) (= e2 (op e3 e4)) (= e3 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e0 (op e3 e0)) (= e4 (op e2 e4)) (= e1 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e3 (op e2 e0)) (= e3 (op e1 e4)) (= e4 (op e1 e3)) (= e0 (op e1 e2)) (= e1 (op e1 e1)) (= e2 (op e1 e0)) (= e1 (op e0 e4)) (= e0 (op e0 e3)) (= e3 (op e0 e2)) (= e4 (op e0 e0)) (= e2 (op e0 e1)))) (not (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))))) :rule trans :premises (t103 t132))
(step t134 (cl (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e4) (= (op e0 e1) e2)) (= (op e0 e2) e3)) (= (op e0 e3) e0)) (= (op e0 e4) e1)) (= (op e1 e0) e2)) (= (op e1 e1) e1)) (= (op e1 e2) e0)) (= (op e1 e3) e4)) (= (op e1 e4) e3)) (= (op e2 e0) e3)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e1)) (= (op e2 e4) e4)) (= (op e3 e0) e0)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e3)) (= (op e3 e4) e2)) (= (op e4 e0) e1)) (= (op e4 e1) e3)) (= (op e4 e2) e4)) (= (op e4 e3) e2)) (= (op e4 e4) e0))) (not (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))))) :rule trans :premises (t29 t133))
(step t135 (cl (not (and (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))))) :rule resolution :premises (t0 t134 a12))
(step t136 (cl (not (= e0 (op (op e0 e0) (op e0 e0)))) (not (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) (not (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))) (not (= (op e0 (op e0 e0)) (op (op e0 e0) e0))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0)))) (not (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0))))) (not (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)))) (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))) (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) (not (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0)))) (not (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))) :rule not_and :premises (t135))
(step t137 (cl (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)))) (not (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))) (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) (not (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) (not (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0)))) (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))) (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (not (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) (not (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0))))) (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0)))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))) (not (= (op e0 (op e0 e0)) (op (op e0 e0) e0))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))) (not (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) (not (= e0 (op (op e0 e0) (op e0 e0))))) :rule reordering :premises (t136))
(step t138 (cl (not (= (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) (not (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4))) (or (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule equiv_pos2)
(step t139 (cl (= (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (= (op e1 e4) e4) (= (op e1 e3) e4) (= (op e1 e2) e4) (= (op e1 e0) e4) (= (op e1 e1) e4)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (= (op e1 e4) e4) (= (op e1 e3) e4) (= (op e1 e2) e4) (= (op e1 e0) e4) (= (op e1 e1) e4)))))
(step t140 (cl (= (= (op e1 e4) e4) (= e4 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e4))
(step t141 (cl (= (= (op e1 e2) e4) (= e4 (op e1 e2)))) :rule rare_rewrite :args ("eq-symm" (op e1 e2) e4))
(step t142 (cl (= (= (op e1 e0) e4) (= e4 (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) e4))
(step t143 (cl (= (= (op e1 e1) e4) (= e4 (op e1 e1)))) :rule rare_rewrite :args ("eq-symm" (op e1 e1) e4))
(step t144 (cl (= (or (= (op e1 e4) e4) (= (op e1 e3) e4) (= (op e1 e2) e4) (= (op e1 e0) e4) (= (op e1 e1) e4)) (or (= e4 (op e1 e4)) (= e4 (op e1 e3)) (= e4 (op e1 e2)) (= e4 (op e1 e0)) (= e4 (op e1 e1))))) :rule cong :premises (t140 t18 t141 t142 t143))
(step t145 (cl (= (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (= e4 (op e1 e4)) (= e4 (op e1 e3)) (= e4 (op e1 e2)) (= e4 (op e1 e0)) (= e4 (op e1 e1))))) :rule trans :premises (t139 t144))
(step t146 (cl (= (= e4 (op e1 e4)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule cong :premises (t31 t83))
(step t147 (cl (= (= e4 (op e1 e2)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t31 t87))
(step t148 (cl (= (= e4 (op e1 e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t31 t91))
(step t149 (cl (= (= e4 (op e1 e1)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule cong :premises (t31 t89))
(step t150 (cl (= (or (= e4 (op e1 e4)) (= e4 (op e1 e3)) (= e4 (op e1 e2)) (= e4 (op e1 e0)) (= e4 (op e1 e1))) (or (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule cong :premises (t146 t86 t147 t148 t149))
(step t151 (cl (= (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule trans :premises (t145 t150))
(step t152 (cl (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4)))))) :rule and :premises (a1) :args (0))
(step t153 (cl (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4)))))) :rule and :premises (t152) :args (0))
(step t154 (cl (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)))))) :rule and :premises (t153) :args (0))
(step t155 (cl (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) :rule and :premises (t154) :args (1))
(step t156 (cl (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)))) :rule and :premises (t155) :args (1))
(step t157 (cl (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4))) :rule and :premises (t156) :args (0))
(step t158 (cl (or (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule resolution :premises (t138 t151 t157))
(step t159 (cl (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) :rule or :premises (t158))
(step t160 (cl (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule reordering :premises (t159))
(step t161 (cl (not (= (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op (op e0 (op e0 e0)) e0))))) (not (not (= (op e0 e0) (op e1 e0)))) (not (= (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule equiv_pos2)
(step t162 (cl (= (= (op e0 e0) (op e1 e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t98 t91))
(step t163 (cl (= (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t162))
(step t164 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4)))))) :rule and :premises (a9) :args (0))
(step t165 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3)))))) :rule and :premises (t164) :args (0))
(step t166 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2)))))) :rule and :premises (t165) :args (0))
(step t167 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1)))))) :rule and :premises (t166) :args (0))
(step t168 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0))))) :rule and :premises (t167) :args (0))
(step t169 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0))))) :rule and :premises (t168) :args (0))
(step t170 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0))))) :rule and :premises (t169) :args (0))
(step t171 (cl (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0))))) :rule and :premises (t170) :args (0))
(step t172 (cl (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0))))) :rule and :premises (t171) :args (0))
(step t173 (cl (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0))))) :rule and :premises (t172) :args (0))
(step t174 (cl (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0))))) :rule and :premises (t173) :args (0))
(step t175 (cl (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0))))) :rule and :premises (t174) :args (0))
(step t176 (cl (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0))))) :rule and :premises (t175) :args (0))
(step t177 (cl (not (= (op e0 e0) (op e1 e0)))) :rule and :premises (t176) :args (0))
(step t178 (cl (not (= (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule resolution :premises (t161 t163 t177))
(step t179 (cl (= (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) false) (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule equiv_simplify)
(step t180 (cl (not (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) false)) (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule equiv1 :premises (t179))
(step t181 (cl (not (= (= (op e0 e4) (op e4 e0)) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)))) (not (= (op e0 e4) (op e4 e0))) (= (op e0 (op e0 e0)) (op (op e0 e0) e0))) :rule equiv_pos2)
(step t182 (cl (= (= (op e0 e4) (op e4 e0)) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)))) :rule cong :premises (t43 t61))
(step t183 (cl (and (and (and (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4))) (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4)))) (and (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3))) (= (op e4 e2) (op e2 e4)))) (and (and (and (and (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (= (op e2 e3) (op e3 e2))) (= (op e3 e3) (op e3 e3))) (= (op e4 e3) (op e3 e4))))) :rule and :premises (a4) :args (0))
(step t184 (cl (and (and (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4))) (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4)))) (and (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3))) (= (op e4 e2) (op e2 e4))))) :rule and :premises (t183) :args (0))
(step t185 (cl (and (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4))) (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4))))) :rule and :premises (t184) :args (0))
(step t186 (cl (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4)))) :rule and :premises (t185) :args (0))
(step t187 (cl (= (op e4 e0) (op e0 e4))) :rule and :premises (t186) :args (1))
(step t188 (cl (= (op e0 e4) (op e4 e0))) :rule symm :premises (t187))
(step t189 (cl (= (op e0 (op e0 e0)) (op (op e0 e0) e0))) :rule resolution :premises (t181 t182 t188))
(step t190 (cl (= (op (op e0 e0) e0) (op e0 (op e0 e0)))) :rule symm :premises (t189))
(step t191 (cl (and (and (and (= (op (op e0 e0) (op e0 e0)) e0) (= (op (op e1 e1) (op e1 e1)) e1)) (= (op (op e2 e2) (op e2 e2)) e2)) (= (op (op e3 e3) (op e3 e3)) e3))) :rule and :premises (a8) :args (0))
(step t192 (cl (and (and (= (op (op e0 e0) (op e0 e0)) e0) (= (op (op e1 e1) (op e1 e1)) e1)) (= (op (op e2 e2) (op e2 e2)) e2))) :rule and :premises (t191) :args (0))
(step t193 (cl (and (= (op (op e0 e0) (op e0 e0)) e0) (= (op (op e1 e1) (op e1 e1)) e1))) :rule and :premises (t192) :args (0))
(step t194 (cl (= (op (op e0 e0) (op e0 e0)) e0)) :rule and :premises (t193) :args (0))
(step t195 (cl (= (op (op e0 e0) (op (op e0 e0) (op e0 e0))) (op (op e0 e0) e0))) :rule cong :premises (t98 t194))
(step t196 (cl (= (op (op e0 e0) (op (op e0 e0) (op e0 e0))) (op e0 (op e0 e0)))) :rule trans :premises (t195 t190))
(step t197 (cl (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 e0) (op e0 e0))))) :rule symm :premises (t196))
(step t198 (cl (not (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) (not (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule equiv_pos2)
(step t199 (cl (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e3 e3) e1) (= (op e2 e2) e1) (= (op e0 e0) e1) (= (op e1 e1) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e3 e3) e1) (= (op e2 e2) e1) (= (op e0 e0) e1) (= (op e1 e1) e1)))))
(step t200 (cl (= (= (op e4 e4) e1) (= e1 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e1))
(step t201 (cl (= (= (op e3 e3) e1) (= e1 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e1))
(step t202 (cl (= (= (op e2 e2) e1) (= e1 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e1))
(step t203 (cl (= (= (op e0 e0) e1) (= e1 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e1))
(step t204 (cl (= (or (= (op e4 e4) e1) (= (op e3 e3) e1) (= (op e2 e2) e1) (= (op e0 e0) e1) (= (op e1 e1) e1)) (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))))) :rule cong :premises (t200 t201 t202 t203 t20))
(step t205 (cl (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))))) :rule trans :premises (t199 t204))
(step t206 (cl (= (= e1 (op e4 e4)) (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t58 t32))
(step t207 (cl (= (= e1 (op e3 e3)) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t58 t65))
(step t208 (cl (= (= e1 (op e2 e2)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t58 t77))
(step t209 (cl (= (= e1 (op e0 e0)) (= (op e0 (op e0 e0)) (op e0 e0)))) :rule cong :premises (t58 t98))
(step t210 (cl (= (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))) (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op e0 e0)) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule cong :premises (t206 t207 t208 t209 t90))
(step t211 (cl (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))))) :rule refl)
(step t212 (cl (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule refl)
(step t213 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))))) :rule refl)
(step t214 (cl (= (= (op e0 (op e0 e0)) (op e0 e0)) (= (op e0 e0) (op e0 (op e0 e0))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op e0 e0)) (op e0 e0)))
(step t215 (cl (= (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op e0 e0)) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule cong :premises (t211 t212 t213 t214 t122))
(step t216 (cl (= (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))) (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule trans :premises (t210 t215))
(step t217 (cl (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule trans :premises (t205 t216))
(step t218 (cl (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2))) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3)))) :rule and :premises (a2) :args (0))
(step t219 (cl (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2)))) :rule and :premises (t218) :args (0))
(step t220 (cl (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)))) :rule and :premises (t219) :args (0))
(step t221 (cl (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) :rule and :premises (t220) :args (1))
(step t222 (cl (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule resolution :premises (t198 t217 t221))
(step t223 (cl (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) :rule or :premises (t222))
(step t224 (cl (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule reordering :premises (t223))
(step t225 (cl (not (= (not (= (op e0 e4) (op e4 e4))) (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))) (not (not (= (op e0 e4) (op e4 e4)))) (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))))) :rule equiv_pos2)
(step t226 (cl (= (= (op e0 e4) (op e4 e4)) (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t43 t32))
(step t227 (cl (= (not (= (op e0 e4) (op e4 e4))) (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))) :rule cong :premises (t226))
(step t228 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4))))) :rule and :premises (t164) :args (1))
(step t229 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4))))) :rule and :premises (t228) :args (0))
(step t230 (cl (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4))))) :rule and :premises (t229) :args (0))
(step t231 (cl (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4))))) :rule and :premises (t230) :args (0))
(step t232 (cl (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4))))) :rule and :premises (t231) :args (0))
(step t233 (cl (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4))))) :rule and :premises (t232) :args (0))
(step t234 (cl (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4))))) :rule and :premises (t233) :args (0))
(step t235 (cl (not (= (op e0 e4) (op e4 e4)))) :rule and :premises (t234) :args (1))
(step t236 (cl (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))))) :rule resolution :premises (t225 t227 t235))
(step t237 (cl (not (= (not (= (op e0 e0) (op e0 e4))) (not (= (op e0 e0) (op e0 (op e0 e0)))))) (not (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e0) (op e0 (op e0 e0))))) :rule equiv_pos2)
(step t238 (cl (= (= (op e0 e0) (op e0 e4)) (= (op e0 e0) (op e0 (op e0 e0))))) :rule cong :premises (t98 t43))
(step t239 (cl (= (not (= (op e0 e0) (op e0 e4))) (not (= (op e0 e0) (op e0 (op e0 e0)))))) :rule cong :premises (t238))
(step t240 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4)))))) :rule and :premises (a9) :args (1))
(step t241 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4)))))) :rule and :premises (t240) :args (0))
(step t242 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4)))))) :rule and :premises (t241) :args (0))
(step t243 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4)))))) :rule and :premises (t242) :args (0))
(step t244 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4))))) :rule and :premises (t243) :args (0))
(step t245 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4))))) :rule and :premises (t244) :args (0))
(step t246 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3))))) :rule and :premises (t245) :args (0))
(step t247 (cl (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4))))) :rule and :premises (t246) :args (0))
(step t248 (cl (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3))))) :rule and :premises (t247) :args (0))
(step t249 (cl (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2))))) :rule and :premises (t248) :args (0))
(step t250 (cl (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4))))) :rule and :premises (t249) :args (0))
(step t251 (cl (not (= (op e0 e0) (op e0 e4)))) :rule and :premises (t250) :args (1))
(step t252 (cl (not (= (op e0 e0) (op e0 (op e0 e0))))) :rule resolution :premises (t237 t239 t251))
(step t253 (cl (= (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) false) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)))))) :rule equiv_simplify)
(step t254 (cl (not (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) false)) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))))) :rule equiv1 :premises (t253))
(step t255 (cl (= (op e0 (op e0 e0)) (op e0 (op e0 e0)))) :rule refl)
(step t256 (cl (not (= (= (op e3 e4) (op e4 e3)) (= (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) (not (= (op e3 e4) (op e4 e3))) (= (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))) :rule equiv_pos2)
(step t257 (cl (= (= (op e3 e4) (op e4 e3)) (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t63 t54))
(step t258 (cl (= (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))
(step t259 (cl (= (= (op e3 e4) (op e4 e3)) (= (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule trans :premises (t257 t258))
(step t260 (cl (and (and (and (and (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (= (op e2 e3) (op e3 e2))) (= (op e3 e3) (op e3 e3))) (= (op e4 e3) (op e3 e4)))) :rule and :premises (t183) :args (1))
(step t261 (cl (= (op e4 e3) (op e3 e4))) :rule and :premises (t260) :args (1))
(step t262 (cl (= (op e3 e4) (op e4 e3))) :rule symm :premises (t261))
(step t263 (cl (= (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))) :rule resolution :premises (t256 t259 t262))
(step t264 (cl (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule symm :premises (t263))
(step t265 (cl (not (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) (not (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2))) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule equiv_pos2)
(step t266 (cl (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= (op e4 e4) e2) (= (op e3 e4) e2) (= (op e2 e4) e2) (= (op e0 e4) e2) (= (op e1 e4) e2)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= (op e4 e4) e2) (= (op e3 e4) e2) (= (op e2 e4) e2) (= (op e0 e4) e2) (= (op e1 e4) e2)))))
(step t267 (cl (= (= (op e4 e4) e2) (= e2 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e2))
(step t268 (cl (= (= (op e2 e4) e2) (= e2 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e2))
(step t269 (cl (= (= (op e0 e4) e2) (= e2 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e2))
(step t270 (cl (= (= (op e1 e4) e2) (= e2 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e2))
(step t271 (cl (= (or (= (op e4 e4) e2) (= (op e3 e4) e2) (= (op e2 e4) e2) (= (op e0 e4) e2) (= (op e1 e4) e2)) (or (= e2 (op e4 e4)) (= e2 (op e3 e4)) (= e2 (op e2 e4)) (= e2 (op e0 e4)) (= e2 (op e1 e4))))) :rule cong :premises (t267 t7 t268 t269 t270))
(step t272 (cl (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= e2 (op e4 e4)) (= e2 (op e3 e4)) (= e2 (op e2 e4)) (= e2 (op e0 e4)) (= e2 (op e1 e4))))) :rule trans :premises (t266 t271))
(step t273 (cl (= (= e2 (op e4 e4)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t45 t32))
(step t274 (cl (= (= e2 (op e2 e4)) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule cong :premises (t45 t73))
(step t275 (cl (= (= e2 (op e0 e4)) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))) :rule cong :premises (t45 t43))
(step t276 (cl (= (= e2 (op e1 e4)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule cong :premises (t45 t83))
(step t277 (cl (= (or (= e2 (op e4 e4)) (= e2 (op e3 e4)) (= e2 (op e2 e4)) (= e2 (op e0 e4)) (= e2 (op e1 e4))) (or (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule cong :premises (t273 t64 t274 t275 t276))
(step t278 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op e0 e0))) (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op e0 e0))))
(step t279 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule refl)
(step t280 (cl (= (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))
(step t281 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule refl)
(step t282 (cl (= (or (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule cong :premises (t278 t109 t279 t280 t281))
(step t283 (cl (= (or (= e2 (op e4 e4)) (= e2 (op e3 e4)) (= e2 (op e2 e4)) (= e2 (op e0 e4)) (= e2 (op e1 e4))) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule trans :premises (t277 t282))
(step t284 (cl (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule trans :premises (t272 t283))
(step t285 (cl (and (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) (and (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))))) :rule and :premises (a1) :args (1))
(step t286 (cl (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3))))) :rule and :premises (t285) :args (0))
(step t287 (cl (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2))))) :rule and :premises (t286) :args (0))
(step t288 (cl (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) :rule and :premises (t287) :args (1))
(step t289 (cl (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2))) :rule and :premises (t288) :args (1))
(step t290 (cl (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule resolution :premises (t265 t284 t289))
(step t291 (cl (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule or :premises (t290))
(step t292 (cl (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0))) :rule reordering :premises (t291))
(step t293 (cl (not (= (not (= (op e1 e0) (op e1 e4))) (not (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) (not (not (= (op e1 e0) (op e1 e4)))) (not (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule equiv_pos2)
(step t294 (cl (= (= (op e1 e0) (op e1 e4)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule cong :premises (t91 t83))
(step t295 (cl (= (not (= (op e1 e0) (op e1 e4))) (not (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule cong :premises (t294))
(step t296 (cl (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) :rule and :premises (t243) :args (1))
(step t297 (cl (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4))))) :rule and :premises (t296) :args (0))
(step t298 (cl (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3))))) :rule and :premises (t297) :args (0))
(step t299 (cl (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4))))) :rule and :premises (t298) :args (0))
(step t300 (cl (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3))))) :rule and :premises (t299) :args (0))
(step t301 (cl (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2))))) :rule and :premises (t300) :args (0))
(step t302 (cl (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4))))) :rule and :premises (t301) :args (0))
(step t303 (cl (not (= (op e1 e0) (op e1 e4)))) :rule and :premises (t302) :args (1))
(step t304 (cl (not (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule resolution :premises (t293 t295 t303))
(step t305 (cl (not (= (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0)) (or (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 e0))))) (not (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0))) (or (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 e0)))) :rule equiv_pos2)
(step t306 (cl (= (= (op e1 e0) e1) (= e1 (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) e1))
(step t307 (cl (= (not (= (op e1 e0) e1)) (not (= e1 (op e1 e0))))) :rule cong :premises (t306))
(step t308 (cl (= (= (op e0 e0) e0) (= e0 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e0))
(step t309 (cl (= (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0)) (or (not (= e1 (op e1 e0))) (= e0 (op e0 e0))))) :rule cong :premises (t307 t308))
(step t310 (cl (= (= e1 (op e1 e0)) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t58 t91))
(step t311 (cl (= (not (= e1 (op e1 e0))) (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t310))
(step t312 (cl (= (= e0 (op e0 e0)) (= e0 (op e0 e0)))) :rule refl)
(step t313 (cl (= (or (not (= e1 (op e1 e0))) (= e0 (op e0 e0))) (or (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 e0))))) :rule cong :premises (t311 t312))
(step t314 (cl (= (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0)) (or (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 e0))))) :rule trans :premises (t309 t313))
(step t315 (cl (and (and (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e1) e1))) (or (not (= (op e0 e2) e0)) (= (op e2 e2) e2))) (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3))) (or (not (= (op e0 e4) e0)) (= (op e4 e4) e4))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e2) e2))) (or (not (= (op e1 e3) e1)) (= (op e3 e3) e3))) (or (not (= (op e1 e4) e1)) (= (op e4 e4) e4)))) (and (and (and (and (or (not (= (op e2 e0) e2)) (= (op e0 e0) e0)) (or (not (= (op e2 e1) e2)) (= (op e1 e1) e1))) (or (not (= (op e2 e2) e2)) (= (op e2 e2) e2))) (or (not (= (op e2 e3) e2)) (= (op e3 e3) e3))) (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4)))) (and (and (and (and (or (not (= (op e3 e0) e3)) (= (op e0 e0) e0)) (or (not (= (op e3 e1) e3)) (= (op e1 e1) e1))) (or (not (= (op e3 e2) e3)) (= (op e2 e2) e2))) (or (not (= (op e3 e3) e3)) (= (op e3 e3) e3))) (or (not (= (op e3 e4) e3)) (= (op e4 e4) e4))))) :rule and :premises (a7) :args (0))
(step t316 (cl (and (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e1) e1))) (or (not (= (op e0 e2) e0)) (= (op e2 e2) e2))) (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3))) (or (not (= (op e0 e4) e0)) (= (op e4 e4) e4))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e2) e2))) (or (not (= (op e1 e3) e1)) (= (op e3 e3) e3))) (or (not (= (op e1 e4) e1)) (= (op e4 e4) e4)))) (and (and (and (and (or (not (= (op e2 e0) e2)) (= (op e0 e0) e0)) (or (not (= (op e2 e1) e2)) (= (op e1 e1) e1))) (or (not (= (op e2 e2) e2)) (= (op e2 e2) e2))) (or (not (= (op e2 e3) e2)) (= (op e3 e3) e3))) (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4))))) :rule and :premises (t315) :args (0))
(step t317 (cl (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e1) e1))) (or (not (= (op e0 e2) e0)) (= (op e2 e2) e2))) (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3))) (or (not (= (op e0 e4) e0)) (= (op e4 e4) e4))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e2) e2))) (or (not (= (op e1 e3) e1)) (= (op e3 e3) e3))) (or (not (= (op e1 e4) e1)) (= (op e4 e4) e4))))) :rule and :premises (t316) :args (0))
(step t318 (cl (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e2) e2))) (or (not (= (op e1 e3) e1)) (= (op e3 e3) e3))) (or (not (= (op e1 e4) e1)) (= (op e4 e4) e4)))) :rule and :premises (t317) :args (1))
(step t319 (cl (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e2) e2))) (or (not (= (op e1 e3) e1)) (= (op e3 e3) e3)))) :rule and :premises (t318) :args (0))
(step t320 (cl (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e2) e2)))) :rule and :premises (t319) :args (0))
(step t321 (cl (and (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1)))) :rule and :premises (t320) :args (0))
(step t322 (cl (or (not (= (op e1 e0) e1)) (= (op e0 e0) e0))) :rule and :premises (t321) :args (0))
(step t323 (cl (or (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 e0)))) :rule resolution :premises (t305 t314 t322))
(step t324 (cl (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 e0))) :rule or :premises (t323))
(step t325 (cl (= e0 (op e0 e0)) (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule reordering :premises (t324))
(step t326 (cl (not (= (not (= e0 e4)) (not (= e0 (op e0 e0))))) (not (not (= e0 e4))) (not (= e0 (op e0 e0)))) :rule equiv_pos2)
(step t327 (cl (= (= e0 e4) (= e4 e0))) :rule rare_rewrite :args ("eq-symm" e0 e4))
(step t328 (cl (= (not (= e0 e4)) (not (= e4 e0)))) :rule cong :premises (t327))
(step t329 (cl (= (= e4 e0) (= (op e0 e0) e0))) :rule cong :premises (t31 t30))
(step t330 (cl (= (not (= e4 e0)) (not (= (op e0 e0) e0)))) :rule cong :premises (t329))
(step t331 (cl (= (not (= (op e0 e0) e0)) (not (= e0 (op e0 e0))))) :rule cong :premises (t308))
(step t332 (cl (= (not (= e4 e0)) (not (= e0 (op e0 e0))))) :rule trans :premises (t330 t331))
(step t333 (cl (= (not (= e0 e4)) (not (= e0 (op e0 e0))))) :rule trans :premises (t328 t332))
(step t334 (cl (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3))) (not (= e2 e4)))) :rule and :premises (a10) :args (0))
(step t335 (cl (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3)))) :rule and :premises (t334) :args (0))
(step t336 (cl (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4)))) :rule and :premises (t335) :args (0))
(step t337 (cl (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3)))) :rule and :premises (t336) :args (0))
(step t338 (cl (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2)))) :rule and :premises (t337) :args (0))
(step t339 (cl (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4)))) :rule and :premises (t338) :args (0))
(step t340 (cl (not (= e0 e4))) :rule and :premises (t339) :args (1))
(step t341 (cl (not (= e0 (op e0 e0)))) :rule resolution :premises (t326 t333 t340))
(step t342 (cl (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule resolution :premises (t325 t341))
(step t343 (cl (not (= (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4)) (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0)))))) (not (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4))) (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0))))) :rule equiv_pos2)
(step t344 (cl (= (not (= (op e2 e4) e2)) (not (= e2 (op e2 e4))))) :rule cong :premises (t268))
(step t345 (cl (= (= (op e4 e4) e4) (= e4 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e4))
(step t346 (cl (= (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4)) (or (not (= e2 (op e2 e4))) (= e4 (op e4 e4))))) :rule cong :premises (t344 t345))
(step t347 (cl (= (not (= e2 (op e2 e4))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule cong :premises (t274))
(step t348 (cl (= (= e4 (op e4 e4)) (= (op e0 e0) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t31 t32))
(step t349 (cl (= (or (not (= e2 (op e2 e4))) (= e4 (op e4 e4))) (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0)))))) :rule cong :premises (t347 t348))
(step t350 (cl (= (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4)) (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0)))))) :rule trans :premises (t346 t349))
(step t351 (cl (and (and (and (and (or (not (= (op e2 e0) e2)) (= (op e0 e0) e0)) (or (not (= (op e2 e1) e2)) (= (op e1 e1) e1))) (or (not (= (op e2 e2) e2)) (= (op e2 e2) e2))) (or (not (= (op e2 e3) e2)) (= (op e3 e3) e3))) (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4)))) :rule and :premises (t316) :args (1))
(step t352 (cl (or (not (= (op e2 e4) e2)) (= (op e4 e4) e4))) :rule and :premises (t351) :args (1))
(step t353 (cl (or (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0))))) :rule resolution :premises (t343 t350 t352))
(step t354 (cl (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 e0)))) :rule or :premises (t353))
(step t355 (cl (= (op e0 e0) (op (op e0 e0) (op e0 e0))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule reordering :premises (t354))
(step t356 (cl (= (= (= (op e0 e0) (op (op e0 e0) (op e0 e0))) false) (not (= (op e0 e0) (op (op e0 e0) (op e0 e0)))))) :rule equiv_simplify)
(step t357 (cl (not (= (= (op e0 e0) (op (op e0 e0) (op e0 e0))) false)) (not (= (op e0 e0) (op (op e0 e0) (op e0 e0))))) :rule equiv1 :premises (t356))
(step t358 (cl (not (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) (not (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv_pos2)
(step t359 (cl (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op e0 e3) e4) (= (op e0 e3) e3) (= (op e0 e3) e2) (= (op e0 e3) e0) (= (op e0 e3) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op e0 e3) e4) (= (op e0 e3) e3) (= (op e0 e3) e2) (= (op e0 e3) e0) (= (op e0 e3) e1)))))
(step t360 (cl (= (= (op e0 e3) e4) (= e4 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e4))
(step t361 (cl (= (= (op e0 e3) e3) (= e3 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e3))
(step t362 (cl (= (= (op e0 e3) e2) (= e2 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e2))
(step t363 (cl (= (= (op e0 e3) e1) (= e1 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e1))
(step t364 (cl (= (or (= (op e0 e3) e4) (= (op e0 e3) e3) (= (op e0 e3) e2) (= (op e0 e3) e0) (= (op e0 e3) e1)) (or (= e4 (op e0 e3)) (= e3 (op e0 e3)) (= e2 (op e0 e3)) (= e0 (op e0 e3)) (= e1 (op e0 e3))))) :rule cong :premises (t360 t361 t362 t23 t363))
(step t365 (cl (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= e4 (op e0 e3)) (= e3 (op e0 e3)) (= e2 (op e0 e3)) (= e0 (op e0 e3)) (= e1 (op e0 e3))))) :rule trans :premises (t359 t364))
(step t366 (cl (= (= e4 (op e0 e3)) (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t31 t94))
(step t367 (cl (= (= e3 (op e0 e3)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t53 t94))
(step t368 (cl (= (= e2 (op e0 e3)) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t45 t94))
(step t369 (cl (= (= e1 (op e0 e3)) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t58 t94))
(step t370 (cl (= (or (= e4 (op e0 e3)) (= e3 (op e0 e3)) (= e2 (op e0 e3)) (= e0 (op e0 e3)) (= e1 (op e0 e3))) (or (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule cong :premises (t366 t367 t368 t95 t369))
(step t371 (cl (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule trans :premises (t365 t370))
(step t372 (cl (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4))))) :rule and :premises (a0) :args (0))
(step t373 (cl (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4))))) :rule and :premises (t372) :args (0))
(step t374 (cl (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4))))) :rule and :premises (t373) :args (0))
(step t375 (cl (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)))) :rule and :premises (t374) :args (0))
(step t376 (cl (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)))) :rule and :premises (t375) :args (0))
(step t377 (cl (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) :rule and :premises (t376) :args (1))
(step t378 (cl (or (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t358 t371 t377))
(step t379 (cl (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule or :premises (t378))
(step t380 (cl (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule reordering :premises (t379))
(step t381 (cl (not (= (not (= (op e0 e0) (op e0 e3))) (not (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) (not (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv_pos2)
(step t382 (cl (= (= (op e0 e0) (op e0 e3)) (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t98 t94))
(step t383 (cl (= (not (= (op e0 e0) (op e0 e3))) (not (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule cong :premises (t382))
(step t384 (cl (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3))))) :rule and :premises (t250) :args (0))
(step t385 (cl (not (= (op e0 e0) (op e0 e3)))) :rule and :premises (t384) :args (1))
(step t386 (cl (not (= (op e0 e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t381 t383 t385))
(step t387 (cl (not (= (not (= (op e0 e3) (op e0 e4))) (not (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) (not (not (= (op e0 e3) (op e0 e4)))) (not (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv_pos2)
(step t388 (cl (= (= (op e0 e3) (op e0 e4)) (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op e0 (op e0 e0))))) :rule cong :premises (t94 t43))
(step t389 (cl (= (not (= (op e0 e3) (op e0 e4))) (not (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op e0 (op e0 e0)))))) :rule cong :premises (t388))
(step t390 (cl (= (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op e0 (op e0 e0))))
(step t391 (cl (= (not (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op e0 (op e0 e0)))) (not (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule cong :premises (t390))
(step t392 (cl (= (not (= (op e0 e3) (op e0 e4))) (not (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule trans :premises (t389 t391))
(step t393 (cl (not (= (op e0 e3) (op e0 e4)))) :rule and :premises (t244) :args (1))
(step t394 (cl (not (= (op e0 (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t387 t392 t393))
(step t395 (cl (= (= (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule equiv_simplify)
(step t396 (cl (not (= (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) false)) (not (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv1 :premises (t395))
(step t397 (cl (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) :rule refl)
(step t398 (cl (not (= (= (op e0 e3) (op e3 e0)) (= (op (op (op (op e0 (op e0 e0)) e0) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) (not (= (op e0 e3) (op e3 e0))) (= (op (op (op (op e0 (op e0 e0)) e0) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule equiv_pos2)
(step t399 (cl (= (= (op e0 e3) (op e3 e0)) (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule cong :premises (t94 t71))
(step t400 (cl (= (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) (= (op (op (op (op e0 (op e0 e0)) e0) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))
(step t401 (cl (= (= (op e0 e3) (op e3 e0)) (= (op (op (op (op e0 (op e0 e0)) e0) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule trans :premises (t399 t400))
(step t402 (cl (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3)))) :rule and :premises (t186) :args (0))
(step t403 (cl (= (op e3 e0) (op e0 e3))) :rule and :premises (t402) :args (1))
(step t404 (cl (= (op e0 e3) (op e3 e0))) :rule symm :premises (t403))
(step t405 (cl (= (op (op (op (op e0 (op e0 e0)) e0) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t398 t401 t404))
(step t406 (cl (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule symm :premises (t405))
(step t407 (cl (= (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule cong :premises (t397 t406))
(step t408 (cl (= (= (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) :rule equiv_simplify)
(step t409 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false) (not (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) :rule equiv2 :premises (t408))
(step t410 (cl (not (not (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule not_not)
(step t411 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule resolution :premises (t409 t410))
(step t412 (cl (not (= (not (= (op e1 e0) (op e3 e0))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) (not (not (= (op e1 e0) (op e3 e0)))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule equiv_pos2)
(step t413 (cl (= (= (op e1 e0) (op e3 e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule cong :premises (t91 t71))
(step t414 (cl (= (not (= (op e1 e0) (op e3 e0))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) :rule cong :premises (t413))
(step t415 (cl (not (= (op e1 e0) (op e3 e0)))) :rule and :premises (t172) :args (1))
(step t416 (cl (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule resolution :premises (t412 t414 t415))
(step t417 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false)) :rule resolution :premises (t411 t416))
(step t418 (cl (= (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) false)) :rule trans :premises (t407 t417))
(step t419 (cl (not (= (op (op e0 (op e0 e0)) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t396 t418))
(step t420 (cl (= (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule equiv_simplify)
(step t421 (cl (not (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) false)) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv1 :premises (t420))
(step t422 (cl (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) :rule refl)
(step t423 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule cong :premises (t422 t406))
(step t424 (cl (= (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) :rule equiv_simplify)
(step t425 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false) (not (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) :rule equiv2 :premises (t424))
(step t426 (cl (not (not (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule not_not)
(step t427 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule resolution :premises (t425 t426))
(step t428 (cl (not (= (not (= (op e2 e0) (op e3 e0))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) (not (not (= (op e2 e0) (op e3 e0)))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule equiv_pos2)
(step t429 (cl (= (= (op e2 e0) (op e3 e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule cong :premises (t81 t71))
(step t430 (cl (= (not (= (op e2 e0) (op e3 e0))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) :rule cong :premises (t429))
(step t431 (cl (not (= (op e2 e0) (op e3 e0)))) :rule and :premises (t170) :args (1))
(step t432 (cl (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule resolution :premises (t428 t430 t431))
(step t433 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false)) :rule resolution :premises (t427 t432))
(step t434 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))) false)) :rule trans :premises (t423 t433))
(step t435 (cl (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t421 t434))
(step t436 (cl (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t380 t386 t394 t419 t435))
(step t437 (cl (= (op (op e0 e0) (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule trans :premises (t194 t436 t406))
(step t438 (cl (= (= (op e0 e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule cong :premises (t98 t437))
(step t439 (cl (= (= (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false) (not (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) :rule equiv_simplify)
(step t440 (cl (= (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false) (not (not (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) :rule equiv2 :premises (t439))
(step t441 (cl (not (not (not (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule not_not)
(step t442 (cl (= (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule resolution :premises (t440 t441))
(step t443 (cl (not (= (not (= (op e0 e0) (op e3 e0))) (not (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) (not (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule equiv_pos2)
(step t444 (cl (= (= (op e0 e0) (op e3 e0)) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule cong :premises (t98 t71))
(step t445 (cl (= (not (= (op e0 e0) (op e3 e0))) (not (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))))) :rule cong :premises (t444))
(step t446 (cl (not (= (op e0 e0) (op e3 e0)))) :rule and :premises (t175) :args (1))
(step t447 (cl (not (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule resolution :premises (t443 t445 t446))
(step t448 (cl (= (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)) false)) :rule resolution :premises (t442 t447))
(step t449 (cl (= (= (op e0 e0) (op (op e0 e0) (op e0 e0))) false)) :rule trans :premises (t438 t448))
(step t450 (cl (not (= (op e0 e0) (op (op e0 e0) (op e0 e0))))) :rule resolution :premises (t357 t449))
(step t451 (cl (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule resolution :premises (t355 t450))
(step t452 (cl (= (= (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) false) (not (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule equiv_simplify)
(step t453 (cl (not (= (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) false)) (not (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule equiv1 :premises (t452))
(step t454 (cl (= (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= e0 (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t194 t397))
(step t455 (cl (= (= (= e0 (op (op e0 (op e0 e0)) e0)) false) (not (= e0 (op (op e0 (op e0 e0)) e0))))) :rule equiv_simplify)
(step t456 (cl (= (= e0 (op (op e0 (op e0 e0)) e0)) false) (not (not (= e0 (op (op e0 (op e0 e0)) e0))))) :rule equiv2 :premises (t455))
(step t457 (cl (not (not (not (= e0 (op (op e0 (op e0 e0)) e0))))) (= e0 (op (op e0 (op e0 e0)) e0))) :rule not_not)
(step t458 (cl (= (= e0 (op (op e0 (op e0 e0)) e0)) false) (= e0 (op (op e0 (op e0 e0)) e0))) :rule resolution :premises (t456 t457))
(step t459 (cl (not (= (not (= e0 e2)) (not (= e0 (op (op e0 (op e0 e0)) e0))))) (not (not (= e0 e2))) (not (= e0 (op (op e0 (op e0 e0)) e0)))) :rule equiv_pos2)
(step t460 (cl (= (= e0 e2) (= e2 e0))) :rule rare_rewrite :args ("eq-symm" e0 e2))
(step t461 (cl (= (not (= e0 e2)) (not (= e2 e0)))) :rule cong :premises (t460))
(step t462 (cl (= (= e2 e0) (= (op (op e0 (op e0 e0)) e0) e0))) :rule cong :premises (t45 t30))
(step t463 (cl (= (not (= e2 e0)) (not (= (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t462))
(step t464 (cl (= (= (op (op e0 (op e0 e0)) e0) e0) (= e0 (op (op e0 (op e0 e0)) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op e0 (op e0 e0)) e0) e0))
(step t465 (cl (= (not (= (op (op e0 (op e0 e0)) e0) e0)) (not (= e0 (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t464))
(step t466 (cl (= (not (= e2 e0)) (not (= e0 (op (op e0 (op e0 e0)) e0))))) :rule trans :premises (t463 t465))
(step t467 (cl (= (not (= e0 e2)) (not (= e0 (op (op e0 (op e0 e0)) e0))))) :rule trans :premises (t461 t466))
(step t468 (cl (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3)))) :rule and :premises (t339) :args (0))
(step t469 (cl (and (not (= e0 e1)) (not (= e0 e2)))) :rule and :premises (t468) :args (0))
(step t470 (cl (not (= e0 e2))) :rule and :premises (t469) :args (1))
(step t471 (cl (not (= e0 (op (op e0 (op e0 e0)) e0)))) :rule resolution :premises (t459 t467 t470))
(step t472 (cl (= (= e0 (op (op e0 (op e0 e0)) e0)) false)) :rule resolution :premises (t458 t471))
(step t473 (cl (= (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) false)) :rule trans :premises (t454 t472))
(step t474 (cl (not (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule resolution :premises (t453 t473))
(step t475 (cl (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))) :rule resolution :premises (t292 t304 t342 t451 t474))
(step t476 (cl (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule trans :premises (t475 t264))
(step t477 (cl (= (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 (op e0 e0)) e0))) :rule symm :premises (t476))
(step t478 (cl (not (= (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2)) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) (not (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2))) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule equiv_pos2)
(step t479 (cl (= (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2)) (or (= (op e4 e4) e2) (= (op e3 e3) e2) (= (op e2 e2) e2) (= (op e0 e0) e2) (= (op e1 e1) e2)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2)) (or (= (op e4 e4) e2) (= (op e3 e3) e2) (= (op e2 e2) e2) (= (op e0 e0) e2) (= (op e1 e1) e2)))))
(step t480 (cl (= (= (op e3 e3) e2) (= e2 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e2))
(step t481 (cl (= (= (op e0 e0) e2) (= e2 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e2))
(step t482 (cl (= (= (op e1 e1) e2) (= e2 (op e1 e1)))) :rule rare_rewrite :args ("eq-symm" (op e1 e1) e2))
(step t483 (cl (= (or (= (op e4 e4) e2) (= (op e3 e3) e2) (= (op e2 e2) e2) (= (op e0 e0) e2) (= (op e1 e1) e2)) (or (= e2 (op e4 e4)) (= e2 (op e3 e3)) (= e2 (op e2 e2)) (= e2 (op e0 e0)) (= e2 (op e1 e1))))) :rule cong :premises (t267 t480 t14 t481 t482))
(step t484 (cl (= (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2)) (or (= e2 (op e4 e4)) (= e2 (op e3 e3)) (= e2 (op e2 e2)) (= e2 (op e0 e0)) (= e2 (op e1 e1))))) :rule trans :premises (t479 t483))
(step t485 (cl (= (= e2 (op e3 e3)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t45 t65))
(step t486 (cl (= (= e2 (op e0 e0)) (= (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule cong :premises (t45 t98))
(step t487 (cl (= (= e2 (op e1 e1)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule cong :premises (t45 t89))
(step t488 (cl (= (or (= e2 (op e4 e4)) (= e2 (op e3 e3)) (= e2 (op e2 e2)) (= e2 (op e0 e0)) (= e2 (op e1 e1))) (or (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule cong :premises (t273 t485 t78 t486 t487))
(step t489 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule refl)
(step t490 (cl (= (= (op (op e0 (op e0 e0)) e0) (op e0 e0)) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op e0 (op e0 e0)) e0) (op e0 e0)))
(step t491 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule refl)
(step t492 (cl (= (or (= (op (op e0 (op e0 e0)) e0) (op (op e0 e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule cong :premises (t278 t489 t116 t490 t491))
(step t493 (cl (= (or (= e2 (op e4 e4)) (= e2 (op e3 e3)) (= e2 (op e2 e2)) (= e2 (op e0 e0)) (= e2 (op e1 e1))) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule trans :premises (t488 t492))
(step t494 (cl (= (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2)) (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule trans :premises (t484 t493))
(step t495 (cl (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2))) :rule and :premises (t219) :args (1))
(step t496 (cl (or (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule resolution :premises (t478 t494 t495))
(step t497 (cl (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) :rule or :premises (t496))
(step t498 (cl (= (op e0 e0) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) e0))) :rule reordering :premises (t497))
(step t499 (cl (not (= (not (= (op e1 e0) (op e1 e1))) (not (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) (not (not (= (op e1 e0) (op e1 e1)))) (not (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule equiv_pos2)
(step t500 (cl (= (= (op e1 e0) (op e1 e1)) (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule cong :premises (t91 t89))
(step t501 (cl (= (not (= (op e1 e0) (op e1 e1))) (not (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule cong :premises (t500))
(step t502 (cl (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3))))) :rule and :premises (t302) :args (0))
(step t503 (cl (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2))))) :rule and :premises (t502) :args (0))
(step t504 (cl (not (= (op e1 e0) (op e1 e1)))) :rule and :premises (t503) :args (0))
(step t505 (cl (not (= (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule resolution :premises (t499 t501 t504))
(step t506 (cl (= (= (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule equiv_simplify)
(step t507 (cl (not (= (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false)) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv1 :premises (t506))
(step t508 (cl (not (= (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3)) (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) (not (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3))) (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv_pos2)
(step t509 (cl (= (not (= (op e0 e3) e0)) (not (= e0 (op e0 e3))))) :rule cong :premises (t23))
(step t510 (cl (= (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3)) (or (not (= e0 (op e0 e3))) (= e3 (op e3 e3))))) :rule cong :premises (t509 t8))
(step t511 (cl (= (not (= e0 (op e0 e3))) (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule cong :premises (t95))
(step t512 (cl (= (or (not (= e0 (op e0 e3))) (= e3 (op e3 e3))) (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule cong :premises (t511 t66))
(step t513 (cl (= (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3)) (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule trans :premises (t510 t512))
(step t514 (cl (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e1) e1))) (or (not (= (op e0 e2) e0)) (= (op e2 e2) e2))) (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3))) (or (not (= (op e0 e4) e0)) (= (op e4 e4) e4)))) :rule and :premises (t317) :args (0))
(step t515 (cl (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e1) e1))) (or (not (= (op e0 e2) e0)) (= (op e2 e2) e2))) (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3)))) :rule and :premises (t514) :args (0))
(step t516 (cl (or (not (= (op e0 e3) e0)) (= (op e3 e3) e3))) :rule and :premises (t515) :args (1))
(step t517 (cl (or (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t508 t513 t516))
(step t518 (cl (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule or :premises (t517))
(step t519 (cl (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (not (= e0 (op e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule reordering :premises (t518))
(step t520 (cl (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t519 t436))
(step t521 (cl (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) e0))) :rule symm :premises (t520))
(step t522 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t397 t521))
(step t523 (cl (= (= (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)) false) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv_simplify)
(step t524 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)) false) (not (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv2 :premises (t523))
(step t525 (cl (not (not (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) :rule not_not)
(step t526 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)) false) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) :rule resolution :premises (t524 t525))
(step t527 (cl (not (= (not (= (op e1 e0) (op e2 e0))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) (not (not (= (op e1 e0) (op e2 e0)))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule equiv_pos2)
(step t528 (cl (= (= (op e1 e0) (op e2 e0)) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t91 t81))
(step t529 (cl (= (not (= (op e1 e0) (op e2 e0))) (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t528))
(step t530 (cl (not (= (op e1 e0) (op e2 e0)))) :rule and :premises (t173) :args (1))
(step t531 (cl (not (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t527 t529 t530))
(step t532 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)) false)) :rule resolution :premises (t526 t531))
(step t533 (cl (= (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false)) :rule trans :premises (t522 t532))
(step t534 (cl (not (= (op (op e0 (op e0 e0)) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t507 t533))
(step t535 (cl (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)))) :rule resolution :premises (t498 t178 t505 t534 t474))
(step t536 (cl (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)))) :rule trans :premises (t264 t477 t535))
(step t537 (cl (= (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))) :rule symm :premises (t536))
(step t538 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule cong :premises (t255 t537))
(step t539 (cl (= (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) false) (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))) :rule equiv_simplify)
(step t540 (cl (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) false) (not (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))) :rule equiv2 :premises (t539))
(step t541 (cl (not (not (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))) :rule not_not)
(step t542 (cl (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) false) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))) :rule resolution :premises (t540 t541))
(step t543 (cl (not (= (not (= (op e0 e4) (op e3 e4))) (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))) (not (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule equiv_pos2)
(step t544 (cl (= (= (op e0 e4) (op e3 e4)) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule cong :premises (t43 t63))
(step t545 (cl (= (not (= (op e0 e4) (op e3 e4))) (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))) :rule cong :premises (t544))
(step t546 (cl (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4))))) :rule and :premises (t234) :args (0))
(step t547 (cl (not (= (op e0 e4) (op e3 e4)))) :rule and :premises (t546) :args (1))
(step t548 (cl (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule resolution :premises (t543 t545 t547))
(step t549 (cl (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) false)) :rule resolution :premises (t542 t548))
(step t550 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) false)) :rule trans :premises (t538 t549))
(step t551 (cl (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t254 t550))
(step t552 (cl (= (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule equiv_simplify)
(step t553 (cl (not (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false)) (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv1 :premises (t552))
(step t554 (cl (not (= (= (op e0 e1) (op e1 e0)) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))) (not (= (op e0 e1) (op e1 e0))) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))) :rule equiv_pos2)
(step t555 (cl (= (= (op e0 e1) (op e1 e0)) (= (op e0 (op e0 (op e0 e0))) (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t100 t91))
(step t556 (cl (= (= (op e0 (op e0 (op e0 e0))) (op (op e0 (op e0 e0)) e0)) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op e0 (op e0 e0))) (op (op e0 (op e0 e0)) e0)))
(step t557 (cl (= (= (op e0 e1) (op e1 e0)) (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0)))))) :rule trans :premises (t555 t556))
(step t558 (cl (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2)))) :rule and :premises (t402) :args (0))
(step t559 (cl (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1)))) :rule and :premises (t558) :args (0))
(step t560 (cl (= (op e1 e0) (op e0 e1))) :rule and :premises (t559) :args (1))
(step t561 (cl (= (op e0 e1) (op e1 e0))) :rule symm :premises (t560))
(step t562 (cl (= (op (op e0 (op e0 e0)) e0) (op e0 (op e0 (op e0 e0))))) :rule resolution :premises (t554 t557 t561))
(step t563 (cl (= (op e0 (op e0 (op e0 e0))) (op (op e0 (op e0 e0)) e0))) :rule symm :premises (t562))
(step t564 (cl (= (op e0 (op e0 (op e0 (op e0 e0)))) (op e0 (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t30 t563))
(step t565 (cl (not (= (= (op e0 e2) (op e2 e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))))) (not (= (op e0 e2) (op e2 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0)))) :rule equiv_pos2)
(step t566 (cl (= (= (op e0 e2) (op e2 e0)) (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t96 t81))
(step t567 (cl (= (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) e0)))
(step t568 (cl (= (= (op e0 e2) (op e2 e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0))))) :rule trans :premises (t566 t567))
(step t569 (cl (= (op e2 e0) (op e0 e2))) :rule and :premises (t558) :args (1))
(step t570 (cl (= (op e0 e2) (op e2 e0))) :rule symm :premises (t569))
(step t571 (cl (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op (op e0 (op e0 e0)) e0)))) :rule resolution :premises (t565 t568 t570))
(step t572 (cl (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) e0))) :rule symm :premises (t571))
(step t573 (cl (not (= (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) (not (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3))) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule equiv_pos2)
(step t574 (cl (= (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)) (or (= (op e4 e4) e3) (= (op e3 e4) e3) (= (op e2 e4) e3) (= (op e0 e4) e3) (= (op e1 e4) e3)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)) (or (= (op e4 e4) e3) (= (op e3 e4) e3) (= (op e2 e4) e3) (= (op e0 e4) e3) (= (op e1 e4) e3)))))
(step t575 (cl (= (= (op e4 e4) e3) (= e3 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e3))
(step t576 (cl (= (= (op e3 e4) e3) (= e3 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e3))
(step t577 (cl (= (= (op e2 e4) e3) (= e3 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e3))
(step t578 (cl (= (= (op e0 e4) e3) (= e3 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e3))
(step t579 (cl (= (or (= (op e4 e4) e3) (= (op e3 e4) e3) (= (op e2 e4) e3) (= (op e0 e4) e3) (= (op e1 e4) e3)) (or (= e3 (op e4 e4)) (= e3 (op e3 e4)) (= e3 (op e2 e4)) (= e3 (op e0 e4)) (= e3 (op e1 e4))))) :rule cong :premises (t575 t576 t577 t578 t17))
(step t580 (cl (= (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)) (or (= e3 (op e4 e4)) (= e3 (op e3 e4)) (= e3 (op e2 e4)) (= e3 (op e0 e4)) (= e3 (op e1 e4))))) :rule trans :premises (t574 t579))
(step t581 (cl (= (= e3 (op e4 e4)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t53 t32))
(step t582 (cl (= (= e3 (op e3 e4)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule cong :premises (t53 t63))
(step t583 (cl (= (= e3 (op e2 e4)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule cong :premises (t53 t73))
(step t584 (cl (= (= e3 (op e0 e4)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0))))) :rule cong :premises (t53 t43))
(step t585 (cl (= (or (= e3 (op e4 e4)) (= e3 (op e3 e4)) (= e3 (op e2 e4)) (= e3 (op e0 e4)) (= e3 (op e1 e4))) (or (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule cong :premises (t581 t582 t583 t584 t84))
(step t586 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 e0))))
(step t587 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule refl)
(step t588 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule refl)
(step t589 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0))))
(step t590 (cl (= (or (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule cong :premises (t586 t587 t588 t589 t119))
(step t591 (cl (= (or (= e3 (op e4 e4)) (= e3 (op e3 e4)) (= e3 (op e2 e4)) (= e3 (op e0 e4)) (= e3 (op e1 e4))) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule trans :premises (t585 t590))
(step t592 (cl (= (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule trans :premises (t580 t591))
(step t593 (cl (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) :rule and :premises (t286) :args (1))
(step t594 (cl (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3))) :rule and :premises (t593) :args (1))
(step t595 (cl (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule resolution :premises (t573 t592 t594))
(step t596 (cl (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule or :premises (t595))
(step t597 (cl (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) :rule reordering :premises (t596))
(step t598 (cl (not (= (not (= (op e2 e0) (op e2 e4))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) (not (not (= (op e2 e0) (op e2 e4)))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule equiv_pos2)
(step t599 (cl (= (= (op e2 e0) (op e2 e4)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule cong :premises (t81 t73))
(step t600 (cl (= (not (= (op e2 e0) (op e2 e4))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule cong :premises (t599))
(step t601 (cl (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) :rule and :premises (t242) :args (1))
(step t602 (cl (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4))))) :rule and :premises (t601) :args (0))
(step t603 (cl (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3))))) :rule and :premises (t602) :args (0))
(step t604 (cl (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4))))) :rule and :premises (t603) :args (0))
(step t605 (cl (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3))))) :rule and :premises (t604) :args (0))
(step t606 (cl (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2))))) :rule and :premises (t605) :args (0))
(step t607 (cl (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4))))) :rule and :premises (t606) :args (0))
(step t608 (cl (not (= (op e2 e0) (op e2 e4)))) :rule and :premises (t607) :args (1))
(step t609 (cl (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule resolution :premises (t598 t600 t608))
(step t610 (cl (not (= (not (= e1 e3)) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))))) (not (not (= e1 e3))) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule equiv_pos2)
(step t611 (cl (= (= e1 e3) (= e3 e1))) :rule rare_rewrite :args ("eq-symm" e1 e3))
(step t612 (cl (= (not (= e1 e3)) (not (= e3 e1)))) :rule cong :premises (t611))
(step t613 (cl (= (= e3 e1) (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0))))) :rule cong :premises (t53 t58))
(step t614 (cl (= (not (= e3 e1)) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))))) :rule cong :premises (t613))
(step t615 (cl (= (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t589))
(step t616 (cl (= (not (= e3 e1)) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule trans :premises (t614 t615))
(step t617 (cl (= (not (= e1 e3)) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule trans :premises (t612 t616))
(step t618 (cl (not (= e1 e3))) :rule and :premises (t337) :args (1))
(step t619 (cl (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t610 t617 t618))
(step t620 (cl (= (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) false) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0)))))) :rule equiv_simplify)
(step t621 (cl (not (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) false)) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule equiv1 :premises (t620))
(step t622 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t520 t264))
(step t623 (cl (= (= (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule equiv_simplify)
(step t624 (cl (= (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (not (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule equiv2 :premises (t623))
(step t625 (cl (not (not (not (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule not_not)
(step t626 (cl (= (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t624 t625))
(step t627 (cl (not (= (not (= (op e3 e3) (op e4 e3))) (not (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) (not (not (= (op e3 e3) (op e4 e3)))) (not (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv_pos2)
(step t628 (cl (= (= (op e3 e3) (op e4 e3)) (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t65 t54))
(step t629 (cl (= (not (= (op e3 e3) (op e4 e3))) (not (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule cong :premises (t628))
(step t630 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) :rule and :premises (t165) :args (1))
(step t631 (cl (not (= (op e3 e3) (op e4 e3)))) :rule and :premises (t630) :args (1))
(step t632 (cl (not (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t627 t629 t631))
(step t633 (cl (= (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) false)) :rule resolution :premises (t626 t632))
(step t634 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))) false)) :rule trans :premises (t622 t633))
(step t635 (cl (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 e0))))) :rule resolution :premises (t621 t634))
(step t636 (cl (= (= (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) false) (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv_simplify)
(step t637 (cl (not (= (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) false)) (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule equiv1 :premises (t636))
(step t638 (cl (= (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t194 t422))
(step t639 (cl (= (= (= e0 (op (op (op e0 (op e0 e0)) e0) e0)) false) (not (= e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv_simplify)
(step t640 (cl (= (= e0 (op (op (op e0 (op e0 e0)) e0) e0)) false) (not (not (= e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv2 :premises (t639))
(step t641 (cl (not (not (not (= e0 (op (op (op e0 (op e0 e0)) e0) e0))))) (= e0 (op (op (op e0 (op e0 e0)) e0) e0))) :rule not_not)
(step t642 (cl (= (= e0 (op (op (op e0 (op e0 e0)) e0) e0)) false) (= e0 (op (op (op e0 (op e0 e0)) e0) e0))) :rule resolution :premises (t640 t641))
(step t643 (cl (not (= (not (= e0 e3)) (not (= e0 (op (op (op e0 (op e0 e0)) e0) e0))))) (not (not (= e0 e3))) (not (= e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule equiv_pos2)
(step t644 (cl (= (= e0 e3) (= e3 e0))) :rule rare_rewrite :args ("eq-symm" e0 e3))
(step t645 (cl (= (not (= e0 e3)) (not (= e3 e0)))) :rule cong :premises (t644))
(step t646 (cl (= (= e3 e0) (= (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule cong :premises (t53 t30))
(step t647 (cl (= (not (= e3 e0)) (not (= (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule cong :premises (t646))
(step t648 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) e0) (= e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e0 (op e0 e0)) e0) e0) e0))
(step t649 (cl (= (not (= (op (op (op e0 (op e0 e0)) e0) e0) e0)) (not (= e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t648))
(step t650 (cl (= (not (= e3 e0)) (not (= e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule trans :premises (t647 t649))
(step t651 (cl (= (not (= e0 e3)) (not (= e0 (op (op (op e0 (op e0 e0)) e0) e0))))) :rule trans :premises (t645 t650))
(step t652 (cl (not (= e0 e3))) :rule and :premises (t468) :args (1))
(step t653 (cl (not (= e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t643 t651 t652))
(step t654 (cl (= (= e0 (op (op (op e0 (op e0 e0)) e0) e0)) false)) :rule resolution :premises (t642 t653))
(step t655 (cl (= (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) false)) :rule trans :premises (t638 t654))
(step t656 (cl (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t637 t655))
(step t657 (cl (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule resolution :premises (t597 t609 t619 t635 t656))
(step t658 (cl (= (op e0 (op e0 (op e0 (op e0 e0)))) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule trans :premises (t564 t572 t657))
(step t659 (cl (= (op (op e0 (op e0 e0)) (op e0 e0)) (op e0 (op e0 (op e0 (op e0 e0)))))) :rule symm :premises (t658))
(step t660 (cl (= (op e0 (op (op e0 (op e0 e0)) e0)) (op e0 (op e0 (op e0 (op e0 e0)))))) :rule symm :premises (t564))
(step t661 (cl (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op e0 (op e0 (op e0 (op e0 e0)))))) :rule trans :premises (t521 t571 t660))
(step t662 (cl (= (op e0 (op e0 (op e0 (op e0 e0)))) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule symm :premises (t661))
(step t663 (cl (= (op (op e0 (op e0 e0)) (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule trans :premises (t659 t662))
(step t664 (cl (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule symm :premises (t663))
(step t665 (cl (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule cong :premises (t255 t664))
(step t666 (cl (= (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))) false) (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule equiv_simplify)
(step t667 (cl (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))) false) (not (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule equiv2 :premises (t666))
(step t668 (cl (not (not (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule not_not)
(step t669 (cl (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))) false) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))) :rule resolution :premises (t667 t668))
(step t670 (cl (not (= (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))))) (not (not (= (op e0 e4) (op e1 e4)))) (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule equiv_pos2)
(step t671 (cl (= (= (op e0 e4) (op e1 e4)) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule cong :premises (t43 t83))
(step t672 (cl (= (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule cong :premises (t671))
(step t673 (cl (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4))))) :rule and :premises (t546) :args (0))
(step t674 (cl (not (= (op e0 e4) (op e1 e4)))) :rule and :premises (t673) :args (0))
(step t675 (cl (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule resolution :premises (t670 t672 t674))
(step t676 (cl (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 e0))) false)) :rule resolution :premises (t669 t675))
(step t677 (cl (= (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false)) :rule trans :premises (t665 t676))
(step t678 (cl (not (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t553 t677))
(step t679 (cl (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) :rule resolution :premises (t224 t236 t252 t551 t678))
(step t680 (cl (= (op (op e0 (op e0 e0)) (op e0 (op e0 e0))) (op e0 (op e0 e0)))) :rule symm :premises (t679))
(step t681 (cl (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) (op e0 e0))))) :rule symm :premises (t195))
(step t682 (cl (= (op (op e0 (op e0 e0)) (op e0 (op e0 e0))) (op (op e0 e0) (op (op e0 e0) (op e0 e0))))) :rule trans :premises (t680 t189 t681))
(step t683 (cl (= (op (op e0 e0) (op (op e0 e0) (op e0 e0))) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) :rule symm :premises (t682))
(step t684 (cl (= (op (op e0 e0) e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) :rule trans :premises (t190 t197 t683))
(step t685 (cl (= (op (op e0 (op e0 e0)) (op e0 (op e0 e0))) (op (op e0 e0) e0))) :rule symm :premises (t684))
(step t686 (cl (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) e0)))) :rule cong :premises (t98 t685))
(step t687 (cl (= (= (= (op e0 e0) (op (op e0 e0) e0)) false) (not (= (op e0 e0) (op (op e0 e0) e0))))) :rule equiv_simplify)
(step t688 (cl (= (= (op e0 e0) (op (op e0 e0) e0)) false) (not (not (= (op e0 e0) (op (op e0 e0) e0))))) :rule equiv2 :premises (t687))
(step t689 (cl (not (not (not (= (op e0 e0) (op (op e0 e0) e0))))) (= (op e0 e0) (op (op e0 e0) e0))) :rule not_not)
(step t690 (cl (= (= (op e0 e0) (op (op e0 e0) e0)) false) (= (op e0 e0) (op (op e0 e0) e0))) :rule resolution :premises (t688 t689))
(step t691 (cl (not (= (not (= (op e0 e0) (op e4 e0))) (not (= (op e0 e0) (op (op e0 e0) e0))))) (not (not (= (op e0 e0) (op e4 e0)))) (not (= (op e0 e0) (op (op e0 e0) e0)))) :rule equiv_pos2)
(step t692 (cl (= (= (op e0 e0) (op e4 e0)) (= (op e0 e0) (op (op e0 e0) e0)))) :rule cong :premises (t98 t61))
(step t693 (cl (= (not (= (op e0 e0) (op e4 e0))) (not (= (op e0 e0) (op (op e0 e0) e0))))) :rule cong :premises (t692))
(step t694 (cl (not (= (op e0 e0) (op e4 e0)))) :rule and :premises (t174) :args (1))
(step t695 (cl (not (= (op e0 e0) (op (op e0 e0) e0)))) :rule resolution :premises (t691 t693 t694))
(step t696 (cl (= (= (op e0 e0) (op (op e0 e0) e0)) false)) :rule resolution :premises (t690 t695))
(step t697 (cl (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) false)) :rule trans :premises (t686 t696))
(step t698 (cl (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule resolution :premises (t180 t697))
(step t699 (cl (= (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) false) (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))) :rule equiv_simplify)
(step t700 (cl (not (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) false)) (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule equiv1 :premises (t699))
(step t701 (cl (not (= (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) e0)) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))))) (not (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0))) (or (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) e0)) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule equiv_pos2)
(step t702 (cl (= (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (= (op e2 e4) e0) (= (op e2 e3) e0) (= (op e2 e2) e0) (= (op e2 e0) e0) (= (op e2 e1) e0)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (= (op e2 e4) e0) (= (op e2 e3) e0) (= (op e2 e2) e0) (= (op e2 e0) e0) (= (op e2 e1) e0)))))
(step t703 (cl (= (= (op e2 e4) e0) (= e0 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e0))
(step t704 (cl (= (= (op e2 e3) e0) (= e0 (op e2 e3)))) :rule rare_rewrite :args ("eq-symm" (op e2 e3) e0))
(step t705 (cl (= (= (op e2 e2) e0) (= e0 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e0))
(step t706 (cl (= (= (op e2 e0) e0) (= e0 (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) e0))
(step t707 (cl (= (or (= (op e2 e4) e0) (= (op e2 e3) e0) (= (op e2 e2) e0) (= (op e2 e0) e0) (= (op e2 e1) e0)) (or (= e0 (op e2 e4)) (= e0 (op e2 e3)) (= e0 (op e2 e2)) (= e0 (op e2 e0)) (= e0 (op e2 e1))))) :rule cong :premises (t703 t704 t705 t706 t15))
(step t708 (cl (= (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (= e0 (op e2 e4)) (= e0 (op e2 e3)) (= e0 (op e2 e2)) (= e0 (op e2 e0)) (= e0 (op e2 e1))))) :rule trans :premises (t702 t707))
(step t709 (cl (= (= e0 (op e2 e4)) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule cong :premises (t30 t73))
(step t710 (cl (= (= e0 (op e2 e3)) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t30 t75))
(step t711 (cl (= (= e0 (op e2 e2)) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t30 t77))
(step t712 (cl (= (= e0 (op e2 e0)) (= e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t30 t81))
(step t713 (cl (= (or (= e0 (op e2 e4)) (= e0 (op e2 e3)) (= e0 (op e2 e2)) (= e0 (op e2 e0)) (= e0 (op e2 e1))) (or (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) e0)) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))))) :rule cong :premises (t709 t710 t711 t712 t80))
(step t714 (cl (= (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) e0)) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))))) :rule trans :premises (t708 t713))
(step t715 (cl (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) :rule and :premises (t153) :args (1))
(step t716 (cl (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3))))) :rule and :premises (t715) :args (0))
(step t717 (cl (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2))))) :rule and :premises (t716) :args (0))
(step t718 (cl (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1))))) :rule and :premises (t717) :args (0))
(step t719 (cl (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)))) :rule and :premises (t718) :args (0))
(step t720 (cl (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0))) :rule and :premises (t719) :args (0))
(step t721 (cl (or (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) e0)) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule resolution :premises (t701 t714 t720))
(step t722 (cl (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) e0)) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))) :rule or :premises (t721))
(step t723 (cl (= e0 (op (op (op e0 (op e0 e0)) e0) e0)) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule reordering :premises (t722))
(step t724 (cl (= (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) false) (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)))))) :rule equiv_simplify)
(step t725 (cl (not (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) false)) (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))))) :rule equiv1 :premises (t724))
(step t726 (cl (= (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0)) (op (op e0 (op e0 e0)) e0))) :rule symm :premises (t535))
(step t727 (cl (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) e0)))) :rule cong :premises (t30 t726))
(step t728 (cl (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) false)) :rule trans :premises (t727 t472))
(step t729 (cl (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t725 t728))
(step t730 (cl (= (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule equiv_simplify)
(step t731 (cl (not (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false)) (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv1 :premises (t730))
(step t732 (cl (= (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule refl)
(step t733 (cl (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t436 t732))
(step t734 (cl (= (= (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule equiv_simplify)
(step t735 (cl (= (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (not (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule equiv2 :premises (t734))
(step t736 (cl (not (not (not (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule not_not)
(step t737 (cl (= (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t735 t736))
(step t738 (cl (not (= (not (= (op e0 e3) (op e2 e3))) (not (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) (not (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv_pos2)
(step t739 (cl (= (= (op e0 e3) (op e2 e3)) (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t94 t75))
(step t740 (cl (= (not (= (op e0 e3) (op e2 e3))) (not (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule cong :premises (t739))
(step t741 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3))))) :rule and :premises (t630) :args (0))
(step t742 (cl (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3))))) :rule and :premises (t741) :args (0))
(step t743 (cl (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3))))) :rule and :premises (t742) :args (0))
(step t744 (cl (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3))))) :rule and :premises (t743) :args (0))
(step t745 (cl (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3))))) :rule and :premises (t744) :args (0))
(step t746 (cl (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3))))) :rule and :premises (t745) :args (0))
(step t747 (cl (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3))))) :rule and :premises (t746) :args (0))
(step t748 (cl (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3))))) :rule and :premises (t747) :args (0))
(step t749 (cl (not (= (op e0 e3) (op e2 e3)))) :rule and :premises (t748) :args (1))
(step t750 (cl (not (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t738 t740 t749))
(step t751 (cl (= (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false)) :rule resolution :premises (t737 t750))
(step t752 (cl (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) false)) :rule trans :premises (t733 t751))
(step t753 (cl (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t731 t752))
(step t754 (cl (= (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) false) (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule equiv_simplify)
(step t755 (cl (not (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) false)) (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule equiv1 :premises (t754))
(step t756 (cl (= e0 (op (op e0 e0) (op e0 e0)))) :rule symm :premises (t194))
(step t757 (cl (= (op (op (op e0 (op e0 e0)) e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule refl)
(step t758 (cl (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule cong :premises (t756 t757))
(step t759 (cl (= (= (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) false) (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule equiv_simplify)
(step t760 (cl (= (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) false) (not (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule equiv2 :premises (t759))
(step t761 (cl (not (not (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule not_not)
(step t762 (cl (= (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) false) (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule resolution :premises (t760 t761))
(step t763 (cl (not (= (not (= (op e2 e4) (op e4 e4))) (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) (not (not (= (op e2 e4) (op e4 e4)))) (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule equiv_pos2)
(step t764 (cl (= (= (op e2 e4) (op e4 e4)) (= (op (op (op e0 (op e0 e0)) e0) (op e0 e0)) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t73 t32))
(step t765 (cl (= (not (= (op e2 e4) (op e4 e4))) (not (= (op (op (op e0 (op e0 e0)) e0) (op e0 e0)) (op (op e0 e0) (op e0 e0)))))) :rule cong :premises (t764))
(step t766 (cl (= (= (op (op (op e0 (op e0 e0)) e0) (op e0 e0)) (op (op e0 e0) (op e0 e0))) (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op e0 (op e0 e0)) e0) (op e0 e0)) (op (op e0 e0) (op e0 e0))))
(step t767 (cl (= (not (= (op (op (op e0 (op e0 e0)) e0) (op e0 e0)) (op (op e0 e0) (op e0 e0)))) (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule cong :premises (t766))
(step t768 (cl (= (not (= (op e2 e4) (op e4 e4))) (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule trans :premises (t765 t767))
(step t769 (cl (not (= (op e2 e4) (op e4 e4)))) :rule and :premises (t229) :args (1))
(step t770 (cl (not (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule resolution :premises (t763 t768 t769))
(step t771 (cl (= (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) false)) :rule resolution :premises (t762 t770))
(step t772 (cl (= (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) false)) :rule trans :premises (t758 t771))
(step t773 (cl (not (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule resolution :premises (t755 t772))
(step t774 (cl (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))) :rule resolution :premises (t723 t653 t729 t753 t773))
(step t775 (cl (= (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) e0)) :rule symm :premises (t774))
(step t776 (cl (= (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule trans :premises (t775 t436 t406))
(step t777 (cl (= (op (op (op (op e0 (op e0 e0)) e0) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))) :rule symm :premises (t776))
(step t778 (cl (not (= (= (op e1 e2) (op e2 e1)) (= (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) (not (= (op e1 e2) (op e2 e1))) (= (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule equiv_pos2)
(step t779 (cl (= (= (op e1 e2) (op e2 e1)) (= (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule cong :premises (t87 t79))
(step t780 (cl (= (= (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule rare_rewrite :args ("eq-symm" (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))
(step t781 (cl (= (= (op e1 e2) (op e2 e1)) (= (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule trans :premises (t779 t780))
(step t782 (cl (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4)))) :rule and :premises (t185) :args (1))
(step t783 (cl (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3)))) :rule and :premises (t782) :args (0))
(step t784 (cl (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2)))) :rule and :premises (t783) :args (0))
(step t785 (cl (= (op e2 e1) (op e1 e2))) :rule and :premises (t784) :args (1))
(step t786 (cl (= (op e1 e2) (op e2 e1))) :rule symm :premises (t785))
(step t787 (cl (= (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule resolution :premises (t778 t781 t786))
(step t788 (cl (= (op (op (op (op e0 (op e0 e0)) e0) e0) e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule trans :premises (t777 t787))
(step t789 (cl (= (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule symm :premises (t788))
(step t790 (cl (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule cong :premises (t98 t789))
(step t791 (cl (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) false)) :rule trans :premises (t790 t448))
(step t792 (cl (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t700 t791))
(step t793 (cl (= (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) false) (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0)))))) :rule equiv_simplify)
(step t794 (cl (not (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) false)) (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule equiv1 :premises (t793))
(step t795 (cl (= (op (op e0 (op e0 e0)) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) :rule symm :premises (t657))
(step t796 (cl (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t98 t795))
(step t797 (cl (= (= (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)) false) (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv_simplify)
(step t798 (cl (= (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)) false) (not (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv2 :premises (t797))
(step t799 (cl (not (not (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) :rule not_not)
(step t800 (cl (= (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)) false) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) :rule resolution :premises (t798 t799))
(step t801 (cl (not (= (not (= (op e0 e0) (op e2 e0))) (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) (not (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule equiv_pos2)
(step t802 (cl (= (= (op e0 e0) (op e2 e0)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t98 t81))
(step t803 (cl (= (not (= (op e0 e0) (op e2 e0))) (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t802))
(step t804 (cl (not (= (op e0 e0) (op e2 e0)))) :rule and :premises (t176) :args (1))
(step t805 (cl (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t801 t803 t804))
(step t806 (cl (= (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)) false)) :rule resolution :premises (t800 t805))
(step t807 (cl (= (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))) false)) :rule trans :premises (t796 t806))
(step t808 (cl (not (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 e0))))) :rule resolution :premises (t794 t807))
(step t809 (cl (= (op e0 e0) (op (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t160 t178 t698 t792 t808))
(step t810 (cl (not (= (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))))) (not (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1))) (or (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule equiv_pos2)
(step t811 (cl (= (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (= (op e2 e4) e1) (= (op e2 e3) e1) (= (op e2 e2) e1) (= (op e2 e0) e1) (= (op e2 e1) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (= (op e2 e4) e1) (= (op e2 e3) e1) (= (op e2 e2) e1) (= (op e2 e0) e1) (= (op e2 e1) e1)))))
(step t812 (cl (= (= (op e2 e4) e1) (= e1 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e1))
(step t813 (cl (= (= (op e2 e0) e1) (= e1 (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) e1))
(step t814 (cl (= (= (op e2 e1) e1) (= e1 (op e2 e1)))) :rule rare_rewrite :args ("eq-symm" (op e2 e1) e1))
(step t815 (cl (= (or (= (op e2 e4) e1) (= (op e2 e3) e1) (= (op e2 e2) e1) (= (op e2 e0) e1) (= (op e2 e1) e1)) (or (= e1 (op e2 e4)) (= e1 (op e2 e3)) (= e1 (op e2 e2)) (= e1 (op e2 e0)) (= e1 (op e2 e1))))) :rule cong :premises (t812 t13 t202 t813 t814))
(step t816 (cl (= (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (= e1 (op e2 e4)) (= e1 (op e2 e3)) (= e1 (op e2 e2)) (= e1 (op e2 e0)) (= e1 (op e2 e1))))) :rule trans :premises (t811 t815))
(step t817 (cl (= (= e1 (op e2 e4)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule cong :premises (t58 t73))
(step t818 (cl (= (= e1 (op e2 e0)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t58 t81))
(step t819 (cl (= (= e1 (op e2 e1)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule cong :premises (t58 t79))
(step t820 (cl (= (or (= e1 (op e2 e4)) (= e1 (op e2 e3)) (= e1 (op e2 e2)) (= e1 (op e2 e0)) (= e1 (op e2 e1))) (or (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))))) :rule cong :premises (t817 t76 t208 t818 t819))
(step t821 (cl (= (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))))) :rule trans :premises (t816 t820))
(step t822 (cl (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) :rule and :premises (t718) :args (1))
(step t823 (cl (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1))) :rule and :premises (t822) :args (0))
(step t824 (cl (or (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule resolution :premises (t810 t821 t823))
(step t825 (cl (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))) :rule or :premises (t824))
(step t826 (cl (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule reordering :premises (t825))
(step t827 (cl (not (= (not (= (op e0 e4) (op e2 e4))) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) (not (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule equiv_pos2)
(step t828 (cl (= (= (op e0 e4) (op e2 e4)) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule cong :premises (t43 t73))
(step t829 (cl (= (not (= (op e0 e4) (op e2 e4))) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule cong :premises (t828))
(step t830 (cl (not (= (op e0 e4) (op e2 e4)))) :rule and :premises (t673) :args (1))
(step t831 (cl (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule resolution :premises (t827 t829 t830))
(step t832 (cl (= (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) false) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))))) :rule equiv_simplify)
(step t833 (cl (not (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) false)) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule equiv1 :premises (t832))
(step t834 (cl (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) e0)) :rule symm :premises (t436))
(step t835 (cl (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op e0 e0)))) :rule trans :premises (t834 t756))
(step t836 (cl (= (op (op e0 e0) (op e0 e0)) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule symm :premises (t835))
(step t837 (cl (= (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) (op e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule trans :premises (t775 t436))
(step t838 (cl (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))) :rule symm :premises (t837))
(step t839 (cl (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))) :rule trans :premises (t836 t838))
(step t840 (cl (= (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))) (op (op e0 e0) (op e0 e0)))) :rule symm :premises (t839))
(step t841 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t255 t840))
(step t842 (cl (= (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) false) (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))) :rule equiv_simplify)
(step t843 (cl (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) false) (not (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))) :rule equiv2 :premises (t842))
(step t844 (cl (not (not (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))))) (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))) :rule not_not)
(step t845 (cl (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) false) (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0)))) :rule resolution :premises (t843 t844))
(step t846 (cl (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))) false)) :rule resolution :premises (t845 t236))
(step t847 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) false)) :rule trans :premises (t841 t846))
(step t848 (cl (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule resolution :premises (t833 t847))
(step t849 (cl (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t826 t831 t619 t848 t551))
(step t850 (cl (not (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))) (not (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule equiv_pos2)
(step t851 (cl (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= (op e4 e2) e0) (= (op e3 e2) e0) (= (op e2 e2) e0) (= (op e0 e2) e0) (= (op e1 e2) e0)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= (op e4 e2) e0) (= (op e3 e2) e0) (= (op e2 e2) e0) (= (op e0 e2) e0) (= (op e1 e2) e0)))))
(step t852 (cl (= (= (op e4 e2) e0) (= e0 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e0))
(step t853 (cl (= (= (op e3 e2) e0) (= e0 (op e3 e2)))) :rule rare_rewrite :args ("eq-symm" (op e3 e2) e0))
(step t854 (cl (= (= (op e0 e2) e0) (= e0 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e0))
(step t855 (cl (= (or (= (op e4 e2) e0) (= (op e3 e2) e0) (= (op e2 e2) e0) (= (op e0 e2) e0) (= (op e1 e2) e0)) (or (= e0 (op e4 e2)) (= e0 (op e3 e2)) (= e0 (op e2 e2)) (= e0 (op e0 e2)) (= e0 (op e1 e2))))) :rule cong :premises (t852 t853 t705 t854 t19))
(step t856 (cl (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= e0 (op e4 e2)) (= e0 (op e3 e2)) (= e0 (op e2 e2)) (= e0 (op e0 e2)) (= e0 (op e1 e2))))) :rule trans :premises (t851 t855))
(step t857 (cl (= (= e0 (op e4 e2)) (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t30 t56))
(step t858 (cl (= (= e0 (op e3 e2)) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t30 t67))
(step t859 (cl (= (= e0 (op e0 e2)) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t30 t96))
(step t860 (cl (= (or (= e0 (op e4 e2)) (= e0 (op e3 e2)) (= e0 (op e2 e2)) (= e0 (op e0 e2)) (= e0 (op e1 e2))) (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))) :rule cong :premises (t857 t858 t711 t859 t88))
(step t861 (cl (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))) :rule trans :premises (t856 t860))
(step t862 (cl (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) :rule and :premises (t719) :args (1))
(step t863 (cl (or (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t850 t861 t862))
(step t864 (cl (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule or :premises (t863))
(step t865 (cl (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule reordering :premises (t864))
(step t866 (cl (= (= (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) false) (not (= e0 (op e0 (op (op e0 (op e0 e0)) e0)))))) :rule equiv_simplify)
(step t867 (cl (not (= (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) false)) (not (= e0 (op e0 (op (op e0 (op e0 e0)) e0))))) :rule equiv1 :premises (t866))
(step t868 (cl (= (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t30 t572))
(step t869 (cl (= (= e0 (op e0 (op (op e0 (op e0 e0)) e0))) false)) :rule trans :premises (t868 t654))
(step t870 (cl (not (= e0 (op e0 (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t867 t869))
(step t871 (cl (= (= (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) false) (not (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0)))))) :rule equiv_simplify)
(step t872 (cl (not (= (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) false)) (not (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))))) :rule equiv1 :premises (t871))
(step t873 (cl (not (= (= (op e2 e3) (op e3 e2)) (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) (not (= (op e2 e3) (op e3 e2))) (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule equiv_pos2)
(step t874 (cl (= (= (op e2 e3) (op e3 e2)) (= (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t75 t67))
(step t875 (cl (= (= (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))))
(step t876 (cl (= (= (op e2 e3) (op e3 e2)) (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule trans :premises (t874 t875))
(step t877 (cl (and (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3))) (= (op e4 e2) (op e2 e4)))) :rule and :premises (t184) :args (1))
(step t878 (cl (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3)))) :rule and :premises (t877) :args (0))
(step t879 (cl (= (op e3 e2) (op e2 e3))) :rule and :premises (t878) :args (1))
(step t880 (cl (= (op e2 e3) (op e3 e2))) :rule symm :premises (t879))
(step t881 (cl (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule resolution :premises (t873 t876 t880))
(step t882 (cl (= (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op (op (op e0 (op e0 e0)) e0) e0)) (op (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t436 t881))
(step t883 (cl (= (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) false)) :rule trans :premises (t882 t751))
(step t884 (cl (not (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t872 t883))
(step t885 (cl (= (= (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false) (not (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))))) :rule equiv_simplify)
(step t886 (cl (not (= (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false)) (not (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule equiv1 :premises (t885))
(step t887 (cl (not (= (= (op e2 e4) (op e4 e2)) (= (op (op e0 e0) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) (not (= (op e2 e4) (op e4 e2))) (= (op (op e0 e0) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule equiv_pos2)
(step t888 (cl (= (= (op e2 e4) (op e4 e2)) (= (op (op (op e0 (op e0 e0)) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t73 t56))
(step t889 (cl (= (= (op (op (op e0 (op e0 e0)) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op e0 e0) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op e0 (op e0 e0)) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))
(step t890 (cl (= (= (op e2 e4) (op e4 e2)) (= (op (op e0 e0) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule trans :premises (t888 t889))
(step t891 (cl (= (op e4 e2) (op e2 e4))) :rule and :premises (t877) :args (1))
(step t892 (cl (= (op e2 e4) (op e4 e2))) :rule symm :premises (t891))
(step t893 (cl (= (op (op e0 e0) (op (op e0 (op e0 e0)) e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule resolution :premises (t887 t890 t892))
(step t894 (cl (= (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule cong :premises (t756 t893))
(step t895 (cl (= (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false)) :rule trans :premises (t894 t771))
(step t896 (cl (not (= e0 (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t886 t895))
(step t897 (cl (= e0 (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule resolution :premises (t865 t870 t729 t884 t896))
(step t898 (cl (not (= (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)) (or (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) (not (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4))) (or (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule equiv_pos2)
(step t899 (cl (= (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)) (or (= (op e2 e4) e4) (= (op e2 e4) e3) (= (op e2 e4) e2) (= (op e2 e4) e0) (= (op e2 e4) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)) (or (= (op e2 e4) e4) (= (op e2 e4) e3) (= (op e2 e4) e2) (= (op e2 e4) e0) (= (op e2 e4) e1)))))
(step t900 (cl (= (or (= (op e2 e4) e4) (= (op e2 e4) e3) (= (op e2 e4) e2) (= (op e2 e4) e0) (= (op e2 e4) e1)) (or (= e4 (op e2 e4)) (= e3 (op e2 e4)) (= e2 (op e2 e4)) (= e0 (op e2 e4)) (= e1 (op e2 e4))))) :rule cong :premises (t12 t577 t268 t703 t812))
(step t901 (cl (= (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)) (or (= e4 (op e2 e4)) (= e3 (op e2 e4)) (= e2 (op e2 e4)) (= e0 (op e2 e4)) (= e1 (op e2 e4))))) :rule trans :premises (t899 t900))
(step t902 (cl (= (or (= e4 (op e2 e4)) (= e3 (op e2 e4)) (= e2 (op e2 e4)) (= e0 (op e2 e4)) (= e1 (op e2 e4))) (or (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule cong :premises (t74 t583 t274 t709 t817))
(step t903 (cl (= (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)) (or (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule trans :premises (t901 t902))
(step t904 (cl (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) :rule and :premises (t373) :args (1))
(step t905 (cl (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4))) :rule and :premises (t904) :args (1))
(step t906 (cl (or (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule resolution :premises (t898 t903 t905))
(step t907 (cl (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule or :premises (t906))
(step t908 (cl (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= e0 (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op (op e0 (op e0 e0)) e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule reordering :premises (t907))
(step t909 (cl (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule resolution :premises (t908 t831 t609 t773 t451))
(step t910 (cl (= e0 (op (op (op (op e0 (op e0 e0)) e0) e0) e0))) :rule trans :premises (t436 t406))
(step t911 (cl (not (= (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)) (or (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op e0 (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) (not (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))) (or (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op e0 (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule equiv_pos2)
(step t912 (cl (= (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)) (or (= (op e4 e1) e4) (= (op e3 e1) e4) (= (op e2 e1) e4) (= (op e0 e1) e4) (= (op e1 e1) e4)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)) (or (= (op e4 e1) e4) (= (op e3 e1) e4) (= (op e2 e1) e4) (= (op e0 e1) e4) (= (op e1 e1) e4)))))
(step t913 (cl (= (= (op e4 e1) e4) (= e4 (op e4 e1)))) :rule rare_rewrite :args ("eq-symm" (op e4 e1) e4))
(step t914 (cl (= (= (op e2 e1) e4) (= e4 (op e2 e1)))) :rule rare_rewrite :args ("eq-symm" (op e2 e1) e4))
(step t915 (cl (= (= (op e0 e1) e4) (= e4 (op e0 e1)))) :rule rare_rewrite :args ("eq-symm" (op e0 e1) e4))
(step t916 (cl (= (or (= (op e4 e1) e4) (= (op e3 e1) e4) (= (op e2 e1) e4) (= (op e0 e1) e4) (= (op e1 e1) e4)) (or (= e4 (op e4 e1)) (= e4 (op e3 e1)) (= e4 (op e2 e1)) (= e4 (op e0 e1)) (= e4 (op e1 e1))))) :rule cong :premises (t913 t10 t914 t915 t143))
(step t917 (cl (= (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)) (or (= e4 (op e4 e1)) (= e4 (op e3 e1)) (= e4 (op e2 e1)) (= e4 (op e0 e1)) (= e4 (op e1 e1))))) :rule trans :premises (t912 t916))
(step t918 (cl (= (= e4 (op e4 e1)) (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))))) :rule cong :premises (t31 t59))
(step t919 (cl (= (= e4 (op e2 e1)) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule cong :premises (t31 t79))
(step t920 (cl (= (= e4 (op e0 e1)) (= (op e0 e0) (op e0 (op e0 (op e0 e0)))))) :rule cong :premises (t31 t100))
(step t921 (cl (= (or (= e4 (op e4 e1)) (= e4 (op e3 e1)) (= e4 (op e2 e1)) (= e4 (op e0 e1)) (= e4 (op e1 e1))) (or (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op e0 (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule cong :premises (t918 t70 t919 t920 t149))
(step t922 (cl (= (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)) (or (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op e0 (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))))) :rule trans :premises (t917 t921))
(step t923 (cl (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))) :rule and :premises (t156) :args (1))
(step t924 (cl (or (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op e0 (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))))) :rule resolution :premises (t911 t922 t923))
(step t925 (cl (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op e0 (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0))))) :rule or :premises (t924))
(step t926 (cl (= (op e0 e0) (op e0 (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 (op e0 e0)) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0))))) :rule reordering :premises (t925))
(step t927 (cl (not (= (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 (op e0 (op e0 e0))))))) (not (not (= (op e0 e0) (op e0 e1)))) (not (= (op e0 e0) (op e0 (op e0 (op e0 e0)))))) :rule equiv_pos2)
(step t928 (cl (= (= (op e0 e0) (op e0 e1)) (= (op e0 e0) (op e0 (op e0 (op e0 e0)))))) :rule cong :premises (t98 t100))
(step t929 (cl (= (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 (op e0 (op e0 e0))))))) :rule cong :premises (t928))
(step t930 (cl (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2))))) :rule and :premises (t384) :args (0))
(step t931 (cl (not (= (op e0 e0) (op e0 e1)))) :rule and :premises (t930) :args (0))
(step t932 (cl (not (= (op e0 e0) (op e0 (op e0 (op e0 e0)))))) :rule resolution :premises (t927 t929 t931))
(step t933 (cl (= (= (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) false) (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0))))))) :rule equiv_simplify)
(step t934 (cl (not (= (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) false)) (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule equiv1 :premises (t933))
(step t935 (cl (= (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) e0)))) :rule cong :premises (t98 t776))
(step t936 (cl (= (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))) false)) :rule trans :premises (t935 t448))
(step t937 (cl (not (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) (op e0 (op e0 e0)))))) :rule resolution :premises (t934 t936))
(step t938 (cl (= (= (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))) false) (not (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0))))))) :rule equiv_simplify)
(step t939 (cl (not (= (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))) false)) (not (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))))) :rule equiv1 :premises (t938))
(step t940 (cl (not (= (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))))) (not (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3))) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))))) :rule equiv_pos2)
(step t941 (cl (= (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (= (op e4 e4) e3) (= (op e4 e3) e3) (= (op e4 e2) e3) (= (op e4 e0) e3) (= (op e4 e1) e3)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (= (op e4 e4) e3) (= (op e4 e3) e3) (= (op e4 e2) e3) (= (op e4 e0) e3) (= (op e4 e1) e3)))))
(step t942 (cl (= (= (op e4 e3) e3) (= e3 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e3))
(step t943 (cl (= (= (op e4 e2) e3) (= e3 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e3))
(step t944 (cl (= (= (op e4 e0) e3) (= e3 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e3))
(step t945 (cl (= (or (= (op e4 e4) e3) (= (op e4 e3) e3) (= (op e4 e2) e3) (= (op e4 e0) e3) (= (op e4 e1) e3)) (or (= e3 (op e4 e4)) (= e3 (op e4 e3)) (= e3 (op e4 e2)) (= e3 (op e4 e0)) (= e3 (op e4 e1))))) :rule cong :premises (t575 t942 t943 t944 t5))
(step t946 (cl (= (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (= e3 (op e4 e4)) (= e3 (op e4 e3)) (= e3 (op e4 e2)) (= e3 (op e4 e0)) (= e3 (op e4 e1))))) :rule trans :premises (t941 t945))
(step t947 (cl (= (= e3 (op e4 e3)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t53 t54))
(step t948 (cl (= (= e3 (op e4 e2)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t53 t56))
(step t949 (cl (= (= e3 (op e4 e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)))) :rule cong :premises (t53 t61))
(step t950 (cl (= (or (= e3 (op e4 e4)) (= e3 (op e4 e3)) (= e3 (op e4 e2)) (= e3 (op e4 e0)) (= e3 (op e4 e1))) (or (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))))) :rule cong :premises (t581 t947 t948 t949 t60))
(step t951 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule refl)
(step t952 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule refl)
(step t953 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)))) :rule refl)
(step t954 (cl (= (or (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))))) :rule cong :premises (t586 t951 t952 t953 t107))
(step t955 (cl (= (or (= e3 (op e4 e4)) (= e3 (op e4 e3)) (= e3 (op e4 e2)) (= e3 (op e4 e0)) (= e3 (op e4 e1))) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))))) :rule trans :premises (t950 t954))
(step t956 (cl (= (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))))) :rule trans :premises (t946 t955))
(step t957 (cl (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3))) :rule and :premises (t593) :args (0))
(step t958 (cl (or (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))))) :rule resolution :premises (t940 t956 t957))
(step t959 (cl (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))) :rule or :premises (t958))
(step t960 (cl (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op e0 e0) (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) e0))) :rule reordering :premises (t959))
(step t961 (cl (not (= (not (= (op e2 e0) (op e4 e0))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0))))) (not (not (= (op e2 e0) (op e4 e0)))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)))) :rule equiv_pos2)
(step t962 (cl (= (= (op e2 e0) (op e4 e0)) (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)))) :rule cong :premises (t81 t61))
(step t963 (cl (= (not (= (op e2 e0) (op e4 e0))) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t962))
(step t964 (cl (not (= (op e2 e0) (op e4 e0)))) :rule and :premises (t169) :args (1))
(step t965 (cl (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) e0)))) :rule resolution :premises (t961 t963 t964))
(step t966 (cl (= (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))))) :rule equiv_simplify)
(step t967 (cl (not (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false)) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule equiv1 :premises (t966))
(step t968 (cl (= (op (op e0 e0) (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule refl)
(step t969 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t571 t968))
(step t970 (cl (= (= (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false) (not (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))))) :rule equiv_simplify)
(step t971 (cl (= (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false) (not (not (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))))) :rule equiv2 :premises (t970))
(step t972 (cl (not (not (not (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))))) (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule not_not)
(step t973 (cl (= (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false) (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule resolution :premises (t971 t972))
(step t974 (cl (not (= (not (= (op e0 e2) (op e4 e2))) (not (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))))) (not (not (= (op e0 e2) (op e4 e2)))) (not (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule equiv_pos2)
(step t975 (cl (= (= (op e0 e2) (op e4 e2)) (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t96 t56))
(step t976 (cl (= (not (= (op e0 e2) (op e4 e2))) (not (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))))) :rule cong :premises (t975))
(step t977 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) :rule and :premises (t166) :args (1))
(step t978 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2))))) :rule and :premises (t977) :args (0))
(step t979 (cl (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2))))) :rule and :premises (t978) :args (0))
(step t980 (cl (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2))))) :rule and :premises (t979) :args (0))
(step t981 (cl (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2))))) :rule and :premises (t980) :args (0))
(step t982 (cl (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2))))) :rule and :premises (t981) :args (0))
(step t983 (cl (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2))))) :rule and :premises (t982) :args (0))
(step t984 (cl (not (= (op e0 e2) (op e4 e2)))) :rule and :premises (t983) :args (1))
(step t985 (cl (not (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t974 t976 t984))
(step t986 (cl (= (= (op e0 (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false)) :rule resolution :premises (t973 t985))
(step t987 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false)) :rule trans :premises (t969 t986))
(step t988 (cl (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t967 t987))
(step t989 (cl (= (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) false) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))))) :rule equiv_simplify)
(step t990 (cl (not (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) false)) (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule equiv1 :premises (t989))
(step t991 (cl (= (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule refl)
(step t992 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) (= (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op (op e0 (op e0 e0)) e0) e0)) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule cong :premises (t520 t991))
(step t993 (cl (= (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))) false)) :rule trans :premises (t992 t633))
(step t994 (cl (not (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0))))) :rule resolution :premises (t990 t993))
(step t995 (cl (= (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 e0) (op e0 (op e0 e0))))) :rule resolution :premises (t960 t965 t988 t994 t656))
(step t996 (cl (= (op (op e0 e0) (op e0 (op e0 e0))) (op (op (op e0 (op e0 e0)) e0) e0))) :rule symm :premises (t995))
(step t997 (cl (= (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))) (= (op e0 e0) (op (op (op e0 (op e0 e0)) e0) e0)))) :rule cong :premises (t98 t996))
(step t998 (cl (= (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))) false)) :rule trans :premises (t997 t806))
(step t999 (cl (not (= (op e0 e0) (op (op e0 e0) (op e0 (op e0 e0)))))) :rule resolution :premises (t939 t998))
(step t1000 (cl (= (op e0 e0) (op (op (op (op e0 (op e0 e0)) e0) e0) (op e0 (op e0 e0))))) :rule resolution :premises (t926 t932 t698 t937 t999))
(step t1001 (cl (not (= (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)) (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))) (not (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1))) (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule equiv_pos2)
(step t1002 (cl (= (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)) (or (= (op e4 e2) e1) (= (op e3 e2) e1) (= (op e2 e2) e1) (= (op e0 e2) e1) (= (op e1 e2) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)) (or (= (op e4 e2) e1) (= (op e3 e2) e1) (= (op e2 e2) e1) (= (op e0 e2) e1) (= (op e1 e2) e1)))))
(step t1003 (cl (= (= (op e4 e2) e1) (= e1 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e1))
(step t1004 (cl (= (= (op e0 e2) e1) (= e1 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e1))
(step t1005 (cl (= (= (op e1 e2) e1) (= e1 (op e1 e2)))) :rule rare_rewrite :args ("eq-symm" (op e1 e2) e1))
(step t1006 (cl (= (or (= (op e4 e2) e1) (= (op e3 e2) e1) (= (op e2 e2) e1) (= (op e0 e2) e1) (= (op e1 e2) e1)) (or (= e1 (op e4 e2)) (= e1 (op e3 e2)) (= e1 (op e2 e2)) (= e1 (op e0 e2)) (= e1 (op e1 e2))))) :rule cong :premises (t1003 t9 t202 t1004 t1005))
(step t1007 (cl (= (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)) (or (= e1 (op e4 e2)) (= e1 (op e3 e2)) (= e1 (op e2 e2)) (= e1 (op e0 e2)) (= e1 (op e1 e2))))) :rule trans :premises (t1002 t1006))
(step t1008 (cl (= (= e1 (op e4 e2)) (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t58 t56))
(step t1009 (cl (= (= e1 (op e0 e2)) (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t58 t96))
(step t1010 (cl (= (= e1 (op e1 e2)) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule cong :premises (t58 t87))
(step t1011 (cl (= (or (= e1 (op e4 e2)) (= e1 (op e3 e2)) (= e1 (op e2 e2)) (= e1 (op e0 e2)) (= e1 (op e1 e2))) (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))) :rule cong :premises (t1008 t68 t208 t1009 t1010))
(step t1012 (cl (= (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)) (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))) :rule trans :premises (t1007 t1011))
(step t1013 (cl (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1))) :rule and :premises (t822) :args (1))
(step t1014 (cl (or (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t1001 t1012 t1013))
(step t1015 (cl (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule or :premises (t1014))
(step t1016 (cl (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule reordering :premises (t1015))
(step t1017 (cl (not (= (not (= (op e0 e2) (op e0 e4))) (not (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0)))))) (not (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0))))) :rule equiv_pos2)
(step t1018 (cl (= (= (op e0 e2) (op e0 e4)) (= (op e0 (op (op e0 (op e0 e0)) e0)) (op e0 (op e0 e0))))) :rule cong :premises (t96 t43))
(step t1019 (cl (= (not (= (op e0 e2) (op e0 e4))) (not (= (op e0 (op (op e0 (op e0 e0)) e0)) (op e0 (op e0 e0)))))) :rule cong :premises (t1018))
(step t1020 (cl (= (= (op e0 (op (op e0 (op e0 e0)) e0)) (op e0 (op e0 e0))) (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op (op e0 (op e0 e0)) e0)) (op e0 (op e0 e0))))
(step t1021 (cl (= (not (= (op e0 (op (op e0 (op e0 e0)) e0)) (op e0 (op e0 e0)))) (not (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0)))))) :rule cong :premises (t1020))
(step t1022 (cl (= (not (= (op e0 e2) (op e0 e4))) (not (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0)))))) :rule trans :premises (t1019 t1021))
(step t1023 (cl (not (= (op e0 e2) (op e0 e4)))) :rule and :premises (t245) :args (1))
(step t1024 (cl (not (= (op e0 (op e0 e0)) (op e0 (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t1017 t1022 t1023))
(step t1025 (cl (= (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) false) (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))))) :rule equiv_simplify)
(step t1026 (cl (not (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) false)) (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule equiv1 :premises (t1025))
(step t1027 (cl (= (op (op e0 e0) (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)))) :rule trans :premises (t836 t838 t787))
(step t1028 (cl (= (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0)) (op (op e0 e0) (op e0 e0)))) :rule symm :premises (t1027))
(step t1029 (cl (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t255 t1028))
(step t1030 (cl (= (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))) false)) :rule trans :premises (t1029 t846))
(step t1031 (cl (not (= (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t1026 t1030))
(step t1032 (cl (= (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false) (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))))) :rule equiv_simplify)
(step t1033 (cl (not (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false)) (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule equiv1 :premises (t1032))
(step t1034 (cl (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))))) :rule cong :premises (t255 t893))
(step t1035 (cl (= (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) false) (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule equiv_simplify)
(step t1036 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) false) (not (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) :rule equiv2 :premises (t1035))
(step t1037 (cl (not (not (not (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))))) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule not_not)
(step t1038 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) false) (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0)))) :rule resolution :premises (t1036 t1037))
(step t1039 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 (op e0 e0)) e0) (op e0 e0))) false)) :rule resolution :premises (t1038 t831))
(step t1040 (cl (= (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))) false)) :rule trans :premises (t1034 t1039))
(step t1041 (cl (not (= (op e0 (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0))))) :rule resolution :premises (t1033 t1040))
(step t1042 (cl (= (op e0 (op e0 e0)) (op (op (op (op e0 (op e0 e0)) e0) e0) (op (op e0 (op e0 e0)) e0)))) :rule resolution :premises (t1016 t1024 t1031 t551 t1041))
(step t1043 (cl (= (op (op (op e0 (op e0 e0)) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule symm :premises (t893))
(step t1044 (cl (= (op e0 e0) (op (op e0 e0) (op (op e0 (op e0 e0)) e0)))) :rule trans :premises (t909 t1043))
(step t1045 (cl) :rule resolution :premises (t137 t809 t849 t436 t897 t657 t774 t535 t679 t909 t910 t1000 t1042 t520 t475 t995 t1044 t476 t756 t189 t571 t562))
