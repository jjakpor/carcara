unsat
(assume a0 (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e0) e1)) (= (op e4 e0) e2)) (= (op e4 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e4 e1) e0) (= (op e4 e1) e1)) (= (op e4 e1) e2)) (= (op e4 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e4 e2) e0) (= (op e4 e2) e1)) (= (op e4 e2) e2)) (= (op e4 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4))) (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)))))
(assume a1 (and (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4))))) (and (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) (and (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))))))
(assume a2 (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2))) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3))) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4))))
(assume a3 (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e1)) (= (op e2 e1) e2)) (= (op e3 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e1)) (= (op e2 e2) e2)) (= (op e3 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e1)) (= (op e2 e3) e2)) (= (op e3 e3) e3)) (= (op e4 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e1)) (= (op e2 e4) e2)) (= (op e3 e4) e3)) (= (op e4 e4) e4))))
(assume a4 (and (and (and (and (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4))) (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4)))) (and (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3))) (= (op e4 e2) (op e2 e4)))) (and (and (and (and (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (= (op e2 e3) (op e3 e2))) (= (op e3 e3) (op e3 e3))) (= (op e4 e3) (op e3 e4)))) (and (and (and (and (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))) (= (op e2 e4) (op e4 e2))) (= (op e3 e4) (op e4 e3))) (= (op e4 e4) (op e4 e4)))))
(assume a5 (and (and (and (and (not (= (op e0 e0) e0)) (not (= (op e1 e1) e1))) (not (= (op e2 e2) e2))) (not (= (op e3 e3) e3))) (not (= (op e4 e4) e4))))
(assume a6 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4)))))))
(assume a7 (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3))) (not (= e2 e4))) (not (= e3 e4))))
(assume a8 (and (and (and (= e1 (op e3 e4)) (= e2 (op e0 e0))) (= e3 (op e4 e0))) (= e4 (op e2 e0))))
(assume a9 (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e2) (= (op e0 e1) e1)) (= (op e0 e2) e4)) (= (op e0 e3) e0)) (= (op e0 e4) e3)) (= (op e1 e0) e1)) (= (op e1 e1) e3)) (= (op e1 e2) e0)) (= (op e1 e3) e2)) (= (op e1 e4) e4)) (= (op e2 e0) e4)) (= (op e2 e1) e0)) (= (op e2 e2) e1)) (= (op e2 e3) e3)) (= (op e2 e4) e2)) (= (op e3 e0) e0)) (= (op e3 e1) e2)) (= (op e3 e2) e3)) (= (op e3 e3) e4)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e4)) (= (op e4 e2) e2)) (= (op e4 e3) e1)) (= (op e4 e4) e0))))
(step t0 (cl (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (not (= e0 (op (op (op (op e0 e0) e0) e0) e0))) (not (= e0 (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule and_neg)
(step t1 (cl (=> (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule implies_neg1)
(anchor :step t2)
(assume t2.a0 (= e0 (op (op (op (op e0 e0) e0) e0) e0)))
(assume t2.a1 (= e0 (op (op e0 e0) (op e0 e0))))
(assume t2.a2 (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))))
(assume t2.a3 (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))
(step t2.t0 (cl (not (= (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) (not (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule equiv_pos2)
(step t2.t1 (cl (= (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (= (op e4 e0) e4) (= (op e3 e0) e3) (= (op e2 e0) e2) (= (op e0 e0) e0) (= (op e1 e0) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (= (op e4 e0) e4) (= (op e3 e0) e3) (= (op e2 e0) e2) (= (op e0 e0) e0) (= (op e1 e0) e1)))))
(step t2.t2 (cl (= (= (op e4 e0) e4) (= e4 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e4))
(step t2.t3 (cl (= (= (op e3 e0) e3) (= e3 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e3))
(step t2.t4 (cl (= (= (op e2 e0) e2) (= e2 (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) e2))
(step t2.t5 (cl (= (= (op e0 e0) e0) (= e0 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e0))
(step t2.t6 (cl (= (= (op e1 e0) e1) (= e1 (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) e1))
(step t2.t7 (cl (= (or (= (op e4 e0) e4) (= (op e3 e0) e3) (= (op e2 e0) e2) (= (op e0 e0) e0) (= (op e1 e0) e1)) (or (= e4 (op e4 e0)) (= e3 (op e3 e0)) (= e2 (op e2 e0)) (= e0 (op e0 e0)) (= e1 (op e1 e0))))) :rule cong :premises (t2.t2 t2.t3 t2.t4 t2.t5 t2.t6))
(step t2.t8 (cl (= (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (= e4 (op e4 e0)) (= e3 (op e3 e0)) (= e2 (op e2 e0)) (= e0 (op e0 e0)) (= e1 (op e1 e0))))) :rule trans :premises (t2.t1 t2.t7))
(step t2.t9 (cl (not (= (= e4 (op e2 e0)) (= e4 (op (op e0 e0) e0)))) (not (= e4 (op e2 e0))) (= e4 (op (op e0 e0) e0))) :rule equiv_pos2)
(step t2.t10 (cl (= e4 e4)) :rule refl)
(step t2.t11 (cl (and (and (= e1 (op e3 e4)) (= e2 (op e0 e0))) (= e3 (op e4 e0)))) :rule and :premises (a8) :args (0))
(step t2.t12 (cl (and (= e1 (op e3 e4)) (= e2 (op e0 e0)))) :rule and :premises (t2.t11) :args (0))
(step t2.t13 (cl (= e2 (op e0 e0))) :rule and :premises (t2.t12) :args (1))
(step t2.t14 (cl (= e0 e0)) :rule refl)
(step t2.t15 (cl (= (op e2 e0) (op (op e0 e0) e0))) :rule cong :premises (t2.t13 t2.t14))
(step t2.t16 (cl (= (= e4 (op e2 e0)) (= e4 (op (op e0 e0) e0)))) :rule cong :premises (t2.t10 t2.t15))
(step t2.t17 (cl (= e4 (op e2 e0))) :rule and :premises (a8) :args (1))
(step t2.t18 (cl (= e4 (op (op e0 e0) e0))) :rule resolution :premises (t2.t9 t2.t16 t2.t17))
(step t2.t19 (cl (= (op e4 e0) (op (op (op e0 e0) e0) e0))) :rule cong :premises (t2.t18 t2.t14))
(step t2.t20 (cl (= (= e4 (op e4 e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t2.t18 t2.t19))
(step t2.t21 (cl (= e3 (op e4 e0))) :rule and :premises (t2.t11) :args (1))
(step t2.t22 (cl (= e3 (op (op (op e0 e0) e0) e0))) :rule trans :premises (t2.t21 t2.t19))
(step t2.t23 (cl (= (op e3 e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule cong :premises (t2.t22 t2.t14))
(step t2.t24 (cl (= (= e3 (op e3 e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t2.t22 t2.t23))
(step t2.t25 (cl (= (= e2 (op e2 e0)) (= (op e0 e0) (op (op e0 e0) e0)))) :rule cong :premises (t2.t13 t2.t15))
(step t2.t26 (cl (= (= e0 (op e0 e0)) (= e0 (op e0 e0)))) :rule refl)
(step t2.t27 (cl (= e1 (op e3 e4))) :rule and :premises (t2.t12) :args (0))
(step t2.t28 (cl (= (op e3 e4) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) :rule cong :premises (t2.t22 t2.t18))
(step t2.t29 (cl (= e1 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) :rule trans :premises (t2.t27 t2.t28))
(step t2.t30 (cl (= (op e1 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule cong :premises (t2.t29 t2.t14))
(step t2.t31 (cl (= (= e1 (op e1 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule cong :premises (t2.t29 t2.t30))
(step t2.t32 (cl (= (or (= e4 (op e4 e0)) (= e3 (op e3 e0)) (= e2 (op e2 e0)) (= e0 (op e0 e0)) (= e1 (op e1 e0))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule cong :premises (t2.t20 t2.t24 t2.t25 t2.t26 t2.t31))
(step t2.t33 (cl (= (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule trans :premises (t2.t8 t2.t32))
(step t2.t34 (cl (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e1)) (= (op e2 e1) e2)) (= (op e3 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e1)) (= (op e2 e2) e2)) (= (op e3 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e1)) (= (op e2 e3) e2)) (= (op e3 e3) e3)) (= (op e4 e3) e4)))) :rule and :premises (a3) :args (0))
(step t2.t35 (cl (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e1)) (= (op e2 e1) e2)) (= (op e3 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e1)) (= (op e2 e2) e2)) (= (op e3 e2) e3)) (= (op e4 e2) e4)))) :rule and :premises (t2.t34) :args (0))
(step t2.t36 (cl (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e1)) (= (op e2 e1) e2)) (= (op e3 e1) e3)) (= (op e4 e1) e4)))) :rule and :premises (t2.t35) :args (0))
(step t2.t37 (cl (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4))) :rule and :premises (t2.t36) :args (0))
(step t2.t38 (cl (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule resolution :premises (t2.t0 t2.t33 t2.t37))
(step t2.t39 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule or :premises (t2.t38))
(step t2.t40 (cl (= e0 (op e0 e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule reordering :premises (t2.t39))
(step t2.t41 (cl (and (and (and (not (= (op e0 e0) e0)) (not (= (op e1 e1) e1))) (not (= (op e2 e2) e2))) (not (= (op e3 e3) e3)))) :rule and :premises (a5) :args (0))
(step t2.t42 (cl (and (and (not (= (op e0 e0) e0)) (not (= (op e1 e1) e1))) (not (= (op e2 e2) e2)))) :rule and :premises (t2.t41) :args (0))
(step t2.t43 (cl (and (not (= (op e0 e0) e0)) (not (= (op e1 e1) e1)))) :rule and :premises (t2.t42) :args (0))
(step t2.t44 (cl (not (= (op e0 e0) e0))) :rule and :premises (t2.t43) :args (0))
(step t2.t45 (cl (not (= e0 (op e0 e0)))) :rule not_symm :premises (t2.t44))
(step t2.t46 (cl (not (= (not (= (op e0 e0) (op e2 e0))) (not (= (op e0 e0) (op (op e0 e0) e0))))) (not (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op (op e0 e0) e0)))) :rule equiv_pos2)
(step t2.t47 (cl (= (op e0 e0) (op e0 e0))) :rule refl)
(step t2.t48 (cl (= (= (op e0 e0) (op e2 e0)) (= (op e0 e0) (op (op e0 e0) e0)))) :rule cong :premises (t2.t47 t2.t15))
(step t2.t49 (cl (= (not (= (op e0 e0) (op e2 e0))) (not (= (op e0 e0) (op (op e0 e0) e0))))) :rule cong :premises (t2.t48))
(step t2.t50 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4)))))) :rule and :premises (a6) :args (0))
(step t2.t51 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3)))))) :rule and :premises (t2.t50) :args (0))
(step t2.t52 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2)))))) :rule and :premises (t2.t51) :args (0))
(step t2.t53 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1)))))) :rule and :premises (t2.t52) :args (0))
(step t2.t54 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0))))) :rule and :premises (t2.t53) :args (0))
(step t2.t55 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0))))) :rule and :premises (t2.t54) :args (0))
(step t2.t56 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0))))) :rule and :premises (t2.t55) :args (0))
(step t2.t57 (cl (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0))))) :rule and :premises (t2.t56) :args (0))
(step t2.t58 (cl (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0))))) :rule and :premises (t2.t57) :args (0))
(step t2.t59 (cl (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0))))) :rule and :premises (t2.t58) :args (0))
(step t2.t60 (cl (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0))))) :rule and :premises (t2.t59) :args (0))
(step t2.t61 (cl (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0))))) :rule and :premises (t2.t60) :args (0))
(step t2.t62 (cl (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0))))) :rule and :premises (t2.t61) :args (0))
(step t2.t63 (cl (not (= (op e0 e0) (op e2 e0)))) :rule and :premises (t2.t62) :args (1))
(step t2.t64 (cl (not (= (op e0 e0) (op (op e0 e0) e0)))) :rule resolution :premises (t2.t46 t2.t49 t2.t63))
(step t2.t65 (cl (not (= (not (= (op e2 e0) (op e4 e0))) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) (not (not (= (op e2 e0) (op e4 e0)))) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule equiv_pos2)
(step t2.t66 (cl (= (= (op e2 e0) (op e4 e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t2.t15 t2.t19))
(step t2.t67 (cl (= (not (= (op e2 e0) (op e4 e0))) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t2.t66))
(step t2.t68 (cl (not (= (op e2 e0) (op e4 e0)))) :rule and :premises (t2.t55) :args (1))
(step t2.t69 (cl (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule resolution :premises (t2.t65 t2.t67 t2.t68))
(step t2.t70 (cl (not (= (not (= (op e3 e0) (op e4 e0))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) (not (not (= (op e3 e0) (op e4 e0)))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule equiv_pos2)
(step t2.t71 (cl (= (= (op e3 e0) (op e4 e0)) (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t2.t23 t2.t19))
(step t2.t72 (cl (= (not (= (op e3 e0) (op e4 e0))) (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t2.t71))
(step t2.t73 (cl (= (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op e0 e0) e0) e0) e0) (op (op (op e0 e0) e0) e0)))
(step t2.t74 (cl (= (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op e0 e0) e0) e0))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) :rule cong :premises (t2.t73))
(step t2.t75 (cl (= (not (= (op e3 e0) (op e4 e0))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) :rule trans :premises (t2.t72 t2.t74))
(step t2.t76 (cl (not (= (op e3 e0) (op e4 e0)))) :rule and :premises (t2.t54) :args (1))
(step t2.t77 (cl (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t2.t70 t2.t75 t2.t76))
(step t2.t78 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule resolution :premises (t2.t40 t2.t45 t2.t64 t2.t69 t2.t77))
(step t2.t79 (cl (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) :rule symm :premises (t2.t78))
(step t2.t80 (cl (not (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (not (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv_pos2)
(step t2.t81 (cl (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e3 e3) e1) (= (op e2 e2) e1) (= (op e0 e0) e1) (= (op e1 e1) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e3 e3) e1) (= (op e2 e2) e1) (= (op e0 e0) e1) (= (op e1 e1) e1)))))
(step t2.t82 (cl (= (= (op e4 e4) e1) (= e1 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e1))
(step t2.t83 (cl (= (= (op e3 e3) e1) (= e1 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e1))
(step t2.t84 (cl (= (= (op e2 e2) e1) (= e1 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e1))
(step t2.t85 (cl (= (= (op e0 e0) e1) (= e1 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e1))
(step t2.t86 (cl (= (= (op e1 e1) e1) (= e1 (op e1 e1)))) :rule rare_rewrite :args ("eq-symm" (op e1 e1) e1))
(step t2.t87 (cl (= (or (= (op e4 e4) e1) (= (op e3 e3) e1) (= (op e2 e2) e1) (= (op e0 e0) e1) (= (op e1 e1) e1)) (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))))) :rule cong :premises (t2.t82 t2.t83 t2.t84 t2.t85 t2.t86))
(step t2.t88 (cl (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))))) :rule trans :premises (t2.t81 t2.t87))
(step t2.t89 (cl (= (op e4 e4) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) :rule cong :premises (t2.t18 t2.t18))
(step t2.t90 (cl (= (= e1 (op e4 e4)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t2.t29 t2.t89))
(step t2.t91 (cl (= (op e3 e3) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t2.t22 t2.t22))
(step t2.t92 (cl (= (= e1 (op e3 e3)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t2.t29 t2.t91))
(step t2.t93 (cl (= (op e2 e2) (op (op e0 e0) (op e0 e0)))) :rule cong :premises (t2.t13 t2.t13))
(step t2.t94 (cl (= (= e1 (op e2 e2)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t2.t29 t2.t93))
(step t2.t95 (cl (= (= e1 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule cong :premises (t2.t29 t2.t47))
(step t2.t96 (cl (= (op e1 e1) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t2.t29 t2.t29))
(step t2.t97 (cl (= (= e1 (op e1 e1)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t2.t29 t2.t96))
(step t2.t98 (cl (= (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t2.t90 t2.t92 t2.t94 t2.t95 t2.t97))
(step t2.t99 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule refl)
(step t2.t100 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule refl)
(step t2.t101 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))))) :rule refl)
(step t2.t102 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))
(step t2.t103 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule refl)
(step t2.t104 (cl (= (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t2.t99 t2.t100 t2.t101 t2.t102 t2.t103))
(step t2.t105 (cl (= (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t2.t98 t2.t104))
(step t2.t106 (cl (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t2.t88 t2.t105))
(step t2.t107 (cl (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2))) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3)))) :rule and :premises (a2) :args (0))
(step t2.t108 (cl (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2)))) :rule and :premises (t2.t107) :args (0))
(step t2.t109 (cl (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)))) :rule and :premises (t2.t108) :args (0))
(step t2.t110 (cl (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) :rule and :premises (t2.t109) :args (1))
(step t2.t111 (cl (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t2.t80 t2.t106 t2.t110))
(step t2.t112 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule or :premises (t2.t111))
(step t2.t113 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) :rule reordering :premises (t2.t112))
(step t2.t114 (cl (not (= (not (= (op e1 e1) e1)) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (not (not (= (op e1 e1) e1))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv_pos2)
(step t2.t115 (cl (= (not (= (op e1 e1) e1)) (not (= e1 (op e1 e1))))) :rule cong :premises (t2.t86))
(step t2.t116 (cl (= (not (= e1 (op e1 e1))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t2.t97))
(step t2.t117 (cl (= (not (= (op e1 e1) e1)) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t2.t115 t2.t116))
(step t2.t118 (cl (not (= (op e1 e1) e1))) :rule and :premises (t2.t43) :args (1))
(step t2.t119 (cl (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t2.t114 t2.t117 t2.t118))
(step t2.t120 (cl (not (= (not (= (op e3 e4) (op e4 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) (not (not (= (op e3 e4) (op e4 e4)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t2.t121 (cl (= (= (op e3 e4) (op e4 e4)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t2.t28 t2.t89))
(step t2.t122 (cl (= (not (= (op e3 e4) (op e4 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t2.t121))
(step t2.t123 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4))))) :rule and :premises (t2.t50) :args (1))
(step t2.t124 (cl (not (= (op e3 e4) (op e4 e4)))) :rule and :premises (t2.t123) :args (1))
(step t2.t125 (cl (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t2.t120 t2.t122 t2.t124))
(step t2.t126 (cl (not (= (not (= (op e3 e3) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))))) (not (not (= (op e3 e3) (op e3 e4)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule equiv_pos2)
(step t2.t127 (cl (= (= (op e3 e3) (op e3 e4)) (= (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t2.t91 t2.t28))
(step t2.t128 (cl (= (not (= (op e3 e3) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t2.t127))
(step t2.t129 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))
(step t2.t130 (cl (= (not (= (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))))) :rule cong :premises (t2.t129))
(step t2.t131 (cl (= (not (= (op e3 e3) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))))) :rule trans :premises (t2.t128 t2.t130))
(step t2.t132 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4)))))) :rule and :premises (a6) :args (1))
(step t2.t133 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4)))))) :rule and :premises (t2.t132) :args (0))
(step t2.t134 (cl (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) :rule and :premises (t2.t133) :args (1))
(step t2.t135 (cl (not (= (op e3 e3) (op e3 e4)))) :rule and :premises (t2.t134) :args (1))
(step t2.t136 (cl (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t2.t126 t2.t131 t2.t135))
(step t2.t137 (cl (not (= (not (= e1 e2)) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (not (not (= e1 e2))) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t2.t138 (cl (= (= e1 e2) (= e2 e1))) :rule rare_rewrite :args ("eq-symm" e1 e2))
(step t2.t139 (cl (= (not (= e1 e2)) (not (= e2 e1)))) :rule cong :premises (t2.t138))
(step t2.t140 (cl (= (= e2 e1) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t2.t13 t2.t29))
(step t2.t141 (cl (= (not (= e2 e1)) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t2.t140))
(step t2.t142 (cl (= (not (= e1 e2)) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule trans :premises (t2.t139 t2.t141))
(step t2.t143 (cl (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3))) (not (= e2 e4)))) :rule and :premises (a7) :args (0))
(step t2.t144 (cl (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3)))) :rule and :premises (t2.t143) :args (0))
(step t2.t145 (cl (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4)))) :rule and :premises (t2.t144) :args (0))
(step t2.t146 (cl (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3)))) :rule and :premises (t2.t145) :args (0))
(step t2.t147 (cl (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2)))) :rule and :premises (t2.t146) :args (0))
(step t2.t148 (cl (not (= e1 e2))) :rule and :premises (t2.t147) :args (1))
(step t2.t149 (cl (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t2.t137 t2.t142 t2.t148))
(step t2.t150 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) :rule resolution :premises (t2.t113 t2.t119 t2.t125 t2.t136 t2.t149))
(step t2.t151 (cl (= (op (op e0 e0) (op e0 e0)) e0)) :rule symm :premises (t2.a1))
(step t2.t152 (cl (not (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) (not (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4))) (or (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule equiv_pos2)
(step t2.t153 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= (op e3 e0) e4) (= (op e3 e0) e3) (= (op e3 e0) e2) (= (op e3 e0) e0) (= (op e3 e0) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= (op e3 e0) e4) (= (op e3 e0) e3) (= (op e3 e0) e2) (= (op e3 e0) e0) (= (op e3 e0) e1)))))
(step t2.t154 (cl (= (= (op e3 e0) e4) (= e4 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e4))
(step t2.t155 (cl (= (= (op e3 e0) e2) (= e2 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e2))
(step t2.t156 (cl (= (= (op e3 e0) e0) (= e0 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e0))
(step t2.t157 (cl (= (= (op e3 e0) e1) (= e1 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e1))
(step t2.t158 (cl (= (or (= (op e3 e0) e4) (= (op e3 e0) e3) (= (op e3 e0) e2) (= (op e3 e0) e0) (= (op e3 e0) e1)) (or (= e4 (op e3 e0)) (= e3 (op e3 e0)) (= e2 (op e3 e0)) (= e0 (op e3 e0)) (= e1 (op e3 e0))))) :rule cong :premises (t2.t154 t2.t3 t2.t155 t2.t156 t2.t157))
(step t2.t159 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= e4 (op e3 e0)) (= e3 (op e3 e0)) (= e2 (op e3 e0)) (= e0 (op e3 e0)) (= e1 (op e3 e0))))) :rule trans :premises (t2.t153 t2.t158))
(step t2.t160 (cl (= (= e4 (op e3 e0)) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t2.t18 t2.t23))
(step t2.t161 (cl (= (= e2 (op e3 e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t2.t13 t2.t23))
(step t2.t162 (cl (= (= e0 (op e3 e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t2.t14 t2.t23))
(step t2.t163 (cl (= (= e1 (op e3 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t2.t29 t2.t23))
(step t2.t164 (cl (= (or (= e4 (op e3 e0)) (= e3 (op e3 e0)) (= e2 (op e3 e0)) (= e0 (op e3 e0)) (= e1 (op e3 e0))) (or (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) :rule cong :premises (t2.t160 t2.t24 t2.t161 t2.t162 t2.t163))
(step t2.t165 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) :rule trans :premises (t2.t159 t2.t164))
(step t2.t166 (cl (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4))))) :rule and :premises (a0) :args (0))
(step t2.t167 (cl (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4)))) :rule and :premises (t2.t166) :args (1))
(step t2.t168 (cl (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4)))) :rule and :premises (t2.t167) :args (0))
(step t2.t169 (cl (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4)))) :rule and :premises (t2.t168) :args (0))
(step t2.t170 (cl (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4)))) :rule and :premises (t2.t169) :args (0))
(step t2.t171 (cl (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4))) :rule and :premises (t2.t170) :args (0))
(step t2.t172 (cl (or (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t2.t152 t2.t165 t2.t171))
(step t2.t173 (cl (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))) :rule or :premises (t2.t172))
(step t2.t174 (cl (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0))) :rule reordering :premises (t2.t173))
(step t2.t175 (cl (not (= (not (= (op e0 e0) (op e3 e0))) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0))))) (not (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule equiv_pos2)
(step t2.t176 (cl (= (= (op e0 e0) (op e3 e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t2.t47 t2.t23))
(step t2.t177 (cl (= (not (= (op e0 e0) (op e3 e0))) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0))))) :rule cong :premises (t2.t176))
(step t2.t178 (cl (not (= (op e0 e0) (op e3 e0)))) :rule and :premises (t2.t61) :args (1))
(step t2.t179 (cl (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t2.t175 t2.t177 t2.t178))
(step t2.t180 (cl (not (= (not (= (op e2 e0) (op e3 e0))) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) (not (not (= (op e2 e0) (op e3 e0)))) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule equiv_pos2)
(step t2.t181 (cl (= (= (op e2 e0) (op e3 e0)) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t2.t15 t2.t23))
(step t2.t182 (cl (= (not (= (op e2 e0) (op e3 e0))) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) :rule cong :premises (t2.t181))
(step t2.t183 (cl (not (= (op e2 e0) (op e3 e0)))) :rule and :premises (t2.t56) :args (1))
(step t2.t184 (cl (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t2.t180 t2.t182 t2.t183))
(step t2.t185 (cl (not (= (not (= (op e3 e0) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) (not (not (= (op e3 e0) (op e3 e4)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule equiv_pos2)
(step t2.t186 (cl (= (= (op e3 e0) (op e3 e4)) (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t2.t23 t2.t28))
(step t2.t187 (cl (= (not (= (op e3 e0) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t2.t186))
(step t2.t188 (cl (= (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))
(step t2.t189 (cl (= (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) :rule cong :premises (t2.t188))
(step t2.t190 (cl (= (not (= (op e3 e0) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) :rule trans :premises (t2.t187 t2.t189))
(step t2.t191 (cl (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4))))) :rule and :premises (t2.t134) :args (0))
(step t2.t192 (cl (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3))))) :rule and :premises (t2.t191) :args (0))
(step t2.t193 (cl (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4))))) :rule and :premises (t2.t192) :args (0))
(step t2.t194 (cl (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3))))) :rule and :premises (t2.t193) :args (0))
(step t2.t195 (cl (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2))))) :rule and :premises (t2.t194) :args (0))
(step t2.t196 (cl (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4))))) :rule and :premises (t2.t195) :args (0))
(step t2.t197 (cl (not (= (op e3 e0) (op e3 e4)))) :rule and :premises (t2.t196) :args (1))
(step t2.t198 (cl (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t2.t185 t2.t190 t2.t197))
(step t2.t199 (cl (= e0 (op (op (op (op e0 e0) e0) e0) e0))) :rule resolution :premises (t2.t174 t2.t179 t2.t184 t2.t77 t2.t198))
(step t2.t200 (cl (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule trans :premises (t2.t79 t2.t150 t2.t151 t2.t199))
(step t2 (cl (not (= e0 (op (op (op (op e0 e0) e0) e0) e0))) (not (= e0 (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule subproof :discharge (t2.a0 t2.a1 t2.a2 t2.a3))
(step t3 (cl (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0))) :rule and_pos :args (0))
(step t4 (cl (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (= e0 (op (op e0 e0) (op e0 e0)))) :rule and_pos :args (1))
(step t5 (cl (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) :rule and_pos :args (2))
(step t6 (cl (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule and_pos :args (3))
(step t7 (cl (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0)) (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule resolution :premises (t2 t3 t4 t5 t6))
(step t8 (cl (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule reordering :premises (t7))
(step t9 (cl (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule contraction :premises (t8))
(step t10 (cl (=> (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule resolution :premises (t1 t9))
(step t11 (cl (=> (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule implies_neg2)
(step t12 (cl (=> (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) (=> (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t10 t11))
(step t13 (cl (=> (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule contraction :premises (t12))
(step t14 (cl (not (and (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule implies :premises (t13))
(step t15 (cl (not (= e0 (op (op (op (op e0 e0) e0) e0) e0))) (not (= e0 (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule resolution :premises (t0 t14))
(step t16 (cl (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0)) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (not (= e0 (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) (not (= e0 (op (op (op (op e0 e0) e0) e0) e0)))) :rule reordering :premises (t15))
(step t17 (cl (not (= (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (= e0 (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= e0 (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) e0)) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (not (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0))) (or (= e0 (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= e0 (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) e0)) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv_pos2)
(step t18 (cl (= (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (= (op e2 e4) e0) (= (op e2 e3) e0) (= (op e2 e2) e0) (= (op e2 e0) e0) (= (op e2 e1) e0)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (= (op e2 e4) e0) (= (op e2 e3) e0) (= (op e2 e2) e0) (= (op e2 e0) e0) (= (op e2 e1) e0)))))
(step t19 (cl (= (= (op e2 e4) e0) (= e0 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e0))
(step t20 (cl (= (= (op e2 e3) e0) (= e0 (op e2 e3)))) :rule rare_rewrite :args ("eq-symm" (op e2 e3) e0))
(step t21 (cl (= (= (op e2 e2) e0) (= e0 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e0))
(step t22 (cl (= (= (op e2 e0) e0) (= e0 (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) e0))
(step t23 (cl (= (= (op e2 e1) e0) (= e0 (op e2 e1)))) :rule rare_rewrite :args ("eq-symm" (op e2 e1) e0))
(step t24 (cl (= (or (= (op e2 e4) e0) (= (op e2 e3) e0) (= (op e2 e2) e0) (= (op e2 e0) e0) (= (op e2 e1) e0)) (or (= e0 (op e2 e4)) (= e0 (op e2 e3)) (= e0 (op e2 e2)) (= e0 (op e2 e0)) (= e0 (op e2 e1))))) :rule cong :premises (t19 t20 t21 t22 t23))
(step t25 (cl (= (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (= e0 (op e2 e4)) (= e0 (op e2 e3)) (= e0 (op e2 e2)) (= e0 (op e2 e0)) (= e0 (op e2 e1))))) :rule trans :premises (t18 t24))
(step t26 (cl (= e0 e0)) :rule refl)
(step t27 (cl (and (and (= e1 (op e3 e4)) (= e2 (op e0 e0))) (= e3 (op e4 e0)))) :rule and :premises (a8) :args (0))
(step t28 (cl (and (= e1 (op e3 e4)) (= e2 (op e0 e0)))) :rule and :premises (t27) :args (0))
(step t29 (cl (= e2 (op e0 e0))) :rule and :premises (t28) :args (1))
(step t30 (cl (not (= (= e4 (op e2 e0)) (= e4 (op (op e0 e0) e0)))) (not (= e4 (op e2 e0))) (= e4 (op (op e0 e0) e0))) :rule equiv_pos2)
(step t31 (cl (= e4 e4)) :rule refl)
(step t32 (cl (= (op e2 e0) (op (op e0 e0) e0))) :rule cong :premises (t29 t26))
(step t33 (cl (= (= e4 (op e2 e0)) (= e4 (op (op e0 e0) e0)))) :rule cong :premises (t31 t32))
(step t34 (cl (= e4 (op e2 e0))) :rule and :premises (a8) :args (1))
(step t35 (cl (= e4 (op (op e0 e0) e0))) :rule resolution :premises (t30 t33 t34))
(step t36 (cl (= (op e2 e4) (op (op e0 e0) (op (op e0 e0) e0)))) :rule cong :premises (t29 t35))
(step t37 (cl (= (= e0 (op e2 e4)) (= e0 (op (op e0 e0) (op (op e0 e0) e0))))) :rule cong :premises (t26 t36))
(step t38 (cl (= e3 (op e4 e0))) :rule and :premises (t27) :args (1))
(step t39 (cl (= (op e4 e0) (op (op (op e0 e0) e0) e0))) :rule cong :premises (t35 t26))
(step t40 (cl (= e3 (op (op (op e0 e0) e0) e0))) :rule trans :premises (t38 t39))
(step t41 (cl (= (op e2 e3) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t29 t40))
(step t42 (cl (= (= e0 (op e2 e3)) (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t26 t41))
(step t43 (cl (= (op e2 e2) (op (op e0 e0) (op e0 e0)))) :rule cong :premises (t29 t29))
(step t44 (cl (= (= e0 (op e2 e2)) (= e0 (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t26 t43))
(step t45 (cl (= (= e0 (op e2 e0)) (= e0 (op (op e0 e0) e0)))) :rule cong :premises (t26 t32))
(step t46 (cl (= e1 (op e3 e4))) :rule and :premises (t28) :args (0))
(step t47 (cl (= (op e3 e4) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) :rule cong :premises (t40 t35))
(step t48 (cl (= e1 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) :rule trans :premises (t46 t47))
(step t49 (cl (= (op e2 e1) (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t29 t48))
(step t50 (cl (= (= e0 (op e2 e1)) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t26 t49))
(step t51 (cl (= (or (= e0 (op e2 e4)) (= e0 (op e2 e3)) (= e0 (op e2 e2)) (= e0 (op e2 e0)) (= e0 (op e2 e1))) (or (= e0 (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= e0 (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) e0)) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t37 t42 t44 t45 t50))
(step t52 (cl (= (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (= e0 (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= e0 (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) e0)) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t25 t51))
(step t53 (cl (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4)))))) :rule and :premises (a1) :args (0))
(step t54 (cl (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4)))))) :rule and :premises (t53) :args (0))
(step t55 (cl (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) :rule and :premises (t54) :args (1))
(step t56 (cl (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3))))) :rule and :premises (t55) :args (0))
(step t57 (cl (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2))))) :rule and :premises (t56) :args (0))
(step t58 (cl (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1))))) :rule and :premises (t57) :args (0))
(step t59 (cl (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)))) :rule and :premises (t58) :args (0))
(step t60 (cl (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0))) :rule and :premises (t59) :args (0))
(step t61 (cl (or (= e0 (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= e0 (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) e0)) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t17 t52 t60))
(step t62 (cl (= e0 (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= e0 (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) e0)) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule or :premises (t61))
(step t63 (cl (= e0 (op (op e0 e0) e0)) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= e0 (op (op e0 e0) (op (op e0 e0) e0)))) :rule reordering :premises (t62))
(step t64 (cl (not (= (not (= e0 e4)) (not (= e0 (op (op e0 e0) e0))))) (not (not (= e0 e4))) (not (= e0 (op (op e0 e0) e0)))) :rule equiv_pos2)
(step t65 (cl (= (= e0 e4) (= e4 e0))) :rule rare_rewrite :args ("eq-symm" e0 e4))
(step t66 (cl (= (not (= e0 e4)) (not (= e4 e0)))) :rule cong :premises (t65))
(step t67 (cl (= (= e4 e0) (= (op (op e0 e0) e0) e0))) :rule cong :premises (t35 t26))
(step t68 (cl (= (not (= e4 e0)) (not (= (op (op e0 e0) e0) e0)))) :rule cong :premises (t67))
(step t69 (cl (= (= (op (op e0 e0) e0) e0) (= e0 (op (op e0 e0) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op e0 e0) e0) e0))
(step t70 (cl (= (not (= (op (op e0 e0) e0) e0)) (not (= e0 (op (op e0 e0) e0))))) :rule cong :premises (t69))
(step t71 (cl (= (not (= e4 e0)) (not (= e0 (op (op e0 e0) e0))))) :rule trans :premises (t68 t70))
(step t72 (cl (= (not (= e0 e4)) (not (= e0 (op (op e0 e0) e0))))) :rule trans :premises (t66 t71))
(step t73 (cl (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3))) (not (= e2 e4)))) :rule and :premises (a7) :args (0))
(step t74 (cl (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3)))) :rule and :premises (t73) :args (0))
(step t75 (cl (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4)))) :rule and :premises (t74) :args (0))
(step t76 (cl (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3)))) :rule and :premises (t75) :args (0))
(step t77 (cl (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2)))) :rule and :premises (t76) :args (0))
(step t78 (cl (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4)))) :rule and :premises (t77) :args (0))
(step t79 (cl (not (= e0 e4))) :rule and :premises (t78) :args (1))
(step t80 (cl (not (= e0 (op (op e0 e0) e0)))) :rule resolution :premises (t64 t72 t79))
(step t81 (cl (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (not (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) (not (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule and_neg)
(step t82 (cl (=> (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule implies_neg1)
(anchor :step t83)
(assume t83.a0 (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))
(assume t83.a1 (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))
(step t83.t0 (cl (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) e0)) :rule symm :premises (t83.a1))
(step t83.t1 (cl (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule symm :premises (t83.t0))
(step t83.t2 (cl (not (= (= (op e1 e2) (op e2 e1)) (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) (not (= (op e1 e2) (op e2 e1))) (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule equiv_pos2)
(step t83.t3 (cl (= (op e1 e2) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule cong :premises (t48 t29))
(step t83.t4 (cl (= (= (op e1 e2) (op e2 e1)) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t83.t3 t49))
(step t83.t5 (cl (= (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))
(step t83.t6 (cl (= (= (op e1 e2) (op e2 e1)) (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) :rule trans :premises (t83.t4 t83.t5))
(step t83.t7 (cl (and (and (and (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4))) (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4)))) (and (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3))) (= (op e4 e2) (op e2 e4)))) (and (and (and (and (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (= (op e2 e3) (op e3 e2))) (= (op e3 e3) (op e3 e3))) (= (op e4 e3) (op e3 e4))))) :rule and :premises (a4) :args (0))
(step t83.t8 (cl (and (and (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4))) (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4)))) (and (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3))) (= (op e4 e2) (op e2 e4))))) :rule and :premises (t83.t7) :args (0))
(step t83.t9 (cl (and (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4))) (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4))))) :rule and :premises (t83.t8) :args (0))
(step t83.t10 (cl (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4)))) :rule and :premises (t83.t9) :args (1))
(step t83.t11 (cl (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3)))) :rule and :premises (t83.t10) :args (0))
(step t83.t12 (cl (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2)))) :rule and :premises (t83.t11) :args (0))
(step t83.t13 (cl (= (op e2 e1) (op e1 e2))) :rule and :premises (t83.t12) :args (1))
(step t83.t14 (cl (= (op e1 e2) (op e2 e1))) :rule symm :premises (t83.t13))
(step t83.t15 (cl (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule resolution :premises (t83.t2 t83.t6 t83.t14))
(step t83.t16 (cl (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule trans :premises (t83.t1 t83.t15))
(step t83 (cl (not (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) (not (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule subproof :discharge (t83.a0 t83.a1))
(step t84 (cl (not (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule and_pos :args (0))
(step t85 (cl (not (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule and_pos :args (1))
(step t86 (cl (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (not (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (not (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule resolution :premises (t83 t84 t85))
(step t87 (cl (not (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (not (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule reordering :premises (t86))
(step t88 (cl (not (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule contraction :premises (t87))
(step t89 (cl (=> (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule resolution :premises (t82 t88))
(step t90 (cl (=> (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) (not (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) :rule implies_neg2)
(step t91 (cl (=> (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) (=> (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) :rule resolution :premises (t89 t90))
(step t92 (cl (=> (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) :rule contraction :premises (t91))
(step t93 (cl (not (and (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule implies :premises (t92))
(step t94 (cl (not (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) (not (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule resolution :premises (t81 t93))
(step t95 (cl (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (not (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (not (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) :rule reordering :premises (t94))
(step t96 (cl (not (= (= (op e1 e2) (op e2 e1)) (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) (not (= (op e1 e2) (op e2 e1))) (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule equiv_pos2)
(step t97 (cl (= (op e1 e2) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule cong :premises (t48 t29))
(step t98 (cl (= (= (op e1 e2) (op e2 e1)) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t97 t49))
(step t99 (cl (= (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))
(step t100 (cl (= (= (op e1 e2) (op e2 e1)) (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) :rule trans :premises (t98 t99))
(step t101 (cl (and (and (and (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4))) (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4)))) (and (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3))) (= (op e4 e2) (op e2 e4)))) (and (and (and (and (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (= (op e2 e3) (op e3 e2))) (= (op e3 e3) (op e3 e3))) (= (op e4 e3) (op e3 e4))))) :rule and :premises (a4) :args (0))
(step t102 (cl (and (and (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4))) (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4)))) (and (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3))) (= (op e4 e2) (op e2 e4))))) :rule and :premises (t101) :args (0))
(step t103 (cl (and (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4))) (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4))))) :rule and :premises (t102) :args (0))
(step t104 (cl (and (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3))) (= (op e4 e1) (op e1 e4)))) :rule and :premises (t103) :args (1))
(step t105 (cl (and (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2))) (= (op e3 e1) (op e1 e3)))) :rule and :premises (t104) :args (0))
(step t106 (cl (and (and (= (op e0 e1) (op e1 e0)) (= (op e1 e1) (op e1 e1))) (= (op e2 e1) (op e1 e2)))) :rule and :premises (t105) :args (0))
(step t107 (cl (= (op e2 e1) (op e1 e2))) :rule and :premises (t106) :args (1))
(step t108 (cl (= (op e1 e2) (op e2 e1))) :rule symm :premises (t107))
(step t109 (cl (= (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule resolution :premises (t96 t100 t108))
(step t110 (cl (not (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e2) (= (op e0 e1) e1)) (= (op e0 e2) e4)) (= (op e0 e3) e0)) (= (op e0 e4) e3)) (= (op e1 e0) e1)) (= (op e1 e1) e3)) (= (op e1 e2) e0)) (= (op e1 e3) e2)) (= (op e1 e4) e4)) (= (op e2 e0) e4)) (= (op e2 e1) e0)) (= (op e2 e2) e1)) (= (op e2 e3) e3)) (= (op e2 e4) e2)) (= (op e3 e0) e0)) (= (op e3 e1) e2)) (= (op e3 e2) e3)) (= (op e3 e3) e4)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e4)) (= (op e4 e2) e2)) (= (op e4 e3) e1)) (= (op e4 e4) e0))) (not (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))))) (not (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e2) (= (op e0 e1) e1)) (= (op e0 e2) e4)) (= (op e0 e3) e0)) (= (op e0 e4) e3)) (= (op e1 e0) e1)) (= (op e1 e1) e3)) (= (op e1 e2) e0)) (= (op e1 e3) e2)) (= (op e1 e4) e4)) (= (op e2 e0) e4)) (= (op e2 e1) e0)) (= (op e2 e2) e1)) (= (op e2 e3) e3)) (= (op e2 e4) e2)) (= (op e3 e0) e0)) (= (op e3 e1) e2)) (= (op e3 e2) e3)) (= (op e3 e3) e4)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e4)) (= (op e4 e2) e2)) (= (op e4 e3) e1)) (= (op e4 e4) e0)))) (not (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule equiv_pos2)
(step t111 (cl (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e2) (= (op e0 e1) e1)) (= (op e0 e2) e4)) (= (op e0 e3) e0)) (= (op e0 e4) e3)) (= (op e1 e0) e1)) (= (op e1 e1) e3)) (= (op e1 e2) e0)) (= (op e1 e3) e2)) (= (op e1 e4) e4)) (= (op e2 e0) e4)) (= (op e2 e1) e0)) (= (op e2 e2) e1)) (= (op e2 e3) e3)) (= (op e2 e4) e2)) (= (op e3 e0) e0)) (= (op e3 e1) e2)) (= (op e3 e2) e3)) (= (op e3 e3) e4)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e4)) (= (op e4 e2) e2)) (= (op e4 e3) e1)) (= (op e4 e4) e0)) (and (= (op e4 e4) e0) (= (op e4 e3) e1) (= (op e4 e2) e2) (= (op e4 e1) e4) (= (op e4 e0) e3) (= (op e3 e4) e1) (= (op e3 e3) e4) (= (op e3 e2) e3) (= (op e3 e1) e2) (= (op e3 e0) e0) (= (op e2 e4) e2) (= (op e2 e3) e3) (= (op e2 e2) e1) (= (op e2 e1) e0) (= (op e2 e0) e4) (= (op e1 e4) e4) (= (op e1 e3) e2) (= (op e1 e2) e0) (= (op e1 e1) e3) (= (op e1 e0) e1) (= (op e0 e4) e3) (= (op e0 e3) e0) (= (op e0 e2) e4) (= (op e0 e0) e2) (= (op e0 e1) e1)))) :rule hole :args ("ACI_NORM" (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e2) (= (op e0 e1) e1)) (= (op e0 e2) e4)) (= (op e0 e3) e0)) (= (op e0 e4) e3)) (= (op e1 e0) e1)) (= (op e1 e1) e3)) (= (op e1 e2) e0)) (= (op e1 e3) e2)) (= (op e1 e4) e4)) (= (op e2 e0) e4)) (= (op e2 e1) e0)) (= (op e2 e2) e1)) (= (op e2 e3) e3)) (= (op e2 e4) e2)) (= (op e3 e0) e0)) (= (op e3 e1) e2)) (= (op e3 e2) e3)) (= (op e3 e3) e4)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e4)) (= (op e4 e2) e2)) (= (op e4 e3) e1)) (= (op e4 e4) e0)) (and (= (op e4 e4) e0) (= (op e4 e3) e1) (= (op e4 e2) e2) (= (op e4 e1) e4) (= (op e4 e0) e3) (= (op e3 e4) e1) (= (op e3 e3) e4) (= (op e3 e2) e3) (= (op e3 e1) e2) (= (op e3 e0) e0) (= (op e2 e4) e2) (= (op e2 e3) e3) (= (op e2 e2) e1) (= (op e2 e1) e0) (= (op e2 e0) e4) (= (op e1 e4) e4) (= (op e1 e3) e2) (= (op e1 e2) e0) (= (op e1 e1) e3) (= (op e1 e0) e1) (= (op e0 e4) e3) (= (op e0 e3) e0) (= (op e0 e2) e4) (= (op e0 e0) e2) (= (op e0 e1) e1)))))
(step t112 (cl (= (= (op e4 e4) e0) (= e0 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e0))
(step t113 (cl (= (= (op e4 e3) e1) (= e1 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e1))
(step t114 (cl (= (= (op e4 e2) e2) (= e2 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e2))
(step t115 (cl (= (= (op e4 e1) e4) (= e4 (op e4 e1)))) :rule rare_rewrite :args ("eq-symm" (op e4 e1) e4))
(step t116 (cl (= (= (op e4 e0) e3) (= e3 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e3))
(step t117 (cl (= (= (op e3 e4) e1) (= e1 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e1))
(step t118 (cl (= (= (op e3 e3) e4) (= e4 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e4))
(step t119 (cl (= (= (op e3 e2) e3) (= e3 (op e3 e2)))) :rule rare_rewrite :args ("eq-symm" (op e3 e2) e3))
(step t120 (cl (= (= (op e3 e1) e2) (= e2 (op e3 e1)))) :rule rare_rewrite :args ("eq-symm" (op e3 e1) e2))
(step t121 (cl (= (= (op e3 e0) e0) (= e0 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e0))
(step t122 (cl (= (= (op e2 e4) e2) (= e2 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e2))
(step t123 (cl (= (= (op e2 e3) e3) (= e3 (op e2 e3)))) :rule rare_rewrite :args ("eq-symm" (op e2 e3) e3))
(step t124 (cl (= (= (op e2 e2) e1) (= e1 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e1))
(step t125 (cl (= (= (op e2 e0) e4) (= e4 (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) e4))
(step t126 (cl (= (= (op e1 e4) e4) (= e4 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e4))
(step t127 (cl (= (= (op e1 e3) e2) (= e2 (op e1 e3)))) :rule rare_rewrite :args ("eq-symm" (op e1 e3) e2))
(step t128 (cl (= (= (op e1 e2) e0) (= e0 (op e1 e2)))) :rule rare_rewrite :args ("eq-symm" (op e1 e2) e0))
(step t129 (cl (= (= (op e1 e1) e3) (= e3 (op e1 e1)))) :rule rare_rewrite :args ("eq-symm" (op e1 e1) e3))
(step t130 (cl (= (= (op e1 e0) e1) (= e1 (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) e1))
(step t131 (cl (= (= (op e0 e4) e3) (= e3 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e3))
(step t132 (cl (= (= (op e0 e3) e0) (= e0 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e0))
(step t133 (cl (= (= (op e0 e2) e4) (= e4 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e4))
(step t134 (cl (= (= (op e0 e0) e2) (= e2 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e2))
(step t135 (cl (= (= (op e0 e1) e1) (= e1 (op e0 e1)))) :rule rare_rewrite :args ("eq-symm" (op e0 e1) e1))
(step t136 (cl (= (and (= (op e4 e4) e0) (= (op e4 e3) e1) (= (op e4 e2) e2) (= (op e4 e1) e4) (= (op e4 e0) e3) (= (op e3 e4) e1) (= (op e3 e3) e4) (= (op e3 e2) e3) (= (op e3 e1) e2) (= (op e3 e0) e0) (= (op e2 e4) e2) (= (op e2 e3) e3) (= (op e2 e2) e1) (= (op e2 e1) e0) (= (op e2 e0) e4) (= (op e1 e4) e4) (= (op e1 e3) e2) (= (op e1 e2) e0) (= (op e1 e1) e3) (= (op e1 e0) e1) (= (op e0 e4) e3) (= (op e0 e3) e0) (= (op e0 e2) e4) (= (op e0 e0) e2) (= (op e0 e1) e1)) (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e2 (op e4 e2)) (= e4 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e4 (op e3 e3)) (= e3 (op e3 e2)) (= e2 (op e3 e1)) (= e0 (op e3 e0)) (= e2 (op e2 e4)) (= e3 (op e2 e3)) (= e1 (op e2 e2)) (= e0 (op e2 e1)) (= e4 (op e2 e0)) (= e4 (op e1 e4)) (= e2 (op e1 e3)) (= e0 (op e1 e2)) (= e3 (op e1 e1)) (= e1 (op e1 e0)) (= e3 (op e0 e4)) (= e0 (op e0 e3)) (= e4 (op e0 e2)) (= e2 (op e0 e0)) (= e1 (op e0 e1))))) :rule cong :premises (t112 t113 t114 t115 t116 t117 t118 t119 t120 t121 t122 t123 t124 t23 t125 t126 t127 t128 t129 t130 t131 t132 t133 t134 t135))
(step t137 (cl (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e2) (= (op e0 e1) e1)) (= (op e0 e2) e4)) (= (op e0 e3) e0)) (= (op e0 e4) e3)) (= (op e1 e0) e1)) (= (op e1 e1) e3)) (= (op e1 e2) e0)) (= (op e1 e3) e2)) (= (op e1 e4) e4)) (= (op e2 e0) e4)) (= (op e2 e1) e0)) (= (op e2 e2) e1)) (= (op e2 e3) e3)) (= (op e2 e4) e2)) (= (op e3 e0) e0)) (= (op e3 e1) e2)) (= (op e3 e2) e3)) (= (op e3 e3) e4)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e4)) (= (op e4 e2) e2)) (= (op e4 e3) e1)) (= (op e4 e4) e0)) (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e2 (op e4 e2)) (= e4 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e4 (op e3 e3)) (= e3 (op e3 e2)) (= e2 (op e3 e1)) (= e0 (op e3 e0)) (= e2 (op e2 e4)) (= e3 (op e2 e3)) (= e1 (op e2 e2)) (= e0 (op e2 e1)) (= e4 (op e2 e0)) (= e4 (op e1 e4)) (= e2 (op e1 e3)) (= e0 (op e1 e2)) (= e3 (op e1 e1)) (= e1 (op e1 e0)) (= e3 (op e0 e4)) (= e0 (op e0 e3)) (= e4 (op e0 e2)) (= e2 (op e0 e0)) (= e1 (op e0 e1))))) :rule trans :premises (t111 t136))
(step t138 (cl (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e2) (= (op e0 e1) e1)) (= (op e0 e2) e4)) (= (op e0 e3) e0)) (= (op e0 e4) e3)) (= (op e1 e0) e1)) (= (op e1 e1) e3)) (= (op e1 e2) e0)) (= (op e1 e3) e2)) (= (op e1 e4) e4)) (= (op e2 e0) e4)) (= (op e2 e1) e0)) (= (op e2 e2) e1)) (= (op e2 e3) e3)) (= (op e2 e4) e2)) (= (op e3 e0) e0)) (= (op e3 e1) e2)) (= (op e3 e2) e3)) (= (op e3 e3) e4)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e4)) (= (op e4 e2) e2)) (= (op e4 e3) e1)) (= (op e4 e4) e0))) (not (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e2 (op e4 e2)) (= e4 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e4 (op e3 e3)) (= e3 (op e3 e2)) (= e2 (op e3 e1)) (= e0 (op e3 e0)) (= e2 (op e2 e4)) (= e3 (op e2 e3)) (= e1 (op e2 e2)) (= e0 (op e2 e1)) (= e4 (op e2 e0)) (= e4 (op e1 e4)) (= e2 (op e1 e3)) (= e0 (op e1 e2)) (= e3 (op e1 e1)) (= e1 (op e1 e0)) (= e3 (op e0 e4)) (= e0 (op e0 e3)) (= e4 (op e0 e2)) (= e2 (op e0 e0)) (= e1 (op e0 e1)))))) :rule cong :premises (t137))
(step t139 (cl (= (op e4 e4) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) :rule cong :premises (t35 t35))
(step t140 (cl (= (= e0 (op e4 e4)) (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t26 t139))
(step t141 (cl (= (op e4 e3) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t35 t40))
(step t142 (cl (= (= e1 (op e4 e3)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t48 t141))
(step t143 (cl (= (op e4 e2) (op (op (op e0 e0) e0) (op e0 e0)))) :rule cong :premises (t35 t29))
(step t144 (cl (= (= e2 (op e4 e2)) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))))) :rule cong :premises (t29 t143))
(step t145 (cl (= (op e4 e1) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t35 t48))
(step t146 (cl (= (= e4 (op e4 e1)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t35 t145))
(step t147 (cl (= (= e3 (op e4 e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t40 t39))
(step t148 (cl (= (= e1 (op e3 e4)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t48 t47))
(step t149 (cl (= (op e3 e3) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t40 t40))
(step t150 (cl (= (= e4 (op e3 e3)) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t35 t149))
(step t151 (cl (= (op e3 e2) (op (op (op (op e0 e0) e0) e0) (op e0 e0)))) :rule cong :premises (t40 t29))
(step t152 (cl (= (= e3 (op e3 e2)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))))) :rule cong :premises (t40 t151))
(step t153 (cl (= (op e3 e1) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t40 t48))
(step t154 (cl (= (= e2 (op e3 e1)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t29 t153))
(step t155 (cl (= (op e3 e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule cong :premises (t40 t26))
(step t156 (cl (= (= e0 (op e3 e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t26 t155))
(step t157 (cl (= (= e2 (op e2 e4)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))))) :rule cong :premises (t29 t36))
(step t158 (cl (= (= e3 (op e2 e3)) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t40 t41))
(step t159 (cl (= (= e1 (op e2 e2)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t48 t43))
(step t160 (cl (= (= e4 (op e2 e0)) (= (op (op e0 e0) e0) (op (op e0 e0) e0)))) :rule cong :premises (t35 t32))
(step t161 (cl (= (op e1 e4) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))) :rule cong :premises (t48 t35))
(step t162 (cl (= (= e4 (op e1 e4)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))))) :rule cong :premises (t35 t161))
(step t163 (cl (= (op e1 e3) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t48 t40))
(step t164 (cl (= (= e2 (op e1 e3)) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t29 t163))
(step t165 (cl (= (= e0 (op e1 e2)) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) :rule cong :premises (t26 t97))
(step t166 (cl (= (op e1 e1) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t48 t48))
(step t167 (cl (= (= e3 (op e1 e1)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t40 t166))
(step t168 (cl (= (op e1 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule cong :premises (t48 t26))
(step t169 (cl (= (= e1 (op e1 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule cong :premises (t48 t168))
(step t170 (cl (= (op e0 e4) (op e0 (op (op e0 e0) e0)))) :rule cong :premises (t26 t35))
(step t171 (cl (= (= e3 (op e0 e4)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))))) :rule cong :premises (t40 t170))
(step t172 (cl (= (op e0 e3) (op e0 (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t26 t40))
(step t173 (cl (= (= e0 (op e0 e3)) (= e0 (op e0 (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t26 t172))
(step t174 (cl (= (op e0 e2) (op e0 (op e0 e0)))) :rule cong :premises (t26 t29))
(step t175 (cl (= (= e4 (op e0 e2)) (= (op (op e0 e0) e0) (op e0 (op e0 e0))))) :rule cong :premises (t35 t174))
(step t176 (cl (= (op e0 e0) (op e0 e0))) :rule refl)
(step t177 (cl (= (= e2 (op e0 e0)) (= (op e0 e0) (op e0 e0)))) :rule cong :premises (t29 t176))
(step t178 (cl (= (op e0 e1) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t26 t48))
(step t179 (cl (= (= e1 (op e0 e1)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t48 t178))
(step t180 (cl (= (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e2 (op e4 e2)) (= e4 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e4 (op e3 e3)) (= e3 (op e3 e2)) (= e2 (op e3 e1)) (= e0 (op e3 e0)) (= e2 (op e2 e4)) (= e3 (op e2 e3)) (= e1 (op e2 e2)) (= e0 (op e2 e1)) (= e4 (op e2 e0)) (= e4 (op e1 e4)) (= e2 (op e1 e3)) (= e0 (op e1 e2)) (= e3 (op e1 e1)) (= e1 (op e1 e0)) (= e3 (op e0 e4)) (= e0 (op e0 e3)) (= e4 (op e0 e2)) (= e2 (op e0 e0)) (= e1 (op e0 e1))) (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op e0 e0) (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t140 t142 t144 t146 t147 t148 t150 t152 t154 t156 t157 t158 t159 t50 t160 t162 t164 t165 t167 t169 t171 t173 t175 t177 t179))
(step t181 (cl (= (not (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e2 (op e4 e2)) (= e4 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e4 (op e3 e3)) (= e3 (op e3 e2)) (= e2 (op e3 e1)) (= e0 (op e3 e0)) (= e2 (op e2 e4)) (= e3 (op e2 e3)) (= e1 (op e2 e2)) (= e0 (op e2 e1)) (= e4 (op e2 e0)) (= e4 (op e1 e4)) (= e2 (op e1 e3)) (= e0 (op e1 e2)) (= e3 (op e1 e1)) (= e1 (op e1 e0)) (= e3 (op e0 e4)) (= e0 (op e0 e3)) (= e4 (op e0 e2)) (= e2 (op e0 e0)) (= e1 (op e0 e1)))) (not (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op e0 e0) (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))))) :rule cong :premises (t180))
(step t182 (cl (= (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule refl)
(step t183 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule refl)
(step t184 (cl (= (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))))) :rule refl)
(step t185 (cl (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule refl)
(step t186 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) true)) :rule rare_rewrite :args ("eq-refl" (op (op (op e0 e0) e0) e0)))
(step t187 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) true)) :rule rare_rewrite :args ("eq-refl" (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))
(step t188 (cl (= (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule refl)
(step t189 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))))) :rule refl)
(step t190 (cl (= (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule refl)
(step t191 (cl (= (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)))) :rule refl)
(step t192 (cl (= (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))))) :rule refl)
(step t193 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule refl)
(step t194 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))))) :rule refl)
(step t195 (cl (= (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule refl)
(step t196 (cl (= (= (op (op e0 e0) e0) (op (op e0 e0) e0)) true)) :rule rare_rewrite :args ("eq-refl" (op (op e0 e0) e0)))
(step t197 (cl (= (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))))) :rule refl)
(step t198 (cl (= (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) :rule refl)
(step t199 (cl (= (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))))) :rule refl)
(step t200 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule refl)
(step t201 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule refl)
(step t202 (cl (= (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))))) :rule refl)
(step t203 (cl (= (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))))) :rule refl)
(step t204 (cl (= (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))))) :rule refl)
(step t205 (cl (= (= (op e0 e0) (op e0 e0)) true)) :rule rare_rewrite :args ("eq-refl" (op e0 e0)))
(step t206 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule refl)
(step t207 (cl (= (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op e0 e0) (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) true true (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) true (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) true (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t182 t183 t184 t185 t186 t187 t188 t189 t190 t191 t192 t193 t194 t195 t196 t197 t198 t199 t200 t201 t202 t203 t204 t205 t206))
(step t208 (cl (= (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) true true (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) true (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) true (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule hole :args ("ACI_NORM" (= (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) true true (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) true (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) true (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))))
(step t209 (cl (= (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op e0 e0) (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t207 t208))
(step t210 (cl (= (not (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op e0 e0) (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (not (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))))) :rule cong :premises (t209))
(step t211 (cl (= (not (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e2 (op e4 e2)) (= e4 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e4 (op e3 e3)) (= e3 (op e3 e2)) (= e2 (op e3 e1)) (= e0 (op e3 e0)) (= e2 (op e2 e4)) (= e3 (op e2 e3)) (= e1 (op e2 e2)) (= e0 (op e2 e1)) (= e4 (op e2 e0)) (= e4 (op e1 e4)) (= e2 (op e1 e3)) (= e0 (op e1 e2)) (= e3 (op e1 e1)) (= e1 (op e1 e0)) (= e3 (op e0 e4)) (= e0 (op e0 e3)) (= e4 (op e0 e2)) (= e2 (op e0 e0)) (= e1 (op e0 e1)))) (not (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))))) :rule trans :premises (t181 t210))
(step t212 (cl (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e2) (= (op e0 e1) e1)) (= (op e0 e2) e4)) (= (op e0 e3) e0)) (= (op e0 e4) e3)) (= (op e1 e0) e1)) (= (op e1 e1) e3)) (= (op e1 e2) e0)) (= (op e1 e3) e2)) (= (op e1 e4) e4)) (= (op e2 e0) e4)) (= (op e2 e1) e0)) (= (op e2 e2) e1)) (= (op e2 e3) e3)) (= (op e2 e4) e2)) (= (op e3 e0) e0)) (= (op e3 e1) e2)) (= (op e3 e2) e3)) (= (op e3 e3) e4)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e4)) (= (op e4 e2) e2)) (= (op e4 e3) e1)) (= (op e4 e4) e0))) (not (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))))) :rule trans :premises (t138 t211))
(step t213 (cl (not (and (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))) (= e0 (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule resolution :premises (t110 t212 a9))
(step t214 (cl (not (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) (not (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0)))) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0)))) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (not (= e0 (op (op (op (op e0 e0) e0) e0) e0))) (not (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) (not (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))) (not (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (not (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0)))) (not (= e0 (op e0 (op (op (op e0 e0) e0) e0)))) (not (= (op (op e0 e0) e0) (op e0 (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule not_and :premises (t213))
(step t215 (cl (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (not (= (op (op e0 e0) e0) (op e0 (op e0 e0)))) (not (= e0 (op e0 (op (op (op e0 e0) e0) e0)))) (not (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (not (= e0 (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) (not (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))) (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))) (not (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) (not (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))) (not (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= e0 (op (op (op (op e0 e0) e0) e0) e0))) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0)))) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (not (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) (not (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule reordering :premises (t214))
(step t216 (cl (not (= (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) (not (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule equiv_pos2)
(step t217 (cl (= (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (= (op e4 e0) e4) (= (op e3 e0) e3) (= (op e2 e0) e2) (= (op e0 e0) e0) (= (op e1 e0) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (= (op e4 e0) e4) (= (op e3 e0) e3) (= (op e2 e0) e2) (= (op e0 e0) e0) (= (op e1 e0) e1)))))
(step t218 (cl (= (= (op e4 e0) e4) (= e4 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e4))
(step t219 (cl (= (= (op e3 e0) e3) (= e3 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e3))
(step t220 (cl (= (= (op e2 e0) e2) (= e2 (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) e2))
(step t221 (cl (= (= (op e0 e0) e0) (= e0 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e0))
(step t222 (cl (= (or (= (op e4 e0) e4) (= (op e3 e0) e3) (= (op e2 e0) e2) (= (op e0 e0) e0) (= (op e1 e0) e1)) (or (= e4 (op e4 e0)) (= e3 (op e3 e0)) (= e2 (op e2 e0)) (= e0 (op e0 e0)) (= e1 (op e1 e0))))) :rule cong :premises (t218 t219 t220 t221 t130))
(step t223 (cl (= (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (= e4 (op e4 e0)) (= e3 (op e3 e0)) (= e2 (op e2 e0)) (= e0 (op e0 e0)) (= e1 (op e1 e0))))) :rule trans :premises (t217 t222))
(step t224 (cl (= (= e4 (op e4 e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t35 t39))
(step t225 (cl (= (= e3 (op e3 e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t40 t155))
(step t226 (cl (= (= e2 (op e2 e0)) (= (op e0 e0) (op (op e0 e0) e0)))) :rule cong :premises (t29 t32))
(step t227 (cl (= (= e0 (op e0 e0)) (= e0 (op e0 e0)))) :rule refl)
(step t228 (cl (= (or (= e4 (op e4 e0)) (= e3 (op e3 e0)) (= e2 (op e2 e0)) (= e0 (op e0 e0)) (= e1 (op e1 e0))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule cong :premises (t224 t225 t226 t227 t169))
(step t229 (cl (= (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule trans :premises (t223 t228))
(step t230 (cl (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e1)) (= (op e2 e1) e2)) (= (op e3 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e1)) (= (op e2 e2) e2)) (= (op e3 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e1)) (= (op e2 e3) e2)) (= (op e3 e3) e3)) (= (op e4 e3) e4)))) :rule and :premises (a3) :args (0))
(step t231 (cl (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e1)) (= (op e2 e1) e2)) (= (op e3 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e1)) (= (op e2 e2) e2)) (= (op e3 e2) e3)) (= (op e4 e2) e4)))) :rule and :premises (t230) :args (0))
(step t232 (cl (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e1)) (= (op e2 e1) e2)) (= (op e3 e1) e3)) (= (op e4 e1) e4)))) :rule and :premises (t231) :args (0))
(step t233 (cl (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4))) :rule and :premises (t232) :args (0))
(step t234 (cl (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule resolution :premises (t216 t229 t233))
(step t235 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= e0 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule or :premises (t234))
(step t236 (cl (= e0 (op e0 e0)) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule reordering :premises (t235))
(step t237 (cl (and (and (and (not (= (op e0 e0) e0)) (not (= (op e1 e1) e1))) (not (= (op e2 e2) e2))) (not (= (op e3 e3) e3)))) :rule and :premises (a5) :args (0))
(step t238 (cl (and (and (not (= (op e0 e0) e0)) (not (= (op e1 e1) e1))) (not (= (op e2 e2) e2)))) :rule and :premises (t237) :args (0))
(step t239 (cl (and (not (= (op e0 e0) e0)) (not (= (op e1 e1) e1)))) :rule and :premises (t238) :args (0))
(step t240 (cl (not (= (op e0 e0) e0))) :rule and :premises (t239) :args (0))
(step t241 (cl (not (= e0 (op e0 e0)))) :rule not_symm :premises (t240))
(step t242 (cl (not (= (not (= (op e0 e0) (op e2 e0))) (not (= (op e0 e0) (op (op e0 e0) e0))))) (not (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op (op e0 e0) e0)))) :rule equiv_pos2)
(step t243 (cl (= (= (op e0 e0) (op e2 e0)) (= (op e0 e0) (op (op e0 e0) e0)))) :rule cong :premises (t176 t32))
(step t244 (cl (= (not (= (op e0 e0) (op e2 e0))) (not (= (op e0 e0) (op (op e0 e0) e0))))) :rule cong :premises (t243))
(step t245 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4)))))) :rule and :premises (a6) :args (0))
(step t246 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3)))))) :rule and :premises (t245) :args (0))
(step t247 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2)))))) :rule and :premises (t246) :args (0))
(step t248 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1)))))) :rule and :premises (t247) :args (0))
(step t249 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0))))) :rule and :premises (t248) :args (0))
(step t250 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0))))) :rule and :premises (t249) :args (0))
(step t251 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0))))) :rule and :premises (t250) :args (0))
(step t252 (cl (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0))))) :rule and :premises (t251) :args (0))
(step t253 (cl (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0))))) :rule and :premises (t252) :args (0))
(step t254 (cl (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0))))) :rule and :premises (t253) :args (0))
(step t255 (cl (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0))))) :rule and :premises (t254) :args (0))
(step t256 (cl (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0))))) :rule and :premises (t255) :args (0))
(step t257 (cl (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0))))) :rule and :premises (t256) :args (0))
(step t258 (cl (not (= (op e0 e0) (op e2 e0)))) :rule and :premises (t257) :args (1))
(step t259 (cl (not (= (op e0 e0) (op (op e0 e0) e0)))) :rule resolution :premises (t242 t244 t258))
(step t260 (cl (not (= (not (= (op e2 e0) (op e4 e0))) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) (not (not (= (op e2 e0) (op e4 e0)))) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule equiv_pos2)
(step t261 (cl (= (= (op e2 e0) (op e4 e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t32 t39))
(step t262 (cl (= (not (= (op e2 e0) (op e4 e0))) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t261))
(step t263 (cl (not (= (op e2 e0) (op e4 e0)))) :rule and :premises (t250) :args (1))
(step t264 (cl (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule resolution :premises (t260 t262 t263))
(step t265 (cl (not (= (not (= (op e3 e0) (op e4 e0))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) (not (not (= (op e3 e0) (op e4 e0)))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule equiv_pos2)
(step t266 (cl (= (= (op e3 e0) (op e4 e0)) (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t155 t39))
(step t267 (cl (= (not (= (op e3 e0) (op e4 e0))) (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t266))
(step t268 (cl (= (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op e0 e0) e0) e0) e0) (op (op (op e0 e0) e0) e0)))
(step t269 (cl (= (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op e0 e0) e0) e0))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) :rule cong :premises (t268))
(step t270 (cl (= (not (= (op e3 e0) (op e4 e0))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) :rule trans :premises (t267 t269))
(step t271 (cl (not (= (op e3 e0) (op e4 e0)))) :rule and :premises (t249) :args (1))
(step t272 (cl (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t265 t270 t271))
(step t273 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule resolution :premises (t236 t241 t259 t264 t272))
(step t274 (cl (not (= (= (op e0 e1) (op e1 e0)) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (not (= (op e0 e1) (op e1 e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t275 (cl (= (= (op e0 e1) (op e1 e0)) (= (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule cong :premises (t178 t168))
(step t276 (cl (= (= (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))
(step t277 (cl (= (= (op e0 e1) (op e1 e0)) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule trans :premises (t275 t276))
(step t278 (cl (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3))) (= (op e4 e0) (op e0 e4)))) :rule and :premises (t103) :args (0))
(step t279 (cl (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2))) (= (op e3 e0) (op e0 e3)))) :rule and :premises (t278) :args (0))
(step t280 (cl (and (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1))) (= (op e2 e0) (op e0 e2)))) :rule and :premises (t279) :args (0))
(step t281 (cl (and (= (op e0 e0) (op e0 e0)) (= (op e1 e0) (op e0 e1)))) :rule and :premises (t280) :args (0))
(step t282 (cl (= (op e1 e0) (op e0 e1))) :rule and :premises (t281) :args (1))
(step t283 (cl (= (op e0 e1) (op e1 e0))) :rule symm :premises (t282))
(step t284 (cl (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t274 t277 t283))
(step t285 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule trans :premises (t273 t284))
(step t286 (cl (not (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) (not (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4))) (or (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule equiv_pos2)
(step t287 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= (op e3 e0) e4) (= (op e3 e0) e3) (= (op e3 e0) e2) (= (op e3 e0) e0) (= (op e3 e0) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= (op e3 e0) e4) (= (op e3 e0) e3) (= (op e3 e0) e2) (= (op e3 e0) e0) (= (op e3 e0) e1)))))
(step t288 (cl (= (= (op e3 e0) e4) (= e4 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e4))
(step t289 (cl (= (= (op e3 e0) e2) (= e2 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e2))
(step t290 (cl (= (= (op e3 e0) e1) (= e1 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e1))
(step t291 (cl (= (or (= (op e3 e0) e4) (= (op e3 e0) e3) (= (op e3 e0) e2) (= (op e3 e0) e0) (= (op e3 e0) e1)) (or (= e4 (op e3 e0)) (= e3 (op e3 e0)) (= e2 (op e3 e0)) (= e0 (op e3 e0)) (= e1 (op e3 e0))))) :rule cong :premises (t288 t219 t289 t121 t290))
(step t292 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= e4 (op e3 e0)) (= e3 (op e3 e0)) (= e2 (op e3 e0)) (= e0 (op e3 e0)) (= e1 (op e3 e0))))) :rule trans :premises (t287 t291))
(step t293 (cl (= (= e4 (op e3 e0)) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t35 t155))
(step t294 (cl (= (= e2 (op e3 e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t29 t155))
(step t295 (cl (= (= e1 (op e3 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t48 t155))
(step t296 (cl (= (or (= e4 (op e3 e0)) (= e3 (op e3 e0)) (= e2 (op e3 e0)) (= e0 (op e3 e0)) (= e1 (op e3 e0))) (or (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) :rule cong :premises (t293 t225 t294 t156 t295))
(step t297 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) :rule trans :premises (t292 t296))
(step t298 (cl (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4))))) :rule and :premises (a0) :args (0))
(step t299 (cl (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4)))) :rule and :premises (t298) :args (1))
(step t300 (cl (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4)))) :rule and :premises (t299) :args (0))
(step t301 (cl (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4)))) :rule and :premises (t300) :args (0))
(step t302 (cl (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4)))) :rule and :premises (t301) :args (0))
(step t303 (cl (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4))) :rule and :premises (t302) :args (0))
(step t304 (cl (or (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t286 t297 t303))
(step t305 (cl (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))) :rule or :premises (t304))
(step t306 (cl (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)) (= e0 (op (op (op (op e0 e0) e0) e0) e0))) :rule reordering :premises (t305))
(step t307 (cl (not (= (not (= (op e0 e0) (op e3 e0))) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0))))) (not (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule equiv_pos2)
(step t308 (cl (= (= (op e0 e0) (op e3 e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t176 t155))
(step t309 (cl (= (not (= (op e0 e0) (op e3 e0))) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0))))) :rule cong :premises (t308))
(step t310 (cl (not (= (op e0 e0) (op e3 e0)))) :rule and :premises (t256) :args (1))
(step t311 (cl (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t307 t309 t310))
(step t312 (cl (not (= (not (= (op e2 e0) (op e3 e0))) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) (not (not (= (op e2 e0) (op e3 e0)))) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule equiv_pos2)
(step t313 (cl (= (= (op e2 e0) (op e3 e0)) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t32 t155))
(step t314 (cl (= (not (= (op e2 e0) (op e3 e0))) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) :rule cong :premises (t313))
(step t315 (cl (not (= (op e2 e0) (op e3 e0)))) :rule and :premises (t251) :args (1))
(step t316 (cl (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t312 t314 t315))
(step t317 (cl (not (= (not (= (op e3 e0) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) (not (not (= (op e3 e0) (op e3 e4)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule equiv_pos2)
(step t318 (cl (= (= (op e3 e0) (op e3 e4)) (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t155 t47))
(step t319 (cl (= (not (= (op e3 e0) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t318))
(step t320 (cl (= (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))
(step t321 (cl (= (not (= (op (op (op (op e0 e0) e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) :rule cong :premises (t320))
(step t322 (cl (= (not (= (op e3 e0) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))))) :rule trans :premises (t319 t321))
(step t323 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4)))))) :rule and :premises (a6) :args (1))
(step t324 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4)))))) :rule and :premises (t323) :args (0))
(step t325 (cl (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) :rule and :premises (t324) :args (1))
(step t326 (cl (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4))))) :rule and :premises (t325) :args (0))
(step t327 (cl (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3))))) :rule and :premises (t326) :args (0))
(step t328 (cl (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4))))) :rule and :premises (t327) :args (0))
(step t329 (cl (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3))))) :rule and :premises (t328) :args (0))
(step t330 (cl (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2))))) :rule and :premises (t329) :args (0))
(step t331 (cl (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4))))) :rule and :premises (t330) :args (0))
(step t332 (cl (not (= (op e3 e0) (op e3 e4)))) :rule and :premises (t331) :args (1))
(step t333 (cl (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t317 t322 t332))
(step t334 (cl (= e0 (op (op (op (op e0 e0) e0) e0) e0))) :rule resolution :premises (t306 t311 t316 t272 t333))
(step t335 (cl (not (= (= (op e0 e3) (op e3 e0)) (= (op (op (op (op e0 e0) e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))))) (not (= (op e0 e3) (op e3 e0))) (= (op (op (op (op e0 e0) e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0)))) :rule equiv_pos2)
(step t336 (cl (= (= (op e0 e3) (op e3 e0)) (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t172 t155))
(step t337 (cl (= (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op (op e0 e0) e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) e0)))
(step t338 (cl (= (= (op e0 e3) (op e3 e0)) (= (op (op (op (op e0 e0) e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))))) :rule trans :premises (t336 t337))
(step t339 (cl (= (op e3 e0) (op e0 e3))) :rule and :premises (t279) :args (1))
(step t340 (cl (= (op e0 e3) (op e3 e0))) :rule symm :premises (t339))
(step t341 (cl (= (op (op (op (op e0 e0) e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0)))) :rule resolution :premises (t335 t338 t340))
(step t342 (cl (= e0 (op e0 (op (op (op e0 e0) e0) e0)))) :rule trans :premises (t334 t341))
(step t343 (cl (not (= (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3)) (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (not (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3))) (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv_pos2)
(step t344 (cl (= (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3)) (or (= (op e4 e4) e3) (= (op e3 e3) e3) (= (op e2 e2) e3) (= (op e0 e0) e3) (= (op e1 e1) e3)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3)) (or (= (op e4 e4) e3) (= (op e3 e3) e3) (= (op e2 e2) e3) (= (op e0 e0) e3) (= (op e1 e1) e3)))))
(step t345 (cl (= (= (op e4 e4) e3) (= e3 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e3))
(step t346 (cl (= (= (op e3 e3) e3) (= e3 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e3))
(step t347 (cl (= (= (op e2 e2) e3) (= e3 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e3))
(step t348 (cl (= (= (op e0 e0) e3) (= e3 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e3))
(step t349 (cl (= (or (= (op e4 e4) e3) (= (op e3 e3) e3) (= (op e2 e2) e3) (= (op e0 e0) e3) (= (op e1 e1) e3)) (or (= e3 (op e4 e4)) (= e3 (op e3 e3)) (= e3 (op e2 e2)) (= e3 (op e0 e0)) (= e3 (op e1 e1))))) :rule cong :premises (t345 t346 t347 t348 t129))
(step t350 (cl (= (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3)) (or (= e3 (op e4 e4)) (= e3 (op e3 e3)) (= e3 (op e2 e2)) (= e3 (op e0 e0)) (= e3 (op e1 e1))))) :rule trans :premises (t344 t349))
(step t351 (cl (= (= e3 (op e4 e4)) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t40 t139))
(step t352 (cl (= (= e3 (op e3 e3)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t40 t149))
(step t353 (cl (= (= e3 (op e2 e2)) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t40 t43))
(step t354 (cl (= (= e3 (op e0 e0)) (= (op (op (op e0 e0) e0) e0) (op e0 e0)))) :rule cong :premises (t40 t176))
(step t355 (cl (= (or (= e3 (op e4 e4)) (= e3 (op e3 e3)) (= e3 (op e2 e2)) (= e3 (op e0 e0)) (= e3 (op e1 e1))) (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op e0 e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t351 t352 t353 t354 t167))
(step t356 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule refl)
(step t357 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule refl)
(step t358 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))))) :rule refl)
(step t359 (cl (= (= (op (op (op e0 e0) e0) e0) (op e0 e0)) (= (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e0 e0) e0) e0) (op e0 e0)))
(step t360 (cl (= (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op e0 e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t356 t357 t358 t359 t200))
(step t361 (cl (= (or (= e3 (op e4 e4)) (= e3 (op e3 e3)) (= e3 (op e2 e2)) (= e3 (op e0 e0)) (= e3 (op e1 e1))) (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t355 t360))
(step t362 (cl (= (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3)) (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t350 t361))
(step t363 (cl (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2))) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3)))) :rule and :premises (a2) :args (0))
(step t364 (cl (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3))) :rule and :premises (t363) :args (1))
(step t365 (cl (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t343 t362 t364))
(step t366 (cl (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule or :premises (t365))
(step t367 (cl (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0)))) :rule reordering :premises (t366))
(step t368 (cl (not (= (not (= (op e3 e3) e3)) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))))) (not (not (= (op e3 e3) e3))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule equiv_pos2)
(step t369 (cl (= (not (= (op e3 e3) e3)) (not (= e3 (op e3 e3))))) :rule cong :premises (t346))
(step t370 (cl (= (not (= e3 (op e3 e3))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))))) :rule cong :premises (t352))
(step t371 (cl (= (not (= (op e3 e3) e3)) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))))) :rule trans :premises (t369 t370))
(step t372 (cl (not (= (op e3 e3) e3))) :rule and :premises (t237) :args (1))
(step t373 (cl (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t368 t371 t372))
(step t374 (cl (not (= (not (= (op e0 e0) (op e4 e0))) (not (= (op e0 e0) (op (op (op e0 e0) e0) e0))))) (not (not (= (op e0 e0) (op e4 e0)))) (not (= (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule equiv_pos2)
(step t375 (cl (= (= (op e0 e0) (op e4 e0)) (= (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t176 t39))
(step t376 (cl (= (not (= (op e0 e0) (op e4 e0))) (not (= (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t375))
(step t377 (cl (not (= (op e0 e0) (op e4 e0)))) :rule and :premises (t255) :args (1))
(step t378 (cl (not (= (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule resolution :premises (t374 t376 t377))
(step t379 (cl (not (= (not (= (op e4 e0) (op e4 e4))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) (not (not (= (op e4 e0) (op e4 e4)))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t380 (cl (= (= (op e4 e0) (op e4 e4)) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t39 t139))
(step t381 (cl (= (not (= (op e4 e0) (op e4 e4))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t380))
(step t382 (cl (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4))))) :rule and :premises (t323) :args (1))
(step t383 (cl (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4))))) :rule and :premises (t382) :args (0))
(step t384 (cl (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3))))) :rule and :premises (t383) :args (0))
(step t385 (cl (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4))))) :rule and :premises (t384) :args (0))
(step t386 (cl (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3))))) :rule and :premises (t385) :args (0))
(step t387 (cl (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2))))) :rule and :premises (t386) :args (0))
(step t388 (cl (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4))))) :rule and :premises (t387) :args (0))
(step t389 (cl (not (= (op e4 e0) (op e4 e4)))) :rule and :premises (t388) :args (1))
(step t390 (cl (not (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t379 t381 t389))
(step t391 (cl (= (= (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) false) (not (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0)))))) :rule equiv_simplify)
(step t392 (cl (not (= (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) false)) (not (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))))) :rule equiv1 :premises (t391))
(step t393 (cl (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) :rule refl)
(step t394 (cl (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) :rule symm :premises (t273))
(step t395 (cl (not (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (not (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv_pos2)
(step t396 (cl (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e3 e3) e1) (= (op e2 e2) e1) (= (op e0 e0) e1) (= (op e1 e1) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e3 e3) e1) (= (op e2 e2) e1) (= (op e0 e0) e1) (= (op e1 e1) e1)))))
(step t397 (cl (= (= (op e4 e4) e1) (= e1 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e1))
(step t398 (cl (= (= (op e3 e3) e1) (= e1 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e1))
(step t399 (cl (= (= (op e0 e0) e1) (= e1 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e1))
(step t400 (cl (= (= (op e1 e1) e1) (= e1 (op e1 e1)))) :rule rare_rewrite :args ("eq-symm" (op e1 e1) e1))
(step t401 (cl (= (or (= (op e4 e4) e1) (= (op e3 e3) e1) (= (op e2 e2) e1) (= (op e0 e0) e1) (= (op e1 e1) e1)) (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))))) :rule cong :premises (t397 t398 t124 t399 t400))
(step t402 (cl (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))))) :rule trans :premises (t396 t401))
(step t403 (cl (= (= e1 (op e4 e4)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t48 t139))
(step t404 (cl (= (= e1 (op e3 e3)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t48 t149))
(step t405 (cl (= (= e1 (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))) :rule cong :premises (t48 t176))
(step t406 (cl (= (= e1 (op e1 e1)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t48 t166))
(step t407 (cl (= (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t403 t404 t159 t405 t406))
(step t408 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule refl)
(step t409 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule refl)
(step t410 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)))
(step t411 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule refl)
(step t412 (cl (= (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op e0 e0)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t408 t409 t194 t410 t411))
(step t413 (cl (= (or (= e1 (op e4 e4)) (= e1 (op e3 e3)) (= e1 (op e2 e2)) (= e1 (op e0 e0)) (= e1 (op e1 e1))) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t407 t412))
(step t414 (cl (= (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)) (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t402 t413))
(step t415 (cl (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2)))) :rule and :premises (t363) :args (0))
(step t416 (cl (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1)))) :rule and :premises (t415) :args (0))
(step t417 (cl (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) :rule and :premises (t416) :args (1))
(step t418 (cl (or (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t395 t414 t417))
(step t419 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule or :premises (t418))
(step t420 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) :rule reordering :premises (t419))
(step t421 (cl (not (= (not (= (op e1 e1) e1)) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (not (not (= (op e1 e1) e1))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv_pos2)
(step t422 (cl (= (not (= (op e1 e1) e1)) (not (= e1 (op e1 e1))))) :rule cong :premises (t400))
(step t423 (cl (= (not (= e1 (op e1 e1))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t406))
(step t424 (cl (= (not (= (op e1 e1) e1)) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t422 t423))
(step t425 (cl (not (= (op e1 e1) e1))) :rule and :premises (t239) :args (1))
(step t426 (cl (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t421 t424 t425))
(step t427 (cl (not (= (not (= (op e3 e4) (op e4 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) (not (not (= (op e3 e4) (op e4 e4)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t428 (cl (= (= (op e3 e4) (op e4 e4)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t47 t139))
(step t429 (cl (= (not (= (op e3 e4) (op e4 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t428))
(step t430 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4))))) :rule and :premises (t245) :args (1))
(step t431 (cl (not (= (op e3 e4) (op e4 e4)))) :rule and :premises (t430) :args (1))
(step t432 (cl (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t427 t429 t431))
(step t433 (cl (not (= (not (= (op e3 e3) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))))) (not (not (= (op e3 e3) (op e3 e4)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule equiv_pos2)
(step t434 (cl (= (= (op e3 e3) (op e3 e4)) (= (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t149 t47))
(step t435 (cl (= (not (= (op e3 e3) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t434))
(step t436 (cl (= (= (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))
(step t437 (cl (= (not (= (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))))) :rule cong :premises (t436))
(step t438 (cl (= (not (= (op e3 e3) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))))) :rule trans :premises (t435 t437))
(step t439 (cl (not (= (op e3 e3) (op e3 e4)))) :rule and :premises (t325) :args (1))
(step t440 (cl (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t433 t438 t439))
(step t441 (cl (not (= (not (= e1 e2)) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (not (not (= e1 e2))) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t442 (cl (= (= e1 e2) (= e2 e1))) :rule rare_rewrite :args ("eq-symm" e1 e2))
(step t443 (cl (= (not (= e1 e2)) (not (= e2 e1)))) :rule cong :premises (t442))
(step t444 (cl (= (= e2 e1) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t29 t48))
(step t445 (cl (= (not (= e2 e1)) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t444))
(step t446 (cl (= (not (= e1 e2)) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule trans :premises (t443 t445))
(step t447 (cl (not (= e1 e2))) :rule and :premises (t77) :args (1))
(step t448 (cl (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t441 t446 t447))
(step t449 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) (op e0 e0)))) :rule resolution :premises (t420 t426 t432 t440 t448))
(step t450 (cl (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op e0 e0) (op e0 e0)))) :rule trans :premises (t394 t449))
(step t451 (cl (= (op (op e0 e0) (op e0 e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule symm :premises (t450))
(step t452 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule cong :premises (t393 t451))
(step t453 (cl (= (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule equiv_simplify)
(step t454 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false) (not (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule equiv2 :premises (t453))
(step t455 (cl (not (not (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule not_not)
(step t456 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule resolution :premises (t454 t455))
(step t457 (cl (not (= (not (= (op e1 e0) (op e4 e0))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) (not (not (= (op e1 e0) (op e4 e0)))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule equiv_pos2)
(step t458 (cl (= (= (op e1 e0) (op e4 e0)) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t168 t39))
(step t459 (cl (= (not (= (op e1 e0) (op e4 e0))) (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t458))
(step t460 (cl (= (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op e0 e0) e0) e0)))
(step t461 (cl (= (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op e0 e0) e0) e0))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule cong :premises (t460))
(step t462 (cl (= (not (= (op e1 e0) (op e4 e0))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule trans :premises (t459 t461))
(step t463 (cl (not (= (op e1 e0) (op e4 e0)))) :rule and :premises (t252) :args (1))
(step t464 (cl (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule resolution :premises (t457 t462 t463))
(step t465 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false)) :rule resolution :premises (t456 t464))
(step t466 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))) false)) :rule trans :premises (t452 t465))
(step t467 (cl (not (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op e0 e0))))) :rule resolution :premises (t392 t466))
(step t468 (cl (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t367 t373 t378 t390 t467))
(step t469 (cl (not (= (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))))) (not (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t470 (cl (= (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4)) (or (= (op e4 e4) e4) (= (op e3 e4) e4) (= (op e2 e4) e4) (= (op e0 e4) e4) (= (op e1 e4) e4)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4)) (or (= (op e4 e4) e4) (= (op e3 e4) e4) (= (op e2 e4) e4) (= (op e0 e4) e4) (= (op e1 e4) e4)))))
(step t471 (cl (= (= (op e4 e4) e4) (= e4 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e4))
(step t472 (cl (= (= (op e3 e4) e4) (= e4 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e4))
(step t473 (cl (= (= (op e2 e4) e4) (= e4 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e4))
(step t474 (cl (= (= (op e0 e4) e4) (= e4 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e4))
(step t475 (cl (= (or (= (op e4 e4) e4) (= (op e3 e4) e4) (= (op e2 e4) e4) (= (op e0 e4) e4) (= (op e1 e4) e4)) (or (= e4 (op e4 e4)) (= e4 (op e3 e4)) (= e4 (op e2 e4)) (= e4 (op e0 e4)) (= e4 (op e1 e4))))) :rule cong :premises (t471 t472 t473 t474 t126))
(step t476 (cl (= (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4)) (or (= e4 (op e4 e4)) (= e4 (op e3 e4)) (= e4 (op e2 e4)) (= e4 (op e0 e4)) (= e4 (op e1 e4))))) :rule trans :premises (t470 t475))
(step t477 (cl (= (= e4 (op e4 e4)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t35 t139))
(step t478 (cl (= (= e4 (op e3 e4)) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t35 t47))
(step t479 (cl (= (= e4 (op e2 e4)) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))))) :rule cong :premises (t35 t36))
(step t480 (cl (= (= e4 (op e0 e4)) (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))))) :rule cong :premises (t35 t170))
(step t481 (cl (= (or (= e4 (op e4 e4)) (= e4 (op e3 e4)) (= e4 (op e2 e4)) (= e4 (op e0 e4)) (= e4 (op e1 e4))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))))) :rule cong :premises (t477 t478 t479 t480 t162))
(step t482 (cl (= (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))))) :rule trans :premises (t476 t481))
(step t483 (cl (and (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) (and (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))))) :rule and :premises (a1) :args (1))
(step t484 (cl (and (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4)))) :rule and :premises (t483) :args (1))
(step t485 (cl (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))) :rule and :premises (t484) :args (1))
(step t486 (cl (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))))) :rule resolution :premises (t469 t482 t485))
(step t487 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))) :rule or :premises (t486))
(step t488 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))) :rule reordering :premises (t487))
(step t489 (cl (not (= (not (= (op e4 e4) e4)) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) (not (not (= (op e4 e4) e4))) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t490 (cl (= (not (= (op e4 e4) e4)) (not (= e4 (op e4 e4))))) :rule cong :premises (t471))
(step t491 (cl (= (not (= e4 (op e4 e4))) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t477))
(step t492 (cl (= (not (= (op e4 e4) e4)) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) :rule trans :premises (t490 t491))
(step t493 (cl (not (= (op e4 e4) e4))) :rule and :premises (a5) :args (1))
(step t494 (cl (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t489 t492 t493))
(step t495 (cl (not (= (not (= (op e2 e0) (op e2 e4))) (not (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0)))))) (not (not (= (op e2 e0) (op e2 e4)))) (not (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t496 (cl (= (= (op e2 e0) (op e2 e4)) (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))))) :rule cong :premises (t32 t36))
(step t497 (cl (= (not (= (op e2 e0) (op e2 e4))) (not (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0)))))) :rule cong :premises (t496))
(step t498 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4)))))) :rule and :premises (t324) :args (0))
(step t499 (cl (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) :rule and :premises (t498) :args (1))
(step t500 (cl (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4))))) :rule and :premises (t499) :args (0))
(step t501 (cl (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3))))) :rule and :premises (t500) :args (0))
(step t502 (cl (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4))))) :rule and :premises (t501) :args (0))
(step t503 (cl (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3))))) :rule and :premises (t502) :args (0))
(step t504 (cl (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2))))) :rule and :premises (t503) :args (0))
(step t505 (cl (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4))))) :rule and :premises (t504) :args (0))
(step t506 (cl (not (= (op e2 e0) (op e2 e4)))) :rule and :premises (t505) :args (1))
(step t507 (cl (not (= (op (op e0 e0) e0) (op (op e0 e0) (op (op e0 e0) e0))))) :rule resolution :premises (t495 t497 t506))
(step t508 (cl (not (= (not (= e1 e4)) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (not (not (= e1 e4))) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t509 (cl (= (= e1 e4) (= e4 e1))) :rule rare_rewrite :args ("eq-symm" e1 e4))
(step t510 (cl (= (not (= e1 e4)) (not (= e4 e1)))) :rule cong :premises (t509))
(step t511 (cl (= (= e4 e1) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t35 t48))
(step t512 (cl (= (not (= e4 e1)) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t511))
(step t513 (cl (= (not (= e1 e4)) (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule trans :premises (t510 t512))
(step t514 (cl (not (= e1 e4))) :rule and :premises (t75) :args (1))
(step t515 (cl (not (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t508 t513 t514))
(step t516 (cl (= (= (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) false) (not (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0)))))) :rule equiv_simplify)
(step t517 (cl (not (= (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) false)) (not (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))))) :rule equiv1 :premises (t516))
(step t518 (cl (= (op (op e0 e0) e0) (op (op e0 e0) e0))) :rule refl)
(step t519 (cl (not (= (= (op e0 e4) (op e4 e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))))) (not (= (op e0 e4) (op e4 e0))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0)))) :rule equiv_pos2)
(step t520 (cl (= (= (op e0 e4) (op e4 e0)) (= (op e0 (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t170 t39))
(step t521 (cl (= (= (op e0 (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))
(step t522 (cl (= (= (op e0 e4) (op e4 e0)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0))))) :rule trans :premises (t520 t521))
(step t523 (cl (= (op e4 e0) (op e0 e4))) :rule and :premises (t278) :args (1))
(step t524 (cl (= (op e0 e4) (op e4 e0))) :rule symm :premises (t523))
(step t525 (cl (= (op (op (op e0 e0) e0) e0) (op e0 (op (op e0 e0) e0)))) :rule resolution :premises (t519 t522 t524))
(step t526 (cl (= (op e0 (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) :rule symm :premises (t525))
(step t527 (cl (= (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t518 t526))
(step t528 (cl (= (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) false) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule equiv_simplify)
(step t529 (cl (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) false) (not (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule equiv2 :premises (t528))
(step t530 (cl (not (not (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) :rule not_not)
(step t531 (cl (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) false) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) :rule resolution :premises (t529 t530))
(step t532 (cl (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) false)) :rule resolution :premises (t531 t264))
(step t533 (cl (= (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))) false)) :rule trans :premises (t527 t532))
(step t534 (cl (not (= (op (op e0 e0) e0) (op e0 (op (op e0 e0) e0))))) :rule resolution :premises (t517 t533))
(step t535 (cl (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))) :rule resolution :premises (t488 t494 t507 t515 t534))
(step t536 (cl (not (= (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)) (or (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))))) (not (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2))) (or (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) :rule equiv_pos2)
(step t537 (cl (= (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)) (or (= (op e4 e3) e2) (= (op e3 e3) e2) (= (op e2 e3) e2) (= (op e0 e3) e2) (= (op e1 e3) e2)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)) (or (= (op e4 e3) e2) (= (op e3 e3) e2) (= (op e2 e3) e2) (= (op e0 e3) e2) (= (op e1 e3) e2)))))
(step t538 (cl (= (= (op e4 e3) e2) (= e2 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e2))
(step t539 (cl (= (= (op e3 e3) e2) (= e2 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e2))
(step t540 (cl (= (= (op e2 e3) e2) (= e2 (op e2 e3)))) :rule rare_rewrite :args ("eq-symm" (op e2 e3) e2))
(step t541 (cl (= (= (op e0 e3) e2) (= e2 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e2))
(step t542 (cl (= (or (= (op e4 e3) e2) (= (op e3 e3) e2) (= (op e2 e3) e2) (= (op e0 e3) e2) (= (op e1 e3) e2)) (or (= e2 (op e4 e3)) (= e2 (op e3 e3)) (= e2 (op e2 e3)) (= e2 (op e0 e3)) (= e2 (op e1 e3))))) :rule cong :premises (t538 t539 t540 t541 t127))
(step t543 (cl (= (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)) (or (= e2 (op e4 e3)) (= e2 (op e3 e3)) (= e2 (op e2 e3)) (= e2 (op e0 e3)) (= e2 (op e1 e3))))) :rule trans :premises (t537 t542))
(step t544 (cl (= (= e2 (op e4 e3)) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t29 t141))
(step t545 (cl (= (= e2 (op e3 e3)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t29 t149))
(step t546 (cl (= (= e2 (op e2 e3)) (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t29 t41))
(step t547 (cl (= (= e2 (op e0 e3)) (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t29 t172))
(step t548 (cl (= (or (= e2 (op e4 e3)) (= e2 (op e3 e3)) (= e2 (op e2 e3)) (= e2 (op e0 e3)) (= e2 (op e1 e3))) (or (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))))) :rule cong :premises (t544 t545 t546 t547 t164))
(step t549 (cl (= (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)) (or (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))))) :rule trans :premises (t543 t548))
(step t550 (cl (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4))))) :rule and :premises (t53) :args (1))
(step t551 (cl (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3))))) :rule and :premises (t550) :args (0))
(step t552 (cl (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2))))) :rule and :premises (t551) :args (0))
(step t553 (cl (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) :rule and :premises (t552) :args (1))
(step t554 (cl (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2))) :rule and :premises (t553) :args (1))
(step t555 (cl (or (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t536 t549 t554))
(step t556 (cl (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))) :rule or :premises (t555))
(step t557 (cl (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule reordering :premises (t556))
(step t558 (cl (not (= (not (= (op e0 e0) (op e0 e3))) (not (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0)))))) (not (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0))))) :rule equiv_pos2)
(step t559 (cl (= (= (op e0 e0) (op e0 e3)) (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t176 t172))
(step t560 (cl (= (not (= (op e0 e0) (op e0 e3))) (not (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0)))))) :rule cong :premises (t559))
(step t561 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4)))))) :rule and :premises (t498) :args (0))
(step t562 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4))))) :rule and :premises (t561) :args (0))
(step t563 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4))))) :rule and :premises (t562) :args (0))
(step t564 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3))))) :rule and :premises (t563) :args (0))
(step t565 (cl (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4))))) :rule and :premises (t564) :args (0))
(step t566 (cl (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3))))) :rule and :premises (t565) :args (0))
(step t567 (cl (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2))))) :rule and :premises (t566) :args (0))
(step t568 (cl (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4))))) :rule and :premises (t567) :args (0))
(step t569 (cl (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3))))) :rule and :premises (t568) :args (0))
(step t570 (cl (not (= (op e0 e0) (op e0 e3)))) :rule and :premises (t569) :args (1))
(step t571 (cl (not (= (op e0 e0) (op e0 (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t558 t560 t570))
(step t572 (cl (= (= (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) false) (not (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))))) :rule equiv_simplify)
(step t573 (cl (not (= (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) false)) (not (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule equiv1 :premises (t572))
(step t574 (cl (not (= (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)) (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))))) (not (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3))) (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) :rule equiv_pos2)
(step t575 (cl (= (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)) (or (= (op e4 e3) e3) (= (op e3 e3) e3) (= (op e2 e3) e3) (= (op e0 e3) e3) (= (op e1 e3) e3)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)) (or (= (op e4 e3) e3) (= (op e3 e3) e3) (= (op e2 e3) e3) (= (op e0 e3) e3) (= (op e1 e3) e3)))))
(step t576 (cl (= (= (op e4 e3) e3) (= e3 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e3))
(step t577 (cl (= (= (op e0 e3) e3) (= e3 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e3))
(step t578 (cl (= (= (op e1 e3) e3) (= e3 (op e1 e3)))) :rule rare_rewrite :args ("eq-symm" (op e1 e3) e3))
(step t579 (cl (= (or (= (op e4 e3) e3) (= (op e3 e3) e3) (= (op e2 e3) e3) (= (op e0 e3) e3) (= (op e1 e3) e3)) (or (= e3 (op e4 e3)) (= e3 (op e3 e3)) (= e3 (op e2 e3)) (= e3 (op e0 e3)) (= e3 (op e1 e3))))) :rule cong :premises (t576 t346 t123 t577 t578))
(step t580 (cl (= (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)) (or (= e3 (op e4 e3)) (= e3 (op e3 e3)) (= e3 (op e2 e3)) (= e3 (op e0 e3)) (= e3 (op e1 e3))))) :rule trans :premises (t575 t579))
(step t581 (cl (= (= e3 (op e4 e3)) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t40 t141))
(step t582 (cl (= (= e3 (op e0 e3)) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t40 t172))
(step t583 (cl (= (= e3 (op e1 e3)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t40 t163))
(step t584 (cl (= (or (= e3 (op e4 e3)) (= e3 (op e3 e3)) (= e3 (op e2 e3)) (= e3 (op e0 e3)) (= e3 (op e1 e3))) (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))))) :rule cong :premises (t581 t352 t158 t582 t583))
(step t585 (cl (= (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)) (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))))) :rule trans :premises (t580 t584))
(step t586 (cl (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) :rule and :premises (t551) :args (1))
(step t587 (cl (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3))) :rule and :premises (t586) :args (1))
(step t588 (cl (or (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t574 t585 t587))
(step t589 (cl (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))) :rule or :premises (t588))
(step t590 (cl (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule reordering :premises (t589))
(step t591 (cl (not (= (not (= (op e4 e0) (op e4 e3))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))))) (not (not (= (op e4 e0) (op e4 e3)))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule equiv_pos2)
(step t592 (cl (= (= (op e4 e0) (op e4 e3)) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t39 t141))
(step t593 (cl (= (not (= (op e4 e0) (op e4 e3))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))))) :rule cong :premises (t592))
(step t594 (cl (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3))))) :rule and :premises (t388) :args (0))
(step t595 (cl (not (= (op e4 e0) (op e4 e3)))) :rule and :premises (t594) :args (1))
(step t596 (cl (not (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t591 t593 t595))
(step t597 (cl (= (= (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) false) (not (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0)))))) :rule equiv_simplify)
(step t598 (cl (not (= (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) false)) (not (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))))) :rule equiv1 :premises (t597))
(step t599 (cl (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) e0))) :rule symm :premises (t341))
(step t600 (cl (= (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t393 t599))
(step t601 (cl (= (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) false) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) :rule equiv_simplify)
(step t602 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) false) (not (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) :rule equiv2 :premises (t601))
(step t603 (cl (not (not (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule not_not)
(step t604 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) false) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0))) :rule resolution :premises (t602 t603))
(step t605 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) false)) :rule resolution :premises (t604 t272))
(step t606 (cl (= (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))) false)) :rule trans :premises (t600 t605))
(step t607 (cl (not (= (op (op (op e0 e0) e0) e0) (op e0 (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t598 t606))
(step t608 (cl (= (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) false) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))))) :rule equiv_simplify)
(step t609 (cl (not (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) false)) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) :rule equiv1 :premises (t608))
(step t610 (cl (not (= (= (op e1 e3) (op e3 e1)) (= (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) (not (= (op e1 e3) (op e3 e1))) (= (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))) :rule equiv_pos2)
(step t611 (cl (= (= (op e1 e3) (op e3 e1)) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t163 t153))
(step t612 (cl (= (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))
(step t613 (cl (= (= (op e1 e3) (op e3 e1)) (= (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) :rule trans :premises (t611 t612))
(step t614 (cl (= (op e3 e1) (op e1 e3))) :rule and :premises (t105) :args (1))
(step t615 (cl (= (op e1 e3) (op e3 e1))) :rule symm :premises (t614))
(step t616 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))) :rule resolution :premises (t610 t613 t615))
(step t617 (cl (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule symm :premises (t616))
(step t618 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t468 t617))
(step t619 (cl (= (= (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) false) (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule equiv_simplify)
(step t620 (cl (= (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) false) (not (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule equiv2 :premises (t619))
(step t621 (cl (not (not (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule not_not)
(step t622 (cl (= (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) false) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t620 t621))
(step t623 (cl (not (= (not (= (op e1 e1) (op e3 e1))) (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (not (not (= (op e1 e1) (op e3 e1)))) (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv_pos2)
(step t624 (cl (= (= (op e1 e1) (op e3 e1)) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t166 t153))
(step t625 (cl (= (not (= (op e1 e1) (op e3 e1))) (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t624))
(step t626 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) :rule and :premises (t248) :args (1))
(step t627 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1))))) :rule and :premises (t626) :args (0))
(step t628 (cl (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1))))) :rule and :premises (t627) :args (0))
(step t629 (cl (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1))))) :rule and :premises (t628) :args (0))
(step t630 (cl (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1))))) :rule and :premises (t629) :args (0))
(step t631 (cl (not (= (op e1 e1) (op e3 e1)))) :rule and :premises (t630) :args (1))
(step t632 (cl (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t623 t625 t631))
(step t633 (cl (= (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) false)) :rule resolution :premises (t622 t632))
(step t634 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))) false)) :rule trans :premises (t618 t633))
(step t635 (cl (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t609 t634))
(step t636 (cl (= (op (op (op e0 e0) e0) e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule resolution :premises (t590 t373 t596 t607 t635))
(step t637 (cl (= (op (op e0 e0) (op (op (op e0 e0) e0) e0)) (op (op (op e0 e0) e0) e0))) :rule symm :premises (t636))
(step t638 (cl (= (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t176 t637))
(step t639 (cl (= (= (= (op e0 e0) (op (op (op e0 e0) e0) e0)) false) (not (= (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule equiv_simplify)
(step t640 (cl (= (= (op e0 e0) (op (op (op e0 e0) e0) e0)) false) (not (not (= (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule equiv2 :premises (t639))
(step t641 (cl (not (not (not (= (op e0 e0) (op (op (op e0 e0) e0) e0))))) (= (op e0 e0) (op (op (op e0 e0) e0) e0))) :rule not_not)
(step t642 (cl (= (= (op e0 e0) (op (op (op e0 e0) e0) e0)) false) (= (op e0 e0) (op (op (op e0 e0) e0) e0))) :rule resolution :premises (t640 t641))
(step t643 (cl (= (= (op e0 e0) (op (op (op e0 e0) e0) e0)) false)) :rule resolution :premises (t642 t378))
(step t644 (cl (= (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) false)) :rule trans :premises (t638 t643))
(step t645 (cl (not (= (op e0 e0) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t573 t644))
(step t646 (cl (= (= (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) false) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))))) :rule equiv_simplify)
(step t647 (cl (not (= (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) false)) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule equiv1 :premises (t646))
(step t648 (cl (not (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (not (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv_pos2)
(step t649 (cl (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4)) (or (= (op e4 e4) e4) (= (op e3 e3) e4) (= (op e2 e2) e4) (= (op e0 e0) e4) (= (op e1 e1) e4)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4)) (or (= (op e4 e4) e4) (= (op e3 e3) e4) (= (op e2 e2) e4) (= (op e0 e0) e4) (= (op e1 e1) e4)))))
(step t650 (cl (= (= (op e2 e2) e4) (= e4 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e4))
(step t651 (cl (= (= (op e0 e0) e4) (= e4 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e4))
(step t652 (cl (= (= (op e1 e1) e4) (= e4 (op e1 e1)))) :rule rare_rewrite :args ("eq-symm" (op e1 e1) e4))
(step t653 (cl (= (or (= (op e4 e4) e4) (= (op e3 e3) e4) (= (op e2 e2) e4) (= (op e0 e0) e4) (= (op e1 e1) e4)) (or (= e4 (op e4 e4)) (= e4 (op e3 e3)) (= e4 (op e2 e2)) (= e4 (op e0 e0)) (= e4 (op e1 e1))))) :rule cong :premises (t471 t118 t650 t651 t652))
(step t654 (cl (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4)) (or (= e4 (op e4 e4)) (= e4 (op e3 e3)) (= e4 (op e2 e2)) (= e4 (op e0 e0)) (= e4 (op e1 e1))))) :rule trans :premises (t649 t653))
(step t655 (cl (= (= e4 (op e2 e2)) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t35 t43))
(step t656 (cl (= (= e4 (op e0 e0)) (= (op (op e0 e0) e0) (op e0 e0)))) :rule cong :premises (t35 t176))
(step t657 (cl (= (= e4 (op e1 e1)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t35 t166))
(step t658 (cl (= (or (= e4 (op e4 e4)) (= e4 (op e3 e3)) (= e4 (op e2 e2)) (= e4 (op e0 e0)) (= e4 (op e1 e1))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op e0 e0) e0) (op e0 e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t477 t150 t655 t656 t657))
(step t659 (cl (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule refl)
(step t660 (cl (= (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))))) :rule refl)
(step t661 (cl (= (= (op (op e0 e0) e0) (op e0 e0)) (= (op e0 e0) (op (op e0 e0) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op e0 e0) e0) (op e0 e0)))
(step t662 (cl (= (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule refl)
(step t663 (cl (= (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op e0 e0) e0) (op e0 e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t659 t188 t660 t661 t662))
(step t664 (cl (= (or (= e4 (op e4 e4)) (= e4 (op e3 e3)) (= e4 (op e2 e2)) (= e4 (op e0 e0)) (= e4 (op e1 e1))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t658 t663))
(step t665 (cl (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t654 t664))
(step t666 (cl (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4))) :rule and :premises (a2) :args (1))
(step t667 (cl (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t648 t665 t666))
(step t668 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule or :premises (t667))
(step t669 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))) :rule reordering :premises (t668))
(step t670 (cl (not (= (not (= (op e2 e0) (op e2 e2))) (not (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0)))))) (not (not (= (op e2 e0) (op e2 e2)))) (not (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))))) :rule equiv_pos2)
(step t671 (cl (= (= (op e2 e0) (op e2 e2)) (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))))) :rule cong :premises (t32 t43))
(step t672 (cl (= (not (= (op e2 e0) (op e2 e2))) (not (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0)))))) :rule cong :premises (t671))
(step t673 (cl (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3))))) :rule and :premises (t505) :args (0))
(step t674 (cl (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2))))) :rule and :premises (t673) :args (0))
(step t675 (cl (not (= (op e2 e0) (op e2 e2)))) :rule and :premises (t674) :args (1))
(step t676 (cl (not (= (op (op e0 e0) e0) (op (op e0 e0) (op e0 e0))))) :rule resolution :premises (t670 t672 t675))
(step t677 (cl (= (= (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) false) (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule equiv_simplify)
(step t678 (cl (not (= (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) false)) (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv1 :premises (t677))
(step t679 (cl (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op e0 e0) e0) e0))) :rule symm :premises (t468))
(step t680 (cl (= (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t518 t679))
(step t681 (cl (= (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) false)) :rule trans :premises (t680 t532))
(step t682 (cl (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t678 t681))
(step t683 (cl (= (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))) :rule resolution :premises (t669 t494 t259 t676 t682))
(step t684 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)) (op (op e0 e0) e0))) :rule symm :premises (t683))
(step t685 (cl (= (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op e0 e0) e0)))) :rule cong :premises (t176 t684))
(step t686 (cl (= (= (= (op e0 e0) (op (op e0 e0) e0)) false) (not (= (op e0 e0) (op (op e0 e0) e0))))) :rule equiv_simplify)
(step t687 (cl (= (= (op e0 e0) (op (op e0 e0) e0)) false) (not (not (= (op e0 e0) (op (op e0 e0) e0))))) :rule equiv2 :premises (t686))
(step t688 (cl (not (not (not (= (op e0 e0) (op (op e0 e0) e0))))) (= (op e0 e0) (op (op e0 e0) e0))) :rule not_not)
(step t689 (cl (= (= (op e0 e0) (op (op e0 e0) e0)) false) (= (op e0 e0) (op (op e0 e0) e0))) :rule resolution :premises (t687 t688))
(step t690 (cl (= (= (op e0 e0) (op (op e0 e0) e0)) false)) :rule resolution :premises (t689 t259))
(step t691 (cl (= (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) false)) :rule trans :premises (t685 t690))
(step t692 (cl (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t647 t691))
(step t693 (cl (= (= (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) false) (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))))) :rule equiv_simplify)
(step t694 (cl (not (= (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) false)) (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule equiv1 :premises (t693))
(step t695 (cl (not (= (= (op e3 e4) (op e4 e3)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) (not (= (op e3 e4) (op e4 e3))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule equiv_pos2)
(step t696 (cl (= (= (op e3 e4) (op e4 e3)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t47 t141))
(step t697 (cl (and (and (and (and (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (= (op e2 e3) (op e3 e2))) (= (op e3 e3) (op e3 e3))) (= (op e4 e3) (op e3 e4)))) :rule and :premises (t101) :args (1))
(step t698 (cl (= (op e4 e3) (op e3 e4))) :rule and :premises (t697) :args (1))
(step t699 (cl (= (op e3 e4) (op e4 e3))) :rule symm :premises (t698))
(step t700 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule resolution :premises (t695 t696 t699))
(step t701 (cl (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule trans :premises (t394 t700))
(step t702 (cl (= (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule symm :premises (t701))
(step t703 (cl (= (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule cong :premises (t176 t702))
(step t704 (cl (= (= (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false) (not (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule equiv_simplify)
(step t705 (cl (= (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false) (not (not (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule equiv2 :premises (t704))
(step t706 (cl (not (not (not (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule not_not)
(step t707 (cl (= (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule resolution :premises (t705 t706))
(step t708 (cl (not (= (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) (not (not (= (op e0 e0) (op e1 e0)))) (not (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule equiv_pos2)
(step t709 (cl (= (= (op e0 e0) (op e1 e0)) (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule cong :premises (t176 t168))
(step t710 (cl (= (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule cong :premises (t709))
(step t711 (cl (not (= (op e0 e0) (op e1 e0)))) :rule and :premises (t257) :args (0))
(step t712 (cl (not (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule resolution :premises (t708 t710 t711))
(step t713 (cl (= (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false)) :rule resolution :premises (t707 t712))
(step t714 (cl (= (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) false)) :rule trans :premises (t703 t713))
(step t715 (cl (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t694 t714))
(step t716 (cl (= (op e0 e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) e0)))) :rule resolution :premises (t557 t571 t645 t692 t715))
(step t717 (cl (not (= (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e1)) (= (op e2 e4) e2)) (= (op e3 e4) e3)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op e0 (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))))) (not (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e1)) (= (op e2 e4) e2)) (= (op e3 e4) e3)) (= (op e4 e4) e4))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op e0 (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t718 (cl (= (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e1)) (= (op e2 e4) e2)) (= (op e3 e4) e3)) (= (op e4 e4) e4)) (or (= (op e4 e4) e4) (= (op e3 e4) e3) (= (op e2 e4) e2) (= (op e0 e4) e0) (= (op e1 e4) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e1)) (= (op e2 e4) e2)) (= (op e3 e4) e3)) (= (op e4 e4) e4)) (or (= (op e4 e4) e4) (= (op e3 e4) e3) (= (op e2 e4) e2) (= (op e0 e4) e0) (= (op e1 e4) e1)))))
(step t719 (cl (= (= (op e3 e4) e3) (= e3 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e3))
(step t720 (cl (= (= (op e0 e4) e0) (= e0 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e0))
(step t721 (cl (= (= (op e1 e4) e1) (= e1 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e1))
(step t722 (cl (= (or (= (op e4 e4) e4) (= (op e3 e4) e3) (= (op e2 e4) e2) (= (op e0 e4) e0) (= (op e1 e4) e1)) (or (= e4 (op e4 e4)) (= e3 (op e3 e4)) (= e2 (op e2 e4)) (= e0 (op e0 e4)) (= e1 (op e1 e4))))) :rule cong :premises (t471 t719 t122 t720 t721))
(step t723 (cl (= (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e1)) (= (op e2 e4) e2)) (= (op e3 e4) e3)) (= (op e4 e4) e4)) (or (= e4 (op e4 e4)) (= e3 (op e3 e4)) (= e2 (op e2 e4)) (= e0 (op e0 e4)) (= e1 (op e1 e4))))) :rule trans :premises (t718 t722))
(step t724 (cl (= (= e3 (op e3 e4)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t40 t47))
(step t725 (cl (= (= e0 (op e0 e4)) (= e0 (op e0 (op (op e0 e0) e0))))) :rule cong :premises (t26 t170))
(step t726 (cl (= (= e1 (op e1 e4)) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))))) :rule cong :premises (t48 t161))
(step t727 (cl (= (or (= e4 (op e4 e4)) (= e3 (op e3 e4)) (= e2 (op e2 e4)) (= e0 (op e0 e4)) (= e1 (op e1 e4))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op e0 (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))))) :rule cong :premises (t477 t724 t157 t725 t726))
(step t728 (cl (= (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e1)) (= (op e2 e4) e2)) (= (op e3 e4) e3)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op e0 (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))))) :rule trans :premises (t723 t727))
(step t729 (cl (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e1)) (= (op e2 e4) e2)) (= (op e3 e4) e3)) (= (op e4 e4) e4))) :rule and :premises (a3) :args (1))
(step t730 (cl (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op e0 (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))))) :rule resolution :premises (t717 t728 t729))
(step t731 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op e0 (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))) :rule or :premises (t730))
(step t732 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= e0 (op e0 (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) :rule reordering :premises (t731))
(step t733 (cl (not (= (not (= (op e1 e4) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))))) (not (not (= (op e1 e4) (op e3 e4)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t734 (cl (= (= (op e1 e4) (op e3 e4)) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t161 t47))
(step t735 (cl (= (not (= (op e1 e4) (op e3 e4))) (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t734))
(step t736 (cl (= (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))
(step t737 (cl (= (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))))) :rule cong :premises (t736))
(step t738 (cl (= (not (= (op e1 e4) (op e3 e4))) (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0)))))) :rule trans :premises (t735 t737))
(step t739 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4))))) :rule and :premises (t430) :args (0))
(step t740 (cl (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4))))) :rule and :premises (t739) :args (0))
(step t741 (cl (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4))))) :rule and :premises (t740) :args (0))
(step t742 (cl (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4))))) :rule and :premises (t741) :args (0))
(step t743 (cl (not (= (op e1 e4) (op e3 e4)))) :rule and :premises (t742) :args (1))
(step t744 (cl (not (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op e0 e0) e0))))) :rule resolution :premises (t733 t738 t743))
(step t745 (cl (not (= (not (= e1 e3)) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) (not (not (= e1 e3))) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t746 (cl (= (= e1 e3) (= e3 e1))) :rule rare_rewrite :args ("eq-symm" e1 e3))
(step t747 (cl (= (not (= e1 e3)) (not (= e3 e1)))) :rule cong :premises (t746))
(step t748 (cl (= (= e3 e1) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t40 t48))
(step t749 (cl (= (not (= e3 e1)) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t748))
(step t750 (cl (= (not (= e1 e3)) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule trans :premises (t747 t749))
(step t751 (cl (not (= e1 e3))) :rule and :premises (t76) :args (1))
(step t752 (cl (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t745 t750 t751))
(step t753 (cl (= (= (= e0 (op e0 (op (op e0 e0) e0))) false) (not (= e0 (op e0 (op (op e0 e0) e0)))))) :rule equiv_simplify)
(step t754 (cl (not (= (= e0 (op e0 (op (op e0 e0) e0))) false)) (not (= e0 (op e0 (op (op e0 e0) e0))))) :rule equiv1 :premises (t753))
(step t755 (cl (not (= (= (op e2 e3) (op e3 e2)) (= (op (op (op (op e0 e0) e0) e0) (op e0 e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) (not (= (op e2 e3) (op e3 e2))) (= (op (op (op (op e0 e0) e0) e0) (op e0 e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule equiv_pos2)
(step t756 (cl (= (= (op e2 e3) (op e3 e2)) (= (op (op e0 e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op e0 e0))))) :rule cong :premises (t41 t151))
(step t757 (cl (= (= (op (op e0 e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op (op (op (op e0 e0) e0) e0) (op e0 e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op (op e0 e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op e0 e0))))
(step t758 (cl (= (= (op e2 e3) (op e3 e2)) (= (op (op (op (op e0 e0) e0) e0) (op e0 e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule trans :premises (t756 t757))
(step t759 (cl (and (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3))) (= (op e4 e2) (op e2 e4)))) :rule and :premises (t102) :args (1))
(step t760 (cl (and (and (and (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (= (op e2 e2) (op e2 e2))) (= (op e3 e2) (op e2 e3)))) :rule and :premises (t759) :args (0))
(step t761 (cl (= (op e3 e2) (op e2 e3))) :rule and :premises (t760) :args (1))
(step t762 (cl (= (op e2 e3) (op e3 e2))) :rule symm :premises (t761))
(step t763 (cl (= (op (op (op (op e0 e0) e0) e0) (op e0 e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule resolution :premises (t755 t758 t762))
(step t764 (cl (= (op (op e0 e0) (op (op (op e0 e0) e0) e0)) (op (op (op (op e0 e0) e0) e0) (op e0 e0)))) :rule symm :premises (t763))
(step t765 (cl (= (op e0 (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op e0 e0)))) :rule trans :premises (t526 t636 t764))
(step t766 (cl (= (op (op (op (op e0 e0) e0) e0) (op e0 e0)) (op e0 (op (op e0 e0) e0)))) :rule symm :premises (t765))
(step t767 (cl (= (op (op e0 e0) (op (op (op e0 e0) e0) e0)) (op e0 (op (op e0 e0) e0)))) :rule trans :premises (t764 t766))
(step t768 (cl (= (op e0 (op (op e0 e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule symm :premises (t767))
(step t769 (cl (= (= e0 (op e0 (op (op e0 e0) e0))) (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t342 t768))
(step t770 (cl (= (= (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) false) (not (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))))) :rule equiv_simplify)
(step t771 (cl (= (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) false) (not (not (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))))) :rule equiv2 :premises (t770))
(step t772 (cl (not (not (not (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))))) (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule not_not)
(step t773 (cl (= (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) false) (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule resolution :premises (t771 t772))
(step t774 (cl (not (= (not (= (op e0 e3) (op e2 e3))) (not (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))))) (not (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule equiv_pos2)
(step t775 (cl (= (= (op e0 e3) (op e2 e3)) (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t172 t41))
(step t776 (cl (= (not (= (op e0 e3) (op e2 e3))) (not (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))))) :rule cong :premises (t775))
(step t777 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) :rule and :premises (t246) :args (1))
(step t778 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3))))) :rule and :premises (t777) :args (0))
(step t779 (cl (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3))))) :rule and :premises (t778) :args (0))
(step t780 (cl (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3))))) :rule and :premises (t779) :args (0))
(step t781 (cl (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3))))) :rule and :premises (t780) :args (0))
(step t782 (cl (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3))))) :rule and :premises (t781) :args (0))
(step t783 (cl (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3))))) :rule and :premises (t782) :args (0))
(step t784 (cl (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3))))) :rule and :premises (t783) :args (0))
(step t785 (cl (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3))))) :rule and :premises (t784) :args (0))
(step t786 (cl (not (= (op e0 e3) (op e2 e3)))) :rule and :premises (t785) :args (1))
(step t787 (cl (not (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t774 t776 t786))
(step t788 (cl (= (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))) false)) :rule resolution :premises (t773 t787))
(step t789 (cl (= (= e0 (op e0 (op (op e0 e0) e0))) false)) :rule trans :premises (t769 t788))
(step t790 (cl (not (= e0 (op e0 (op (op e0 e0) e0))))) :rule resolution :premises (t754 t789))
(step t791 (cl (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) :rule resolution :premises (t732 t494 t744 t752 t790))
(step t792 (cl (not (= (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (not (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2))) (or (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv_pos2)
(step t793 (cl (= (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (= (op e3 e4) e2) (= (op e3 e3) e2) (= (op e3 e2) e2) (= (op e3 e0) e2) (= (op e3 e1) e2)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (= (op e3 e4) e2) (= (op e3 e3) e2) (= (op e3 e2) e2) (= (op e3 e0) e2) (= (op e3 e1) e2)))))
(step t794 (cl (= (= (op e3 e4) e2) (= e2 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e2))
(step t795 (cl (= (= (op e3 e2) e2) (= e2 (op e3 e2)))) :rule rare_rewrite :args ("eq-symm" (op e3 e2) e2))
(step t796 (cl (= (or (= (op e3 e4) e2) (= (op e3 e3) e2) (= (op e3 e2) e2) (= (op e3 e0) e2) (= (op e3 e1) e2)) (or (= e2 (op e3 e4)) (= e2 (op e3 e3)) (= e2 (op e3 e2)) (= e2 (op e3 e0)) (= e2 (op e3 e1))))) :rule cong :premises (t794 t539 t795 t289 t120))
(step t797 (cl (= (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (= e2 (op e3 e4)) (= e2 (op e3 e3)) (= e2 (op e3 e2)) (= e2 (op e3 e0)) (= e2 (op e3 e1))))) :rule trans :premises (t793 t796))
(step t798 (cl (= (= e2 (op e3 e4)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t29 t47))
(step t799 (cl (= (= e2 (op e3 e2)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))))) :rule cong :premises (t29 t151))
(step t800 (cl (= (or (= e2 (op e3 e4)) (= e2 (op e3 e3)) (= e2 (op e3 e2)) (= e2 (op e3 e0)) (= e2 (op e3 e1))) (or (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t798 t545 t799 t294 t154))
(step t801 (cl (= (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t797 t800))
(step t802 (cl (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2))) :rule and :premises (t553) :args (0))
(step t803 (cl (or (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t792 t801 t802))
(step t804 (cl (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule or :premises (t803))
(step t805 (cl (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0)))) :rule reordering :premises (t804))
(step t806 (cl (= (= (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) false) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0)))))) :rule equiv_simplify)
(step t807 (cl (not (= (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) false)) (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))))) :rule equiv1 :premises (t806))
(step t808 (cl (= (op (op (op (op e0 e0) e0) e0) (op e0 e0)) (op (op (op e0 e0) e0) e0))) :rule trans :premises (t763 t637))
(step t809 (cl (= (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule cong :premises (t176 t808))
(step t810 (cl (= (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) false)) :rule trans :premises (t809 t643))
(step t811 (cl (not (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))))) :rule resolution :premises (t807 t810))
(step t812 (cl (= (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t805 t311 t448 t811 t692))
(step t813 (cl (not (= (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (not (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3))) (or (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv_pos2)
(step t814 (cl (= (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (= (op e3 e4) e3) (= (op e3 e3) e3) (= (op e3 e2) e3) (= (op e3 e0) e3) (= (op e3 e1) e3)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (= (op e3 e4) e3) (= (op e3 e3) e3) (= (op e3 e2) e3) (= (op e3 e0) e3) (= (op e3 e1) e3)))))
(step t815 (cl (= (= (op e3 e1) e3) (= e3 (op e3 e1)))) :rule rare_rewrite :args ("eq-symm" (op e3 e1) e3))
(step t816 (cl (= (or (= (op e3 e4) e3) (= (op e3 e3) e3) (= (op e3 e2) e3) (= (op e3 e0) e3) (= (op e3 e1) e3)) (or (= e3 (op e3 e4)) (= e3 (op e3 e3)) (= e3 (op e3 e2)) (= e3 (op e3 e0)) (= e3 (op e3 e1))))) :rule cong :premises (t719 t346 t119 t219 t815))
(step t817 (cl (= (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (= e3 (op e3 e4)) (= e3 (op e3 e3)) (= e3 (op e3 e2)) (= e3 (op e3 e0)) (= e3 (op e3 e1))))) :rule trans :premises (t814 t816))
(step t818 (cl (= (= e3 (op e3 e1)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t40 t153))
(step t819 (cl (= (or (= e3 (op e3 e4)) (= e3 (op e3 e3)) (= e3 (op e3 e2)) (= e3 (op e3 e0)) (= e3 (op e3 e1))) (or (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t724 t352 t152 t225 t818))
(step t820 (cl (= (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t817 t819))
(step t821 (cl (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3))) :rule and :premises (t586) :args (0))
(step t822 (cl (or (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t813 t820 t821))
(step t823 (cl (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule or :premises (t822))
(step t824 (cl (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) e0)) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0)))) :rule reordering :premises (t823))
(step t825 (cl (= (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) false) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule equiv_simplify)
(step t826 (cl (not (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) false)) (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv1 :premises (t825))
(step t827 (cl (= (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule refl)
(step t828 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t468 t827))
(step t829 (cl (= (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) false)) :rule trans :premises (t828 t633))
(step t830 (cl (not (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t826 t829))
(step t831 (cl (= (op (op (op e0 e0) e0) e0) (op (op (op (op e0 e0) e0) e0) (op e0 e0)))) :rule resolution :premises (t824 t373 t272 t752 t830))
(step t832 (cl (not (= (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) (not (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule equiv_pos2)
(step t833 (cl (= (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (= (op e4 e4) e4) (= (op e4 e3) e4) (= (op e4 e2) e4) (= (op e4 e0) e4) (= (op e4 e1) e4)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (= (op e4 e4) e4) (= (op e4 e3) e4) (= (op e4 e2) e4) (= (op e4 e0) e4) (= (op e4 e1) e4)))))
(step t834 (cl (= (= (op e4 e3) e4) (= e4 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e4))
(step t835 (cl (= (= (op e4 e2) e4) (= e4 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e4))
(step t836 (cl (= (or (= (op e4 e4) e4) (= (op e4 e3) e4) (= (op e4 e2) e4) (= (op e4 e0) e4) (= (op e4 e1) e4)) (or (= e4 (op e4 e4)) (= e4 (op e4 e3)) (= e4 (op e4 e2)) (= e4 (op e4 e0)) (= e4 (op e4 e1))))) :rule cong :premises (t471 t834 t835 t218 t115))
(step t837 (cl (= (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (= e4 (op e4 e4)) (= e4 (op e4 e3)) (= e4 (op e4 e2)) (= e4 (op e4 e0)) (= e4 (op e4 e1))))) :rule trans :premises (t833 t836))
(step t838 (cl (= (= e4 (op e4 e3)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t35 t141))
(step t839 (cl (= (= e4 (op e4 e2)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))))) :rule cong :premises (t35 t143))
(step t840 (cl (= (or (= e4 (op e4 e4)) (= e4 (op e4 e3)) (= e4 (op e4 e2)) (= e4 (op e4 e0)) (= e4 (op e4 e1))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule cong :premises (t477 t838 t839 t224 t146))
(step t841 (cl (= (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))))) :rule trans :premises (t837 t840))
(step t842 (cl (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4))) :rule and :premises (t484) :args (0))
(step t843 (cl (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t832 t841 t842))
(step t844 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule or :premises (t843))
(step t845 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))) :rule reordering :premises (t844))
(step t846 (cl (= (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) false) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0)))))) :rule equiv_simplify)
(step t847 (cl (not (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) false)) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))))) :rule equiv1 :premises (t846))
(step t848 (cl (not (= (= (op e0 e2) (op e2 e0)) (= (op (op e0 e0) e0) (op e0 (op e0 e0))))) (not (= (op e0 e2) (op e2 e0))) (= (op (op e0 e0) e0) (op e0 (op e0 e0)))) :rule equiv_pos2)
(step t849 (cl (= (= (op e0 e2) (op e2 e0)) (= (op e0 (op e0 e0)) (op (op e0 e0) e0)))) :rule cong :premises (t174 t32))
(step t850 (cl (= (= (op e0 (op e0 e0)) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op e0 (op e0 e0))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op e0 e0)) (op (op e0 e0) e0)))
(step t851 (cl (= (= (op e0 e2) (op e2 e0)) (= (op (op e0 e0) e0) (op e0 (op e0 e0))))) :rule trans :premises (t849 t850))
(step t852 (cl (= (op e2 e0) (op e0 e2))) :rule and :premises (t280) :args (1))
(step t853 (cl (= (op e0 e2) (op e2 e0))) :rule symm :premises (t852))
(step t854 (cl (= (op (op e0 e0) e0) (op e0 (op e0 e0)))) :rule resolution :premises (t848 t851 t853))
(step t855 (cl (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule refl)
(step t856 (cl (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0))))) :rule cong :premises (t854 t855))
(step t857 (cl (= (= (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0))) false) (not (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0)))))) :rule equiv_simplify)
(step t858 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0))) false) (not (not (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0)))))) :rule equiv2 :premises (t857))
(step t859 (cl (not (not (not (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0)))))) (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule not_not)
(step t860 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0))) false) (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule resolution :premises (t858 t859))
(step t861 (cl (not (= (not (= (op e0 e2) (op e4 e2))) (not (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0)))))) (not (not (= (op e0 e2) (op e4 e2)))) (not (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0))))) :rule equiv_pos2)
(step t862 (cl (= (= (op e0 e2) (op e4 e2)) (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0))))) :rule cong :premises (t174 t143))
(step t863 (cl (= (not (= (op e0 e2) (op e4 e2))) (not (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0)))))) :rule cong :premises (t862))
(step t864 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) :rule and :premises (t247) :args (1))
(step t865 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2))))) :rule and :premises (t864) :args (0))
(step t866 (cl (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2))))) :rule and :premises (t865) :args (0))
(step t867 (cl (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2))))) :rule and :premises (t866) :args (0))
(step t868 (cl (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2))))) :rule and :premises (t867) :args (0))
(step t869 (cl (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2))))) :rule and :premises (t868) :args (0))
(step t870 (cl (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2))))) :rule and :premises (t869) :args (0))
(step t871 (cl (not (= (op e0 e2) (op e4 e2)))) :rule and :premises (t870) :args (1))
(step t872 (cl (not (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0))))) :rule resolution :premises (t861 t863 t871))
(step t873 (cl (= (= (op e0 (op e0 e0)) (op (op (op e0 e0) e0) (op e0 e0))) false)) :rule resolution :premises (t860 t872))
(step t874 (cl (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))) false)) :rule trans :premises (t856 t873))
(step t875 (cl (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op e0 e0))))) :rule resolution :premises (t847 t874))
(step t876 (cl (= (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) false) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0)))))) :rule equiv_simplify)
(step t877 (cl (not (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) false)) (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule equiv1 :premises (t876))
(step t878 (cl (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule cong :premises (t518 t702))
(step t879 (cl (= (= (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false) (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule equiv_simplify)
(step t880 (cl (= (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false) (not (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule equiv2 :premises (t879))
(step t881 (cl (not (not (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule not_not)
(step t882 (cl (= (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))) :rule resolution :premises (t880 t881))
(step t883 (cl (not (= (not (= (op e1 e0) (op e2 e0))) (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) (not (not (= (op e1 e0) (op e2 e0)))) (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule equiv_pos2)
(step t884 (cl (= (= (op e1 e0) (op e2 e0)) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op e0 e0) e0)))) :rule cong :premises (t168 t32))
(step t885 (cl (= (not (= (op e1 e0) (op e2 e0))) (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op e0 e0) e0))))) :rule cong :premises (t884))
(step t886 (cl (= (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op e0 e0) e0)) (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op e0 e0) e0)))
(step t887 (cl (= (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op e0 e0) e0))) (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule cong :premises (t886))
(step t888 (cl (= (not (= (op e1 e0) (op e2 e0))) (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0))))) :rule trans :premises (t885 t887))
(step t889 (cl (not (= (op e1 e0) (op e2 e0)))) :rule and :premises (t254) :args (1))
(step t890 (cl (not (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)))) :rule resolution :premises (t883 t888 t889))
(step t891 (cl (= (= (op (op e0 e0) e0) (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0)) false)) :rule resolution :premises (t882 t890))
(step t892 (cl (= (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))) false)) :rule trans :premises (t878 t891))
(step t893 (cl (not (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t877 t892))
(step t894 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t845 t494 t264 t875 t893))
(step t895 (cl (not (= (= (op e2 e4) (op e4 e2)) (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))))) (not (= (op e2 e4) (op e4 e2))) (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0)))) :rule equiv_pos2)
(step t896 (cl (= (= (op e2 e4) (op e4 e2)) (= (op (op e0 e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))))) :rule cong :premises (t36 t143))
(step t897 (cl (= (= (op (op e0 e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))) (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))))) :rule rare_rewrite :args ("eq-symm" (op (op e0 e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))))
(step t898 (cl (= (= (op e2 e4) (op e4 e2)) (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))))) :rule trans :premises (t896 t897))
(step t899 (cl (= (op e4 e2) (op e2 e4))) :rule and :premises (t759) :args (1))
(step t900 (cl (= (op e2 e4) (op e4 e2))) :rule symm :premises (t899))
(step t901 (cl (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0)))) :rule resolution :premises (t895 t898 t900))
(step t902 (cl (= (op (op e0 e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule symm :premises (t901))
(step t903 (cl (= (op e0 e0) (op (op (op e0 e0) e0) (op e0 e0)))) :rule trans :premises (t791 t902))
(step t904 (cl (not (= (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) (not (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule equiv_pos2)
(step t905 (cl (= (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)) (or (= (op e4 e4) e4) (= (op e4 e4) e3) (= (op e4 e4) e2) (= (op e4 e4) e0) (= (op e4 e4) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)) (or (= (op e4 e4) e4) (= (op e4 e4) e3) (= (op e4 e4) e2) (= (op e4 e4) e0) (= (op e4 e4) e1)))))
(step t906 (cl (= (= (op e4 e4) e2) (= e2 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e2))
(step t907 (cl (= (or (= (op e4 e4) e4) (= (op e4 e4) e3) (= (op e4 e4) e2) (= (op e4 e4) e0) (= (op e4 e4) e1)) (or (= e4 (op e4 e4)) (= e3 (op e4 e4)) (= e2 (op e4 e4)) (= e0 (op e4 e4)) (= e1 (op e4 e4))))) :rule cong :premises (t471 t345 t906 t112 t397))
(step t908 (cl (= (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)) (or (= e4 (op e4 e4)) (= e3 (op e4 e4)) (= e2 (op e4 e4)) (= e0 (op e4 e4)) (= e1 (op e4 e4))))) :rule trans :premises (t905 t907))
(step t909 (cl (= (= e2 (op e4 e4)) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t29 t139))
(step t910 (cl (= (or (= e4 (op e4 e4)) (= e3 (op e4 e4)) (= e2 (op e4 e4)) (= e0 (op e4 e4)) (= e1 (op e4 e4))) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t477 t351 t909 t140 t403))
(step t911 (cl (= (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)) (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) :rule trans :premises (t908 t910))
(step t912 (cl (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e0) e1)) (= (op e4 e0) e2)) (= (op e4 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e4 e1) e0) (= (op e4 e1) e1)) (= (op e4 e1) e2)) (= (op e4 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e4 e2) e0) (= (op e4 e2) e1)) (= (op e4 e2) e2)) (= (op e4 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4))) (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)))) :rule and :premises (a0) :args (1))
(step t913 (cl (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4))) :rule and :premises (t912) :args (1))
(step t914 (cl (or (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t904 t911 t913))
(step t915 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) :rule or :premises (t914))
(step t916 (cl (= (op (op e0 e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) :rule reordering :premises (t915))
(step t917 (cl (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (not (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule and_neg)
(step t918 (cl (=> (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule implies_neg1)
(anchor :step t919)
(assume t919.a0 (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))))
(assume t919.a1 (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))))
(assume t919.a2 (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))
(step t919.t0 (cl (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op e0 e0))) :rule symm :premises (t919.a2))
(step t919.t1 (cl (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule trans :premises (t919.t0 t791 t902))
(step t919 (cl (not (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule subproof :discharge (t919.a0 t919.a1 t919.a2))
(step t920 (cl (not (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0)))) :rule and_pos :args (0))
(step t921 (cl (not (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) :rule and_pos :args (1))
(step t922 (cl (not (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) :rule and_pos :args (2))
(step t923 (cl (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))) (not (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) (not (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) (not (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t919 t920 t921 t922))
(step t924 (cl (not (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) (not (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) (not (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule reordering :premises (t923))
(step t925 (cl (not (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule contraction :premises (t924))
(step t926 (cl (=> (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule resolution :premises (t918 t925))
(step t927 (cl (=> (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) (not (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))))) :rule implies_neg2)
(step t928 (cl (=> (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) (=> (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))))) :rule resolution :premises (t926 t927))
(step t929 (cl (=> (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))))) :rule contraction :premises (t928))
(step t930 (cl (not (and (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0))) (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule implies :premises (t929))
(step t931 (cl (not (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))) :rule resolution :premises (t917 t930))
(step t932 (cl (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))) (not (= (op e0 e0) (op (op e0 e0) (op (op e0 e0) e0)))) (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (not (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op e0 e0) (op (op e0 e0) e0))))) :rule reordering :premises (t931))
(step t933 (cl (not (= (not (= (op e4 e2) (op e4 e4))) (not (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))))) (not (not (= (op e4 e2) (op e4 e4)))) (not (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))))) :rule equiv_pos2)
(step t934 (cl (= (= (op e4 e2) (op e4 e4)) (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule cong :premises (t143 t139))
(step t935 (cl (= (not (= (op e4 e2) (op e4 e4))) (not (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))))) :rule cong :premises (t934))
(step t936 (cl (= (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))) (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))))) :rule rare_rewrite :args ("eq-symm" (op (op (op e0 e0) e0) (op e0 e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))
(step t937 (cl (= (not (= (op (op (op e0 e0) e0) (op e0 e0)) (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) (not (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))))) :rule cong :premises (t936))
(step t938 (cl (= (not (= (op e4 e2) (op e4 e4))) (not (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0)))))) :rule trans :premises (t935 t937))
(step t939 (cl (not (= (op e4 e2) (op e4 e4)))) :rule and :premises (t383) :args (1))
(step t940 (cl (not (= (op (op (op e0 e0) e0) (op (op e0 e0) e0)) (op (op (op e0 e0) e0) (op e0 e0))))) :rule resolution :premises (t933 t938 t939))
(step t941 (cl (not (= (op e0 e0) (op (op (op e0 e0) e0) (op (op e0 e0) e0))))) :rule resolution :premises (t932 t940 t791 t901))
(step t942 (cl (= e0 (op (op (op e0 e0) e0) (op (op e0 e0) e0)))) :rule resolution :premises (t916 t494 t432 t390 t941))
(step t943 (cl (not (= e0 (op (op e0 e0) (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)))))) :rule resolution :premises (t95 t109 t215 t285 t342 t468 t535 t716 t636 t791 t812 t831 t683 t894 t903 t942 t449 t334 t273 t700 t525 t854))
(step t944 (cl (= (= (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) false) (not (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0)))))) :rule equiv_simplify)
(step t945 (cl (not (= (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) false)) (not (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule equiv1 :premises (t944))
(step t946 (cl (= (op (op e0 e0) (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0)))) :rule refl)
(step t947 (cl (= (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) (= (op e0 (op (op (op e0 e0) e0) e0)) (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule cong :premises (t342 t946))
(step t948 (cl (= (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))) false)) :rule trans :premises (t947 t788))
(step t949 (cl (not (= e0 (op (op e0 e0) (op (op (op e0 e0) e0) e0))))) :rule resolution :premises (t945 t948))
(step t950 (cl (= (= (= e0 (op (op e0 e0) (op (op e0 e0) e0))) false) (not (= e0 (op (op e0 e0) (op (op e0 e0) e0)))))) :rule equiv_simplify)
(step t951 (cl (not (= (= e0 (op (op e0 e0) (op (op e0 e0) e0))) false)) (not (= e0 (op (op e0 e0) (op (op e0 e0) e0))))) :rule equiv1 :premises (t950))
(step t952 (cl (= (op (op e0 e0) (op (op e0 e0) e0)) (op e0 e0))) :rule symm :premises (t791))
(step t953 (cl (= (= e0 (op (op e0 e0) (op (op e0 e0) e0))) (= e0 (op e0 e0)))) :rule cong :premises (t26 t952))
(step t954 (cl (= (= (= e0 (op e0 e0)) false) (not (= e0 (op e0 e0))))) :rule equiv_simplify)
(step t955 (cl (= (= e0 (op e0 e0)) false) (not (not (= e0 (op e0 e0))))) :rule equiv2 :premises (t954))
(step t956 (cl (not (not (not (= e0 (op e0 e0))))) (= e0 (op e0 e0))) :rule not_not)
(step t957 (cl (= (= e0 (op e0 e0)) false) (= e0 (op e0 e0))) :rule resolution :premises (t955 t956))
(step t958 (cl (= (= e0 (op e0 e0)) false)) :rule resolution :premises (t957 t241))
(step t959 (cl (= (= e0 (op (op e0 e0) (op (op e0 e0) e0))) false)) :rule trans :premises (t953 t958))
(step t960 (cl (not (= e0 (op (op e0 e0) (op (op e0 e0) e0))))) :rule resolution :premises (t951 t959))
(step t961 (cl (= e0 (op (op e0 e0) (op e0 e0)))) :rule resolution :premises (t63 t80 t943 t949 t960))
(step t962 (cl (not (= (not (= (op e1 e0) (op e3 e0))) (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))))) (not (not (= (op e1 e0) (op e3 e0)))) (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule equiv_pos2)
(step t963 (cl (= (= (op e1 e0) (op e3 e0)) (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule cong :premises (t168 t155))
(step t964 (cl (= (not (= (op e1 e0) (op e3 e0))) (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0))))) :rule cong :premises (t963))
(step t965 (cl (not (= (op e1 e0) (op e3 e0)))) :rule and :premises (t253) :args (1))
(step t966 (cl (not (= (op (op (op (op (op e0 e0) e0) e0) (op (op e0 e0) e0)) e0) (op (op (op (op e0 e0) e0) e0) e0)))) :rule resolution :premises (t962 t964 t965))
(step t967 (cl) :rule resolution :premises (t16 t961 t449 t334 t273 t966))
