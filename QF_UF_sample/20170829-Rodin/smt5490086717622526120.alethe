unsat
(assume a0 circuit)
(assume a1 (=> grn (and (not org) (not rd1) (not rd2))))
(assume a2 (=> rd1 (not rd2)))
(assume a3 (= grn_MR grn))
(assume a4 (= org_MR org))
(assume a5 (= grn_SR rd1))
(assume a6 (= org_SR rd2))
(assume a7 (or grn rd1))
(assume a8 (= red_MR rd1))
(assume a9 (= red_SR grn))
(assume a10 (not (or (and prt grn) org (and (not prt) rd1) rd2 (and grn (not prt)) (and rd1 prt))))
(step t0 (cl (not (= (or (not red_SR) (not (not prt))) (or (not red_SR) prt))) (not (or (not red_SR) (not (not prt)))) (or (not red_SR) prt)) :rule equiv_pos2)
(step t1 (cl (= (not red_SR) (not red_SR))) :rule refl)
(step t2 (cl (= (= (= (not (not prt)) prt) true) (= (not (not prt)) prt))) :rule equiv_simplify)
(step t3 (cl (not (= (= (not (not prt)) prt) true)) (= (not (not prt)) prt)) :rule equiv1 :premises (t2))
(step t4 (cl (= (= (not (not prt)) prt) (= prt (not (not prt))))) :rule rare_rewrite :args ("eq-symm" (not (not prt)) prt))
(step t5 (cl (= prt prt)) :rule refl)
(step t6 (cl (= (not (not prt)) prt)) :rule rare_rewrite :args ("bool-double-not-elim" prt))
(step t7 (cl (= (= prt (not (not prt))) (= prt prt))) :rule cong :premises (t5 t6))
(step t8 (cl (= (= prt prt) true)) :rule rare_rewrite :args ("eq-refl" prt))
(step t9 (cl (= (= prt (not (not prt))) true)) :rule trans :premises (t7 t8))
(step t10 (cl (= (= (not (not prt)) prt) true)) :rule trans :premises (t4 t9))
(step t11 (cl (= (not (not prt)) prt)) :rule resolution :premises (t3 t10))
(step t12 (cl (= (or (not red_SR) (not (not prt))) (or (not red_SR) prt))) :rule cong :premises (t1 t11))
(step t13 (cl (not (= (not (or (and prt grn) org (and (not prt) rd1) rd2 (and grn (not prt)) (and rd1 prt))) (not (or (and prt red_SR) (and (not prt) red_MR) (and red_SR (not prt)) (and red_MR prt))))) (not (not (or (and prt grn) org (and (not prt) rd1) rd2 (and grn (not prt)) (and rd1 prt)))) (not (or (and prt red_SR) (and (not prt) red_MR) (and red_SR (not prt)) (and red_MR prt)))) :rule equiv_pos2)
(step t14 (cl (= grn red_SR)) :rule symm :premises (a9))
(step t15 (cl (= (and prt grn) (and prt red_SR))) :rule cong :premises (t5 t14))
(step t16 (cl (= org org_MR)) :rule symm :premises (a4))
(step t17 (cl (not (= (not org_MR) (= org_MR false))) (not (not org_MR)) (= org_MR false)) :rule equiv_pos2)
(step t18 (cl (= (= org_MR false) (not org_MR))) :rule rare_rewrite :args ("bool-eq-false" org_MR))
(step t19 (cl (= (not org_MR) (= org_MR false))) :rule symm :premises (t18))
(step t20 (cl org (not org_MR)) :rule equiv2 :premises (t16))
(step t21 (cl (not org)) :rule not_or :premises (a10) :args (1))
(step t22 (cl (not org_MR)) :rule resolution :premises (t20 t21))
(step t23 (cl (= org_MR false)) :rule resolution :premises (t17 t19 t22))
(step t24 (cl (= org false)) :rule trans :premises (t16 t23))
(step t25 (cl (= (not prt) (not prt))) :rule refl)
(step t26 (cl (= rd1 red_MR)) :rule symm :premises (a8))
(step t27 (cl (= (and (not prt) rd1) (and (not prt) red_MR))) :rule cong :premises (t25 t26))
(step t28 (cl (not (= (not rd2) (= rd2 false))) (not (not rd2)) (= rd2 false)) :rule equiv_pos2)
(step t29 (cl (= (= rd2 false) (not rd2))) :rule rare_rewrite :args ("bool-eq-false" rd2))
(step t30 (cl (= (not rd2) (= rd2 false))) :rule symm :premises (t29))
(step t31 (cl (not rd2)) :rule not_or :premises (a10) :args (3))
(step t32 (cl (= rd2 false)) :rule resolution :premises (t28 t30 t31))
(step t33 (cl (= (and grn (not prt)) (and red_SR (not prt)))) :rule cong :premises (t14 t25))
(step t34 (cl (= (and rd1 prt) (and red_MR prt))) :rule cong :premises (t26 t5))
(step t35 (cl (= (or (and prt grn) org (and (not prt) rd1) rd2 (and grn (not prt)) (and rd1 prt)) (or (and prt red_SR) false (and (not prt) red_MR) false (and red_SR (not prt)) (and red_MR prt)))) :rule cong :premises (t15 t24 t27 t32 t33 t34))
(step t36 (cl (= (not (or (and prt grn) org (and (not prt) rd1) rd2 (and grn (not prt)) (and rd1 prt))) (not (or (and prt red_SR) false (and (not prt) red_MR) false (and red_SR (not prt)) (and red_MR prt))))) :rule cong :premises (t35))
(step t37 (cl (= (or (and prt red_SR) false (and (not prt) red_MR) false (and red_SR (not prt)) (and red_MR prt)) (or (and prt red_SR) (and (not prt) red_MR) (and red_SR (not prt)) (and red_MR prt)))) :rule hole :args ("ACI_NORM" (= (or (and prt red_SR) false (and (not prt) red_MR) false (and red_SR (not prt)) (and red_MR prt)) (or (and prt red_SR) (and (not prt) red_MR) (and red_SR (not prt)) (and red_MR prt)))))
(step t38 (cl (= (not (or (and prt red_SR) false (and (not prt) red_MR) false (and red_SR (not prt)) (and red_MR prt))) (not (or (and prt red_SR) (and (not prt) red_MR) (and red_SR (not prt)) (and red_MR prt))))) :rule cong :premises (t37))
(step t39 (cl (= (not (or (and prt grn) org (and (not prt) rd1) rd2 (and grn (not prt)) (and rd1 prt))) (not (or (and prt red_SR) (and (not prt) red_MR) (and red_SR (not prt)) (and red_MR prt))))) :rule trans :premises (t36 t38))
(step t40 (cl (not (or (and prt red_SR) (and (not prt) red_MR) (and red_SR (not prt)) (and red_MR prt)))) :rule resolution :premises (t13 t39 a10))
(step t41 (cl (not (and red_SR (not prt)))) :rule not_or :premises (t40) :args (2))
(step t42 (cl (not red_SR) (not (not prt))) :rule not_and :premises (t41))
(step t43 (cl (or (not red_SR) (not (not prt))) (not (not red_SR))) :rule or_neg :args (0))
(step t44 (cl (or (not red_SR) (not (not prt))) (not (not (not prt)))) :rule or_neg :args (1))
(step t45 (cl (or (not red_SR) (not (not prt))) (or (not red_SR) (not (not prt)))) :rule resolution :premises (t42 t43 t44))
(step t46 (cl (or (not red_SR) (not (not prt)))) :rule contraction :premises (t45))
(step t47 (cl (or (not red_SR) prt)) :rule resolution :premises (t0 t12 t46))
(step t48 (cl (not red_SR) prt) :rule or :premises (t47))
(step t49 (cl prt (not red_SR)) :rule reordering :premises (t48))
(step t50 (cl (not (and prt red_SR))) :rule not_or :premises (t40) :args (0))
(step t51 (cl (not prt) (not red_SR)) :rule not_and :premises (t50))
(step t52 (cl (not (= (or grn rd1) (or red_SR red_MR))) (not (or grn rd1)) (or red_SR red_MR)) :rule equiv_pos2)
(step t53 (cl (= (or grn rd1) (or red_SR red_MR))) :rule cong :premises (t14 t26))
(step t54 (cl (or red_SR red_MR)) :rule resolution :premises (t52 t53 a7))
(step t55 (cl red_SR red_MR) :rule or :premises (t54))
(step t56 (cl red_MR red_SR) :rule reordering :premises (t55))
(step t57 (cl (not (and red_MR prt))) :rule not_or :premises (t40) :args (3))
(step t58 (cl (not red_MR) (not prt)) :rule not_and :premises (t57))
(step t59 (cl (not prt) (not red_MR)) :rule reordering :premises (t58))
(step t60 (cl (not (= (or (not (not prt)) (not red_MR)) (or prt (not red_MR)))) (not (or (not (not prt)) (not red_MR))) (or prt (not red_MR))) :rule equiv_pos2)
(step t61 (cl (= (not red_MR) (not red_MR))) :rule refl)
(step t62 (cl (= (or (not (not prt)) (not red_MR)) (or prt (not red_MR)))) :rule cong :premises (t11 t61))
(step t63 (cl (not (and (not prt) red_MR))) :rule not_or :premises (t40) :args (1))
(step t64 (cl (not (not prt)) (not red_MR)) :rule not_and :premises (t63))
(step t65 (cl (or (not (not prt)) (not red_MR)) (not (not (not prt)))) :rule or_neg :args (0))
(step t66 (cl (or (not (not prt)) (not red_MR)) (not (not red_MR))) :rule or_neg :args (1))
(step t67 (cl (or (not (not prt)) (not red_MR)) (or (not (not prt)) (not red_MR))) :rule resolution :premises (t64 t65 t66))
(step t68 (cl (or (not (not prt)) (not red_MR))) :rule contraction :premises (t67))
(step t69 (cl (or prt (not red_MR))) :rule resolution :premises (t60 t62 t68))
(step t70 (cl prt (not red_MR)) :rule or :premises (t69))
(step t71 (cl (not red_MR)) :rule resolution :premises (t59 t70))
(step t72 (cl red_SR) :rule resolution :premises (t56 t71))
(step t73 (cl (not prt)) :rule resolution :premises (t51 t72))
(step t74 (cl) :rule resolution :premises (t49 t73 t72))
