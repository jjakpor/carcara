unsat
(assume a0 (and (distinct c_0 c_1) (or (not (p10 c_0 c_0)) (not (p9 c_0)) (not (= c_0 (f16 c_0 c_0 c_0))) (= c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p9 c_0))) (or (not (p10 c_0 c_0)) (not (p9 c_0)) (not (= c_0 (f16 c_1 c_0 c_0))) (= c_1 c_0) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p9 c_1))) (or (not (p10 c_0 c_1)) (not (p9 c_1)) (not (= c_0 (f16 c_0 c_1 c_0))) (= c_0 c_1) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p9 c_0))) (or (not (p10 c_0 c_1)) (not (p9 c_1)) (not (= c_0 (f16 c_1 c_1 c_0))) (= c_1 c_1) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p9 c_1))) (or (not (p10 c_1 c_0)) (not (p9 c_0)) (not (= c_1 (f16 c_0 c_0 c_1))) (= c_0 c_0) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p9 c_0))) (or (not (p10 c_1 c_0)) (not (p9 c_0)) (not (= c_1 (f16 c_1 c_0 c_1))) (= c_1 c_0) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p9 c_1))) (or (not (p10 c_1 c_1)) (not (p9 c_1)) (not (= c_1 (f16 c_0 c_1 c_1))) (= c_0 c_1) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p9 c_0))) (or (not (p10 c_1 c_1)) (not (p9 c_1)) (not (= c_1 (f16 c_1 c_1 c_1))) (= c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p9 c_1))) (or (not (p3 c_0)) (not (p3 c_0)) (p4 (f2 c_0 c_0)) (= c_0 c_0)) (or (not (p3 c_0)) (not (p3 c_1)) (p4 (f2 c_1 c_0)) (= c_1 c_0)) (or (not (p3 c_1)) (not (p3 c_0)) (p4 (f2 c_0 c_1)) (= c_0 c_1)) (or (not (p3 c_1)) (not (p3 c_1)) (p4 (f2 c_1 c_1)) (= c_1 c_1)) (or (p3 (f7 c_0)) (not (p4 c_0))) (or (p3 (f7 c_1)) (not (p4 c_1))) (or (not (p3 c_0)) (= c_0 c_0) (not (p3 c_0)) (p1 c_0 (f2 c_0 c_0))) (or (not (p3 c_0)) (= c_0 c_1) (not (p3 c_1)) (p1 c_0 (f2 c_0 c_1))) (or (not (p3 c_1)) (= c_1 c_0) (not (p3 c_0)) (p1 c_1 (f2 c_1 c_0))) (or (not (p3 c_1)) (= c_1 c_1) (not (p3 c_1)) (p1 c_1 (f2 c_1 c_1))) (or (p3 (f12 c_0)) (not (p9 c_0))) (or (p3 (f12 c_1)) (not (p9 c_1))) (or (not (p1 (f7 c_0) c_0)) (not (p4 c_0))) (or (not (p1 (f7 c_1) c_1)) (not (p4 c_1))) (or (p10 (f16 c_0 c_0 c_0) c_0) (= c_0 c_0) (not (p9 c_0)) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_0)) (not (p3 c_0))) (or (p10 (f16 c_0 c_0 c_1) c_0) (= c_0 c_0) (not (p9 c_0)) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_0)) (not (p3 c_1))) (or (p10 (f16 c_0 c_1 c_0) c_0) (= c_0 c_1) (not (p9 c_0)) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_0)) (not (p3 c_0))) (or (p10 (f16 c_0 c_1 c_1) c_0) (= c_0 c_1) (not (p9 c_0)) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_0)) (not (p3 c_1))) (or (p10 (f16 c_1 c_0 c_0) c_1) (= c_1 c_0) (not (p9 c_1)) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_1)) (not (p3 c_0))) (or (p10 (f16 c_1 c_0 c_1) c_1) (= c_1 c_0) (not (p9 c_1)) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_1)) (not (p3 c_1))) (or (p10 (f16 c_1 c_1 c_0) c_1) (= c_1 c_1) (not (p9 c_1)) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_1)) (not (p3 c_0))) (or (p10 (f16 c_1 c_1 c_1) c_1) (= c_1 c_1) (not (p9 c_1)) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_1)) (not (p3 c_1))) (p9 c18) (or (not (p10 (f12 c_0) c_0)) (not (p9 c_0))) (or (not (p10 (f12 c_1) c_1)) (not (p9 c_1))) (or (not (p10 c_0 c_0)) (not (p9 c_0)) (not (p10 c_0 c_0)) (= c_0 c_0) (not (p9 c_0)) (not (p3 c_0)) (p3 (f16 c_0 c_0 c_0))) (or (not (p10 c_0 c_0)) (not (p9 c_1)) (not (p10 c_0 c_1)) (= c_0 c_1) (not (p9 c_0)) (not (p3 c_0)) (p3 (f16 c_0 c_1 c_0))) (or (not (p10 c_0 c_1)) (not (p9 c_0)) (not (p10 c_0 c_0)) (= c_1 c_0) (not (p9 c_1)) (not (p3 c_0)) (p3 (f16 c_1 c_0 c_0))) (or (not (p10 c_0 c_1)) (not (p9 c_1)) (not (p10 c_0 c_1)) (= c_1 c_1) (not (p9 c_1)) (not (p3 c_0)) (p3 (f16 c_1 c_1 c_0))) (or (not (p10 c_1 c_0)) (not (p9 c_0)) (not (p10 c_1 c_0)) (= c_0 c_0) (not (p9 c_0)) (not (p3 c_1)) (p3 (f16 c_0 c_0 c_1))) (or (not (p10 c_1 c_0)) (not (p9 c_1)) (not (p10 c_1 c_1)) (= c_0 c_1) (not (p9 c_0)) (not (p3 c_1)) (p3 (f16 c_0 c_1 c_1))) (or (not (p10 c_1 c_1)) (not (p9 c_0)) (not (p10 c_1 c_0)) (= c_1 c_0) (not (p9 c_1)) (not (p3 c_1)) (p3 (f16 c_1 c_0 c_1))) (or (not (p10 c_1 c_1)) (not (p9 c_1)) (not (p10 c_1 c_1)) (= c_1 c_1) (not (p9 c_1)) (not (p3 c_1)) (p3 (f16 c_1 c_1 c_1))) (or (= c_0 c_0) (not (p14 c_0 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (= c_0 c_0) (not (p3 c_0)) (p4 (f17 c_0 c_0 c_0)) (not (p3 c_0))) (or (= c_0 c_0) (not (p14 c_0 c_0 c_1)) (= c_0 c_1) (not (p3 c_0)) (= c_0 c_1) (not (p3 c_1)) (p4 (f17 c_0 c_0 c_1)) (not (p3 c_0))) (or (= c_0 c_1) (not (p14 c_0 c_1 c_0)) (= c_0 c_0) (not (p3 c_1)) (= c_1 c_0) (not (p3 c_0)) (p4 (f17 c_0 c_1 c_0)) (not (p3 c_0))) (or (= c_0 c_1) (not (p14 c_0 c_1 c_1)) (= c_0 c_1) (not (p3 c_1)) (= c_1 c_1) (not (p3 c_1)) (p4 (f17 c_0 c_1 c_1)) (not (p3 c_0))) (or (= c_1 c_0) (not (p14 c_1 c_0 c_0)) (= c_1 c_0) (not (p3 c_0)) (= c_0 c_0) (not (p3 c_0)) (p4 (f17 c_1 c_0 c_0)) (not (p3 c_1))) (or (= c_1 c_0) (not (p14 c_1 c_0 c_1)) (= c_1 c_1) (not (p3 c_0)) (= c_0 c_1) (not (p3 c_1)) (p4 (f17 c_1 c_0 c_1)) (not (p3 c_1))) (or (= c_1 c_1) (not (p14 c_1 c_1 c_0)) (= c_1 c_0) (not (p3 c_1)) (= c_1 c_0) (not (p3 c_0)) (p4 (f17 c_1 c_1 c_0)) (not (p3 c_1))) (or (= c_1 c_1) (not (p14 c_1 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (= c_1 c_1) (not (p3 c_1)) (p4 (f17 c_1 c_1 c_1)) (not (p3 c_1))) (or (= c_0 c_0) (p10 c_0 (f13 c_0 c_0 c_0)) (not (p3 c_0)) (p14 c_0 c_0 c_0) (= c_0 c_0) (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0)) (or (= c_0 c_0) (p10 c_0 (f13 c_0 c_0 c_1)) (not (p3 c_0)) (p14 c_0 c_0 c_1) (= c_0 c_1) (not (p3 c_0)) (not (p3 c_1)) (= c_0 c_1)) (or (= c_0 c_1) (p10 c_1 (f13 c_0 c_1 c_0)) (not (p3 c_1)) (p14 c_0 c_1 c_0) (= c_1 c_0) (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0)) (or (= c_0 c_1) (p10 c_1 (f13 c_0 c_1 c_1)) (not (p3 c_1)) (p14 c_0 c_1 c_1) (= c_1 c_1) (not (p3 c_0)) (not (p3 c_1)) (= c_0 c_1)) (or (= c_1 c_0) (p10 c_0 (f13 c_1 c_0 c_0)) (not (p3 c_0)) (p14 c_1 c_0 c_0) (= c_0 c_0) (not (p3 c_1)) (not (p3 c_0)) (= c_1 c_0)) (or (= c_1 c_0) (p10 c_0 (f13 c_1 c_0 c_1)) (not (p3 c_0)) (p14 c_1 c_0 c_1) (= c_0 c_1) (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1)) (or (= c_1 c_1) (p10 c_1 (f13 c_1 c_1 c_0)) (not (p3 c_1)) (p14 c_1 c_1 c_0) (= c_1 c_0) (not (p3 c_1)) (not (p3 c_0)) (= c_1 c_0)) (or (= c_1 c_1) (p10 c_1 (f13 c_1 c_1 c_1)) (not (p3 c_1)) (p14 c_1 c_1 c_1) (= c_1 c_1) (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1)) (or (not (p4 c_0)) (p1 (f6 c_0) c_0)) (or (not (p4 c_1)) (p1 (f6 c_1) c_1)) (or (p1 (f5 c_0) c_0) (not (p4 c_0))) (or (p1 (f5 c_1) c_1) (not (p4 c_1))) (or (p3 (f6 c_0)) (not (p4 c_0))) (or (p3 (f6 c_1)) (not (p4 c_1))) (or (p3 (f5 c_0)) (not (p4 c_0))) (or (p3 (f5 c_1)) (not (p4 c_1))) (or (not (p3 c_0)) (p1 c_0 (f17 c_0 c_0 c_0)) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_0) (= c_0 c_0) (not (p14 c_0 c_0 c_0)) (not (p3 c_0))) (or (not (p3 c_0)) (p1 c_0 (f17 c_0 c_0 c_1)) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_1) (= c_0 c_1) (not (p14 c_0 c_0 c_1)) (not (p3 c_1))) (or (not (p3 c_0)) (p1 c_0 (f17 c_1 c_0 c_0)) (not (p3 c_1)) (= c_1 c_0) (= c_0 c_0) (= c_1 c_0) (not (p14 c_1 c_0 c_0)) (not (p3 c_0))) (or (not (p3 c_0)) (p1 c_0 (f17 c_1 c_0 c_1)) (not (p3 c_1)) (= c_1 c_0) (= c_0 c_1) (= c_1 c_1) (not (p14 c_1 c_0 c_1)) (not (p3 c_1))) (or (not (p3 c_1)) (p1 c_1 (f17 c_0 c_1 c_0)) (not (p3 c_0)) (= c_0 c_1) (= c_1 c_0) (= c_0 c_0) (not (p14 c_0 c_1 c_0)) (not (p3 c_0))) (or (not (p3 c_1)) (p1 c_1 (f17 c_0 c_1 c_1)) (not (p3 c_0)) (= c_0 c_1) (= c_1 c_1) (= c_0 c_1) (not (p14 c_0 c_1 c_1)) (not (p3 c_1))) (or (not (p3 c_1)) (p1 c_1 (f17 c_1 c_1 c_0)) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_0) (= c_1 c_0) (not (p14 c_1 c_1 c_0)) (not (p3 c_0))) (or (not (p3 c_1)) (p1 c_1 (f17 c_1 c_1 c_1)) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_1) (= c_1 c_1) (not (p14 c_1 c_1 c_1)) (not (p3 c_1))) (or (p3 (f11 c_0)) (not (p9 c_0))) (or (p3 (f11 c_1)) (not (p9 c_1))) (or (not (p9 c_0)) (p10 (f11 c_0) c_0)) (or (not (p9 c_1)) (p10 (f11 c_1) c_1)) (or (p15 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p1 c_0 c_0)) (not (p1 c_0 c_0)) (not (p9 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p4 c_0))) (or (p15 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p1 c_0 c_0)) (not (p1 c_1 c_0)) (not (p9 c_0)) (= c_0 c_1) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p4 c_0))) (or (p15 c_0 c_0) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p1 c_1 c_0)) (not (p1 c_0 c_0)) (not (p9 c_0)) (= c_1 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p4 c_0))) (or (p15 c_0 c_0) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p1 c_1 c_0)) (not (p1 c_1 c_0)) (not (p9 c_0)) (= c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p4 c_0))) (or (p15 c_0 c_1) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p1 c_0 c_0)) (not (p1 c_0 c_0)) (not (p9 c_1)) (= c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p4 c_0))) (or (p15 c_0 c_1) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p1 c_0 c_0)) (not (p1 c_1 c_0)) (not (p9 c_1)) (= c_0 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p4 c_0))) (or (p15 c_0 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p1 c_1 c_0)) (not (p1 c_0 c_0)) (not (p9 c_1)) (= c_1 c_0) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p4 c_0))) (or (p15 c_0 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p1 c_1 c_0)) (not (p1 c_1 c_0)) (not (p9 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p4 c_0))) (or (p15 c_1 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p1 c_0 c_1)) (not (p1 c_0 c_1)) (not (p9 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p4 c_1))) (or (p15 c_1 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p1 c_0 c_1)) (not (p1 c_1 c_1)) (not (p9 c_0)) (= c_0 c_1) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p4 c_1))) (or (p15 c_1 c_0) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p1 c_1 c_1)) (not (p1 c_0 c_1)) (not (p9 c_0)) (= c_1 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p4 c_1))) (or (p15 c_1 c_0) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p1 c_1 c_1)) (not (p1 c_1 c_1)) (not (p9 c_0)) (= c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p4 c_1))) (or (p15 c_1 c_1) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p1 c_0 c_1)) (not (p1 c_0 c_1)) (not (p9 c_1)) (= c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p4 c_1))) (or (p15 c_1 c_1) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p1 c_0 c_1)) (not (p1 c_1 c_1)) (not (p9 c_1)) (= c_0 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p4 c_1))) (or (p15 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p1 c_1 c_1)) (not (p1 c_0 c_1)) (not (p9 c_1)) (= c_1 c_0) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p4 c_1))) (or (p15 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p1 c_1 c_1)) (not (p1 c_1 c_1)) (not (p9 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p4 c_1))) (or (p10 (f16 c_0 c_0 c_0) c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p9 c_0)) (not (p9 c_0)) (= c_0 c_0) (not (p10 c_0 c_0))) (or (p10 (f16 c_0 c_0 c_1) c_0) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p9 c_0)) (not (p9 c_0)) (= c_0 c_0) (not (p10 c_1 c_0))) (or (p10 (f16 c_0 c_1 c_0) c_1) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p9 c_1)) (not (p9 c_0)) (= c_0 c_1) (not (p10 c_0 c_0))) (or (p10 (f16 c_0 c_1 c_1) c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p9 c_1)) (not (p9 c_0)) (= c_0 c_1) (not (p10 c_1 c_0))) (or (p10 (f16 c_1 c_0 c_0) c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p9 c_0)) (not (p9 c_1)) (= c_1 c_0) (not (p10 c_0 c_1))) (or (p10 (f16 c_1 c_0 c_1) c_0) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p9 c_0)) (not (p9 c_1)) (= c_1 c_0) (not (p10 c_1 c_1))) (or (p10 (f16 c_1 c_1 c_0) c_1) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p9 c_1)) (not (p9 c_1)) (= c_1 c_1) (not (p10 c_0 c_1))) (or (p10 (f16 c_1 c_1 c_1) c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p9 c_1)) (not (p9 c_1)) (= c_1 c_1) (not (p10 c_1 c_1))) (or (not (p1 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (p14 c_0 c_0 c_0) (not (p3 c_0)) (not (p1 c_0 c_0)) (not (p1 c_0 c_0)) (not (p3 c_0)) (= c_0 c_0) (not (p4 c_0)) (= c_0 c_0)) (or (not (p1 c_0 c_0)) (= c_0 c_0) (not (p3 c_1)) (p14 c_0 c_1 c_0) (not (p3 c_0)) (not (p1 c_0 c_0)) (not (p1 c_1 c_0)) (not (p3 c_0)) (= c_0 c_1) (not (p4 c_0)) (= c_1 c_0)) (or (not (p1 c_0 c_0)) (= c_0 c_1) (not (p3 c_0)) (p14 c_0 c_0 c_1) (not (p3 c_0)) (not (p1 c_1 c_0)) (not (p1 c_0 c_0)) (not (p3 c_1)) (= c_0 c_0) (not (p4 c_0)) (= c_0 c_1)) (or (not (p1 c_0 c_0)) (= c_0 c_1) (not (p3 c_1)) (p14 c_0 c_1 c_1) (not (p3 c_0)) (not (p1 c_1 c_0)) (not (p1 c_1 c_0)) (not (p3 c_1)) (= c_0 c_1) (not (p4 c_0)) (= c_1 c_1)) (or (not (p1 c_0 c_1)) (= c_0 c_0) (not (p3 c_0)) (p14 c_0 c_0 c_0) (not (p3 c_0)) (not (p1 c_0 c_1)) (not (p1 c_0 c_1)) (not (p3 c_0)) (= c_0 c_0) (not (p4 c_1)) (= c_0 c_0)) (or (not (p1 c_0 c_1)) (= c_0 c_0) (not (p3 c_1)) (p14 c_0 c_1 c_0) (not (p3 c_0)) (not (p1 c_0 c_1)) (not (p1 c_1 c_1)) (not (p3 c_0)) (= c_0 c_1) (not (p4 c_1)) (= c_1 c_0)) (or (not (p1 c_0 c_1)) (= c_0 c_1) (not (p3 c_0)) (p14 c_0 c_0 c_1) (not (p3 c_0)) (not (p1 c_1 c_1)) (not (p1 c_0 c_1)) (not (p3 c_1)) (= c_0 c_0) (not (p4 c_1)) (= c_0 c_1)) (or (not (p1 c_0 c_1)) (= c_0 c_1) (not (p3 c_1)) (p14 c_0 c_1 c_1) (not (p3 c_0)) (not (p1 c_1 c_1)) (not (p1 c_1 c_1)) (not (p3 c_1)) (= c_0 c_1) (not (p4 c_1)) (= c_1 c_1)) (or (not (p1 c_1 c_0)) (= c_1 c_0) (not (p3 c_0)) (p14 c_1 c_0 c_0) (not (p3 c_1)) (not (p1 c_0 c_0)) (not (p1 c_0 c_0)) (not (p3 c_0)) (= c_1 c_0) (not (p4 c_0)) (= c_0 c_0)) (or (not (p1 c_1 c_0)) (= c_1 c_0) (not (p3 c_1)) (p14 c_1 c_1 c_0) (not (p3 c_1)) (not (p1 c_0 c_0)) (not (p1 c_1 c_0)) (not (p3 c_0)) (= c_1 c_1) (not (p4 c_0)) (= c_1 c_0)) (or (not (p1 c_1 c_0)) (= c_1 c_1) (not (p3 c_0)) (p14 c_1 c_0 c_1) (not (p3 c_1)) (not (p1 c_1 c_0)) (not (p1 c_0 c_0)) (not (p3 c_1)) (= c_1 c_0) (not (p4 c_0)) (= c_0 c_1)) (or (not (p1 c_1 c_0)) (= c_1 c_1) (not (p3 c_1)) (p14 c_1 c_1 c_1) (not (p3 c_1)) (not (p1 c_1 c_0)) (not (p1 c_1 c_0)) (not (p3 c_1)) (= c_1 c_1) (not (p4 c_0)) (= c_1 c_1)) (or (not (p1 c_1 c_1)) (= c_1 c_0) (not (p3 c_0)) (p14 c_1 c_0 c_0) (not (p3 c_1)) (not (p1 c_0 c_1)) (not (p1 c_0 c_1)) (not (p3 c_0)) (= c_1 c_0) (not (p4 c_1)) (= c_0 c_0)) (or (not (p1 c_1 c_1)) (= c_1 c_0) (not (p3 c_1)) (p14 c_1 c_1 c_0) (not (p3 c_1)) (not (p1 c_0 c_1)) (not (p1 c_1 c_1)) (not (p3 c_0)) (= c_1 c_1) (not (p4 c_1)) (= c_1 c_0)) (or (not (p1 c_1 c_1)) (= c_1 c_1) (not (p3 c_0)) (p14 c_1 c_0 c_1) (not (p3 c_1)) (not (p1 c_1 c_1)) (not (p1 c_0 c_1)) (not (p3 c_1)) (= c_1 c_0) (not (p4 c_1)) (= c_0 c_1)) (or (not (p1 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (p14 c_1 c_1 c_1) (not (p3 c_1)) (not (p1 c_1 c_1)) (not (p1 c_1 c_1)) (not (p3 c_1)) (= c_1 c_1) (not (p4 c_1)) (= c_1 c_1)) (or (not (p3 c_0)) (not (p4 c_0)) (not (p3 c_0)) (not (p1 c_0 c_0)) (= c_0 c_0) (not (p1 c_0 c_0)) (= c_0 c_0) (not (p1 c_0 c_0)) (not (p4 c_0)) (not (p1 c_0 c_0))) (or (not (p3 c_0)) (not (p4 c_0)) (not (p3 c_0)) (not (p1 c_0 c_0)) (= c_0 c_1) (not (p1 c_0 c_0)) (= c_0 c_0) (not (p1 c_0 c_1)) (not (p4 c_1)) (not (p1 c_0 c_1))) (or (not (p3 c_0)) (not (p4 c_0)) (not (p3 c_1)) (not (p1 c_1 c_0)) (= c_0 c_0) (not (p1 c_0 c_0)) (= c_1 c_0) (not (p1 c_1 c_0)) (not (p4 c_0)) (not (p1 c_0 c_0))) (or (not (p3 c_0)) (not (p4 c_0)) (not (p3 c_1)) (not (p1 c_1 c_0)) (= c_0 c_1) (not (p1 c_0 c_0)) (= c_1 c_0) (not (p1 c_1 c_1)) (not (p4 c_1)) (not (p1 c_0 c_1))) (or (not (p3 c_0)) (not (p4 c_1)) (not (p3 c_0)) (not (p1 c_0 c_1)) (= c_1 c_0) (not (p1 c_0 c_1)) (= c_0 c_0) (not (p1 c_0 c_0)) (not (p4 c_0)) (not (p1 c_0 c_0))) (or (not (p3 c_0)) (not (p4 c_1)) (not (p3 c_0)) (not (p1 c_0 c_1)) (= c_1 c_1) (not (p1 c_0 c_1)) (= c_0 c_0) (not (p1 c_0 c_1)) (not (p4 c_1)) (not (p1 c_0 c_1))) (or (not (p3 c_0)) (not (p4 c_1)) (not (p3 c_1)) (not (p1 c_1 c_1)) (= c_1 c_0) (not (p1 c_0 c_1)) (= c_1 c_0) (not (p1 c_1 c_0)) (not (p4 c_0)) (not (p1 c_0 c_0))) (or (not (p3 c_0)) (not (p4 c_1)) (not (p3 c_1)) (not (p1 c_1 c_1)) (= c_1 c_1) (not (p1 c_0 c_1)) (= c_1 c_0) (not (p1 c_1 c_1)) (not (p4 c_1)) (not (p1 c_0 c_1))) (or (not (p3 c_1)) (not (p4 c_0)) (not (p3 c_0)) (not (p1 c_0 c_0)) (= c_0 c_0) (not (p1 c_1 c_0)) (= c_0 c_1) (not (p1 c_0 c_0)) (not (p4 c_0)) (not (p1 c_1 c_0))) (or (not (p3 c_1)) (not (p4 c_0)) (not (p3 c_0)) (not (p1 c_0 c_0)) (= c_0 c_1) (not (p1 c_1 c_0)) (= c_0 c_1) (not (p1 c_0 c_1)) (not (p4 c_1)) (not (p1 c_1 c_1))) (or (not (p3 c_1)) (not (p4 c_0)) (not (p3 c_1)) (not (p1 c_1 c_0)) (= c_0 c_0) (not (p1 c_1 c_0)) (= c_1 c_1) (not (p1 c_1 c_0)) (not (p4 c_0)) (not (p1 c_1 c_0))) (or (not (p3 c_1)) (not (p4 c_0)) (not (p3 c_1)) (not (p1 c_1 c_0)) (= c_0 c_1) (not (p1 c_1 c_0)) (= c_1 c_1) (not (p1 c_1 c_1)) (not (p4 c_1)) (not (p1 c_1 c_1))) (or (not (p3 c_1)) (not (p4 c_1)) (not (p3 c_0)) (not (p1 c_0 c_1)) (= c_1 c_0) (not (p1 c_1 c_1)) (= c_0 c_1) (not (p1 c_0 c_0)) (not (p4 c_0)) (not (p1 c_1 c_0))) (or (not (p3 c_1)) (not (p4 c_1)) (not (p3 c_0)) (not (p1 c_0 c_1)) (= c_1 c_1) (not (p1 c_1 c_1)) (= c_0 c_1) (not (p1 c_0 c_1)) (not (p4 c_1)) (not (p1 c_1 c_1))) (or (not (p3 c_1)) (not (p4 c_1)) (not (p3 c_1)) (not (p1 c_1 c_1)) (= c_1 c_0) (not (p1 c_1 c_1)) (= c_1 c_1) (not (p1 c_1 c_0)) (not (p4 c_0)) (not (p1 c_1 c_0))) (or (not (p3 c_1)) (not (p4 c_1)) (not (p3 c_1)) (not (p1 c_1 c_1)) (= c_1 c_1) (not (p1 c_1 c_1)) (= c_1 c_1) (not (p1 c_1 c_1)) (not (p4 c_1)) (not (p1 c_1 c_1))) (or (not (p14 c_0 c_0 c_0)) (= c_0 c_0) (p1 c_0 (f17 c_0 c_0 c_0)) (not (p3 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0)) (or (not (p14 c_0 c_0 c_1)) (= c_0 c_0) (p1 c_1 (f17 c_0 c_0 c_1)) (not (p3 c_0)) (= c_0 c_1) (not (p3 c_1)) (not (p3 c_0)) (= c_0 c_1)) (or (not (p14 c_0 c_1 c_0)) (= c_0 c_1) (p1 c_0 (f17 c_0 c_1 c_0)) (not (p3 c_1)) (= c_1 c_0) (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0)) (or (not (p14 c_0 c_1 c_1)) (= c_0 c_1) (p1 c_1 (f17 c_0 c_1 c_1)) (not (p3 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p3 c_0)) (= c_0 c_1)) (or (not (p14 c_1 c_0 c_0)) (= c_1 c_0) (p1 c_0 (f17 c_1 c_0 c_0)) (not (p3 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p3 c_1)) (= c_1 c_0)) (or (not (p14 c_1 c_0 c_1)) (= c_1 c_0) (p1 c_1 (f17 c_1 c_0 c_1)) (not (p3 c_0)) (= c_0 c_1) (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1)) (or (not (p14 c_1 c_1 c_0)) (= c_1 c_1) (p1 c_0 (f17 c_1 c_1 c_0)) (not (p3 c_1)) (= c_1 c_0) (not (p3 c_0)) (not (p3 c_1)) (= c_1 c_0)) (or (not (p14 c_1 c_1 c_1)) (= c_1 c_1) (p1 c_1 (f17 c_1 c_1 c_1)) (not (p3 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1)) (p4 c8) (or (not (p3 c_0)) (= c_0 c_0) (not (p3 c_0)) (p1 c_0 (f2 c_0 c_0))) (or (not (p3 c_0)) (= c_0 c_1) (not (p3 c_1)) (p1 c_1 (f2 c_0 c_1))) (or (not (p3 c_1)) (= c_1 c_0) (not (p3 c_0)) (p1 c_0 (f2 c_1 c_0))) (or (not (p3 c_1)) (= c_1 c_1) (not (p3 c_1)) (p1 c_1 (f2 c_1 c_1))) (or (= c_0 c_0) (= c_0 c_0) (not (p10 c_0 c18)) (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0) (not (p10 c_0 c18)) (p14 c_0 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c18))) (or (= c_0 c_0) (= c_1 c_0) (not (p10 c_0 c18)) (not (p3 c_0)) (not (p3 c_1)) (= c_1 c_0) (not (p10 c_0 c18)) (p14 c_1 c_0 c_0) (not (p3 c_0)) (not (p10 c_1 c18))) (or (= c_0 c_1) (= c_0 c_1) (not (p10 c_0 c18)) (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0) (not (p10 c_1 c18)) (p14 c_0 c_0 c_1) (not (p3 c_1)) (not (p10 c_0 c18))) (or (= c_0 c_1) (= c_1 c_1) (not (p10 c_0 c18)) (not (p3 c_0)) (not (p3 c_1)) (= c_1 c_0) (not (p10 c_1 c18)) (p14 c_1 c_0 c_1) (not (p3 c_1)) (not (p10 c_1 c18))) (or (= c_1 c_0) (= c_0 c_0) (not (p10 c_1 c18)) (not (p3 c_1)) (not (p3 c_0)) (= c_0 c_1) (not (p10 c_0 c18)) (p14 c_0 c_1 c_0) (not (p3 c_0)) (not (p10 c_0 c18))) (or (= c_1 c_0) (= c_1 c_0) (not (p10 c_1 c18)) (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1) (not (p10 c_0 c18)) (p14 c_1 c_1 c_0) (not (p3 c_0)) (not (p10 c_1 c18))) (or (= c_1 c_1) (= c_0 c_1) (not (p10 c_1 c18)) (not (p3 c_1)) (not (p3 c_0)) (= c_0 c_1) (not (p10 c_1 c18)) (p14 c_0 c_1 c_1) (not (p3 c_1)) (not (p10 c_0 c18))) (or (= c_1 c_1) (= c_1 c_1) (not (p10 c_1 c18)) (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1) (not (p10 c_1 c18)) (p14 c_1 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c18))) (or (= c_0 c_0) (not (p3 c_0)) (p10 c_0 (f13 c_0 c_0 c_0)) (= c_0 c_0) (p14 c_0 c_0 c_0) (= c_0 c_0) (not (p3 c_0)) (not (p3 c_0))) (or (= c_0 c_0) (not (p3 c_1)) (p10 c_0 (f13 c_0 c_0 c_1)) (= c_0 c_1) (p14 c_0 c_0 c_1) (= c_0 c_1) (not (p3 c_0)) (not (p3 c_0))) (or (= c_0 c_1) (not (p3 c_0)) (p10 c_0 (f13 c_0 c_1 c_0)) (= c_0 c_0) (p14 c_0 c_1 c_0) (= c_1 c_0) (not (p3 c_1)) (not (p3 c_0))) (or (= c_0 c_1) (not (p3 c_1)) (p10 c_0 (f13 c_0 c_1 c_1)) (= c_0 c_1) (p14 c_0 c_1 c_1) (= c_1 c_1) (not (p3 c_1)) (not (p3 c_0))) (or (= c_1 c_0) (not (p3 c_0)) (p10 c_1 (f13 c_1 c_0 c_0)) (= c_1 c_0) (p14 c_1 c_0 c_0) (= c_0 c_0) (not (p3 c_0)) (not (p3 c_1))) (or (= c_1 c_0) (not (p3 c_1)) (p10 c_1 (f13 c_1 c_0 c_1)) (= c_1 c_1) (p14 c_1 c_0 c_1) (= c_0 c_1) (not (p3 c_0)) (not (p3 c_1))) (or (= c_1 c_1) (not (p3 c_0)) (p10 c_1 (f13 c_1 c_1 c_0)) (= c_1 c_0) (p14 c_1 c_1 c_0) (= c_1 c_0) (not (p3 c_1)) (not (p3 c_1))) (or (= c_1 c_1) (not (p3 c_1)) (p10 c_1 (f13 c_1 c_1 c_1)) (= c_1 c_1) (p14 c_1 c_1 c_1) (= c_1 c_1) (not (p3 c_1)) (not (p3 c_1))) (or (p14 c_0 c_0 c_0) (= c_0 c_0) (= c_0 c_0) (not (p3 c_0)) (not (p3 c_0)) (p10 c_0 (f13 c_0 c_0 c_0)) (not (p3 c_0)) (= c_0 c_0)) (or (p14 c_0 c_0 c_1) (= c_0 c_0) (= c_0 c_1) (not (p3 c_0)) (not (p3 c_0)) (p10 c_1 (f13 c_0 c_0 c_1)) (not (p3 c_1)) (= c_0 c_1)) (or (p14 c_0 c_1 c_0) (= c_0 c_1) (= c_1 c_0) (not (p3 c_0)) (not (p3 c_1)) (p10 c_0 (f13 c_0 c_1 c_0)) (not (p3 c_0)) (= c_0 c_0)) (or (p14 c_0 c_1 c_1) (= c_0 c_1) (= c_1 c_1) (not (p3 c_0)) (not (p3 c_1)) (p10 c_1 (f13 c_0 c_1 c_1)) (not (p3 c_1)) (= c_0 c_1)) (or (p14 c_1 c_0 c_0) (= c_1 c_0) (= c_0 c_0) (not (p3 c_1)) (not (p3 c_0)) (p10 c_0 (f13 c_1 c_0 c_0)) (not (p3 c_0)) (= c_1 c_0)) (or (p14 c_1 c_0 c_1) (= c_1 c_0) (= c_0 c_1) (not (p3 c_1)) (not (p3 c_0)) (p10 c_1 (f13 c_1 c_0 c_1)) (not (p3 c_1)) (= c_1 c_1)) (or (p14 c_1 c_1 c_0) (= c_1 c_1) (= c_1 c_0) (not (p3 c_1)) (not (p3 c_1)) (p10 c_0 (f13 c_1 c_1 c_0)) (not (p3 c_0)) (= c_1 c_0)) (or (p14 c_1 c_1 c_1) (= c_1 c_1) (= c_1 c_1) (not (p3 c_1)) (not (p3 c_1)) (p10 c_1 (f13 c_1 c_1 c_1)) (not (p3 c_1)) (= c_1 c_1)) (or (= c_0 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_0)) (p14 c_0 c_0 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_0)) (= c_0 c_0) (= c_0 c_0) (= c_0 c_0) (not (p3 c_0))) (or (= c_0 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_0)) (p14 c_0 c_1 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_0)) (= c_0 c_0) (= c_1 c_0) (= c_0 c_1) (not (p3 c_0))) (or (= c_0 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_0)) (p14 c_0 c_0 c_1) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_0)) (= c_0 c_1) (= c_0 c_1) (= c_0 c_0) (not (p3 c_0))) (or (= c_0 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_0)) (p14 c_0 c_1 c_1) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_0)) (= c_0 c_1) (= c_1 c_1) (= c_0 c_1) (not (p3 c_0))) (or (= c_0 c_0) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_0)) (p14 c_1 c_0 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_0)) (= c_1 c_0) (= c_0 c_0) (= c_1 c_0) (not (p3 c_1))) (or (= c_0 c_0) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_0)) (p14 c_1 c_1 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_0)) (= c_1 c_0) (= c_1 c_0) (= c_1 c_1) (not (p3 c_1))) (or (= c_0 c_0) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_0)) (p14 c_1 c_0 c_1) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_0)) (= c_1 c_1) (= c_0 c_1) (= c_1 c_0) (not (p3 c_1))) (or (= c_0 c_0) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_0)) (p14 c_1 c_1 c_1) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_0)) (= c_1 c_1) (= c_1 c_1) (= c_1 c_1) (not (p3 c_1))) (or (= c_0 c_1) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_0)) (p14 c_0 c_0 c_0) (not (p9 c_0)) (not (p10 c_0 c_1)) (not (p10 c_0 c_0)) (= c_0 c_0) (= c_0 c_0) (= c_0 c_0) (not (p3 c_0))) (or (= c_0 c_1) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_0)) (p14 c_0 c_1 c_0) (not (p9 c_0)) (not (p10 c_0 c_1)) (not (p10 c_0 c_0)) (= c_0 c_0) (= c_1 c_0) (= c_0 c_1) (not (p3 c_0))) (or (= c_0 c_1) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_0)) (p14 c_0 c_0 c_1) (not (p9 c_0)) (not (p10 c_1 c_1)) (not (p10 c_0 c_0)) (= c_0 c_1) (= c_0 c_1) (= c_0 c_0) (not (p3 c_0))) (or (= c_0 c_1) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_0)) (p14 c_0 c_1 c_1) (not (p9 c_0)) (not (p10 c_1 c_1)) (not (p10 c_0 c_0)) (= c_0 c_1) (= c_1 c_1) (= c_0 c_1) (not (p3 c_0))) (or (= c_0 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_0)) (p14 c_1 c_0 c_0) (not (p9 c_0)) (not (p10 c_0 c_1)) (not (p10 c_1 c_0)) (= c_1 c_0) (= c_0 c_0) (= c_1 c_0) (not (p3 c_1))) (or (= c_0 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_0)) (p14 c_1 c_1 c_0) (not (p9 c_0)) (not (p10 c_0 c_1)) (not (p10 c_1 c_0)) (= c_1 c_0) (= c_1 c_0) (= c_1 c_1) (not (p3 c_1))) (or (= c_0 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_0)) (p14 c_1 c_0 c_1) (not (p9 c_0)) (not (p10 c_1 c_1)) (not (p10 c_1 c_0)) (= c_1 c_1) (= c_0 c_1) (= c_1 c_0) (not (p3 c_1))) (or (= c_0 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_0)) (p14 c_1 c_1 c_1) (not (p9 c_0)) (not (p10 c_1 c_1)) (not (p10 c_1 c_0)) (= c_1 c_1) (= c_1 c_1) (= c_1 c_1) (not (p3 c_1))) (or (= c_1 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_1)) (p14 c_0 c_0 c_0) (not (p9 c_1)) (not (p10 c_0 c_0)) (not (p10 c_0 c_1)) (= c_0 c_0) (= c_0 c_0) (= c_0 c_0) (not (p3 c_0))) (or (= c_1 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_1)) (p14 c_0 c_1 c_0) (not (p9 c_1)) (not (p10 c_0 c_0)) (not (p10 c_0 c_1)) (= c_0 c_0) (= c_1 c_0) (= c_0 c_1) (not (p3 c_0))) (or (= c_1 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_1)) (p14 c_0 c_0 c_1) (not (p9 c_1)) (not (p10 c_1 c_0)) (not (p10 c_0 c_1)) (= c_0 c_1) (= c_0 c_1) (= c_0 c_0) (not (p3 c_0))) (or (= c_1 c_0) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_1)) (p14 c_0 c_1 c_1) (not (p9 c_1)) (not (p10 c_1 c_0)) (not (p10 c_0 c_1)) (= c_0 c_1) (= c_1 c_1) (= c_0 c_1) (not (p3 c_0))) (or (= c_1 c_0) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_1)) (p14 c_1 c_0 c_0) (not (p9 c_1)) (not (p10 c_0 c_0)) (not (p10 c_1 c_1)) (= c_1 c_0) (= c_0 c_0) (= c_1 c_0) (not (p3 c_1))) (or (= c_1 c_0) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_1)) (p14 c_1 c_1 c_0) (not (p9 c_1)) (not (p10 c_0 c_0)) (not (p10 c_1 c_1)) (= c_1 c_0) (= c_1 c_0) (= c_1 c_1) (not (p3 c_1))) (or (= c_1 c_0) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p10 c_0 c_1)) (p14 c_1 c_0 c_1) (not (p9 c_1)) (not (p10 c_1 c_0)) (not (p10 c_1 c_1)) (= c_1 c_1) (= c_0 c_1) (= c_1 c_0) (not (p3 c_1))) (or (= c_1 c_0) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p10 c_1 c_1)) (p14 c_1 c_1 c_1) (not (p9 c_1)) (not (p10 c_1 c_0)) (not (p10 c_1 c_1)) (= c_1 c_1) (= c_1 c_1) (= c_1 c_1) (not (p3 c_1))) (or (= c_1 c_1) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_1)) (p14 c_0 c_0 c_0) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_1)) (= c_0 c_0) (= c_0 c_0) (= c_0 c_0) (not (p3 c_0))) (or (= c_1 c_1) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_1)) (p14 c_0 c_1 c_0) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_1)) (= c_0 c_0) (= c_1 c_0) (= c_0 c_1) (not (p3 c_0))) (or (= c_1 c_1) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_1)) (p14 c_0 c_0 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_1)) (= c_0 c_1) (= c_0 c_1) (= c_0 c_0) (not (p3 c_0))) (or (= c_1 c_1) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_1)) (p14 c_0 c_1 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_1)) (= c_0 c_1) (= c_1 c_1) (= c_0 c_1) (not (p3 c_0))) (or (= c_1 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_1)) (p14 c_1 c_0 c_0) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_1)) (= c_1 c_0) (= c_0 c_0) (= c_1 c_0) (not (p3 c_1))) (or (= c_1 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_1)) (p14 c_1 c_1 c_0) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_1)) (= c_1 c_0) (= c_1 c_0) (= c_1 c_1) (not (p3 c_1))) (or (= c_1 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p10 c_0 c_1)) (p14 c_1 c_0 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_1)) (= c_1 c_1) (= c_0 c_1) (= c_1 c_0) (not (p3 c_1))) (or (= c_1 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p10 c_1 c_1)) (p14 c_1 c_1 c_1) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_1)) (= c_1 c_1) (= c_1 c_1) (= c_1 c_1) (not (p3 c_1))) (or (= c_0 c_0) (not (p3 c_0)) (not (p14 c_0 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (= c_0 c_0) (not (p3 c_0)) (p1 c_0 (f17 c_0 c_0 c_0))) (or (= c_0 c_0) (not (p3 c_0)) (not (p14 c_0 c_1 c_0)) (= c_1 c_0) (not (p3 c_0)) (= c_0 c_1) (not (p3 c_1)) (p1 c_0 (f17 c_0 c_1 c_0))) (or (= c_0 c_1) (not (p3 c_0)) (not (p14 c_0 c_0 c_1)) (= c_0 c_1) (not (p3 c_1)) (= c_0 c_0) (not (p3 c_0)) (p1 c_0 (f17 c_0 c_0 c_1))) (or (= c_0 c_1) (not (p3 c_0)) (not (p14 c_0 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (= c_0 c_1) (not (p3 c_1)) (p1 c_0 (f17 c_0 c_1 c_1))) (or (= c_1 c_0) (not (p3 c_1)) (not (p14 c_1 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (= c_1 c_0) (not (p3 c_0)) (p1 c_1 (f17 c_1 c_0 c_0))) (or (= c_1 c_0) (not (p3 c_1)) (not (p14 c_1 c_1 c_0)) (= c_1 c_0) (not (p3 c_0)) (= c_1 c_1) (not (p3 c_1)) (p1 c_1 (f17 c_1 c_1 c_0))) (or (= c_1 c_1) (not (p3 c_1)) (not (p14 c_1 c_0 c_1)) (= c_0 c_1) (not (p3 c_1)) (= c_1 c_0) (not (p3 c_0)) (p1 c_1 (f17 c_1 c_0 c_1))) (or (= c_1 c_1) (not (p3 c_1)) (not (p14 c_1 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (= c_1 c_1) (not (p3 c_1)) (p1 c_1 (f17 c_1 c_1 c_1))) (or (p14 c_0 c_0 c_0) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_0) (not (p3 c_0)) (p9 (f13 c_0 c_0 c_0)) (not (p3 c_0)) (= c_0 c_0)) (or (p14 c_0 c_0 c_1) (not (p3 c_1)) (= c_0 c_1) (= c_0 c_1) (not (p3 c_0)) (p9 (f13 c_0 c_0 c_1)) (not (p3 c_0)) (= c_0 c_0)) (or (p14 c_0 c_1 c_0) (not (p3 c_0)) (= c_1 c_0) (= c_0 c_0) (not (p3 c_1)) (p9 (f13 c_0 c_1 c_0)) (not (p3 c_0)) (= c_0 c_1)) (or (p14 c_0 c_1 c_1) (not (p3 c_1)) (= c_1 c_1) (= c_0 c_1) (not (p3 c_1)) (p9 (f13 c_0 c_1 c_1)) (not (p3 c_0)) (= c_0 c_1)) (or (p14 c_1 c_0 c_0) (not (p3 c_0)) (= c_0 c_0) (= c_1 c_0) (not (p3 c_0)) (p9 (f13 c_1 c_0 c_0)) (not (p3 c_1)) (= c_1 c_0)) (or (p14 c_1 c_0 c_1) (not (p3 c_1)) (= c_0 c_1) (= c_1 c_1) (not (p3 c_0)) (p9 (f13 c_1 c_0 c_1)) (not (p3 c_1)) (= c_1 c_0)) (or (p14 c_1 c_1 c_0) (not (p3 c_0)) (= c_1 c_0) (= c_1 c_0) (not (p3 c_1)) (p9 (f13 c_1 c_1 c_0)) (not (p3 c_1)) (= c_1 c_1)) (or (p14 c_1 c_1 c_1) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_1) (not (p3 c_1)) (p9 (f13 c_1 c_1 c_1)) (not (p3 c_1)) (= c_1 c_1)) (or (not (= (f5 c_0) (f6 c_0))) (not (p4 c_0))) (or (not (= (f5 c_1) (f6 c_1))) (not (p4 c_1))) (or (= (f16 c_0 c_0 c_0) c_0) (= (f16 c_0 c_0 c_0) c_1)) (or (= (f16 c_0 c_0 c_1) c_0) (= (f16 c_0 c_0 c_1) c_1)) (or (= (f16 c_0 c_1 c_0) c_0) (= (f16 c_0 c_1 c_0) c_1)) (or (= (f16 c_0 c_1 c_1) c_0) (= (f16 c_0 c_1 c_1) c_1)) (or (= (f16 c_1 c_0 c_0) c_0) (= (f16 c_1 c_0 c_0) c_1)) (or (= (f16 c_1 c_0 c_1) c_0) (= (f16 c_1 c_0 c_1) c_1)) (or (= (f16 c_1 c_1 c_0) c_0) (= (f16 c_1 c_1 c_0) c_1)) (or (= (f16 c_1 c_1 c_1) c_0) (= (f16 c_1 c_1 c_1) c_1)) (or (= (f17 c_0 c_0 c_0) c_0) (= (f17 c_0 c_0 c_0) c_1)) (or (= (f17 c_0 c_0 c_1) c_0) (= (f17 c_0 c_0 c_1) c_1)) (or (= (f17 c_0 c_1 c_0) c_0) (= (f17 c_0 c_1 c_0) c_1)) (or (= (f17 c_0 c_1 c_1) c_0) (= (f17 c_0 c_1 c_1) c_1)) (or (= (f17 c_1 c_0 c_0) c_0) (= (f17 c_1 c_0 c_0) c_1)) (or (= (f17 c_1 c_0 c_1) c_0) (= (f17 c_1 c_0 c_1) c_1)) (or (= (f17 c_1 c_1 c_0) c_0) (= (f17 c_1 c_1 c_0) c_1)) (or (= (f17 c_1 c_1 c_1) c_0) (= (f17 c_1 c_1 c_1) c_1)) (or (= (f13 c_0 c_0 c_0) c_0) (= (f13 c_0 c_0 c_0) c_1)) (or (= (f13 c_0 c_0 c_1) c_0) (= (f13 c_0 c_0 c_1) c_1)) (or (= (f13 c_0 c_1 c_0) c_0) (= (f13 c_0 c_1 c_0) c_1)) (or (= (f13 c_0 c_1 c_1) c_0) (= (f13 c_0 c_1 c_1) c_1)) (or (= (f13 c_1 c_0 c_0) c_0) (= (f13 c_1 c_0 c_0) c_1)) (or (= (f13 c_1 c_0 c_1) c_0) (= (f13 c_1 c_0 c_1) c_1)) (or (= (f13 c_1 c_1 c_0) c_0) (= (f13 c_1 c_1 c_0) c_1)) (or (= (f13 c_1 c_1 c_1) c_0) (= (f13 c_1 c_1 c_1) c_1)) (or (= (f2 c_0 c_0) c_0) (= (f2 c_0 c_0) c_1)) (or (= (f2 c_0 c_1) c_0) (= (f2 c_0 c_1) c_1)) (or (= (f2 c_1 c_0) c_0) (= (f2 c_1 c_0) c_1)) (or (= (f2 c_1 c_1) c_0) (= (f2 c_1 c_1) c_1)) (or (= (f7 c_0) c_0) (= (f7 c_0) c_1)) (or (= (f7 c_1) c_0) (= (f7 c_1) c_1)) (or (= (f12 c_0) c_0) (= (f12 c_0) c_1)) (or (= (f12 c_1) c_0) (= (f12 c_1) c_1)) (or (= (f6 c_0) c_0) (= (f6 c_0) c_1)) (or (= (f6 c_1) c_0) (= (f6 c_1) c_1)) (or (= (f5 c_0) c_0) (= (f5 c_0) c_1)) (or (= (f5 c_1) c_0) (= (f5 c_1) c_1)) (or (= (f11 c_0) c_0) (= (f11 c_0) c_1)) (or (= (f11 c_1) c_0) (= (f11 c_1) c_1)) (or (= c18 c_0) (= c18 c_1)) (or (= c8 c_0) (= c8 c_1))))
(step t0 (cl (not (= (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (p1 (f7 c_1) c_1)))) (not (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (p1 (f7 c_1) c_1))) :rule equiv_pos2)
(step t1 (cl (= (not (p1 (f5 c_1) c_1)) (not (p1 (f5 c_1) c_1)))) :rule refl)
(step t2 (cl (= (not (= c_1 (f5 c_1))) (not (= c_1 (f5 c_1))))) :rule refl)
(step t3 (cl (= (not (= c_1 (f7 c_1))) (not (= c_1 (f7 c_1))))) :rule refl)
(step t4 (cl (= (= (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)) true) (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)))) :rule equiv_simplify)
(step t5 (cl (not (= (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)) true)) (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1))) :rule equiv1 :premises (t4))
(step t6 (cl (= (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)) (= (p1 (f7 c_1) c_1) (not (not (p1 (f7 c_1) c_1)))))) :rule rare_rewrite :args ("eq-symm" (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)))
(step t7 (cl (= (p1 (f7 c_1) c_1) (p1 (f7 c_1) c_1))) :rule refl)
(step t8 (cl (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1))) :rule rare_rewrite :args ("bool-double-not-elim" (p1 (f7 c_1) c_1)))
(step t9 (cl (= (= (p1 (f7 c_1) c_1) (not (not (p1 (f7 c_1) c_1)))) (= (p1 (f7 c_1) c_1) (p1 (f7 c_1) c_1)))) :rule cong :premises (t7 t8))
(step t10 (cl (= (= (p1 (f7 c_1) c_1) (p1 (f7 c_1) c_1)) true)) :rule rare_rewrite :args ("eq-refl" (p1 (f7 c_1) c_1)))
(step t11 (cl (= (= (p1 (f7 c_1) c_1) (not (not (p1 (f7 c_1) c_1)))) true)) :rule trans :premises (t9 t10))
(step t12 (cl (= (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)) true)) :rule trans :premises (t6 t11))
(step t13 (cl (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1))) :rule resolution :premises (t5 t12))
(step t14 (cl (= (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (p1 (f7 c_1) c_1)))) :rule cong :premises (t1 t2 t3 t13))
(step t15 (cl (=> (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) :rule implies_neg1)
(anchor :step t16)
(assume t16.a0 (p1 (f5 c_1) c_1))
(assume t16.a1 (= c_1 (f5 c_1)))
(assume t16.a2 (= c_1 (f7 c_1)))
(assume t16.a3 (not (p1 (f7 c_1) c_1)))
(step t16.t0 (cl (not (= (= false true) false)) (not (= false true)) false) :rule equiv_pos2)
(step t16.t1 (cl (= (= false true) false)) :rule rare_rewrite :args ("evaluate"))
(step t16.t2 (cl (= (= (p1 (f7 c_1) c_1) false) (not (p1 (f7 c_1) c_1)))) :rule equiv_simplify)
(step t16.t3 (cl (= (p1 (f7 c_1) c_1) false) (not (not (p1 (f7 c_1) c_1)))) :rule equiv2 :premises (t16.t2))
(step t16.t4 (cl (not (not (not (p1 (f7 c_1) c_1)))) (p1 (f7 c_1) c_1)) :rule not_not)
(step t16.t5 (cl (= (p1 (f7 c_1) c_1) false) (p1 (f7 c_1) c_1)) :rule resolution :premises (t16.t3 t16.t4))
(step t16.t6 (cl (= (p1 (f7 c_1) c_1) false)) :rule resolution :premises (t16.t5 t16.a3))
(step t16.t7 (cl (= false (p1 (f7 c_1) c_1))) :rule symm :premises (t16.t6))
(step t16.t8 (cl (= (f7 c_1) c_1)) :rule symm :premises (t16.a2))
(step t16.t9 (cl (= c_1 c_1)) :rule refl)
(step t16.t10 (cl (= (p1 (f7 c_1) c_1) (p1 c_1 c_1))) :rule cong :premises (t16.t8 t16.t9))
(step t16.t11 (cl (= (f5 c_1) c_1)) :rule symm :premises (t16.a1))
(step t16.t12 (cl (= c_1 (f5 c_1))) :rule symm :premises (t16.t11))
(step t16.t13 (cl (= (p1 c_1 c_1) (p1 (f5 c_1) c_1))) :rule cong :premises (t16.t12 t16.t9))
(step t16.t14 (cl (= (= (p1 (f5 c_1) c_1) true) (p1 (f5 c_1) c_1))) :rule equiv_simplify)
(step t16.t15 (cl (= (p1 (f5 c_1) c_1) true) (not (p1 (f5 c_1) c_1))) :rule equiv2 :premises (t16.t14))
(step t16.t16 (cl (= (p1 (f5 c_1) c_1) true)) :rule resolution :premises (t16.t15 t16.a0))
(step t16.t17 (cl (= false true)) :rule trans :premises (t16.t7 t16.t10 t16.t13 t16.t16))
(step t16.t18 (cl false) :rule resolution :premises (t16.t0 t16.t1 t16.t17))
(step t16 (cl (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))) false) :rule subproof :discharge (t16.a0 t16.a1 t16.a2 t16.a3))
(step t17 (cl (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (p1 (f5 c_1) c_1)) :rule and_pos :args (0))
(step t18 (cl (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (= c_1 (f5 c_1))) :rule and_pos :args (1))
(step t19 (cl (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (= c_1 (f7 c_1))) :rule and_pos :args (2))
(step t20 (cl (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (p1 (f7 c_1) c_1))) :rule and_pos :args (3))
(step t21 (cl false (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t16 t17 t18 t19 t20))
(step t22 (cl (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) false) :rule reordering :premises (t21))
(step t23 (cl (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) false) :rule contraction :premises (t22))
(step t24 (cl (=> (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) false) :rule resolution :premises (t15 t23))
(step t25 (cl (=> (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (not false)) :rule implies_neg2)
(step t26 (cl (=> (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (=> (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) :rule resolution :premises (t24 t25))
(step t27 (cl (=> (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) :rule contraction :premises (t26))
(step t28 (cl (= (=> (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))))) :rule implies_simplify)
(step t29 (cl (not (=> (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule equiv1 :premises (t28))
(step t30 (cl (not (and (p1 (f5 c_1) c_1) (= c_1 (f5 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t27 t29))
(step t31 (cl (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) :rule not_and :premises (t30))
(step t32 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (p1 (f5 c_1) c_1)))) :rule or_neg :args (0))
(step t33 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (= c_1 (f5 c_1))))) :rule or_neg :args (1))
(step t34 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (= c_1 (f7 c_1))))) :rule or_neg :args (2))
(step t35 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (not (p1 (f7 c_1) c_1))))) :rule or_neg :args (3))
(step t36 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t31 t32 t33 t34 t35))
(step t37 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) :rule contraction :premises (t36))
(step t38 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (p1 (f7 c_1) c_1))) :rule resolution :premises (t0 t14 t37))
(step t39 (cl (not (p1 (f5 c_1) c_1)) (not (= c_1 (f5 c_1))) (not (= c_1 (f7 c_1))) (p1 (f7 c_1) c_1)) :rule or :premises (t38))
(step t40 (cl (p1 (f7 c_1) c_1) (not (p1 (f5 c_1) c_1)) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1)))) :rule reordering :premises (t39))
(step t41 (cl (not (= (or (= (f7 c_1) c_0) (= (f7 c_1) c_1)) (or (= c_0 (f7 c_1)) (= c_1 (f7 c_1))))) (not (or (= (f7 c_1) c_0) (= (f7 c_1) c_1))) (or (= c_0 (f7 c_1)) (= c_1 (f7 c_1)))) :rule equiv_pos2)
(step t42 (cl (= (= (f7 c_1) c_0) (= c_0 (f7 c_1)))) :rule rare_rewrite :args ("eq-symm" (f7 c_1) c_0))
(step t43 (cl (= (= (f7 c_1) c_1) (= c_1 (f7 c_1)))) :rule rare_rewrite :args ("eq-symm" (f7 c_1) c_1))
(step t44 (cl (= (or (= (f7 c_1) c_0) (= (f7 c_1) c_1)) (or (= c_0 (f7 c_1)) (= c_1 (f7 c_1))))) :rule cong :premises (t42 t43))
(step t45 (cl (or (= (f7 c_1) c_0) (= (f7 c_1) c_1))) :rule and :premises (a0) :args (250))
(step t46 (cl (or (= c_0 (f7 c_1)) (= c_1 (f7 c_1)))) :rule resolution :premises (t41 t44 t45))
(step t47 (cl (= c_0 (f7 c_1)) (= c_1 (f7 c_1))) :rule or :premises (t46))
(step t48 (cl (not (= (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (p1 (f7 c_1) c_1)))) (not (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (p1 (f7 c_1) c_1))) :rule equiv_pos2)
(step t49 (cl (= (not (p1 (f6 c_1) c_1)) (not (p1 (f6 c_1) c_1)))) :rule refl)
(step t50 (cl (= (not (= c_0 (f6 c_1))) (not (= c_0 (f6 c_1))))) :rule refl)
(step t51 (cl (= (not (= c_0 (f7 c_1))) (not (= c_0 (f7 c_1))))) :rule refl)
(step t52 (cl (= (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (p1 (f7 c_1) c_1)))) :rule cong :premises (t49 t50 t51 t13))
(step t53 (cl (=> (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) :rule implies_neg1)
(anchor :step t54)
(assume t54.a0 (p1 (f6 c_1) c_1))
(assume t54.a1 (= c_0 (f6 c_1)))
(assume t54.a2 (= c_0 (f7 c_1)))
(assume t54.a3 (not (p1 (f7 c_1) c_1)))
(step t54.t0 (cl (not (= (= false true) false)) (not (= false true)) false) :rule equiv_pos2)
(step t54.t1 (cl (= (= false true) false)) :rule rare_rewrite :args ("evaluate"))
(step t54.t2 (cl (= (= (p1 (f7 c_1) c_1) false) (not (p1 (f7 c_1) c_1)))) :rule equiv_simplify)
(step t54.t3 (cl (= (p1 (f7 c_1) c_1) false) (not (not (p1 (f7 c_1) c_1)))) :rule equiv2 :premises (t54.t2))
(step t54.t4 (cl (not (not (not (p1 (f7 c_1) c_1)))) (p1 (f7 c_1) c_1)) :rule not_not)
(step t54.t5 (cl (= (p1 (f7 c_1) c_1) false) (p1 (f7 c_1) c_1)) :rule resolution :premises (t54.t3 t54.t4))
(step t54.t6 (cl (= (p1 (f7 c_1) c_1) false)) :rule resolution :premises (t54.t5 t54.a3))
(step t54.t7 (cl (= false (p1 (f7 c_1) c_1))) :rule symm :premises (t54.t6))
(step t54.t8 (cl (= (f7 c_1) c_0)) :rule symm :premises (t54.a2))
(step t54.t9 (cl (= c_1 c_1)) :rule refl)
(step t54.t10 (cl (= (p1 (f7 c_1) c_1) (p1 c_0 c_1))) :rule cong :premises (t54.t8 t54.t9))
(step t54.t11 (cl (= (f6 c_1) c_0)) :rule symm :premises (t54.a1))
(step t54.t12 (cl (= c_0 (f6 c_1))) :rule symm :premises (t54.t11))
(step t54.t13 (cl (= (p1 c_0 c_1) (p1 (f6 c_1) c_1))) :rule cong :premises (t54.t12 t54.t9))
(step t54.t14 (cl (= (= (p1 (f6 c_1) c_1) true) (p1 (f6 c_1) c_1))) :rule equiv_simplify)
(step t54.t15 (cl (= (p1 (f6 c_1) c_1) true) (not (p1 (f6 c_1) c_1))) :rule equiv2 :premises (t54.t14))
(step t54.t16 (cl (= (p1 (f6 c_1) c_1) true)) :rule resolution :premises (t54.t15 t54.a0))
(step t54.t17 (cl (= false true)) :rule trans :premises (t54.t7 t54.t10 t54.t13 t54.t16))
(step t54.t18 (cl false) :rule resolution :premises (t54.t0 t54.t1 t54.t17))
(step t54 (cl (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))) false) :rule subproof :discharge (t54.a0 t54.a1 t54.a2 t54.a3))
(step t55 (cl (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (p1 (f6 c_1) c_1)) :rule and_pos :args (0))
(step t56 (cl (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (= c_0 (f6 c_1))) :rule and_pos :args (1))
(step t57 (cl (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (= c_0 (f7 c_1))) :rule and_pos :args (2))
(step t58 (cl (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (p1 (f7 c_1) c_1))) :rule and_pos :args (3))
(step t59 (cl false (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t54 t55 t56 t57 t58))
(step t60 (cl (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) false) :rule reordering :premises (t59))
(step t61 (cl (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) false) :rule contraction :premises (t60))
(step t62 (cl (=> (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) false) :rule resolution :premises (t53 t61))
(step t63 (cl (=> (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (not false)) :rule implies_neg2)
(step t64 (cl (=> (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (=> (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) :rule resolution :premises (t62 t63))
(step t65 (cl (=> (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) :rule contraction :premises (t64))
(step t66 (cl (= (=> (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))))) :rule implies_simplify)
(step t67 (cl (not (=> (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule equiv1 :premises (t66))
(step t68 (cl (not (and (p1 (f6 c_1) c_1) (= c_0 (f6 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t65 t67))
(step t69 (cl (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) :rule not_and :premises (t68))
(step t70 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (p1 (f6 c_1) c_1)))) :rule or_neg :args (0))
(step t71 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (= c_0 (f6 c_1))))) :rule or_neg :args (1))
(step t72 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (= c_0 (f7 c_1))))) :rule or_neg :args (2))
(step t73 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (not (p1 (f7 c_1) c_1))))) :rule or_neg :args (3))
(step t74 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t69 t70 t71 t72 t73))
(step t75 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) :rule contraction :premises (t74))
(step t76 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (p1 (f7 c_1) c_1))) :rule resolution :premises (t48 t52 t75))
(step t77 (cl (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1))) (p1 (f7 c_1) c_1)) :rule or :premises (t76))
(step t78 (cl (p1 (f7 c_1) c_1) (not (p1 (f6 c_1) c_1)) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1)))) :rule reordering :premises (t77))
(step t79 (cl (or (not (p1 (f7 c_1) c_1)) (not (p4 c_1)))) :rule and :premises (a0) :args (22))
(step t80 (cl (not (p1 (f7 c_1) c_1)) (not (p4 c_1))) :rule or :premises (t79))
(step t81 (cl (not (p4 c_1)) (not (p1 (f7 c_1) c_1))) :rule reordering :premises (t80))
(step t82 (cl (and (p4 c8) (= c8 c_1)) (not (p4 c8)) (not (= c8 c_1))) :rule and_neg)
(step t83 (cl (=> (and (p4 c8) (= c8 c_1)) (p4 c_1)) (and (p4 c8) (= c8 c_1))) :rule implies_neg1)
(anchor :step t84)
(assume t84.a0 (p4 c8))
(assume t84.a1 (= c8 c_1))
(step t84.t0 (cl (= (= (p4 c_1) true) (p4 c_1))) :rule equiv_simplify)
(step t84.t1 (cl (not (= (p4 c_1) true)) (p4 c_1)) :rule equiv1 :premises (t84.t0))
(step t84.t2 (cl (= c_1 c8)) :rule symm :premises (t84.a1))
(step t84.t3 (cl (= (p4 c_1) (p4 c8))) :rule cong :premises (t84.t2))
(step t84.t4 (cl (= (= (p4 c8) true) (p4 c8))) :rule equiv_simplify)
(step t84.t5 (cl (= (p4 c8) true) (not (p4 c8))) :rule equiv2 :premises (t84.t4))
(step t84.t6 (cl (p4 c8)) :rule and :premises (a0) :args (142))
(step t84.t7 (cl (= (p4 c8) true)) :rule resolution :premises (t84.t5 t84.t6))
(step t84.t8 (cl (= (p4 c_1) true)) :rule trans :premises (t84.t3 t84.t7))
(step t84.t9 (cl (p4 c_1)) :rule resolution :premises (t84.t1 t84.t8))
(step t84 (cl (not (p4 c8)) (not (= c8 c_1)) (p4 c_1)) :rule subproof :discharge (t84.a0 t84.a1))
(step t85 (cl (not (and (p4 c8) (= c8 c_1))) (p4 c8)) :rule and_pos :args (0))
(step t86 (cl (not (and (p4 c8) (= c8 c_1))) (= c8 c_1)) :rule and_pos :args (1))
(step t87 (cl (p4 c_1) (not (and (p4 c8) (= c8 c_1))) (not (and (p4 c8) (= c8 c_1)))) :rule resolution :premises (t84 t85 t86))
(step t88 (cl (not (and (p4 c8) (= c8 c_1))) (not (and (p4 c8) (= c8 c_1))) (p4 c_1)) :rule reordering :premises (t87))
(step t89 (cl (not (and (p4 c8) (= c8 c_1))) (p4 c_1)) :rule contraction :premises (t88))
(step t90 (cl (=> (and (p4 c8) (= c8 c_1)) (p4 c_1)) (p4 c_1)) :rule resolution :premises (t83 t89))
(step t91 (cl (=> (and (p4 c8) (= c8 c_1)) (p4 c_1)) (not (p4 c_1))) :rule implies_neg2)
(step t92 (cl (=> (and (p4 c8) (= c8 c_1)) (p4 c_1)) (=> (and (p4 c8) (= c8 c_1)) (p4 c_1))) :rule resolution :premises (t90 t91))
(step t93 (cl (=> (and (p4 c8) (= c8 c_1)) (p4 c_1))) :rule contraction :premises (t92))
(step t94 (cl (not (and (p4 c8) (= c8 c_1))) (p4 c_1)) :rule implies :premises (t93))
(step t95 (cl (not (p4 c8)) (not (= c8 c_1)) (p4 c_1)) :rule resolution :premises (t82 t94))
(step t96 (cl (p4 c_1) (not (p4 c8)) (not (= c8 c_1))) :rule reordering :premises (t95))
(step t97 (cl (p4 c8)) :rule and :premises (a0) :args (142))
(step t98 (cl (or (= c8 c_0) (= c8 c_1))) :rule and :premises (a0) :args (260))
(step t99 (cl (= c8 c_0) (= c8 c_1)) :rule or :premises (t98))
(step t100 (cl (and (p4 c8) (= c8 c_0)) (not (p4 c8)) (not (= c8 c_0))) :rule and_neg)
(step t101 (cl (=> (and (p4 c8) (= c8 c_0)) (p4 c_0)) (and (p4 c8) (= c8 c_0))) :rule implies_neg1)
(anchor :step t102)
(assume t102.a0 (p4 c8))
(assume t102.a1 (= c8 c_0))
(step t102.t0 (cl (= (= (p4 c_0) true) (p4 c_0))) :rule equiv_simplify)
(step t102.t1 (cl (not (= (p4 c_0) true)) (p4 c_0)) :rule equiv1 :premises (t102.t0))
(step t102.t2 (cl (= c_0 c8)) :rule symm :premises (t102.a1))
(step t102.t3 (cl (= (p4 c_0) (p4 c8))) :rule cong :premises (t102.t2))
(step t102.t4 (cl (= (= (p4 c8) true) (p4 c8))) :rule equiv_simplify)
(step t102.t5 (cl (= (p4 c8) true) (not (p4 c8))) :rule equiv2 :premises (t102.t4))
(step t102.t6 (cl (= (p4 c8) true)) :rule resolution :premises (t102.t5 t97))
(step t102.t7 (cl (= (p4 c_0) true)) :rule trans :premises (t102.t3 t102.t6))
(step t102.t8 (cl (p4 c_0)) :rule resolution :premises (t102.t1 t102.t7))
(step t102 (cl (not (p4 c8)) (not (= c8 c_0)) (p4 c_0)) :rule subproof :discharge (t102.a0 t102.a1))
(step t103 (cl (not (and (p4 c8) (= c8 c_0))) (p4 c8)) :rule and_pos :args (0))
(step t104 (cl (not (and (p4 c8) (= c8 c_0))) (= c8 c_0)) :rule and_pos :args (1))
(step t105 (cl (p4 c_0) (not (and (p4 c8) (= c8 c_0))) (not (and (p4 c8) (= c8 c_0)))) :rule resolution :premises (t102 t103 t104))
(step t106 (cl (not (and (p4 c8) (= c8 c_0))) (not (and (p4 c8) (= c8 c_0))) (p4 c_0)) :rule reordering :premises (t105))
(step t107 (cl (not (and (p4 c8) (= c8 c_0))) (p4 c_0)) :rule contraction :premises (t106))
(step t108 (cl (=> (and (p4 c8) (= c8 c_0)) (p4 c_0)) (p4 c_0)) :rule resolution :premises (t101 t107))
(step t109 (cl (=> (and (p4 c8) (= c8 c_0)) (p4 c_0)) (not (p4 c_0))) :rule implies_neg2)
(step t110 (cl (=> (and (p4 c8) (= c8 c_0)) (p4 c_0)) (=> (and (p4 c8) (= c8 c_0)) (p4 c_0))) :rule resolution :premises (t108 t109))
(step t111 (cl (=> (and (p4 c8) (= c8 c_0)) (p4 c_0))) :rule contraction :premises (t110))
(step t112 (cl (not (and (p4 c8) (= c8 c_0))) (p4 c_0)) :rule implies :premises (t111))
(step t113 (cl (not (p4 c8)) (not (= c8 c_0)) (p4 c_0)) :rule resolution :premises (t100 t112))
(step t114 (cl (p4 c_0) (not (p4 c8)) (not (= c8 c_0))) :rule reordering :premises (t113))
(step t115 (cl (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (not (= c_1 (f5 c_0))) (not (= c_1 (f6 c_0)))) :rule and_neg)
(step t116 (cl (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) :rule implies_neg1)
(anchor :step t117)
(assume t117.a0 (= c_1 (f5 c_0)))
(assume t117.a1 (= c_1 (f6 c_0)))
(step t117.t0 (cl (= (f6 c_0) c_1)) :rule symm :premises (t117.a1))
(step t117.t1 (cl (= (f5 c_0) c_1)) :rule symm :premises (t117.a0))
(step t117.t2 (cl (= c_1 (f5 c_0))) :rule symm :premises (t117.t1))
(step t117.t3 (cl (= (f6 c_0) (f5 c_0))) :rule trans :premises (t117.t0 t117.t2))
(step t117 (cl (not (= c_1 (f5 c_0))) (not (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) :rule subproof :discharge (t117.a0 t117.a1))
(step t118 (cl (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (= c_1 (f5 c_0))) :rule and_pos :args (0))
(step t119 (cl (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (= c_1 (f6 c_0))) :rule and_pos :args (1))
(step t120 (cl (= (f6 c_0) (f5 c_0)) (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))))) :rule resolution :premises (t117 t118 t119))
(step t121 (cl (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule reordering :premises (t120))
(step t122 (cl (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule contraction :premises (t121))
(step t123 (cl (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (= (f6 c_0) (f5 c_0))) :rule resolution :premises (t116 t122))
(step t124 (cl (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (not (= (f6 c_0) (f5 c_0)))) :rule implies_neg2)
(step t125 (cl (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0)))) :rule resolution :premises (t123 t124))
(step t126 (cl (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0)))) :rule contraction :premises (t125))
(step t127 (cl (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule implies :premises (t126))
(step t128 (cl (not (= c_1 (f5 c_0))) (not (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) :rule resolution :premises (t115 t127))
(step t129 (cl (= (f6 c_0) (f5 c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f5 c_0)))) :rule reordering :premises (t128))
(step t130 (cl (not (= (or (= (f6 c_0) c_0) (= (f6 c_0) c_1)) (or (= c_0 (f6 c_0)) (= c_1 (f6 c_0))))) (not (or (= (f6 c_0) c_0) (= (f6 c_0) c_1))) (or (= c_0 (f6 c_0)) (= c_1 (f6 c_0)))) :rule equiv_pos2)
(step t131 (cl (= (= (f6 c_0) c_0) (= c_0 (f6 c_0)))) :rule rare_rewrite :args ("eq-symm" (f6 c_0) c_0))
(step t132 (cl (= (= (f6 c_0) c_1) (= c_1 (f6 c_0)))) :rule rare_rewrite :args ("eq-symm" (f6 c_0) c_1))
(step t133 (cl (= (or (= (f6 c_0) c_0) (= (f6 c_0) c_1)) (or (= c_0 (f6 c_0)) (= c_1 (f6 c_0))))) :rule cong :premises (t131 t132))
(step t134 (cl (or (= (f6 c_0) c_0) (= (f6 c_0) c_1))) :rule and :premises (a0) :args (253))
(step t135 (cl (or (= c_0 (f6 c_0)) (= c_1 (f6 c_0)))) :rule resolution :premises (t130 t133 t134))
(step t136 (cl (= c_0 (f6 c_0)) (= c_1 (f6 c_0))) :rule or :premises (t135))
(step t137 (cl (not (= (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (or (p1 (f7 c_0) c_0) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))))) (not (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0)))) (or (p1 (f7 c_0) c_0) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0)))) :rule equiv_pos2)
(step t138 (cl (= (= (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)) true) (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)))) :rule equiv_simplify)
(step t139 (cl (not (= (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)) true)) (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0))) :rule equiv1 :premises (t138))
(step t140 (cl (= (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)) (= (p1 (f7 c_0) c_0) (not (not (p1 (f7 c_0) c_0)))))) :rule rare_rewrite :args ("eq-symm" (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)))
(step t141 (cl (= (p1 (f7 c_0) c_0) (p1 (f7 c_0) c_0))) :rule refl)
(step t142 (cl (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0))) :rule rare_rewrite :args ("bool-double-not-elim" (p1 (f7 c_0) c_0)))
(step t143 (cl (= (= (p1 (f7 c_0) c_0) (not (not (p1 (f7 c_0) c_0)))) (= (p1 (f7 c_0) c_0) (p1 (f7 c_0) c_0)))) :rule cong :premises (t141 t142))
(step t144 (cl (= (= (p1 (f7 c_0) c_0) (p1 (f7 c_0) c_0)) true)) :rule rare_rewrite :args ("eq-refl" (p1 (f7 c_0) c_0)))
(step t145 (cl (= (= (p1 (f7 c_0) c_0) (not (not (p1 (f7 c_0) c_0)))) true)) :rule trans :premises (t143 t144))
(step t146 (cl (= (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)) true)) :rule trans :premises (t140 t145))
(step t147 (cl (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0))) :rule resolution :premises (t139 t146))
(step t148 (cl (= (not (= c_0 (f7 c_0))) (not (= c_0 (f7 c_0))))) :rule refl)
(step t149 (cl (= (not (= c_0 (f6 c_0))) (not (= c_0 (f6 c_0))))) :rule refl)
(step t150 (cl (= (not (p1 (f6 c_0) c_0)) (not (p1 (f6 c_0) c_0)))) :rule refl)
(step t151 (cl (= (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (or (p1 (f7 c_0) c_0) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))))) :rule cong :premises (t147 t148 t149 t150))
(step t152 (cl (=> (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0)) false) (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) :rule implies_neg1)
(anchor :step t153)
(assume t153.a0 (not (p1 (f7 c_0) c_0)))
(assume t153.a1 (= c_0 (f7 c_0)))
(assume t153.a2 (= c_0 (f6 c_0)))
(assume t153.a3 (p1 (f6 c_0) c_0))
(step t153.t0 (cl (not (= (= true false) false)) (not (= true false)) false) :rule equiv_pos2)
(step t153.t1 (cl (= (= true false) false)) :rule rare_rewrite :args ("evaluate"))
(step t153.t2 (cl (= (= (p1 (f6 c_0) c_0) true) (p1 (f6 c_0) c_0))) :rule equiv_simplify)
(step t153.t3 (cl (= (p1 (f6 c_0) c_0) true) (not (p1 (f6 c_0) c_0))) :rule equiv2 :premises (t153.t2))
(step t153.t4 (cl (= (p1 (f6 c_0) c_0) true)) :rule resolution :premises (t153.t3 t153.a3))
(step t153.t5 (cl (= true (p1 (f6 c_0) c_0))) :rule symm :premises (t153.t4))
(step t153.t6 (cl (= (f6 c_0) c_0)) :rule symm :premises (t153.a2))
(step t153.t7 (cl (= c_0 c_0)) :rule refl)
(step t153.t8 (cl (= (p1 (f6 c_0) c_0) (p1 c_0 c_0))) :rule cong :premises (t153.t6 t153.t7))
(step t153.t9 (cl (= (f7 c_0) c_0)) :rule symm :premises (t153.a1))
(step t153.t10 (cl (= c_0 (f7 c_0))) :rule symm :premises (t153.t9))
(step t153.t11 (cl (= (p1 c_0 c_0) (p1 (f7 c_0) c_0))) :rule cong :premises (t153.t10 t153.t7))
(step t153.t12 (cl (= (= (p1 (f7 c_0) c_0) false) (not (p1 (f7 c_0) c_0)))) :rule equiv_simplify)
(step t153.t13 (cl (= (p1 (f7 c_0) c_0) false) (not (not (p1 (f7 c_0) c_0)))) :rule equiv2 :premises (t153.t12))
(step t153.t14 (cl (not (not (not (p1 (f7 c_0) c_0)))) (p1 (f7 c_0) c_0)) :rule not_not)
(step t153.t15 (cl (= (p1 (f7 c_0) c_0) false) (p1 (f7 c_0) c_0)) :rule resolution :premises (t153.t13 t153.t14))
(step t153.t16 (cl (= (p1 (f7 c_0) c_0) false)) :rule resolution :premises (t153.t15 t153.a0))
(step t153.t17 (cl (= true false)) :rule trans :premises (t153.t5 t153.t8 t153.t11 t153.t16))
(step t153.t18 (cl false) :rule resolution :premises (t153.t0 t153.t1 t153.t17))
(step t153 (cl (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0)) false) :rule subproof :discharge (t153.a0 t153.a1 t153.a2 t153.a3))
(step t154 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (p1 (f7 c_0) c_0))) :rule and_pos :args (0))
(step t155 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) (= c_0 (f7 c_0))) :rule and_pos :args (1))
(step t156 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) (= c_0 (f6 c_0))) :rule and_pos :args (2))
(step t157 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) (p1 (f6 c_0) c_0)) :rule and_pos :args (3))
(step t158 (cl false (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0)))) :rule resolution :premises (t153 t154 t155 t156 t157))
(step t159 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) false) :rule reordering :premises (t158))
(step t160 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))) false) :rule contraction :premises (t159))
(step t161 (cl (=> (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0)) false) false) :rule resolution :premises (t152 t160))
(step t162 (cl (=> (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0)) false) (not false)) :rule implies_neg2)
(step t163 (cl (=> (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0)) false) (=> (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0)) false)) :rule resolution :premises (t161 t162))
(step t164 (cl (=> (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0)) false)) :rule contraction :premises (t163))
(step t165 (cl (= (=> (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0)) false) (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0))))) :rule implies_simplify)
(step t166 (cl (not (=> (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0)) false)) (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0)))) :rule equiv1 :premises (t165))
(step t167 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_0 (f7 c_0)) (= c_0 (f6 c_0)) (p1 (f6 c_0) c_0)))) :rule resolution :premises (t164 t166))
(step t168 (cl (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))) :rule not_and :premises (t167))
(step t169 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (not (not (not (p1 (f7 c_0) c_0))))) :rule or_neg :args (0))
(step t170 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (not (not (= c_0 (f7 c_0))))) :rule or_neg :args (1))
(step t171 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (not (not (= c_0 (f6 c_0))))) :rule or_neg :args (2))
(step t172 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (not (not (p1 (f6 c_0) c_0)))) :rule or_neg :args (3))
(step t173 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0)))) :rule resolution :premises (t168 t169 t170 t171 t172))
(step t174 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0)))) :rule contraction :premises (t173))
(step t175 (cl (or (p1 (f7 c_0) c_0) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0)))) :rule resolution :premises (t137 t151 t174))
(step t176 (cl (p1 (f7 c_0) c_0) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0))) (not (p1 (f6 c_0) c_0))) :rule or :premises (t175))
(step t177 (cl (p1 (f7 c_0) c_0) (not (p1 (f6 c_0) c_0)) (not (= c_0 (f7 c_0))) (not (= c_0 (f6 c_0)))) :rule reordering :premises (t176))
(step t178 (cl (not (= (or (= (f7 c_0) c_0) (= (f7 c_0) c_1)) (or (= c_0 (f7 c_0)) (= c_1 (f7 c_0))))) (not (or (= (f7 c_0) c_0) (= (f7 c_0) c_1))) (or (= c_0 (f7 c_0)) (= c_1 (f7 c_0)))) :rule equiv_pos2)
(step t179 (cl (= (= (f7 c_0) c_0) (= c_0 (f7 c_0)))) :rule rare_rewrite :args ("eq-symm" (f7 c_0) c_0))
(step t180 (cl (= (= (f7 c_0) c_1) (= c_1 (f7 c_0)))) :rule rare_rewrite :args ("eq-symm" (f7 c_0) c_1))
(step t181 (cl (= (or (= (f7 c_0) c_0) (= (f7 c_0) c_1)) (or (= c_0 (f7 c_0)) (= c_1 (f7 c_0))))) :rule cong :premises (t179 t180))
(step t182 (cl (or (= (f7 c_0) c_0) (= (f7 c_0) c_1))) :rule and :premises (a0) :args (249))
(step t183 (cl (or (= c_0 (f7 c_0)) (= c_1 (f7 c_0)))) :rule resolution :premises (t178 t181 t182))
(step t184 (cl (= c_0 (f7 c_0)) (= c_1 (f7 c_0))) :rule or :premises (t183))
(step t185 (cl (not (= (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0)))) (not (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule equiv_pos2)
(step t186 (cl (= (not (p1 (f5 c_0) c_0)) (not (p1 (f5 c_0) c_0)))) :rule refl)
(step t187 (cl (= (not (= c_1 (f5 c_0))) (not (= c_1 (f5 c_0))))) :rule refl)
(step t188 (cl (= (not (= c_1 (f7 c_0))) (not (= c_1 (f7 c_0))))) :rule refl)
(step t189 (cl (= (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0)))) :rule cong :premises (t186 t187 t188 t147))
(step t190 (cl (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) :rule implies_neg1)
(anchor :step t191)
(assume t191.a0 (p1 (f5 c_0) c_0))
(assume t191.a1 (= c_1 (f5 c_0)))
(assume t191.a2 (= c_1 (f7 c_0)))
(assume t191.a3 (not (p1 (f7 c_0) c_0)))
(step t191.t0 (cl (not (= (= false true) false)) (not (= false true)) false) :rule equiv_pos2)
(step t191.t1 (cl (= (= false true) false)) :rule rare_rewrite :args ("evaluate"))
(step t191.t2 (cl (= (= (p1 (f7 c_0) c_0) false) (not (p1 (f7 c_0) c_0)))) :rule equiv_simplify)
(step t191.t3 (cl (= (p1 (f7 c_0) c_0) false) (not (not (p1 (f7 c_0) c_0)))) :rule equiv2 :premises (t191.t2))
(step t191.t4 (cl (not (not (not (p1 (f7 c_0) c_0)))) (p1 (f7 c_0) c_0)) :rule not_not)
(step t191.t5 (cl (= (p1 (f7 c_0) c_0) false) (p1 (f7 c_0) c_0)) :rule resolution :premises (t191.t3 t191.t4))
(step t191.t6 (cl (= (p1 (f7 c_0) c_0) false)) :rule resolution :premises (t191.t5 t191.a3))
(step t191.t7 (cl (= false (p1 (f7 c_0) c_0))) :rule symm :premises (t191.t6))
(step t191.t8 (cl (= (f7 c_0) c_1)) :rule symm :premises (t191.a2))
(step t191.t9 (cl (= c_0 c_0)) :rule refl)
(step t191.t10 (cl (= (p1 (f7 c_0) c_0) (p1 c_1 c_0))) :rule cong :premises (t191.t8 t191.t9))
(step t191.t11 (cl (= (f5 c_0) c_1)) :rule symm :premises (t191.a1))
(step t191.t12 (cl (= c_1 (f5 c_0))) :rule symm :premises (t191.t11))
(step t191.t13 (cl (= (p1 c_1 c_0) (p1 (f5 c_0) c_0))) :rule cong :premises (t191.t12 t191.t9))
(step t191.t14 (cl (= (= (p1 (f5 c_0) c_0) true) (p1 (f5 c_0) c_0))) :rule equiv_simplify)
(step t191.t15 (cl (= (p1 (f5 c_0) c_0) true) (not (p1 (f5 c_0) c_0))) :rule equiv2 :premises (t191.t14))
(step t191.t16 (cl (= (p1 (f5 c_0) c_0) true)) :rule resolution :premises (t191.t15 t191.a0))
(step t191.t17 (cl (= false true)) :rule trans :premises (t191.t7 t191.t10 t191.t13 t191.t16))
(step t191.t18 (cl false) :rule resolution :premises (t191.t0 t191.t1 t191.t17))
(step t191 (cl (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))) false) :rule subproof :discharge (t191.a0 t191.a1 t191.a2 t191.a3))
(step t192 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (p1 (f5 c_0) c_0)) :rule and_pos :args (0))
(step t193 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_1 (f5 c_0))) :rule and_pos :args (1))
(step t194 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_1 (f7 c_0))) :rule and_pos :args (2))
(step t195 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (p1 (f7 c_0) c_0))) :rule and_pos :args (3))
(step t196 (cl false (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t191 t192 t193 t194 t195))
(step t197 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule reordering :premises (t196))
(step t198 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule contraction :premises (t197))
(step t199 (cl (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) false) :rule resolution :premises (t190 t198))
(step t200 (cl (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not false)) :rule implies_neg2)
(step t201 (cl (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule resolution :premises (t199 t200))
(step t202 (cl (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule contraction :premises (t201))
(step t203 (cl (= (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))))) :rule implies_simplify)
(step t204 (cl (not (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule equiv1 :premises (t203))
(step t205 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t202 t204))
(step t206 (cl (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) :rule not_and :premises (t205))
(step t207 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (p1 (f5 c_0) c_0)))) :rule or_neg :args (0))
(step t208 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_1 (f5 c_0))))) :rule or_neg :args (1))
(step t209 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_1 (f7 c_0))))) :rule or_neg :args (2))
(step t210 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (not (p1 (f7 c_0) c_0))))) :rule or_neg :args (3))
(step t211 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t206 t207 t208 t209 t210))
(step t212 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule contraction :premises (t211))
(step t213 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule resolution :premises (t185 t189 t212))
(step t214 (cl (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0)) :rule or :premises (t213))
(step t215 (cl (p1 (f7 c_0) c_0) (not (p1 (f5 c_0) c_0)) (not (= c_1 (f7 c_0))) (not (= c_1 (f5 c_0)))) :rule reordering :premises (t214))
(step t216 (cl (not (= (or (= (f5 c_0) c_0) (= (f5 c_0) c_1)) (or (= c_0 (f5 c_0)) (= c_1 (f5 c_0))))) (not (or (= (f5 c_0) c_0) (= (f5 c_0) c_1))) (or (= c_0 (f5 c_0)) (= c_1 (f5 c_0)))) :rule equiv_pos2)
(step t217 (cl (= (= (f5 c_0) c_0) (= c_0 (f5 c_0)))) :rule rare_rewrite :args ("eq-symm" (f5 c_0) c_0))
(step t218 (cl (= (= (f5 c_0) c_1) (= c_1 (f5 c_0)))) :rule rare_rewrite :args ("eq-symm" (f5 c_0) c_1))
(step t219 (cl (= (or (= (f5 c_0) c_0) (= (f5 c_0) c_1)) (or (= c_0 (f5 c_0)) (= c_1 (f5 c_0))))) :rule cong :premises (t217 t218))
(step t220 (cl (or (= (f5 c_0) c_0) (= (f5 c_0) c_1))) :rule and :premises (a0) :args (255))
(step t221 (cl (or (= c_0 (f5 c_0)) (= c_1 (f5 c_0)))) :rule resolution :premises (t216 t219 t220))
(step t222 (cl (= c_0 (f5 c_0)) (= c_1 (f5 c_0))) :rule or :premises (t221))
(step t223 (cl (not (= (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0)))) (not (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule equiv_pos2)
(step t224 (cl (= (not (= c_1 (f6 c_0))) (not (= c_1 (f6 c_0))))) :rule refl)
(step t225 (cl (= (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0)))) :rule cong :premises (t150 t224 t188 t147))
(step t226 (cl (=> (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) :rule implies_neg1)
(anchor :step t227)
(assume t227.a0 (p1 (f6 c_0) c_0))
(assume t227.a1 (= c_1 (f6 c_0)))
(assume t227.a2 (= c_1 (f7 c_0)))
(assume t227.a3 (not (p1 (f7 c_0) c_0)))
(step t227.t0 (cl (not (= (= false true) false)) (not (= false true)) false) :rule equiv_pos2)
(step t227.t1 (cl (= (= false true) false)) :rule rare_rewrite :args ("evaluate"))
(step t227.t2 (cl (= (= (p1 (f7 c_0) c_0) false) (not (p1 (f7 c_0) c_0)))) :rule equiv_simplify)
(step t227.t3 (cl (= (p1 (f7 c_0) c_0) false) (not (not (p1 (f7 c_0) c_0)))) :rule equiv2 :premises (t227.t2))
(step t227.t4 (cl (not (not (not (p1 (f7 c_0) c_0)))) (p1 (f7 c_0) c_0)) :rule not_not)
(step t227.t5 (cl (= (p1 (f7 c_0) c_0) false) (p1 (f7 c_0) c_0)) :rule resolution :premises (t227.t3 t227.t4))
(step t227.t6 (cl (= (p1 (f7 c_0) c_0) false)) :rule resolution :premises (t227.t5 t227.a3))
(step t227.t7 (cl (= false (p1 (f7 c_0) c_0))) :rule symm :premises (t227.t6))
(step t227.t8 (cl (= (f7 c_0) c_1)) :rule symm :premises (t227.a2))
(step t227.t9 (cl (= c_0 c_0)) :rule refl)
(step t227.t10 (cl (= (p1 (f7 c_0) c_0) (p1 c_1 c_0))) :rule cong :premises (t227.t8 t227.t9))
(step t227.t11 (cl (= (f6 c_0) c_1)) :rule symm :premises (t227.a1))
(step t227.t12 (cl (= c_1 (f6 c_0))) :rule symm :premises (t227.t11))
(step t227.t13 (cl (= (p1 c_1 c_0) (p1 (f6 c_0) c_0))) :rule cong :premises (t227.t12 t227.t9))
(step t227.t14 (cl (= (= (p1 (f6 c_0) c_0) true) (p1 (f6 c_0) c_0))) :rule equiv_simplify)
(step t227.t15 (cl (= (p1 (f6 c_0) c_0) true) (not (p1 (f6 c_0) c_0))) :rule equiv2 :premises (t227.t14))
(step t227.t16 (cl (= (p1 (f6 c_0) c_0) true)) :rule resolution :premises (t227.t15 t227.a0))
(step t227.t17 (cl (= false true)) :rule trans :premises (t227.t7 t227.t10 t227.t13 t227.t16))
(step t227.t18 (cl false) :rule resolution :premises (t227.t0 t227.t1 t227.t17))
(step t227 (cl (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))) false) :rule subproof :discharge (t227.a0 t227.a1 t227.a2 t227.a3))
(step t228 (cl (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (p1 (f6 c_0) c_0)) :rule and_pos :args (0))
(step t229 (cl (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_1 (f6 c_0))) :rule and_pos :args (1))
(step t230 (cl (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_1 (f7 c_0))) :rule and_pos :args (2))
(step t231 (cl (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (p1 (f7 c_0) c_0))) :rule and_pos :args (3))
(step t232 (cl false (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t227 t228 t229 t230 t231))
(step t233 (cl (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule reordering :premises (t232))
(step t234 (cl (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule contraction :premises (t233))
(step t235 (cl (=> (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) false) :rule resolution :premises (t226 t234))
(step t236 (cl (=> (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not false)) :rule implies_neg2)
(step t237 (cl (=> (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (=> (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule resolution :premises (t235 t236))
(step t238 (cl (=> (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule contraction :premises (t237))
(step t239 (cl (= (=> (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))))) :rule implies_simplify)
(step t240 (cl (not (=> (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule equiv1 :premises (t239))
(step t241 (cl (not (and (p1 (f6 c_0) c_0) (= c_1 (f6 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t238 t240))
(step t242 (cl (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) :rule not_and :premises (t241))
(step t243 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (p1 (f6 c_0) c_0)))) :rule or_neg :args (0))
(step t244 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_1 (f6 c_0))))) :rule or_neg :args (1))
(step t245 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_1 (f7 c_0))))) :rule or_neg :args (2))
(step t246 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (not (p1 (f7 c_0) c_0))))) :rule or_neg :args (3))
(step t247 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t242 t243 t244 t245 t246))
(step t248 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule contraction :premises (t247))
(step t249 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule resolution :premises (t223 t225 t248))
(step t250 (cl (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0)) :rule or :premises (t249))
(step t251 (cl (p1 (f7 c_0) c_0) (not (p1 (f6 c_0) c_0)) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0)))) :rule reordering :premises (t250))
(step t252 (cl (= c_0 (f7 c_0)) (= c_1 (f7 c_0))) :rule or :premises (t183))
(step t253 (cl (not (= (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0)))) (not (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule equiv_pos2)
(step t254 (cl (= (not (= c_0 (f5 c_0))) (not (= c_0 (f5 c_0))))) :rule refl)
(step t255 (cl (= (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0)))) :rule cong :premises (t186 t254 t148 t147))
(step t256 (cl (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) :rule implies_neg1)
(anchor :step t257)
(assume t257.a0 (p1 (f5 c_0) c_0))
(assume t257.a1 (= c_0 (f5 c_0)))
(assume t257.a2 (= c_0 (f7 c_0)))
(assume t257.a3 (not (p1 (f7 c_0) c_0)))
(step t257.t0 (cl (not (= (= false true) false)) (not (= false true)) false) :rule equiv_pos2)
(step t257.t1 (cl (= (= false true) false)) :rule rare_rewrite :args ("evaluate"))
(step t257.t2 (cl (= (= (p1 (f7 c_0) c_0) false) (not (p1 (f7 c_0) c_0)))) :rule equiv_simplify)
(step t257.t3 (cl (= (p1 (f7 c_0) c_0) false) (not (not (p1 (f7 c_0) c_0)))) :rule equiv2 :premises (t257.t2))
(step t257.t4 (cl (not (not (not (p1 (f7 c_0) c_0)))) (p1 (f7 c_0) c_0)) :rule not_not)
(step t257.t5 (cl (= (p1 (f7 c_0) c_0) false) (p1 (f7 c_0) c_0)) :rule resolution :premises (t257.t3 t257.t4))
(step t257.t6 (cl (= (p1 (f7 c_0) c_0) false)) :rule resolution :premises (t257.t5 t257.a3))
(step t257.t7 (cl (= false (p1 (f7 c_0) c_0))) :rule symm :premises (t257.t6))
(step t257.t8 (cl (= (f7 c_0) c_0)) :rule symm :premises (t257.a2))
(step t257.t9 (cl (= c_0 c_0)) :rule refl)
(step t257.t10 (cl (= (p1 (f7 c_0) c_0) (p1 c_0 c_0))) :rule cong :premises (t257.t8 t257.t9))
(step t257.t11 (cl (= (f5 c_0) c_0)) :rule symm :premises (t257.a1))
(step t257.t12 (cl (= c_0 (f5 c_0))) :rule symm :premises (t257.t11))
(step t257.t13 (cl (= (p1 c_0 c_0) (p1 (f5 c_0) c_0))) :rule cong :premises (t257.t12 t257.t9))
(step t257.t14 (cl (= (= (p1 (f5 c_0) c_0) true) (p1 (f5 c_0) c_0))) :rule equiv_simplify)
(step t257.t15 (cl (= (p1 (f5 c_0) c_0) true) (not (p1 (f5 c_0) c_0))) :rule equiv2 :premises (t257.t14))
(step t257.t16 (cl (= (p1 (f5 c_0) c_0) true)) :rule resolution :premises (t257.t15 t257.a0))
(step t257.t17 (cl (= false true)) :rule trans :premises (t257.t7 t257.t10 t257.t13 t257.t16))
(step t257.t18 (cl false) :rule resolution :premises (t257.t0 t257.t1 t257.t17))
(step t257 (cl (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))) false) :rule subproof :discharge (t257.a0 t257.a1 t257.a2 t257.a3))
(step t258 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (p1 (f5 c_0) c_0)) :rule and_pos :args (0))
(step t259 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_0 (f5 c_0))) :rule and_pos :args (1))
(step t260 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_0 (f7 c_0))) :rule and_pos :args (2))
(step t261 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (p1 (f7 c_0) c_0))) :rule and_pos :args (3))
(step t262 (cl false (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t257 t258 t259 t260 t261))
(step t263 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule reordering :premises (t262))
(step t264 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule contraction :premises (t263))
(step t265 (cl (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) false) :rule resolution :premises (t256 t264))
(step t266 (cl (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not false)) :rule implies_neg2)
(step t267 (cl (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule resolution :premises (t265 t266))
(step t268 (cl (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule contraction :premises (t267))
(step t269 (cl (= (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))))) :rule implies_simplify)
(step t270 (cl (not (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule equiv1 :premises (t269))
(step t271 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t268 t270))
(step t272 (cl (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) :rule not_and :premises (t271))
(step t273 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (p1 (f5 c_0) c_0)))) :rule or_neg :args (0))
(step t274 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_0 (f5 c_0))))) :rule or_neg :args (1))
(step t275 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_0 (f7 c_0))))) :rule or_neg :args (2))
(step t276 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (not (p1 (f7 c_0) c_0))))) :rule or_neg :args (3))
(step t277 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t272 t273 t274 t275 t276))
(step t278 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule contraction :premises (t277))
(step t279 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule resolution :premises (t253 t255 t278))
(step t280 (cl (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0)) :rule or :premises (t279))
(step t281 (cl (p1 (f7 c_0) c_0) (not (p1 (f5 c_0) c_0)) (not (= c_0 (f7 c_0))) (not (= c_0 (f5 c_0)))) :rule reordering :premises (t280))
(step t282 (cl (= c_0 (f6 c_0)) (= c_1 (f6 c_0))) :rule or :premises (t135))
(step t283 (cl (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (not (= c_0 (f5 c_0))) (not (= c_0 (f6 c_0)))) :rule and_neg)
(step t284 (cl (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) :rule implies_neg1)
(anchor :step t285)
(assume t285.a0 (= c_0 (f5 c_0)))
(assume t285.a1 (= c_0 (f6 c_0)))
(step t285.t0 (cl (= (f6 c_0) c_0)) :rule symm :premises (t285.a1))
(step t285.t1 (cl (= (f5 c_0) c_0)) :rule symm :premises (t285.a0))
(step t285.t2 (cl (= c_0 (f5 c_0))) :rule symm :premises (t285.t1))
(step t285.t3 (cl (= (f6 c_0) (f5 c_0))) :rule trans :premises (t285.t0 t285.t2))
(step t285 (cl (not (= c_0 (f5 c_0))) (not (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) :rule subproof :discharge (t285.a0 t285.a1))
(step t286 (cl (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (= c_0 (f5 c_0))) :rule and_pos :args (0))
(step t287 (cl (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (= c_0 (f6 c_0))) :rule and_pos :args (1))
(step t288 (cl (= (f6 c_0) (f5 c_0)) (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))))) :rule resolution :premises (t285 t286 t287))
(step t289 (cl (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule reordering :premises (t288))
(step t290 (cl (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule contraction :premises (t289))
(step t291 (cl (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (= (f6 c_0) (f5 c_0))) :rule resolution :premises (t284 t290))
(step t292 (cl (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (not (= (f6 c_0) (f5 c_0)))) :rule implies_neg2)
(step t293 (cl (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0)))) :rule resolution :premises (t291 t292))
(step t294 (cl (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0)))) :rule contraction :premises (t293))
(step t295 (cl (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule implies :premises (t294))
(step t296 (cl (not (= c_0 (f5 c_0))) (not (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) :rule resolution :premises (t283 t295))
(step t297 (cl (= (f6 c_0) (f5 c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f5 c_0)))) :rule reordering :premises (t296))
(step t298 (cl (p1 (f7 c_0) c_0) (= (f6 c_0) (f5 c_0)) (not (p1 (f6 c_0) c_0)) (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0)))) :rule resolution :premises (t251 t252 t281 t282 t297))
(step t299 (cl (not (= (or (not (= (f5 c_0) (f6 c_0))) (not (p4 c_0))) (or (not (= (f6 c_0) (f5 c_0))) (not (p4 c_0))))) (not (or (not (= (f5 c_0) (f6 c_0))) (not (p4 c_0)))) (or (not (= (f6 c_0) (f5 c_0))) (not (p4 c_0)))) :rule equiv_pos2)
(step t300 (cl (= (= (f5 c_0) (f6 c_0)) (= (f6 c_0) (f5 c_0)))) :rule rare_rewrite :args ("eq-symm" (f5 c_0) (f6 c_0)))
(step t301 (cl (= (not (= (f5 c_0) (f6 c_0))) (not (= (f6 c_0) (f5 c_0))))) :rule cong :premises (t300))
(step t302 (cl (= (not (p4 c_0)) (not (p4 c_0)))) :rule refl)
(step t303 (cl (= (or (not (= (f5 c_0) (f6 c_0))) (not (p4 c_0))) (or (not (= (f6 c_0) (f5 c_0))) (not (p4 c_0))))) :rule cong :premises (t301 t302))
(step t304 (cl (or (not (= (f5 c_0) (f6 c_0))) (not (p4 c_0)))) :rule and :premises (a0) :args (219))
(step t305 (cl (or (not (= (f6 c_0) (f5 c_0))) (not (p4 c_0)))) :rule resolution :premises (t299 t303 t304))
(step t306 (cl (not (= (f6 c_0) (f5 c_0))) (not (p4 c_0))) :rule or :premises (t305))
(step t307 (cl (not (p4 c_0)) (not (= (f6 c_0) (f5 c_0)))) :rule reordering :premises (t306))
(step t308 (cl (or (p1 (f5 c_0) c_0) (not (p4 c_0)))) :rule and :premises (a0) :args (60))
(step t309 (cl (p1 (f5 c_0) c_0) (not (p4 c_0))) :rule or :premises (t308))
(step t310 (cl (not (p4 c_0)) (p1 (f5 c_0) c_0)) :rule reordering :premises (t309))
(step t311 (cl (or (not (p4 c_0)) (p1 (f6 c_0) c_0))) :rule and :premises (a0) :args (58))
(step t312 (cl (not (p4 c_0)) (p1 (f6 c_0) c_0)) :rule or :premises (t311))
(step t313 (cl (or (not (p1 (f7 c_0) c_0)) (not (p4 c_0)))) :rule and :premises (a0) :args (21))
(step t314 (cl (not (p1 (f7 c_0) c_0)) (not (p4 c_0))) :rule or :premises (t313))
(step t315 (cl (not (p4 c_0)) (not (p1 (f7 c_0) c_0))) :rule reordering :premises (t314))
(step t316 (cl (not (p4 c_0))) :rule resolution :premises (t129 t136 t177 t184 t215 t222 t298 t307 t310 t312 t315))
(step t317 (cl (not (= c8 c_0))) :rule resolution :premises (t114 t316 t97))
(step t318 (cl (= c8 c_1)) :rule resolution :premises (t99 t317))
(step t319 (cl (p4 c_1)) :rule resolution :premises (t96 t97 t318))
(step t320 (cl (not (p1 (f7 c_1) c_1))) :rule resolution :premises (t81 t319))
(step t321 (cl (or (not (p4 c_1)) (p1 (f6 c_1) c_1))) :rule and :premises (a0) :args (59))
(step t322 (cl (not (p4 c_1)) (p1 (f6 c_1) c_1)) :rule or :premises (t321))
(step t323 (cl (p1 (f6 c_1) c_1)) :rule resolution :premises (t322 t319))
(step t324 (cl (not (= (or (= (f6 c_1) c_0) (= (f6 c_1) c_1)) (or (= c_0 (f6 c_1)) (= c_1 (f6 c_1))))) (not (or (= (f6 c_1) c_0) (= (f6 c_1) c_1))) (or (= c_0 (f6 c_1)) (= c_1 (f6 c_1)))) :rule equiv_pos2)
(step t325 (cl (= (= (f6 c_1) c_0) (= c_0 (f6 c_1)))) :rule rare_rewrite :args ("eq-symm" (f6 c_1) c_0))
(step t326 (cl (= (= (f6 c_1) c_1) (= c_1 (f6 c_1)))) :rule rare_rewrite :args ("eq-symm" (f6 c_1) c_1))
(step t327 (cl (= (or (= (f6 c_1) c_0) (= (f6 c_1) c_1)) (or (= c_0 (f6 c_1)) (= c_1 (f6 c_1))))) :rule cong :premises (t325 t326))
(step t328 (cl (or (= (f6 c_1) c_0) (= (f6 c_1) c_1))) :rule and :premises (a0) :args (254))
(step t329 (cl (or (= c_0 (f6 c_1)) (= c_1 (f6 c_1)))) :rule resolution :premises (t324 t327 t328))
(step t330 (cl (= c_0 (f6 c_1)) (= c_1 (f6 c_1))) :rule or :premises (t329))
(step t331 (cl (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1))) (not (= c_1 (f6 c_1)))) :rule and_neg)
(step t332 (cl (=> (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1))) (= (f6 c_1) (f5 c_1))) (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1)))) :rule implies_neg1)
(anchor :step t333)
(assume t333.a0 (= c_1 (f5 c_1)))
(assume t333.a1 (= c_1 (f6 c_1)))
(step t333.t0 (cl (= (f6 c_1) c_1)) :rule symm :premises (t333.a1))
(step t333.t1 (cl (= (f5 c_1) c_1)) :rule symm :premises (t333.a0))
(step t333.t2 (cl (= c_1 (f5 c_1))) :rule symm :premises (t333.t1))
(step t333.t3 (cl (= (f6 c_1) (f5 c_1))) :rule trans :premises (t333.t0 t333.t2))
(step t333 (cl (not (= c_1 (f5 c_1))) (not (= c_1 (f6 c_1))) (= (f6 c_1) (f5 c_1))) :rule subproof :discharge (t333.a0 t333.a1))
(step t334 (cl (not (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1)))) (= c_1 (f5 c_1))) :rule and_pos :args (0))
(step t335 (cl (not (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1)))) (= c_1 (f6 c_1))) :rule and_pos :args (1))
(step t336 (cl (= (f6 c_1) (f5 c_1)) (not (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1)))) (not (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1))))) :rule resolution :premises (t333 t334 t335))
(step t337 (cl (not (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1)))) (not (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1)))) (= (f6 c_1) (f5 c_1))) :rule reordering :premises (t336))
(step t338 (cl (not (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1)))) (= (f6 c_1) (f5 c_1))) :rule contraction :premises (t337))
(step t339 (cl (=> (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1))) (= (f6 c_1) (f5 c_1))) (= (f6 c_1) (f5 c_1))) :rule resolution :premises (t332 t338))
(step t340 (cl (=> (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1))) (= (f6 c_1) (f5 c_1))) (not (= (f6 c_1) (f5 c_1)))) :rule implies_neg2)
(step t341 (cl (=> (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1))) (= (f6 c_1) (f5 c_1))) (=> (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1))) (= (f6 c_1) (f5 c_1)))) :rule resolution :premises (t339 t340))
(step t342 (cl (=> (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1))) (= (f6 c_1) (f5 c_1)))) :rule contraction :premises (t341))
(step t343 (cl (not (and (= c_1 (f5 c_1)) (= c_1 (f6 c_1)))) (= (f6 c_1) (f5 c_1))) :rule implies :premises (t342))
(step t344 (cl (not (= c_1 (f5 c_1))) (not (= c_1 (f6 c_1))) (= (f6 c_1) (f5 c_1))) :rule resolution :premises (t331 t343))
(step t345 (cl (= (f6 c_1) (f5 c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) :rule reordering :premises (t344))
(step t346 (cl (not (= (or (not (= (f5 c_1) (f6 c_1))) (not (p4 c_1))) (or (not (= (f6 c_1) (f5 c_1))) (not (p4 c_1))))) (not (or (not (= (f5 c_1) (f6 c_1))) (not (p4 c_1)))) (or (not (= (f6 c_1) (f5 c_1))) (not (p4 c_1)))) :rule equiv_pos2)
(step t347 (cl (= (= (f5 c_1) (f6 c_1)) (= (f6 c_1) (f5 c_1)))) :rule rare_rewrite :args ("eq-symm" (f5 c_1) (f6 c_1)))
(step t348 (cl (= (not (= (f5 c_1) (f6 c_1))) (not (= (f6 c_1) (f5 c_1))))) :rule cong :premises (t347))
(step t349 (cl (= (not (p4 c_1)) (not (p4 c_1)))) :rule refl)
(step t350 (cl (= (or (not (= (f5 c_1) (f6 c_1))) (not (p4 c_1))) (or (not (= (f6 c_1) (f5 c_1))) (not (p4 c_1))))) :rule cong :premises (t348 t349))
(step t351 (cl (or (not (= (f5 c_1) (f6 c_1))) (not (p4 c_1)))) :rule and :premises (a0) :args (220))
(step t352 (cl (or (not (= (f6 c_1) (f5 c_1))) (not (p4 c_1)))) :rule resolution :premises (t346 t350 t351))
(step t353 (cl (not (= (f6 c_1) (f5 c_1))) (not (p4 c_1))) :rule or :premises (t352))
(step t354 (cl (not (p4 c_1)) (not (= (f6 c_1) (f5 c_1)))) :rule reordering :premises (t353))
(step t355 (cl (not (= (f6 c_1) (f5 c_1)))) :rule resolution :premises (t354 t319))
(step t356 (cl (not (= (or (= (f5 c_1) c_0) (= (f5 c_1) c_1)) (or (= c_0 (f5 c_1)) (= c_1 (f5 c_1))))) (not (or (= (f5 c_1) c_0) (= (f5 c_1) c_1))) (or (= c_0 (f5 c_1)) (= c_1 (f5 c_1)))) :rule equiv_pos2)
(step t357 (cl (= (= (f5 c_1) c_0) (= c_0 (f5 c_1)))) :rule rare_rewrite :args ("eq-symm" (f5 c_1) c_0))
(step t358 (cl (= (= (f5 c_1) c_1) (= c_1 (f5 c_1)))) :rule rare_rewrite :args ("eq-symm" (f5 c_1) c_1))
(step t359 (cl (= (or (= (f5 c_1) c_0) (= (f5 c_1) c_1)) (or (= c_0 (f5 c_1)) (= c_1 (f5 c_1))))) :rule cong :premises (t357 t358))
(step t360 (cl (or (= (f5 c_1) c_0) (= (f5 c_1) c_1))) :rule and :premises (a0) :args (256))
(step t361 (cl (or (= c_0 (f5 c_1)) (= c_1 (f5 c_1)))) :rule resolution :premises (t356 t359 t360))
(step t362 (cl (= c_0 (f5 c_1)) (= c_1 (f5 c_1))) :rule or :premises (t361))
(step t363 (cl (not (= (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (p1 (f7 c_1) c_1)))) (not (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (p1 (f7 c_1) c_1))) :rule equiv_pos2)
(step t364 (cl (= (not (= c_1 (f6 c_1))) (not (= c_1 (f6 c_1))))) :rule refl)
(step t365 (cl (= (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (p1 (f7 c_1) c_1)))) :rule cong :premises (t49 t364 t3 t13))
(step t366 (cl (=> (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) :rule implies_neg1)
(anchor :step t367)
(assume t367.a0 (p1 (f6 c_1) c_1))
(assume t367.a1 (= c_1 (f6 c_1)))
(assume t367.a2 (= c_1 (f7 c_1)))
(assume t367.a3 (not (p1 (f7 c_1) c_1)))
(step t367.t0 (cl (not (= (= false true) false)) (not (= false true)) false) :rule equiv_pos2)
(step t367.t1 (cl (= (= false true) false)) :rule rare_rewrite :args ("evaluate"))
(step t367.t2 (cl (= (= (p1 (f7 c_1) c_1) false) (not (p1 (f7 c_1) c_1)))) :rule equiv_simplify)
(step t367.t3 (cl (= (p1 (f7 c_1) c_1) false) (not (not (p1 (f7 c_1) c_1)))) :rule equiv2 :premises (t367.t2))
(step t367.t4 (cl (not (not (not (p1 (f7 c_1) c_1)))) (p1 (f7 c_1) c_1)) :rule not_not)
(step t367.t5 (cl (= (p1 (f7 c_1) c_1) false) (p1 (f7 c_1) c_1)) :rule resolution :premises (t367.t3 t367.t4))
(step t367.t6 (cl (= (p1 (f7 c_1) c_1) false)) :rule resolution :premises (t367.t5 t367.a3))
(step t367.t7 (cl (= false (p1 (f7 c_1) c_1))) :rule symm :premises (t367.t6))
(step t367.t8 (cl (= (f7 c_1) c_1)) :rule symm :premises (t367.a2))
(step t367.t9 (cl (= c_1 c_1)) :rule refl)
(step t367.t10 (cl (= (p1 (f7 c_1) c_1) (p1 c_1 c_1))) :rule cong :premises (t367.t8 t367.t9))
(step t367.t11 (cl (= (f6 c_1) c_1)) :rule symm :premises (t367.a1))
(step t367.t12 (cl (= c_1 (f6 c_1))) :rule symm :premises (t367.t11))
(step t367.t13 (cl (= (p1 c_1 c_1) (p1 (f6 c_1) c_1))) :rule cong :premises (t367.t12 t367.t9))
(step t367.t14 (cl (= (= (p1 (f6 c_1) c_1) true) (p1 (f6 c_1) c_1))) :rule equiv_simplify)
(step t367.t15 (cl (= (p1 (f6 c_1) c_1) true) (not (p1 (f6 c_1) c_1))) :rule equiv2 :premises (t367.t14))
(step t367.t16 (cl (= (p1 (f6 c_1) c_1) true)) :rule resolution :premises (t367.t15 t367.a0))
(step t367.t17 (cl (= false true)) :rule trans :premises (t367.t7 t367.t10 t367.t13 t367.t16))
(step t367.t18 (cl false) :rule resolution :premises (t367.t0 t367.t1 t367.t17))
(step t367 (cl (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))) false) :rule subproof :discharge (t367.a0 t367.a1 t367.a2 t367.a3))
(step t368 (cl (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (p1 (f6 c_1) c_1)) :rule and_pos :args (0))
(step t369 (cl (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (= c_1 (f6 c_1))) :rule and_pos :args (1))
(step t370 (cl (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (= c_1 (f7 c_1))) :rule and_pos :args (2))
(step t371 (cl (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (p1 (f7 c_1) c_1))) :rule and_pos :args (3))
(step t372 (cl false (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t367 t368 t369 t370 t371))
(step t373 (cl (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) false) :rule reordering :premises (t372))
(step t374 (cl (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) false) :rule contraction :premises (t373))
(step t375 (cl (=> (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) false) :rule resolution :premises (t366 t374))
(step t376 (cl (=> (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (not false)) :rule implies_neg2)
(step t377 (cl (=> (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (=> (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) :rule resolution :premises (t375 t376))
(step t378 (cl (=> (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) :rule contraction :premises (t377))
(step t379 (cl (= (=> (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1)))))) :rule implies_simplify)
(step t380 (cl (not (=> (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule equiv1 :premises (t379))
(step t381 (cl (not (and (p1 (f6 c_1) c_1) (= c_1 (f6 c_1)) (= c_1 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t378 t380))
(step t382 (cl (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) :rule not_and :premises (t381))
(step t383 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (p1 (f6 c_1) c_1)))) :rule or_neg :args (0))
(step t384 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (= c_1 (f6 c_1))))) :rule or_neg :args (1))
(step t385 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (= c_1 (f7 c_1))))) :rule or_neg :args (2))
(step t386 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (not (p1 (f7 c_1) c_1))))) :rule or_neg :args (3))
(step t387 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t382 t383 t384 t385 t386))
(step t388 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) :rule contraction :premises (t387))
(step t389 (cl (or (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (p1 (f7 c_1) c_1))) :rule resolution :premises (t363 t365 t388))
(step t390 (cl (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1))) (p1 (f7 c_1) c_1)) :rule or :premises (t389))
(step t391 (cl (p1 (f7 c_1) c_1) (not (p1 (f6 c_1) c_1)) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1)))) :rule reordering :premises (t390))
(step t392 (cl (= c_0 (f7 c_1)) (= c_1 (f7 c_1))) :rule or :premises (t46))
(step t393 (cl (not (= (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (p1 (f7 c_1) c_1)))) (not (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (p1 (f7 c_1) c_1))) :rule equiv_pos2)
(step t394 (cl (= (not (= c_0 (f5 c_1))) (not (= c_0 (f5 c_1))))) :rule refl)
(step t395 (cl (= (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (p1 (f7 c_1) c_1)))) :rule cong :premises (t1 t394 t51 t13))
(step t396 (cl (=> (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) :rule implies_neg1)
(anchor :step t397)
(assume t397.a0 (p1 (f5 c_1) c_1))
(assume t397.a1 (= c_0 (f5 c_1)))
(assume t397.a2 (= c_0 (f7 c_1)))
(assume t397.a3 (not (p1 (f7 c_1) c_1)))
(step t397.t0 (cl (not (= (= false true) false)) (not (= false true)) false) :rule equiv_pos2)
(step t397.t1 (cl (= (= false true) false)) :rule rare_rewrite :args ("evaluate"))
(step t397.t2 (cl (= (= (p1 (f7 c_1) c_1) false) (not (p1 (f7 c_1) c_1)))) :rule equiv_simplify)
(step t397.t3 (cl (= (p1 (f7 c_1) c_1) false) (not (not (p1 (f7 c_1) c_1)))) :rule equiv2 :premises (t397.t2))
(step t397.t4 (cl (not (not (not (p1 (f7 c_1) c_1)))) (p1 (f7 c_1) c_1)) :rule not_not)
(step t397.t5 (cl (= (p1 (f7 c_1) c_1) false) (p1 (f7 c_1) c_1)) :rule resolution :premises (t397.t3 t397.t4))
(step t397.t6 (cl (= (p1 (f7 c_1) c_1) false)) :rule resolution :premises (t397.t5 t397.a3))
(step t397.t7 (cl (= false (p1 (f7 c_1) c_1))) :rule symm :premises (t397.t6))
(step t397.t8 (cl (= (f7 c_1) c_0)) :rule symm :premises (t397.a2))
(step t397.t9 (cl (= c_1 c_1)) :rule refl)
(step t397.t10 (cl (= (p1 (f7 c_1) c_1) (p1 c_0 c_1))) :rule cong :premises (t397.t8 t397.t9))
(step t397.t11 (cl (= (f5 c_1) c_0)) :rule symm :premises (t397.a1))
(step t397.t12 (cl (= c_0 (f5 c_1))) :rule symm :premises (t397.t11))
(step t397.t13 (cl (= (p1 c_0 c_1) (p1 (f5 c_1) c_1))) :rule cong :premises (t397.t12 t397.t9))
(step t397.t14 (cl (= (= (p1 (f5 c_1) c_1) true) (p1 (f5 c_1) c_1))) :rule equiv_simplify)
(step t397.t15 (cl (= (p1 (f5 c_1) c_1) true) (not (p1 (f5 c_1) c_1))) :rule equiv2 :premises (t397.t14))
(step t397.t16 (cl (= (p1 (f5 c_1) c_1) true)) :rule resolution :premises (t397.t15 t397.a0))
(step t397.t17 (cl (= false true)) :rule trans :premises (t397.t7 t397.t10 t397.t13 t397.t16))
(step t397.t18 (cl false) :rule resolution :premises (t397.t0 t397.t1 t397.t17))
(step t397 (cl (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))) false) :rule subproof :discharge (t397.a0 t397.a1 t397.a2 t397.a3))
(step t398 (cl (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (p1 (f5 c_1) c_1)) :rule and_pos :args (0))
(step t399 (cl (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (= c_0 (f5 c_1))) :rule and_pos :args (1))
(step t400 (cl (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (= c_0 (f7 c_1))) :rule and_pos :args (2))
(step t401 (cl (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (p1 (f7 c_1) c_1))) :rule and_pos :args (3))
(step t402 (cl false (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t397 t398 t399 t400 t401))
(step t403 (cl (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) false) :rule reordering :premises (t402))
(step t404 (cl (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))) false) :rule contraction :premises (t403))
(step t405 (cl (=> (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) false) :rule resolution :premises (t396 t404))
(step t406 (cl (=> (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (not false)) :rule implies_neg2)
(step t407 (cl (=> (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (=> (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) :rule resolution :premises (t405 t406))
(step t408 (cl (=> (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) :rule contraction :premises (t407))
(step t409 (cl (= (=> (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false) (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1)))))) :rule implies_simplify)
(step t410 (cl (not (=> (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))) false)) (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule equiv1 :premises (t409))
(step t411 (cl (not (and (p1 (f5 c_1) c_1) (= c_0 (f5 c_1)) (= c_0 (f7 c_1)) (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t408 t410))
(step t412 (cl (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) :rule not_and :premises (t411))
(step t413 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (p1 (f5 c_1) c_1)))) :rule or_neg :args (0))
(step t414 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (= c_0 (f5 c_1))))) :rule or_neg :args (1))
(step t415 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (= c_0 (f7 c_1))))) :rule or_neg :args (2))
(step t416 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (not (not (not (p1 (f7 c_1) c_1))))) :rule or_neg :args (3))
(step t417 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1)))) (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) :rule resolution :premises (t412 t413 t414 t415 t416))
(step t418 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (not (not (p1 (f7 c_1) c_1))))) :rule contraction :premises (t417))
(step t419 (cl (or (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (p1 (f7 c_1) c_1))) :rule resolution :premises (t393 t395 t418))
(step t420 (cl (not (p1 (f5 c_1) c_1)) (not (= c_0 (f5 c_1))) (not (= c_0 (f7 c_1))) (p1 (f7 c_1) c_1)) :rule or :premises (t419))
(step t421 (cl (p1 (f7 c_1) c_1) (not (p1 (f5 c_1) c_1)) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1)))) :rule reordering :premises (t420))
(step t422 (cl (or (p1 (f5 c_1) c_1) (not (p4 c_1)))) :rule and :premises (a0) :args (61))
(step t423 (cl (p1 (f5 c_1) c_1) (not (p4 c_1))) :rule or :premises (t422))
(step t424 (cl (not (p4 c_1)) (p1 (f5 c_1) c_1)) :rule reordering :premises (t423))
(step t425 (cl (p1 (f5 c_1) c_1)) :rule resolution :premises (t424 t319))
(step t426 (cl (= c_0 (f6 c_1)) (= c_1 (f6 c_1))) :rule or :premises (t329))
(step t427 (cl (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1))) (not (= c_0 (f6 c_1)))) :rule and_neg)
(step t428 (cl (=> (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1))) (= (f6 c_1) (f5 c_1))) (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1)))) :rule implies_neg1)
(anchor :step t429)
(assume t429.a0 (= c_0 (f5 c_1)))
(assume t429.a1 (= c_0 (f6 c_1)))
(step t429.t0 (cl (= (f6 c_1) c_0)) :rule symm :premises (t429.a1))
(step t429.t1 (cl (= (f5 c_1) c_0)) :rule symm :premises (t429.a0))
(step t429.t2 (cl (= c_0 (f5 c_1))) :rule symm :premises (t429.t1))
(step t429.t3 (cl (= (f6 c_1) (f5 c_1))) :rule trans :premises (t429.t0 t429.t2))
(step t429 (cl (not (= c_0 (f5 c_1))) (not (= c_0 (f6 c_1))) (= (f6 c_1) (f5 c_1))) :rule subproof :discharge (t429.a0 t429.a1))
(step t430 (cl (not (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1)))) (= c_0 (f5 c_1))) :rule and_pos :args (0))
(step t431 (cl (not (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1)))) (= c_0 (f6 c_1))) :rule and_pos :args (1))
(step t432 (cl (= (f6 c_1) (f5 c_1)) (not (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1)))) (not (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1))))) :rule resolution :premises (t429 t430 t431))
(step t433 (cl (not (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1)))) (not (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1)))) (= (f6 c_1) (f5 c_1))) :rule reordering :premises (t432))
(step t434 (cl (not (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1)))) (= (f6 c_1) (f5 c_1))) :rule contraction :premises (t433))
(step t435 (cl (=> (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1))) (= (f6 c_1) (f5 c_1))) (= (f6 c_1) (f5 c_1))) :rule resolution :premises (t428 t434))
(step t436 (cl (=> (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1))) (= (f6 c_1) (f5 c_1))) (not (= (f6 c_1) (f5 c_1)))) :rule implies_neg2)
(step t437 (cl (=> (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1))) (= (f6 c_1) (f5 c_1))) (=> (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1))) (= (f6 c_1) (f5 c_1)))) :rule resolution :premises (t435 t436))
(step t438 (cl (=> (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1))) (= (f6 c_1) (f5 c_1)))) :rule contraction :premises (t437))
(step t439 (cl (not (and (= c_0 (f5 c_1)) (= c_0 (f6 c_1)))) (= (f6 c_1) (f5 c_1))) :rule implies :premises (t438))
(step t440 (cl (not (= c_0 (f5 c_1))) (not (= c_0 (f6 c_1))) (= (f6 c_1) (f5 c_1))) :rule resolution :premises (t427 t439))
(step t441 (cl (= (f6 c_1) (f5 c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) :rule reordering :premises (t440))
(step t442 (cl (not (= c_0 (f5 c_1)))) :rule resolution :premises (t391 t323 t320 t392 t421 t425 t320 t426 t441 t355))
(step t443 (cl (= c_1 (f5 c_1))) :rule resolution :premises (t362 t442))
(step t444 (cl (not (= c_1 (f6 c_1)))) :rule resolution :premises (t345 t355 t443))
(step t445 (cl (= c_0 (f6 c_1))) :rule resolution :premises (t330 t444))
(step t446 (cl (not (= c_0 (f7 c_1)))) :rule resolution :premises (t78 t320 t323 t445))
(step t447 (cl (= c_1 (f7 c_1))) :rule resolution :premises (t47 t446))
(step t448 (cl) :rule resolution :premises (t40 t447 t443 t425 t320))
