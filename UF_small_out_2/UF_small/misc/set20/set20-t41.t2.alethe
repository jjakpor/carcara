(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nt41.0 (not (not (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))))
(assume nt41.1 (not (not (or (not (member @quantifiers_skolemize_4 (difference a (difference a b)))) (member @quantifiers_skolemize_4 (intersection a b))))))
(anchor :step t41)
(assume t41.a0 (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(step t41.t1 (cl (= (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b)))) (or (not (member @quantifiers_skolemize_4 (difference a (difference a b)))) (member @quantifiers_skolemize_4 (intersection a b))))) :rule trust)
(step st41.t2 (cl (= (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))) (not (or (not (member @quantifiers_skolemize_4 (difference a (difference a b)))) (member @quantifiers_skolemize_4 (intersection a b)))))) :rule cong :premises (t41.t1))
(step t41.t3 (cl (not (or (not (member @quantifiers_skolemize_4 (difference a (difference a b)))) (member @quantifiers_skolemize_4 (intersection a b))))) :rule trust)
(step t41 (cl (not (not (forall ((?x Elem)) (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b)))))) (not (or (not (member @quantifiers_skolemize_4 (difference a (difference a b)))) (member @quantifiers_skolemize_4 (intersection a b))))) :rule subproof :discharge (t41.a0))
(step t.end (cl) :rule resolution :premises (nt41.0 nt41.1 t41))
