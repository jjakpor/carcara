(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a b))) (member ?x (difference a (difference a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference a (difference a b)))) (member ?x (intersection a b))))))
(assume nst158.0 (not (not (subset (difference a (difference a b)) (intersection a b)))))
(assume t55 (or (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b))) (not (subset (intersection a b) (difference a (difference a b)))) (not (subset (difference a (difference a b)) (intersection a b)))))
(assume t61 (not (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b)))))
(assume t157 (subset (intersection a b) (difference a (difference a b))))
(step t55' (cl (and (subset (intersection a b) (difference a (difference a b))) (subset (difference a (difference a b)) (intersection a b))) (not (subset (intersection a b) (difference a (difference a b)))) (not (subset (difference a (difference a b)) (intersection a b)))) :rule or :premises (t55))
(step st158 (cl (not (subset (difference a (difference a b)) (intersection a b)))) :rule resolution :premises (t55' t61 t157))
(step t.end (cl) :rule resolution :premises (nst158.0 st158))
