(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nt197.0 (not (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))))
(assume nt197.1 (not (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 (intersection a b)))) (member @quantifiers_skolemize_4 (difference c (intersection a b))))))
(anchor :step t197)
(assume t197.a0 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))))
(step st197.t0 (cl (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 (intersection a b)))) (member @quantifiers_skolemize_4 (difference c (intersection a b)))))) :rule forall_inst :args (@quantifiers_skolemize_4 c (intersection a b)))
(step t197.t2 (cl (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 (intersection a b)))) (member @quantifiers_skolemize_4 (difference c (intersection a b))))) :rule trust)
(step t197 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 (intersection a b)))) (member @quantifiers_skolemize_4 (difference c (intersection a b))))) :rule subproof :discharge (t197.a0))
(step t.end (cl) :rule resolution :premises (nt197.0 nt197.1 t197))
