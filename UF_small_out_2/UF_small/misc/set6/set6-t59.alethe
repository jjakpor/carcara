(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst59.0 (not (subset (union (difference c a) (difference c b)) (difference c (intersection a b)))))
(assume nst59.1 (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))))
(assume nst59.2 (not (not (or (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))))))
(assume t58 (or (not (or (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))) (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))))
(step t58' (cl (not (or (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))) (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))) :rule or :premises (t58))
(step st59 (cl (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))) (not (or (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))))) :rule reordering :premises (t58'))
(step t.end (cl) :rule resolution :premises (nst59.0 nst59.1 nst59.2 st59))
