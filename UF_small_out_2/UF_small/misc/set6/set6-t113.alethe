(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst113.0 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference c b))))))
(assume t112 (or (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference c b)))) (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference c b))))))
(step t112' (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference c b)))) (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference c b))))) :rule or :premises (t112))
(step st113 (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_3 c) (not (member @quantifiers_skolemize_3 b))) (member @quantifiers_skolemize_3 (difference c b))))) :rule contraction :premises (t112'))
(step t.end (cl) :rule resolution :premises (nst113.0 st113))
