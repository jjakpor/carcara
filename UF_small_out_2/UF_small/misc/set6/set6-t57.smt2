(set-logic UF)
(declare-sort Set 0)
(declare-sort Elem 0)
(declare-fun member (Elem Set) Bool)
(declare-fun subset (Set Set) Bool)
(declare-fun seteq (Set Set) Bool)
(declare-fun union (Set Set) Set)
(declare-fun intersection (Set Set) Set)
(declare-fun difference (Set Set) Set)
(declare-fun a () Set)
(declare-fun b () Set)
(declare-fun c () Set)
(assert (not (not (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b)))))))
(assert (not (seteq (union (difference c a) (difference c b)) (difference c (intersection a b)))))
(assert (or (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))) (not (= (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))))))
(assert (= (seteq (union (difference c a) (difference c b)) (difference c (intersection a b))) (and (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (subset (difference c (intersection a b)) (union (difference c a) (difference c b))))))
(check-sat)
(exit)
