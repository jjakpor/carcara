(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nt180.0 (not (= (forall ((?s1 Set) (?s2 Set)) (=> (not (subset ?s1 ?s2)) (exists ((?x Elem)) (and (member ?x ?s1) (not (member ?x ?s2)))))) (forall ((?s1 Set) (?s2 Set)) (=> (not (subset ?s1 ?s2)) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))))))
(anchor :step t180 :args ((?s1 Set) (?s2 Set) (:= (?s1 Set) ?s1) (:= (?s2 Set) ?s2)))
(step t180.t1 (cl (= (exists ((?x Elem)) (and (member ?x ?s1) (not (member ?x ?s2)))) (not (forall ((?x Elem)) (not (and (member ?x ?s1) (not (member ?x ?s2)))))))) :rule trust)
(step t180.t3 (cl (= (not (forall ((?x Elem)) (not (and (member ?x ?s1) (not (member ?x ?s2)))))) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))) :rule trust)
(step st180.t4 (cl (= (exists ((?x Elem)) (and (member ?x ?s1) (not (member ?x ?s2)))) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))) :rule trans :premises (t180.t1 t180.t3))
(step t180.t5 (cl (= (=> (not (subset ?s1 ?s2)) (exists ((?x Elem)) (and (member ?x ?s1) (not (member ?x ?s2))))) (=> (not (subset ?s1 ?s2)) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) :rule trust)
(step t180 (cl (= (forall ((?s1 Set) (?s2 Set)) (=> (not (subset ?s1 ?s2)) (exists ((?x Elem)) (and (member ?x ?s1) (not (member ?x ?s2)))))) (forall ((?s1 Set) (?s2 Set)) (=> (not (subset ?s1 ?s2)) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))))) :rule bind)
(step t.end (cl) :rule resolution :premises (nt180.0 t180))
