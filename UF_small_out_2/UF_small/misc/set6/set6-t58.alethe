(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst58.0 (not (not (or (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))))))
(assume nst58.1 (not (subset (union (difference c a) (difference c b)) (difference c (intersection a b)))))
(assume nst58.2 (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))))
(step st58 (cl (not (or (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))) (subset (union (difference c a) (difference c b)) (difference c (intersection a b))) (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))) :rule or_pos)
(step t.end (cl) :rule resolution :premises (nst58.0 nst58.1 nst58.2 st58))
