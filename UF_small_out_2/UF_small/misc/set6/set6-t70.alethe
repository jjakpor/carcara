(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst70.0 (not (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))))
(assume nst70.1 (not (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b)))))))
(assume t69 (=> (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))) (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b)))))))
(step st70 (cl (not (not (forall ((?x Elem)) (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b))))))) (not (or (not (member @quantifiers_skolemize_3 (union (difference c a) (difference c b)))) (member @quantifiers_skolemize_3 (difference c (intersection a b)))))) :rule implies :premises (t69))
(step t.end (cl) :rule resolution :premises (nst70.0 nst70.1 st70))
