(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (difference c a) (difference c b)))) (member ?x (difference c (intersection a b)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference c (intersection a b)))) (member ?x (union (difference c a) (difference c b)))))))
(assume nst224.0 (not (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a))))))
(assume nst224.1 (not (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a)))))
(assume t222 (or (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a)))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))))
(assume t223 (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a)))))
(step t222' (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a)))) (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) :rule or :premises (t222))
(step t223' (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2))))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a)))) :rule or :premises (t223))
(step st224 (cl (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (= (and (member ?x ?s1) (not (member ?x ?s2))) (member ?x (difference ?s1 ?s2)))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a)))) (= (and (member @quantifiers_skolemize_4 c) (not (member @quantifiers_skolemize_4 a))) (member @quantifiers_skolemize_4 (difference c a)))) :rule resolution :premises (t222' t223'))
(step t.end (cl) :rule resolution :premises (nst224.0 nst224.1 st224))
