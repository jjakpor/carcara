(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (intersection b c)))) (member ?x (intersection (intersection a b) c))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))))
(assume nst40.0 (not (not (or (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c))))))))))
(assume nst40.1 (not (subset (intersection (intersection a b) c) (intersection a (intersection b c)))))
(assume nst40.2 (not (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c))))))))
(step st40 (cl (not (or (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c)))))))) (subset (intersection (intersection a b) c) (intersection a (intersection b c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection (intersection a b) c))) (member ?x (intersection a (intersection b c))))))) :rule or_pos)
(step t.end (cl) :rule resolution :premises (nst40.0 nst40.1 nst40.2 st40))
