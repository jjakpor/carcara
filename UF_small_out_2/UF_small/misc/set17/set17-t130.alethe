(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst130.0 (not (or (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))))
(assume t124 (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2)))))))
(assume t129 (or (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))))
(step t129' (cl (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))) :rule or :premises (t129))
(step st130 (cl (or (subset (intersection a (union b c)) (union (intersection a b) (intersection a c))) (not (forall ((?x Elem)) (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))) :rule resolution :premises (t129' t124))
(step t.end (cl) :rule resolution :premises (nst130.0 st130))
