(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst8.0 (not (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b)))))
(assume nst8.1 (not (member @quantifiers_skolemize_4 (intersection a b))))
(assume t1 (or (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) (and (member @quantifiers_skolemize_4 a) (= a (intersection a b)))))
(assume t7 (or (not (and (member @quantifiers_skolemize_4 a) (= a (intersection a b)))) (member @quantifiers_skolemize_4 (intersection a b))))
(step t7' (cl (not (and (member @quantifiers_skolemize_4 a) (= a (intersection a b)))) (member @quantifiers_skolemize_4 (intersection a b))) :rule or :premises (t7))
(step t1' (cl (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) (and (member @quantifiers_skolemize_4 a) (= a (intersection a b)))) :rule or :premises (t1))
(step st8 (cl (=> (and (member @quantifiers_skolemize_4 a) (= a (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) (member @quantifiers_skolemize_4 (intersection a b))) :rule resolution :premises (t1' t7'))
(step t.end (cl) :rule resolution :premises (nst8.0 nst8.1 st8))
