(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nt52.t1.0 (not (= (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))) (or (not (member @quantifiers_skolemize_3 (union (intersection a b) (intersection a c)))) (member @quantifiers_skolemize_3 (intersection a (union b c)))))))
(anchor :step t52.t1 :args ((:= (?x Elem) @quantifiers_skolemize_3)))
(step t52.t1.t0 (cl (= (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))) (or (not (member @quantifiers_skolemize_3 (union (intersection a b) (intersection a c)))) (member @quantifiers_skolemize_3 (intersection a (union b c)))))) :rule trust)
(step t52.t1 (cl (= (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))) (or (not (member @quantifiers_skolemize_3 (union (intersection a b) (intersection a c)))) (member @quantifiers_skolemize_3 (intersection a (union b c)))))) :rule sko_forall)
(step t.end (cl) :rule resolution :premises (nt52.t1.0 t52.t1))
