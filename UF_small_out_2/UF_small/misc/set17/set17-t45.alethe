(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))
(define-fun @quantifiers_skolemize_4 () Elem (choice ((?x Elem)) (not (or (not (member ?x (intersection a (union b c)))) (member ?x (union (intersection a b) (intersection a c)))))))
(assume nst45.0 (not (not (or (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))))))
(assume nst45.1 (not (subset (union (intersection a b) (intersection a c)) (intersection a (union b c)))))
(assume nst45.2 (not (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))))
(step st45 (cl (not (or (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c)))))))) (subset (union (intersection a b) (intersection a c)) (intersection a (union b c))) (not (forall ((?x Elem)) (or (not (member ?x (union (intersection a b) (intersection a c)))) (member ?x (intersection a (union b c))))))) :rule or_pos)
(step t.end (cl) :rule resolution :premises (nst45.0 nst45.1 nst45.2 st45))
