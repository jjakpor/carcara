(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nst6.0 (not (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2))))))
(assume nst6.1 (not (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a))))
(assume t5 (=> (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2))) (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a))))
(step st6 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2)))) (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a))) :rule implies :premises (t5))
(step t.end (cl) :rule resolution :premises (nst6.0 nst6.1 st6))
