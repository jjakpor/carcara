(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nst29.0 (not (subset (difference b a) (difference b d))))
(assume nst29.1 (not (not (forall ((?x Elem)) (or (not (member ?x (difference b a))) (member ?x (difference b d)))))))
(assume nst29.2 (not (not (or (subset (difference b a) (difference b d)) (not (forall ((?x Elem)) (or (not (member ?x (difference b a))) (member ?x (difference b d)))))))))
(assume t28 (or (not (or (subset (difference b a) (difference b d)) (not (forall ((?x Elem)) (or (not (member ?x (difference b a))) (member ?x (difference b d))))))) (subset (difference b a) (difference b d)) (not (forall ((?x Elem)) (or (not (member ?x (difference b a))) (member ?x (difference b d)))))))
(step t28' (cl (not (or (subset (difference b a) (difference b d)) (not (forall ((?x Elem)) (or (not (member ?x (difference b a))) (member ?x (difference b d))))))) (subset (difference b a) (difference b d)) (not (forall ((?x Elem)) (or (not (member ?x (difference b a))) (member ?x (difference b d)))))) :rule or :premises (t28))
(step st29 (cl (subset (difference b a) (difference b d)) (not (forall ((?x Elem)) (or (not (member ?x (difference b a))) (member ?x (difference b d))))) (not (or (subset (difference b a) (difference b d)) (not (forall ((?x Elem)) (or (not (member ?x (difference b a))) (member ?x (difference b d)))))))) :rule reordering :premises (t28'))
(step t.end (cl) :rule resolution :premises (nst29.0 nst29.1 nst29.2 st29))
