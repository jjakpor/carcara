(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (difference b a))) (member ?x (difference b d))))))
(assume nt1.0 (not (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2))))))
(assume nt1.1 (not (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a))))
(anchor :step t1)
(assume t1.a0 (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2))))
(step t1.t0 (cl (or (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2)))) (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a)))) :rule trust :args (@quantifiers_skolemize_3 d a))
(step st1.t1 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2)))) (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a))) :rule or :premises (t1.t0))
(step t1.t5 (cl (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a))) :rule trust)
(step t1 (cl (not (forall ((?x Elem) (?s1 Set) (?s2 Set)) (or (not (member ?x ?s1)) (not (subset ?s1 ?s2)) (member ?x ?s2)))) (or (not (member @quantifiers_skolemize_3 d)) (not (subset d a)) (member @quantifiers_skolemize_3 a))) :rule subproof :discharge (t1.a0))
(step t.end (cl) :rule resolution :premises (nt1.0 nt1.1 t1))
