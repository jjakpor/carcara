(define-fun @quantifiers_skolemize_3 () Elem (choice ((?x Elem)) (not (or (not (member ?x (union a b))) (member ?x c)))))
(assume nst15.0 (not (or (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (union a b) c) (not (forall ((?x Elem)) (or (not (member ?x (union a b))) (member ?x c))))))))
(step st15 (cl (or (not (forall ((?s1 Set) (?s2 Set)) (or (subset ?s1 ?s2) (not (forall ((?x Elem)) (or (not (member ?x ?s1)) (member ?x ?s2))))))) (or (subset (union a b) c) (not (forall ((?x Elem)) (or (not (member ?x (union a b))) (member ?x c))))))) :rule forall_inst :args ((union a b) c))
(step t.end (cl) :rule resolution :premises (nst15.0 st15))
