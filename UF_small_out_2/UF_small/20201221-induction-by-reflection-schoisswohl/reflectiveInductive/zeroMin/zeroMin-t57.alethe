(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst57.0 (not (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v)))))))
(assume nst57.1 (not (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)))))
(assume t56 (or (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)))))
(step st57 (cl (not (forall ((env env) (v var_nat)) (= (evalV_nat env v) (eval_nat env (inj_nat v))))) (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)))) :rule or :premises (t56))
(step t.end (cl) :rule resolution :premises (nst57.0 nst57.1 st57))
