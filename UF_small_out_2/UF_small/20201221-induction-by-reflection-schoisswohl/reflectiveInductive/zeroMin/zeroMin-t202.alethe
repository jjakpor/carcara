(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst202.0 (not (or (not (forall ((env env) (t0 term_nat) (t1 term_nat)) (= (models env (leqR t0 t1)) (leq (eval_nat env t0) (eval_nat env t1))))) (= (models (push_nat empty v0_nat @quantifiers_skolemize_1) (leqR zeroR (inj_nat v0_nat))) (leq (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) zeroR) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)))))))
(step st202 (cl (or (not (forall ((env env) (t0 term_nat) (t1 term_nat)) (= (models env (leqR t0 t1)) (leq (eval_nat env t0) (eval_nat env t1))))) (= (models (push_nat empty v0_nat @quantifiers_skolemize_1) (leqR zeroR (inj_nat v0_nat))) (leq (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) zeroR) (eval_nat (push_nat empty v0_nat @quantifiers_skolemize_1) (inj_nat v0_nat)))))) :rule forall_inst :args ((push_nat empty v0_nat @quantifiers_skolemize_1) zeroR (inj_nat v0_nat)))
(step t.end (cl) :rule resolution :premises (nst202.0 st202))
