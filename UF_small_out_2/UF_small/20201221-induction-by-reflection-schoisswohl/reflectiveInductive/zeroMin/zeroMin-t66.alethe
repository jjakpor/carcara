(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst66.0 (not (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) zero)))
(assume t65 (= zero (evalV_nat (push_nat empty v0_nat zero) v0_nat)))
(step st66 (cl (= (evalV_nat (push_nat empty v0_nat zero) v0_nat) zero)) :rule symm :premises (t65))
(step t.end (cl) :rule resolution :premises (nst66.0 st66))
