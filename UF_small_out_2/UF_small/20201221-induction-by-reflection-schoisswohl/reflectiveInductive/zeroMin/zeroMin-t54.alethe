(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst54.0 (not (= zero (eval_nat (push_nat empty v0_nat zero) zeroR))))
(assume t50 (or (not (forall ((env env)) (= zero (eval_nat env zeroR)))) (= zero (eval_nat (push_nat empty v0_nat zero) zeroR))))
(assume t53 (forall ((env env)) (= zero (eval_nat env zeroR))))
(step t50' (cl (not (forall ((env env)) (= zero (eval_nat env zeroR)))) (= zero (eval_nat (push_nat empty v0_nat zero) zeroR))) :rule or :premises (t50))
(step st54 (cl (= zero (eval_nat (push_nat empty v0_nat zero) zeroR))) :rule resolution :premises (t50' t53))
(step t.end (cl) :rule resolution :premises (nst54.0 st54))
