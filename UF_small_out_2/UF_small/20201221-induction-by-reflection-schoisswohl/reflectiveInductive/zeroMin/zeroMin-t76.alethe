(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nst76.0 (not (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)))))
(assume t48 (or (not (= (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))) true)) (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)))))
(assume t75 (= (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))) true))
(step t48' (cl (not (= (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat))) true)) (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)))) :rule or :premises (t48))
(step st76 (cl (leq (eval_nat (push_nat empty v0_nat zero) zeroR) (eval_nat (push_nat empty v0_nat zero) (inj_nat v0_nat)))) :rule resolution :premises (t48' t75))
(step t.end (cl) :rule resolution :premises (nst76.0 st76))
