(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (leq zero x))))
(define-fun @quantifiers_skolemize_15 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (leqR zeroR (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (leqR zeroR (inj_nat v0_nat)))))))
(assume nt8.t23.0 (not (= (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x)) (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v))))))
(anchor :step t8.t23 :args ((env env) (v var_nat) (x nat) (:= (env env) env) (:= (v var_nat) v) (:= (x nat) x)))
(step t8.t23.t0 (cl (= (= (evalV_nat (push_nat env v x) v) x) (= x (evalV_nat (push_nat env v x) v)))) :rule trust)
(step t8.t23 (cl (= (forall ((env env) (v var_nat) (x nat)) (= (evalV_nat (push_nat env v x) v) x)) (forall ((env env) (v var_nat) (x nat)) (= x (evalV_nat (push_nat env v x) v))))) :rule bind)
(step t.end (cl) :rule resolution :premises (nt8.t23.0 t8.t23))
