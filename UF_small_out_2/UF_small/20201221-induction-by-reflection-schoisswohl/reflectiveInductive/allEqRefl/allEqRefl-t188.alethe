(define-fun @quantifiers_skolemize_1 () nat (choice ((x nat)) (not (equal x x x))))
(define-fun @quantifiers_skolemize_7 () nat (choice ((x0 nat)) (not (or (not (models (push_nat empty v0_nat x0) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))) (models (push_nat empty v0_nat (s x0)) (equalR (inj_nat v0_nat) (inj_nat v0_nat) (inj_nat v0_nat)))))))
(assume nst188.0 (not (= (forall ((phi form)) (or (not (models (push_nat empty v0_nat zero) phi)) (not (forall ((x0 nat)) (or (not (models (push_nat empty v0_nat x0) phi)) (models (push_nat empty v0_nat (s x0)) phi)))) (forall ((x nat)) (models (push_nat empty v0_nat x) phi)))) (forall ((phi form) (BOUND_VARIABLE_560 nat)) (or (not (models (push_nat empty v0_nat zero) phi)) (not (forall ((x0 nat)) (or (not (models (push_nat empty v0_nat x0) phi)) (models (push_nat empty v0_nat (s x0)) phi)))) (models (push_nat empty v0_nat BOUND_VARIABLE_560) phi))))))
(step st188 (cl (= (forall ((phi form)) (or (not (models (push_nat empty v0_nat zero) phi)) (not (forall ((x0 nat)) (or (not (models (push_nat empty v0_nat x0) phi)) (models (push_nat empty v0_nat (s x0)) phi)))) (forall ((x nat)) (models (push_nat empty v0_nat x) phi)))) (forall ((phi form) (BOUND_VARIABLE_560 nat)) (or (not (models (push_nat empty v0_nat zero) phi)) (not (forall ((x0 nat)) (or (not (models (push_nat empty v0_nat x0) phi)) (models (push_nat empty v0_nat (s x0)) phi)))) (models (push_nat empty v0_nat BOUND_VARIABLE_560) phi))))) :rule hole)
(step t.end (cl) :rule resolution :premises (nst188.0 st188))
