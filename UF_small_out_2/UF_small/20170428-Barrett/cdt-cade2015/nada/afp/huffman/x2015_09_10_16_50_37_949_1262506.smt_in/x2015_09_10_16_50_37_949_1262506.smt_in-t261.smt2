(set-logic UF)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort A_a_tree_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$) Nat$)
(declare-fun selecta$ (A_tree$) A$)
(declare-fun leaf$ (Nat$ A$) A_tree$)
(declare-fun selectb$ (A_tree$) Nat$)
(declare-fun selectc$ (A_tree$) A_tree$)
(declare-fun selectd$ (A_tree$) A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$) A_tree$)
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun d$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun uu$ (A_set$) A_bool_fun$)
(declare-fun uua$ (A_tree$ A$ A$ Nat$ Nat$) A_nat_fun$)
(declare-fun cost$ (A_tree$) Nat$)
(declare-fun freq$ (A_tree$) A_nat_fun$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun plus$ (Nat$) Nat_nat_fun$)
(declare-fun zero$ () Nat$)
(declare-fun depth$ (A_tree$ A$) Nat$)
(declare-fun times$ (Nat$) Nat_nat_fun$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun minima$ (A_tree$) A_a_bool_fun_fun$)
(declare-fun of_nat$ (Nat$) Nat$)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun less_eq$ (Nat$) Nat_bool_fun$)
(declare-fun optimum$ (A_tree$) Bool)
(declare-fun sibling$ (A_tree$ A$) A$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun fun_app$a (A_nat_fun$ A$) Nat$)
(declare-fun fun_app$b (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$d (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$e (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$f (A_a_tree_fun$ A$) A_tree$)
(declare-fun swapSyms$ (A_tree$ A$) A_a_tree_fun$)
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$) A_tree$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$) A_a_tree_fun$)
(declare-fun swapFourSyms$ (A_tree$ A$ A$ A$ A$) A_tree$)
(assert (not (or (not (consistent$ t$)) (not (member$ a$ (alphabet$ t$))) (not (member$ d$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$)))))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0)))))
(assert (or (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))) (or (not (consistent$ t$)) (not (member$ a$ (alphabet$ t$))) (not (member$ d$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) a$)) (fun_app$a (freq$ t$) d$))) (not (fun_app$b (less_eq$ (depth$ t$ a$)) (depth$ t$ d$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ a$) d$))) (cost$ t$)))))
(check-sat)
(exit)
