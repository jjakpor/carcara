(assume nst143.0 (not (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0)))))))
(assume nst143.1 (not (or (not (consistent$ t$)) (not (member$ b$ (alphabet$ t$))) (not (member$ c$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$))) (not (fun_app$b (less_eq$ (depth$ t$ b$)) (depth$ t$ c$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$)))))
(assume t142 (or (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))) (or (not (consistent$ t$)) (not (member$ b$ (alphabet$ t$))) (not (member$ c$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$))) (not (fun_app$b (less_eq$ (depth$ t$ b$)) (depth$ t$ c$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$)))))
(step st143 (cl (not (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (or (not (consistent$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0))) (not (member$ ?v2 (alphabet$ ?v0))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ ?v0) ?v1)) (fun_app$a (freq$ ?v0) ?v2))) (not (fun_app$b (less_eq$ (depth$ ?v0 ?v1)) (depth$ ?v0 ?v2))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ ?v0 ?v1) ?v2))) (cost$ ?v0))))) (or (not (consistent$ t$)) (not (member$ b$ (alphabet$ t$))) (not (member$ c$ (alphabet$ t$))) (not (fun_app$b (less_eq$ (fun_app$a (freq$ t$) b$)) (fun_app$a (freq$ t$) c$))) (not (fun_app$b (less_eq$ (depth$ t$ b$)) (depth$ t$ c$))) (fun_app$b (less_eq$ (cost$ (fun_app$f (swapSyms$ t$ b$) c$))) (cost$ t$)))) :rule or :premises (t142))
(step t.end (cl) :rule resolution :premises (nst143.0 nst143.1 st143))
