(define-fun @quantifiers_skolemize_10 () A_list$ (choice ((?v3 A_list$)) (not (or (not (member$c ?v3 (collect$a top$b))) (not (= xs$ (fun_app$g llist_of$ ?v3)))))))
(assume nt36.0 (not (= (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (exists ((?v3 A_list$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3)))))) (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (not (forall ((?v3 A_list$)) (or (not (member$c ?v3 ?v2)) (not (= ?v0 (fun_app$g ?v1 ?v3)))))))))))
(anchor :step t36 :args ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$) (:= (?v0 A_llist$) ?v0) (:= (?v1 A_list_a_llist_fun$) ?v1) (:= (?v2 A_list_set$) ?v2)))
(step st36.t2 (cl (= (forall ((?v3 A_list$)) (not (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3))))) (forall ((?v3 A_list$)) (or (not (member$c ?v3 ?v2)) (not (= ?v0 (fun_app$g ?v1 ?v3))))))) :rule hole)
(step t36.t5 (cl (= (= (member$ ?v0 (image$ ?v1 ?v2)) (exists ((?v3 A_list$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3))))) (= (member$ ?v0 (image$ ?v1 ?v2)) (not (forall ((?v3 A_list$)) (or (not (member$c ?v3 ?v2)) (not (= ?v0 (fun_app$g ?v1 ?v3))))))))) :rule trust)
(step t36 (cl (= (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (exists ((?v3 A_list$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3)))))) (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (not (forall ((?v3 A_list$)) (or (not (member$c ?v3 ?v2)) (not (= ?v0 (fun_app$g ?v1 ?v3)))))))))) :rule bind)
(step t.end (cl) :rule resolution :premises (nt36.0 t36))
