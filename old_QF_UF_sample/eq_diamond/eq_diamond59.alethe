unsat
(assume a0 (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (not (= x0 x58))))
(step t0 (cl (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15)))) :rule and :premises (a0) :args (14))
(step t1 (cl (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) :rule or :premises (t0))
(step t2 (cl (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (not (and (= x14 z14) (= z14 x15)))) :rule or_neg :args (1))
(step t3 (cl (not (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))))) (not (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15)))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) :rule equiv_pos2)
(step t4 (cl (= (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true) (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))))) :rule equiv_simplify)
(step t5 (cl (not (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true)) (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))))) :rule equiv1 :premises (t4))
(step t6 (cl (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true)) :rule hole :args ("11" (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true)))
(step t7 (cl (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))))) :rule resolution :premises (t5 t6))
(step t8 (cl (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) :rule resolution :premises (t3 t7 t0))
(step t9 (cl (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))) :rule and :premises (t8) :args (1))
(step t10 (cl (not (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15)))) (= x14 x15)) :rule implies :premises (t9))
(step t11 (cl (= x14 x15) (not (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))))) :rule reordering :premises (t10))
(step t12 (cl (not (= (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (= x0 x58) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))))) (not (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12)))) (or (= x0 x58) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12)))) :rule equiv_pos2)
(step t13 (cl (= (= (= (not (not (= x0 x58))) (= x0 x58)) true) (= (not (not (= x0 x58))) (= x0 x58)))) :rule equiv_simplify)
(step t14 (cl (not (= (= (not (not (= x0 x58))) (= x0 x58)) true)) (= (not (not (= x0 x58))) (= x0 x58))) :rule equiv1 :premises (t13))
(step t15 (cl (= (= (not (not (= x0 x58))) (= x0 x58)) (= (= x0 x58) (not (not (= x0 x58)))))) :rule rare_rewrite :args ("eq-symm" (not (not (= x0 x58))) (= x0 x58)))
(step t16 (cl (= (= x0 x58) (= x0 x58))) :rule refl)
(step t17 (cl (= (not (not (= x0 x58))) (= x0 x58))) :rule rare_rewrite :args ("bool-double-not-elim" (= x0 x58)))
(step t18 (cl (= (= (= x0 x58) (not (not (= x0 x58)))) (= (= x0 x58) (= x0 x58)))) :rule cong :premises (t16 t17))
(step t19 (cl (= (= (= x0 x58) (= x0 x58)) true)) :rule rare_rewrite :args ("eq-refl" (= x0 x58)))
(step t20 (cl (= (= (= x0 x58) (not (not (= x0 x58)))) true)) :rule trans :premises (t18 t19))
(step t21 (cl (= (= (not (not (= x0 x58))) (= x0 x58)) true)) :rule trans :premises (t15 t20))
(step t22 (cl (= (not (not (= x0 x58))) (= x0 x58))) :rule resolution :premises (t14 t21))
(step t23 (cl (= (not (= x0 x1)) (not (= x0 x1)))) :rule refl)
(step t24 (cl (= (not (= x1 x2)) (not (= x1 x2)))) :rule refl)
(step t25 (cl (= (not (= x2 x3)) (not (= x2 x3)))) :rule refl)
(step t26 (cl (= (not (= x3 x4)) (not (= x3 x4)))) :rule refl)
(step t27 (cl (= (not (= x4 x5)) (not (= x4 x5)))) :rule refl)
(step t28 (cl (= (not (= x5 x6)) (not (= x5 x6)))) :rule refl)
(step t29 (cl (= (not (= x6 x7)) (not (= x6 x7)))) :rule refl)
(step t30 (cl (= (not (= x7 x8)) (not (= x7 x8)))) :rule refl)
(step t31 (cl (= (not (= x8 x9)) (not (= x8 x9)))) :rule refl)
(step t32 (cl (= (not (= x9 x10)) (not (= x9 x10)))) :rule refl)
(step t33 (cl (= (not (= x10 x11)) (not (= x10 x11)))) :rule refl)
(step t34 (cl (= (not (= x57 x58)) (not (= x57 x58)))) :rule refl)
(step t35 (cl (= (not (= x56 x57)) (not (= x56 x57)))) :rule refl)
(step t36 (cl (= (not (= x55 x56)) (not (= x55 x56)))) :rule refl)
(step t37 (cl (= (not (= x54 x55)) (not (= x54 x55)))) :rule refl)
(step t38 (cl (= (not (= x53 x54)) (not (= x53 x54)))) :rule refl)
(step t39 (cl (= (not (= x52 x53)) (not (= x52 x53)))) :rule refl)
(step t40 (cl (= (not (= x51 x52)) (not (= x51 x52)))) :rule refl)
(step t41 (cl (= (not (= x50 x51)) (not (= x50 x51)))) :rule refl)
(step t42 (cl (= (not (= x49 x50)) (not (= x49 x50)))) :rule refl)
(step t43 (cl (= (not (= x48 x49)) (not (= x48 x49)))) :rule refl)
(step t44 (cl (= (not (= x47 x48)) (not (= x47 x48)))) :rule refl)
(step t45 (cl (= (not (= x46 x47)) (not (= x46 x47)))) :rule refl)
(step t46 (cl (= (not (= x45 x46)) (not (= x45 x46)))) :rule refl)
(step t47 (cl (= (not (= x44 x45)) (not (= x44 x45)))) :rule refl)
(step t48 (cl (= (not (= x43 x44)) (not (= x43 x44)))) :rule refl)
(step t49 (cl (= (not (= x42 x43)) (not (= x42 x43)))) :rule refl)
(step t50 (cl (= (not (= x41 x42)) (not (= x41 x42)))) :rule refl)
(step t51 (cl (= (not (= x40 x41)) (not (= x40 x41)))) :rule refl)
(step t52 (cl (= (not (= x39 x40)) (not (= x39 x40)))) :rule refl)
(step t53 (cl (= (not (= x38 x39)) (not (= x38 x39)))) :rule refl)
(step t54 (cl (= (not (= x37 x38)) (not (= x37 x38)))) :rule refl)
(step t55 (cl (= (not (= x36 x37)) (not (= x36 x37)))) :rule refl)
(step t56 (cl (= (not (= x35 x36)) (not (= x35 x36)))) :rule refl)
(step t57 (cl (= (not (= x34 x35)) (not (= x34 x35)))) :rule refl)
(step t58 (cl (= (not (= x33 x34)) (not (= x33 x34)))) :rule refl)
(step t59 (cl (= (not (= x32 x33)) (not (= x32 x33)))) :rule refl)
(step t60 (cl (= (not (= x31 x32)) (not (= x31 x32)))) :rule refl)
(step t61 (cl (= (not (= x30 x31)) (not (= x30 x31)))) :rule refl)
(step t62 (cl (= (not (= x29 x30)) (not (= x29 x30)))) :rule refl)
(step t63 (cl (= (not (= x28 x29)) (not (= x28 x29)))) :rule refl)
(step t64 (cl (= (not (= x27 x28)) (not (= x27 x28)))) :rule refl)
(step t65 (cl (= (not (= x26 x27)) (not (= x26 x27)))) :rule refl)
(step t66 (cl (= (not (= x25 x26)) (not (= x25 x26)))) :rule refl)
(step t67 (cl (= (not (= x24 x25)) (not (= x24 x25)))) :rule refl)
(step t68 (cl (= (not (= x23 x24)) (not (= x23 x24)))) :rule refl)
(step t69 (cl (= (not (= x22 x23)) (not (= x22 x23)))) :rule refl)
(step t70 (cl (= (not (= x21 x22)) (not (= x21 x22)))) :rule refl)
(step t71 (cl (= (not (= x20 x21)) (not (= x20 x21)))) :rule refl)
(step t72 (cl (= (not (= x19 x20)) (not (= x19 x20)))) :rule refl)
(step t73 (cl (= (not (= x18 x19)) (not (= x18 x19)))) :rule refl)
(step t74 (cl (= (not (= x17 x18)) (not (= x17 x18)))) :rule refl)
(step t75 (cl (= (not (= x16 x17)) (not (= x16 x17)))) :rule refl)
(step t76 (cl (= (not (= x15 x16)) (not (= x15 x16)))) :rule refl)
(step t77 (cl (= (not (= x14 x15)) (not (= x14 x15)))) :rule refl)
(step t78 (cl (= (not (= x13 x14)) (not (= x13 x14)))) :rule refl)
(step t79 (cl (= (not (= x12 x13)) (not (= x12 x13)))) :rule refl)
(step t80 (cl (= (not (= x11 x12)) (not (= x11 x12)))) :rule refl)
(step t81 (cl (= (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (= x0 x58) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))))) :rule cong :premises (t22 t23 t24 t25 t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 t63 t64 t65 t66 t67 t68 t69 t70 t71 t72 t73 t74 t75 t76 t77 t78 t79 t80))
(step t82 (cl (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13)) (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13))) :rule and_neg)
(step t83 (cl (=> (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13)) (not (= x11 x12))) (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) :rule implies_neg1)
(anchor :step t84)
(assume t84.a0 (not (= x0 x58)))
(assume t84.a1 (= x0 x1))
(assume t84.a2 (= x1 x2))
(assume t84.a3 (= x2 x3))
(assume t84.a4 (= x3 x4))
(assume t84.a5 (= x4 x5))
(assume t84.a6 (= x5 x6))
(assume t84.a7 (= x6 x7))
(assume t84.a8 (= x7 x8))
(assume t84.a9 (= x8 x9))
(assume t84.a10 (= x9 x10))
(assume t84.a11 (= x10 x11))
(assume t84.a12 (= x57 x58))
(assume t84.a13 (= x56 x57))
(assume t84.a14 (= x55 x56))
(assume t84.a15 (= x54 x55))
(assume t84.a16 (= x53 x54))
(assume t84.a17 (= x52 x53))
(assume t84.a18 (= x51 x52))
(assume t84.a19 (= x50 x51))
(assume t84.a20 (= x49 x50))
(assume t84.a21 (= x48 x49))
(assume t84.a22 (= x47 x48))
(assume t84.a23 (= x46 x47))
(assume t84.a24 (= x45 x46))
(assume t84.a25 (= x44 x45))
(assume t84.a26 (= x43 x44))
(assume t84.a27 (= x42 x43))
(assume t84.a28 (= x41 x42))
(assume t84.a29 (= x40 x41))
(assume t84.a30 (= x39 x40))
(assume t84.a31 (= x38 x39))
(assume t84.a32 (= x37 x38))
(assume t84.a33 (= x36 x37))
(assume t84.a34 (= x35 x36))
(assume t84.a35 (= x34 x35))
(assume t84.a36 (= x33 x34))
(assume t84.a37 (= x32 x33))
(assume t84.a38 (= x31 x32))
(assume t84.a39 (= x30 x31))
(assume t84.a40 (= x29 x30))
(assume t84.a41 (= x28 x29))
(assume t84.a42 (= x27 x28))
(assume t84.a43 (= x26 x27))
(assume t84.a44 (= x25 x26))
(assume t84.a45 (= x24 x25))
(assume t84.a46 (= x23 x24))
(assume t84.a47 (= x22 x23))
(assume t84.a48 (= x21 x22))
(assume t84.a49 (= x20 x21))
(assume t84.a50 (= x19 x20))
(assume t84.a51 (= x18 x19))
(assume t84.a52 (= x17 x18))
(assume t84.a53 (= x16 x17))
(assume t84.a54 (= x15 x16))
(assume t84.a55 (= x14 x15))
(assume t84.a56 (= x13 x14))
(assume t84.a57 (= x12 x13))
(step t84.t0 (cl (= (= (= x11 x12) false) (not (= x11 x12)))) :rule equiv_simplify)
(step t84.t1 (cl (not (= (= x11 x12) false)) (not (= x11 x12))) :rule equiv1 :premises (t84.t0))
(step t84.t2 (cl (not (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) :rule equiv_pos2)
(step t84.t3 (cl (= (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true) (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))))) :rule equiv_simplify)
(step t84.t4 (cl (not (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)) (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) :rule equiv1 :premises (t84.t3))
(step t84.t5 (cl (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)) :rule hole :args ("11" (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)))
(step t84.t6 (cl (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) :rule resolution :premises (t84.t4 t84.t5))
(step t84.t7 (cl (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) :rule and :premises (a0) :args (10))
(step t84.t8 (cl (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) :rule resolution :premises (t84.t2 t84.t6 t84.t7))
(step t84.t9 (cl (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))) :rule and :premises (t84.t8) :args (1))
(step t84.t10 (cl (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) (= x10 x11)) :rule implies :premises (t84.t9))
(step t84.t11 (cl (= x10 x11) (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))))) :rule reordering :premises (t84.t10))
(step t84.t12 (cl (= x10 x11)) :rule resolution :premises (t84.t11 t84.t7))
(step t84.t13 (cl (= x11 x10)) :rule symm :premises (t84.t12))
(step t84.t14 (cl (not (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) :rule equiv_pos2)
(step t84.t15 (cl (= (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true) (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))))) :rule equiv_simplify)
(step t84.t16 (cl (not (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)) (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) :rule equiv1 :premises (t84.t15))
(step t84.t17 (cl (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)) :rule hole :args ("11" (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)))
(step t84.t18 (cl (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) :rule resolution :premises (t84.t16 t84.t17))
(step t84.t19 (cl (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) :rule and :premises (a0) :args (9))
(step t84.t20 (cl (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) :rule resolution :premises (t84.t14 t84.t18 t84.t19))
(step t84.t21 (cl (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))) :rule and :premises (t84.t20) :args (1))
(step t84.t22 (cl (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) (= x9 x10)) :rule implies :premises (t84.t21))
(step t84.t23 (cl (= x9 x10) (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))))) :rule reordering :premises (t84.t22))
(step t84.t24 (cl (= x9 x10)) :rule resolution :premises (t84.t23 t84.t19))
(step t84.t25 (cl (= x10 x9)) :rule symm :premises (t84.t24))
(step t84.t26 (cl (not (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) :rule equiv_pos2)
(step t84.t27 (cl (= (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true) (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))))) :rule equiv_simplify)
(step t84.t28 (cl (not (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)) (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) :rule equiv1 :premises (t84.t27))
(step t84.t29 (cl (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)) :rule hole :args ("11" (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)))
(step t84.t30 (cl (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) :rule resolution :premises (t84.t28 t84.t29))
(step t84.t31 (cl (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) :rule and :premises (a0) :args (8))
(step t84.t32 (cl (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) :rule resolution :premises (t84.t26 t84.t30 t84.t31))
(step t84.t33 (cl (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))) :rule and :premises (t84.t32) :args (1))
(step t84.t34 (cl (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) (= x8 x9)) :rule implies :premises (t84.t33))
(step t84.t35 (cl (= x8 x9) (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))))) :rule reordering :premises (t84.t34))
(step t84.t36 (cl (= x8 x9)) :rule resolution :premises (t84.t35 t84.t31))
(step t84.t37 (cl (= x9 x8)) :rule symm :premises (t84.t36))
(step t84.t38 (cl (not (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) :rule equiv_pos2)
(step t84.t39 (cl (= (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true) (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))))) :rule equiv_simplify)
(step t84.t40 (cl (not (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)) (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) :rule equiv1 :premises (t84.t39))
(step t84.t41 (cl (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)) :rule hole :args ("11" (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)))
(step t84.t42 (cl (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) :rule resolution :premises (t84.t40 t84.t41))
(step t84.t43 (cl (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) :rule and :premises (a0) :args (7))
(step t84.t44 (cl (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) :rule resolution :premises (t84.t38 t84.t42 t84.t43))
(step t84.t45 (cl (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))) :rule and :premises (t84.t44) :args (1))
(step t84.t46 (cl (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) (= x7 x8)) :rule implies :premises (t84.t45))
(step t84.t47 (cl (= x7 x8) (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))))) :rule reordering :premises (t84.t46))
(step t84.t48 (cl (= x7 x8)) :rule resolution :premises (t84.t47 t84.t43))
(step t84.t49 (cl (= x8 x7)) :rule symm :premises (t84.t48))
(step t84.t50 (cl (not (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) :rule equiv_pos2)
(step t84.t51 (cl (= (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true) (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))))) :rule equiv_simplify)
(step t84.t52 (cl (not (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)) (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) :rule equiv1 :premises (t84.t51))
(step t84.t53 (cl (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)) :rule hole :args ("11" (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)))
(step t84.t54 (cl (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) :rule resolution :premises (t84.t52 t84.t53))
(step t84.t55 (cl (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) :rule and :premises (a0) :args (6))
(step t84.t56 (cl (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) :rule resolution :premises (t84.t50 t84.t54 t84.t55))
(step t84.t57 (cl (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))) :rule and :premises (t84.t56) :args (1))
(step t84.t58 (cl (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) (= x6 x7)) :rule implies :premises (t84.t57))
(step t84.t59 (cl (= x6 x7) (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))))) :rule reordering :premises (t84.t58))
(step t84.t60 (cl (= x6 x7)) :rule resolution :premises (t84.t59 t84.t55))
(step t84.t61 (cl (= x7 x6)) :rule symm :premises (t84.t60))
(step t84.t62 (cl (not (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) :rule equiv_pos2)
(step t84.t63 (cl (= (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true) (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))))) :rule equiv_simplify)
(step t84.t64 (cl (not (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)) (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) :rule equiv1 :premises (t84.t63))
(step t84.t65 (cl (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)) :rule hole :args ("11" (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)))
(step t84.t66 (cl (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) :rule resolution :premises (t84.t64 t84.t65))
(step t84.t67 (cl (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) :rule and :premises (a0) :args (5))
(step t84.t68 (cl (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) :rule resolution :premises (t84.t62 t84.t66 t84.t67))
(step t84.t69 (cl (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))) :rule and :premises (t84.t68) :args (1))
(step t84.t70 (cl (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) (= x5 x6)) :rule implies :premises (t84.t69))
(step t84.t71 (cl (= x5 x6) (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))))) :rule reordering :premises (t84.t70))
(step t84.t72 (cl (= x5 x6)) :rule resolution :premises (t84.t71 t84.t67))
(step t84.t73 (cl (= x6 x5)) :rule symm :premises (t84.t72))
(step t84.t74 (cl (not (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) :rule equiv_pos2)
(step t84.t75 (cl (= (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true) (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))))) :rule equiv_simplify)
(step t84.t76 (cl (not (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)) (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) :rule equiv1 :premises (t84.t75))
(step t84.t77 (cl (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)) :rule hole :args ("11" (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)))
(step t84.t78 (cl (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) :rule resolution :premises (t84.t76 t84.t77))
(step t84.t79 (cl (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) :rule and :premises (a0) :args (4))
(step t84.t80 (cl (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) :rule resolution :premises (t84.t74 t84.t78 t84.t79))
(step t84.t81 (cl (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))) :rule and :premises (t84.t80) :args (1))
(step t84.t82 (cl (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) (= x4 x5)) :rule implies :premises (t84.t81))
(step t84.t83 (cl (= x4 x5) (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))))) :rule reordering :premises (t84.t82))
(step t84.t84 (cl (= x4 x5)) :rule resolution :premises (t84.t83 t84.t79))
(step t84.t85 (cl (= x5 x4)) :rule symm :premises (t84.t84))
(step t84.t86 (cl (not (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) :rule equiv_pos2)
(step t84.t87 (cl (= (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true) (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))))) :rule equiv_simplify)
(step t84.t88 (cl (not (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)) (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) :rule equiv1 :premises (t84.t87))
(step t84.t89 (cl (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)) :rule hole :args ("11" (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)))
(step t84.t90 (cl (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) :rule resolution :premises (t84.t88 t84.t89))
(step t84.t91 (cl (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) :rule and :premises (a0) :args (3))
(step t84.t92 (cl (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) :rule resolution :premises (t84.t86 t84.t90 t84.t91))
(step t84.t93 (cl (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))) :rule and :premises (t84.t92) :args (1))
(step t84.t94 (cl (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) (= x3 x4)) :rule implies :premises (t84.t93))
(step t84.t95 (cl (= x3 x4) (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))))) :rule reordering :premises (t84.t94))
(step t84.t96 (cl (= x3 x4)) :rule resolution :premises (t84.t95 t84.t91))
(step t84.t97 (cl (= x4 x3)) :rule symm :premises (t84.t96))
(step t84.t98 (cl (not (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) :rule equiv_pos2)
(step t84.t99 (cl (= (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true) (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))))) :rule equiv_simplify)
(step t84.t100 (cl (not (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)) (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) :rule equiv1 :premises (t84.t99))
(step t84.t101 (cl (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)) :rule hole :args ("11" (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)))
(step t84.t102 (cl (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) :rule resolution :premises (t84.t100 t84.t101))
(step t84.t103 (cl (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) :rule and :premises (a0) :args (2))
(step t84.t104 (cl (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) :rule resolution :premises (t84.t98 t84.t102 t84.t103))
(step t84.t105 (cl (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))) :rule and :premises (t84.t104) :args (1))
(step t84.t106 (cl (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) (= x2 x3)) :rule implies :premises (t84.t105))
(step t84.t107 (cl (= x2 x3) (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))))) :rule reordering :premises (t84.t106))
(step t84.t108 (cl (= x2 x3)) :rule resolution :premises (t84.t107 t84.t103))
(step t84.t109 (cl (= x3 x2)) :rule symm :premises (t84.t108))
(step t84.t110 (cl (not (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) :rule equiv_pos2)
(step t84.t111 (cl (= (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true) (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))))) :rule equiv_simplify)
(step t84.t112 (cl (not (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)) (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) :rule equiv1 :premises (t84.t111))
(step t84.t113 (cl (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)) :rule hole :args ("11" (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)))
(step t84.t114 (cl (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) :rule resolution :premises (t84.t112 t84.t113))
(step t84.t115 (cl (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) :rule and :premises (a0) :args (1))
(step t84.t116 (cl (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) :rule resolution :premises (t84.t110 t84.t114 t84.t115))
(step t84.t117 (cl (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))) :rule and :premises (t84.t116) :args (1))
(step t84.t118 (cl (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) (= x1 x2)) :rule implies :premises (t84.t117))
(step t84.t119 (cl (= x1 x2) (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))))) :rule reordering :premises (t84.t118))
(step t84.t120 (cl (= x1 x2)) :rule resolution :premises (t84.t119 t84.t115))
(step t84.t121 (cl (= x2 x1)) :rule symm :premises (t84.t120))
(step t84.t122 (cl (not (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) :rule equiv_pos2)
(step t84.t123 (cl (= (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true) (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))))) :rule equiv_simplify)
(step t84.t124 (cl (not (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)) (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) :rule equiv1 :premises (t84.t123))
(step t84.t125 (cl (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)) :rule hole :args ("11" (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)))
(step t84.t126 (cl (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) :rule resolution :premises (t84.t124 t84.t125))
(step t84.t127 (cl (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) :rule and :premises (a0) :args (0))
(step t84.t128 (cl (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) :rule resolution :premises (t84.t122 t84.t126 t84.t127))
(step t84.t129 (cl (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))) :rule and :premises (t84.t128) :args (1))
(step t84.t130 (cl (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) (= x0 x1)) :rule implies :premises (t84.t129))
(step t84.t131 (cl (= x0 x1) (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))))) :rule reordering :premises (t84.t130))
(step t84.t132 (cl (= x0 x1)) :rule resolution :premises (t84.t131 t84.t127))
(step t84.t133 (cl (= x1 x0)) :rule symm :premises (t84.t132))
(step t84.t134 (cl (= x11 x0)) :rule trans :premises (t84.t13 t84.t25 t84.t37 t84.t49 t84.t61 t84.t73 t84.t85 t84.t97 t84.t109 t84.t121 t84.t133))
(step t84.t135 (cl (not (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) :rule equiv_pos2)
(step t84.t136 (cl (= (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true) (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))))) :rule equiv_simplify)
(step t84.t137 (cl (not (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)) (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) :rule equiv1 :premises (t84.t136))
(step t84.t138 (cl (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)) :rule hole :args ("11" (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)))
(step t84.t139 (cl (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) :rule resolution :premises (t84.t137 t84.t138))
(step t84.t140 (cl (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) :rule and :premises (a0) :args (12))
(step t84.t141 (cl (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) :rule resolution :premises (t84.t135 t84.t139 t84.t140))
(step t84.t142 (cl (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))) :rule and :premises (t84.t141) :args (1))
(step t84.t143 (cl (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) (= x12 x13)) :rule implies :premises (t84.t142))
(step t84.t144 (cl (= x12 x13) (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))))) :rule reordering :premises (t84.t143))
(step t84.t145 (cl (= x12 x13)) :rule resolution :premises (t84.t144 t84.t140))
(step t84.t146 (cl (not (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) :rule equiv_pos2)
(step t84.t147 (cl (= (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true) (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))))) :rule equiv_simplify)
(step t84.t148 (cl (not (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)) (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) :rule equiv1 :premises (t84.t147))
(step t84.t149 (cl (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)) :rule hole :args ("11" (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)))
(step t84.t150 (cl (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) :rule resolution :premises (t84.t148 t84.t149))
(step t84.t151 (cl (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) :rule and :premises (a0) :args (13))
(step t84.t152 (cl (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) :rule resolution :premises (t84.t146 t84.t150 t84.t151))
(step t84.t153 (cl (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))) :rule and :premises (t84.t152) :args (1))
(step t84.t154 (cl (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) (= x13 x14)) :rule implies :premises (t84.t153))
(step t84.t155 (cl (= x13 x14) (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))))) :rule reordering :premises (t84.t154))
(step t84.t156 (cl (= x13 x14)) :rule resolution :premises (t84.t155 t84.t151))
(step t84.t157 (cl (= x15 x14)) :rule symm :premises (t84.a55))
(step t84.t158 (cl (= x14 x15)) :rule symm :premises (t84.t157))
(step t84.t159 (cl (not (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) :rule equiv_pos2)
(step t84.t160 (cl (= (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true) (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))))) :rule equiv_simplify)
(step t84.t161 (cl (not (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)) (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) :rule equiv1 :premises (t84.t160))
(step t84.t162 (cl (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)) :rule hole :args ("11" (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)))
(step t84.t163 (cl (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) :rule resolution :premises (t84.t161 t84.t162))
(step t84.t164 (cl (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) :rule and :premises (a0) :args (15))
(step t84.t165 (cl (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) :rule resolution :premises (t84.t159 t84.t163 t84.t164))
(step t84.t166 (cl (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))) :rule and :premises (t84.t165) :args (1))
(step t84.t167 (cl (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) (= x15 x16)) :rule implies :premises (t84.t166))
(step t84.t168 (cl (= x15 x16) (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))))) :rule reordering :premises (t84.t167))
(step t84.t169 (cl (= x15 x16)) :rule resolution :premises (t84.t168 t84.t164))
(step t84.t170 (cl (not (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) :rule equiv_pos2)
(step t84.t171 (cl (= (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true) (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))))) :rule equiv_simplify)
(step t84.t172 (cl (not (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)) (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) :rule equiv1 :premises (t84.t171))
(step t84.t173 (cl (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)) :rule hole :args ("11" (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)))
(step t84.t174 (cl (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) :rule resolution :premises (t84.t172 t84.t173))
(step t84.t175 (cl (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) :rule and :premises (a0) :args (16))
(step t84.t176 (cl (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) :rule resolution :premises (t84.t170 t84.t174 t84.t175))
(step t84.t177 (cl (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))) :rule and :premises (t84.t176) :args (1))
(step t84.t178 (cl (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) (= x16 x17)) :rule implies :premises (t84.t177))
(step t84.t179 (cl (= x16 x17) (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))))) :rule reordering :premises (t84.t178))
(step t84.t180 (cl (= x16 x17)) :rule resolution :premises (t84.t179 t84.t175))
(step t84.t181 (cl (not (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) :rule equiv_pos2)
(step t84.t182 (cl (= (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true) (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))))) :rule equiv_simplify)
(step t84.t183 (cl (not (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)) (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) :rule equiv1 :premises (t84.t182))
(step t84.t184 (cl (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)) :rule hole :args ("11" (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)))
(step t84.t185 (cl (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) :rule resolution :premises (t84.t183 t84.t184))
(step t84.t186 (cl (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) :rule and :premises (a0) :args (17))
(step t84.t187 (cl (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) :rule resolution :premises (t84.t181 t84.t185 t84.t186))
(step t84.t188 (cl (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))) :rule and :premises (t84.t187) :args (1))
(step t84.t189 (cl (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) (= x17 x18)) :rule implies :premises (t84.t188))
(step t84.t190 (cl (= x17 x18) (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))))) :rule reordering :premises (t84.t189))
(step t84.t191 (cl (= x17 x18)) :rule resolution :premises (t84.t190 t84.t186))
(step t84.t192 (cl (not (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) :rule equiv_pos2)
(step t84.t193 (cl (= (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true) (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))))) :rule equiv_simplify)
(step t84.t194 (cl (not (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)) (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) :rule equiv1 :premises (t84.t193))
(step t84.t195 (cl (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)) :rule hole :args ("11" (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)))
(step t84.t196 (cl (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) :rule resolution :premises (t84.t194 t84.t195))
(step t84.t197 (cl (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) :rule and :premises (a0) :args (18))
(step t84.t198 (cl (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) :rule resolution :premises (t84.t192 t84.t196 t84.t197))
(step t84.t199 (cl (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))) :rule and :premises (t84.t198) :args (1))
(step t84.t200 (cl (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) (= x18 x19)) :rule implies :premises (t84.t199))
(step t84.t201 (cl (= x18 x19) (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))))) :rule reordering :premises (t84.t200))
(step t84.t202 (cl (= x18 x19)) :rule resolution :premises (t84.t201 t84.t197))
(step t84.t203 (cl (not (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) :rule equiv_pos2)
(step t84.t204 (cl (= (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true) (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))))) :rule equiv_simplify)
(step t84.t205 (cl (not (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)) (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) :rule equiv1 :premises (t84.t204))
(step t84.t206 (cl (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)) :rule hole :args ("11" (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)))
(step t84.t207 (cl (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) :rule resolution :premises (t84.t205 t84.t206))
(step t84.t208 (cl (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) :rule and :premises (a0) :args (19))
(step t84.t209 (cl (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) :rule resolution :premises (t84.t203 t84.t207 t84.t208))
(step t84.t210 (cl (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))) :rule and :premises (t84.t209) :args (1))
(step t84.t211 (cl (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) (= x19 x20)) :rule implies :premises (t84.t210))
(step t84.t212 (cl (= x19 x20) (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))))) :rule reordering :premises (t84.t211))
(step t84.t213 (cl (= x19 x20)) :rule resolution :premises (t84.t212 t84.t208))
(step t84.t214 (cl (not (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) :rule equiv_pos2)
(step t84.t215 (cl (= (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true) (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))))) :rule equiv_simplify)
(step t84.t216 (cl (not (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)) (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) :rule equiv1 :premises (t84.t215))
(step t84.t217 (cl (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)) :rule hole :args ("11" (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)))
(step t84.t218 (cl (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) :rule resolution :premises (t84.t216 t84.t217))
(step t84.t219 (cl (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) :rule and :premises (a0) :args (20))
(step t84.t220 (cl (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) :rule resolution :premises (t84.t214 t84.t218 t84.t219))
(step t84.t221 (cl (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))) :rule and :premises (t84.t220) :args (1))
(step t84.t222 (cl (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) (= x20 x21)) :rule implies :premises (t84.t221))
(step t84.t223 (cl (= x20 x21) (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))))) :rule reordering :premises (t84.t222))
(step t84.t224 (cl (= x20 x21)) :rule resolution :premises (t84.t223 t84.t219))
(step t84.t225 (cl (not (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) :rule equiv_pos2)
(step t84.t226 (cl (= (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true) (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))))) :rule equiv_simplify)
(step t84.t227 (cl (not (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)) (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) :rule equiv1 :premises (t84.t226))
(step t84.t228 (cl (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)) :rule hole :args ("11" (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)))
(step t84.t229 (cl (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) :rule resolution :premises (t84.t227 t84.t228))
(step t84.t230 (cl (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) :rule and :premises (a0) :args (21))
(step t84.t231 (cl (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) :rule resolution :premises (t84.t225 t84.t229 t84.t230))
(step t84.t232 (cl (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))) :rule and :premises (t84.t231) :args (1))
(step t84.t233 (cl (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) (= x21 x22)) :rule implies :premises (t84.t232))
(step t84.t234 (cl (= x21 x22) (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))))) :rule reordering :premises (t84.t233))
(step t84.t235 (cl (= x21 x22)) :rule resolution :premises (t84.t234 t84.t230))
(step t84.t236 (cl (not (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) :rule equiv_pos2)
(step t84.t237 (cl (= (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true) (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))))) :rule equiv_simplify)
(step t84.t238 (cl (not (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)) (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) :rule equiv1 :premises (t84.t237))
(step t84.t239 (cl (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)) :rule hole :args ("11" (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)))
(step t84.t240 (cl (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) :rule resolution :premises (t84.t238 t84.t239))
(step t84.t241 (cl (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) :rule and :premises (a0) :args (22))
(step t84.t242 (cl (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) :rule resolution :premises (t84.t236 t84.t240 t84.t241))
(step t84.t243 (cl (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))) :rule and :premises (t84.t242) :args (1))
(step t84.t244 (cl (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) (= x22 x23)) :rule implies :premises (t84.t243))
(step t84.t245 (cl (= x22 x23) (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))))) :rule reordering :premises (t84.t244))
(step t84.t246 (cl (= x22 x23)) :rule resolution :premises (t84.t245 t84.t241))
(step t84.t247 (cl (not (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) :rule equiv_pos2)
(step t84.t248 (cl (= (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true) (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))))) :rule equiv_simplify)
(step t84.t249 (cl (not (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)) (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) :rule equiv1 :premises (t84.t248))
(step t84.t250 (cl (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)) :rule hole :args ("11" (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)))
(step t84.t251 (cl (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) :rule resolution :premises (t84.t249 t84.t250))
(step t84.t252 (cl (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) :rule and :premises (a0) :args (23))
(step t84.t253 (cl (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) :rule resolution :premises (t84.t247 t84.t251 t84.t252))
(step t84.t254 (cl (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))) :rule and :premises (t84.t253) :args (1))
(step t84.t255 (cl (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) (= x23 x24)) :rule implies :premises (t84.t254))
(step t84.t256 (cl (= x23 x24) (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))))) :rule reordering :premises (t84.t255))
(step t84.t257 (cl (= x23 x24)) :rule resolution :premises (t84.t256 t84.t252))
(step t84.t258 (cl (not (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) :rule equiv_pos2)
(step t84.t259 (cl (= (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true) (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))))) :rule equiv_simplify)
(step t84.t260 (cl (not (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)) (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) :rule equiv1 :premises (t84.t259))
(step t84.t261 (cl (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)) :rule hole :args ("11" (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)))
(step t84.t262 (cl (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) :rule resolution :premises (t84.t260 t84.t261))
(step t84.t263 (cl (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) :rule and :premises (a0) :args (24))
(step t84.t264 (cl (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) :rule resolution :premises (t84.t258 t84.t262 t84.t263))
(step t84.t265 (cl (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))) :rule and :premises (t84.t264) :args (1))
(step t84.t266 (cl (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) (= x24 x25)) :rule implies :premises (t84.t265))
(step t84.t267 (cl (= x24 x25) (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))))) :rule reordering :premises (t84.t266))
(step t84.t268 (cl (= x24 x25)) :rule resolution :premises (t84.t267 t84.t263))
(step t84.t269 (cl (not (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) :rule equiv_pos2)
(step t84.t270 (cl (= (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true) (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))))) :rule equiv_simplify)
(step t84.t271 (cl (not (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)) (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) :rule equiv1 :premises (t84.t270))
(step t84.t272 (cl (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)) :rule hole :args ("11" (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)))
(step t84.t273 (cl (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) :rule resolution :premises (t84.t271 t84.t272))
(step t84.t274 (cl (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) :rule and :premises (a0) :args (25))
(step t84.t275 (cl (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) :rule resolution :premises (t84.t269 t84.t273 t84.t274))
(step t84.t276 (cl (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))) :rule and :premises (t84.t275) :args (1))
(step t84.t277 (cl (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) (= x25 x26)) :rule implies :premises (t84.t276))
(step t84.t278 (cl (= x25 x26) (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))))) :rule reordering :premises (t84.t277))
(step t84.t279 (cl (= x25 x26)) :rule resolution :premises (t84.t278 t84.t274))
(step t84.t280 (cl (not (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) :rule equiv_pos2)
(step t84.t281 (cl (= (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true) (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))))) :rule equiv_simplify)
(step t84.t282 (cl (not (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)) (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) :rule equiv1 :premises (t84.t281))
(step t84.t283 (cl (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)) :rule hole :args ("11" (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)))
(step t84.t284 (cl (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) :rule resolution :premises (t84.t282 t84.t283))
(step t84.t285 (cl (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) :rule and :premises (a0) :args (26))
(step t84.t286 (cl (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) :rule resolution :premises (t84.t280 t84.t284 t84.t285))
(step t84.t287 (cl (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))) :rule and :premises (t84.t286) :args (1))
(step t84.t288 (cl (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) (= x26 x27)) :rule implies :premises (t84.t287))
(step t84.t289 (cl (= x26 x27) (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))))) :rule reordering :premises (t84.t288))
(step t84.t290 (cl (= x26 x27)) :rule resolution :premises (t84.t289 t84.t285))
(step t84.t291 (cl (not (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) :rule equiv_pos2)
(step t84.t292 (cl (= (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true) (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))))) :rule equiv_simplify)
(step t84.t293 (cl (not (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)) (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) :rule equiv1 :premises (t84.t292))
(step t84.t294 (cl (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)) :rule hole :args ("11" (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)))
(step t84.t295 (cl (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) :rule resolution :premises (t84.t293 t84.t294))
(step t84.t296 (cl (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) :rule and :premises (a0) :args (27))
(step t84.t297 (cl (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) :rule resolution :premises (t84.t291 t84.t295 t84.t296))
(step t84.t298 (cl (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))) :rule and :premises (t84.t297) :args (1))
(step t84.t299 (cl (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) (= x27 x28)) :rule implies :premises (t84.t298))
(step t84.t300 (cl (= x27 x28) (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))))) :rule reordering :premises (t84.t299))
(step t84.t301 (cl (= x27 x28)) :rule resolution :premises (t84.t300 t84.t296))
(step t84.t302 (cl (not (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) :rule equiv_pos2)
(step t84.t303 (cl (= (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true) (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))))) :rule equiv_simplify)
(step t84.t304 (cl (not (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)) (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) :rule equiv1 :premises (t84.t303))
(step t84.t305 (cl (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)) :rule hole :args ("11" (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)))
(step t84.t306 (cl (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) :rule resolution :premises (t84.t304 t84.t305))
(step t84.t307 (cl (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) :rule and :premises (a0) :args (28))
(step t84.t308 (cl (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) :rule resolution :premises (t84.t302 t84.t306 t84.t307))
(step t84.t309 (cl (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))) :rule and :premises (t84.t308) :args (1))
(step t84.t310 (cl (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) (= x28 x29)) :rule implies :premises (t84.t309))
(step t84.t311 (cl (= x28 x29) (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))))) :rule reordering :premises (t84.t310))
(step t84.t312 (cl (= x28 x29)) :rule resolution :premises (t84.t311 t84.t307))
(step t84.t313 (cl (not (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) :rule equiv_pos2)
(step t84.t314 (cl (= (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true) (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))))) :rule equiv_simplify)
(step t84.t315 (cl (not (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)) (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) :rule equiv1 :premises (t84.t314))
(step t84.t316 (cl (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)) :rule hole :args ("11" (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)))
(step t84.t317 (cl (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) :rule resolution :premises (t84.t315 t84.t316))
(step t84.t318 (cl (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) :rule and :premises (a0) :args (29))
(step t84.t319 (cl (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) :rule resolution :premises (t84.t313 t84.t317 t84.t318))
(step t84.t320 (cl (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))) :rule and :premises (t84.t319) :args (1))
(step t84.t321 (cl (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) (= x29 x30)) :rule implies :premises (t84.t320))
(step t84.t322 (cl (= x29 x30) (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))))) :rule reordering :premises (t84.t321))
(step t84.t323 (cl (= x29 x30)) :rule resolution :premises (t84.t322 t84.t318))
(step t84.t324 (cl (not (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) :rule equiv_pos2)
(step t84.t325 (cl (= (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true) (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))))) :rule equiv_simplify)
(step t84.t326 (cl (not (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)) (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) :rule equiv1 :premises (t84.t325))
(step t84.t327 (cl (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)) :rule hole :args ("11" (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)))
(step t84.t328 (cl (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) :rule resolution :premises (t84.t326 t84.t327))
(step t84.t329 (cl (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) :rule and :premises (a0) :args (30))
(step t84.t330 (cl (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) :rule resolution :premises (t84.t324 t84.t328 t84.t329))
(step t84.t331 (cl (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))) :rule and :premises (t84.t330) :args (1))
(step t84.t332 (cl (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) (= x30 x31)) :rule implies :premises (t84.t331))
(step t84.t333 (cl (= x30 x31) (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))))) :rule reordering :premises (t84.t332))
(step t84.t334 (cl (= x30 x31)) :rule resolution :premises (t84.t333 t84.t329))
(step t84.t335 (cl (not (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) :rule equiv_pos2)
(step t84.t336 (cl (= (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true) (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))))) :rule equiv_simplify)
(step t84.t337 (cl (not (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)) (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) :rule equiv1 :premises (t84.t336))
(step t84.t338 (cl (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)) :rule hole :args ("11" (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)))
(step t84.t339 (cl (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) :rule resolution :premises (t84.t337 t84.t338))
(step t84.t340 (cl (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) :rule and :premises (a0) :args (31))
(step t84.t341 (cl (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) :rule resolution :premises (t84.t335 t84.t339 t84.t340))
(step t84.t342 (cl (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))) :rule and :premises (t84.t341) :args (1))
(step t84.t343 (cl (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) (= x31 x32)) :rule implies :premises (t84.t342))
(step t84.t344 (cl (= x31 x32) (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))))) :rule reordering :premises (t84.t343))
(step t84.t345 (cl (= x31 x32)) :rule resolution :premises (t84.t344 t84.t340))
(step t84.t346 (cl (not (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) :rule equiv_pos2)
(step t84.t347 (cl (= (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true) (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))))) :rule equiv_simplify)
(step t84.t348 (cl (not (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)) (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) :rule equiv1 :premises (t84.t347))
(step t84.t349 (cl (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)) :rule hole :args ("11" (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)))
(step t84.t350 (cl (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) :rule resolution :premises (t84.t348 t84.t349))
(step t84.t351 (cl (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) :rule and :premises (a0) :args (32))
(step t84.t352 (cl (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) :rule resolution :premises (t84.t346 t84.t350 t84.t351))
(step t84.t353 (cl (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))) :rule and :premises (t84.t352) :args (1))
(step t84.t354 (cl (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) (= x32 x33)) :rule implies :premises (t84.t353))
(step t84.t355 (cl (= x32 x33) (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))))) :rule reordering :premises (t84.t354))
(step t84.t356 (cl (= x32 x33)) :rule resolution :premises (t84.t355 t84.t351))
(step t84.t357 (cl (not (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) :rule equiv_pos2)
(step t84.t358 (cl (= (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true) (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))))) :rule equiv_simplify)
(step t84.t359 (cl (not (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)) (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) :rule equiv1 :premises (t84.t358))
(step t84.t360 (cl (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)) :rule hole :args ("11" (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)))
(step t84.t361 (cl (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) :rule resolution :premises (t84.t359 t84.t360))
(step t84.t362 (cl (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) :rule and :premises (a0) :args (33))
(step t84.t363 (cl (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) :rule resolution :premises (t84.t357 t84.t361 t84.t362))
(step t84.t364 (cl (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))) :rule and :premises (t84.t363) :args (1))
(step t84.t365 (cl (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) (= x33 x34)) :rule implies :premises (t84.t364))
(step t84.t366 (cl (= x33 x34) (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))))) :rule reordering :premises (t84.t365))
(step t84.t367 (cl (= x33 x34)) :rule resolution :premises (t84.t366 t84.t362))
(step t84.t368 (cl (not (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) :rule equiv_pos2)
(step t84.t369 (cl (= (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true) (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))))) :rule equiv_simplify)
(step t84.t370 (cl (not (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)) (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) :rule equiv1 :premises (t84.t369))
(step t84.t371 (cl (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)) :rule hole :args ("11" (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)))
(step t84.t372 (cl (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) :rule resolution :premises (t84.t370 t84.t371))
(step t84.t373 (cl (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) :rule and :premises (a0) :args (34))
(step t84.t374 (cl (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) :rule resolution :premises (t84.t368 t84.t372 t84.t373))
(step t84.t375 (cl (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))) :rule and :premises (t84.t374) :args (1))
(step t84.t376 (cl (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) (= x34 x35)) :rule implies :premises (t84.t375))
(step t84.t377 (cl (= x34 x35) (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))))) :rule reordering :premises (t84.t376))
(step t84.t378 (cl (= x34 x35)) :rule resolution :premises (t84.t377 t84.t373))
(step t84.t379 (cl (not (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) :rule equiv_pos2)
(step t84.t380 (cl (= (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true) (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))))) :rule equiv_simplify)
(step t84.t381 (cl (not (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)) (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) :rule equiv1 :premises (t84.t380))
(step t84.t382 (cl (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)) :rule hole :args ("11" (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)))
(step t84.t383 (cl (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) :rule resolution :premises (t84.t381 t84.t382))
(step t84.t384 (cl (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) :rule and :premises (a0) :args (35))
(step t84.t385 (cl (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) :rule resolution :premises (t84.t379 t84.t383 t84.t384))
(step t84.t386 (cl (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))) :rule and :premises (t84.t385) :args (1))
(step t84.t387 (cl (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) (= x35 x36)) :rule implies :premises (t84.t386))
(step t84.t388 (cl (= x35 x36) (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))))) :rule reordering :premises (t84.t387))
(step t84.t389 (cl (= x35 x36)) :rule resolution :premises (t84.t388 t84.t384))
(step t84.t390 (cl (not (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) :rule equiv_pos2)
(step t84.t391 (cl (= (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true) (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))))) :rule equiv_simplify)
(step t84.t392 (cl (not (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)) (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) :rule equiv1 :premises (t84.t391))
(step t84.t393 (cl (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)) :rule hole :args ("11" (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)))
(step t84.t394 (cl (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) :rule resolution :premises (t84.t392 t84.t393))
(step t84.t395 (cl (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) :rule and :premises (a0) :args (36))
(step t84.t396 (cl (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) :rule resolution :premises (t84.t390 t84.t394 t84.t395))
(step t84.t397 (cl (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))) :rule and :premises (t84.t396) :args (1))
(step t84.t398 (cl (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) (= x36 x37)) :rule implies :premises (t84.t397))
(step t84.t399 (cl (= x36 x37) (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))))) :rule reordering :premises (t84.t398))
(step t84.t400 (cl (= x36 x37)) :rule resolution :premises (t84.t399 t84.t395))
(step t84.t401 (cl (not (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) :rule equiv_pos2)
(step t84.t402 (cl (= (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true) (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))))) :rule equiv_simplify)
(step t84.t403 (cl (not (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)) (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) :rule equiv1 :premises (t84.t402))
(step t84.t404 (cl (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)) :rule hole :args ("11" (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)))
(step t84.t405 (cl (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) :rule resolution :premises (t84.t403 t84.t404))
(step t84.t406 (cl (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) :rule and :premises (a0) :args (37))
(step t84.t407 (cl (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) :rule resolution :premises (t84.t401 t84.t405 t84.t406))
(step t84.t408 (cl (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))) :rule and :premises (t84.t407) :args (1))
(step t84.t409 (cl (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) (= x37 x38)) :rule implies :premises (t84.t408))
(step t84.t410 (cl (= x37 x38) (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))))) :rule reordering :premises (t84.t409))
(step t84.t411 (cl (= x37 x38)) :rule resolution :premises (t84.t410 t84.t406))
(step t84.t412 (cl (not (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) :rule equiv_pos2)
(step t84.t413 (cl (= (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true) (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))))) :rule equiv_simplify)
(step t84.t414 (cl (not (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)) (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) :rule equiv1 :premises (t84.t413))
(step t84.t415 (cl (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)) :rule hole :args ("11" (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)))
(step t84.t416 (cl (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) :rule resolution :premises (t84.t414 t84.t415))
(step t84.t417 (cl (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) :rule and :premises (a0) :args (38))
(step t84.t418 (cl (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) :rule resolution :premises (t84.t412 t84.t416 t84.t417))
(step t84.t419 (cl (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))) :rule and :premises (t84.t418) :args (1))
(step t84.t420 (cl (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) (= x38 x39)) :rule implies :premises (t84.t419))
(step t84.t421 (cl (= x38 x39) (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))))) :rule reordering :premises (t84.t420))
(step t84.t422 (cl (= x38 x39)) :rule resolution :premises (t84.t421 t84.t417))
(step t84.t423 (cl (not (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) :rule equiv_pos2)
(step t84.t424 (cl (= (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true) (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))))) :rule equiv_simplify)
(step t84.t425 (cl (not (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)) (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) :rule equiv1 :premises (t84.t424))
(step t84.t426 (cl (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)) :rule hole :args ("11" (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)))
(step t84.t427 (cl (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) :rule resolution :premises (t84.t425 t84.t426))
(step t84.t428 (cl (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) :rule and :premises (a0) :args (39))
(step t84.t429 (cl (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) :rule resolution :premises (t84.t423 t84.t427 t84.t428))
(step t84.t430 (cl (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))) :rule and :premises (t84.t429) :args (1))
(step t84.t431 (cl (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) (= x39 x40)) :rule implies :premises (t84.t430))
(step t84.t432 (cl (= x39 x40) (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))))) :rule reordering :premises (t84.t431))
(step t84.t433 (cl (= x39 x40)) :rule resolution :premises (t84.t432 t84.t428))
(step t84.t434 (cl (not (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) :rule equiv_pos2)
(step t84.t435 (cl (= (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true) (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))))) :rule equiv_simplify)
(step t84.t436 (cl (not (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)) (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) :rule equiv1 :premises (t84.t435))
(step t84.t437 (cl (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)) :rule hole :args ("11" (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)))
(step t84.t438 (cl (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) :rule resolution :premises (t84.t436 t84.t437))
(step t84.t439 (cl (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) :rule and :premises (a0) :args (40))
(step t84.t440 (cl (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) :rule resolution :premises (t84.t434 t84.t438 t84.t439))
(step t84.t441 (cl (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))) :rule and :premises (t84.t440) :args (1))
(step t84.t442 (cl (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) (= x40 x41)) :rule implies :premises (t84.t441))
(step t84.t443 (cl (= x40 x41) (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))))) :rule reordering :premises (t84.t442))
(step t84.t444 (cl (= x40 x41)) :rule resolution :premises (t84.t443 t84.t439))
(step t84.t445 (cl (not (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) :rule equiv_pos2)
(step t84.t446 (cl (= (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true) (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))))) :rule equiv_simplify)
(step t84.t447 (cl (not (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)) (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) :rule equiv1 :premises (t84.t446))
(step t84.t448 (cl (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)) :rule hole :args ("11" (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)))
(step t84.t449 (cl (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) :rule resolution :premises (t84.t447 t84.t448))
(step t84.t450 (cl (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) :rule and :premises (a0) :args (41))
(step t84.t451 (cl (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) :rule resolution :premises (t84.t445 t84.t449 t84.t450))
(step t84.t452 (cl (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))) :rule and :premises (t84.t451) :args (1))
(step t84.t453 (cl (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) (= x41 x42)) :rule implies :premises (t84.t452))
(step t84.t454 (cl (= x41 x42) (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))))) :rule reordering :premises (t84.t453))
(step t84.t455 (cl (= x41 x42)) :rule resolution :premises (t84.t454 t84.t450))
(step t84.t456 (cl (not (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) :rule equiv_pos2)
(step t84.t457 (cl (= (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true) (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))))) :rule equiv_simplify)
(step t84.t458 (cl (not (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)) (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) :rule equiv1 :premises (t84.t457))
(step t84.t459 (cl (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)) :rule hole :args ("11" (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)))
(step t84.t460 (cl (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) :rule resolution :premises (t84.t458 t84.t459))
(step t84.t461 (cl (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) :rule and :premises (a0) :args (42))
(step t84.t462 (cl (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) :rule resolution :premises (t84.t456 t84.t460 t84.t461))
(step t84.t463 (cl (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))) :rule and :premises (t84.t462) :args (1))
(step t84.t464 (cl (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) (= x42 x43)) :rule implies :premises (t84.t463))
(step t84.t465 (cl (= x42 x43) (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))))) :rule reordering :premises (t84.t464))
(step t84.t466 (cl (= x42 x43)) :rule resolution :premises (t84.t465 t84.t461))
(step t84.t467 (cl (not (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) :rule equiv_pos2)
(step t84.t468 (cl (= (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true) (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))))) :rule equiv_simplify)
(step t84.t469 (cl (not (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)) (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) :rule equiv1 :premises (t84.t468))
(step t84.t470 (cl (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)) :rule hole :args ("11" (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)))
(step t84.t471 (cl (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) :rule resolution :premises (t84.t469 t84.t470))
(step t84.t472 (cl (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) :rule and :premises (a0) :args (43))
(step t84.t473 (cl (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) :rule resolution :premises (t84.t467 t84.t471 t84.t472))
(step t84.t474 (cl (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))) :rule and :premises (t84.t473) :args (1))
(step t84.t475 (cl (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) (= x43 x44)) :rule implies :premises (t84.t474))
(step t84.t476 (cl (= x43 x44) (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))))) :rule reordering :premises (t84.t475))
(step t84.t477 (cl (= x43 x44)) :rule resolution :premises (t84.t476 t84.t472))
(step t84.t478 (cl (not (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) :rule equiv_pos2)
(step t84.t479 (cl (= (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true) (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))))) :rule equiv_simplify)
(step t84.t480 (cl (not (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)) (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) :rule equiv1 :premises (t84.t479))
(step t84.t481 (cl (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)) :rule hole :args ("11" (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)))
(step t84.t482 (cl (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) :rule resolution :premises (t84.t480 t84.t481))
(step t84.t483 (cl (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) :rule and :premises (a0) :args (44))
(step t84.t484 (cl (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) :rule resolution :premises (t84.t478 t84.t482 t84.t483))
(step t84.t485 (cl (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))) :rule and :premises (t84.t484) :args (1))
(step t84.t486 (cl (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) (= x44 x45)) :rule implies :premises (t84.t485))
(step t84.t487 (cl (= x44 x45) (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))))) :rule reordering :premises (t84.t486))
(step t84.t488 (cl (= x44 x45)) :rule resolution :premises (t84.t487 t84.t483))
(step t84.t489 (cl (not (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) :rule equiv_pos2)
(step t84.t490 (cl (= (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true) (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))))) :rule equiv_simplify)
(step t84.t491 (cl (not (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)) (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) :rule equiv1 :premises (t84.t490))
(step t84.t492 (cl (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)) :rule hole :args ("11" (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)))
(step t84.t493 (cl (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) :rule resolution :premises (t84.t491 t84.t492))
(step t84.t494 (cl (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) :rule and :premises (a0) :args (45))
(step t84.t495 (cl (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) :rule resolution :premises (t84.t489 t84.t493 t84.t494))
(step t84.t496 (cl (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))) :rule and :premises (t84.t495) :args (1))
(step t84.t497 (cl (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) (= x45 x46)) :rule implies :premises (t84.t496))
(step t84.t498 (cl (= x45 x46) (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))))) :rule reordering :premises (t84.t497))
(step t84.t499 (cl (= x45 x46)) :rule resolution :premises (t84.t498 t84.t494))
(step t84.t500 (cl (not (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) :rule equiv_pos2)
(step t84.t501 (cl (= (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true) (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))))) :rule equiv_simplify)
(step t84.t502 (cl (not (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)) (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) :rule equiv1 :premises (t84.t501))
(step t84.t503 (cl (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)) :rule hole :args ("11" (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)))
(step t84.t504 (cl (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) :rule resolution :premises (t84.t502 t84.t503))
(step t84.t505 (cl (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) :rule and :premises (a0) :args (46))
(step t84.t506 (cl (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) :rule resolution :premises (t84.t500 t84.t504 t84.t505))
(step t84.t507 (cl (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))) :rule and :premises (t84.t506) :args (1))
(step t84.t508 (cl (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) (= x46 x47)) :rule implies :premises (t84.t507))
(step t84.t509 (cl (= x46 x47) (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))))) :rule reordering :premises (t84.t508))
(step t84.t510 (cl (= x46 x47)) :rule resolution :premises (t84.t509 t84.t505))
(step t84.t511 (cl (not (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) :rule equiv_pos2)
(step t84.t512 (cl (= (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true) (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))))) :rule equiv_simplify)
(step t84.t513 (cl (not (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)) (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) :rule equiv1 :premises (t84.t512))
(step t84.t514 (cl (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)) :rule hole :args ("11" (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)))
(step t84.t515 (cl (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) :rule resolution :premises (t84.t513 t84.t514))
(step t84.t516 (cl (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) :rule and :premises (a0) :args (47))
(step t84.t517 (cl (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) :rule resolution :premises (t84.t511 t84.t515 t84.t516))
(step t84.t518 (cl (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))) :rule and :premises (t84.t517) :args (1))
(step t84.t519 (cl (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) (= x47 x48)) :rule implies :premises (t84.t518))
(step t84.t520 (cl (= x47 x48) (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))))) :rule reordering :premises (t84.t519))
(step t84.t521 (cl (= x47 x48)) :rule resolution :premises (t84.t520 t84.t516))
(step t84.t522 (cl (not (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) :rule equiv_pos2)
(step t84.t523 (cl (= (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true) (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))))) :rule equiv_simplify)
(step t84.t524 (cl (not (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)) (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) :rule equiv1 :premises (t84.t523))
(step t84.t525 (cl (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)) :rule hole :args ("11" (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)))
(step t84.t526 (cl (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) :rule resolution :premises (t84.t524 t84.t525))
(step t84.t527 (cl (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) :rule and :premises (a0) :args (48))
(step t84.t528 (cl (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) :rule resolution :premises (t84.t522 t84.t526 t84.t527))
(step t84.t529 (cl (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))) :rule and :premises (t84.t528) :args (1))
(step t84.t530 (cl (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) (= x48 x49)) :rule implies :premises (t84.t529))
(step t84.t531 (cl (= x48 x49) (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))))) :rule reordering :premises (t84.t530))
(step t84.t532 (cl (= x48 x49)) :rule resolution :premises (t84.t531 t84.t527))
(step t84.t533 (cl (not (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) :rule equiv_pos2)
(step t84.t534 (cl (= (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true) (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))))) :rule equiv_simplify)
(step t84.t535 (cl (not (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)) (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) :rule equiv1 :premises (t84.t534))
(step t84.t536 (cl (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)) :rule hole :args ("11" (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)))
(step t84.t537 (cl (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) :rule resolution :premises (t84.t535 t84.t536))
(step t84.t538 (cl (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) :rule and :premises (a0) :args (49))
(step t84.t539 (cl (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) :rule resolution :premises (t84.t533 t84.t537 t84.t538))
(step t84.t540 (cl (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))) :rule and :premises (t84.t539) :args (1))
(step t84.t541 (cl (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) (= x49 x50)) :rule implies :premises (t84.t540))
(step t84.t542 (cl (= x49 x50) (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))))) :rule reordering :premises (t84.t541))
(step t84.t543 (cl (= x49 x50)) :rule resolution :premises (t84.t542 t84.t538))
(step t84.t544 (cl (not (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) :rule equiv_pos2)
(step t84.t545 (cl (= (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true) (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))))) :rule equiv_simplify)
(step t84.t546 (cl (not (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)) (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) :rule equiv1 :premises (t84.t545))
(step t84.t547 (cl (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)) :rule hole :args ("11" (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)))
(step t84.t548 (cl (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) :rule resolution :premises (t84.t546 t84.t547))
(step t84.t549 (cl (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) :rule and :premises (a0) :args (50))
(step t84.t550 (cl (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) :rule resolution :premises (t84.t544 t84.t548 t84.t549))
(step t84.t551 (cl (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))) :rule and :premises (t84.t550) :args (1))
(step t84.t552 (cl (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) (= x50 x51)) :rule implies :premises (t84.t551))
(step t84.t553 (cl (= x50 x51) (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))))) :rule reordering :premises (t84.t552))
(step t84.t554 (cl (= x50 x51)) :rule resolution :premises (t84.t553 t84.t549))
(step t84.t555 (cl (not (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))))) (not (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52)))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) :rule equiv_pos2)
(step t84.t556 (cl (= (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true) (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))))) :rule equiv_simplify)
(step t84.t557 (cl (not (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true)) (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))))) :rule equiv1 :premises (t84.t556))
(step t84.t558 (cl (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true)) :rule hole :args ("11" (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true)))
(step t84.t559 (cl (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))))) :rule resolution :premises (t84.t557 t84.t558))
(step t84.t560 (cl (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52)))) :rule and :premises (a0) :args (51))
(step t84.t561 (cl (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) :rule resolution :premises (t84.t555 t84.t559 t84.t560))
(step t84.t562 (cl (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))) :rule and :premises (t84.t561) :args (1))
(step t84.t563 (cl (not (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52)))) (= x51 x52)) :rule implies :premises (t84.t562))
(step t84.t564 (cl (= x51 x52) (not (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))))) :rule reordering :premises (t84.t563))
(step t84.t565 (cl (= x51 x52)) :rule resolution :premises (t84.t564 t84.t560))
(step t84.t566 (cl (not (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))))) (not (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53)))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) :rule equiv_pos2)
(step t84.t567 (cl (= (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true) (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))))) :rule equiv_simplify)
(step t84.t568 (cl (not (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true)) (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))))) :rule equiv1 :premises (t84.t567))
(step t84.t569 (cl (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true)) :rule hole :args ("11" (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true)))
(step t84.t570 (cl (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))))) :rule resolution :premises (t84.t568 t84.t569))
(step t84.t571 (cl (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53)))) :rule and :premises (a0) :args (52))
(step t84.t572 (cl (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) :rule resolution :premises (t84.t566 t84.t570 t84.t571))
(step t84.t573 (cl (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))) :rule and :premises (t84.t572) :args (1))
(step t84.t574 (cl (not (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53)))) (= x52 x53)) :rule implies :premises (t84.t573))
(step t84.t575 (cl (= x52 x53) (not (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))))) :rule reordering :premises (t84.t574))
(step t84.t576 (cl (= x52 x53)) :rule resolution :premises (t84.t575 t84.t571))
(step t84.t577 (cl (not (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))))) (not (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54)))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) :rule equiv_pos2)
(step t84.t578 (cl (= (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true) (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))))) :rule equiv_simplify)
(step t84.t579 (cl (not (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true)) (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))))) :rule equiv1 :premises (t84.t578))
(step t84.t580 (cl (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true)) :rule hole :args ("11" (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true)))
(step t84.t581 (cl (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))))) :rule resolution :premises (t84.t579 t84.t580))
(step t84.t582 (cl (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54)))) :rule and :premises (a0) :args (53))
(step t84.t583 (cl (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) :rule resolution :premises (t84.t577 t84.t581 t84.t582))
(step t84.t584 (cl (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))) :rule and :premises (t84.t583) :args (1))
(step t84.t585 (cl (not (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54)))) (= x53 x54)) :rule implies :premises (t84.t584))
(step t84.t586 (cl (= x53 x54) (not (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))))) :rule reordering :premises (t84.t585))
(step t84.t587 (cl (= x53 x54)) :rule resolution :premises (t84.t586 t84.t582))
(step t84.t588 (cl (not (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))))) (not (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55)))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) :rule equiv_pos2)
(step t84.t589 (cl (= (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true) (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))))) :rule equiv_simplify)
(step t84.t590 (cl (not (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true)) (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))))) :rule equiv1 :premises (t84.t589))
(step t84.t591 (cl (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true)) :rule hole :args ("11" (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true)))
(step t84.t592 (cl (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))))) :rule resolution :premises (t84.t590 t84.t591))
(step t84.t593 (cl (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55)))) :rule and :premises (a0) :args (54))
(step t84.t594 (cl (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) :rule resolution :premises (t84.t588 t84.t592 t84.t593))
(step t84.t595 (cl (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))) :rule and :premises (t84.t594) :args (1))
(step t84.t596 (cl (not (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55)))) (= x54 x55)) :rule implies :premises (t84.t595))
(step t84.t597 (cl (= x54 x55) (not (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))))) :rule reordering :premises (t84.t596))
(step t84.t598 (cl (= x54 x55)) :rule resolution :premises (t84.t597 t84.t593))
(step t84.t599 (cl (not (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))))) (not (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56)))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) :rule equiv_pos2)
(step t84.t600 (cl (= (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true) (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))))) :rule equiv_simplify)
(step t84.t601 (cl (not (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true)) (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))))) :rule equiv1 :premises (t84.t600))
(step t84.t602 (cl (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true)) :rule hole :args ("11" (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true)))
(step t84.t603 (cl (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))))) :rule resolution :premises (t84.t601 t84.t602))
(step t84.t604 (cl (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56)))) :rule and :premises (a0) :args (55))
(step t84.t605 (cl (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) :rule resolution :premises (t84.t599 t84.t603 t84.t604))
(step t84.t606 (cl (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))) :rule and :premises (t84.t605) :args (1))
(step t84.t607 (cl (not (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56)))) (= x55 x56)) :rule implies :premises (t84.t606))
(step t84.t608 (cl (= x55 x56) (not (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))))) :rule reordering :premises (t84.t607))
(step t84.t609 (cl (= x55 x56)) :rule resolution :premises (t84.t608 t84.t604))
(step t84.t610 (cl (not (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))))) (not (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57)))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) :rule equiv_pos2)
(step t84.t611 (cl (= (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true) (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))))) :rule equiv_simplify)
(step t84.t612 (cl (not (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true)) (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))))) :rule equiv1 :premises (t84.t611))
(step t84.t613 (cl (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true)) :rule hole :args ("11" (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true)))
(step t84.t614 (cl (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))))) :rule resolution :premises (t84.t612 t84.t613))
(step t84.t615 (cl (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57)))) :rule and :premises (a0) :args (56))
(step t84.t616 (cl (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) :rule resolution :premises (t84.t610 t84.t614 t84.t615))
(step t84.t617 (cl (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))) :rule and :premises (t84.t616) :args (1))
(step t84.t618 (cl (not (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57)))) (= x56 x57)) :rule implies :premises (t84.t617))
(step t84.t619 (cl (= x56 x57) (not (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))))) :rule reordering :premises (t84.t618))
(step t84.t620 (cl (= x56 x57)) :rule resolution :premises (t84.t619 t84.t615))
(step t84.t621 (cl (not (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))))) (not (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58)))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) :rule equiv_pos2)
(step t84.t622 (cl (= (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true) (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))))) :rule equiv_simplify)
(step t84.t623 (cl (not (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true)) (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))))) :rule equiv1 :premises (t84.t622))
(step t84.t624 (cl (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true)) :rule hole :args ("11" (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true)))
(step t84.t625 (cl (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))))) :rule resolution :premises (t84.t623 t84.t624))
(step t84.t626 (cl (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58)))) :rule and :premises (a0) :args (57))
(step t84.t627 (cl (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) :rule resolution :premises (t84.t621 t84.t625 t84.t626))
(step t84.t628 (cl (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))) :rule and :premises (t84.t627) :args (1))
(step t84.t629 (cl (not (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58)))) (= x57 x58)) :rule implies :premises (t84.t628))
(step t84.t630 (cl (= x57 x58) (not (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))))) :rule reordering :premises (t84.t629))
(step t84.t631 (cl (= x57 x58)) :rule resolution :premises (t84.t630 t84.t626))
(step t84.t632 (cl (= x12 x58)) :rule trans :premises (t84.t145 t84.t156 t84.t158 t84.t169 t84.t180 t84.t191 t84.t202 t84.t213 t84.t224 t84.t235 t84.t246 t84.t257 t84.t268 t84.t279 t84.t290 t84.t301 t84.t312 t84.t323 t84.t334 t84.t345 t84.t356 t84.t367 t84.t378 t84.t389 t84.t400 t84.t411 t84.t422 t84.t433 t84.t444 t84.t455 t84.t466 t84.t477 t84.t488 t84.t499 t84.t510 t84.t521 t84.t532 t84.t543 t84.t554 t84.t565 t84.t576 t84.t587 t84.t598 t84.t609 t84.t620 t84.t631))
(step t84.t633 (cl (= (= x11 x12) (= x0 x58))) :rule cong :premises (t84.t134 t84.t632))
(step t84.t634 (cl (= (= (= x0 x58) false) (not (= x0 x58)))) :rule equiv_simplify)
(step t84.t635 (cl (= (= x0 x58) false) (not (not (= x0 x58)))) :rule equiv2 :premises (t84.t634))
(step t84.t636 (cl (not (not (not (= x0 x58)))) (= x0 x58)) :rule not_not)
(step t84.t637 (cl (= (= x0 x58) false) (= x0 x58)) :rule resolution :premises (t84.t635 t84.t636))
(step t84.t638 (cl (not (= x0 x58))) :rule and :premises (a0) :args (58))
(step t84.t639 (cl (= (= x0 x58) false)) :rule resolution :premises (t84.t637 t84.t638))
(step t84.t640 (cl (= (= x11 x12) false)) :rule trans :premises (t84.t633 t84.t639))
(step t84.t641 (cl (not (= x11 x12))) :rule resolution :premises (t84.t1 t84.t640))
(step t84 (cl (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) :rule subproof :discharge (t84.a0 t84.a1 t84.a2 t84.a3 t84.a4 t84.a5 t84.a6 t84.a7 t84.a8 t84.a9 t84.a10 t84.a11 t84.a12 t84.a13 t84.a14 t84.a15 t84.a16 t84.a17 t84.a18 t84.a19 t84.a20 t84.a21 t84.a22 t84.a23 t84.a24 t84.a25 t84.a26 t84.a27 t84.a28 t84.a29 t84.a30 t84.a31 t84.a32 t84.a33 t84.a34 t84.a35 t84.a36 t84.a37 t84.a38 t84.a39 t84.a40 t84.a41 t84.a42 t84.a43 t84.a44 t84.a45 t84.a46 t84.a47 t84.a48 t84.a49 t84.a50 t84.a51 t84.a52 t84.a53 t84.a54 t84.a55 t84.a56 t84.a57))
(step t85 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (= x0 x58))) :rule and_pos :args (0))
(step t86 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x0 x1)) :rule and_pos :args (1))
(step t87 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x1 x2)) :rule and_pos :args (2))
(step t88 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x2 x3)) :rule and_pos :args (3))
(step t89 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x3 x4)) :rule and_pos :args (4))
(step t90 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x4 x5)) :rule and_pos :args (5))
(step t91 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x5 x6)) :rule and_pos :args (6))
(step t92 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x6 x7)) :rule and_pos :args (7))
(step t93 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x7 x8)) :rule and_pos :args (8))
(step t94 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x8 x9)) :rule and_pos :args (9))
(step t95 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x9 x10)) :rule and_pos :args (10))
(step t96 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x10 x11)) :rule and_pos :args (11))
(step t97 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x57 x58)) :rule and_pos :args (12))
(step t98 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x56 x57)) :rule and_pos :args (13))
(step t99 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x55 x56)) :rule and_pos :args (14))
(step t100 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x54 x55)) :rule and_pos :args (15))
(step t101 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x53 x54)) :rule and_pos :args (16))
(step t102 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x52 x53)) :rule and_pos :args (17))
(step t103 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x51 x52)) :rule and_pos :args (18))
(step t104 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x50 x51)) :rule and_pos :args (19))
(step t105 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x49 x50)) :rule and_pos :args (20))
(step t106 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x48 x49)) :rule and_pos :args (21))
(step t107 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x47 x48)) :rule and_pos :args (22))
(step t108 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x46 x47)) :rule and_pos :args (23))
(step t109 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x45 x46)) :rule and_pos :args (24))
(step t110 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x44 x45)) :rule and_pos :args (25))
(step t111 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x43 x44)) :rule and_pos :args (26))
(step t112 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x42 x43)) :rule and_pos :args (27))
(step t113 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x41 x42)) :rule and_pos :args (28))
(step t114 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x40 x41)) :rule and_pos :args (29))
(step t115 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x39 x40)) :rule and_pos :args (30))
(step t116 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x38 x39)) :rule and_pos :args (31))
(step t117 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x37 x38)) :rule and_pos :args (32))
(step t118 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x36 x37)) :rule and_pos :args (33))
(step t119 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x35 x36)) :rule and_pos :args (34))
(step t120 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x34 x35)) :rule and_pos :args (35))
(step t121 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x33 x34)) :rule and_pos :args (36))
(step t122 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x32 x33)) :rule and_pos :args (37))
(step t123 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x31 x32)) :rule and_pos :args (38))
(step t124 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x30 x31)) :rule and_pos :args (39))
(step t125 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x29 x30)) :rule and_pos :args (40))
(step t126 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x28 x29)) :rule and_pos :args (41))
(step t127 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x27 x28)) :rule and_pos :args (42))
(step t128 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x26 x27)) :rule and_pos :args (43))
(step t129 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x25 x26)) :rule and_pos :args (44))
(step t130 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x24 x25)) :rule and_pos :args (45))
(step t131 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x23 x24)) :rule and_pos :args (46))
(step t132 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x22 x23)) :rule and_pos :args (47))
(step t133 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x21 x22)) :rule and_pos :args (48))
(step t134 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x20 x21)) :rule and_pos :args (49))
(step t135 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x19 x20)) :rule and_pos :args (50))
(step t136 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x18 x19)) :rule and_pos :args (51))
(step t137 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x17 x18)) :rule and_pos :args (52))
(step t138 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x16 x17)) :rule and_pos :args (53))
(step t139 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x15 x16)) :rule and_pos :args (54))
(step t140 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x14 x15)) :rule and_pos :args (55))
(step t141 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x13 x14)) :rule and_pos :args (56))
(step t142 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (= x12 x13)) :rule and_pos :args (57))
(step t143 (cl (not (= x11 x12)) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13)))) :rule resolution :premises (t84 t85 t86 t87 t88 t89 t90 t91 t92 t93 t94 t95 t96 t97 t98 t99 t100 t101 t102 t103 t104 t105 t106 t107 t108 t109 t110 t111 t112 t113 t114 t115 t116 t117 t118 t119 t120 t121 t122 t123 t124 t125 t126 t127 t128 t129 t130 t131 t132 t133 t134 t135 t136 t137 t138 t139 t140 t141 t142))
(step t144 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (= x11 x12))) :rule reordering :premises (t143))
(step t145 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (= x11 x12))) :rule contraction :premises (t144))
(step t146 (cl (=> (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13)) (not (= x11 x12))) (not (= x11 x12))) :rule resolution :premises (t83 t145))
(step t147 (cl (=> (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13)) (not (= x11 x12))) (not (not (= x11 x12)))) :rule implies_neg2)
(step t148 (cl (=> (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13)) (not (= x11 x12))) (=> (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13)) (not (= x11 x12)))) :rule resolution :premises (t146 t147))
(step t149 (cl (=> (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13)) (not (= x11 x12)))) :rule contraction :premises (t148))
(step t150 (cl (not (and (not (= x0 x58)) (= x0 x1) (= x1 x2) (= x2 x3) (= x3 x4) (= x4 x5) (= x5 x6) (= x6 x7) (= x7 x8) (= x8 x9) (= x9 x10) (= x10 x11) (= x57 x58) (= x56 x57) (= x55 x56) (= x54 x55) (= x53 x54) (= x52 x53) (= x51 x52) (= x50 x51) (= x49 x50) (= x48 x49) (= x47 x48) (= x46 x47) (= x45 x46) (= x44 x45) (= x43 x44) (= x42 x43) (= x41 x42) (= x40 x41) (= x39 x40) (= x38 x39) (= x37 x38) (= x36 x37) (= x35 x36) (= x34 x35) (= x33 x34) (= x32 x33) (= x31 x32) (= x30 x31) (= x29 x30) (= x28 x29) (= x27 x28) (= x26 x27) (= x25 x26) (= x24 x25) (= x23 x24) (= x22 x23) (= x21 x22) (= x20 x21) (= x19 x20) (= x18 x19) (= x17 x18) (= x16 x17) (= x15 x16) (= x14 x15) (= x13 x14) (= x12 x13))) (not (= x11 x12))) :rule implies :premises (t149))
(step t151 (cl (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) :rule resolution :premises (t82 t150))
(step t152 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (not (= x0 x58))))) :rule or_neg :args (0))
(step t153 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x0 x1)))) :rule or_neg :args (1))
(step t154 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x1 x2)))) :rule or_neg :args (2))
(step t155 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x2 x3)))) :rule or_neg :args (3))
(step t156 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x3 x4)))) :rule or_neg :args (4))
(step t157 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x4 x5)))) :rule or_neg :args (5))
(step t158 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x5 x6)))) :rule or_neg :args (6))
(step t159 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x6 x7)))) :rule or_neg :args (7))
(step t160 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x7 x8)))) :rule or_neg :args (8))
(step t161 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x8 x9)))) :rule or_neg :args (9))
(step t162 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x9 x10)))) :rule or_neg :args (10))
(step t163 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x10 x11)))) :rule or_neg :args (11))
(step t164 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x57 x58)))) :rule or_neg :args (12))
(step t165 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x56 x57)))) :rule or_neg :args (13))
(step t166 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x55 x56)))) :rule or_neg :args (14))
(step t167 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x54 x55)))) :rule or_neg :args (15))
(step t168 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x53 x54)))) :rule or_neg :args (16))
(step t169 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x52 x53)))) :rule or_neg :args (17))
(step t170 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x51 x52)))) :rule or_neg :args (18))
(step t171 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x50 x51)))) :rule or_neg :args (19))
(step t172 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x49 x50)))) :rule or_neg :args (20))
(step t173 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x48 x49)))) :rule or_neg :args (21))
(step t174 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x47 x48)))) :rule or_neg :args (22))
(step t175 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x46 x47)))) :rule or_neg :args (23))
(step t176 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x45 x46)))) :rule or_neg :args (24))
(step t177 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x44 x45)))) :rule or_neg :args (25))
(step t178 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x43 x44)))) :rule or_neg :args (26))
(step t179 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x42 x43)))) :rule or_neg :args (27))
(step t180 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x41 x42)))) :rule or_neg :args (28))
(step t181 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x40 x41)))) :rule or_neg :args (29))
(step t182 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x39 x40)))) :rule or_neg :args (30))
(step t183 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x38 x39)))) :rule or_neg :args (31))
(step t184 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x37 x38)))) :rule or_neg :args (32))
(step t185 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x36 x37)))) :rule or_neg :args (33))
(step t186 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x35 x36)))) :rule or_neg :args (34))
(step t187 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x34 x35)))) :rule or_neg :args (35))
(step t188 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x33 x34)))) :rule or_neg :args (36))
(step t189 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x32 x33)))) :rule or_neg :args (37))
(step t190 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x31 x32)))) :rule or_neg :args (38))
(step t191 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x30 x31)))) :rule or_neg :args (39))
(step t192 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x29 x30)))) :rule or_neg :args (40))
(step t193 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x28 x29)))) :rule or_neg :args (41))
(step t194 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x27 x28)))) :rule or_neg :args (42))
(step t195 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x26 x27)))) :rule or_neg :args (43))
(step t196 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x25 x26)))) :rule or_neg :args (44))
(step t197 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x24 x25)))) :rule or_neg :args (45))
(step t198 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x23 x24)))) :rule or_neg :args (46))
(step t199 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x22 x23)))) :rule or_neg :args (47))
(step t200 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x21 x22)))) :rule or_neg :args (48))
(step t201 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x20 x21)))) :rule or_neg :args (49))
(step t202 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x19 x20)))) :rule or_neg :args (50))
(step t203 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x18 x19)))) :rule or_neg :args (51))
(step t204 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x17 x18)))) :rule or_neg :args (52))
(step t205 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x16 x17)))) :rule or_neg :args (53))
(step t206 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x15 x16)))) :rule or_neg :args (54))
(step t207 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x14 x15)))) :rule or_neg :args (55))
(step t208 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x13 x14)))) :rule or_neg :args (56))
(step t209 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x12 x13)))) :rule or_neg :args (57))
(step t210 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (not (not (= x11 x12)))) :rule or_neg :args (58))
(step t211 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12)))) :rule resolution :premises (t151 t152 t153 t154 t155 t156 t157 t158 t159 t160 t161 t162 t163 t164 t165 t166 t167 t168 t169 t170 t171 t172 t173 t174 t175 t176 t177 t178 t179 t180 t181 t182 t183 t184 t185 t186 t187 t188 t189 t190 t191 t192 t193 t194 t195 t196 t197 t198 t199 t200 t201 t202 t203 t204 t205 t206 t207 t208 t209 t210))
(step t212 (cl (or (not (not (= x0 x58))) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12)))) :rule contraction :premises (t211))
(step t213 (cl (or (= x0 x58) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12)))) :rule resolution :premises (t12 t81 t212))
(step t214 (cl (= x0 x58) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x57 x58)) (not (= x56 x57)) (not (= x55 x56)) (not (= x54 x55)) (not (= x53 x54)) (not (= x52 x53)) (not (= x51 x52)) (not (= x50 x51)) (not (= x49 x50)) (not (= x48 x49)) (not (= x47 x48)) (not (= x46 x47)) (not (= x45 x46)) (not (= x44 x45)) (not (= x43 x44)) (not (= x42 x43)) (not (= x41 x42)) (not (= x40 x41)) (not (= x39 x40)) (not (= x38 x39)) (not (= x37 x38)) (not (= x36 x37)) (not (= x35 x36)) (not (= x34 x35)) (not (= x33 x34)) (not (= x32 x33)) (not (= x31 x32)) (not (= x30 x31)) (not (= x29 x30)) (not (= x28 x29)) (not (= x27 x28)) (not (= x26 x27)) (not (= x25 x26)) (not (= x24 x25)) (not (= x23 x24)) (not (= x22 x23)) (not (= x21 x22)) (not (= x20 x21)) (not (= x19 x20)) (not (= x18 x19)) (not (= x17 x18)) (not (= x16 x17)) (not (= x15 x16)) (not (= x14 x15)) (not (= x13 x14)) (not (= x12 x13)) (not (= x11 x12))) :rule or :premises (t213))
(step t215 (cl (= x0 x58) (not (= x0 x1)) (not (= x1 x2)) (not (= x2 x3)) (not (= x3 x4)) (not (= x4 x5)) (not (= x5 x6)) (not (= x6 x7)) (not (= x7 x8)) (not (= x8 x9)) (not (= x9 x10)) (not (= x10 x11)) (not (= x11 x12)) (not (= x12 x13)) (not (= x13 x14)) (not (= x14 x15)) (not (= x15 x16)) (not (= x16 x17)) (not (= x17 x18)) (not (= x18 x19)) (not (= x19 x20)) (not (= x20 x21)) (not (= x21 x22)) (not (= x22 x23)) (not (= x23 x24)) (not (= x24 x25)) (not (= x25 x26)) (not (= x26 x27)) (not (= x27 x28)) (not (= x28 x29)) (not (= x29 x30)) (not (= x30 x31)) (not (= x31 x32)) (not (= x32 x33)) (not (= x33 x34)) (not (= x34 x35)) (not (= x35 x36)) (not (= x36 x37)) (not (= x37 x38)) (not (= x38 x39)) (not (= x39 x40)) (not (= x40 x41)) (not (= x41 x42)) (not (= x42 x43)) (not (= x43 x44)) (not (= x44 x45)) (not (= x45 x46)) (not (= x46 x47)) (not (= x47 x48)) (not (= x48 x49)) (not (= x49 x50)) (not (= x50 x51)) (not (= x51 x52)) (not (= x52 x53)) (not (= x53 x54)) (not (= x54 x55)) (not (= x55 x56)) (not (= x56 x57)) (not (= x57 x58))) :rule reordering :premises (t214))
(step t216 (cl (not (= x0 x58))) :rule and :premises (a0) :args (58))
(step t217 (cl (not (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) :rule equiv_pos2)
(step t218 (cl (= (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true) (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))))) :rule equiv_simplify)
(step t219 (cl (not (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)) (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) :rule equiv1 :premises (t218))
(step t220 (cl (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)) :rule hole :args ("11" (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)))
(step t221 (cl (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) :rule resolution :premises (t219 t220))
(step t222 (cl (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) :rule and :premises (a0) :args (0))
(step t223 (cl (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) :rule resolution :premises (t217 t221 t222))
(step t224 (cl (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))) :rule and :premises (t223) :args (1))
(step t225 (cl (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) (= x0 x1)) :rule implies :premises (t224))
(step t226 (cl (= x0 x1) (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))))) :rule reordering :premises (t225))
(step t227 (cl (= x0 x1)) :rule resolution :premises (t226 t222))
(step t228 (cl (not (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) :rule equiv_pos2)
(step t229 (cl (= (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true) (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))))) :rule equiv_simplify)
(step t230 (cl (not (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)) (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) :rule equiv1 :premises (t229))
(step t231 (cl (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)) :rule hole :args ("11" (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)))
(step t232 (cl (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) :rule resolution :premises (t230 t231))
(step t233 (cl (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) :rule and :premises (a0) :args (1))
(step t234 (cl (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) :rule resolution :premises (t228 t232 t233))
(step t235 (cl (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))) :rule and :premises (t234) :args (1))
(step t236 (cl (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) (= x1 x2)) :rule implies :premises (t235))
(step t237 (cl (= x1 x2) (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))))) :rule reordering :premises (t236))
(step t238 (cl (= x1 x2)) :rule resolution :premises (t237 t233))
(step t239 (cl (not (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) :rule equiv_pos2)
(step t240 (cl (= (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true) (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))))) :rule equiv_simplify)
(step t241 (cl (not (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)) (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) :rule equiv1 :premises (t240))
(step t242 (cl (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)) :rule hole :args ("11" (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)))
(step t243 (cl (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) :rule resolution :premises (t241 t242))
(step t244 (cl (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) :rule and :premises (a0) :args (2))
(step t245 (cl (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) :rule resolution :premises (t239 t243 t244))
(step t246 (cl (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))) :rule and :premises (t245) :args (1))
(step t247 (cl (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) (= x2 x3)) :rule implies :premises (t246))
(step t248 (cl (= x2 x3) (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))))) :rule reordering :premises (t247))
(step t249 (cl (= x2 x3)) :rule resolution :premises (t248 t244))
(step t250 (cl (not (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) :rule equiv_pos2)
(step t251 (cl (= (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true) (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))))) :rule equiv_simplify)
(step t252 (cl (not (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)) (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) :rule equiv1 :premises (t251))
(step t253 (cl (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)) :rule hole :args ("11" (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)))
(step t254 (cl (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) :rule resolution :premises (t252 t253))
(step t255 (cl (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) :rule and :premises (a0) :args (3))
(step t256 (cl (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) :rule resolution :premises (t250 t254 t255))
(step t257 (cl (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))) :rule and :premises (t256) :args (1))
(step t258 (cl (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) (= x3 x4)) :rule implies :premises (t257))
(step t259 (cl (= x3 x4) (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))))) :rule reordering :premises (t258))
(step t260 (cl (= x3 x4)) :rule resolution :premises (t259 t255))
(step t261 (cl (not (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) :rule equiv_pos2)
(step t262 (cl (= (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true) (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))))) :rule equiv_simplify)
(step t263 (cl (not (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)) (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) :rule equiv1 :premises (t262))
(step t264 (cl (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)) :rule hole :args ("11" (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)))
(step t265 (cl (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) :rule resolution :premises (t263 t264))
(step t266 (cl (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) :rule and :premises (a0) :args (4))
(step t267 (cl (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) :rule resolution :premises (t261 t265 t266))
(step t268 (cl (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))) :rule and :premises (t267) :args (1))
(step t269 (cl (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) (= x4 x5)) :rule implies :premises (t268))
(step t270 (cl (= x4 x5) (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))))) :rule reordering :premises (t269))
(step t271 (cl (= x4 x5)) :rule resolution :premises (t270 t266))
(step t272 (cl (not (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) :rule equiv_pos2)
(step t273 (cl (= (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true) (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))))) :rule equiv_simplify)
(step t274 (cl (not (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)) (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) :rule equiv1 :premises (t273))
(step t275 (cl (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)) :rule hole :args ("11" (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)))
(step t276 (cl (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) :rule resolution :premises (t274 t275))
(step t277 (cl (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) :rule and :premises (a0) :args (5))
(step t278 (cl (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) :rule resolution :premises (t272 t276 t277))
(step t279 (cl (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))) :rule and :premises (t278) :args (1))
(step t280 (cl (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) (= x5 x6)) :rule implies :premises (t279))
(step t281 (cl (= x5 x6) (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))))) :rule reordering :premises (t280))
(step t282 (cl (= x5 x6)) :rule resolution :premises (t281 t277))
(step t283 (cl (not (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) :rule equiv_pos2)
(step t284 (cl (= (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true) (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))))) :rule equiv_simplify)
(step t285 (cl (not (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)) (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) :rule equiv1 :premises (t284))
(step t286 (cl (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)) :rule hole :args ("11" (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)))
(step t287 (cl (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) :rule resolution :premises (t285 t286))
(step t288 (cl (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) :rule and :premises (a0) :args (6))
(step t289 (cl (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) :rule resolution :premises (t283 t287 t288))
(step t290 (cl (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))) :rule and :premises (t289) :args (1))
(step t291 (cl (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) (= x6 x7)) :rule implies :premises (t290))
(step t292 (cl (= x6 x7) (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))))) :rule reordering :premises (t291))
(step t293 (cl (= x6 x7)) :rule resolution :premises (t292 t288))
(step t294 (cl (not (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) :rule equiv_pos2)
(step t295 (cl (= (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true) (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))))) :rule equiv_simplify)
(step t296 (cl (not (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)) (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) :rule equiv1 :premises (t295))
(step t297 (cl (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)) :rule hole :args ("11" (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)))
(step t298 (cl (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) :rule resolution :premises (t296 t297))
(step t299 (cl (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) :rule and :premises (a0) :args (7))
(step t300 (cl (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) :rule resolution :premises (t294 t298 t299))
(step t301 (cl (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))) :rule and :premises (t300) :args (1))
(step t302 (cl (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) (= x7 x8)) :rule implies :premises (t301))
(step t303 (cl (= x7 x8) (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))))) :rule reordering :premises (t302))
(step t304 (cl (= x7 x8)) :rule resolution :premises (t303 t299))
(step t305 (cl (not (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) :rule equiv_pos2)
(step t306 (cl (= (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true) (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))))) :rule equiv_simplify)
(step t307 (cl (not (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)) (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) :rule equiv1 :premises (t306))
(step t308 (cl (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)) :rule hole :args ("11" (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)))
(step t309 (cl (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) :rule resolution :premises (t307 t308))
(step t310 (cl (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) :rule and :premises (a0) :args (8))
(step t311 (cl (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) :rule resolution :premises (t305 t309 t310))
(step t312 (cl (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))) :rule and :premises (t311) :args (1))
(step t313 (cl (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) (= x8 x9)) :rule implies :premises (t312))
(step t314 (cl (= x8 x9) (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))))) :rule reordering :premises (t313))
(step t315 (cl (= x8 x9)) :rule resolution :premises (t314 t310))
(step t316 (cl (not (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) :rule equiv_pos2)
(step t317 (cl (= (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true) (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))))) :rule equiv_simplify)
(step t318 (cl (not (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)) (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) :rule equiv1 :premises (t317))
(step t319 (cl (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)) :rule hole :args ("11" (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)))
(step t320 (cl (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) :rule resolution :premises (t318 t319))
(step t321 (cl (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) :rule and :premises (a0) :args (9))
(step t322 (cl (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) :rule resolution :premises (t316 t320 t321))
(step t323 (cl (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))) :rule and :premises (t322) :args (1))
(step t324 (cl (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) (= x9 x10)) :rule implies :premises (t323))
(step t325 (cl (= x9 x10) (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))))) :rule reordering :premises (t324))
(step t326 (cl (= x9 x10)) :rule resolution :premises (t325 t321))
(step t327 (cl (not (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) :rule equiv_pos2)
(step t328 (cl (= (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true) (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))))) :rule equiv_simplify)
(step t329 (cl (not (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)) (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) :rule equiv1 :premises (t328))
(step t330 (cl (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)) :rule hole :args ("11" (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)))
(step t331 (cl (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) :rule resolution :premises (t329 t330))
(step t332 (cl (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) :rule and :premises (a0) :args (10))
(step t333 (cl (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) :rule resolution :premises (t327 t331 t332))
(step t334 (cl (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))) :rule and :premises (t333) :args (1))
(step t335 (cl (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) (= x10 x11)) :rule implies :premises (t334))
(step t336 (cl (= x10 x11) (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))))) :rule reordering :premises (t335))
(step t337 (cl (= x10 x11)) :rule resolution :premises (t336 t332))
(step t338 (cl (not (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))))) (not (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12)))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) :rule equiv_pos2)
(step t339 (cl (= (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true) (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))))) :rule equiv_simplify)
(step t340 (cl (not (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true)) (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))))) :rule equiv1 :premises (t339))
(step t341 (cl (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true)) :rule hole :args ("11" (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true)))
(step t342 (cl (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))))) :rule resolution :premises (t340 t341))
(step t343 (cl (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12)))) :rule and :premises (a0) :args (11))
(step t344 (cl (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) :rule resolution :premises (t338 t342 t343))
(step t345 (cl (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))) :rule and :premises (t344) :args (1))
(step t346 (cl (not (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12)))) (= x11 x12)) :rule implies :premises (t345))
(step t347 (cl (= x11 x12) (not (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))))) :rule reordering :premises (t346))
(step t348 (cl (= x11 x12)) :rule resolution :premises (t347 t343))
(step t349 (cl (not (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) :rule equiv_pos2)
(step t350 (cl (= (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true) (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))))) :rule equiv_simplify)
(step t351 (cl (not (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)) (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) :rule equiv1 :premises (t350))
(step t352 (cl (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)) :rule hole :args ("11" (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)))
(step t353 (cl (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) :rule resolution :premises (t351 t352))
(step t354 (cl (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) :rule and :premises (a0) :args (12))
(step t355 (cl (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) :rule resolution :premises (t349 t353 t354))
(step t356 (cl (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))) :rule and :premises (t355) :args (1))
(step t357 (cl (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) (= x12 x13)) :rule implies :premises (t356))
(step t358 (cl (= x12 x13) (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))))) :rule reordering :premises (t357))
(step t359 (cl (= x12 x13)) :rule resolution :premises (t358 t354))
(step t360 (cl (not (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) :rule equiv_pos2)
(step t361 (cl (= (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true) (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))))) :rule equiv_simplify)
(step t362 (cl (not (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)) (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) :rule equiv1 :premises (t361))
(step t363 (cl (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)) :rule hole :args ("11" (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)))
(step t364 (cl (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) :rule resolution :premises (t362 t363))
(step t365 (cl (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) :rule and :premises (a0) :args (13))
(step t366 (cl (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) :rule resolution :premises (t360 t364 t365))
(step t367 (cl (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))) :rule and :premises (t366) :args (1))
(step t368 (cl (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) (= x13 x14)) :rule implies :premises (t367))
(step t369 (cl (= x13 x14) (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))))) :rule reordering :premises (t368))
(step t370 (cl (= x13 x14)) :rule resolution :premises (t369 t365))
(step t371 (cl (not (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) :rule equiv_pos2)
(step t372 (cl (= (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true) (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))))) :rule equiv_simplify)
(step t373 (cl (not (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)) (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) :rule equiv1 :premises (t372))
(step t374 (cl (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)) :rule hole :args ("11" (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)))
(step t375 (cl (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) :rule resolution :premises (t373 t374))
(step t376 (cl (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) :rule and :premises (a0) :args (15))
(step t377 (cl (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) :rule resolution :premises (t371 t375 t376))
(step t378 (cl (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))) :rule and :premises (t377) :args (1))
(step t379 (cl (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) (= x15 x16)) :rule implies :premises (t378))
(step t380 (cl (= x15 x16) (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))))) :rule reordering :premises (t379))
(step t381 (cl (= x15 x16)) :rule resolution :premises (t380 t376))
(step t382 (cl (not (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) :rule equiv_pos2)
(step t383 (cl (= (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true) (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))))) :rule equiv_simplify)
(step t384 (cl (not (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)) (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) :rule equiv1 :premises (t383))
(step t385 (cl (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)) :rule hole :args ("11" (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)))
(step t386 (cl (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) :rule resolution :premises (t384 t385))
(step t387 (cl (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) :rule and :premises (a0) :args (16))
(step t388 (cl (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) :rule resolution :premises (t382 t386 t387))
(step t389 (cl (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))) :rule and :premises (t388) :args (1))
(step t390 (cl (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) (= x16 x17)) :rule implies :premises (t389))
(step t391 (cl (= x16 x17) (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))))) :rule reordering :premises (t390))
(step t392 (cl (= x16 x17)) :rule resolution :premises (t391 t387))
(step t393 (cl (not (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) :rule equiv_pos2)
(step t394 (cl (= (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true) (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))))) :rule equiv_simplify)
(step t395 (cl (not (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)) (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) :rule equiv1 :premises (t394))
(step t396 (cl (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)) :rule hole :args ("11" (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)))
(step t397 (cl (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) :rule resolution :premises (t395 t396))
(step t398 (cl (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) :rule and :premises (a0) :args (17))
(step t399 (cl (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) :rule resolution :premises (t393 t397 t398))
(step t400 (cl (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))) :rule and :premises (t399) :args (1))
(step t401 (cl (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) (= x17 x18)) :rule implies :premises (t400))
(step t402 (cl (= x17 x18) (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))))) :rule reordering :premises (t401))
(step t403 (cl (= x17 x18)) :rule resolution :premises (t402 t398))
(step t404 (cl (not (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) :rule equiv_pos2)
(step t405 (cl (= (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true) (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))))) :rule equiv_simplify)
(step t406 (cl (not (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)) (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) :rule equiv1 :premises (t405))
(step t407 (cl (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)) :rule hole :args ("11" (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)))
(step t408 (cl (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) :rule resolution :premises (t406 t407))
(step t409 (cl (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) :rule and :premises (a0) :args (18))
(step t410 (cl (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) :rule resolution :premises (t404 t408 t409))
(step t411 (cl (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))) :rule and :premises (t410) :args (1))
(step t412 (cl (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) (= x18 x19)) :rule implies :premises (t411))
(step t413 (cl (= x18 x19) (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))))) :rule reordering :premises (t412))
(step t414 (cl (= x18 x19)) :rule resolution :premises (t413 t409))
(step t415 (cl (not (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) :rule equiv_pos2)
(step t416 (cl (= (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true) (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))))) :rule equiv_simplify)
(step t417 (cl (not (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)) (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) :rule equiv1 :premises (t416))
(step t418 (cl (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)) :rule hole :args ("11" (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)))
(step t419 (cl (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) :rule resolution :premises (t417 t418))
(step t420 (cl (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) :rule and :premises (a0) :args (19))
(step t421 (cl (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) :rule resolution :premises (t415 t419 t420))
(step t422 (cl (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))) :rule and :premises (t421) :args (1))
(step t423 (cl (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) (= x19 x20)) :rule implies :premises (t422))
(step t424 (cl (= x19 x20) (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))))) :rule reordering :premises (t423))
(step t425 (cl (= x19 x20)) :rule resolution :premises (t424 t420))
(step t426 (cl (not (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) :rule equiv_pos2)
(step t427 (cl (= (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true) (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))))) :rule equiv_simplify)
(step t428 (cl (not (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)) (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) :rule equiv1 :premises (t427))
(step t429 (cl (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)) :rule hole :args ("11" (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)))
(step t430 (cl (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) :rule resolution :premises (t428 t429))
(step t431 (cl (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) :rule and :premises (a0) :args (20))
(step t432 (cl (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) :rule resolution :premises (t426 t430 t431))
(step t433 (cl (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))) :rule and :premises (t432) :args (1))
(step t434 (cl (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) (= x20 x21)) :rule implies :premises (t433))
(step t435 (cl (= x20 x21) (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))))) :rule reordering :premises (t434))
(step t436 (cl (= x20 x21)) :rule resolution :premises (t435 t431))
(step t437 (cl (not (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) :rule equiv_pos2)
(step t438 (cl (= (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true) (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))))) :rule equiv_simplify)
(step t439 (cl (not (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)) (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) :rule equiv1 :premises (t438))
(step t440 (cl (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)) :rule hole :args ("11" (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)))
(step t441 (cl (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) :rule resolution :premises (t439 t440))
(step t442 (cl (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) :rule and :premises (a0) :args (21))
(step t443 (cl (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) :rule resolution :premises (t437 t441 t442))
(step t444 (cl (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))) :rule and :premises (t443) :args (1))
(step t445 (cl (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) (= x21 x22)) :rule implies :premises (t444))
(step t446 (cl (= x21 x22) (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))))) :rule reordering :premises (t445))
(step t447 (cl (= x21 x22)) :rule resolution :premises (t446 t442))
(step t448 (cl (not (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) :rule equiv_pos2)
(step t449 (cl (= (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true) (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))))) :rule equiv_simplify)
(step t450 (cl (not (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)) (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) :rule equiv1 :premises (t449))
(step t451 (cl (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)) :rule hole :args ("11" (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)))
(step t452 (cl (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) :rule resolution :premises (t450 t451))
(step t453 (cl (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) :rule and :premises (a0) :args (22))
(step t454 (cl (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) :rule resolution :premises (t448 t452 t453))
(step t455 (cl (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))) :rule and :premises (t454) :args (1))
(step t456 (cl (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) (= x22 x23)) :rule implies :premises (t455))
(step t457 (cl (= x22 x23) (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))))) :rule reordering :premises (t456))
(step t458 (cl (= x22 x23)) :rule resolution :premises (t457 t453))
(step t459 (cl (not (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) :rule equiv_pos2)
(step t460 (cl (= (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true) (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))))) :rule equiv_simplify)
(step t461 (cl (not (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)) (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) :rule equiv1 :premises (t460))
(step t462 (cl (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)) :rule hole :args ("11" (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)))
(step t463 (cl (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) :rule resolution :premises (t461 t462))
(step t464 (cl (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) :rule and :premises (a0) :args (23))
(step t465 (cl (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) :rule resolution :premises (t459 t463 t464))
(step t466 (cl (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))) :rule and :premises (t465) :args (1))
(step t467 (cl (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) (= x23 x24)) :rule implies :premises (t466))
(step t468 (cl (= x23 x24) (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))))) :rule reordering :premises (t467))
(step t469 (cl (= x23 x24)) :rule resolution :premises (t468 t464))
(step t470 (cl (not (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) :rule equiv_pos2)
(step t471 (cl (= (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true) (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))))) :rule equiv_simplify)
(step t472 (cl (not (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)) (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) :rule equiv1 :premises (t471))
(step t473 (cl (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)) :rule hole :args ("11" (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)))
(step t474 (cl (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) :rule resolution :premises (t472 t473))
(step t475 (cl (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) :rule and :premises (a0) :args (24))
(step t476 (cl (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) :rule resolution :premises (t470 t474 t475))
(step t477 (cl (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))) :rule and :premises (t476) :args (1))
(step t478 (cl (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) (= x24 x25)) :rule implies :premises (t477))
(step t479 (cl (= x24 x25) (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))))) :rule reordering :premises (t478))
(step t480 (cl (= x24 x25)) :rule resolution :premises (t479 t475))
(step t481 (cl (not (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) :rule equiv_pos2)
(step t482 (cl (= (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true) (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))))) :rule equiv_simplify)
(step t483 (cl (not (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)) (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) :rule equiv1 :premises (t482))
(step t484 (cl (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)) :rule hole :args ("11" (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)))
(step t485 (cl (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) :rule resolution :premises (t483 t484))
(step t486 (cl (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) :rule and :premises (a0) :args (25))
(step t487 (cl (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) :rule resolution :premises (t481 t485 t486))
(step t488 (cl (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))) :rule and :premises (t487) :args (1))
(step t489 (cl (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) (= x25 x26)) :rule implies :premises (t488))
(step t490 (cl (= x25 x26) (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))))) :rule reordering :premises (t489))
(step t491 (cl (= x25 x26)) :rule resolution :premises (t490 t486))
(step t492 (cl (not (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) :rule equiv_pos2)
(step t493 (cl (= (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true) (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))))) :rule equiv_simplify)
(step t494 (cl (not (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)) (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) :rule equiv1 :premises (t493))
(step t495 (cl (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)) :rule hole :args ("11" (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)))
(step t496 (cl (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) :rule resolution :premises (t494 t495))
(step t497 (cl (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) :rule and :premises (a0) :args (26))
(step t498 (cl (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) :rule resolution :premises (t492 t496 t497))
(step t499 (cl (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))) :rule and :premises (t498) :args (1))
(step t500 (cl (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) (= x26 x27)) :rule implies :premises (t499))
(step t501 (cl (= x26 x27) (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))))) :rule reordering :premises (t500))
(step t502 (cl (= x26 x27)) :rule resolution :premises (t501 t497))
(step t503 (cl (not (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) :rule equiv_pos2)
(step t504 (cl (= (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true) (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))))) :rule equiv_simplify)
(step t505 (cl (not (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)) (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) :rule equiv1 :premises (t504))
(step t506 (cl (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)) :rule hole :args ("11" (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)))
(step t507 (cl (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) :rule resolution :premises (t505 t506))
(step t508 (cl (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) :rule and :premises (a0) :args (27))
(step t509 (cl (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) :rule resolution :premises (t503 t507 t508))
(step t510 (cl (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))) :rule and :premises (t509) :args (1))
(step t511 (cl (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) (= x27 x28)) :rule implies :premises (t510))
(step t512 (cl (= x27 x28) (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))))) :rule reordering :premises (t511))
(step t513 (cl (= x27 x28)) :rule resolution :premises (t512 t508))
(step t514 (cl (not (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) :rule equiv_pos2)
(step t515 (cl (= (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true) (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))))) :rule equiv_simplify)
(step t516 (cl (not (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)) (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) :rule equiv1 :premises (t515))
(step t517 (cl (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)) :rule hole :args ("11" (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)))
(step t518 (cl (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) :rule resolution :premises (t516 t517))
(step t519 (cl (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) :rule and :premises (a0) :args (28))
(step t520 (cl (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) :rule resolution :premises (t514 t518 t519))
(step t521 (cl (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))) :rule and :premises (t520) :args (1))
(step t522 (cl (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) (= x28 x29)) :rule implies :premises (t521))
(step t523 (cl (= x28 x29) (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))))) :rule reordering :premises (t522))
(step t524 (cl (= x28 x29)) :rule resolution :premises (t523 t519))
(step t525 (cl (not (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) :rule equiv_pos2)
(step t526 (cl (= (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true) (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))))) :rule equiv_simplify)
(step t527 (cl (not (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)) (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) :rule equiv1 :premises (t526))
(step t528 (cl (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)) :rule hole :args ("11" (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)))
(step t529 (cl (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) :rule resolution :premises (t527 t528))
(step t530 (cl (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) :rule and :premises (a0) :args (29))
(step t531 (cl (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) :rule resolution :premises (t525 t529 t530))
(step t532 (cl (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))) :rule and :premises (t531) :args (1))
(step t533 (cl (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) (= x29 x30)) :rule implies :premises (t532))
(step t534 (cl (= x29 x30) (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))))) :rule reordering :premises (t533))
(step t535 (cl (= x29 x30)) :rule resolution :premises (t534 t530))
(step t536 (cl (not (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) :rule equiv_pos2)
(step t537 (cl (= (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true) (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))))) :rule equiv_simplify)
(step t538 (cl (not (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)) (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) :rule equiv1 :premises (t537))
(step t539 (cl (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)) :rule hole :args ("11" (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)))
(step t540 (cl (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) :rule resolution :premises (t538 t539))
(step t541 (cl (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) :rule and :premises (a0) :args (30))
(step t542 (cl (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) :rule resolution :premises (t536 t540 t541))
(step t543 (cl (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))) :rule and :premises (t542) :args (1))
(step t544 (cl (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) (= x30 x31)) :rule implies :premises (t543))
(step t545 (cl (= x30 x31) (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))))) :rule reordering :premises (t544))
(step t546 (cl (= x30 x31)) :rule resolution :premises (t545 t541))
(step t547 (cl (not (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) :rule equiv_pos2)
(step t548 (cl (= (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true) (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))))) :rule equiv_simplify)
(step t549 (cl (not (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)) (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) :rule equiv1 :premises (t548))
(step t550 (cl (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)) :rule hole :args ("11" (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)))
(step t551 (cl (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) :rule resolution :premises (t549 t550))
(step t552 (cl (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) :rule and :premises (a0) :args (31))
(step t553 (cl (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) :rule resolution :premises (t547 t551 t552))
(step t554 (cl (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))) :rule and :premises (t553) :args (1))
(step t555 (cl (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) (= x31 x32)) :rule implies :premises (t554))
(step t556 (cl (= x31 x32) (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))))) :rule reordering :premises (t555))
(step t557 (cl (= x31 x32)) :rule resolution :premises (t556 t552))
(step t558 (cl (not (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) :rule equiv_pos2)
(step t559 (cl (= (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true) (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))))) :rule equiv_simplify)
(step t560 (cl (not (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)) (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) :rule equiv1 :premises (t559))
(step t561 (cl (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)) :rule hole :args ("11" (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)))
(step t562 (cl (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) :rule resolution :premises (t560 t561))
(step t563 (cl (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) :rule and :premises (a0) :args (32))
(step t564 (cl (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) :rule resolution :premises (t558 t562 t563))
(step t565 (cl (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))) :rule and :premises (t564) :args (1))
(step t566 (cl (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) (= x32 x33)) :rule implies :premises (t565))
(step t567 (cl (= x32 x33) (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))))) :rule reordering :premises (t566))
(step t568 (cl (= x32 x33)) :rule resolution :premises (t567 t563))
(step t569 (cl (not (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) :rule equiv_pos2)
(step t570 (cl (= (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true) (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))))) :rule equiv_simplify)
(step t571 (cl (not (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)) (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) :rule equiv1 :premises (t570))
(step t572 (cl (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)) :rule hole :args ("11" (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)))
(step t573 (cl (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) :rule resolution :premises (t571 t572))
(step t574 (cl (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) :rule and :premises (a0) :args (33))
(step t575 (cl (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) :rule resolution :premises (t569 t573 t574))
(step t576 (cl (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))) :rule and :premises (t575) :args (1))
(step t577 (cl (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) (= x33 x34)) :rule implies :premises (t576))
(step t578 (cl (= x33 x34) (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))))) :rule reordering :premises (t577))
(step t579 (cl (= x33 x34)) :rule resolution :premises (t578 t574))
(step t580 (cl (not (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) :rule equiv_pos2)
(step t581 (cl (= (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true) (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))))) :rule equiv_simplify)
(step t582 (cl (not (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)) (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) :rule equiv1 :premises (t581))
(step t583 (cl (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)) :rule hole :args ("11" (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)))
(step t584 (cl (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) :rule resolution :premises (t582 t583))
(step t585 (cl (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) :rule and :premises (a0) :args (34))
(step t586 (cl (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) :rule resolution :premises (t580 t584 t585))
(step t587 (cl (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))) :rule and :premises (t586) :args (1))
(step t588 (cl (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) (= x34 x35)) :rule implies :premises (t587))
(step t589 (cl (= x34 x35) (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))))) :rule reordering :premises (t588))
(step t590 (cl (= x34 x35)) :rule resolution :premises (t589 t585))
(step t591 (cl (not (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) :rule equiv_pos2)
(step t592 (cl (= (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true) (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))))) :rule equiv_simplify)
(step t593 (cl (not (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)) (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) :rule equiv1 :premises (t592))
(step t594 (cl (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)) :rule hole :args ("11" (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)))
(step t595 (cl (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) :rule resolution :premises (t593 t594))
(step t596 (cl (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) :rule and :premises (a0) :args (35))
(step t597 (cl (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) :rule resolution :premises (t591 t595 t596))
(step t598 (cl (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))) :rule and :premises (t597) :args (1))
(step t599 (cl (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) (= x35 x36)) :rule implies :premises (t598))
(step t600 (cl (= x35 x36) (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))))) :rule reordering :premises (t599))
(step t601 (cl (= x35 x36)) :rule resolution :premises (t600 t596))
(step t602 (cl (not (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) :rule equiv_pos2)
(step t603 (cl (= (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true) (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))))) :rule equiv_simplify)
(step t604 (cl (not (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)) (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) :rule equiv1 :premises (t603))
(step t605 (cl (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)) :rule hole :args ("11" (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)))
(step t606 (cl (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) :rule resolution :premises (t604 t605))
(step t607 (cl (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) :rule and :premises (a0) :args (36))
(step t608 (cl (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) :rule resolution :premises (t602 t606 t607))
(step t609 (cl (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))) :rule and :premises (t608) :args (1))
(step t610 (cl (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) (= x36 x37)) :rule implies :premises (t609))
(step t611 (cl (= x36 x37) (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))))) :rule reordering :premises (t610))
(step t612 (cl (= x36 x37)) :rule resolution :premises (t611 t607))
(step t613 (cl (not (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) :rule equiv_pos2)
(step t614 (cl (= (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true) (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))))) :rule equiv_simplify)
(step t615 (cl (not (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)) (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) :rule equiv1 :premises (t614))
(step t616 (cl (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)) :rule hole :args ("11" (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)))
(step t617 (cl (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) :rule resolution :premises (t615 t616))
(step t618 (cl (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) :rule and :premises (a0) :args (37))
(step t619 (cl (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) :rule resolution :premises (t613 t617 t618))
(step t620 (cl (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))) :rule and :premises (t619) :args (1))
(step t621 (cl (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) (= x37 x38)) :rule implies :premises (t620))
(step t622 (cl (= x37 x38) (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))))) :rule reordering :premises (t621))
(step t623 (cl (= x37 x38)) :rule resolution :premises (t622 t618))
(step t624 (cl (not (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) :rule equiv_pos2)
(step t625 (cl (= (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true) (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))))) :rule equiv_simplify)
(step t626 (cl (not (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)) (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) :rule equiv1 :premises (t625))
(step t627 (cl (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)) :rule hole :args ("11" (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)))
(step t628 (cl (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) :rule resolution :premises (t626 t627))
(step t629 (cl (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) :rule and :premises (a0) :args (38))
(step t630 (cl (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) :rule resolution :premises (t624 t628 t629))
(step t631 (cl (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))) :rule and :premises (t630) :args (1))
(step t632 (cl (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) (= x38 x39)) :rule implies :premises (t631))
(step t633 (cl (= x38 x39) (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))))) :rule reordering :premises (t632))
(step t634 (cl (= x38 x39)) :rule resolution :premises (t633 t629))
(step t635 (cl (not (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) :rule equiv_pos2)
(step t636 (cl (= (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true) (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))))) :rule equiv_simplify)
(step t637 (cl (not (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)) (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) :rule equiv1 :premises (t636))
(step t638 (cl (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)) :rule hole :args ("11" (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)))
(step t639 (cl (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) :rule resolution :premises (t637 t638))
(step t640 (cl (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) :rule and :premises (a0) :args (39))
(step t641 (cl (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) :rule resolution :premises (t635 t639 t640))
(step t642 (cl (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))) :rule and :premises (t641) :args (1))
(step t643 (cl (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) (= x39 x40)) :rule implies :premises (t642))
(step t644 (cl (= x39 x40) (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))))) :rule reordering :premises (t643))
(step t645 (cl (= x39 x40)) :rule resolution :premises (t644 t640))
(step t646 (cl (not (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) :rule equiv_pos2)
(step t647 (cl (= (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true) (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))))) :rule equiv_simplify)
(step t648 (cl (not (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)) (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) :rule equiv1 :premises (t647))
(step t649 (cl (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)) :rule hole :args ("11" (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)))
(step t650 (cl (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) :rule resolution :premises (t648 t649))
(step t651 (cl (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) :rule and :premises (a0) :args (40))
(step t652 (cl (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) :rule resolution :premises (t646 t650 t651))
(step t653 (cl (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))) :rule and :premises (t652) :args (1))
(step t654 (cl (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) (= x40 x41)) :rule implies :premises (t653))
(step t655 (cl (= x40 x41) (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))))) :rule reordering :premises (t654))
(step t656 (cl (= x40 x41)) :rule resolution :premises (t655 t651))
(step t657 (cl (not (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) :rule equiv_pos2)
(step t658 (cl (= (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true) (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))))) :rule equiv_simplify)
(step t659 (cl (not (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)) (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) :rule equiv1 :premises (t658))
(step t660 (cl (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)) :rule hole :args ("11" (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)))
(step t661 (cl (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) :rule resolution :premises (t659 t660))
(step t662 (cl (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) :rule and :premises (a0) :args (41))
(step t663 (cl (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) :rule resolution :premises (t657 t661 t662))
(step t664 (cl (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))) :rule and :premises (t663) :args (1))
(step t665 (cl (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) (= x41 x42)) :rule implies :premises (t664))
(step t666 (cl (= x41 x42) (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))))) :rule reordering :premises (t665))
(step t667 (cl (= x41 x42)) :rule resolution :premises (t666 t662))
(step t668 (cl (not (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) :rule equiv_pos2)
(step t669 (cl (= (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true) (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))))) :rule equiv_simplify)
(step t670 (cl (not (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)) (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) :rule equiv1 :premises (t669))
(step t671 (cl (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)) :rule hole :args ("11" (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)))
(step t672 (cl (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) :rule resolution :premises (t670 t671))
(step t673 (cl (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) :rule and :premises (a0) :args (42))
(step t674 (cl (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) :rule resolution :premises (t668 t672 t673))
(step t675 (cl (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))) :rule and :premises (t674) :args (1))
(step t676 (cl (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) (= x42 x43)) :rule implies :premises (t675))
(step t677 (cl (= x42 x43) (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))))) :rule reordering :premises (t676))
(step t678 (cl (= x42 x43)) :rule resolution :premises (t677 t673))
(step t679 (cl (not (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) :rule equiv_pos2)
(step t680 (cl (= (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true) (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))))) :rule equiv_simplify)
(step t681 (cl (not (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)) (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) :rule equiv1 :premises (t680))
(step t682 (cl (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)) :rule hole :args ("11" (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)))
(step t683 (cl (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) :rule resolution :premises (t681 t682))
(step t684 (cl (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) :rule and :premises (a0) :args (43))
(step t685 (cl (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) :rule resolution :premises (t679 t683 t684))
(step t686 (cl (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))) :rule and :premises (t685) :args (1))
(step t687 (cl (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) (= x43 x44)) :rule implies :premises (t686))
(step t688 (cl (= x43 x44) (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))))) :rule reordering :premises (t687))
(step t689 (cl (= x43 x44)) :rule resolution :premises (t688 t684))
(step t690 (cl (not (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) :rule equiv_pos2)
(step t691 (cl (= (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true) (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))))) :rule equiv_simplify)
(step t692 (cl (not (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)) (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) :rule equiv1 :premises (t691))
(step t693 (cl (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)) :rule hole :args ("11" (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)))
(step t694 (cl (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) :rule resolution :premises (t692 t693))
(step t695 (cl (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) :rule and :premises (a0) :args (44))
(step t696 (cl (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) :rule resolution :premises (t690 t694 t695))
(step t697 (cl (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))) :rule and :premises (t696) :args (1))
(step t698 (cl (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) (= x44 x45)) :rule implies :premises (t697))
(step t699 (cl (= x44 x45) (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))))) :rule reordering :premises (t698))
(step t700 (cl (= x44 x45)) :rule resolution :premises (t699 t695))
(step t701 (cl (not (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) :rule equiv_pos2)
(step t702 (cl (= (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true) (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))))) :rule equiv_simplify)
(step t703 (cl (not (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)) (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) :rule equiv1 :premises (t702))
(step t704 (cl (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)) :rule hole :args ("11" (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)))
(step t705 (cl (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) :rule resolution :premises (t703 t704))
(step t706 (cl (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) :rule and :premises (a0) :args (45))
(step t707 (cl (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) :rule resolution :premises (t701 t705 t706))
(step t708 (cl (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))) :rule and :premises (t707) :args (1))
(step t709 (cl (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) (= x45 x46)) :rule implies :premises (t708))
(step t710 (cl (= x45 x46) (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))))) :rule reordering :premises (t709))
(step t711 (cl (= x45 x46)) :rule resolution :premises (t710 t706))
(step t712 (cl (not (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) :rule equiv_pos2)
(step t713 (cl (= (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true) (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))))) :rule equiv_simplify)
(step t714 (cl (not (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)) (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) :rule equiv1 :premises (t713))
(step t715 (cl (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)) :rule hole :args ("11" (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)))
(step t716 (cl (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) :rule resolution :premises (t714 t715))
(step t717 (cl (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) :rule and :premises (a0) :args (46))
(step t718 (cl (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) :rule resolution :premises (t712 t716 t717))
(step t719 (cl (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))) :rule and :premises (t718) :args (1))
(step t720 (cl (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) (= x46 x47)) :rule implies :premises (t719))
(step t721 (cl (= x46 x47) (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))))) :rule reordering :premises (t720))
(step t722 (cl (= x46 x47)) :rule resolution :premises (t721 t717))
(step t723 (cl (not (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) :rule equiv_pos2)
(step t724 (cl (= (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true) (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))))) :rule equiv_simplify)
(step t725 (cl (not (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)) (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) :rule equiv1 :premises (t724))
(step t726 (cl (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)) :rule hole :args ("11" (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)))
(step t727 (cl (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) :rule resolution :premises (t725 t726))
(step t728 (cl (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) :rule and :premises (a0) :args (47))
(step t729 (cl (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) :rule resolution :premises (t723 t727 t728))
(step t730 (cl (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))) :rule and :premises (t729) :args (1))
(step t731 (cl (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) (= x47 x48)) :rule implies :premises (t730))
(step t732 (cl (= x47 x48) (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))))) :rule reordering :premises (t731))
(step t733 (cl (= x47 x48)) :rule resolution :premises (t732 t728))
(step t734 (cl (not (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) :rule equiv_pos2)
(step t735 (cl (= (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true) (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))))) :rule equiv_simplify)
(step t736 (cl (not (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)) (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) :rule equiv1 :premises (t735))
(step t737 (cl (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)) :rule hole :args ("11" (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)))
(step t738 (cl (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) :rule resolution :premises (t736 t737))
(step t739 (cl (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) :rule and :premises (a0) :args (48))
(step t740 (cl (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) :rule resolution :premises (t734 t738 t739))
(step t741 (cl (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))) :rule and :premises (t740) :args (1))
(step t742 (cl (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) (= x48 x49)) :rule implies :premises (t741))
(step t743 (cl (= x48 x49) (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))))) :rule reordering :premises (t742))
(step t744 (cl (= x48 x49)) :rule resolution :premises (t743 t739))
(step t745 (cl (not (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) :rule equiv_pos2)
(step t746 (cl (= (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true) (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))))) :rule equiv_simplify)
(step t747 (cl (not (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)) (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) :rule equiv1 :premises (t746))
(step t748 (cl (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)) :rule hole :args ("11" (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)))
(step t749 (cl (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) :rule resolution :premises (t747 t748))
(step t750 (cl (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) :rule and :premises (a0) :args (49))
(step t751 (cl (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) :rule resolution :premises (t745 t749 t750))
(step t752 (cl (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))) :rule and :premises (t751) :args (1))
(step t753 (cl (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) (= x49 x50)) :rule implies :premises (t752))
(step t754 (cl (= x49 x50) (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))))) :rule reordering :premises (t753))
(step t755 (cl (= x49 x50)) :rule resolution :premises (t754 t750))
(step t756 (cl (not (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) :rule equiv_pos2)
(step t757 (cl (= (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true) (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))))) :rule equiv_simplify)
(step t758 (cl (not (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)) (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) :rule equiv1 :premises (t757))
(step t759 (cl (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)) :rule hole :args ("11" (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)))
(step t760 (cl (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) :rule resolution :premises (t758 t759))
(step t761 (cl (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) :rule and :premises (a0) :args (50))
(step t762 (cl (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) :rule resolution :premises (t756 t760 t761))
(step t763 (cl (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))) :rule and :premises (t762) :args (1))
(step t764 (cl (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) (= x50 x51)) :rule implies :premises (t763))
(step t765 (cl (= x50 x51) (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))))) :rule reordering :premises (t764))
(step t766 (cl (= x50 x51)) :rule resolution :premises (t765 t761))
(step t767 (cl (not (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))))) (not (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52)))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) :rule equiv_pos2)
(step t768 (cl (= (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true) (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))))) :rule equiv_simplify)
(step t769 (cl (not (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true)) (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))))) :rule equiv1 :premises (t768))
(step t770 (cl (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true)) :rule hole :args ("11" (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true)))
(step t771 (cl (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))))) :rule resolution :premises (t769 t770))
(step t772 (cl (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52)))) :rule and :premises (a0) :args (51))
(step t773 (cl (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) :rule resolution :premises (t767 t771 t772))
(step t774 (cl (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))) :rule and :premises (t773) :args (1))
(step t775 (cl (not (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52)))) (= x51 x52)) :rule implies :premises (t774))
(step t776 (cl (= x51 x52) (not (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))))) :rule reordering :premises (t775))
(step t777 (cl (= x51 x52)) :rule resolution :premises (t776 t772))
(step t778 (cl (not (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))))) (not (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53)))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) :rule equiv_pos2)
(step t779 (cl (= (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true) (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))))) :rule equiv_simplify)
(step t780 (cl (not (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true)) (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))))) :rule equiv1 :premises (t779))
(step t781 (cl (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true)) :rule hole :args ("11" (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true)))
(step t782 (cl (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))))) :rule resolution :premises (t780 t781))
(step t783 (cl (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53)))) :rule and :premises (a0) :args (52))
(step t784 (cl (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) :rule resolution :premises (t778 t782 t783))
(step t785 (cl (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))) :rule and :premises (t784) :args (1))
(step t786 (cl (not (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53)))) (= x52 x53)) :rule implies :premises (t785))
(step t787 (cl (= x52 x53) (not (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))))) :rule reordering :premises (t786))
(step t788 (cl (= x52 x53)) :rule resolution :premises (t787 t783))
(step t789 (cl (not (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))))) (not (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54)))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) :rule equiv_pos2)
(step t790 (cl (= (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true) (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))))) :rule equiv_simplify)
(step t791 (cl (not (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true)) (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))))) :rule equiv1 :premises (t790))
(step t792 (cl (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true)) :rule hole :args ("11" (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true)))
(step t793 (cl (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))))) :rule resolution :premises (t791 t792))
(step t794 (cl (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54)))) :rule and :premises (a0) :args (53))
(step t795 (cl (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) :rule resolution :premises (t789 t793 t794))
(step t796 (cl (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))) :rule and :premises (t795) :args (1))
(step t797 (cl (not (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54)))) (= x53 x54)) :rule implies :premises (t796))
(step t798 (cl (= x53 x54) (not (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))))) :rule reordering :premises (t797))
(step t799 (cl (= x53 x54)) :rule resolution :premises (t798 t794))
(step t800 (cl (not (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))))) (not (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55)))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) :rule equiv_pos2)
(step t801 (cl (= (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true) (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))))) :rule equiv_simplify)
(step t802 (cl (not (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true)) (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))))) :rule equiv1 :premises (t801))
(step t803 (cl (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true)) :rule hole :args ("11" (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true)))
(step t804 (cl (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))))) :rule resolution :premises (t802 t803))
(step t805 (cl (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55)))) :rule and :premises (a0) :args (54))
(step t806 (cl (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) :rule resolution :premises (t800 t804 t805))
(step t807 (cl (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))) :rule and :premises (t806) :args (1))
(step t808 (cl (not (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55)))) (= x54 x55)) :rule implies :premises (t807))
(step t809 (cl (= x54 x55) (not (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))))) :rule reordering :premises (t808))
(step t810 (cl (= x54 x55)) :rule resolution :premises (t809 t805))
(step t811 (cl (not (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))))) (not (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56)))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) :rule equiv_pos2)
(step t812 (cl (= (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true) (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))))) :rule equiv_simplify)
(step t813 (cl (not (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true)) (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))))) :rule equiv1 :premises (t812))
(step t814 (cl (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true)) :rule hole :args ("11" (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true)))
(step t815 (cl (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))))) :rule resolution :premises (t813 t814))
(step t816 (cl (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56)))) :rule and :premises (a0) :args (55))
(step t817 (cl (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) :rule resolution :premises (t811 t815 t816))
(step t818 (cl (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))) :rule and :premises (t817) :args (1))
(step t819 (cl (not (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56)))) (= x55 x56)) :rule implies :premises (t818))
(step t820 (cl (= x55 x56) (not (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))))) :rule reordering :premises (t819))
(step t821 (cl (= x55 x56)) :rule resolution :premises (t820 t816))
(step t822 (cl (not (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))))) (not (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57)))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) :rule equiv_pos2)
(step t823 (cl (= (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true) (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))))) :rule equiv_simplify)
(step t824 (cl (not (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true)) (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))))) :rule equiv1 :premises (t823))
(step t825 (cl (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true)) :rule hole :args ("11" (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true)))
(step t826 (cl (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))))) :rule resolution :premises (t824 t825))
(step t827 (cl (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57)))) :rule and :premises (a0) :args (56))
(step t828 (cl (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) :rule resolution :premises (t822 t826 t827))
(step t829 (cl (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))) :rule and :premises (t828) :args (1))
(step t830 (cl (not (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57)))) (= x56 x57)) :rule implies :premises (t829))
(step t831 (cl (= x56 x57) (not (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))))) :rule reordering :premises (t830))
(step t832 (cl (= x56 x57)) :rule resolution :premises (t831 t827))
(step t833 (cl (not (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))))) (not (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58)))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) :rule equiv_pos2)
(step t834 (cl (= (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true) (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))))) :rule equiv_simplify)
(step t835 (cl (not (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true)) (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))))) :rule equiv1 :premises (t834))
(step t836 (cl (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true)) :rule hole :args ("11" (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true)))
(step t837 (cl (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))))) :rule resolution :premises (t835 t836))
(step t838 (cl (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58)))) :rule and :premises (a0) :args (57))
(step t839 (cl (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) :rule resolution :premises (t833 t837 t838))
(step t840 (cl (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))) :rule and :premises (t839) :args (1))
(step t841 (cl (not (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58)))) (= x57 x58)) :rule implies :premises (t840))
(step t842 (cl (= x57 x58) (not (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))))) :rule reordering :premises (t841))
(step t843 (cl (= x57 x58)) :rule resolution :premises (t842 t838))
(step t844 (cl (not (= x14 x15))) :rule resolution :premises (t215 t216 t227 t238 t249 t260 t271 t282 t293 t304 t315 t326 t337 t348 t359 t370 t381 t392 t403 t414 t425 t436 t447 t458 t469 t480 t491 t502 t513 t524 t535 t546 t557 t568 t579 t590 t601 t612 t623 t634 t645 t656 t667 t678 t689 t700 t711 t722 t733 t744 t755 t766 t777 t788 t799 t810 t821 t832 t843))
(step t845 (cl (not (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))))) :rule resolution :premises (t11 t844))
(step t846 (cl (not (and (= x14 z14) (= z14 x15)))) :rule resolution :premises (t2 t845))
(step t847 (cl (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (not (and (= x14 y14) (= y14 x15)))) :rule or_neg :args (0))
(step t848 (cl (not (and (= x14 y14) (= y14 x15)))) :rule resolution :premises (t847 t845))
(step t849 (cl) :rule resolution :premises (t1 t846 t848))
