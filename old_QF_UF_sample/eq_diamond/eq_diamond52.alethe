unsat
(assume a0 (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (not (= x0 x51))))
(step t0 (cl (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) :rule and :premises (a0) :args (6))
(step t1 (cl (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) :rule or :premises (t0))
(step t2 (cl (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (not (and (= x6 z6) (= z6 x7)))) :rule or_neg :args (1))
(step t3 (cl (not (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) :rule equiv_pos2)
(step t4 (cl (= (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true) (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))))) :rule equiv_simplify)
(step t5 (cl (not (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)) (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) :rule equiv1 :premises (t4))
(step t6 (cl (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)) :rule hole :args ("11" (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)))
(step t7 (cl (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) :rule resolution :premises (t5 t6))
(step t8 (cl (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) :rule resolution :premises (t3 t7 t0))
(step t9 (cl (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))) :rule and :premises (t8) :args (1))
(step t10 (cl (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) (= x6 x7)) :rule implies :premises (t9))
(step t11 (cl (= x6 x7) (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))))) :rule reordering :premises (t10))
(step t12 (cl (= (= (= x6 x7) false) (not (= x6 x7)))) :rule equiv_simplify)
(step t13 (cl (not (= (= x6 x7) false)) (not (= x6 x7))) :rule equiv1 :premises (t12))
(step t14 (cl (not (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) :rule equiv_pos2)
(step t15 (cl (= (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true) (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))))) :rule equiv_simplify)
(step t16 (cl (not (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)) (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) :rule equiv1 :premises (t15))
(step t17 (cl (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)) :rule hole :args ("11" (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)))
(step t18 (cl (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) :rule resolution :premises (t16 t17))
(step t19 (cl (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) :rule and :premises (a0) :args (5))
(step t20 (cl (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) :rule resolution :premises (t14 t18 t19))
(step t21 (cl (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))) :rule and :premises (t20) :args (1))
(step t22 (cl (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) (= x5 x6)) :rule implies :premises (t21))
(step t23 (cl (= x5 x6) (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))))) :rule reordering :premises (t22))
(step t24 (cl (= x5 x6)) :rule resolution :premises (t23 t19))
(step t25 (cl (= x6 x5)) :rule symm :premises (t24))
(step t26 (cl (not (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) :rule equiv_pos2)
(step t27 (cl (= (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true) (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))))) :rule equiv_simplify)
(step t28 (cl (not (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)) (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) :rule equiv1 :premises (t27))
(step t29 (cl (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)) :rule hole :args ("11" (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)))
(step t30 (cl (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) :rule resolution :premises (t28 t29))
(step t31 (cl (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) :rule and :premises (a0) :args (4))
(step t32 (cl (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) :rule resolution :premises (t26 t30 t31))
(step t33 (cl (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))) :rule and :premises (t32) :args (1))
(step t34 (cl (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) (= x4 x5)) :rule implies :premises (t33))
(step t35 (cl (= x4 x5) (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))))) :rule reordering :premises (t34))
(step t36 (cl (= x4 x5)) :rule resolution :premises (t35 t31))
(step t37 (cl (= x5 x4)) :rule symm :premises (t36))
(step t38 (cl (not (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) :rule equiv_pos2)
(step t39 (cl (= (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true) (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))))) :rule equiv_simplify)
(step t40 (cl (not (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)) (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) :rule equiv1 :premises (t39))
(step t41 (cl (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)) :rule hole :args ("11" (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)))
(step t42 (cl (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) :rule resolution :premises (t40 t41))
(step t43 (cl (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) :rule and :premises (a0) :args (3))
(step t44 (cl (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) :rule resolution :premises (t38 t42 t43))
(step t45 (cl (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))) :rule and :premises (t44) :args (1))
(step t46 (cl (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) (= x3 x4)) :rule implies :premises (t45))
(step t47 (cl (= x3 x4) (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))))) :rule reordering :premises (t46))
(step t48 (cl (= x3 x4)) :rule resolution :premises (t47 t43))
(step t49 (cl (= x4 x3)) :rule symm :premises (t48))
(step t50 (cl (not (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) :rule equiv_pos2)
(step t51 (cl (= (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true) (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))))) :rule equiv_simplify)
(step t52 (cl (not (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)) (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) :rule equiv1 :premises (t51))
(step t53 (cl (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)) :rule hole :args ("11" (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)))
(step t54 (cl (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) :rule resolution :premises (t52 t53))
(step t55 (cl (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) :rule and :premises (a0) :args (2))
(step t56 (cl (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) :rule resolution :premises (t50 t54 t55))
(step t57 (cl (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))) :rule and :premises (t56) :args (1))
(step t58 (cl (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) (= x2 x3)) :rule implies :premises (t57))
(step t59 (cl (= x2 x3) (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))))) :rule reordering :premises (t58))
(step t60 (cl (= x2 x3)) :rule resolution :premises (t59 t55))
(step t61 (cl (= x3 x2)) :rule symm :premises (t60))
(step t62 (cl (not (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) :rule equiv_pos2)
(step t63 (cl (= (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true) (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))))) :rule equiv_simplify)
(step t64 (cl (not (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)) (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) :rule equiv1 :premises (t63))
(step t65 (cl (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)) :rule hole :args ("11" (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)))
(step t66 (cl (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) :rule resolution :premises (t64 t65))
(step t67 (cl (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) :rule and :premises (a0) :args (1))
(step t68 (cl (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) :rule resolution :premises (t62 t66 t67))
(step t69 (cl (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))) :rule and :premises (t68) :args (1))
(step t70 (cl (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) (= x1 x2)) :rule implies :premises (t69))
(step t71 (cl (= x1 x2) (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))))) :rule reordering :premises (t70))
(step t72 (cl (= x1 x2)) :rule resolution :premises (t71 t67))
(step t73 (cl (= x2 x1)) :rule symm :premises (t72))
(step t74 (cl (not (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) :rule equiv_pos2)
(step t75 (cl (= (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true) (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))))) :rule equiv_simplify)
(step t76 (cl (not (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)) (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) :rule equiv1 :premises (t75))
(step t77 (cl (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)) :rule hole :args ("11" (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)))
(step t78 (cl (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) :rule resolution :premises (t76 t77))
(step t79 (cl (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) :rule and :premises (a0) :args (0))
(step t80 (cl (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) :rule resolution :premises (t74 t78 t79))
(step t81 (cl (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))) :rule and :premises (t80) :args (1))
(step t82 (cl (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) (= x0 x1)) :rule implies :premises (t81))
(step t83 (cl (= x0 x1) (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))))) :rule reordering :premises (t82))
(step t84 (cl (= x0 x1)) :rule resolution :premises (t83 t79))
(step t85 (cl (= x1 x0)) :rule symm :premises (t84))
(step t86 (cl (= x6 x0)) :rule trans :premises (t25 t37 t49 t61 t73 t85))
(step t87 (cl (not (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) :rule equiv_pos2)
(step t88 (cl (= (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true) (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))))) :rule equiv_simplify)
(step t89 (cl (not (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)) (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) :rule equiv1 :premises (t88))
(step t90 (cl (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)) :rule hole :args ("11" (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)))
(step t91 (cl (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) :rule resolution :premises (t89 t90))
(step t92 (cl (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) :rule and :premises (a0) :args (7))
(step t93 (cl (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) :rule resolution :premises (t87 t91 t92))
(step t94 (cl (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))) :rule and :premises (t93) :args (1))
(step t95 (cl (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) (= x7 x8)) :rule implies :premises (t94))
(step t96 (cl (= x7 x8) (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))))) :rule reordering :premises (t95))
(step t97 (cl (= x7 x8)) :rule resolution :premises (t96 t92))
(step t98 (cl (not (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) :rule equiv_pos2)
(step t99 (cl (= (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true) (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))))) :rule equiv_simplify)
(step t100 (cl (not (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)) (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) :rule equiv1 :premises (t99))
(step t101 (cl (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)) :rule hole :args ("11" (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)))
(step t102 (cl (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) :rule resolution :premises (t100 t101))
(step t103 (cl (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) :rule and :premises (a0) :args (8))
(step t104 (cl (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) :rule resolution :premises (t98 t102 t103))
(step t105 (cl (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))) :rule and :premises (t104) :args (1))
(step t106 (cl (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) (= x8 x9)) :rule implies :premises (t105))
(step t107 (cl (= x8 x9) (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))))) :rule reordering :premises (t106))
(step t108 (cl (= x8 x9)) :rule resolution :premises (t107 t103))
(step t109 (cl (not (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) :rule equiv_pos2)
(step t110 (cl (= (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true) (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))))) :rule equiv_simplify)
(step t111 (cl (not (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)) (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) :rule equiv1 :premises (t110))
(step t112 (cl (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)) :rule hole :args ("11" (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)))
(step t113 (cl (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) :rule resolution :premises (t111 t112))
(step t114 (cl (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) :rule and :premises (a0) :args (9))
(step t115 (cl (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) :rule resolution :premises (t109 t113 t114))
(step t116 (cl (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))) :rule and :premises (t115) :args (1))
(step t117 (cl (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) (= x9 x10)) :rule implies :premises (t116))
(step t118 (cl (= x9 x10) (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))))) :rule reordering :premises (t117))
(step t119 (cl (= x9 x10)) :rule resolution :premises (t118 t114))
(step t120 (cl (not (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) :rule equiv_pos2)
(step t121 (cl (= (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true) (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))))) :rule equiv_simplify)
(step t122 (cl (not (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)) (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) :rule equiv1 :premises (t121))
(step t123 (cl (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)) :rule hole :args ("11" (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)))
(step t124 (cl (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) :rule resolution :premises (t122 t123))
(step t125 (cl (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) :rule and :premises (a0) :args (10))
(step t126 (cl (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) :rule resolution :premises (t120 t124 t125))
(step t127 (cl (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))) :rule and :premises (t126) :args (1))
(step t128 (cl (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) (= x10 x11)) :rule implies :premises (t127))
(step t129 (cl (= x10 x11) (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))))) :rule reordering :premises (t128))
(step t130 (cl (= x10 x11)) :rule resolution :premises (t129 t125))
(step t131 (cl (not (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))))) (not (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12)))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) :rule equiv_pos2)
(step t132 (cl (= (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true) (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))))) :rule equiv_simplify)
(step t133 (cl (not (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true)) (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))))) :rule equiv1 :premises (t132))
(step t134 (cl (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true)) :rule hole :args ("11" (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true)))
(step t135 (cl (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))))) :rule resolution :premises (t133 t134))
(step t136 (cl (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12)))) :rule and :premises (a0) :args (11))
(step t137 (cl (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) :rule resolution :premises (t131 t135 t136))
(step t138 (cl (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))) :rule and :premises (t137) :args (1))
(step t139 (cl (not (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12)))) (= x11 x12)) :rule implies :premises (t138))
(step t140 (cl (= x11 x12) (not (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))))) :rule reordering :premises (t139))
(step t141 (cl (= x11 x12)) :rule resolution :premises (t140 t136))
(step t142 (cl (not (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) :rule equiv_pos2)
(step t143 (cl (= (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true) (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))))) :rule equiv_simplify)
(step t144 (cl (not (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)) (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) :rule equiv1 :premises (t143))
(step t145 (cl (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)) :rule hole :args ("11" (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)))
(step t146 (cl (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) :rule resolution :premises (t144 t145))
(step t147 (cl (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) :rule and :premises (a0) :args (12))
(step t148 (cl (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) :rule resolution :premises (t142 t146 t147))
(step t149 (cl (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))) :rule and :premises (t148) :args (1))
(step t150 (cl (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) (= x12 x13)) :rule implies :premises (t149))
(step t151 (cl (= x12 x13) (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))))) :rule reordering :premises (t150))
(step t152 (cl (= x12 x13)) :rule resolution :premises (t151 t147))
(step t153 (cl (not (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) :rule equiv_pos2)
(step t154 (cl (= (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true) (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))))) :rule equiv_simplify)
(step t155 (cl (not (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)) (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) :rule equiv1 :premises (t154))
(step t156 (cl (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)) :rule hole :args ("11" (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)))
(step t157 (cl (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) :rule resolution :premises (t155 t156))
(step t158 (cl (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) :rule and :premises (a0) :args (13))
(step t159 (cl (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) :rule resolution :premises (t153 t157 t158))
(step t160 (cl (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))) :rule and :premises (t159) :args (1))
(step t161 (cl (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) (= x13 x14)) :rule implies :premises (t160))
(step t162 (cl (= x13 x14) (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))))) :rule reordering :premises (t161))
(step t163 (cl (= x13 x14)) :rule resolution :premises (t162 t158))
(step t164 (cl (not (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))))) (not (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15)))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) :rule equiv_pos2)
(step t165 (cl (= (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true) (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))))) :rule equiv_simplify)
(step t166 (cl (not (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true)) (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))))) :rule equiv1 :premises (t165))
(step t167 (cl (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true)) :rule hole :args ("11" (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true)))
(step t168 (cl (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))))) :rule resolution :premises (t166 t167))
(step t169 (cl (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15)))) :rule and :premises (a0) :args (14))
(step t170 (cl (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) :rule resolution :premises (t164 t168 t169))
(step t171 (cl (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))) :rule and :premises (t170) :args (1))
(step t172 (cl (not (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15)))) (= x14 x15)) :rule implies :premises (t171))
(step t173 (cl (= x14 x15) (not (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))))) :rule reordering :premises (t172))
(step t174 (cl (= x14 x15)) :rule resolution :premises (t173 t169))
(step t175 (cl (not (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) :rule equiv_pos2)
(step t176 (cl (= (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true) (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))))) :rule equiv_simplify)
(step t177 (cl (not (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)) (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) :rule equiv1 :premises (t176))
(step t178 (cl (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)) :rule hole :args ("11" (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)))
(step t179 (cl (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) :rule resolution :premises (t177 t178))
(step t180 (cl (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) :rule and :premises (a0) :args (15))
(step t181 (cl (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) :rule resolution :premises (t175 t179 t180))
(step t182 (cl (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))) :rule and :premises (t181) :args (1))
(step t183 (cl (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) (= x15 x16)) :rule implies :premises (t182))
(step t184 (cl (= x15 x16) (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))))) :rule reordering :premises (t183))
(step t185 (cl (= x15 x16)) :rule resolution :premises (t184 t180))
(step t186 (cl (not (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) :rule equiv_pos2)
(step t187 (cl (= (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true) (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))))) :rule equiv_simplify)
(step t188 (cl (not (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)) (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) :rule equiv1 :premises (t187))
(step t189 (cl (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)) :rule hole :args ("11" (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)))
(step t190 (cl (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) :rule resolution :premises (t188 t189))
(step t191 (cl (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) :rule and :premises (a0) :args (16))
(step t192 (cl (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) :rule resolution :premises (t186 t190 t191))
(step t193 (cl (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))) :rule and :premises (t192) :args (1))
(step t194 (cl (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) (= x16 x17)) :rule implies :premises (t193))
(step t195 (cl (= x16 x17) (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))))) :rule reordering :premises (t194))
(step t196 (cl (= x16 x17)) :rule resolution :premises (t195 t191))
(step t197 (cl (not (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) :rule equiv_pos2)
(step t198 (cl (= (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true) (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))))) :rule equiv_simplify)
(step t199 (cl (not (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)) (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) :rule equiv1 :premises (t198))
(step t200 (cl (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)) :rule hole :args ("11" (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)))
(step t201 (cl (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) :rule resolution :premises (t199 t200))
(step t202 (cl (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) :rule and :premises (a0) :args (17))
(step t203 (cl (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) :rule resolution :premises (t197 t201 t202))
(step t204 (cl (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))) :rule and :premises (t203) :args (1))
(step t205 (cl (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) (= x17 x18)) :rule implies :premises (t204))
(step t206 (cl (= x17 x18) (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))))) :rule reordering :premises (t205))
(step t207 (cl (= x17 x18)) :rule resolution :premises (t206 t202))
(step t208 (cl (not (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) :rule equiv_pos2)
(step t209 (cl (= (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true) (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))))) :rule equiv_simplify)
(step t210 (cl (not (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)) (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) :rule equiv1 :premises (t209))
(step t211 (cl (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)) :rule hole :args ("11" (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)))
(step t212 (cl (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) :rule resolution :premises (t210 t211))
(step t213 (cl (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) :rule and :premises (a0) :args (18))
(step t214 (cl (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) :rule resolution :premises (t208 t212 t213))
(step t215 (cl (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))) :rule and :premises (t214) :args (1))
(step t216 (cl (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) (= x18 x19)) :rule implies :premises (t215))
(step t217 (cl (= x18 x19) (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))))) :rule reordering :premises (t216))
(step t218 (cl (= x18 x19)) :rule resolution :premises (t217 t213))
(step t219 (cl (not (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) :rule equiv_pos2)
(step t220 (cl (= (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true) (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))))) :rule equiv_simplify)
(step t221 (cl (not (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)) (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) :rule equiv1 :premises (t220))
(step t222 (cl (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)) :rule hole :args ("11" (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)))
(step t223 (cl (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) :rule resolution :premises (t221 t222))
(step t224 (cl (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) :rule and :premises (a0) :args (19))
(step t225 (cl (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) :rule resolution :premises (t219 t223 t224))
(step t226 (cl (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))) :rule and :premises (t225) :args (1))
(step t227 (cl (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) (= x19 x20)) :rule implies :premises (t226))
(step t228 (cl (= x19 x20) (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))))) :rule reordering :premises (t227))
(step t229 (cl (= x19 x20)) :rule resolution :premises (t228 t224))
(step t230 (cl (not (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) :rule equiv_pos2)
(step t231 (cl (= (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true) (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))))) :rule equiv_simplify)
(step t232 (cl (not (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)) (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) :rule equiv1 :premises (t231))
(step t233 (cl (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)) :rule hole :args ("11" (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)))
(step t234 (cl (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) :rule resolution :premises (t232 t233))
(step t235 (cl (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) :rule and :premises (a0) :args (20))
(step t236 (cl (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) :rule resolution :premises (t230 t234 t235))
(step t237 (cl (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))) :rule and :premises (t236) :args (1))
(step t238 (cl (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) (= x20 x21)) :rule implies :premises (t237))
(step t239 (cl (= x20 x21) (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))))) :rule reordering :premises (t238))
(step t240 (cl (= x20 x21)) :rule resolution :premises (t239 t235))
(step t241 (cl (not (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) :rule equiv_pos2)
(step t242 (cl (= (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true) (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))))) :rule equiv_simplify)
(step t243 (cl (not (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)) (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) :rule equiv1 :premises (t242))
(step t244 (cl (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)) :rule hole :args ("11" (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)))
(step t245 (cl (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) :rule resolution :premises (t243 t244))
(step t246 (cl (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) :rule and :premises (a0) :args (21))
(step t247 (cl (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) :rule resolution :premises (t241 t245 t246))
(step t248 (cl (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))) :rule and :premises (t247) :args (1))
(step t249 (cl (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) (= x21 x22)) :rule implies :premises (t248))
(step t250 (cl (= x21 x22) (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))))) :rule reordering :premises (t249))
(step t251 (cl (= x21 x22)) :rule resolution :premises (t250 t246))
(step t252 (cl (not (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) :rule equiv_pos2)
(step t253 (cl (= (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true) (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))))) :rule equiv_simplify)
(step t254 (cl (not (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)) (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) :rule equiv1 :premises (t253))
(step t255 (cl (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)) :rule hole :args ("11" (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)))
(step t256 (cl (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) :rule resolution :premises (t254 t255))
(step t257 (cl (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) :rule and :premises (a0) :args (22))
(step t258 (cl (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) :rule resolution :premises (t252 t256 t257))
(step t259 (cl (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))) :rule and :premises (t258) :args (1))
(step t260 (cl (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) (= x22 x23)) :rule implies :premises (t259))
(step t261 (cl (= x22 x23) (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))))) :rule reordering :premises (t260))
(step t262 (cl (= x22 x23)) :rule resolution :premises (t261 t257))
(step t263 (cl (not (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) :rule equiv_pos2)
(step t264 (cl (= (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true) (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))))) :rule equiv_simplify)
(step t265 (cl (not (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)) (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) :rule equiv1 :premises (t264))
(step t266 (cl (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)) :rule hole :args ("11" (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)))
(step t267 (cl (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) :rule resolution :premises (t265 t266))
(step t268 (cl (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) :rule and :premises (a0) :args (23))
(step t269 (cl (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) :rule resolution :premises (t263 t267 t268))
(step t270 (cl (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))) :rule and :premises (t269) :args (1))
(step t271 (cl (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) (= x23 x24)) :rule implies :premises (t270))
(step t272 (cl (= x23 x24) (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))))) :rule reordering :premises (t271))
(step t273 (cl (= x23 x24)) :rule resolution :premises (t272 t268))
(step t274 (cl (not (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) :rule equiv_pos2)
(step t275 (cl (= (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true) (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))))) :rule equiv_simplify)
(step t276 (cl (not (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)) (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) :rule equiv1 :premises (t275))
(step t277 (cl (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)) :rule hole :args ("11" (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)))
(step t278 (cl (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) :rule resolution :premises (t276 t277))
(step t279 (cl (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) :rule and :premises (a0) :args (24))
(step t280 (cl (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) :rule resolution :premises (t274 t278 t279))
(step t281 (cl (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))) :rule and :premises (t280) :args (1))
(step t282 (cl (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) (= x24 x25)) :rule implies :premises (t281))
(step t283 (cl (= x24 x25) (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))))) :rule reordering :premises (t282))
(step t284 (cl (= x24 x25)) :rule resolution :premises (t283 t279))
(step t285 (cl (not (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) :rule equiv_pos2)
(step t286 (cl (= (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true) (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))))) :rule equiv_simplify)
(step t287 (cl (not (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)) (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) :rule equiv1 :premises (t286))
(step t288 (cl (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)) :rule hole :args ("11" (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)))
(step t289 (cl (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) :rule resolution :premises (t287 t288))
(step t290 (cl (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) :rule and :premises (a0) :args (25))
(step t291 (cl (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) :rule resolution :premises (t285 t289 t290))
(step t292 (cl (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))) :rule and :premises (t291) :args (1))
(step t293 (cl (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) (= x25 x26)) :rule implies :premises (t292))
(step t294 (cl (= x25 x26) (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))))) :rule reordering :premises (t293))
(step t295 (cl (= x25 x26)) :rule resolution :premises (t294 t290))
(step t296 (cl (not (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) :rule equiv_pos2)
(step t297 (cl (= (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true) (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))))) :rule equiv_simplify)
(step t298 (cl (not (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)) (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) :rule equiv1 :premises (t297))
(step t299 (cl (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)) :rule hole :args ("11" (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)))
(step t300 (cl (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) :rule resolution :premises (t298 t299))
(step t301 (cl (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) :rule and :premises (a0) :args (26))
(step t302 (cl (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) :rule resolution :premises (t296 t300 t301))
(step t303 (cl (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))) :rule and :premises (t302) :args (1))
(step t304 (cl (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) (= x26 x27)) :rule implies :premises (t303))
(step t305 (cl (= x26 x27) (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))))) :rule reordering :premises (t304))
(step t306 (cl (= x26 x27)) :rule resolution :premises (t305 t301))
(step t307 (cl (not (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) :rule equiv_pos2)
(step t308 (cl (= (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true) (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))))) :rule equiv_simplify)
(step t309 (cl (not (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)) (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) :rule equiv1 :premises (t308))
(step t310 (cl (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)) :rule hole :args ("11" (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)))
(step t311 (cl (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) :rule resolution :premises (t309 t310))
(step t312 (cl (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) :rule and :premises (a0) :args (27))
(step t313 (cl (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) :rule resolution :premises (t307 t311 t312))
(step t314 (cl (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))) :rule and :premises (t313) :args (1))
(step t315 (cl (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) (= x27 x28)) :rule implies :premises (t314))
(step t316 (cl (= x27 x28) (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))))) :rule reordering :premises (t315))
(step t317 (cl (= x27 x28)) :rule resolution :premises (t316 t312))
(step t318 (cl (not (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) :rule equiv_pos2)
(step t319 (cl (= (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true) (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))))) :rule equiv_simplify)
(step t320 (cl (not (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)) (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) :rule equiv1 :premises (t319))
(step t321 (cl (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)) :rule hole :args ("11" (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)))
(step t322 (cl (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) :rule resolution :premises (t320 t321))
(step t323 (cl (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) :rule and :premises (a0) :args (28))
(step t324 (cl (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) :rule resolution :premises (t318 t322 t323))
(step t325 (cl (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))) :rule and :premises (t324) :args (1))
(step t326 (cl (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) (= x28 x29)) :rule implies :premises (t325))
(step t327 (cl (= x28 x29) (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))))) :rule reordering :premises (t326))
(step t328 (cl (= x28 x29)) :rule resolution :premises (t327 t323))
(step t329 (cl (not (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) :rule equiv_pos2)
(step t330 (cl (= (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true) (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))))) :rule equiv_simplify)
(step t331 (cl (not (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)) (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) :rule equiv1 :premises (t330))
(step t332 (cl (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)) :rule hole :args ("11" (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)))
(step t333 (cl (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) :rule resolution :premises (t331 t332))
(step t334 (cl (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) :rule and :premises (a0) :args (29))
(step t335 (cl (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) :rule resolution :premises (t329 t333 t334))
(step t336 (cl (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))) :rule and :premises (t335) :args (1))
(step t337 (cl (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) (= x29 x30)) :rule implies :premises (t336))
(step t338 (cl (= x29 x30) (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))))) :rule reordering :premises (t337))
(step t339 (cl (= x29 x30)) :rule resolution :premises (t338 t334))
(step t340 (cl (not (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) :rule equiv_pos2)
(step t341 (cl (= (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true) (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))))) :rule equiv_simplify)
(step t342 (cl (not (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)) (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) :rule equiv1 :premises (t341))
(step t343 (cl (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)) :rule hole :args ("11" (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)))
(step t344 (cl (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) :rule resolution :premises (t342 t343))
(step t345 (cl (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) :rule and :premises (a0) :args (30))
(step t346 (cl (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) :rule resolution :premises (t340 t344 t345))
(step t347 (cl (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))) :rule and :premises (t346) :args (1))
(step t348 (cl (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) (= x30 x31)) :rule implies :premises (t347))
(step t349 (cl (= x30 x31) (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))))) :rule reordering :premises (t348))
(step t350 (cl (= x30 x31)) :rule resolution :premises (t349 t345))
(step t351 (cl (not (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) :rule equiv_pos2)
(step t352 (cl (= (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true) (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))))) :rule equiv_simplify)
(step t353 (cl (not (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)) (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) :rule equiv1 :premises (t352))
(step t354 (cl (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)) :rule hole :args ("11" (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)))
(step t355 (cl (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) :rule resolution :premises (t353 t354))
(step t356 (cl (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) :rule and :premises (a0) :args (31))
(step t357 (cl (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) :rule resolution :premises (t351 t355 t356))
(step t358 (cl (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))) :rule and :premises (t357) :args (1))
(step t359 (cl (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) (= x31 x32)) :rule implies :premises (t358))
(step t360 (cl (= x31 x32) (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))))) :rule reordering :premises (t359))
(step t361 (cl (= x31 x32)) :rule resolution :premises (t360 t356))
(step t362 (cl (not (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) :rule equiv_pos2)
(step t363 (cl (= (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true) (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))))) :rule equiv_simplify)
(step t364 (cl (not (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)) (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) :rule equiv1 :premises (t363))
(step t365 (cl (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)) :rule hole :args ("11" (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)))
(step t366 (cl (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) :rule resolution :premises (t364 t365))
(step t367 (cl (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) :rule and :premises (a0) :args (32))
(step t368 (cl (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) :rule resolution :premises (t362 t366 t367))
(step t369 (cl (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))) :rule and :premises (t368) :args (1))
(step t370 (cl (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) (= x32 x33)) :rule implies :premises (t369))
(step t371 (cl (= x32 x33) (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))))) :rule reordering :premises (t370))
(step t372 (cl (= x32 x33)) :rule resolution :premises (t371 t367))
(step t373 (cl (not (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) :rule equiv_pos2)
(step t374 (cl (= (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true) (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))))) :rule equiv_simplify)
(step t375 (cl (not (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)) (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) :rule equiv1 :premises (t374))
(step t376 (cl (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)) :rule hole :args ("11" (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)))
(step t377 (cl (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) :rule resolution :premises (t375 t376))
(step t378 (cl (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) :rule and :premises (a0) :args (33))
(step t379 (cl (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) :rule resolution :premises (t373 t377 t378))
(step t380 (cl (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))) :rule and :premises (t379) :args (1))
(step t381 (cl (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) (= x33 x34)) :rule implies :premises (t380))
(step t382 (cl (= x33 x34) (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))))) :rule reordering :premises (t381))
(step t383 (cl (= x33 x34)) :rule resolution :premises (t382 t378))
(step t384 (cl (not (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) :rule equiv_pos2)
(step t385 (cl (= (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true) (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))))) :rule equiv_simplify)
(step t386 (cl (not (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)) (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) :rule equiv1 :premises (t385))
(step t387 (cl (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)) :rule hole :args ("11" (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)))
(step t388 (cl (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) :rule resolution :premises (t386 t387))
(step t389 (cl (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) :rule and :premises (a0) :args (34))
(step t390 (cl (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) :rule resolution :premises (t384 t388 t389))
(step t391 (cl (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))) :rule and :premises (t390) :args (1))
(step t392 (cl (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) (= x34 x35)) :rule implies :premises (t391))
(step t393 (cl (= x34 x35) (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))))) :rule reordering :premises (t392))
(step t394 (cl (= x34 x35)) :rule resolution :premises (t393 t389))
(step t395 (cl (not (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) :rule equiv_pos2)
(step t396 (cl (= (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true) (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))))) :rule equiv_simplify)
(step t397 (cl (not (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)) (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) :rule equiv1 :premises (t396))
(step t398 (cl (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)) :rule hole :args ("11" (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)))
(step t399 (cl (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) :rule resolution :premises (t397 t398))
(step t400 (cl (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) :rule and :premises (a0) :args (35))
(step t401 (cl (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) :rule resolution :premises (t395 t399 t400))
(step t402 (cl (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))) :rule and :premises (t401) :args (1))
(step t403 (cl (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) (= x35 x36)) :rule implies :premises (t402))
(step t404 (cl (= x35 x36) (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))))) :rule reordering :premises (t403))
(step t405 (cl (= x35 x36)) :rule resolution :premises (t404 t400))
(step t406 (cl (not (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) :rule equiv_pos2)
(step t407 (cl (= (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true) (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))))) :rule equiv_simplify)
(step t408 (cl (not (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)) (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) :rule equiv1 :premises (t407))
(step t409 (cl (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)) :rule hole :args ("11" (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)))
(step t410 (cl (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) :rule resolution :premises (t408 t409))
(step t411 (cl (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) :rule and :premises (a0) :args (36))
(step t412 (cl (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) :rule resolution :premises (t406 t410 t411))
(step t413 (cl (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))) :rule and :premises (t412) :args (1))
(step t414 (cl (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) (= x36 x37)) :rule implies :premises (t413))
(step t415 (cl (= x36 x37) (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))))) :rule reordering :premises (t414))
(step t416 (cl (= x36 x37)) :rule resolution :premises (t415 t411))
(step t417 (cl (not (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) :rule equiv_pos2)
(step t418 (cl (= (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true) (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))))) :rule equiv_simplify)
(step t419 (cl (not (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)) (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) :rule equiv1 :premises (t418))
(step t420 (cl (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)) :rule hole :args ("11" (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)))
(step t421 (cl (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) :rule resolution :premises (t419 t420))
(step t422 (cl (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) :rule and :premises (a0) :args (37))
(step t423 (cl (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) :rule resolution :premises (t417 t421 t422))
(step t424 (cl (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))) :rule and :premises (t423) :args (1))
(step t425 (cl (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) (= x37 x38)) :rule implies :premises (t424))
(step t426 (cl (= x37 x38) (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))))) :rule reordering :premises (t425))
(step t427 (cl (= x37 x38)) :rule resolution :premises (t426 t422))
(step t428 (cl (not (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) :rule equiv_pos2)
(step t429 (cl (= (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true) (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))))) :rule equiv_simplify)
(step t430 (cl (not (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)) (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) :rule equiv1 :premises (t429))
(step t431 (cl (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)) :rule hole :args ("11" (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)))
(step t432 (cl (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) :rule resolution :premises (t430 t431))
(step t433 (cl (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) :rule and :premises (a0) :args (38))
(step t434 (cl (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) :rule resolution :premises (t428 t432 t433))
(step t435 (cl (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))) :rule and :premises (t434) :args (1))
(step t436 (cl (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) (= x38 x39)) :rule implies :premises (t435))
(step t437 (cl (= x38 x39) (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))))) :rule reordering :premises (t436))
(step t438 (cl (= x38 x39)) :rule resolution :premises (t437 t433))
(step t439 (cl (not (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) :rule equiv_pos2)
(step t440 (cl (= (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true) (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))))) :rule equiv_simplify)
(step t441 (cl (not (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)) (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) :rule equiv1 :premises (t440))
(step t442 (cl (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)) :rule hole :args ("11" (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)))
(step t443 (cl (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) :rule resolution :premises (t441 t442))
(step t444 (cl (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) :rule and :premises (a0) :args (39))
(step t445 (cl (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) :rule resolution :premises (t439 t443 t444))
(step t446 (cl (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))) :rule and :premises (t445) :args (1))
(step t447 (cl (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) (= x39 x40)) :rule implies :premises (t446))
(step t448 (cl (= x39 x40) (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))))) :rule reordering :premises (t447))
(step t449 (cl (= x39 x40)) :rule resolution :premises (t448 t444))
(step t450 (cl (not (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) :rule equiv_pos2)
(step t451 (cl (= (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true) (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))))) :rule equiv_simplify)
(step t452 (cl (not (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)) (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) :rule equiv1 :premises (t451))
(step t453 (cl (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)) :rule hole :args ("11" (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)))
(step t454 (cl (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) :rule resolution :premises (t452 t453))
(step t455 (cl (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) :rule and :premises (a0) :args (40))
(step t456 (cl (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) :rule resolution :premises (t450 t454 t455))
(step t457 (cl (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))) :rule and :premises (t456) :args (1))
(step t458 (cl (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) (= x40 x41)) :rule implies :premises (t457))
(step t459 (cl (= x40 x41) (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))))) :rule reordering :premises (t458))
(step t460 (cl (= x40 x41)) :rule resolution :premises (t459 t455))
(step t461 (cl (not (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) :rule equiv_pos2)
(step t462 (cl (= (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true) (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))))) :rule equiv_simplify)
(step t463 (cl (not (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)) (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) :rule equiv1 :premises (t462))
(step t464 (cl (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)) :rule hole :args ("11" (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)))
(step t465 (cl (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) :rule resolution :premises (t463 t464))
(step t466 (cl (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) :rule and :premises (a0) :args (41))
(step t467 (cl (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) :rule resolution :premises (t461 t465 t466))
(step t468 (cl (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))) :rule and :premises (t467) :args (1))
(step t469 (cl (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) (= x41 x42)) :rule implies :premises (t468))
(step t470 (cl (= x41 x42) (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))))) :rule reordering :premises (t469))
(step t471 (cl (= x41 x42)) :rule resolution :premises (t470 t466))
(step t472 (cl (not (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) :rule equiv_pos2)
(step t473 (cl (= (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true) (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))))) :rule equiv_simplify)
(step t474 (cl (not (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)) (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) :rule equiv1 :premises (t473))
(step t475 (cl (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)) :rule hole :args ("11" (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)))
(step t476 (cl (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) :rule resolution :premises (t474 t475))
(step t477 (cl (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) :rule and :premises (a0) :args (42))
(step t478 (cl (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) :rule resolution :premises (t472 t476 t477))
(step t479 (cl (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))) :rule and :premises (t478) :args (1))
(step t480 (cl (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) (= x42 x43)) :rule implies :premises (t479))
(step t481 (cl (= x42 x43) (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))))) :rule reordering :premises (t480))
(step t482 (cl (= x42 x43)) :rule resolution :premises (t481 t477))
(step t483 (cl (not (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) :rule equiv_pos2)
(step t484 (cl (= (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true) (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))))) :rule equiv_simplify)
(step t485 (cl (not (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)) (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) :rule equiv1 :premises (t484))
(step t486 (cl (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)) :rule hole :args ("11" (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)))
(step t487 (cl (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) :rule resolution :premises (t485 t486))
(step t488 (cl (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) :rule and :premises (a0) :args (43))
(step t489 (cl (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) :rule resolution :premises (t483 t487 t488))
(step t490 (cl (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))) :rule and :premises (t489) :args (1))
(step t491 (cl (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) (= x43 x44)) :rule implies :premises (t490))
(step t492 (cl (= x43 x44) (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))))) :rule reordering :premises (t491))
(step t493 (cl (= x43 x44)) :rule resolution :premises (t492 t488))
(step t494 (cl (not (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) :rule equiv_pos2)
(step t495 (cl (= (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true) (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))))) :rule equiv_simplify)
(step t496 (cl (not (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)) (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) :rule equiv1 :premises (t495))
(step t497 (cl (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)) :rule hole :args ("11" (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)))
(step t498 (cl (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) :rule resolution :premises (t496 t497))
(step t499 (cl (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) :rule and :premises (a0) :args (44))
(step t500 (cl (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) :rule resolution :premises (t494 t498 t499))
(step t501 (cl (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))) :rule and :premises (t500) :args (1))
(step t502 (cl (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) (= x44 x45)) :rule implies :premises (t501))
(step t503 (cl (= x44 x45) (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))))) :rule reordering :premises (t502))
(step t504 (cl (= x44 x45)) :rule resolution :premises (t503 t499))
(step t505 (cl (not (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) :rule equiv_pos2)
(step t506 (cl (= (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true) (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))))) :rule equiv_simplify)
(step t507 (cl (not (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)) (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) :rule equiv1 :premises (t506))
(step t508 (cl (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)) :rule hole :args ("11" (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)))
(step t509 (cl (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) :rule resolution :premises (t507 t508))
(step t510 (cl (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) :rule and :premises (a0) :args (45))
(step t511 (cl (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) :rule resolution :premises (t505 t509 t510))
(step t512 (cl (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))) :rule and :premises (t511) :args (1))
(step t513 (cl (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) (= x45 x46)) :rule implies :premises (t512))
(step t514 (cl (= x45 x46) (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))))) :rule reordering :premises (t513))
(step t515 (cl (= x45 x46)) :rule resolution :premises (t514 t510))
(step t516 (cl (not (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) :rule equiv_pos2)
(step t517 (cl (= (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true) (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))))) :rule equiv_simplify)
(step t518 (cl (not (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)) (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) :rule equiv1 :premises (t517))
(step t519 (cl (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)) :rule hole :args ("11" (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)))
(step t520 (cl (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) :rule resolution :premises (t518 t519))
(step t521 (cl (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) :rule and :premises (a0) :args (46))
(step t522 (cl (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) :rule resolution :premises (t516 t520 t521))
(step t523 (cl (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))) :rule and :premises (t522) :args (1))
(step t524 (cl (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) (= x46 x47)) :rule implies :premises (t523))
(step t525 (cl (= x46 x47) (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))))) :rule reordering :premises (t524))
(step t526 (cl (= x46 x47)) :rule resolution :premises (t525 t521))
(step t527 (cl (not (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) :rule equiv_pos2)
(step t528 (cl (= (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true) (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))))) :rule equiv_simplify)
(step t529 (cl (not (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)) (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) :rule equiv1 :premises (t528))
(step t530 (cl (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)) :rule hole :args ("11" (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)))
(step t531 (cl (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) :rule resolution :premises (t529 t530))
(step t532 (cl (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) :rule and :premises (a0) :args (47))
(step t533 (cl (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) :rule resolution :premises (t527 t531 t532))
(step t534 (cl (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))) :rule and :premises (t533) :args (1))
(step t535 (cl (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) (= x47 x48)) :rule implies :premises (t534))
(step t536 (cl (= x47 x48) (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))))) :rule reordering :premises (t535))
(step t537 (cl (= x47 x48)) :rule resolution :premises (t536 t532))
(step t538 (cl (not (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) :rule equiv_pos2)
(step t539 (cl (= (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true) (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))))) :rule equiv_simplify)
(step t540 (cl (not (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)) (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) :rule equiv1 :premises (t539))
(step t541 (cl (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)) :rule hole :args ("11" (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)))
(step t542 (cl (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) :rule resolution :premises (t540 t541))
(step t543 (cl (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) :rule and :premises (a0) :args (48))
(step t544 (cl (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) :rule resolution :premises (t538 t542 t543))
(step t545 (cl (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))) :rule and :premises (t544) :args (1))
(step t546 (cl (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) (= x48 x49)) :rule implies :premises (t545))
(step t547 (cl (= x48 x49) (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))))) :rule reordering :premises (t546))
(step t548 (cl (= x48 x49)) :rule resolution :premises (t547 t543))
(step t549 (cl (not (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) :rule equiv_pos2)
(step t550 (cl (= (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true) (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))))) :rule equiv_simplify)
(step t551 (cl (not (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)) (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) :rule equiv1 :premises (t550))
(step t552 (cl (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)) :rule hole :args ("11" (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)))
(step t553 (cl (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) :rule resolution :premises (t551 t552))
(step t554 (cl (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) :rule and :premises (a0) :args (49))
(step t555 (cl (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) :rule resolution :premises (t549 t553 t554))
(step t556 (cl (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))) :rule and :premises (t555) :args (1))
(step t557 (cl (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) (= x49 x50)) :rule implies :premises (t556))
(step t558 (cl (= x49 x50) (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))))) :rule reordering :premises (t557))
(step t559 (cl (= x49 x50)) :rule resolution :premises (t558 t554))
(step t560 (cl (not (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) :rule equiv_pos2)
(step t561 (cl (= (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true) (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))))) :rule equiv_simplify)
(step t562 (cl (not (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)) (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) :rule equiv1 :premises (t561))
(step t563 (cl (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)) :rule hole :args ("11" (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)))
(step t564 (cl (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) :rule resolution :premises (t562 t563))
(step t565 (cl (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) :rule and :premises (a0) :args (50))
(step t566 (cl (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) :rule resolution :premises (t560 t564 t565))
(step t567 (cl (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))) :rule and :premises (t566) :args (1))
(step t568 (cl (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) (= x50 x51)) :rule implies :premises (t567))
(step t569 (cl (= x50 x51) (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))))) :rule reordering :premises (t568))
(step t570 (cl (= x50 x51)) :rule resolution :premises (t569 t565))
(step t571 (cl (= x7 x51)) :rule trans :premises (t97 t108 t119 t130 t141 t152 t163 t174 t185 t196 t207 t218 t229 t240 t251 t262 t273 t284 t295 t306 t317 t328 t339 t350 t361 t372 t383 t394 t405 t416 t427 t438 t449 t460 t471 t482 t493 t504 t515 t526 t537 t548 t559 t570))
(step t572 (cl (= (= x6 x7) (= x0 x51))) :rule cong :premises (t86 t571))
(step t573 (cl (= (= (= x0 x51) false) (not (= x0 x51)))) :rule equiv_simplify)
(step t574 (cl (= (= x0 x51) false) (not (not (= x0 x51)))) :rule equiv2 :premises (t573))
(step t575 (cl (not (not (not (= x0 x51)))) (= x0 x51)) :rule not_not)
(step t576 (cl (= (= x0 x51) false) (= x0 x51)) :rule resolution :premises (t574 t575))
(step t577 (cl (not (= x0 x51))) :rule and :premises (a0) :args (51))
(step t578 (cl (= (= x0 x51) false)) :rule resolution :premises (t576 t577))
(step t579 (cl (= (= x6 x7) false)) :rule trans :premises (t572 t578))
(step t580 (cl (not (= x6 x7))) :rule resolution :premises (t13 t579))
(step t581 (cl (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))))) :rule resolution :premises (t11 t580))
(step t582 (cl (not (and (= x6 z6) (= z6 x7)))) :rule resolution :premises (t2 t581))
(step t583 (cl (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (not (and (= x6 y6) (= y6 x7)))) :rule or_neg :args (0))
(step t584 (cl (not (and (= x6 y6) (= y6 x7)))) :rule resolution :premises (t583 t581))
(step t585 (cl) :rule resolution :premises (t1 t582 t584))
