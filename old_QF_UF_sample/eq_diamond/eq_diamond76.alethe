unsat
(assume a0 (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (not (= x0 x75))))
(step t0 (cl (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12)))) :rule and :premises (a0) :args (11))
(step t1 (cl (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) :rule or :premises (t0))
(step t2 (cl (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (not (and (= x11 z11) (= z11 x12)))) :rule or_neg :args (1))
(step t3 (cl (not (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))))) (not (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12)))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) :rule equiv_pos2)
(step t4 (cl (= (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true) (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))))) :rule equiv_simplify)
(step t5 (cl (not (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true)) (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))))) :rule equiv1 :premises (t4))
(step t6 (cl (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true)) :rule hole :args ("11" (= (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) true)))
(step t7 (cl (= (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))))) :rule resolution :premises (t5 t6))
(step t8 (cl (and (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12)))) :rule resolution :premises (t3 t7 t0))
(step t9 (cl (=> (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (= x11 x12))) :rule and :premises (t8) :args (1))
(step t10 (cl (not (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12)))) (= x11 x12)) :rule implies :premises (t9))
(step t11 (cl (= x11 x12) (not (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))))) :rule reordering :premises (t10))
(step t12 (cl (= (= (= x11 x12) false) (not (= x11 x12)))) :rule equiv_simplify)
(step t13 (cl (not (= (= x11 x12) false)) (not (= x11 x12))) :rule equiv1 :premises (t12))
(step t14 (cl (not (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) :rule equiv_pos2)
(step t15 (cl (= (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true) (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))))) :rule equiv_simplify)
(step t16 (cl (not (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)) (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) :rule equiv1 :premises (t15))
(step t17 (cl (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)) :rule hole :args ("11" (= (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) true)))
(step t18 (cl (= (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))))) :rule resolution :premises (t16 t17))
(step t19 (cl (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) :rule and :premises (a0) :args (10))
(step t20 (cl (and (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11)))) :rule resolution :premises (t14 t18 t19))
(step t21 (cl (=> (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (= x10 x11))) :rule and :premises (t20) :args (1))
(step t22 (cl (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))) (= x10 x11)) :rule implies :premises (t21))
(step t23 (cl (= x10 x11) (not (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))))) :rule reordering :premises (t22))
(step t24 (cl (= x10 x11)) :rule resolution :premises (t23 t19))
(step t25 (cl (= x11 x10)) :rule symm :premises (t24))
(step t26 (cl (not (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) :rule equiv_pos2)
(step t27 (cl (= (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true) (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))))) :rule equiv_simplify)
(step t28 (cl (not (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)) (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) :rule equiv1 :premises (t27))
(step t29 (cl (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)) :rule hole :args ("11" (= (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) true)))
(step t30 (cl (= (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))))) :rule resolution :premises (t28 t29))
(step t31 (cl (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) :rule and :premises (a0) :args (9))
(step t32 (cl (and (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10)))) :rule resolution :premises (t26 t30 t31))
(step t33 (cl (=> (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (= x9 x10))) :rule and :premises (t32) :args (1))
(step t34 (cl (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))) (= x9 x10)) :rule implies :premises (t33))
(step t35 (cl (= x9 x10) (not (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))))) :rule reordering :premises (t34))
(step t36 (cl (= x9 x10)) :rule resolution :premises (t35 t31))
(step t37 (cl (= x10 x9)) :rule symm :premises (t36))
(step t38 (cl (not (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) :rule equiv_pos2)
(step t39 (cl (= (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true) (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))))) :rule equiv_simplify)
(step t40 (cl (not (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)) (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) :rule equiv1 :premises (t39))
(step t41 (cl (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)) :rule hole :args ("11" (= (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) true)))
(step t42 (cl (= (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))))) :rule resolution :premises (t40 t41))
(step t43 (cl (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) :rule and :premises (a0) :args (8))
(step t44 (cl (and (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9)))) :rule resolution :premises (t38 t42 t43))
(step t45 (cl (=> (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (= x8 x9))) :rule and :premises (t44) :args (1))
(step t46 (cl (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))) (= x8 x9)) :rule implies :premises (t45))
(step t47 (cl (= x8 x9) (not (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))))) :rule reordering :premises (t46))
(step t48 (cl (= x8 x9)) :rule resolution :premises (t47 t43))
(step t49 (cl (= x9 x8)) :rule symm :premises (t48))
(step t50 (cl (not (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) :rule equiv_pos2)
(step t51 (cl (= (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true) (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))))) :rule equiv_simplify)
(step t52 (cl (not (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)) (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) :rule equiv1 :premises (t51))
(step t53 (cl (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)) :rule hole :args ("11" (= (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) true)))
(step t54 (cl (= (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))))) :rule resolution :premises (t52 t53))
(step t55 (cl (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) :rule and :premises (a0) :args (7))
(step t56 (cl (and (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8)))) :rule resolution :premises (t50 t54 t55))
(step t57 (cl (=> (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (= x7 x8))) :rule and :premises (t56) :args (1))
(step t58 (cl (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))) (= x7 x8)) :rule implies :premises (t57))
(step t59 (cl (= x7 x8) (not (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))))) :rule reordering :premises (t58))
(step t60 (cl (= x7 x8)) :rule resolution :premises (t59 t55))
(step t61 (cl (= x8 x7)) :rule symm :premises (t60))
(step t62 (cl (not (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) :rule equiv_pos2)
(step t63 (cl (= (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true) (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))))) :rule equiv_simplify)
(step t64 (cl (not (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)) (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) :rule equiv1 :premises (t63))
(step t65 (cl (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)) :rule hole :args ("11" (= (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) true)))
(step t66 (cl (= (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))))) :rule resolution :premises (t64 t65))
(step t67 (cl (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) :rule and :premises (a0) :args (6))
(step t68 (cl (and (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7)))) :rule resolution :premises (t62 t66 t67))
(step t69 (cl (=> (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (= x6 x7))) :rule and :premises (t68) :args (1))
(step t70 (cl (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))) (= x6 x7)) :rule implies :premises (t69))
(step t71 (cl (= x6 x7) (not (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))))) :rule reordering :premises (t70))
(step t72 (cl (= x6 x7)) :rule resolution :premises (t71 t67))
(step t73 (cl (= x7 x6)) :rule symm :premises (t72))
(step t74 (cl (not (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) :rule equiv_pos2)
(step t75 (cl (= (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true) (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))))) :rule equiv_simplify)
(step t76 (cl (not (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)) (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) :rule equiv1 :premises (t75))
(step t77 (cl (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)) :rule hole :args ("11" (= (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) true)))
(step t78 (cl (= (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))))) :rule resolution :premises (t76 t77))
(step t79 (cl (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) :rule and :premises (a0) :args (5))
(step t80 (cl (and (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6)))) :rule resolution :premises (t74 t78 t79))
(step t81 (cl (=> (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (= x5 x6))) :rule and :premises (t80) :args (1))
(step t82 (cl (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))) (= x5 x6)) :rule implies :premises (t81))
(step t83 (cl (= x5 x6) (not (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))))) :rule reordering :premises (t82))
(step t84 (cl (= x5 x6)) :rule resolution :premises (t83 t79))
(step t85 (cl (= x6 x5)) :rule symm :premises (t84))
(step t86 (cl (not (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) :rule equiv_pos2)
(step t87 (cl (= (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true) (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))))) :rule equiv_simplify)
(step t88 (cl (not (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)) (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) :rule equiv1 :premises (t87))
(step t89 (cl (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)) :rule hole :args ("11" (= (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) true)))
(step t90 (cl (= (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))))) :rule resolution :premises (t88 t89))
(step t91 (cl (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) :rule and :premises (a0) :args (4))
(step t92 (cl (and (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5)))) :rule resolution :premises (t86 t90 t91))
(step t93 (cl (=> (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (= x4 x5))) :rule and :premises (t92) :args (1))
(step t94 (cl (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))) (= x4 x5)) :rule implies :premises (t93))
(step t95 (cl (= x4 x5) (not (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))))) :rule reordering :premises (t94))
(step t96 (cl (= x4 x5)) :rule resolution :premises (t95 t91))
(step t97 (cl (= x5 x4)) :rule symm :premises (t96))
(step t98 (cl (not (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) :rule equiv_pos2)
(step t99 (cl (= (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true) (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))))) :rule equiv_simplify)
(step t100 (cl (not (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)) (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) :rule equiv1 :premises (t99))
(step t101 (cl (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)) :rule hole :args ("11" (= (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) true)))
(step t102 (cl (= (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))))) :rule resolution :premises (t100 t101))
(step t103 (cl (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) :rule and :premises (a0) :args (3))
(step t104 (cl (and (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4)))) :rule resolution :premises (t98 t102 t103))
(step t105 (cl (=> (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (= x3 x4))) :rule and :premises (t104) :args (1))
(step t106 (cl (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))) (= x3 x4)) :rule implies :premises (t105))
(step t107 (cl (= x3 x4) (not (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))))) :rule reordering :premises (t106))
(step t108 (cl (= x3 x4)) :rule resolution :premises (t107 t103))
(step t109 (cl (= x4 x3)) :rule symm :premises (t108))
(step t110 (cl (not (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) :rule equiv_pos2)
(step t111 (cl (= (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true) (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))))) :rule equiv_simplify)
(step t112 (cl (not (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)) (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) :rule equiv1 :premises (t111))
(step t113 (cl (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)) :rule hole :args ("11" (= (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) true)))
(step t114 (cl (= (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))))) :rule resolution :premises (t112 t113))
(step t115 (cl (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) :rule and :premises (a0) :args (2))
(step t116 (cl (and (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3)))) :rule resolution :premises (t110 t114 t115))
(step t117 (cl (=> (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (= x2 x3))) :rule and :premises (t116) :args (1))
(step t118 (cl (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) (= x2 x3)) :rule implies :premises (t117))
(step t119 (cl (= x2 x3) (not (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))))) :rule reordering :premises (t118))
(step t120 (cl (= x2 x3)) :rule resolution :premises (t119 t115))
(step t121 (cl (= x3 x2)) :rule symm :premises (t120))
(step t122 (cl (not (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) :rule equiv_pos2)
(step t123 (cl (= (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true) (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))))) :rule equiv_simplify)
(step t124 (cl (not (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)) (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) :rule equiv1 :premises (t123))
(step t125 (cl (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)) :rule hole :args ("11" (= (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) true)))
(step t126 (cl (= (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))))) :rule resolution :premises (t124 t125))
(step t127 (cl (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) :rule and :premises (a0) :args (1))
(step t128 (cl (and (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2)))) :rule resolution :premises (t122 t126 t127))
(step t129 (cl (=> (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (= x1 x2))) :rule and :premises (t128) :args (1))
(step t130 (cl (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))) (= x1 x2)) :rule implies :premises (t129))
(step t131 (cl (= x1 x2) (not (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))))) :rule reordering :premises (t130))
(step t132 (cl (= x1 x2)) :rule resolution :premises (t131 t127))
(step t133 (cl (= x2 x1)) :rule symm :premises (t132))
(step t134 (cl (not (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) :rule equiv_pos2)
(step t135 (cl (= (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true) (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))))) :rule equiv_simplify)
(step t136 (cl (not (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)) (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) :rule equiv1 :premises (t135))
(step t137 (cl (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)) :rule hole :args ("11" (= (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) true)))
(step t138 (cl (= (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))))) :rule resolution :premises (t136 t137))
(step t139 (cl (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) :rule and :premises (a0) :args (0))
(step t140 (cl (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1)))) :rule resolution :premises (t134 t138 t139))
(step t141 (cl (=> (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (= x0 x1))) :rule and :premises (t140) :args (1))
(step t142 (cl (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))) (= x0 x1)) :rule implies :premises (t141))
(step t143 (cl (= x0 x1) (not (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))))) :rule reordering :premises (t142))
(step t144 (cl (= x0 x1)) :rule resolution :premises (t143 t139))
(step t145 (cl (= x1 x0)) :rule symm :premises (t144))
(step t146 (cl (= x11 x0)) :rule trans :premises (t25 t37 t49 t61 t73 t85 t97 t109 t121 t133 t145))
(step t147 (cl (not (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) :rule equiv_pos2)
(step t148 (cl (= (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true) (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))))) :rule equiv_simplify)
(step t149 (cl (not (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)) (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) :rule equiv1 :premises (t148))
(step t150 (cl (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)) :rule hole :args ("11" (= (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) true)))
(step t151 (cl (= (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))))) :rule resolution :premises (t149 t150))
(step t152 (cl (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) :rule and :premises (a0) :args (12))
(step t153 (cl (and (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13)))) :rule resolution :premises (t147 t151 t152))
(step t154 (cl (=> (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))) (= x12 x13))) :rule and :premises (t153) :args (1))
(step t155 (cl (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13)))) (= x12 x13)) :rule implies :premises (t154))
(step t156 (cl (= x12 x13) (not (or (and (= x12 y12) (= y12 x13)) (and (= x12 z12) (= z12 x13))))) :rule reordering :premises (t155))
(step t157 (cl (= x12 x13)) :rule resolution :premises (t156 t152))
(step t158 (cl (not (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) :rule equiv_pos2)
(step t159 (cl (= (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true) (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))))) :rule equiv_simplify)
(step t160 (cl (not (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)) (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) :rule equiv1 :premises (t159))
(step t161 (cl (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)) :rule hole :args ("11" (= (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) true)))
(step t162 (cl (= (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))))) :rule resolution :premises (t160 t161))
(step t163 (cl (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) :rule and :premises (a0) :args (13))
(step t164 (cl (and (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14)))) :rule resolution :premises (t158 t162 t163))
(step t165 (cl (=> (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))) (= x13 x14))) :rule and :premises (t164) :args (1))
(step t166 (cl (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14)))) (= x13 x14)) :rule implies :premises (t165))
(step t167 (cl (= x13 x14) (not (or (and (= x13 y13) (= y13 x14)) (and (= x13 z13) (= z13 x14))))) :rule reordering :premises (t166))
(step t168 (cl (= x13 x14)) :rule resolution :premises (t167 t163))
(step t169 (cl (not (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))))) (not (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15)))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) :rule equiv_pos2)
(step t170 (cl (= (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true) (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))))) :rule equiv_simplify)
(step t171 (cl (not (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true)) (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))))) :rule equiv1 :premises (t170))
(step t172 (cl (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true)) :rule hole :args ("11" (= (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) true)))
(step t173 (cl (= (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))))) :rule resolution :premises (t171 t172))
(step t174 (cl (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15)))) :rule and :premises (a0) :args (14))
(step t175 (cl (and (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15)))) :rule resolution :premises (t169 t173 t174))
(step t176 (cl (=> (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))) (= x14 x15))) :rule and :premises (t175) :args (1))
(step t177 (cl (not (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15)))) (= x14 x15)) :rule implies :premises (t176))
(step t178 (cl (= x14 x15) (not (or (and (= x14 y14) (= y14 x15)) (and (= x14 z14) (= z14 x15))))) :rule reordering :premises (t177))
(step t179 (cl (= x14 x15)) :rule resolution :premises (t178 t174))
(step t180 (cl (not (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) :rule equiv_pos2)
(step t181 (cl (= (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true) (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))))) :rule equiv_simplify)
(step t182 (cl (not (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)) (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) :rule equiv1 :premises (t181))
(step t183 (cl (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)) :rule hole :args ("11" (= (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) true)))
(step t184 (cl (= (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))))) :rule resolution :premises (t182 t183))
(step t185 (cl (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) :rule and :premises (a0) :args (15))
(step t186 (cl (and (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16)))) :rule resolution :premises (t180 t184 t185))
(step t187 (cl (=> (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))) (= x15 x16))) :rule and :premises (t186) :args (1))
(step t188 (cl (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16)))) (= x15 x16)) :rule implies :premises (t187))
(step t189 (cl (= x15 x16) (not (or (and (= x15 y15) (= y15 x16)) (and (= x15 z15) (= z15 x16))))) :rule reordering :premises (t188))
(step t190 (cl (= x15 x16)) :rule resolution :premises (t189 t185))
(step t191 (cl (not (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) :rule equiv_pos2)
(step t192 (cl (= (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true) (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))))) :rule equiv_simplify)
(step t193 (cl (not (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)) (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) :rule equiv1 :premises (t192))
(step t194 (cl (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)) :rule hole :args ("11" (= (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) true)))
(step t195 (cl (= (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))))) :rule resolution :premises (t193 t194))
(step t196 (cl (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) :rule and :premises (a0) :args (16))
(step t197 (cl (and (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17)))) :rule resolution :premises (t191 t195 t196))
(step t198 (cl (=> (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))) (= x16 x17))) :rule and :premises (t197) :args (1))
(step t199 (cl (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17)))) (= x16 x17)) :rule implies :premises (t198))
(step t200 (cl (= x16 x17) (not (or (and (= x16 y16) (= y16 x17)) (and (= x16 z16) (= z16 x17))))) :rule reordering :premises (t199))
(step t201 (cl (= x16 x17)) :rule resolution :premises (t200 t196))
(step t202 (cl (not (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) :rule equiv_pos2)
(step t203 (cl (= (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true) (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))))) :rule equiv_simplify)
(step t204 (cl (not (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)) (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) :rule equiv1 :premises (t203))
(step t205 (cl (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)) :rule hole :args ("11" (= (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) true)))
(step t206 (cl (= (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))))) :rule resolution :premises (t204 t205))
(step t207 (cl (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) :rule and :premises (a0) :args (17))
(step t208 (cl (and (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18)))) :rule resolution :premises (t202 t206 t207))
(step t209 (cl (=> (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))) (= x17 x18))) :rule and :premises (t208) :args (1))
(step t210 (cl (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18)))) (= x17 x18)) :rule implies :premises (t209))
(step t211 (cl (= x17 x18) (not (or (and (= x17 y17) (= y17 x18)) (and (= x17 z17) (= z17 x18))))) :rule reordering :premises (t210))
(step t212 (cl (= x17 x18)) :rule resolution :premises (t211 t207))
(step t213 (cl (not (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) :rule equiv_pos2)
(step t214 (cl (= (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true) (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))))) :rule equiv_simplify)
(step t215 (cl (not (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)) (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) :rule equiv1 :premises (t214))
(step t216 (cl (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)) :rule hole :args ("11" (= (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) true)))
(step t217 (cl (= (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))))) :rule resolution :premises (t215 t216))
(step t218 (cl (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) :rule and :premises (a0) :args (18))
(step t219 (cl (and (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19)))) :rule resolution :premises (t213 t217 t218))
(step t220 (cl (=> (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))) (= x18 x19))) :rule and :premises (t219) :args (1))
(step t221 (cl (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19)))) (= x18 x19)) :rule implies :premises (t220))
(step t222 (cl (= x18 x19) (not (or (and (= x18 y18) (= y18 x19)) (and (= x18 z18) (= z18 x19))))) :rule reordering :premises (t221))
(step t223 (cl (= x18 x19)) :rule resolution :premises (t222 t218))
(step t224 (cl (not (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) :rule equiv_pos2)
(step t225 (cl (= (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true) (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))))) :rule equiv_simplify)
(step t226 (cl (not (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)) (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) :rule equiv1 :premises (t225))
(step t227 (cl (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)) :rule hole :args ("11" (= (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) true)))
(step t228 (cl (= (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))))) :rule resolution :premises (t226 t227))
(step t229 (cl (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) :rule and :premises (a0) :args (19))
(step t230 (cl (and (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20)))) :rule resolution :premises (t224 t228 t229))
(step t231 (cl (=> (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))) (= x19 x20))) :rule and :premises (t230) :args (1))
(step t232 (cl (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20)))) (= x19 x20)) :rule implies :premises (t231))
(step t233 (cl (= x19 x20) (not (or (and (= x19 y19) (= y19 x20)) (and (= x19 z19) (= z19 x20))))) :rule reordering :premises (t232))
(step t234 (cl (= x19 x20)) :rule resolution :premises (t233 t229))
(step t235 (cl (not (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) :rule equiv_pos2)
(step t236 (cl (= (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true) (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))))) :rule equiv_simplify)
(step t237 (cl (not (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)) (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) :rule equiv1 :premises (t236))
(step t238 (cl (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)) :rule hole :args ("11" (= (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) true)))
(step t239 (cl (= (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))))) :rule resolution :premises (t237 t238))
(step t240 (cl (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) :rule and :premises (a0) :args (20))
(step t241 (cl (and (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21)))) :rule resolution :premises (t235 t239 t240))
(step t242 (cl (=> (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))) (= x20 x21))) :rule and :premises (t241) :args (1))
(step t243 (cl (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21)))) (= x20 x21)) :rule implies :premises (t242))
(step t244 (cl (= x20 x21) (not (or (and (= x20 y20) (= y20 x21)) (and (= x20 z20) (= z20 x21))))) :rule reordering :premises (t243))
(step t245 (cl (= x20 x21)) :rule resolution :premises (t244 t240))
(step t246 (cl (not (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) :rule equiv_pos2)
(step t247 (cl (= (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true) (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))))) :rule equiv_simplify)
(step t248 (cl (not (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)) (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) :rule equiv1 :premises (t247))
(step t249 (cl (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)) :rule hole :args ("11" (= (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) true)))
(step t250 (cl (= (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))))) :rule resolution :premises (t248 t249))
(step t251 (cl (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) :rule and :premises (a0) :args (21))
(step t252 (cl (and (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22)))) :rule resolution :premises (t246 t250 t251))
(step t253 (cl (=> (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))) (= x21 x22))) :rule and :premises (t252) :args (1))
(step t254 (cl (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22)))) (= x21 x22)) :rule implies :premises (t253))
(step t255 (cl (= x21 x22) (not (or (and (= x21 y21) (= y21 x22)) (and (= x21 z21) (= z21 x22))))) :rule reordering :premises (t254))
(step t256 (cl (= x21 x22)) :rule resolution :premises (t255 t251))
(step t257 (cl (not (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) :rule equiv_pos2)
(step t258 (cl (= (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true) (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))))) :rule equiv_simplify)
(step t259 (cl (not (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)) (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) :rule equiv1 :premises (t258))
(step t260 (cl (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)) :rule hole :args ("11" (= (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) true)))
(step t261 (cl (= (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))))) :rule resolution :premises (t259 t260))
(step t262 (cl (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) :rule and :premises (a0) :args (22))
(step t263 (cl (and (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23)))) :rule resolution :premises (t257 t261 t262))
(step t264 (cl (=> (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))) (= x22 x23))) :rule and :premises (t263) :args (1))
(step t265 (cl (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23)))) (= x22 x23)) :rule implies :premises (t264))
(step t266 (cl (= x22 x23) (not (or (and (= x22 y22) (= y22 x23)) (and (= x22 z22) (= z22 x23))))) :rule reordering :premises (t265))
(step t267 (cl (= x22 x23)) :rule resolution :premises (t266 t262))
(step t268 (cl (not (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) :rule equiv_pos2)
(step t269 (cl (= (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true) (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))))) :rule equiv_simplify)
(step t270 (cl (not (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)) (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) :rule equiv1 :premises (t269))
(step t271 (cl (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)) :rule hole :args ("11" (= (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) true)))
(step t272 (cl (= (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))))) :rule resolution :premises (t270 t271))
(step t273 (cl (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) :rule and :premises (a0) :args (23))
(step t274 (cl (and (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24)))) :rule resolution :premises (t268 t272 t273))
(step t275 (cl (=> (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))) (= x23 x24))) :rule and :premises (t274) :args (1))
(step t276 (cl (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24)))) (= x23 x24)) :rule implies :premises (t275))
(step t277 (cl (= x23 x24) (not (or (and (= x23 y23) (= y23 x24)) (and (= x23 z23) (= z23 x24))))) :rule reordering :premises (t276))
(step t278 (cl (= x23 x24)) :rule resolution :premises (t277 t273))
(step t279 (cl (not (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) :rule equiv_pos2)
(step t280 (cl (= (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true) (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))))) :rule equiv_simplify)
(step t281 (cl (not (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)) (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) :rule equiv1 :premises (t280))
(step t282 (cl (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)) :rule hole :args ("11" (= (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) true)))
(step t283 (cl (= (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))))) :rule resolution :premises (t281 t282))
(step t284 (cl (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) :rule and :premises (a0) :args (24))
(step t285 (cl (and (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25)))) :rule resolution :premises (t279 t283 t284))
(step t286 (cl (=> (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))) (= x24 x25))) :rule and :premises (t285) :args (1))
(step t287 (cl (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25)))) (= x24 x25)) :rule implies :premises (t286))
(step t288 (cl (= x24 x25) (not (or (and (= x24 y24) (= y24 x25)) (and (= x24 z24) (= z24 x25))))) :rule reordering :premises (t287))
(step t289 (cl (= x24 x25)) :rule resolution :premises (t288 t284))
(step t290 (cl (not (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) :rule equiv_pos2)
(step t291 (cl (= (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true) (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))))) :rule equiv_simplify)
(step t292 (cl (not (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)) (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) :rule equiv1 :premises (t291))
(step t293 (cl (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)) :rule hole :args ("11" (= (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) true)))
(step t294 (cl (= (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))))) :rule resolution :premises (t292 t293))
(step t295 (cl (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) :rule and :premises (a0) :args (25))
(step t296 (cl (and (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26)))) :rule resolution :premises (t290 t294 t295))
(step t297 (cl (=> (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))) (= x25 x26))) :rule and :premises (t296) :args (1))
(step t298 (cl (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26)))) (= x25 x26)) :rule implies :premises (t297))
(step t299 (cl (= x25 x26) (not (or (and (= x25 y25) (= y25 x26)) (and (= x25 z25) (= z25 x26))))) :rule reordering :premises (t298))
(step t300 (cl (= x25 x26)) :rule resolution :premises (t299 t295))
(step t301 (cl (not (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) :rule equiv_pos2)
(step t302 (cl (= (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true) (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))))) :rule equiv_simplify)
(step t303 (cl (not (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)) (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) :rule equiv1 :premises (t302))
(step t304 (cl (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)) :rule hole :args ("11" (= (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) true)))
(step t305 (cl (= (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))))) :rule resolution :premises (t303 t304))
(step t306 (cl (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) :rule and :premises (a0) :args (26))
(step t307 (cl (and (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27)))) :rule resolution :premises (t301 t305 t306))
(step t308 (cl (=> (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))) (= x26 x27))) :rule and :premises (t307) :args (1))
(step t309 (cl (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27)))) (= x26 x27)) :rule implies :premises (t308))
(step t310 (cl (= x26 x27) (not (or (and (= x26 y26) (= y26 x27)) (and (= x26 z26) (= z26 x27))))) :rule reordering :premises (t309))
(step t311 (cl (= x26 x27)) :rule resolution :premises (t310 t306))
(step t312 (cl (not (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) :rule equiv_pos2)
(step t313 (cl (= (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true) (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))))) :rule equiv_simplify)
(step t314 (cl (not (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)) (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) :rule equiv1 :premises (t313))
(step t315 (cl (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)) :rule hole :args ("11" (= (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) true)))
(step t316 (cl (= (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))))) :rule resolution :premises (t314 t315))
(step t317 (cl (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) :rule and :premises (a0) :args (27))
(step t318 (cl (and (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28)))) :rule resolution :premises (t312 t316 t317))
(step t319 (cl (=> (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))) (= x27 x28))) :rule and :premises (t318) :args (1))
(step t320 (cl (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28)))) (= x27 x28)) :rule implies :premises (t319))
(step t321 (cl (= x27 x28) (not (or (and (= x27 y27) (= y27 x28)) (and (= x27 z27) (= z27 x28))))) :rule reordering :premises (t320))
(step t322 (cl (= x27 x28)) :rule resolution :premises (t321 t317))
(step t323 (cl (not (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) :rule equiv_pos2)
(step t324 (cl (= (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true) (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))))) :rule equiv_simplify)
(step t325 (cl (not (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)) (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) :rule equiv1 :premises (t324))
(step t326 (cl (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)) :rule hole :args ("11" (= (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) true)))
(step t327 (cl (= (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))))) :rule resolution :premises (t325 t326))
(step t328 (cl (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) :rule and :premises (a0) :args (28))
(step t329 (cl (and (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29)))) :rule resolution :premises (t323 t327 t328))
(step t330 (cl (=> (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))) (= x28 x29))) :rule and :premises (t329) :args (1))
(step t331 (cl (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29)))) (= x28 x29)) :rule implies :premises (t330))
(step t332 (cl (= x28 x29) (not (or (and (= x28 y28) (= y28 x29)) (and (= x28 z28) (= z28 x29))))) :rule reordering :premises (t331))
(step t333 (cl (= x28 x29)) :rule resolution :premises (t332 t328))
(step t334 (cl (not (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) :rule equiv_pos2)
(step t335 (cl (= (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true) (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))))) :rule equiv_simplify)
(step t336 (cl (not (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)) (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) :rule equiv1 :premises (t335))
(step t337 (cl (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)) :rule hole :args ("11" (= (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) true)))
(step t338 (cl (= (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))))) :rule resolution :premises (t336 t337))
(step t339 (cl (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) :rule and :premises (a0) :args (29))
(step t340 (cl (and (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30)))) :rule resolution :premises (t334 t338 t339))
(step t341 (cl (=> (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))) (= x29 x30))) :rule and :premises (t340) :args (1))
(step t342 (cl (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30)))) (= x29 x30)) :rule implies :premises (t341))
(step t343 (cl (= x29 x30) (not (or (and (= x29 y29) (= y29 x30)) (and (= x29 z29) (= z29 x30))))) :rule reordering :premises (t342))
(step t344 (cl (= x29 x30)) :rule resolution :premises (t343 t339))
(step t345 (cl (not (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) :rule equiv_pos2)
(step t346 (cl (= (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true) (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))))) :rule equiv_simplify)
(step t347 (cl (not (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)) (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) :rule equiv1 :premises (t346))
(step t348 (cl (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)) :rule hole :args ("11" (= (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) true)))
(step t349 (cl (= (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))))) :rule resolution :premises (t347 t348))
(step t350 (cl (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) :rule and :premises (a0) :args (30))
(step t351 (cl (and (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31)))) :rule resolution :premises (t345 t349 t350))
(step t352 (cl (=> (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))) (= x30 x31))) :rule and :premises (t351) :args (1))
(step t353 (cl (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31)))) (= x30 x31)) :rule implies :premises (t352))
(step t354 (cl (= x30 x31) (not (or (and (= x30 y30) (= y30 x31)) (and (= x30 z30) (= z30 x31))))) :rule reordering :premises (t353))
(step t355 (cl (= x30 x31)) :rule resolution :premises (t354 t350))
(step t356 (cl (not (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) :rule equiv_pos2)
(step t357 (cl (= (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true) (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))))) :rule equiv_simplify)
(step t358 (cl (not (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)) (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) :rule equiv1 :premises (t357))
(step t359 (cl (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)) :rule hole :args ("11" (= (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) true)))
(step t360 (cl (= (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))))) :rule resolution :premises (t358 t359))
(step t361 (cl (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) :rule and :premises (a0) :args (31))
(step t362 (cl (and (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32)))) :rule resolution :premises (t356 t360 t361))
(step t363 (cl (=> (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))) (= x31 x32))) :rule and :premises (t362) :args (1))
(step t364 (cl (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32)))) (= x31 x32)) :rule implies :premises (t363))
(step t365 (cl (= x31 x32) (not (or (and (= x31 y31) (= y31 x32)) (and (= x31 z31) (= z31 x32))))) :rule reordering :premises (t364))
(step t366 (cl (= x31 x32)) :rule resolution :premises (t365 t361))
(step t367 (cl (not (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) :rule equiv_pos2)
(step t368 (cl (= (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true) (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))))) :rule equiv_simplify)
(step t369 (cl (not (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)) (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) :rule equiv1 :premises (t368))
(step t370 (cl (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)) :rule hole :args ("11" (= (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) true)))
(step t371 (cl (= (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))))) :rule resolution :premises (t369 t370))
(step t372 (cl (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) :rule and :premises (a0) :args (32))
(step t373 (cl (and (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33)))) :rule resolution :premises (t367 t371 t372))
(step t374 (cl (=> (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))) (= x32 x33))) :rule and :premises (t373) :args (1))
(step t375 (cl (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33)))) (= x32 x33)) :rule implies :premises (t374))
(step t376 (cl (= x32 x33) (not (or (and (= x32 y32) (= y32 x33)) (and (= x32 z32) (= z32 x33))))) :rule reordering :premises (t375))
(step t377 (cl (= x32 x33)) :rule resolution :premises (t376 t372))
(step t378 (cl (not (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) :rule equiv_pos2)
(step t379 (cl (= (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true) (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))))) :rule equiv_simplify)
(step t380 (cl (not (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)) (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) :rule equiv1 :premises (t379))
(step t381 (cl (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)) :rule hole :args ("11" (= (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) true)))
(step t382 (cl (= (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))))) :rule resolution :premises (t380 t381))
(step t383 (cl (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) :rule and :premises (a0) :args (33))
(step t384 (cl (and (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34)))) :rule resolution :premises (t378 t382 t383))
(step t385 (cl (=> (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))) (= x33 x34))) :rule and :premises (t384) :args (1))
(step t386 (cl (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34)))) (= x33 x34)) :rule implies :premises (t385))
(step t387 (cl (= x33 x34) (not (or (and (= x33 y33) (= y33 x34)) (and (= x33 z33) (= z33 x34))))) :rule reordering :premises (t386))
(step t388 (cl (= x33 x34)) :rule resolution :premises (t387 t383))
(step t389 (cl (not (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) :rule equiv_pos2)
(step t390 (cl (= (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true) (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))))) :rule equiv_simplify)
(step t391 (cl (not (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)) (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) :rule equiv1 :premises (t390))
(step t392 (cl (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)) :rule hole :args ("11" (= (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) true)))
(step t393 (cl (= (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))))) :rule resolution :premises (t391 t392))
(step t394 (cl (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) :rule and :premises (a0) :args (34))
(step t395 (cl (and (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35)))) :rule resolution :premises (t389 t393 t394))
(step t396 (cl (=> (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))) (= x34 x35))) :rule and :premises (t395) :args (1))
(step t397 (cl (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35)))) (= x34 x35)) :rule implies :premises (t396))
(step t398 (cl (= x34 x35) (not (or (and (= x34 y34) (= y34 x35)) (and (= x34 z34) (= z34 x35))))) :rule reordering :premises (t397))
(step t399 (cl (= x34 x35)) :rule resolution :premises (t398 t394))
(step t400 (cl (not (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) :rule equiv_pos2)
(step t401 (cl (= (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true) (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))))) :rule equiv_simplify)
(step t402 (cl (not (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)) (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) :rule equiv1 :premises (t401))
(step t403 (cl (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)) :rule hole :args ("11" (= (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) true)))
(step t404 (cl (= (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))))) :rule resolution :premises (t402 t403))
(step t405 (cl (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) :rule and :premises (a0) :args (35))
(step t406 (cl (and (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36)))) :rule resolution :premises (t400 t404 t405))
(step t407 (cl (=> (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))) (= x35 x36))) :rule and :premises (t406) :args (1))
(step t408 (cl (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36)))) (= x35 x36)) :rule implies :premises (t407))
(step t409 (cl (= x35 x36) (not (or (and (= x35 y35) (= y35 x36)) (and (= x35 z35) (= z35 x36))))) :rule reordering :premises (t408))
(step t410 (cl (= x35 x36)) :rule resolution :premises (t409 t405))
(step t411 (cl (not (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) :rule equiv_pos2)
(step t412 (cl (= (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true) (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))))) :rule equiv_simplify)
(step t413 (cl (not (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)) (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) :rule equiv1 :premises (t412))
(step t414 (cl (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)) :rule hole :args ("11" (= (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) true)))
(step t415 (cl (= (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))))) :rule resolution :premises (t413 t414))
(step t416 (cl (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) :rule and :premises (a0) :args (36))
(step t417 (cl (and (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37)))) :rule resolution :premises (t411 t415 t416))
(step t418 (cl (=> (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))) (= x36 x37))) :rule and :premises (t417) :args (1))
(step t419 (cl (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37)))) (= x36 x37)) :rule implies :premises (t418))
(step t420 (cl (= x36 x37) (not (or (and (= x36 y36) (= y36 x37)) (and (= x36 z36) (= z36 x37))))) :rule reordering :premises (t419))
(step t421 (cl (= x36 x37)) :rule resolution :premises (t420 t416))
(step t422 (cl (not (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) :rule equiv_pos2)
(step t423 (cl (= (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true) (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))))) :rule equiv_simplify)
(step t424 (cl (not (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)) (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) :rule equiv1 :premises (t423))
(step t425 (cl (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)) :rule hole :args ("11" (= (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) true)))
(step t426 (cl (= (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))))) :rule resolution :premises (t424 t425))
(step t427 (cl (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) :rule and :premises (a0) :args (37))
(step t428 (cl (and (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38)))) :rule resolution :premises (t422 t426 t427))
(step t429 (cl (=> (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))) (= x37 x38))) :rule and :premises (t428) :args (1))
(step t430 (cl (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38)))) (= x37 x38)) :rule implies :premises (t429))
(step t431 (cl (= x37 x38) (not (or (and (= x37 y37) (= y37 x38)) (and (= x37 z37) (= z37 x38))))) :rule reordering :premises (t430))
(step t432 (cl (= x37 x38)) :rule resolution :premises (t431 t427))
(step t433 (cl (not (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) :rule equiv_pos2)
(step t434 (cl (= (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true) (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))))) :rule equiv_simplify)
(step t435 (cl (not (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)) (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) :rule equiv1 :premises (t434))
(step t436 (cl (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)) :rule hole :args ("11" (= (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) true)))
(step t437 (cl (= (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))))) :rule resolution :premises (t435 t436))
(step t438 (cl (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) :rule and :premises (a0) :args (38))
(step t439 (cl (and (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39)))) :rule resolution :premises (t433 t437 t438))
(step t440 (cl (=> (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))) (= x38 x39))) :rule and :premises (t439) :args (1))
(step t441 (cl (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39)))) (= x38 x39)) :rule implies :premises (t440))
(step t442 (cl (= x38 x39) (not (or (and (= x38 y38) (= y38 x39)) (and (= x38 z38) (= z38 x39))))) :rule reordering :premises (t441))
(step t443 (cl (= x38 x39)) :rule resolution :premises (t442 t438))
(step t444 (cl (not (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) :rule equiv_pos2)
(step t445 (cl (= (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true) (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))))) :rule equiv_simplify)
(step t446 (cl (not (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)) (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) :rule equiv1 :premises (t445))
(step t447 (cl (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)) :rule hole :args ("11" (= (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) true)))
(step t448 (cl (= (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))))) :rule resolution :premises (t446 t447))
(step t449 (cl (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) :rule and :premises (a0) :args (39))
(step t450 (cl (and (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40)))) :rule resolution :premises (t444 t448 t449))
(step t451 (cl (=> (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))) (= x39 x40))) :rule and :premises (t450) :args (1))
(step t452 (cl (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40)))) (= x39 x40)) :rule implies :premises (t451))
(step t453 (cl (= x39 x40) (not (or (and (= x39 y39) (= y39 x40)) (and (= x39 z39) (= z39 x40))))) :rule reordering :premises (t452))
(step t454 (cl (= x39 x40)) :rule resolution :premises (t453 t449))
(step t455 (cl (not (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) :rule equiv_pos2)
(step t456 (cl (= (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true) (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))))) :rule equiv_simplify)
(step t457 (cl (not (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)) (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) :rule equiv1 :premises (t456))
(step t458 (cl (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)) :rule hole :args ("11" (= (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) true)))
(step t459 (cl (= (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))))) :rule resolution :premises (t457 t458))
(step t460 (cl (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) :rule and :premises (a0) :args (40))
(step t461 (cl (and (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41)))) :rule resolution :premises (t455 t459 t460))
(step t462 (cl (=> (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))) (= x40 x41))) :rule and :premises (t461) :args (1))
(step t463 (cl (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41)))) (= x40 x41)) :rule implies :premises (t462))
(step t464 (cl (= x40 x41) (not (or (and (= x40 y40) (= y40 x41)) (and (= x40 z40) (= z40 x41))))) :rule reordering :premises (t463))
(step t465 (cl (= x40 x41)) :rule resolution :premises (t464 t460))
(step t466 (cl (not (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) :rule equiv_pos2)
(step t467 (cl (= (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true) (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))))) :rule equiv_simplify)
(step t468 (cl (not (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)) (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) :rule equiv1 :premises (t467))
(step t469 (cl (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)) :rule hole :args ("11" (= (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) true)))
(step t470 (cl (= (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))))) :rule resolution :premises (t468 t469))
(step t471 (cl (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) :rule and :premises (a0) :args (41))
(step t472 (cl (and (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42)))) :rule resolution :premises (t466 t470 t471))
(step t473 (cl (=> (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))) (= x41 x42))) :rule and :premises (t472) :args (1))
(step t474 (cl (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42)))) (= x41 x42)) :rule implies :premises (t473))
(step t475 (cl (= x41 x42) (not (or (and (= x41 y41) (= y41 x42)) (and (= x41 z41) (= z41 x42))))) :rule reordering :premises (t474))
(step t476 (cl (= x41 x42)) :rule resolution :premises (t475 t471))
(step t477 (cl (not (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) :rule equiv_pos2)
(step t478 (cl (= (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true) (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))))) :rule equiv_simplify)
(step t479 (cl (not (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)) (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) :rule equiv1 :premises (t478))
(step t480 (cl (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)) :rule hole :args ("11" (= (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) true)))
(step t481 (cl (= (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))))) :rule resolution :premises (t479 t480))
(step t482 (cl (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) :rule and :premises (a0) :args (42))
(step t483 (cl (and (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43)))) :rule resolution :premises (t477 t481 t482))
(step t484 (cl (=> (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))) (= x42 x43))) :rule and :premises (t483) :args (1))
(step t485 (cl (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43)))) (= x42 x43)) :rule implies :premises (t484))
(step t486 (cl (= x42 x43) (not (or (and (= x42 y42) (= y42 x43)) (and (= x42 z42) (= z42 x43))))) :rule reordering :premises (t485))
(step t487 (cl (= x42 x43)) :rule resolution :premises (t486 t482))
(step t488 (cl (not (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) :rule equiv_pos2)
(step t489 (cl (= (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true) (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))))) :rule equiv_simplify)
(step t490 (cl (not (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)) (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) :rule equiv1 :premises (t489))
(step t491 (cl (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)) :rule hole :args ("11" (= (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) true)))
(step t492 (cl (= (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))))) :rule resolution :premises (t490 t491))
(step t493 (cl (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) :rule and :premises (a0) :args (43))
(step t494 (cl (and (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44)))) :rule resolution :premises (t488 t492 t493))
(step t495 (cl (=> (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))) (= x43 x44))) :rule and :premises (t494) :args (1))
(step t496 (cl (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44)))) (= x43 x44)) :rule implies :premises (t495))
(step t497 (cl (= x43 x44) (not (or (and (= x43 y43) (= y43 x44)) (and (= x43 z43) (= z43 x44))))) :rule reordering :premises (t496))
(step t498 (cl (= x43 x44)) :rule resolution :premises (t497 t493))
(step t499 (cl (not (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) :rule equiv_pos2)
(step t500 (cl (= (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true) (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))))) :rule equiv_simplify)
(step t501 (cl (not (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)) (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) :rule equiv1 :premises (t500))
(step t502 (cl (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)) :rule hole :args ("11" (= (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) true)))
(step t503 (cl (= (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))))) :rule resolution :premises (t501 t502))
(step t504 (cl (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) :rule and :premises (a0) :args (44))
(step t505 (cl (and (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45)))) :rule resolution :premises (t499 t503 t504))
(step t506 (cl (=> (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))) (= x44 x45))) :rule and :premises (t505) :args (1))
(step t507 (cl (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45)))) (= x44 x45)) :rule implies :premises (t506))
(step t508 (cl (= x44 x45) (not (or (and (= x44 y44) (= y44 x45)) (and (= x44 z44) (= z44 x45))))) :rule reordering :premises (t507))
(step t509 (cl (= x44 x45)) :rule resolution :premises (t508 t504))
(step t510 (cl (not (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) :rule equiv_pos2)
(step t511 (cl (= (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true) (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))))) :rule equiv_simplify)
(step t512 (cl (not (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)) (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) :rule equiv1 :premises (t511))
(step t513 (cl (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)) :rule hole :args ("11" (= (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) true)))
(step t514 (cl (= (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))))) :rule resolution :premises (t512 t513))
(step t515 (cl (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) :rule and :premises (a0) :args (45))
(step t516 (cl (and (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46)))) :rule resolution :premises (t510 t514 t515))
(step t517 (cl (=> (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))) (= x45 x46))) :rule and :premises (t516) :args (1))
(step t518 (cl (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46)))) (= x45 x46)) :rule implies :premises (t517))
(step t519 (cl (= x45 x46) (not (or (and (= x45 y45) (= y45 x46)) (and (= x45 z45) (= z45 x46))))) :rule reordering :premises (t518))
(step t520 (cl (= x45 x46)) :rule resolution :premises (t519 t515))
(step t521 (cl (not (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) :rule equiv_pos2)
(step t522 (cl (= (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true) (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))))) :rule equiv_simplify)
(step t523 (cl (not (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)) (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) :rule equiv1 :premises (t522))
(step t524 (cl (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)) :rule hole :args ("11" (= (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) true)))
(step t525 (cl (= (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))))) :rule resolution :premises (t523 t524))
(step t526 (cl (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) :rule and :premises (a0) :args (46))
(step t527 (cl (and (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47)))) :rule resolution :premises (t521 t525 t526))
(step t528 (cl (=> (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))) (= x46 x47))) :rule and :premises (t527) :args (1))
(step t529 (cl (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47)))) (= x46 x47)) :rule implies :premises (t528))
(step t530 (cl (= x46 x47) (not (or (and (= x46 y46) (= y46 x47)) (and (= x46 z46) (= z46 x47))))) :rule reordering :premises (t529))
(step t531 (cl (= x46 x47)) :rule resolution :premises (t530 t526))
(step t532 (cl (not (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) :rule equiv_pos2)
(step t533 (cl (= (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true) (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))))) :rule equiv_simplify)
(step t534 (cl (not (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)) (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) :rule equiv1 :premises (t533))
(step t535 (cl (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)) :rule hole :args ("11" (= (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) true)))
(step t536 (cl (= (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))))) :rule resolution :premises (t534 t535))
(step t537 (cl (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) :rule and :premises (a0) :args (47))
(step t538 (cl (and (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48)))) :rule resolution :premises (t532 t536 t537))
(step t539 (cl (=> (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))) (= x47 x48))) :rule and :premises (t538) :args (1))
(step t540 (cl (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48)))) (= x47 x48)) :rule implies :premises (t539))
(step t541 (cl (= x47 x48) (not (or (and (= x47 y47) (= y47 x48)) (and (= x47 z47) (= z47 x48))))) :rule reordering :premises (t540))
(step t542 (cl (= x47 x48)) :rule resolution :premises (t541 t537))
(step t543 (cl (not (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) :rule equiv_pos2)
(step t544 (cl (= (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true) (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))))) :rule equiv_simplify)
(step t545 (cl (not (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)) (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) :rule equiv1 :premises (t544))
(step t546 (cl (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)) :rule hole :args ("11" (= (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) true)))
(step t547 (cl (= (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))))) :rule resolution :premises (t545 t546))
(step t548 (cl (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) :rule and :premises (a0) :args (48))
(step t549 (cl (and (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49)))) :rule resolution :premises (t543 t547 t548))
(step t550 (cl (=> (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))) (= x48 x49))) :rule and :premises (t549) :args (1))
(step t551 (cl (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49)))) (= x48 x49)) :rule implies :premises (t550))
(step t552 (cl (= x48 x49) (not (or (and (= x48 y48) (= y48 x49)) (and (= x48 z48) (= z48 x49))))) :rule reordering :premises (t551))
(step t553 (cl (= x48 x49)) :rule resolution :premises (t552 t548))
(step t554 (cl (not (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) :rule equiv_pos2)
(step t555 (cl (= (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true) (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))))) :rule equiv_simplify)
(step t556 (cl (not (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)) (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) :rule equiv1 :premises (t555))
(step t557 (cl (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)) :rule hole :args ("11" (= (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) true)))
(step t558 (cl (= (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))))) :rule resolution :premises (t556 t557))
(step t559 (cl (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) :rule and :premises (a0) :args (49))
(step t560 (cl (and (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50)))) :rule resolution :premises (t554 t558 t559))
(step t561 (cl (=> (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))) (= x49 x50))) :rule and :premises (t560) :args (1))
(step t562 (cl (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50)))) (= x49 x50)) :rule implies :premises (t561))
(step t563 (cl (= x49 x50) (not (or (and (= x49 y49) (= y49 x50)) (and (= x49 z49) (= z49 x50))))) :rule reordering :premises (t562))
(step t564 (cl (= x49 x50)) :rule resolution :premises (t563 t559))
(step t565 (cl (not (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) :rule equiv_pos2)
(step t566 (cl (= (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true) (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))))) :rule equiv_simplify)
(step t567 (cl (not (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)) (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) :rule equiv1 :premises (t566))
(step t568 (cl (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)) :rule hole :args ("11" (= (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) true)))
(step t569 (cl (= (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))))) :rule resolution :premises (t567 t568))
(step t570 (cl (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) :rule and :premises (a0) :args (50))
(step t571 (cl (and (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51)))) :rule resolution :premises (t565 t569 t570))
(step t572 (cl (=> (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))) (= x50 x51))) :rule and :premises (t571) :args (1))
(step t573 (cl (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51)))) (= x50 x51)) :rule implies :premises (t572))
(step t574 (cl (= x50 x51) (not (or (and (= x50 y50) (= y50 x51)) (and (= x50 z50) (= z50 x51))))) :rule reordering :premises (t573))
(step t575 (cl (= x50 x51)) :rule resolution :premises (t574 t570))
(step t576 (cl (not (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))))) (not (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52)))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) :rule equiv_pos2)
(step t577 (cl (= (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true) (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))))) :rule equiv_simplify)
(step t578 (cl (not (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true)) (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))))) :rule equiv1 :premises (t577))
(step t579 (cl (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true)) :rule hole :args ("11" (= (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) true)))
(step t580 (cl (= (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))))) :rule resolution :premises (t578 t579))
(step t581 (cl (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52)))) :rule and :premises (a0) :args (51))
(step t582 (cl (and (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52)))) :rule resolution :premises (t576 t580 t581))
(step t583 (cl (=> (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))) (= x51 x52))) :rule and :premises (t582) :args (1))
(step t584 (cl (not (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52)))) (= x51 x52)) :rule implies :premises (t583))
(step t585 (cl (= x51 x52) (not (or (and (= x51 y51) (= y51 x52)) (and (= x51 z51) (= z51 x52))))) :rule reordering :premises (t584))
(step t586 (cl (= x51 x52)) :rule resolution :premises (t585 t581))
(step t587 (cl (not (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))))) (not (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53)))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) :rule equiv_pos2)
(step t588 (cl (= (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true) (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))))) :rule equiv_simplify)
(step t589 (cl (not (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true)) (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))))) :rule equiv1 :premises (t588))
(step t590 (cl (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true)) :rule hole :args ("11" (= (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) true)))
(step t591 (cl (= (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))))) :rule resolution :premises (t589 t590))
(step t592 (cl (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53)))) :rule and :premises (a0) :args (52))
(step t593 (cl (and (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53)))) :rule resolution :premises (t587 t591 t592))
(step t594 (cl (=> (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))) (= x52 x53))) :rule and :premises (t593) :args (1))
(step t595 (cl (not (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53)))) (= x52 x53)) :rule implies :premises (t594))
(step t596 (cl (= x52 x53) (not (or (and (= x52 y52) (= y52 x53)) (and (= x52 z52) (= z52 x53))))) :rule reordering :premises (t595))
(step t597 (cl (= x52 x53)) :rule resolution :premises (t596 t592))
(step t598 (cl (not (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))))) (not (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54)))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) :rule equiv_pos2)
(step t599 (cl (= (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true) (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))))) :rule equiv_simplify)
(step t600 (cl (not (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true)) (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))))) :rule equiv1 :premises (t599))
(step t601 (cl (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true)) :rule hole :args ("11" (= (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) true)))
(step t602 (cl (= (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))))) :rule resolution :premises (t600 t601))
(step t603 (cl (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54)))) :rule and :premises (a0) :args (53))
(step t604 (cl (and (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54)))) :rule resolution :premises (t598 t602 t603))
(step t605 (cl (=> (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))) (= x53 x54))) :rule and :premises (t604) :args (1))
(step t606 (cl (not (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54)))) (= x53 x54)) :rule implies :premises (t605))
(step t607 (cl (= x53 x54) (not (or (and (= x53 y53) (= y53 x54)) (and (= x53 z53) (= z53 x54))))) :rule reordering :premises (t606))
(step t608 (cl (= x53 x54)) :rule resolution :premises (t607 t603))
(step t609 (cl (not (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))))) (not (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55)))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) :rule equiv_pos2)
(step t610 (cl (= (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true) (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))))) :rule equiv_simplify)
(step t611 (cl (not (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true)) (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))))) :rule equiv1 :premises (t610))
(step t612 (cl (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true)) :rule hole :args ("11" (= (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) true)))
(step t613 (cl (= (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))))) :rule resolution :premises (t611 t612))
(step t614 (cl (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55)))) :rule and :premises (a0) :args (54))
(step t615 (cl (and (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55)))) :rule resolution :premises (t609 t613 t614))
(step t616 (cl (=> (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))) (= x54 x55))) :rule and :premises (t615) :args (1))
(step t617 (cl (not (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55)))) (= x54 x55)) :rule implies :premises (t616))
(step t618 (cl (= x54 x55) (not (or (and (= x54 y54) (= y54 x55)) (and (= x54 z54) (= z54 x55))))) :rule reordering :premises (t617))
(step t619 (cl (= x54 x55)) :rule resolution :premises (t618 t614))
(step t620 (cl (not (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))))) (not (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56)))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) :rule equiv_pos2)
(step t621 (cl (= (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true) (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))))) :rule equiv_simplify)
(step t622 (cl (not (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true)) (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))))) :rule equiv1 :premises (t621))
(step t623 (cl (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true)) :rule hole :args ("11" (= (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) true)))
(step t624 (cl (= (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))))) :rule resolution :premises (t622 t623))
(step t625 (cl (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56)))) :rule and :premises (a0) :args (55))
(step t626 (cl (and (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56)))) :rule resolution :premises (t620 t624 t625))
(step t627 (cl (=> (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))) (= x55 x56))) :rule and :premises (t626) :args (1))
(step t628 (cl (not (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56)))) (= x55 x56)) :rule implies :premises (t627))
(step t629 (cl (= x55 x56) (not (or (and (= x55 y55) (= y55 x56)) (and (= x55 z55) (= z55 x56))))) :rule reordering :premises (t628))
(step t630 (cl (= x55 x56)) :rule resolution :premises (t629 t625))
(step t631 (cl (not (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))))) (not (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57)))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) :rule equiv_pos2)
(step t632 (cl (= (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true) (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))))) :rule equiv_simplify)
(step t633 (cl (not (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true)) (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))))) :rule equiv1 :premises (t632))
(step t634 (cl (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true)) :rule hole :args ("11" (= (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) true)))
(step t635 (cl (= (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))))) :rule resolution :premises (t633 t634))
(step t636 (cl (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57)))) :rule and :premises (a0) :args (56))
(step t637 (cl (and (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57)))) :rule resolution :premises (t631 t635 t636))
(step t638 (cl (=> (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))) (= x56 x57))) :rule and :premises (t637) :args (1))
(step t639 (cl (not (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57)))) (= x56 x57)) :rule implies :premises (t638))
(step t640 (cl (= x56 x57) (not (or (and (= x56 y56) (= y56 x57)) (and (= x56 z56) (= z56 x57))))) :rule reordering :premises (t639))
(step t641 (cl (= x56 x57)) :rule resolution :premises (t640 t636))
(step t642 (cl (not (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))))) (not (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58)))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) :rule equiv_pos2)
(step t643 (cl (= (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true) (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))))) :rule equiv_simplify)
(step t644 (cl (not (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true)) (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))))) :rule equiv1 :premises (t643))
(step t645 (cl (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true)) :rule hole :args ("11" (= (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) true)))
(step t646 (cl (= (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))))) :rule resolution :premises (t644 t645))
(step t647 (cl (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58)))) :rule and :premises (a0) :args (57))
(step t648 (cl (and (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58)))) :rule resolution :premises (t642 t646 t647))
(step t649 (cl (=> (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))) (= x57 x58))) :rule and :premises (t648) :args (1))
(step t650 (cl (not (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58)))) (= x57 x58)) :rule implies :premises (t649))
(step t651 (cl (= x57 x58) (not (or (and (= x57 y57) (= y57 x58)) (and (= x57 z57) (= z57 x58))))) :rule reordering :premises (t650))
(step t652 (cl (= x57 x58)) :rule resolution :premises (t651 t647))
(step t653 (cl (not (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59))))) (not (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59)))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59)))) :rule equiv_pos2)
(step t654 (cl (= (= (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59)))) true) (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59)))))) :rule equiv_simplify)
(step t655 (cl (not (= (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59)))) true)) (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59))))) :rule equiv1 :premises (t654))
(step t656 (cl (= (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59)))) true)) :rule hole :args ("11" (= (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59)))) true)))
(step t657 (cl (= (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59))))) :rule resolution :premises (t655 t656))
(step t658 (cl (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59)))) :rule and :premises (a0) :args (58))
(step t659 (cl (and (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59)))) :rule resolution :premises (t653 t657 t658))
(step t660 (cl (=> (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))) (= x58 x59))) :rule and :premises (t659) :args (1))
(step t661 (cl (not (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59)))) (= x58 x59)) :rule implies :premises (t660))
(step t662 (cl (= x58 x59) (not (or (and (= x58 y58) (= y58 x59)) (and (= x58 z58) (= z58 x59))))) :rule reordering :premises (t661))
(step t663 (cl (= x58 x59)) :rule resolution :premises (t662 t658))
(step t664 (cl (not (= (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (and (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (=> (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (= x59 x60))))) (not (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60)))) (and (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (=> (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (= x59 x60)))) :rule equiv_pos2)
(step t665 (cl (= (= (= (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (and (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (=> (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (= x59 x60)))) true) (= (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (and (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (=> (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (= x59 x60)))))) :rule equiv_simplify)
(step t666 (cl (not (= (= (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (and (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (=> (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (= x59 x60)))) true)) (= (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (and (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (=> (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (= x59 x60))))) :rule equiv1 :premises (t665))
(step t667 (cl (= (= (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (and (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (=> (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (= x59 x60)))) true)) :rule hole :args ("11" (= (= (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (and (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (=> (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (= x59 x60)))) true)))
(step t668 (cl (= (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (and (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (=> (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (= x59 x60))))) :rule resolution :premises (t666 t667))
(step t669 (cl (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60)))) :rule and :premises (a0) :args (59))
(step t670 (cl (and (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (=> (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (= x59 x60)))) :rule resolution :premises (t664 t668 t669))
(step t671 (cl (=> (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))) (= x59 x60))) :rule and :premises (t670) :args (1))
(step t672 (cl (not (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60)))) (= x59 x60)) :rule implies :premises (t671))
(step t673 (cl (= x59 x60) (not (or (and (= x59 y59) (= y59 x60)) (and (= x59 z59) (= z59 x60))))) :rule reordering :premises (t672))
(step t674 (cl (= x59 x60)) :rule resolution :premises (t673 t669))
(step t675 (cl (not (= (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (and (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (=> (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (= x60 x61))))) (not (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61)))) (and (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (=> (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (= x60 x61)))) :rule equiv_pos2)
(step t676 (cl (= (= (= (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (and (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (=> (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (= x60 x61)))) true) (= (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (and (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (=> (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (= x60 x61)))))) :rule equiv_simplify)
(step t677 (cl (not (= (= (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (and (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (=> (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (= x60 x61)))) true)) (= (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (and (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (=> (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (= x60 x61))))) :rule equiv1 :premises (t676))
(step t678 (cl (= (= (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (and (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (=> (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (= x60 x61)))) true)) :rule hole :args ("11" (= (= (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (and (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (=> (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (= x60 x61)))) true)))
(step t679 (cl (= (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (and (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (=> (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (= x60 x61))))) :rule resolution :premises (t677 t678))
(step t680 (cl (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61)))) :rule and :premises (a0) :args (60))
(step t681 (cl (and (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (=> (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (= x60 x61)))) :rule resolution :premises (t675 t679 t680))
(step t682 (cl (=> (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))) (= x60 x61))) :rule and :premises (t681) :args (1))
(step t683 (cl (not (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61)))) (= x60 x61)) :rule implies :premises (t682))
(step t684 (cl (= x60 x61) (not (or (and (= x60 y60) (= y60 x61)) (and (= x60 z60) (= z60 x61))))) :rule reordering :premises (t683))
(step t685 (cl (= x60 x61)) :rule resolution :premises (t684 t680))
(step t686 (cl (not (= (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (and (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (=> (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (= x61 x62))))) (not (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62)))) (and (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (=> (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (= x61 x62)))) :rule equiv_pos2)
(step t687 (cl (= (= (= (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (and (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (=> (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (= x61 x62)))) true) (= (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (and (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (=> (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (= x61 x62)))))) :rule equiv_simplify)
(step t688 (cl (not (= (= (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (and (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (=> (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (= x61 x62)))) true)) (= (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (and (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (=> (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (= x61 x62))))) :rule equiv1 :premises (t687))
(step t689 (cl (= (= (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (and (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (=> (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (= x61 x62)))) true)) :rule hole :args ("11" (= (= (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (and (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (=> (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (= x61 x62)))) true)))
(step t690 (cl (= (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (and (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (=> (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (= x61 x62))))) :rule resolution :premises (t688 t689))
(step t691 (cl (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62)))) :rule and :premises (a0) :args (61))
(step t692 (cl (and (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (=> (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (= x61 x62)))) :rule resolution :premises (t686 t690 t691))
(step t693 (cl (=> (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))) (= x61 x62))) :rule and :premises (t692) :args (1))
(step t694 (cl (not (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62)))) (= x61 x62)) :rule implies :premises (t693))
(step t695 (cl (= x61 x62) (not (or (and (= x61 y61) (= y61 x62)) (and (= x61 z61) (= z61 x62))))) :rule reordering :premises (t694))
(step t696 (cl (= x61 x62)) :rule resolution :premises (t695 t691))
(step t697 (cl (not (= (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (and (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (=> (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (= x62 x63))))) (not (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63)))) (and (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (=> (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (= x62 x63)))) :rule equiv_pos2)
(step t698 (cl (= (= (= (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (and (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (=> (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (= x62 x63)))) true) (= (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (and (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (=> (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (= x62 x63)))))) :rule equiv_simplify)
(step t699 (cl (not (= (= (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (and (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (=> (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (= x62 x63)))) true)) (= (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (and (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (=> (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (= x62 x63))))) :rule equiv1 :premises (t698))
(step t700 (cl (= (= (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (and (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (=> (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (= x62 x63)))) true)) :rule hole :args ("11" (= (= (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (and (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (=> (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (= x62 x63)))) true)))
(step t701 (cl (= (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (and (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (=> (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (= x62 x63))))) :rule resolution :premises (t699 t700))
(step t702 (cl (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63)))) :rule and :premises (a0) :args (62))
(step t703 (cl (and (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (=> (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (= x62 x63)))) :rule resolution :premises (t697 t701 t702))
(step t704 (cl (=> (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))) (= x62 x63))) :rule and :premises (t703) :args (1))
(step t705 (cl (not (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63)))) (= x62 x63)) :rule implies :premises (t704))
(step t706 (cl (= x62 x63) (not (or (and (= x62 y62) (= y62 x63)) (and (= x62 z62) (= z62 x63))))) :rule reordering :premises (t705))
(step t707 (cl (= x62 x63)) :rule resolution :premises (t706 t702))
(step t708 (cl (not (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64))))) (not (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64)))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64)))) :rule equiv_pos2)
(step t709 (cl (= (= (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64)))) true) (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64)))))) :rule equiv_simplify)
(step t710 (cl (not (= (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64)))) true)) (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64))))) :rule equiv1 :premises (t709))
(step t711 (cl (= (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64)))) true)) :rule hole :args ("11" (= (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64)))) true)))
(step t712 (cl (= (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64))))) :rule resolution :premises (t710 t711))
(step t713 (cl (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64)))) :rule and :premises (a0) :args (63))
(step t714 (cl (and (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64)))) :rule resolution :premises (t708 t712 t713))
(step t715 (cl (=> (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))) (= x63 x64))) :rule and :premises (t714) :args (1))
(step t716 (cl (not (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64)))) (= x63 x64)) :rule implies :premises (t715))
(step t717 (cl (= x63 x64) (not (or (and (= x63 y63) (= y63 x64)) (and (= x63 z63) (= z63 x64))))) :rule reordering :premises (t716))
(step t718 (cl (= x63 x64)) :rule resolution :premises (t717 t713))
(step t719 (cl (not (= (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (and (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (=> (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (= x64 x65))))) (not (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65)))) (and (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (=> (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (= x64 x65)))) :rule equiv_pos2)
(step t720 (cl (= (= (= (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (and (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (=> (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (= x64 x65)))) true) (= (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (and (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (=> (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (= x64 x65)))))) :rule equiv_simplify)
(step t721 (cl (not (= (= (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (and (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (=> (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (= x64 x65)))) true)) (= (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (and (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (=> (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (= x64 x65))))) :rule equiv1 :premises (t720))
(step t722 (cl (= (= (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (and (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (=> (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (= x64 x65)))) true)) :rule hole :args ("11" (= (= (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (and (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (=> (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (= x64 x65)))) true)))
(step t723 (cl (= (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (and (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (=> (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (= x64 x65))))) :rule resolution :premises (t721 t722))
(step t724 (cl (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65)))) :rule and :premises (a0) :args (64))
(step t725 (cl (and (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (=> (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (= x64 x65)))) :rule resolution :premises (t719 t723 t724))
(step t726 (cl (=> (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))) (= x64 x65))) :rule and :premises (t725) :args (1))
(step t727 (cl (not (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65)))) (= x64 x65)) :rule implies :premises (t726))
(step t728 (cl (= x64 x65) (not (or (and (= x64 y64) (= y64 x65)) (and (= x64 z64) (= z64 x65))))) :rule reordering :premises (t727))
(step t729 (cl (= x64 x65)) :rule resolution :premises (t728 t724))
(step t730 (cl (not (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66))))) (not (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66)))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66)))) :rule equiv_pos2)
(step t731 (cl (= (= (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66)))) true) (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66)))))) :rule equiv_simplify)
(step t732 (cl (not (= (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66)))) true)) (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66))))) :rule equiv1 :premises (t731))
(step t733 (cl (= (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66)))) true)) :rule hole :args ("11" (= (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66)))) true)))
(step t734 (cl (= (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66))))) :rule resolution :premises (t732 t733))
(step t735 (cl (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66)))) :rule and :premises (a0) :args (65))
(step t736 (cl (and (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66)))) :rule resolution :premises (t730 t734 t735))
(step t737 (cl (=> (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))) (= x65 x66))) :rule and :premises (t736) :args (1))
(step t738 (cl (not (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66)))) (= x65 x66)) :rule implies :premises (t737))
(step t739 (cl (= x65 x66) (not (or (and (= x65 y65) (= y65 x66)) (and (= x65 z65) (= z65 x66))))) :rule reordering :premises (t738))
(step t740 (cl (= x65 x66)) :rule resolution :premises (t739 t735))
(step t741 (cl (not (= (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (and (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (=> (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (= x66 x67))))) (not (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67)))) (and (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (=> (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (= x66 x67)))) :rule equiv_pos2)
(step t742 (cl (= (= (= (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (and (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (=> (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (= x66 x67)))) true) (= (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (and (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (=> (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (= x66 x67)))))) :rule equiv_simplify)
(step t743 (cl (not (= (= (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (and (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (=> (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (= x66 x67)))) true)) (= (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (and (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (=> (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (= x66 x67))))) :rule equiv1 :premises (t742))
(step t744 (cl (= (= (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (and (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (=> (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (= x66 x67)))) true)) :rule hole :args ("11" (= (= (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (and (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (=> (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (= x66 x67)))) true)))
(step t745 (cl (= (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (and (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (=> (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (= x66 x67))))) :rule resolution :premises (t743 t744))
(step t746 (cl (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67)))) :rule and :premises (a0) :args (66))
(step t747 (cl (and (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (=> (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (= x66 x67)))) :rule resolution :premises (t741 t745 t746))
(step t748 (cl (=> (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))) (= x66 x67))) :rule and :premises (t747) :args (1))
(step t749 (cl (not (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67)))) (= x66 x67)) :rule implies :premises (t748))
(step t750 (cl (= x66 x67) (not (or (and (= x66 y66) (= y66 x67)) (and (= x66 z66) (= z66 x67))))) :rule reordering :premises (t749))
(step t751 (cl (= x66 x67)) :rule resolution :premises (t750 t746))
(step t752 (cl (not (= (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (and (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (=> (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (= x67 x68))))) (not (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68)))) (and (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (=> (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (= x67 x68)))) :rule equiv_pos2)
(step t753 (cl (= (= (= (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (and (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (=> (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (= x67 x68)))) true) (= (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (and (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (=> (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (= x67 x68)))))) :rule equiv_simplify)
(step t754 (cl (not (= (= (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (and (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (=> (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (= x67 x68)))) true)) (= (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (and (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (=> (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (= x67 x68))))) :rule equiv1 :premises (t753))
(step t755 (cl (= (= (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (and (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (=> (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (= x67 x68)))) true)) :rule hole :args ("11" (= (= (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (and (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (=> (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (= x67 x68)))) true)))
(step t756 (cl (= (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (and (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (=> (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (= x67 x68))))) :rule resolution :premises (t754 t755))
(step t757 (cl (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68)))) :rule and :premises (a0) :args (67))
(step t758 (cl (and (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (=> (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (= x67 x68)))) :rule resolution :premises (t752 t756 t757))
(step t759 (cl (=> (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))) (= x67 x68))) :rule and :premises (t758) :args (1))
(step t760 (cl (not (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68)))) (= x67 x68)) :rule implies :premises (t759))
(step t761 (cl (= x67 x68) (not (or (and (= x67 y67) (= y67 x68)) (and (= x67 z67) (= z67 x68))))) :rule reordering :premises (t760))
(step t762 (cl (= x67 x68)) :rule resolution :premises (t761 t757))
(step t763 (cl (not (= (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (and (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (=> (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (= x68 x69))))) (not (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69)))) (and (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (=> (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (= x68 x69)))) :rule equiv_pos2)
(step t764 (cl (= (= (= (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (and (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (=> (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (= x68 x69)))) true) (= (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (and (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (=> (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (= x68 x69)))))) :rule equiv_simplify)
(step t765 (cl (not (= (= (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (and (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (=> (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (= x68 x69)))) true)) (= (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (and (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (=> (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (= x68 x69))))) :rule equiv1 :premises (t764))
(step t766 (cl (= (= (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (and (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (=> (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (= x68 x69)))) true)) :rule hole :args ("11" (= (= (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (and (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (=> (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (= x68 x69)))) true)))
(step t767 (cl (= (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (and (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (=> (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (= x68 x69))))) :rule resolution :premises (t765 t766))
(step t768 (cl (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69)))) :rule and :premises (a0) :args (68))
(step t769 (cl (and (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (=> (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (= x68 x69)))) :rule resolution :premises (t763 t767 t768))
(step t770 (cl (=> (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))) (= x68 x69))) :rule and :premises (t769) :args (1))
(step t771 (cl (not (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69)))) (= x68 x69)) :rule implies :premises (t770))
(step t772 (cl (= x68 x69) (not (or (and (= x68 y68) (= y68 x69)) (and (= x68 z68) (= z68 x69))))) :rule reordering :premises (t771))
(step t773 (cl (= x68 x69)) :rule resolution :premises (t772 t768))
(step t774 (cl (not (= (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (and (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (=> (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (= x69 x70))))) (not (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70)))) (and (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (=> (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (= x69 x70)))) :rule equiv_pos2)
(step t775 (cl (= (= (= (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (and (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (=> (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (= x69 x70)))) true) (= (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (and (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (=> (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (= x69 x70)))))) :rule equiv_simplify)
(step t776 (cl (not (= (= (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (and (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (=> (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (= x69 x70)))) true)) (= (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (and (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (=> (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (= x69 x70))))) :rule equiv1 :premises (t775))
(step t777 (cl (= (= (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (and (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (=> (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (= x69 x70)))) true)) :rule hole :args ("11" (= (= (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (and (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (=> (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (= x69 x70)))) true)))
(step t778 (cl (= (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (and (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (=> (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (= x69 x70))))) :rule resolution :premises (t776 t777))
(step t779 (cl (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70)))) :rule and :premises (a0) :args (69))
(step t780 (cl (and (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (=> (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (= x69 x70)))) :rule resolution :premises (t774 t778 t779))
(step t781 (cl (=> (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))) (= x69 x70))) :rule and :premises (t780) :args (1))
(step t782 (cl (not (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70)))) (= x69 x70)) :rule implies :premises (t781))
(step t783 (cl (= x69 x70) (not (or (and (= x69 y69) (= y69 x70)) (and (= x69 z69) (= z69 x70))))) :rule reordering :premises (t782))
(step t784 (cl (= x69 x70)) :rule resolution :premises (t783 t779))
(step t785 (cl (not (= (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (and (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (=> (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (= x70 x71))))) (not (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71)))) (and (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (=> (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (= x70 x71)))) :rule equiv_pos2)
(step t786 (cl (= (= (= (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (and (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (=> (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (= x70 x71)))) true) (= (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (and (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (=> (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (= x70 x71)))))) :rule equiv_simplify)
(step t787 (cl (not (= (= (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (and (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (=> (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (= x70 x71)))) true)) (= (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (and (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (=> (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (= x70 x71))))) :rule equiv1 :premises (t786))
(step t788 (cl (= (= (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (and (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (=> (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (= x70 x71)))) true)) :rule hole :args ("11" (= (= (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (and (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (=> (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (= x70 x71)))) true)))
(step t789 (cl (= (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (and (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (=> (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (= x70 x71))))) :rule resolution :premises (t787 t788))
(step t790 (cl (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71)))) :rule and :premises (a0) :args (70))
(step t791 (cl (and (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (=> (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (= x70 x71)))) :rule resolution :premises (t785 t789 t790))
(step t792 (cl (=> (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))) (= x70 x71))) :rule and :premises (t791) :args (1))
(step t793 (cl (not (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71)))) (= x70 x71)) :rule implies :premises (t792))
(step t794 (cl (= x70 x71) (not (or (and (= x70 y70) (= y70 x71)) (and (= x70 z70) (= z70 x71))))) :rule reordering :premises (t793))
(step t795 (cl (= x70 x71)) :rule resolution :premises (t794 t790))
(step t796 (cl (not (= (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (and (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (=> (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (= x71 x72))))) (not (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72)))) (and (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (=> (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (= x71 x72)))) :rule equiv_pos2)
(step t797 (cl (= (= (= (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (and (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (=> (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (= x71 x72)))) true) (= (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (and (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (=> (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (= x71 x72)))))) :rule equiv_simplify)
(step t798 (cl (not (= (= (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (and (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (=> (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (= x71 x72)))) true)) (= (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (and (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (=> (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (= x71 x72))))) :rule equiv1 :premises (t797))
(step t799 (cl (= (= (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (and (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (=> (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (= x71 x72)))) true)) :rule hole :args ("11" (= (= (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (and (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (=> (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (= x71 x72)))) true)))
(step t800 (cl (= (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (and (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (=> (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (= x71 x72))))) :rule resolution :premises (t798 t799))
(step t801 (cl (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72)))) :rule and :premises (a0) :args (71))
(step t802 (cl (and (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (=> (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (= x71 x72)))) :rule resolution :premises (t796 t800 t801))
(step t803 (cl (=> (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))) (= x71 x72))) :rule and :premises (t802) :args (1))
(step t804 (cl (not (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72)))) (= x71 x72)) :rule implies :premises (t803))
(step t805 (cl (= x71 x72) (not (or (and (= x71 y71) (= y71 x72)) (and (= x71 z71) (= z71 x72))))) :rule reordering :premises (t804))
(step t806 (cl (= x71 x72)) :rule resolution :premises (t805 t801))
(step t807 (cl (not (= (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (and (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (=> (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (= x72 x73))))) (not (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73)))) (and (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (=> (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (= x72 x73)))) :rule equiv_pos2)
(step t808 (cl (= (= (= (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (and (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (=> (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (= x72 x73)))) true) (= (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (and (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (=> (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (= x72 x73)))))) :rule equiv_simplify)
(step t809 (cl (not (= (= (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (and (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (=> (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (= x72 x73)))) true)) (= (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (and (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (=> (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (= x72 x73))))) :rule equiv1 :premises (t808))
(step t810 (cl (= (= (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (and (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (=> (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (= x72 x73)))) true)) :rule hole :args ("11" (= (= (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (and (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (=> (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (= x72 x73)))) true)))
(step t811 (cl (= (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (and (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (=> (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (= x72 x73))))) :rule resolution :premises (t809 t810))
(step t812 (cl (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73)))) :rule and :premises (a0) :args (72))
(step t813 (cl (and (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (=> (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (= x72 x73)))) :rule resolution :premises (t807 t811 t812))
(step t814 (cl (=> (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))) (= x72 x73))) :rule and :premises (t813) :args (1))
(step t815 (cl (not (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73)))) (= x72 x73)) :rule implies :premises (t814))
(step t816 (cl (= x72 x73) (not (or (and (= x72 y72) (= y72 x73)) (and (= x72 z72) (= z72 x73))))) :rule reordering :premises (t815))
(step t817 (cl (= x72 x73)) :rule resolution :premises (t816 t812))
(step t818 (cl (not (= (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (and (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (=> (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (= x73 x74))))) (not (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74)))) (and (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (=> (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (= x73 x74)))) :rule equiv_pos2)
(step t819 (cl (= (= (= (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (and (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (=> (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (= x73 x74)))) true) (= (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (and (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (=> (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (= x73 x74)))))) :rule equiv_simplify)
(step t820 (cl (not (= (= (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (and (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (=> (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (= x73 x74)))) true)) (= (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (and (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (=> (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (= x73 x74))))) :rule equiv1 :premises (t819))
(step t821 (cl (= (= (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (and (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (=> (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (= x73 x74)))) true)) :rule hole :args ("11" (= (= (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (and (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (=> (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (= x73 x74)))) true)))
(step t822 (cl (= (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (and (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (=> (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (= x73 x74))))) :rule resolution :premises (t820 t821))
(step t823 (cl (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74)))) :rule and :premises (a0) :args (73))
(step t824 (cl (and (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (=> (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (= x73 x74)))) :rule resolution :premises (t818 t822 t823))
(step t825 (cl (=> (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))) (= x73 x74))) :rule and :premises (t824) :args (1))
(step t826 (cl (not (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74)))) (= x73 x74)) :rule implies :premises (t825))
(step t827 (cl (= x73 x74) (not (or (and (= x73 y73) (= y73 x74)) (and (= x73 z73) (= z73 x74))))) :rule reordering :premises (t826))
(step t828 (cl (= x73 x74)) :rule resolution :premises (t827 t823))
(step t829 (cl (not (= (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (and (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (=> (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (= x74 x75))))) (not (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75)))) (and (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (=> (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (= x74 x75)))) :rule equiv_pos2)
(step t830 (cl (= (= (= (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (and (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (=> (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (= x74 x75)))) true) (= (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (and (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (=> (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (= x74 x75)))))) :rule equiv_simplify)
(step t831 (cl (not (= (= (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (and (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (=> (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (= x74 x75)))) true)) (= (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (and (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (=> (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (= x74 x75))))) :rule equiv1 :premises (t830))
(step t832 (cl (= (= (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (and (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (=> (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (= x74 x75)))) true)) :rule hole :args ("11" (= (= (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (and (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (=> (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (= x74 x75)))) true)))
(step t833 (cl (= (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (and (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (=> (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (= x74 x75))))) :rule resolution :premises (t831 t832))
(step t834 (cl (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75)))) :rule and :premises (a0) :args (74))
(step t835 (cl (and (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (=> (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (= x74 x75)))) :rule resolution :premises (t829 t833 t834))
(step t836 (cl (=> (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))) (= x74 x75))) :rule and :premises (t835) :args (1))
(step t837 (cl (not (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75)))) (= x74 x75)) :rule implies :premises (t836))
(step t838 (cl (= x74 x75) (not (or (and (= x74 y74) (= y74 x75)) (and (= x74 z74) (= z74 x75))))) :rule reordering :premises (t837))
(step t839 (cl (= x74 x75)) :rule resolution :premises (t838 t834))
(step t840 (cl (= x12 x75)) :rule trans :premises (t157 t168 t179 t190 t201 t212 t223 t234 t245 t256 t267 t278 t289 t300 t311 t322 t333 t344 t355 t366 t377 t388 t399 t410 t421 t432 t443 t454 t465 t476 t487 t498 t509 t520 t531 t542 t553 t564 t575 t586 t597 t608 t619 t630 t641 t652 t663 t674 t685 t696 t707 t718 t729 t740 t751 t762 t773 t784 t795 t806 t817 t828 t839))
(step t841 (cl (= (= x11 x12) (= x0 x75))) :rule cong :premises (t146 t840))
(step t842 (cl (= (= (= x0 x75) false) (not (= x0 x75)))) :rule equiv_simplify)
(step t843 (cl (= (= x0 x75) false) (not (not (= x0 x75)))) :rule equiv2 :premises (t842))
(step t844 (cl (not (not (not (= x0 x75)))) (= x0 x75)) :rule not_not)
(step t845 (cl (= (= x0 x75) false) (= x0 x75)) :rule resolution :premises (t843 t844))
(step t846 (cl (not (= x0 x75))) :rule and :premises (a0) :args (75))
(step t847 (cl (= (= x0 x75) false)) :rule resolution :premises (t845 t846))
(step t848 (cl (= (= x11 x12) false)) :rule trans :premises (t841 t847))
(step t849 (cl (not (= x11 x12))) :rule resolution :premises (t13 t848))
(step t850 (cl (not (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))))) :rule resolution :premises (t11 t849))
(step t851 (cl (not (and (= x11 z11) (= z11 x12)))) :rule resolution :premises (t2 t850))
(step t852 (cl (or (and (= x11 y11) (= y11 x12)) (and (= x11 z11) (= z11 x12))) (not (and (= x11 y11) (= y11 x12)))) :rule or_neg :args (0))
(step t853 (cl (not (and (= x11 y11) (= y11 x12)))) :rule resolution :premises (t852 t850))
(step t854 (cl) :rule resolution :premises (t1 t851 t853))
