unsat
(assume a0 circuit)
(assume a1 (not (or (and (not prt) car clk) (and prt (or (not car) clk)) (and (not prt) (or (not car) (not clk))) (and prt car (not clk)))))
(step t0 (cl (not (= (or (not prt) (not car) (not (not clk))) (or (not prt) (not car) clk))) (not (or (not prt) (not car) (not (not clk)))) (or (not prt) (not car) clk)) :rule equiv_pos2)
(step t1 (cl (= (not prt) (not prt))) :rule refl)
(step t2 (cl (= (not car) (not car))) :rule refl)
(step t3 (cl (= (= (= (not (not clk)) clk) true) (= (not (not clk)) clk))) :rule equiv_simplify)
(step t4 (cl (not (= (= (not (not clk)) clk) true)) (= (not (not clk)) clk)) :rule equiv1 :premises (t3))
(step t5 (cl (= (= (not (not clk)) clk) (= clk (not (not clk))))) :rule rare_rewrite :args ("eq-symm" (not (not clk)) clk))
(step t6 (cl (= clk clk)) :rule refl)
(step t7 (cl (= (not (not clk)) clk)) :rule rare_rewrite :args ("bool-double-not-elim" clk))
(step t8 (cl (= (= clk (not (not clk))) (= clk clk))) :rule cong :premises (t6 t7))
(step t9 (cl (= (= clk clk) true)) :rule rare_rewrite :args ("eq-refl" clk))
(step t10 (cl (= (= clk (not (not clk))) true)) :rule trans :premises (t8 t9))
(step t11 (cl (= (= (not (not clk)) clk) true)) :rule trans :premises (t5 t10))
(step t12 (cl (= (not (not clk)) clk)) :rule resolution :premises (t4 t11))
(step t13 (cl (= (or (not prt) (not car) (not (not clk))) (or (not prt) (not car) clk))) :rule cong :premises (t1 t2 t12))
(step t14 (cl (not (and prt car (not clk)))) :rule not_or :premises (a1) :args (3))
(step t15 (cl (not prt) (not car) (not (not clk))) :rule not_and :premises (t14))
(step t16 (cl (or (not prt) (not car) (not (not clk))) (not (not prt))) :rule or_neg :args (0))
(step t17 (cl (or (not prt) (not car) (not (not clk))) (not (not car))) :rule or_neg :args (1))
(step t18 (cl (or (not prt) (not car) (not (not clk))) (not (not (not clk)))) :rule or_neg :args (2))
(step t19 (cl (or (not prt) (not car) (not (not clk))) (or (not prt) (not car) (not (not clk))) (or (not prt) (not car) (not (not clk)))) :rule resolution :premises (t15 t16 t17 t18))
(step t20 (cl (or (not prt) (not car) (not (not clk)))) :rule contraction :premises (t19))
(step t21 (cl (or (not prt) (not car) clk)) :rule resolution :premises (t0 t13 t20))
(step t22 (cl (not prt) (not car) clk) :rule or :premises (t21))
(step t23 (cl clk (not prt) (not car)) :rule reordering :premises (t22))
(step t24 (cl (or (not car) clk) (not clk)) :rule or_neg :args (1))
(step t25 (cl (not (and prt (or (not car) clk)))) :rule not_or :premises (a1) :args (1))
(step t26 (cl (not prt) (not (or (not car) clk))) :rule not_and :premises (t25))
(step t27 (cl (not (= (or (not (not prt)) (not car) (not clk)) (or prt (not car) (not clk)))) (not (or (not (not prt)) (not car) (not clk))) (or prt (not car) (not clk))) :rule equiv_pos2)
(step t28 (cl (= (= (= (not (not prt)) prt) true) (= (not (not prt)) prt))) :rule equiv_simplify)
(step t29 (cl (not (= (= (not (not prt)) prt) true)) (= (not (not prt)) prt)) :rule equiv1 :premises (t28))
(step t30 (cl (= (= (not (not prt)) prt) (= prt (not (not prt))))) :rule rare_rewrite :args ("eq-symm" (not (not prt)) prt))
(step t31 (cl (= prt prt)) :rule refl)
(step t32 (cl (= (not (not prt)) prt)) :rule rare_rewrite :args ("bool-double-not-elim" prt))
(step t33 (cl (= (= prt (not (not prt))) (= prt prt))) :rule cong :premises (t31 t32))
(step t34 (cl (= (= prt prt) true)) :rule rare_rewrite :args ("eq-refl" prt))
(step t35 (cl (= (= prt (not (not prt))) true)) :rule trans :premises (t33 t34))
(step t36 (cl (= (= (not (not prt)) prt) true)) :rule trans :premises (t30 t35))
(step t37 (cl (= (not (not prt)) prt)) :rule resolution :premises (t29 t36))
(step t38 (cl (= (not clk) (not clk))) :rule refl)
(step t39 (cl (= (or (not (not prt)) (not car) (not clk)) (or prt (not car) (not clk)))) :rule cong :premises (t37 t2 t38))
(step t40 (cl (not (and (not prt) car clk))) :rule not_or :premises (a1) :args (0))
(step t41 (cl (not (not prt)) (not car) (not clk)) :rule not_and :premises (t40))
(step t42 (cl (or (not (not prt)) (not car) (not clk)) (not (not (not prt)))) :rule or_neg :args (0))
(step t43 (cl (or (not (not prt)) (not car) (not clk)) (not (not car))) :rule or_neg :args (1))
(step t44 (cl (or (not (not prt)) (not car) (not clk)) (not (not clk))) :rule or_neg :args (2))
(step t45 (cl (or (not (not prt)) (not car) (not clk)) (or (not (not prt)) (not car) (not clk)) (or (not (not prt)) (not car) (not clk))) :rule resolution :premises (t41 t42 t43 t44))
(step t46 (cl (or (not (not prt)) (not car) (not clk))) :rule contraction :premises (t45))
(step t47 (cl (or prt (not car) (not clk))) :rule resolution :premises (t27 t39 t46))
(step t48 (cl prt (not car) (not clk)) :rule or :premises (t47))
(step t49 (cl (not (= (or (or (not car) (not clk)) (not (not clk))) (or (or (not car) (not clk)) clk))) (not (or (or (not car) (not clk)) (not (not clk)))) (or (or (not car) (not clk)) clk)) :rule equiv_pos2)
(step t50 (cl (= (or (not car) (not clk)) (or (not car) (not clk)))) :rule refl)
(step t51 (cl (= (or (or (not car) (not clk)) (not (not clk))) (or (or (not car) (not clk)) clk))) :rule cong :premises (t50 t12))
(step t52 (cl (or (not car) (not clk)) (not (not clk))) :rule or_neg :args (1))
(step t53 (cl (or (or (not car) (not clk)) (not (not clk))) (not (or (not car) (not clk)))) :rule or_neg :args (0))
(step t54 (cl (or (or (not car) (not clk)) (not (not clk))) (not (not (not clk)))) :rule or_neg :args (1))
(step t55 (cl (or (or (not car) (not clk)) (not (not clk))) (or (or (not car) (not clk)) (not (not clk)))) :rule resolution :premises (t52 t53 t54))
(step t56 (cl (or (or (not car) (not clk)) (not (not clk)))) :rule contraction :premises (t55))
(step t57 (cl (or (or (not car) (not clk)) clk)) :rule resolution :premises (t49 t51 t56))
(step t58 (cl (or (not car) (not clk)) clk) :rule or :premises (t57))
(step t59 (cl clk (or (not car) (not clk))) :rule reordering :premises (t58))
(step t60 (cl (not (= (or (or (not car) (not clk)) (not (not car))) (or (or (not car) (not clk)) car))) (not (or (or (not car) (not clk)) (not (not car)))) (or (or (not car) (not clk)) car)) :rule equiv_pos2)
(step t61 (cl (= (= (= (not (not car)) car) true) (= (not (not car)) car))) :rule equiv_simplify)
(step t62 (cl (not (= (= (not (not car)) car) true)) (= (not (not car)) car)) :rule equiv1 :premises (t61))
(step t63 (cl (= (= (not (not car)) car) (= car (not (not car))))) :rule rare_rewrite :args ("eq-symm" (not (not car)) car))
(step t64 (cl (= car car)) :rule refl)
(step t65 (cl (= (not (not car)) car)) :rule rare_rewrite :args ("bool-double-not-elim" car))
(step t66 (cl (= (= car (not (not car))) (= car car))) :rule cong :premises (t64 t65))
(step t67 (cl (= (= car car) true)) :rule rare_rewrite :args ("eq-refl" car))
(step t68 (cl (= (= car (not (not car))) true)) :rule trans :premises (t66 t67))
(step t69 (cl (= (= (not (not car)) car) true)) :rule trans :premises (t63 t68))
(step t70 (cl (= (not (not car)) car)) :rule resolution :premises (t62 t69))
(step t71 (cl (= (or (or (not car) (not clk)) (not (not car))) (or (or (not car) (not clk)) car))) :rule cong :premises (t50 t70))
(step t72 (cl (or (not car) (not clk)) (not (not car))) :rule or_neg :args (0))
(step t73 (cl (or (or (not car) (not clk)) (not (not car))) (not (or (not car) (not clk)))) :rule or_neg :args (0))
(step t74 (cl (or (or (not car) (not clk)) (not (not car))) (not (not (not car)))) :rule or_neg :args (1))
(step t75 (cl (or (or (not car) (not clk)) (not (not car))) (or (or (not car) (not clk)) (not (not car)))) :rule resolution :premises (t72 t73 t74))
(step t76 (cl (or (or (not car) (not clk)) (not (not car)))) :rule contraction :premises (t75))
(step t77 (cl (or (or (not car) (not clk)) car)) :rule resolution :premises (t60 t71 t76))
(step t78 (cl (or (not car) (not clk)) car) :rule or :premises (t77))
(step t79 (cl car (or (not car) (not clk))) :rule reordering :premises (t78))
(step t80 (cl (not (= (or (not (not prt)) (not (or (not car) (not clk)))) (or prt (not (or (not car) (not clk)))))) (not (or (not (not prt)) (not (or (not car) (not clk))))) (or prt (not (or (not car) (not clk))))) :rule equiv_pos2)
(step t81 (cl (= (not (or (not car) (not clk))) (not (or (not car) (not clk))))) :rule refl)
(step t82 (cl (= (or (not (not prt)) (not (or (not car) (not clk)))) (or prt (not (or (not car) (not clk)))))) :rule cong :premises (t37 t81))
(step t83 (cl (not (and (not prt) (or (not car) (not clk))))) :rule not_or :premises (a1) :args (2))
(step t84 (cl (not (not prt)) (not (or (not car) (not clk)))) :rule not_and :premises (t83))
(step t85 (cl (or (not (not prt)) (not (or (not car) (not clk)))) (not (not (not prt)))) :rule or_neg :args (0))
(step t86 (cl (or (not (not prt)) (not (or (not car) (not clk)))) (not (not (or (not car) (not clk))))) :rule or_neg :args (1))
(step t87 (cl (or (not (not prt)) (not (or (not car) (not clk)))) (or (not (not prt)) (not (or (not car) (not clk))))) :rule resolution :premises (t84 t85 t86))
(step t88 (cl (or (not (not prt)) (not (or (not car) (not clk))))) :rule contraction :premises (t87))
(step t89 (cl (or prt (not (or (not car) (not clk))))) :rule resolution :premises (t80 t82 t88))
(step t90 (cl prt (not (or (not car) (not clk)))) :rule or :premises (t89))
(step t91 (cl prt) :rule resolution :premises (t48 t59 t79 t90))
(step t92 (cl (not (or (not car) clk))) :rule resolution :premises (t26 t91))
(step t93 (cl (not clk)) :rule resolution :premises (t24 t92))
(step t94 (cl (not (= (or (or (not car) clk) (not (not car))) (or (or (not car) clk) car))) (not (or (or (not car) clk) (not (not car)))) (or (or (not car) clk) car)) :rule equiv_pos2)
(step t95 (cl (= (or (not car) clk) (or (not car) clk))) :rule refl)
(step t96 (cl (= (or (or (not car) clk) (not (not car))) (or (or (not car) clk) car))) :rule cong :premises (t95 t70))
(step t97 (cl (or (not car) clk) (not (not car))) :rule or_neg :args (0))
(step t98 (cl (or (or (not car) clk) (not (not car))) (not (or (not car) clk))) :rule or_neg :args (0))
(step t99 (cl (or (or (not car) clk) (not (not car))) (not (not (not car)))) :rule or_neg :args (1))
(step t100 (cl (or (or (not car) clk) (not (not car))) (or (or (not car) clk) (not (not car)))) :rule resolution :premises (t97 t98 t99))
(step t101 (cl (or (or (not car) clk) (not (not car)))) :rule contraction :premises (t100))
(step t102 (cl (or (or (not car) clk) car)) :rule resolution :premises (t94 t96 t101))
(step t103 (cl (or (not car) clk) car) :rule or :premises (t102))
(step t104 (cl car (or (not car) clk)) :rule reordering :premises (t103))
(step t105 (cl car) :rule resolution :premises (t104 t92))
(step t106 (cl) :rule resolution :premises (t23 t93 t105 t91))
