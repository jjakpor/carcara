unsat
(assume a0 (and (distinct c_0 c_1) (or (not (p3 c_0)) (not (p1 c_0 c_0)) (= c_0 c_0) (p1 c_0 c_0) (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0) (not (p1 c_0 c_0)) (not (p4 c_0)) (= c_0 c_0) (not (p14 c_0 c_0 c_0))) (or (not (p3 c_0)) (not (p1 c_0 c_0)) (= c_0 c_1) (p1 c_1 c_0) (not (p3 c_0)) (not (p3 c_1)) (= c_0 c_1) (not (p1 c_0 c_0)) (not (p4 c_0)) (= c_0 c_0) (not (p14 c_0 c_0 c_1))) (or (not (p3 c_0)) (not (p1 c_0 c_1)) (= c_0 c_0) (p1 c_0 c_1) (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0) (not (p1 c_0 c_1)) (not (p4 c_1)) (= c_0 c_0) (not (p14 c_0 c_0 c_0))) (or (not (p3 c_0)) (not (p1 c_0 c_1)) (= c_0 c_1) (p1 c_1 c_1) (not (p3 c_0)) (not (p3 c_1)) (= c_0 c_1) (not (p1 c_0 c_1)) (not (p4 c_1)) (= c_0 c_0) (not (p14 c_0 c_0 c_1))) (or (not (p3 c_0)) (not (p1 c_1 c_0)) (= c_1 c_0) (p1 c_0 c_0) (not (p3 c_1)) (not (p3 c_0)) (= c_0 c_0) (not (p1 c_0 c_0)) (not (p4 c_0)) (= c_1 c_0) (not (p14 c_1 c_0 c_0))) (or (not (p3 c_0)) (not (p1 c_1 c_0)) (= c_1 c_1) (p1 c_1 c_0) (not (p3 c_1)) (not (p3 c_1)) (= c_0 c_1) (not (p1 c_0 c_0)) (not (p4 c_0)) (= c_1 c_0) (not (p14 c_1 c_0 c_1))) (or (not (p3 c_0)) (not (p1 c_1 c_1)) (= c_1 c_0) (p1 c_0 c_1) (not (p3 c_1)) (not (p3 c_0)) (= c_0 c_0) (not (p1 c_0 c_1)) (not (p4 c_1)) (= c_1 c_0) (not (p14 c_1 c_0 c_0))) (or (not (p3 c_0)) (not (p1 c_1 c_1)) (= c_1 c_1) (p1 c_1 c_1) (not (p3 c_1)) (not (p3 c_1)) (= c_0 c_1) (not (p1 c_0 c_1)) (not (p4 c_1)) (= c_1 c_0) (not (p14 c_1 c_0 c_1))) (or (not (p3 c_1)) (not (p1 c_0 c_0)) (= c_0 c_0) (p1 c_0 c_0) (not (p3 c_0)) (not (p3 c_0)) (= c_1 c_0) (not (p1 c_1 c_0)) (not (p4 c_0)) (= c_0 c_1) (not (p14 c_0 c_1 c_0))) (or (not (p3 c_1)) (not (p1 c_0 c_0)) (= c_0 c_1) (p1 c_1 c_0) (not (p3 c_0)) (not (p3 c_1)) (= c_1 c_1) (not (p1 c_1 c_0)) (not (p4 c_0)) (= c_0 c_1) (not (p14 c_0 c_1 c_1))) (or (not (p3 c_1)) (not (p1 c_0 c_1)) (= c_0 c_0) (p1 c_0 c_1) (not (p3 c_0)) (not (p3 c_0)) (= c_1 c_0) (not (p1 c_1 c_1)) (not (p4 c_1)) (= c_0 c_1) (not (p14 c_0 c_1 c_0))) (or (not (p3 c_1)) (not (p1 c_0 c_1)) (= c_0 c_1) (p1 c_1 c_1) (not (p3 c_0)) (not (p3 c_1)) (= c_1 c_1) (not (p1 c_1 c_1)) (not (p4 c_1)) (= c_0 c_1) (not (p14 c_0 c_1 c_1))) (or (not (p3 c_1)) (not (p1 c_1 c_0)) (= c_1 c_0) (p1 c_0 c_0) (not (p3 c_1)) (not (p3 c_0)) (= c_1 c_0) (not (p1 c_1 c_0)) (not (p4 c_0)) (= c_1 c_1) (not (p14 c_1 c_1 c_0))) (or (not (p3 c_1)) (not (p1 c_1 c_0)) (= c_1 c_1) (p1 c_1 c_0) (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1) (not (p1 c_1 c_0)) (not (p4 c_0)) (= c_1 c_1) (not (p14 c_1 c_1 c_1))) (or (not (p3 c_1)) (not (p1 c_1 c_1)) (= c_1 c_0) (p1 c_0 c_1) (not (p3 c_1)) (not (p3 c_0)) (= c_1 c_0) (not (p1 c_1 c_1)) (not (p4 c_1)) (= c_1 c_1) (not (p14 c_1 c_1 c_0))) (or (not (p3 c_1)) (not (p1 c_1 c_1)) (= c_1 c_1) (p1 c_1 c_1) (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1) (not (p1 c_1 c_1)) (not (p4 c_1)) (= c_1 c_1) (not (p14 c_1 c_1 c_1))) (or (not (p9 c_0)) (p3 (f12 c_0))) (or (not (p9 c_1)) (p3 (f12 c_1))) (or (not (p4 c_0)) (p1 (f6 c_0) c_0)) (or (not (p4 c_1)) (p1 (f6 c_1) c_1)) (or (not (p3 c_0)) (p4 (f2 c_0 c_0)) (= c_0 c_0) (not (p3 c_0))) (or (not (p3 c_0)) (p4 (f2 c_0 c_1)) (= c_0 c_1) (not (p3 c_1))) (or (not (p3 c_1)) (p4 (f2 c_1 c_0)) (= c_1 c_0) (not (p3 c_0))) (or (not (p3 c_1)) (p4 (f2 c_1 c_1)) (= c_1 c_1) (not (p3 c_1))) (or (not (p4 c_0)) (not (p3 c_0)) (= c_0 c_0) (not (p3 c_0)) (= c_0 c_0) (not (p1 c_0 c_0)) (not (p1 c_0 c_0)) (not (p1 c_0 c_0)) (not (p4 c_0)) (not (p1 c_0 c_0))) (or (not (p4 c_0)) (not (p3 c_0)) (= c_0 c_0) (not (p3 c_1)) (= c_0 c_1) (not (p1 c_1 c_0)) (not (p1 c_0 c_0)) (not (p1 c_1 c_0)) (not (p4 c_0)) (not (p1 c_0 c_0))) (or (not (p4 c_0)) (not (p3 c_0)) (= c_1 c_0) (not (p3 c_0)) (= c_0 c_0) (not (p1 c_0 c_0)) (not (p1 c_0 c_1)) (not (p1 c_0 c_1)) (not (p4 c_1)) (not (p1 c_0 c_0))) (or (not (p4 c_0)) (not (p3 c_0)) (= c_1 c_0) (not (p3 c_1)) (= c_0 c_1) (not (p1 c_1 c_0)) (not (p1 c_0 c_1)) (not (p1 c_1 c_1)) (not (p4 c_1)) (not (p1 c_0 c_0))) (or (not (p4 c_0)) (not (p3 c_1)) (= c_0 c_0) (not (p3 c_0)) (= c_1 c_0) (not (p1 c_0 c_0)) (not (p1 c_1 c_0)) (not (p1 c_0 c_0)) (not (p4 c_0)) (not (p1 c_1 c_0))) (or (not (p4 c_0)) (not (p3 c_1)) (= c_0 c_0) (not (p3 c_1)) (= c_1 c_1) (not (p1 c_1 c_0)) (not (p1 c_1 c_0)) (not (p1 c_1 c_0)) (not (p4 c_0)) (not (p1 c_1 c_0))) (or (not (p4 c_0)) (not (p3 c_1)) (= c_1 c_0) (not (p3 c_0)) (= c_1 c_0) (not (p1 c_0 c_0)) (not (p1 c_1 c_1)) (not (p1 c_0 c_1)) (not (p4 c_1)) (not (p1 c_1 c_0))) (or (not (p4 c_0)) (not (p3 c_1)) (= c_1 c_0) (not (p3 c_1)) (= c_1 c_1) (not (p1 c_1 c_0)) (not (p1 c_1 c_1)) (not (p1 c_1 c_1)) (not (p4 c_1)) (not (p1 c_1 c_0))) (or (not (p4 c_1)) (not (p3 c_0)) (= c_0 c_1) (not (p3 c_0)) (= c_0 c_0) (not (p1 c_0 c_1)) (not (p1 c_0 c_0)) (not (p1 c_0 c_0)) (not (p4 c_0)) (not (p1 c_0 c_1))) (or (not (p4 c_1)) (not (p3 c_0)) (= c_0 c_1) (not (p3 c_1)) (= c_0 c_1) (not (p1 c_1 c_1)) (not (p1 c_0 c_0)) (not (p1 c_1 c_0)) (not (p4 c_0)) (not (p1 c_0 c_1))) (or (not (p4 c_1)) (not (p3 c_0)) (= c_1 c_1) (not (p3 c_0)) (= c_0 c_0) (not (p1 c_0 c_1)) (not (p1 c_0 c_1)) (not (p1 c_0 c_1)) (not (p4 c_1)) (not (p1 c_0 c_1))) (or (not (p4 c_1)) (not (p3 c_0)) (= c_1 c_1) (not (p3 c_1)) (= c_0 c_1) (not (p1 c_1 c_1)) (not (p1 c_0 c_1)) (not (p1 c_1 c_1)) (not (p4 c_1)) (not (p1 c_0 c_1))) (or (not (p4 c_1)) (not (p3 c_1)) (= c_0 c_1) (not (p3 c_0)) (= c_1 c_0) (not (p1 c_0 c_1)) (not (p1 c_1 c_0)) (not (p1 c_0 c_0)) (not (p4 c_0)) (not (p1 c_1 c_1))) (or (not (p4 c_1)) (not (p3 c_1)) (= c_0 c_1) (not (p3 c_1)) (= c_1 c_1) (not (p1 c_1 c_1)) (not (p1 c_1 c_0)) (not (p1 c_1 c_0)) (not (p4 c_0)) (not (p1 c_1 c_1))) (or (not (p4 c_1)) (not (p3 c_1)) (= c_1 c_1) (not (p3 c_0)) (= c_1 c_0) (not (p1 c_0 c_1)) (not (p1 c_1 c_1)) (not (p1 c_0 c_1)) (not (p4 c_1)) (not (p1 c_1 c_1))) (or (not (p4 c_1)) (not (p3 c_1)) (= c_1 c_1) (not (p3 c_1)) (= c_1 c_1) (not (p1 c_1 c_1)) (not (p1 c_1 c_1)) (not (p1 c_1 c_1)) (not (p4 c_1)) (not (p1 c_1 c_1))) (or (= c_0 c_0) (not (p3 c_0)) (p1 c_0 (f2 c_0 c_0)) (not (p3 c_0))) (or (= c_0 c_1) (not (p3 c_1)) (p1 c_1 (f2 c_0 c_1)) (not (p3 c_0))) (or (= c_1 c_0) (not (p3 c_0)) (p1 c_0 (f2 c_1 c_0)) (not (p3 c_1))) (or (= c_1 c_1) (not (p3 c_1)) (p1 c_1 (f2 c_1 c_1)) (not (p3 c_1))) (or (= c_0 c_0) (not (p3 c_0)) (p4 (f17 c_0 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p14 c_0 c_0 c_0)) (not (p3 c_0)) (= c_0 c_0)) (or (= c_0 c_0) (not (p3 c_0)) (p4 (f17 c_0 c_1 c_0)) (= c_0 c_1) (not (p3 c_1)) (not (p14 c_0 c_1 c_0)) (not (p3 c_0)) (= c_1 c_0)) (or (= c_0 c_1) (not (p3 c_1)) (p4 (f17 c_0 c_0 c_1)) (= c_0 c_0) (not (p3 c_0)) (not (p14 c_0 c_0 c_1)) (not (p3 c_0)) (= c_0 c_1)) (or (= c_0 c_1) (not (p3 c_1)) (p4 (f17 c_0 c_1 c_1)) (= c_0 c_1) (not (p3 c_1)) (not (p14 c_0 c_1 c_1)) (not (p3 c_0)) (= c_1 c_1)) (or (= c_1 c_0) (not (p3 c_0)) (p4 (f17 c_1 c_0 c_0)) (= c_1 c_0) (not (p3 c_0)) (not (p14 c_1 c_0 c_0)) (not (p3 c_1)) (= c_0 c_0)) (or (= c_1 c_0) (not (p3 c_0)) (p4 (f17 c_1 c_1 c_0)) (= c_1 c_1) (not (p3 c_1)) (not (p14 c_1 c_1 c_0)) (not (p3 c_1)) (= c_1 c_0)) (or (= c_1 c_1) (not (p3 c_1)) (p4 (f17 c_1 c_0 c_1)) (= c_1 c_0) (not (p3 c_0)) (not (p14 c_1 c_0 c_1)) (not (p3 c_1)) (= c_0 c_1)) (or (= c_1 c_1) (not (p3 c_1)) (p4 (f17 c_1 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p14 c_1 c_1 c_1)) (not (p3 c_1)) (= c_1 c_1)) (or (= c_0 c_0) (= c_0 c_0) (= c_0 c_0) (p14 c_0 c_0 c_0) (not (p3 c_0)) (not (p1 c_0 c_0)) (not (p1 c_0 c_0)) (not (p3 c_0)) (not (p4 c_0)) (not (p3 c_0)) (not (p1 c_0 c_0))) (or (= c_0 c_0) (= c_0 c_0) (= c_0 c_0) (p14 c_0 c_0 c_0) (not (p3 c_0)) (not (p1 c_0 c_1)) (not (p1 c_0 c_1)) (not (p3 c_0)) (not (p4 c_1)) (not (p3 c_0)) (not (p1 c_0 c_1))) (or (= c_0 c_0) (= c_1 c_0) (= c_0 c_1) (p14 c_0 c_1 c_0) (not (p3 c_0)) (not (p1 c_1 c_0)) (not (p1 c_0 c_0)) (not (p3 c_0)) (not (p4 c_0)) (not (p3 c_1)) (not (p1 c_0 c_0))) (or (= c_0 c_0) (= c_1 c_0) (= c_0 c_1) (p14 c_0 c_1 c_0) (not (p3 c_0)) (not (p1 c_1 c_1)) (not (p1 c_0 c_1)) (not (p3 c_0)) (not (p4 c_1)) (not (p3 c_1)) (not (p1 c_0 c_1))) (or (= c_0 c_1) (= c_0 c_1) (= c_0 c_0) (p14 c_0 c_0 c_1) (not (p3 c_0)) (not (p1 c_0 c_0)) (not (p1 c_0 c_0)) (not (p3 c_1)) (not (p4 c_0)) (not (p3 c_0)) (not (p1 c_1 c_0))) (or (= c_0 c_1) (= c_0 c_1) (= c_0 c_0) (p14 c_0 c_0 c_1) (not (p3 c_0)) (not (p1 c_0 c_1)) (not (p1 c_0 c_1)) (not (p3 c_1)) (not (p4 c_1)) (not (p3 c_0)) (not (p1 c_1 c_1))) (or (= c_0 c_1) (= c_1 c_1) (= c_0 c_1) (p14 c_0 c_1 c_1) (not (p3 c_0)) (not (p1 c_1 c_0)) (not (p1 c_0 c_0)) (not (p3 c_1)) (not (p4 c_0)) (not (p3 c_1)) (not (p1 c_1 c_0))) (or (= c_0 c_1) (= c_1 c_1) (= c_0 c_1) (p14 c_0 c_1 c_1) (not (p3 c_0)) (not (p1 c_1 c_1)) (not (p1 c_0 c_1)) (not (p3 c_1)) (not (p4 c_1)) (not (p3 c_1)) (not (p1 c_1 c_1))) (or (= c_1 c_0) (= c_0 c_0) (= c_1 c_0) (p14 c_1 c_0 c_0) (not (p3 c_1)) (not (p1 c_0 c_0)) (not (p1 c_1 c_0)) (not (p3 c_0)) (not (p4 c_0)) (not (p3 c_0)) (not (p1 c_0 c_0))) (or (= c_1 c_0) (= c_0 c_0) (= c_1 c_0) (p14 c_1 c_0 c_0) (not (p3 c_1)) (not (p1 c_0 c_1)) (not (p1 c_1 c_1)) (not (p3 c_0)) (not (p4 c_1)) (not (p3 c_0)) (not (p1 c_0 c_1))) (or (= c_1 c_0) (= c_1 c_0) (= c_1 c_1) (p14 c_1 c_1 c_0) (not (p3 c_1)) (not (p1 c_1 c_0)) (not (p1 c_1 c_0)) (not (p3 c_0)) (not (p4 c_0)) (not (p3 c_1)) (not (p1 c_0 c_0))) (or (= c_1 c_0) (= c_1 c_0) (= c_1 c_1) (p14 c_1 c_1 c_0) (not (p3 c_1)) (not (p1 c_1 c_1)) (not (p1 c_1 c_1)) (not (p3 c_0)) (not (p4 c_1)) (not (p3 c_1)) (not (p1 c_0 c_1))) (or (= c_1 c_1) (= c_0 c_1) (= c_1 c_0) (p14 c_1 c_0 c_1) (not (p3 c_1)) (not (p1 c_0 c_0)) (not (p1 c_1 c_0)) (not (p3 c_1)) (not (p4 c_0)) (not (p3 c_0)) (not (p1 c_1 c_0))) (or (= c_1 c_1) (= c_0 c_1) (= c_1 c_0) (p14 c_1 c_0 c_1) (not (p3 c_1)) (not (p1 c_0 c_1)) (not (p1 c_1 c_1)) (not (p3 c_1)) (not (p4 c_1)) (not (p3 c_0)) (not (p1 c_1 c_1))) (or (= c_1 c_1) (= c_1 c_1) (= c_1 c_1) (p14 c_1 c_1 c_1) (not (p3 c_1)) (not (p1 c_1 c_0)) (not (p1 c_1 c_0)) (not (p3 c_1)) (not (p4 c_0)) (not (p3 c_1)) (not (p1 c_1 c_0))) (or (= c_1 c_1) (= c_1 c_1) (= c_1 c_1) (p14 c_1 c_1 c_1) (not (p3 c_1)) (not (p1 c_1 c_1)) (not (p1 c_1 c_1)) (not (p3 c_1)) (not (p4 c_1)) (not (p3 c_1)) (not (p1 c_1 c_1))) (or (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p3 c_0)) (p3 (f16 c_0 c_0 c_0)) (= c_0 c_0) (not (p9 c_0)) (not (p10 c_0 c_0))) (or (not (p9 c_0)) (not (p10 c_0 c_1)) (not (p3 c_0)) (p3 (f16 c_0 c_1 c_0)) (= c_0 c_1) (not (p9 c_1)) (not (p10 c_0 c_0))) (or (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p3 c_1)) (p3 (f16 c_0 c_0 c_1)) (= c_0 c_0) (not (p9 c_0)) (not (p10 c_1 c_0))) (or (not (p9 c_0)) (not (p10 c_1 c_1)) (not (p3 c_1)) (p3 (f16 c_0 c_1 c_1)) (= c_0 c_1) (not (p9 c_1)) (not (p10 c_1 c_0))) (or (not (p9 c_1)) (not (p10 c_0 c_0)) (not (p3 c_0)) (p3 (f16 c_1 c_0 c_0)) (= c_1 c_0) (not (p9 c_0)) (not (p10 c_0 c_1))) (or (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p3 c_0)) (p3 (f16 c_1 c_1 c_0)) (= c_1 c_1) (not (p9 c_1)) (not (p10 c_0 c_1))) (or (not (p9 c_1)) (not (p10 c_1 c_0)) (not (p3 c_1)) (p3 (f16 c_1 c_0 c_1)) (= c_1 c_0) (not (p9 c_0)) (not (p10 c_1 c_1))) (or (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p3 c_1)) (p3 (f16 c_1 c_1 c_1)) (= c_1 c_1) (not (p9 c_1)) (not (p10 c_1 c_1))) (or (not (p4 c_0)) (not (p1 (f7 c_0) c_0))) (or (not (p4 c_1)) (not (p1 (f7 c_1) c_1))) (or (not (p3 c_0)) (= c_0 c_0) (p10 c_0 (f13 c_0 c_0 c_0)) (not (p3 c_0)) (p14 c_0 c_0 c_0) (= c_0 c_0) (not (p3 c_0)) (= c_0 c_0)) (or (not (p3 c_0)) (= c_0 c_0) (p10 c_1 (f13 c_1 c_0 c_0)) (not (p3 c_1)) (p14 c_1 c_0 c_0) (= c_1 c_0) (not (p3 c_0)) (= c_1 c_0)) (or (not (p3 c_0)) (= c_1 c_0) (p10 c_0 (f13 c_0 c_1 c_0)) (not (p3 c_0)) (p14 c_0 c_1 c_0) (= c_0 c_1) (not (p3 c_1)) (= c_0 c_0)) (or (not (p3 c_0)) (= c_1 c_0) (p10 c_1 (f13 c_1 c_1 c_0)) (not (p3 c_1)) (p14 c_1 c_1 c_0) (= c_1 c_1) (not (p3 c_1)) (= c_1 c_0)) (or (not (p3 c_1)) (= c_0 c_1) (p10 c_0 (f13 c_0 c_0 c_1)) (not (p3 c_0)) (p14 c_0 c_0 c_1) (= c_0 c_0) (not (p3 c_0)) (= c_0 c_1)) (or (not (p3 c_1)) (= c_0 c_1) (p10 c_1 (f13 c_1 c_0 c_1)) (not (p3 c_1)) (p14 c_1 c_0 c_1) (= c_1 c_0) (not (p3 c_0)) (= c_1 c_1)) (or (not (p3 c_1)) (= c_1 c_1) (p10 c_0 (f13 c_0 c_1 c_1)) (not (p3 c_0)) (p14 c_0 c_1 c_1) (= c_0 c_1) (not (p3 c_1)) (= c_0 c_1)) (or (not (p3 c_1)) (= c_1 c_1) (p10 c_1 (f13 c_1 c_1 c_1)) (not (p3 c_1)) (p14 c_1 c_1 c_1) (= c_1 c_1) (not (p3 c_1)) (= c_1 c_1)) (p9 c18) (or (= c_0 c_0) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_0) (p14 c_0 c_0 c_0) (not (p3 c_0)) (p10 c_0 (f13 c_0 c_0 c_0)) (not (p3 c_0))) (or (= c_0 c_0) (not (p3 c_1)) (= c_1 c_0) (= c_1 c_0) (p14 c_1 c_0 c_0) (not (p3 c_0)) (p10 c_0 (f13 c_1 c_0 c_0)) (not (p3 c_0))) (or (= c_0 c_1) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_1) (p14 c_0 c_0 c_1) (not (p3 c_0)) (p10 c_1 (f13 c_0 c_0 c_1)) (not (p3 c_1))) (or (= c_0 c_1) (not (p3 c_1)) (= c_1 c_0) (= c_1 c_1) (p14 c_1 c_0 c_1) (not (p3 c_0)) (p10 c_1 (f13 c_1 c_0 c_1)) (not (p3 c_1))) (or (= c_1 c_0) (not (p3 c_0)) (= c_0 c_1) (= c_0 c_0) (p14 c_0 c_1 c_0) (not (p3 c_1)) (p10 c_0 (f13 c_0 c_1 c_0)) (not (p3 c_0))) (or (= c_1 c_0) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_0) (p14 c_1 c_1 c_0) (not (p3 c_1)) (p10 c_0 (f13 c_1 c_1 c_0)) (not (p3 c_0))) (or (= c_1 c_1) (not (p3 c_0)) (= c_0 c_1) (= c_0 c_1) (p14 c_0 c_1 c_1) (not (p3 c_1)) (p10 c_1 (f13 c_0 c_1 c_1)) (not (p3 c_1))) (or (= c_1 c_1) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_1) (p14 c_1 c_1 c_1) (not (p3 c_1)) (p10 c_1 (f13 c_1 c_1 c_1)) (not (p3 c_1))) (or (not (p3 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c18)) (p14 c_0 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c18)) (not (p10 c_0 c18)) (= c_0 c_0) (= c_0 c_0)) (or (not (p3 c_0)) (= c_0 c_0) (not (p3 c_1)) (not (p10 c_1 c18)) (p14 c_0 c_0 c_1) (not (p3 c_0)) (not (p10 c_0 c18)) (not (p10 c_0 c18)) (= c_0 c_1) (= c_0 c_1)) (or (not (p3 c_0)) (= c_1 c_0) (not (p3 c_0)) (not (p10 c_0 c18)) (p14 c_1 c_0 c_0) (not (p3 c_1)) (not (p10 c_0 c18)) (not (p10 c_1 c18)) (= c_1 c_0) (= c_0 c_0)) (or (not (p3 c_0)) (= c_1 c_0) (not (p3 c_1)) (not (p10 c_1 c18)) (p14 c_1 c_0 c_1) (not (p3 c_1)) (not (p10 c_0 c18)) (not (p10 c_1 c18)) (= c_1 c_1) (= c_0 c_1)) (or (not (p3 c_1)) (= c_0 c_1) (not (p3 c_0)) (not (p10 c_0 c18)) (p14 c_0 c_1 c_0) (not (p3 c_0)) (not (p10 c_1 c18)) (not (p10 c_0 c18)) (= c_0 c_0) (= c_1 c_0)) (or (not (p3 c_1)) (= c_0 c_1) (not (p3 c_1)) (not (p10 c_1 c18)) (p14 c_0 c_1 c_1) (not (p3 c_0)) (not (p10 c_1 c18)) (not (p10 c_0 c18)) (= c_0 c_1) (= c_1 c_1)) (or (not (p3 c_1)) (= c_1 c_1) (not (p3 c_0)) (not (p10 c_0 c18)) (p14 c_1 c_1 c_0) (not (p3 c_1)) (not (p10 c_1 c18)) (not (p10 c_1 c18)) (= c_1 c_0) (= c_1 c_0)) (or (not (p3 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c18)) (p14 c_1 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c18)) (not (p10 c_1 c18)) (= c_1 c_1) (= c_1 c_1)) (or (not (p9 c_0)) (p10 (f11 c_0) c_0)) (or (not (p9 c_1)) (p10 (f11 c_1) c_1)) (or (not (p4 c_0)) (p1 (f5 c_0) c_0)) (or (not (p4 c_1)) (p1 (f5 c_1) c_1)) (or (not (p10 c_0 c_0)) (not (p3 c_0)) (p10 (f16 c_0 c_0 c_0) c_0) (= c_0 c_0) (not (p10 c_0 c_0)) (not (p9 c_0)) (not (p9 c_0))) (or (not (p10 c_0 c_0)) (not (p3 c_0)) (p10 (f16 c_1 c_0 c_0) c_1) (= c_1 c_0) (not (p10 c_0 c_1)) (not (p9 c_1)) (not (p9 c_0))) (or (not (p10 c_0 c_1)) (not (p3 c_0)) (p10 (f16 c_0 c_1 c_0) c_0) (= c_0 c_1) (not (p10 c_0 c_0)) (not (p9 c_0)) (not (p9 c_1))) (or (not (p10 c_0 c_1)) (not (p3 c_0)) (p10 (f16 c_1 c_1 c_0) c_1) (= c_1 c_1) (not (p10 c_0 c_1)) (not (p9 c_1)) (not (p9 c_1))) (or (not (p10 c_1 c_0)) (not (p3 c_1)) (p10 (f16 c_0 c_0 c_1) c_0) (= c_0 c_0) (not (p10 c_1 c_0)) (not (p9 c_0)) (not (p9 c_0))) (or (not (p10 c_1 c_0)) (not (p3 c_1)) (p10 (f16 c_1 c_0 c_1) c_1) (= c_1 c_0) (not (p10 c_1 c_1)) (not (p9 c_1)) (not (p9 c_0))) (or (not (p10 c_1 c_1)) (not (p3 c_1)) (p10 (f16 c_0 c_1 c_1) c_0) (= c_0 c_1) (not (p10 c_1 c_0)) (not (p9 c_0)) (not (p9 c_1))) (or (not (p10 c_1 c_1)) (not (p3 c_1)) (p10 (f16 c_1 c_1 c_1) c_1) (= c_1 c_1) (not (p10 c_1 c_1)) (not (p9 c_1)) (not (p9 c_1))) (or (not (p4 c_0)) (not (= (f5 c_0) (f6 c_0)))) (or (not (p4 c_1)) (not (= (f5 c_1) (f6 c_1)))) (or (not (p4 c_0)) (p3 (f5 c_0))) (or (not (p4 c_1)) (p3 (f5 c_1))) (or (= c_0 c_0) (not (p3 c_0)) (p1 c_0 (f17 c_0 c_0 c_0)) (not (p3 c_0)) (not (p14 c_0 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (= c_0 c_0)) (or (= c_0 c_0) (not (p3 c_0)) (p1 c_0 (f17 c_1 c_0 c_0)) (not (p3 c_0)) (not (p14 c_1 c_0 c_0)) (= c_1 c_0) (not (p3 c_1)) (= c_1 c_0)) (or (= c_0 c_1) (not (p3 c_0)) (p1 c_0 (f17 c_0 c_0 c_1)) (not (p3 c_1)) (not (p14 c_0 c_0 c_1)) (= c_0 c_0) (not (p3 c_0)) (= c_0 c_1)) (or (= c_0 c_1) (not (p3 c_0)) (p1 c_0 (f17 c_1 c_0 c_1)) (not (p3 c_1)) (not (p14 c_1 c_0 c_1)) (= c_1 c_0) (not (p3 c_1)) (= c_1 c_1)) (or (= c_1 c_0) (not (p3 c_1)) (p1 c_1 (f17 c_0 c_1 c_0)) (not (p3 c_0)) (not (p14 c_0 c_1 c_0)) (= c_0 c_1) (not (p3 c_0)) (= c_0 c_0)) (or (= c_1 c_0) (not (p3 c_1)) (p1 c_1 (f17 c_1 c_1 c_0)) (not (p3 c_0)) (not (p14 c_1 c_1 c_0)) (= c_1 c_1) (not (p3 c_1)) (= c_1 c_0)) (or (= c_1 c_1) (not (p3 c_1)) (p1 c_1 (f17 c_0 c_1 c_1)) (not (p3 c_1)) (not (p14 c_0 c_1 c_1)) (= c_0 c_1) (not (p3 c_0)) (= c_0 c_1)) (or (= c_1 c_1) (not (p3 c_1)) (p1 c_1 (f17 c_1 c_1 c_1)) (not (p3 c_1)) (not (p14 c_1 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (= c_1 c_1)) (or (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_0) (p9 (f13 c_0 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (p14 c_0 c_0 c_0)) (or (not (p3 c_0)) (not (p3 c_0)) (= c_1 c_0) (= c_0 c_0) (p9 (f13 c_0 c_1 c_0)) (= c_0 c_1) (not (p3 c_1)) (p14 c_0 c_1 c_0)) (or (not (p3 c_0)) (not (p3 c_1)) (= c_0 c_1) (= c_0 c_1) (p9 (f13 c_0 c_0 c_1)) (= c_0 c_0) (not (p3 c_0)) (p14 c_0 c_0 c_1)) (or (not (p3 c_0)) (not (p3 c_1)) (= c_1 c_1) (= c_0 c_1) (p9 (f13 c_0 c_1 c_1)) (= c_0 c_1) (not (p3 c_1)) (p14 c_0 c_1 c_1)) (or (not (p3 c_1)) (not (p3 c_0)) (= c_0 c_0) (= c_1 c_0) (p9 (f13 c_1 c_0 c_0)) (= c_1 c_0) (not (p3 c_0)) (p14 c_1 c_0 c_0)) (or (not (p3 c_1)) (not (p3 c_0)) (= c_1 c_0) (= c_1 c_0) (p9 (f13 c_1 c_1 c_0)) (= c_1 c_1) (not (p3 c_1)) (p14 c_1 c_1 c_0)) (or (not (p3 c_1)) (not (p3 c_1)) (= c_0 c_1) (= c_1 c_1) (p9 (f13 c_1 c_0 c_1)) (= c_1 c_0) (not (p3 c_0)) (p14 c_1 c_0 c_1)) (or (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_1) (p9 (f13 c_1 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (p14 c_1 c_1 c_1)) (or (p1 c_0 (f17 c_0 c_0 c_0)) (not (p14 c_0 c_0 c_0)) (not (p3 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_0)) (or (p1 c_0 (f17 c_0 c_1 c_0)) (not (p14 c_0 c_1 c_0)) (not (p3 c_0)) (= c_0 c_1) (not (p3 c_1)) (not (p3 c_0)) (= c_1 c_0) (= c_0 c_0)) (or (p1 c_0 (f17 c_1 c_0 c_0)) (not (p14 c_1 c_0 c_0)) (not (p3 c_1)) (= c_1 c_0) (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0) (= c_1 c_0)) (or (p1 c_0 (f17 c_1 c_1 c_0)) (not (p14 c_1 c_1 c_0)) (not (p3 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p3 c_0)) (= c_1 c_0) (= c_1 c_0)) (or (p1 c_1 (f17 c_0 c_0 c_1)) (not (p14 c_0 c_0 c_1)) (not (p3 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p3 c_1)) (= c_0 c_1) (= c_0 c_1)) (or (p1 c_1 (f17 c_0 c_1 c_1)) (not (p14 c_0 c_1 c_1)) (not (p3 c_0)) (= c_0 c_1) (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1) (= c_0 c_1)) (or (p1 c_1 (f17 c_1 c_0 c_1)) (not (p14 c_1 c_0 c_1)) (not (p3 c_1)) (= c_1 c_0) (not (p3 c_0)) (not (p3 c_1)) (= c_0 c_1) (= c_1 c_1)) (or (p1 c_1 (f17 c_1 c_1 c_1)) (not (p14 c_1 c_1 c_1)) (not (p3 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_1)) (or (not (p10 c_0 c_0)) (= c_0 c_0) (not (p9 c_0)) (not (p9 c_0)) (p10 (f16 c_0 c_0 c_0) c_0) (not (p10 c_0 c_0)) (not (p3 c_0))) (or (not (p10 c_0 c_0)) (= c_1 c_0) (not (p9 c_0)) (not (p9 c_1)) (p10 (f16 c_1 c_0 c_0) c_0) (not (p10 c_0 c_1)) (not (p3 c_0))) (or (not (p10 c_0 c_1)) (= c_0 c_1) (not (p9 c_1)) (not (p9 c_0)) (p10 (f16 c_0 c_1 c_0) c_1) (not (p10 c_0 c_0)) (not (p3 c_0))) (or (not (p10 c_0 c_1)) (= c_1 c_1) (not (p9 c_1)) (not (p9 c_1)) (p10 (f16 c_1 c_1 c_0) c_1) (not (p10 c_0 c_1)) (not (p3 c_0))) (or (not (p10 c_1 c_0)) (= c_0 c_0) (not (p9 c_0)) (not (p9 c_0)) (p10 (f16 c_0 c_0 c_1) c_0) (not (p10 c_1 c_0)) (not (p3 c_1))) (or (not (p10 c_1 c_0)) (= c_1 c_0) (not (p9 c_0)) (not (p9 c_1)) (p10 (f16 c_1 c_0 c_1) c_0) (not (p10 c_1 c_1)) (not (p3 c_1))) (or (not (p10 c_1 c_1)) (= c_0 c_1) (not (p9 c_1)) (not (p9 c_0)) (p10 (f16 c_0 c_1 c_1) c_1) (not (p10 c_1 c_0)) (not (p3 c_1))) (or (not (p10 c_1 c_1)) (= c_1 c_1) (not (p9 c_1)) (not (p9 c_1)) (p10 (f16 c_1 c_1 c_1) c_1) (not (p10 c_1 c_1)) (not (p3 c_1))) (p4 c8) (or (not (p3 c_0)) (= c_0 c_0) (p1 c_0 (f2 c_0 c_0)) (not (p3 c_0))) (or (not (p3 c_0)) (= c_1 c_0) (p1 c_1 (f2 c_1 c_0)) (not (p3 c_1))) (or (not (p3 c_1)) (= c_0 c_1) (p1 c_0 (f2 c_0 c_1)) (not (p3 c_0))) (or (not (p3 c_1)) (= c_1 c_1) (p1 c_1 (f2 c_1 c_1)) (not (p3 c_1))) (or (= c_0 c_0) (= c_0 c_0) (not (p3 c_0)) (p1 c_0 (f17 c_0 c_0 c_0)) (not (p14 c_0 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p3 c_0))) (or (= c_0 c_0) (= c_1 c_0) (not (p3 c_0)) (p1 c_1 (f17 c_1 c_0 c_0)) (not (p14 c_1 c_0 c_0)) (= c_1 c_0) (not (p3 c_0)) (not (p3 c_1))) (or (= c_0 c_1) (= c_0 c_1) (not (p3 c_0)) (p1 c_0 (f17 c_0 c_0 c_1)) (not (p14 c_0 c_0 c_1)) (= c_0 c_0) (not (p3 c_1)) (not (p3 c_0))) (or (= c_0 c_1) (= c_1 c_1) (not (p3 c_0)) (p1 c_1 (f17 c_1 c_0 c_1)) (not (p14 c_1 c_0 c_1)) (= c_1 c_0) (not (p3 c_1)) (not (p3 c_1))) (or (= c_1 c_0) (= c_0 c_0) (not (p3 c_1)) (p1 c_0 (f17 c_0 c_1 c_0)) (not (p14 c_0 c_1 c_0)) (= c_0 c_1) (not (p3 c_0)) (not (p3 c_0))) (or (= c_1 c_0) (= c_1 c_0) (not (p3 c_1)) (p1 c_1 (f17 c_1 c_1 c_0)) (not (p14 c_1 c_1 c_0)) (= c_1 c_1) (not (p3 c_0)) (not (p3 c_1))) (or (= c_1 c_1) (= c_0 c_1) (not (p3 c_1)) (p1 c_0 (f17 c_0 c_1 c_1)) (not (p14 c_0 c_1 c_1)) (= c_0 c_1) (not (p3 c_1)) (not (p3 c_0))) (or (= c_1 c_1) (= c_1 c_1) (not (p3 c_1)) (p1 c_1 (f17 c_1 c_1 c_1)) (not (p14 c_1 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p3 c_1))) (or (p14 c_0 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_0)) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p9 c_0)) (not (p10 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_0) (not (p10 c_0 c_0))) (or (p14 c_0 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_1)) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_1)) (= c_0 c_1) (not (p3 c_0)) (not (p9 c_1)) (not (p10 c_0 c_1)) (= c_0 c_0) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_0) (not (p10 c_0 c_0))) (or (p14 c_0 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p10 c_0 c_0)) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_0)) (= c_1 c_0) (not (p3 c_0)) (not (p9 c_0)) (not (p10 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_0) (not (p10 c_0 c_1))) (or (p14 c_0 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p10 c_0 c_1)) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_1)) (= c_1 c_1) (not (p3 c_0)) (not (p9 c_1)) (not (p10 c_0 c_1)) (= c_0 c_0) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_0) (not (p10 c_0 c_1))) (or (p14 c_0 c_0 c_1) (not (p3 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_0)) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_0)) (= c_0 c_0) (not (p3 c_1)) (not (p9 c_0)) (not (p10 c_0 c_0)) (= c_0 c_1) (not (p3 c_0)) (= c_0 c_1) (= c_0 c_0) (not (p10 c_0 c_0))) (or (p14 c_0 c_0 c_1) (not (p3 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_1)) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_1)) (= c_0 c_1) (not (p3 c_1)) (not (p9 c_1)) (not (p10 c_0 c_1)) (= c_0 c_1) (not (p3 c_0)) (= c_0 c_1) (= c_0 c_0) (not (p10 c_0 c_0))) (or (p14 c_0 c_0 c_1) (not (p3 c_0)) (not (p10 c_1 c_1)) (not (p10 c_0 c_0)) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_0)) (= c_1 c_0) (not (p3 c_1)) (not (p9 c_0)) (not (p10 c_0 c_0)) (= c_0 c_1) (not (p3 c_0)) (= c_0 c_1) (= c_0 c_0) (not (p10 c_0 c_1))) (or (p14 c_0 c_0 c_1) (not (p3 c_0)) (not (p10 c_1 c_1)) (not (p10 c_0 c_1)) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p9 c_1)) (not (p10 c_0 c_1)) (= c_0 c_1) (not (p3 c_0)) (= c_0 c_1) (= c_0 c_0) (not (p10 c_0 c_1))) (or (p14 c_0 c_1 c_0) (not (p3 c_1)) (not (p10 c_0 c_0)) (not (p10 c_0 c_0)) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p9 c_0)) (not (p10 c_1 c_0)) (= c_1 c_0) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_1) (not (p10 c_1 c_0))) (or (p14 c_0 c_1 c_0) (not (p3 c_1)) (not (p10 c_0 c_0)) (not (p10 c_0 c_1)) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_0 c_1)) (= c_0 c_1) (not (p3 c_0)) (not (p9 c_1)) (not (p10 c_1 c_1)) (= c_1 c_0) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_1) (not (p10 c_1 c_0))) (or (p14 c_0 c_1 c_0) (not (p3 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_0)) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_0)) (= c_1 c_0) (not (p3 c_0)) (not (p9 c_0)) (not (p10 c_1 c_0)) (= c_1 c_0) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_1) (not (p10 c_1 c_1))) (or (p14 c_0 c_1 c_0) (not (p3 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_1)) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_0 c_1)) (= c_1 c_1) (not (p3 c_0)) (not (p9 c_1)) (not (p10 c_1 c_1)) (= c_1 c_0) (not (p3 c_0)) (= c_0 c_0) (= c_0 c_1) (not (p10 c_1 c_1))) (or (p14 c_0 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p10 c_0 c_0)) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_0)) (= c_0 c_0) (not (p3 c_1)) (not (p9 c_0)) (not (p10 c_1 c_0)) (= c_1 c_1) (not (p3 c_0)) (= c_0 c_1) (= c_0 c_1) (not (p10 c_1 c_0))) (or (p14 c_0 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p10 c_0 c_1)) (not (p9 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_1)) (= c_0 c_1) (not (p3 c_1)) (not (p9 c_1)) (not (p10 c_1 c_1)) (= c_1 c_1) (not (p3 c_0)) (= c_0 c_1) (= c_0 c_1) (not (p10 c_1 c_0))) (or (p14 c_0 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_0)) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_0)) (= c_1 c_0) (not (p3 c_1)) (not (p9 c_0)) (not (p10 c_1 c_0)) (= c_1 c_1) (not (p3 c_0)) (= c_0 c_1) (= c_0 c_1) (not (p10 c_1 c_1))) (or (p14 c_0 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_1)) (not (p9 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p9 c_1)) (not (p10 c_1 c_1)) (= c_1 c_1) (not (p3 c_0)) (= c_0 c_1) (= c_0 c_1) (not (p10 c_1 c_1))) (or (p14 c_1 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_0)) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p9 c_0)) (not (p10 c_0 c_0)) (= c_0 c_0) (not (p3 c_1)) (= c_1 c_0) (= c_1 c_0) (not (p10 c_0 c_0))) (or (p14 c_1 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_0)) (not (p10 c_1 c_1)) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_1)) (= c_0 c_1) (not (p3 c_0)) (not (p9 c_1)) (not (p10 c_0 c_1)) (= c_0 c_0) (not (p3 c_1)) (= c_1 c_0) (= c_1 c_0) (not (p10 c_0 c_0))) (or (p14 c_1 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p10 c_1 c_0)) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_0)) (= c_1 c_0) (not (p3 c_0)) (not (p9 c_0)) (not (p10 c_0 c_0)) (= c_0 c_0) (not (p3 c_1)) (= c_1 c_0) (= c_1 c_0) (not (p10 c_0 c_1))) (or (p14 c_1 c_0 c_0) (not (p3 c_0)) (not (p10 c_0 c_1)) (not (p10 c_1 c_1)) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_1)) (= c_1 c_1) (not (p3 c_0)) (not (p9 c_1)) (not (p10 c_0 c_1)) (= c_0 c_0) (not (p3 c_1)) (= c_1 c_0) (= c_1 c_0) (not (p10 c_0 c_1))) (or (p14 c_1 c_0 c_1) (not (p3 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_0)) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_0)) (= c_0 c_0) (not (p3 c_1)) (not (p9 c_0)) (not (p10 c_0 c_0)) (= c_0 c_1) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_0) (not (p10 c_0 c_0))) (or (p14 c_1 c_0 c_1) (not (p3 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_1)) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_1)) (= c_0 c_1) (not (p3 c_1)) (not (p9 c_1)) (not (p10 c_0 c_1)) (= c_0 c_1) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_0) (not (p10 c_0 c_0))) (or (p14 c_1 c_0 c_1) (not (p3 c_0)) (not (p10 c_1 c_1)) (not (p10 c_1 c_0)) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_0)) (= c_1 c_0) (not (p3 c_1)) (not (p9 c_0)) (not (p10 c_0 c_0)) (= c_0 c_1) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_0) (not (p10 c_0 c_1))) (or (p14 c_1 c_0 c_1) (not (p3 c_0)) (not (p10 c_1 c_1)) (not (p10 c_1 c_1)) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p9 c_1)) (not (p10 c_0 c_1)) (= c_0 c_1) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_0) (not (p10 c_0 c_1))) (or (p14 c_1 c_1 c_0) (not (p3 c_1)) (not (p10 c_0 c_0)) (not (p10 c_1 c_0)) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_0)) (= c_0 c_0) (not (p3 c_0)) (not (p9 c_0)) (not (p10 c_1 c_0)) (= c_1 c_0) (not (p3 c_1)) (= c_1 c_0) (= c_1 c_1) (not (p10 c_1 c_0))) (or (p14 c_1 c_1 c_0) (not (p3 c_1)) (not (p10 c_0 c_0)) (not (p10 c_1 c_1)) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_0 c_1)) (= c_0 c_1) (not (p3 c_0)) (not (p9 c_1)) (not (p10 c_1 c_1)) (= c_1 c_0) (not (p3 c_1)) (= c_1 c_0) (= c_1 c_1) (not (p10 c_1 c_0))) (or (p14 c_1 c_1 c_0) (not (p3 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_0)) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_0)) (= c_1 c_0) (not (p3 c_0)) (not (p9 c_0)) (not (p10 c_1 c_0)) (= c_1 c_0) (not (p3 c_1)) (= c_1 c_0) (= c_1 c_1) (not (p10 c_1 c_1))) (or (p14 c_1 c_1 c_0) (not (p3 c_1)) (not (p10 c_0 c_1)) (not (p10 c_1 c_1)) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_0 c_1)) (= c_1 c_1) (not (p3 c_0)) (not (p9 c_1)) (not (p10 c_1 c_1)) (= c_1 c_0) (not (p3 c_1)) (= c_1 c_0) (= c_1 c_1) (not (p10 c_1 c_1))) (or (p14 c_1 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p10 c_1 c_0)) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_0)) (= c_0 c_0) (not (p3 c_1)) (not (p9 c_0)) (not (p10 c_1 c_0)) (= c_1 c_1) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_1) (not (p10 c_1 c_0))) (or (p14 c_1 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_0)) (not (p10 c_1 c_1)) (not (p9 c_0)) (not (p10 c_1 c_0)) (not (p10 c_1 c_1)) (= c_0 c_1) (not (p3 c_1)) (not (p9 c_1)) (not (p10 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_1) (not (p10 c_1 c_0))) (or (p14 c_1 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_0)) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_0)) (= c_1 c_0) (not (p3 c_1)) (not (p9 c_0)) (not (p10 c_1 c_0)) (= c_1 c_1) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_1) (not (p10 c_1 c_1))) (or (p14 c_1 c_1 c_1) (not (p3 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_1)) (not (p9 c_1)) (not (p10 c_1 c_1)) (not (p10 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (not (p9 c_1)) (not (p10 c_1 c_1)) (= c_1 c_1) (not (p3 c_1)) (= c_1 c_1) (= c_1 c_1) (not (p10 c_1 c_1))) (or (= c_0 c_0) (not (p3 c_0)) (= c_0 c_0) (p14 c_0 c_0 c_0) (not (p3 c_0)) (not (p3 c_0)) (= c_0 c_0) (p10 c_0 (f13 c_0 c_0 c_0))) (or (= c_0 c_0) (not (p3 c_0)) (= c_0 c_1) (p14 c_0 c_0 c_1) (not (p3 c_0)) (not (p3 c_1)) (= c_0 c_1) (p10 c_0 (f13 c_0 c_0 c_1))) (or (= c_0 c_1) (not (p3 c_0)) (= c_1 c_0) (p14 c_0 c_1 c_0) (not (p3 c_1)) (not (p3 c_0)) (= c_0 c_0) (p10 c_1 (f13 c_0 c_1 c_0))) (or (= c_0 c_1) (not (p3 c_0)) (= c_1 c_1) (p14 c_0 c_1 c_1) (not (p3 c_1)) (not (p3 c_1)) (= c_0 c_1) (p10 c_1 (f13 c_0 c_1 c_1))) (or (= c_1 c_0) (not (p3 c_1)) (= c_0 c_0) (p14 c_1 c_0 c_0) (not (p3 c_0)) (not (p3 c_0)) (= c_1 c_0) (p10 c_0 (f13 c_1 c_0 c_0))) (or (= c_1 c_0) (not (p3 c_1)) (= c_0 c_1) (p14 c_1 c_0 c_1) (not (p3 c_0)) (not (p3 c_1)) (= c_1 c_1) (p10 c_0 (f13 c_1 c_0 c_1))) (or (= c_1 c_1) (not (p3 c_1)) (= c_1 c_0) (p14 c_1 c_1 c_0) (not (p3 c_1)) (not (p3 c_0)) (= c_1 c_0) (p10 c_1 (f13 c_1 c_1 c_0))) (or (= c_1 c_1) (not (p3 c_1)) (= c_1 c_1) (p14 c_1 c_1 c_1) (not (p3 c_1)) (not (p3 c_1)) (= c_1 c_1) (p10 c_1 (f13 c_1 c_1 c_1))) (or (p3 (f7 c_0)) (not (p4 c_0))) (or (p3 (f7 c_1)) (not (p4 c_1))) (or (not (= c_0 (f16 c_0 c_0 c_0))) (not (p10 c_0 c_0)) (not (p10 c_0 c_0)) (not (p9 c_0)) (not (p3 c_0)) (= c_0 c_0) (not (p9 c_0))) (or (not (= c_0 (f16 c_0 c_1 c_0))) (not (p10 c_0 c_0)) (not (p10 c_0 c_1)) (not (p9 c_0)) (not (p3 c_0)) (= c_0 c_1) (not (p9 c_1))) (or (not (= c_0 (f16 c_1 c_0 c_0))) (not (p10 c_0 c_1)) (not (p10 c_0 c_0)) (not (p9 c_1)) (not (p3 c_0)) (= c_1 c_0) (not (p9 c_0))) (or (not (= c_0 (f16 c_1 c_1 c_0))) (not (p10 c_0 c_1)) (not (p10 c_0 c_1)) (not (p9 c_1)) (not (p3 c_0)) (= c_1 c_1) (not (p9 c_1))) (or (not (= c_1 (f16 c_0 c_0 c_1))) (not (p10 c_1 c_0)) (not (p10 c_1 c_0)) (not (p9 c_0)) (not (p3 c_1)) (= c_0 c_0) (not (p9 c_0))) (or (not (= c_1 (f16 c_0 c_1 c_1))) (not (p10 c_1 c_0)) (not (p10 c_1 c_1)) (not (p9 c_0)) (not (p3 c_1)) (= c_0 c_1) (not (p9 c_1))) (or (not (= c_1 (f16 c_1 c_0 c_1))) (not (p10 c_1 c_1)) (not (p10 c_1 c_0)) (not (p9 c_1)) (not (p3 c_1)) (= c_1 c_0) (not (p9 c_0))) (or (not (= c_1 (f16 c_1 c_1 c_1))) (not (p10 c_1 c_1)) (not (p10 c_1 c_1)) (not (p9 c_1)) (not (p3 c_1)) (= c_1 c_1) (not (p9 c_1))) (or (p3 (f6 c_0)) (not (p4 c_0))) (or (p3 (f6 c_1)) (not (p4 c_1))) (or (not (p9 c_0)) (not (p1 c_0 c_0)) (= c_0 c_0) (not (p10 c_0 c_0)) (p15 c_0 c_0) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p4 c_0)) (not (p1 c_0 c_0)) (not (p3 c_0))) (or (not (p9 c_0)) (not (p1 c_0 c_0)) (= c_1 c_0) (not (p10 c_0 c_0)) (p15 c_0 c_0) (not (p10 c_1 c_0)) (not (p3 c_0)) (not (p4 c_0)) (not (p1 c_1 c_0)) (not (p3 c_1))) (or (not (p9 c_0)) (not (p1 c_0 c_1)) (= c_0 c_0) (not (p10 c_0 c_0)) (p15 c_1 c_0) (not (p10 c_0 c_0)) (not (p3 c_0)) (not (p4 c_1)) (not (p1 c_0 c_1)) (not (p3 c_0))) (or (not (p9 c_0)) (not (p1 c_0 c_1)) (= c_1 c_0) (not (p10 c_0 c_0)) (p15 c_1 c_0) (not (p10 c_1 c_0)) (not (p3 c_0)) (not (p4 c_1)) (not (p1 c_1 c_1)) (not (p3 c_1))) (or (not (p9 c_0)) (not (p1 c_1 c_0)) (= c_0 c_1) (not (p10 c_1 c_0)) (p15 c_0 c_0) (not (p10 c_0 c_0)) (not (p3 c_1)) (not (p4 c_0)) (not (p1 c_0 c_0)) (not (p3 c_0))) (or (not (p9 c_0)) (not (p1 c_1 c_0)) (= c_1 c_1) (not (p10 c_1 c_0)) (p15 c_0 c_0) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p4 c_0)) (not (p1 c_1 c_0)) (not (p3 c_1))) (or (not (p9 c_0)) (not (p1 c_1 c_1)) (= c_0 c_1) (not (p10 c_1 c_0)) (p15 c_1 c_0) (not (p10 c_0 c_0)) (not (p3 c_1)) (not (p4 c_1)) (not (p1 c_0 c_1)) (not (p3 c_0))) (or (not (p9 c_0)) (not (p1 c_1 c_1)) (= c_1 c_1) (not (p10 c_1 c_0)) (p15 c_1 c_0) (not (p10 c_1 c_0)) (not (p3 c_1)) (not (p4 c_1)) (not (p1 c_1 c_1)) (not (p3 c_1))) (or (not (p9 c_1)) (not (p1 c_0 c_0)) (= c_0 c_0) (not (p10 c_0 c_1)) (p15 c_0 c_1) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p4 c_0)) (not (p1 c_0 c_0)) (not (p3 c_0))) (or (not (p9 c_1)) (not (p1 c_0 c_0)) (= c_1 c_0) (not (p10 c_0 c_1)) (p15 c_0 c_1) (not (p10 c_1 c_1)) (not (p3 c_0)) (not (p4 c_0)) (not (p1 c_1 c_0)) (not (p3 c_1))) (or (not (p9 c_1)) (not (p1 c_0 c_1)) (= c_0 c_0) (not (p10 c_0 c_1)) (p15 c_1 c_1) (not (p10 c_0 c_1)) (not (p3 c_0)) (not (p4 c_1)) (not (p1 c_0 c_1)) (not (p3 c_0))) (or (not (p9 c_1)) (not (p1 c_0 c_1)) (= c_1 c_0) (not (p10 c_0 c_1)) (p15 c_1 c_1) (not (p10 c_1 c_1)) (not (p3 c_0)) (not (p4 c_1)) (not (p1 c_1 c_1)) (not (p3 c_1))) (or (not (p9 c_1)) (not (p1 c_1 c_0)) (= c_0 c_1) (not (p10 c_1 c_1)) (p15 c_0 c_1) (not (p10 c_0 c_1)) (not (p3 c_1)) (not (p4 c_0)) (not (p1 c_0 c_0)) (not (p3 c_0))) (or (not (p9 c_1)) (not (p1 c_1 c_0)) (= c_1 c_1) (not (p10 c_1 c_1)) (p15 c_0 c_1) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p4 c_0)) (not (p1 c_1 c_0)) (not (p3 c_1))) (or (not (p9 c_1)) (not (p1 c_1 c_1)) (= c_0 c_1) (not (p10 c_1 c_1)) (p15 c_1 c_1) (not (p10 c_0 c_1)) (not (p3 c_1)) (not (p4 c_1)) (not (p1 c_0 c_1)) (not (p3 c_0))) (or (not (p9 c_1)) (not (p1 c_1 c_1)) (= c_1 c_1) (not (p10 c_1 c_1)) (p15 c_1 c_1) (not (p10 c_1 c_1)) (not (p3 c_1)) (not (p4 c_1)) (not (p1 c_1 c_1)) (not (p3 c_1))) (or (not (p9 c_0)) (p3 (f11 c_0))) (or (not (p9 c_1)) (p3 (f11 c_1))) (or (not (p9 c_0)) (not (p10 (f12 c_0) c_0))) (or (not (p9 c_1)) (not (p10 (f12 c_1) c_1))) (or (= (f17 c_0 c_0 c_0) c_0) (= (f17 c_0 c_0 c_0) c_1)) (or (= (f17 c_0 c_0 c_1) c_0) (= (f17 c_0 c_0 c_1) c_1)) (or (= (f17 c_0 c_1 c_0) c_0) (= (f17 c_0 c_1 c_0) c_1)) (or (= (f17 c_0 c_1 c_1) c_0) (= (f17 c_0 c_1 c_1) c_1)) (or (= (f17 c_1 c_0 c_0) c_0) (= (f17 c_1 c_0 c_0) c_1)) (or (= (f17 c_1 c_0 c_1) c_0) (= (f17 c_1 c_0 c_1) c_1)) (or (= (f17 c_1 c_1 c_0) c_0) (= (f17 c_1 c_1 c_0) c_1)) (or (= (f17 c_1 c_1 c_1) c_0) (= (f17 c_1 c_1 c_1) c_1)) (or (= (f16 c_0 c_0 c_0) c_0) (= (f16 c_0 c_0 c_0) c_1)) (or (= (f16 c_0 c_0 c_1) c_0) (= (f16 c_0 c_0 c_1) c_1)) (or (= (f16 c_0 c_1 c_0) c_0) (= (f16 c_0 c_1 c_0) c_1)) (or (= (f16 c_0 c_1 c_1) c_0) (= (f16 c_0 c_1 c_1) c_1)) (or (= (f16 c_1 c_0 c_0) c_0) (= (f16 c_1 c_0 c_0) c_1)) (or (= (f16 c_1 c_0 c_1) c_0) (= (f16 c_1 c_0 c_1) c_1)) (or (= (f16 c_1 c_1 c_0) c_0) (= (f16 c_1 c_1 c_0) c_1)) (or (= (f16 c_1 c_1 c_1) c_0) (= (f16 c_1 c_1 c_1) c_1)) (or (= (f13 c_0 c_0 c_0) c_0) (= (f13 c_0 c_0 c_0) c_1)) (or (= (f13 c_0 c_0 c_1) c_0) (= (f13 c_0 c_0 c_1) c_1)) (or (= (f13 c_0 c_1 c_0) c_0) (= (f13 c_0 c_1 c_0) c_1)) (or (= (f13 c_0 c_1 c_1) c_0) (= (f13 c_0 c_1 c_1) c_1)) (or (= (f13 c_1 c_0 c_0) c_0) (= (f13 c_1 c_0 c_0) c_1)) (or (= (f13 c_1 c_0 c_1) c_0) (= (f13 c_1 c_0 c_1) c_1)) (or (= (f13 c_1 c_1 c_0) c_0) (= (f13 c_1 c_1 c_0) c_1)) (or (= (f13 c_1 c_1 c_1) c_0) (= (f13 c_1 c_1 c_1) c_1)) (or (= (f2 c_0 c_0) c_0) (= (f2 c_0 c_0) c_1)) (or (= (f2 c_0 c_1) c_0) (= (f2 c_0 c_1) c_1)) (or (= (f2 c_1 c_0) c_0) (= (f2 c_1 c_0) c_1)) (or (= (f2 c_1 c_1) c_0) (= (f2 c_1 c_1) c_1)) (or (= (f12 c_0) c_0) (= (f12 c_0) c_1)) (or (= (f12 c_1) c_0) (= (f12 c_1) c_1)) (or (= (f6 c_0) c_0) (= (f6 c_0) c_1)) (or (= (f6 c_1) c_0) (= (f6 c_1) c_1)) (or (= (f7 c_0) c_0) (= (f7 c_0) c_1)) (or (= (f7 c_1) c_0) (= (f7 c_1) c_1)) (or (= (f11 c_0) c_0) (= (f11 c_0) c_1)) (or (= (f11 c_1) c_0) (= (f11 c_1) c_1)) (or (= (f5 c_0) c_0) (= (f5 c_0) c_1)) (or (= (f5 c_1) c_0) (= (f5 c_1) c_1)) (or (= c18 c_0) (= c18 c_1)) (or (= c8 c_0) (= c8 c_1))))
(step t0 (cl (not (= (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (or (p1 (f7 c_1) c_1) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))))) (not (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1)))) (or (p1 (f7 c_1) c_1) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1)))) :rule equiv_pos2)
(step t1 (cl (= (= (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)) true) (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)))) :rule equiv_simplify)
(step t2 (cl (not (= (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)) true)) (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1))) :rule equiv1 :premises (t1))
(step t3 (cl (= (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)) (= (p1 (f7 c_1) c_1) (not (not (p1 (f7 c_1) c_1)))))) :rule rare_rewrite :args ("eq-symm" (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)))
(step t4 (cl (= (p1 (f7 c_1) c_1) (p1 (f7 c_1) c_1))) :rule refl)
(step t5 (cl (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1))) :rule rare_rewrite :args ("bool-double-not-elim" (p1 (f7 c_1) c_1)))
(step t6 (cl (= (= (p1 (f7 c_1) c_1) (not (not (p1 (f7 c_1) c_1)))) (= (p1 (f7 c_1) c_1) (p1 (f7 c_1) c_1)))) :rule cong :premises (t4 t5))
(step t7 (cl (= (= (p1 (f7 c_1) c_1) (p1 (f7 c_1) c_1)) true)) :rule rare_rewrite :args ("eq-refl" (p1 (f7 c_1) c_1)))
(step t8 (cl (= (= (p1 (f7 c_1) c_1) (not (not (p1 (f7 c_1) c_1)))) true)) :rule trans :premises (t6 t7))
(step t9 (cl (= (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1)) true)) :rule trans :premises (t3 t8))
(step t10 (cl (= (not (not (p1 (f7 c_1) c_1))) (p1 (f7 c_1) c_1))) :rule resolution :premises (t2 t9))
(step t11 (cl (= (not (= c_1 (f7 c_1))) (not (= c_1 (f7 c_1))))) :rule refl)
(step t12 (cl (= (not (= c_1 (f5 c_1))) (not (= c_1 (f5 c_1))))) :rule refl)
(step t13 (cl (= (not (p1 (f5 c_1) c_1)) (not (p1 (f5 c_1) c_1)))) :rule refl)
(step t14 (cl (= (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (or (p1 (f7 c_1) c_1) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))))) :rule cong :premises (t10 t11 t12 t13))
(step t15 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1)) false) (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) :rule implies_neg1)
(anchor :step t16)
(assume t16.a0 (not (p1 (f7 c_1) c_1)))
(assume t16.a1 (= c_1 (f7 c_1)))
(assume t16.a2 (= c_1 (f5 c_1)))
(assume t16.a3 (p1 (f5 c_1) c_1))
(step t16.t0 (cl (not (= (= true false) false)) (not (= true false)) false) :rule equiv_pos2)
(step t16.t1 (cl (= (= true false) false)) :rule rare_rewrite :args ("evaluate"))
(step t16.t2 (cl (= (= (p1 (f5 c_1) c_1) true) (p1 (f5 c_1) c_1))) :rule equiv_simplify)
(step t16.t3 (cl (= (p1 (f5 c_1) c_1) true) (not (p1 (f5 c_1) c_1))) :rule equiv2 :premises (t16.t2))
(step t16.t4 (cl (= (p1 (f5 c_1) c_1) true)) :rule resolution :premises (t16.t3 t16.a3))
(step t16.t5 (cl (= true (p1 (f5 c_1) c_1))) :rule symm :premises (t16.t4))
(step t16.t6 (cl (= (f5 c_1) c_1)) :rule symm :premises (t16.a2))
(step t16.t7 (cl (= c_1 c_1)) :rule refl)
(step t16.t8 (cl (= (p1 (f5 c_1) c_1) (p1 c_1 c_1))) :rule cong :premises (t16.t6 t16.t7))
(step t16.t9 (cl (= (f7 c_1) c_1)) :rule symm :premises (t16.a1))
(step t16.t10 (cl (= c_1 (f7 c_1))) :rule symm :premises (t16.t9))
(step t16.t11 (cl (= (p1 c_1 c_1) (p1 (f7 c_1) c_1))) :rule cong :premises (t16.t10 t16.t7))
(step t16.t12 (cl (= (= (p1 (f7 c_1) c_1) false) (not (p1 (f7 c_1) c_1)))) :rule equiv_simplify)
(step t16.t13 (cl (= (p1 (f7 c_1) c_1) false) (not (not (p1 (f7 c_1) c_1)))) :rule equiv2 :premises (t16.t12))
(step t16.t14 (cl (not (not (not (p1 (f7 c_1) c_1)))) (p1 (f7 c_1) c_1)) :rule not_not)
(step t16.t15 (cl (= (p1 (f7 c_1) c_1) false) (p1 (f7 c_1) c_1)) :rule resolution :premises (t16.t13 t16.t14))
(step t16.t16 (cl (= (p1 (f7 c_1) c_1) false)) :rule resolution :premises (t16.t15 t16.a0))
(step t16.t17 (cl (= true false)) :rule trans :premises (t16.t5 t16.t8 t16.t11 t16.t16))
(step t16.t18 (cl false) :rule resolution :premises (t16.t0 t16.t1 t16.t17))
(step t16 (cl (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1)) false) :rule subproof :discharge (t16.a0 t16.a1 t16.a2 t16.a3))
(step t17 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (p1 (f7 c_1) c_1))) :rule and_pos :args (0))
(step t18 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) (= c_1 (f7 c_1))) :rule and_pos :args (1))
(step t19 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) (= c_1 (f5 c_1))) :rule and_pos :args (2))
(step t20 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) (p1 (f5 c_1) c_1)) :rule and_pos :args (3))
(step t21 (cl false (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1)))) :rule resolution :premises (t16 t17 t18 t19 t20))
(step t22 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) false) :rule reordering :premises (t21))
(step t23 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))) false) :rule contraction :premises (t22))
(step t24 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1)) false) false) :rule resolution :premises (t15 t23))
(step t25 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1)) false) (not false)) :rule implies_neg2)
(step t26 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1)) false) (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1)) false)) :rule resolution :premises (t24 t25))
(step t27 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1)) false)) :rule contraction :premises (t26))
(step t28 (cl (= (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1)) false) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1))))) :rule implies_simplify)
(step t29 (cl (not (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1)) false)) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1)))) :rule equiv1 :premises (t28))
(step t30 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f5 c_1)) (p1 (f5 c_1) c_1)))) :rule resolution :premises (t27 t29))
(step t31 (cl (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))) :rule not_and :premises (t30))
(step t32 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (not (not (not (p1 (f7 c_1) c_1))))) :rule or_neg :args (0))
(step t33 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (not (not (= c_1 (f7 c_1))))) :rule or_neg :args (1))
(step t34 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (not (not (= c_1 (f5 c_1))))) :rule or_neg :args (2))
(step t35 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (not (not (p1 (f5 c_1) c_1)))) :rule or_neg :args (3))
(step t36 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1)))) :rule resolution :premises (t31 t32 t33 t34 t35))
(step t37 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1)))) :rule contraction :premises (t36))
(step t38 (cl (or (p1 (f7 c_1) c_1) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1)))) :rule resolution :premises (t0 t14 t37))
(step t39 (cl (p1 (f7 c_1) c_1) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1))) (not (p1 (f5 c_1) c_1))) :rule or :premises (t38))
(step t40 (cl (p1 (f7 c_1) c_1) (not (p1 (f5 c_1) c_1)) (not (= c_1 (f7 c_1))) (not (= c_1 (f5 c_1)))) :rule reordering :premises (t39))
(step t41 (cl (not (= (or (= (f5 c_1) c_0) (= (f5 c_1) c_1)) (or (= c_0 (f5 c_1)) (= c_1 (f5 c_1))))) (not (or (= (f5 c_1) c_0) (= (f5 c_1) c_1))) (or (= c_0 (f5 c_1)) (= c_1 (f5 c_1)))) :rule equiv_pos2)
(step t42 (cl (= (= (f5 c_1) c_0) (= c_0 (f5 c_1)))) :rule rare_rewrite :args ("eq-symm" (f5 c_1) c_0))
(step t43 (cl (= (= (f5 c_1) c_1) (= c_1 (f5 c_1)))) :rule rare_rewrite :args ("eq-symm" (f5 c_1) c_1))
(step t44 (cl (= (or (= (f5 c_1) c_0) (= (f5 c_1) c_1)) (or (= c_0 (f5 c_1)) (= c_1 (f5 c_1))))) :rule cong :premises (t42 t43))
(step t45 (cl (or (= (f5 c_1) c_0) (= (f5 c_1) c_1))) :rule and :premises (a0) :args (274))
(step t46 (cl (or (= c_0 (f5 c_1)) (= c_1 (f5 c_1)))) :rule resolution :premises (t41 t44 t45))
(step t47 (cl (= c_0 (f5 c_1)) (= c_1 (f5 c_1))) :rule or :premises (t46))
(step t48 (cl (not (= (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) (or (= (f6 c_1) (f5 c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))))) (not (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1))))) (or (= (f6 c_1) (f5 c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1))))) :rule equiv_pos2)
(step t49 (cl (= (= (= (not (not (= (f6 c_1) (f5 c_1)))) (= (f6 c_1) (f5 c_1))) true) (= (not (not (= (f6 c_1) (f5 c_1)))) (= (f6 c_1) (f5 c_1))))) :rule equiv_simplify)
(step t50 (cl (not (= (= (not (not (= (f6 c_1) (f5 c_1)))) (= (f6 c_1) (f5 c_1))) true)) (= (not (not (= (f6 c_1) (f5 c_1)))) (= (f6 c_1) (f5 c_1)))) :rule equiv1 :premises (t49))
(step t51 (cl (= (= (not (not (= (f6 c_1) (f5 c_1)))) (= (f6 c_1) (f5 c_1))) (= (= (f6 c_1) (f5 c_1)) (not (not (= (f6 c_1) (f5 c_1))))))) :rule rare_rewrite :args ("eq-symm" (not (not (= (f6 c_1) (f5 c_1)))) (= (f6 c_1) (f5 c_1))))
(step t52 (cl (= (= (f6 c_1) (f5 c_1)) (= (f6 c_1) (f5 c_1)))) :rule refl)
(step t53 (cl (= (not (not (= (f6 c_1) (f5 c_1)))) (= (f6 c_1) (f5 c_1)))) :rule rare_rewrite :args ("bool-double-not-elim" (= (f6 c_1) (f5 c_1))))
(step t54 (cl (= (= (= (f6 c_1) (f5 c_1)) (not (not (= (f6 c_1) (f5 c_1))))) (= (= (f6 c_1) (f5 c_1)) (= (f6 c_1) (f5 c_1))))) :rule cong :premises (t52 t53))
(step t55 (cl (= (= (= (f6 c_1) (f5 c_1)) (= (f6 c_1) (f5 c_1))) true)) :rule rare_rewrite :args ("eq-refl" (= (f6 c_1) (f5 c_1))))
(step t56 (cl (= (= (= (f6 c_1) (f5 c_1)) (not (not (= (f6 c_1) (f5 c_1))))) true)) :rule trans :premises (t54 t55))
(step t57 (cl (= (= (not (not (= (f6 c_1) (f5 c_1)))) (= (f6 c_1) (f5 c_1))) true)) :rule trans :premises (t51 t56))
(step t58 (cl (= (not (not (= (f6 c_1) (f5 c_1)))) (= (f6 c_1) (f5 c_1)))) :rule resolution :premises (t50 t57))
(step t59 (cl (= (not (= c_0 (f6 c_1))) (not (= c_0 (f6 c_1))))) :rule refl)
(step t60 (cl (= (not (= c_0 (f5 c_1))) (not (= c_0 (f5 c_1))))) :rule refl)
(step t61 (cl (= (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) (or (= (f6 c_1) (f5 c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))))) :rule cong :premises (t58 t59 t60))
(step t62 (cl (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1))) (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1)))) :rule and_neg)
(step t63 (cl (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1)))) :rule implies_neg1)
(anchor :step t64)
(assume t64.a0 (not (= (f6 c_1) (f5 c_1))))
(assume t64.a1 (= c_0 (f6 c_1)))
(step t64.t0 (cl (= (= (= c_0 (f5 c_1)) false) (not (= c_0 (f5 c_1))))) :rule equiv_simplify)
(step t64.t1 (cl (not (= (= c_0 (f5 c_1)) false)) (not (= c_0 (f5 c_1)))) :rule equiv1 :premises (t64.t0))
(step t64.t2 (cl (= (f6 c_1) c_0)) :rule symm :premises (t64.a1))
(step t64.t3 (cl (= c_0 (f6 c_1))) :rule symm :premises (t64.t2))
(step t64.t4 (cl (= (f5 c_1) (f5 c_1))) :rule refl)
(step t64.t5 (cl (= (= c_0 (f5 c_1)) (= (f6 c_1) (f5 c_1)))) :rule cong :premises (t64.t3 t64.t4))
(step t64.t6 (cl (= (= (= (f6 c_1) (f5 c_1)) false) (not (= (f6 c_1) (f5 c_1))))) :rule equiv_simplify)
(step t64.t7 (cl (= (= (f6 c_1) (f5 c_1)) false) (not (not (= (f6 c_1) (f5 c_1))))) :rule equiv2 :premises (t64.t6))
(step t64.t8 (cl (not (not (not (= (f6 c_1) (f5 c_1))))) (= (f6 c_1) (f5 c_1))) :rule not_not)
(step t64.t9 (cl (= (= (f6 c_1) (f5 c_1)) false) (= (f6 c_1) (f5 c_1))) :rule resolution :premises (t64.t7 t64.t8))
(step t64.t10 (cl (= (= (f6 c_1) (f5 c_1)) false)) :rule resolution :premises (t64.t9 t64.a0))
(step t64.t11 (cl (= (= c_0 (f5 c_1)) false)) :rule trans :premises (t64.t5 t64.t10))
(step t64.t12 (cl (not (= c_0 (f5 c_1)))) :rule resolution :premises (t64.t1 t64.t11))
(step t64 (cl (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) :rule subproof :discharge (t64.a0 t64.a1))
(step t65 (cl (not (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1)))) (not (= (f6 c_1) (f5 c_1)))) :rule and_pos :args (0))
(step t66 (cl (not (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1)))) (= c_0 (f6 c_1))) :rule and_pos :args (1))
(step t67 (cl (not (= c_0 (f5 c_1))) (not (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1)))) (not (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1))))) :rule resolution :premises (t64 t65 t66))
(step t68 (cl (not (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1)))) (not (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1)))) (not (= c_0 (f5 c_1)))) :rule reordering :premises (t67))
(step t69 (cl (not (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1)))) (not (= c_0 (f5 c_1)))) :rule contraction :premises (t68))
(step t70 (cl (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) (not (= c_0 (f5 c_1)))) :rule resolution :premises (t63 t69))
(step t71 (cl (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) (not (not (= c_0 (f5 c_1))))) :rule implies_neg2)
(step t72 (cl (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1))))) :rule resolution :premises (t70 t71))
(step t73 (cl (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1))))) :rule contraction :premises (t72))
(step t74 (cl (not (and (not (= (f6 c_1) (f5 c_1))) (= c_0 (f6 c_1)))) (not (= c_0 (f5 c_1)))) :rule implies :premises (t73))
(step t75 (cl (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) :rule resolution :premises (t62 t74))
(step t76 (cl (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) (not (not (not (= (f6 c_1) (f5 c_1)))))) :rule or_neg :args (0))
(step t77 (cl (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) (not (not (= c_0 (f6 c_1))))) :rule or_neg :args (1))
(step t78 (cl (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) (not (not (= c_0 (f5 c_1))))) :rule or_neg :args (2))
(step t79 (cl (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1))))) :rule resolution :premises (t75 t76 t77 t78))
(step t80 (cl (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1))))) :rule contraction :premises (t79))
(step t81 (cl (or (= (f6 c_1) (f5 c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1))))) :rule resolution :premises (t48 t61 t80))
(step t82 (cl (= (f6 c_1) (f5 c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f5 c_1)))) :rule or :premises (t81))
(step t83 (cl (not (= (or (not (p4 c_1)) (not (= (f5 c_1) (f6 c_1)))) (or (not (p4 c_1)) (not (= (f6 c_1) (f5 c_1)))))) (not (or (not (p4 c_1)) (not (= (f5 c_1) (f6 c_1))))) (or (not (p4 c_1)) (not (= (f6 c_1) (f5 c_1))))) :rule equiv_pos2)
(step t84 (cl (= (not (p4 c_1)) (not (p4 c_1)))) :rule refl)
(step t85 (cl (= (= (f5 c_1) (f6 c_1)) (= (f6 c_1) (f5 c_1)))) :rule rare_rewrite :args ("eq-symm" (f5 c_1) (f6 c_1)))
(step t86 (cl (= (not (= (f5 c_1) (f6 c_1))) (not (= (f6 c_1) (f5 c_1))))) :rule cong :premises (t85))
(step t87 (cl (= (or (not (p4 c_1)) (not (= (f5 c_1) (f6 c_1)))) (or (not (p4 c_1)) (not (= (f6 c_1) (f5 c_1)))))) :rule cong :premises (t84 t86))
(step t88 (cl (or (not (p4 c_1)) (not (= (f5 c_1) (f6 c_1))))) :rule and :premises (a0) :args (117))
(step t89 (cl (or (not (p4 c_1)) (not (= (f6 c_1) (f5 c_1))))) :rule resolution :premises (t83 t87 t88))
(step t90 (cl (not (p4 c_1)) (not (= (f6 c_1) (f5 c_1)))) :rule or :premises (t89))
(step t91 (cl (and (p4 c8) (= c8 c_1)) (not (p4 c8)) (not (= c8 c_1))) :rule and_neg)
(step t92 (cl (=> (and (p4 c8) (= c8 c_1)) (p4 c_1)) (and (p4 c8) (= c8 c_1))) :rule implies_neg1)
(anchor :step t93)
(assume t93.a0 (p4 c8))
(assume t93.a1 (= c8 c_1))
(step t93.t0 (cl (= (= (p4 c_1) true) (p4 c_1))) :rule equiv_simplify)
(step t93.t1 (cl (not (= (p4 c_1) true)) (p4 c_1)) :rule equiv1 :premises (t93.t0))
(step t93.t2 (cl (= c_1 c8)) :rule symm :premises (t93.a1))
(step t93.t3 (cl (= (p4 c_1) (p4 c8))) :rule cong :premises (t93.t2))
(step t93.t4 (cl (= (= (p4 c8) true) (p4 c8))) :rule equiv_simplify)
(step t93.t5 (cl (= (p4 c8) true) (not (p4 c8))) :rule equiv2 :premises (t93.t4))
(step t93.t6 (cl (p4 c8)) :rule and :premises (a0) :args (152))
(step t93.t7 (cl (= (p4 c8) true)) :rule resolution :premises (t93.t5 t93.t6))
(step t93.t8 (cl (= (p4 c_1) true)) :rule trans :premises (t93.t3 t93.t7))
(step t93.t9 (cl (p4 c_1)) :rule resolution :premises (t93.t1 t93.t8))
(step t93 (cl (not (p4 c8)) (not (= c8 c_1)) (p4 c_1)) :rule subproof :discharge (t93.a0 t93.a1))
(step t94 (cl (not (and (p4 c8) (= c8 c_1))) (p4 c8)) :rule and_pos :args (0))
(step t95 (cl (not (and (p4 c8) (= c8 c_1))) (= c8 c_1)) :rule and_pos :args (1))
(step t96 (cl (p4 c_1) (not (and (p4 c8) (= c8 c_1))) (not (and (p4 c8) (= c8 c_1)))) :rule resolution :premises (t93 t94 t95))
(step t97 (cl (not (and (p4 c8) (= c8 c_1))) (not (and (p4 c8) (= c8 c_1))) (p4 c_1)) :rule reordering :premises (t96))
(step t98 (cl (not (and (p4 c8) (= c8 c_1))) (p4 c_1)) :rule contraction :premises (t97))
(step t99 (cl (=> (and (p4 c8) (= c8 c_1)) (p4 c_1)) (p4 c_1)) :rule resolution :premises (t92 t98))
(step t100 (cl (=> (and (p4 c8) (= c8 c_1)) (p4 c_1)) (not (p4 c_1))) :rule implies_neg2)
(step t101 (cl (=> (and (p4 c8) (= c8 c_1)) (p4 c_1)) (=> (and (p4 c8) (= c8 c_1)) (p4 c_1))) :rule resolution :premises (t99 t100))
(step t102 (cl (=> (and (p4 c8) (= c8 c_1)) (p4 c_1))) :rule contraction :premises (t101))
(step t103 (cl (not (and (p4 c8) (= c8 c_1))) (p4 c_1)) :rule implies :premises (t102))
(step t104 (cl (not (p4 c8)) (not (= c8 c_1)) (p4 c_1)) :rule resolution :premises (t91 t103))
(step t105 (cl (p4 c_1) (not (p4 c8)) (not (= c8 c_1))) :rule reordering :premises (t104))
(step t106 (cl (p4 c8)) :rule and :premises (a0) :args (152))
(step t107 (cl (or (= c8 c_0) (= c8 c_1))) :rule and :premises (a0) :args (276))
(step t108 (cl (= c8 c_0) (= c8 c_1)) :rule or :premises (t107))
(step t109 (cl (and (p4 c8) (= c8 c_0)) (not (p4 c8)) (not (= c8 c_0))) :rule and_neg)
(step t110 (cl (=> (and (p4 c8) (= c8 c_0)) (p4 c_0)) (and (p4 c8) (= c8 c_0))) :rule implies_neg1)
(anchor :step t111)
(assume t111.a0 (p4 c8))
(assume t111.a1 (= c8 c_0))
(step t111.t0 (cl (= (= (p4 c_0) true) (p4 c_0))) :rule equiv_simplify)
(step t111.t1 (cl (not (= (p4 c_0) true)) (p4 c_0)) :rule equiv1 :premises (t111.t0))
(step t111.t2 (cl (= c_0 c8)) :rule symm :premises (t111.a1))
(step t111.t3 (cl (= (p4 c_0) (p4 c8))) :rule cong :premises (t111.t2))
(step t111.t4 (cl (= (= (p4 c8) true) (p4 c8))) :rule equiv_simplify)
(step t111.t5 (cl (= (p4 c8) true) (not (p4 c8))) :rule equiv2 :premises (t111.t4))
(step t111.t6 (cl (= (p4 c8) true)) :rule resolution :premises (t111.t5 t106))
(step t111.t7 (cl (= (p4 c_0) true)) :rule trans :premises (t111.t3 t111.t6))
(step t111.t8 (cl (p4 c_0)) :rule resolution :premises (t111.t1 t111.t7))
(step t111 (cl (not (p4 c8)) (not (= c8 c_0)) (p4 c_0)) :rule subproof :discharge (t111.a0 t111.a1))
(step t112 (cl (not (and (p4 c8) (= c8 c_0))) (p4 c8)) :rule and_pos :args (0))
(step t113 (cl (not (and (p4 c8) (= c8 c_0))) (= c8 c_0)) :rule and_pos :args (1))
(step t114 (cl (p4 c_0) (not (and (p4 c8) (= c8 c_0))) (not (and (p4 c8) (= c8 c_0)))) :rule resolution :premises (t111 t112 t113))
(step t115 (cl (not (and (p4 c8) (= c8 c_0))) (not (and (p4 c8) (= c8 c_0))) (p4 c_0)) :rule reordering :premises (t114))
(step t116 (cl (not (and (p4 c8) (= c8 c_0))) (p4 c_0)) :rule contraction :premises (t115))
(step t117 (cl (=> (and (p4 c8) (= c8 c_0)) (p4 c_0)) (p4 c_0)) :rule resolution :premises (t110 t116))
(step t118 (cl (=> (and (p4 c8) (= c8 c_0)) (p4 c_0)) (not (p4 c_0))) :rule implies_neg2)
(step t119 (cl (=> (and (p4 c8) (= c8 c_0)) (p4 c_0)) (=> (and (p4 c8) (= c8 c_0)) (p4 c_0))) :rule resolution :premises (t117 t118))
(step t120 (cl (=> (and (p4 c8) (= c8 c_0)) (p4 c_0))) :rule contraction :premises (t119))
(step t121 (cl (not (and (p4 c8) (= c8 c_0))) (p4 c_0)) :rule implies :premises (t120))
(step t122 (cl (not (p4 c8)) (not (= c8 c_0)) (p4 c_0)) :rule resolution :premises (t109 t121))
(step t123 (cl (p4 c_0) (not (p4 c8)) (not (= c8 c_0))) :rule reordering :premises (t122))
(step t124 (cl (not (= (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0)))) (not (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule equiv_pos2)
(step t125 (cl (= (not (p1 (f5 c_0) c_0)) (not (p1 (f5 c_0) c_0)))) :rule refl)
(step t126 (cl (= (not (= c_1 (f5 c_0))) (not (= c_1 (f5 c_0))))) :rule refl)
(step t127 (cl (= (not (= c_1 (f7 c_0))) (not (= c_1 (f7 c_0))))) :rule refl)
(step t128 (cl (= (= (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)) true) (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)))) :rule equiv_simplify)
(step t129 (cl (not (= (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)) true)) (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0))) :rule equiv1 :premises (t128))
(step t130 (cl (= (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)) (= (p1 (f7 c_0) c_0) (not (not (p1 (f7 c_0) c_0)))))) :rule rare_rewrite :args ("eq-symm" (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)))
(step t131 (cl (= (p1 (f7 c_0) c_0) (p1 (f7 c_0) c_0))) :rule refl)
(step t132 (cl (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0))) :rule rare_rewrite :args ("bool-double-not-elim" (p1 (f7 c_0) c_0)))
(step t133 (cl (= (= (p1 (f7 c_0) c_0) (not (not (p1 (f7 c_0) c_0)))) (= (p1 (f7 c_0) c_0) (p1 (f7 c_0) c_0)))) :rule cong :premises (t131 t132))
(step t134 (cl (= (= (p1 (f7 c_0) c_0) (p1 (f7 c_0) c_0)) true)) :rule rare_rewrite :args ("eq-refl" (p1 (f7 c_0) c_0)))
(step t135 (cl (= (= (p1 (f7 c_0) c_0) (not (not (p1 (f7 c_0) c_0)))) true)) :rule trans :premises (t133 t134))
(step t136 (cl (= (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0)) true)) :rule trans :premises (t130 t135))
(step t137 (cl (= (not (not (p1 (f7 c_0) c_0))) (p1 (f7 c_0) c_0))) :rule resolution :premises (t129 t136))
(step t138 (cl (= (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0)))) :rule cong :premises (t125 t126 t127 t137))
(step t139 (cl (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) :rule implies_neg1)
(anchor :step t140)
(assume t140.a0 (p1 (f5 c_0) c_0))
(assume t140.a1 (= c_1 (f5 c_0)))
(assume t140.a2 (= c_1 (f7 c_0)))
(assume t140.a3 (not (p1 (f7 c_0) c_0)))
(step t140.t0 (cl (not (= (= false true) false)) (not (= false true)) false) :rule equiv_pos2)
(step t140.t1 (cl (= (= false true) false)) :rule rare_rewrite :args ("evaluate"))
(step t140.t2 (cl (= (= (p1 (f7 c_0) c_0) false) (not (p1 (f7 c_0) c_0)))) :rule equiv_simplify)
(step t140.t3 (cl (= (p1 (f7 c_0) c_0) false) (not (not (p1 (f7 c_0) c_0)))) :rule equiv2 :premises (t140.t2))
(step t140.t4 (cl (not (not (not (p1 (f7 c_0) c_0)))) (p1 (f7 c_0) c_0)) :rule not_not)
(step t140.t5 (cl (= (p1 (f7 c_0) c_0) false) (p1 (f7 c_0) c_0)) :rule resolution :premises (t140.t3 t140.t4))
(step t140.t6 (cl (= (p1 (f7 c_0) c_0) false)) :rule resolution :premises (t140.t5 t140.a3))
(step t140.t7 (cl (= false (p1 (f7 c_0) c_0))) :rule symm :premises (t140.t6))
(step t140.t8 (cl (= (f7 c_0) c_1)) :rule symm :premises (t140.a2))
(step t140.t9 (cl (= c_0 c_0)) :rule refl)
(step t140.t10 (cl (= (p1 (f7 c_0) c_0) (p1 c_1 c_0))) :rule cong :premises (t140.t8 t140.t9))
(step t140.t11 (cl (= (f5 c_0) c_1)) :rule symm :premises (t140.a1))
(step t140.t12 (cl (= c_1 (f5 c_0))) :rule symm :premises (t140.t11))
(step t140.t13 (cl (= (p1 c_1 c_0) (p1 (f5 c_0) c_0))) :rule cong :premises (t140.t12 t140.t9))
(step t140.t14 (cl (= (= (p1 (f5 c_0) c_0) true) (p1 (f5 c_0) c_0))) :rule equiv_simplify)
(step t140.t15 (cl (= (p1 (f5 c_0) c_0) true) (not (p1 (f5 c_0) c_0))) :rule equiv2 :premises (t140.t14))
(step t140.t16 (cl (= (p1 (f5 c_0) c_0) true)) :rule resolution :premises (t140.t15 t140.a0))
(step t140.t17 (cl (= false true)) :rule trans :premises (t140.t7 t140.t10 t140.t13 t140.t16))
(step t140.t18 (cl false) :rule resolution :premises (t140.t0 t140.t1 t140.t17))
(step t140 (cl (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))) false) :rule subproof :discharge (t140.a0 t140.a1 t140.a2 t140.a3))
(step t141 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (p1 (f5 c_0) c_0)) :rule and_pos :args (0))
(step t142 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_1 (f5 c_0))) :rule and_pos :args (1))
(step t143 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_1 (f7 c_0))) :rule and_pos :args (2))
(step t144 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (p1 (f7 c_0) c_0))) :rule and_pos :args (3))
(step t145 (cl false (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t140 t141 t142 t143 t144))
(step t146 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule reordering :premises (t145))
(step t147 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule contraction :premises (t146))
(step t148 (cl (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) false) :rule resolution :premises (t139 t147))
(step t149 (cl (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not false)) :rule implies_neg2)
(step t150 (cl (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule resolution :premises (t148 t149))
(step t151 (cl (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule contraction :premises (t150))
(step t152 (cl (= (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0)))))) :rule implies_simplify)
(step t153 (cl (not (=> (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule equiv1 :premises (t152))
(step t154 (cl (not (and (p1 (f5 c_0) c_0) (= c_1 (f5 c_0)) (= c_1 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t151 t153))
(step t155 (cl (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) :rule not_and :premises (t154))
(step t156 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (p1 (f5 c_0) c_0)))) :rule or_neg :args (0))
(step t157 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_1 (f5 c_0))))) :rule or_neg :args (1))
(step t158 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_1 (f7 c_0))))) :rule or_neg :args (2))
(step t159 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (not (p1 (f7 c_0) c_0))))) :rule or_neg :args (3))
(step t160 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t155 t156 t157 t158 t159))
(step t161 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule contraction :premises (t160))
(step t162 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule resolution :premises (t124 t138 t161))
(step t163 (cl (not (p1 (f5 c_0) c_0)) (not (= c_1 (f5 c_0))) (not (= c_1 (f7 c_0))) (p1 (f7 c_0) c_0)) :rule or :premises (t162))
(step t164 (cl (p1 (f7 c_0) c_0) (not (p1 (f5 c_0) c_0)) (not (= c_1 (f7 c_0))) (not (= c_1 (f5 c_0)))) :rule reordering :premises (t163))
(step t165 (cl (not (= (or (= (f7 c_0) c_0) (= (f7 c_0) c_1)) (or (= c_0 (f7 c_0)) (= c_1 (f7 c_0))))) (not (or (= (f7 c_0) c_0) (= (f7 c_0) c_1))) (or (= c_0 (f7 c_0)) (= c_1 (f7 c_0)))) :rule equiv_pos2)
(step t166 (cl (= (= (f7 c_0) c_0) (= c_0 (f7 c_0)))) :rule rare_rewrite :args ("eq-symm" (f7 c_0) c_0))
(step t167 (cl (= (= (f7 c_0) c_1) (= c_1 (f7 c_0)))) :rule rare_rewrite :args ("eq-symm" (f7 c_0) c_1))
(step t168 (cl (= (or (= (f7 c_0) c_0) (= (f7 c_0) c_1)) (or (= c_0 (f7 c_0)) (= c_1 (f7 c_0))))) :rule cong :premises (t166 t167))
(step t169 (cl (or (= (f7 c_0) c_0) (= (f7 c_0) c_1))) :rule and :premises (a0) :args (269))
(step t170 (cl (or (= c_0 (f7 c_0)) (= c_1 (f7 c_0)))) :rule resolution :premises (t165 t168 t169))
(step t171 (cl (= c_0 (f7 c_0)) (= c_1 (f7 c_0))) :rule or :premises (t170))
(step t172 (cl (not (= (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0)))) (not (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule equiv_pos2)
(step t173 (cl (= (not (p1 (f6 c_0) c_0)) (not (p1 (f6 c_0) c_0)))) :rule refl)
(step t174 (cl (= (not (= c_0 (f6 c_0))) (not (= c_0 (f6 c_0))))) :rule refl)
(step t175 (cl (= (not (= c_0 (f7 c_0))) (not (= c_0 (f7 c_0))))) :rule refl)
(step t176 (cl (= (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0)))) :rule cong :premises (t173 t174 t175 t137))
(step t177 (cl (=> (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) :rule implies_neg1)
(anchor :step t178)
(assume t178.a0 (p1 (f6 c_0) c_0))
(assume t178.a1 (= c_0 (f6 c_0)))
(assume t178.a2 (= c_0 (f7 c_0)))
(assume t178.a3 (not (p1 (f7 c_0) c_0)))
(step t178.t0 (cl (not (= (= false true) false)) (not (= false true)) false) :rule equiv_pos2)
(step t178.t1 (cl (= (= false true) false)) :rule rare_rewrite :args ("evaluate"))
(step t178.t2 (cl (= (= (p1 (f7 c_0) c_0) false) (not (p1 (f7 c_0) c_0)))) :rule equiv_simplify)
(step t178.t3 (cl (= (p1 (f7 c_0) c_0) false) (not (not (p1 (f7 c_0) c_0)))) :rule equiv2 :premises (t178.t2))
(step t178.t4 (cl (not (not (not (p1 (f7 c_0) c_0)))) (p1 (f7 c_0) c_0)) :rule not_not)
(step t178.t5 (cl (= (p1 (f7 c_0) c_0) false) (p1 (f7 c_0) c_0)) :rule resolution :premises (t178.t3 t178.t4))
(step t178.t6 (cl (= (p1 (f7 c_0) c_0) false)) :rule resolution :premises (t178.t5 t178.a3))
(step t178.t7 (cl (= false (p1 (f7 c_0) c_0))) :rule symm :premises (t178.t6))
(step t178.t8 (cl (= (f7 c_0) c_0)) :rule symm :premises (t178.a2))
(step t178.t9 (cl (= c_0 c_0)) :rule refl)
(step t178.t10 (cl (= (p1 (f7 c_0) c_0) (p1 c_0 c_0))) :rule cong :premises (t178.t8 t178.t9))
(step t178.t11 (cl (= (f6 c_0) c_0)) :rule symm :premises (t178.a1))
(step t178.t12 (cl (= c_0 (f6 c_0))) :rule symm :premises (t178.t11))
(step t178.t13 (cl (= (p1 c_0 c_0) (p1 (f6 c_0) c_0))) :rule cong :premises (t178.t12 t178.t9))
(step t178.t14 (cl (= (= (p1 (f6 c_0) c_0) true) (p1 (f6 c_0) c_0))) :rule equiv_simplify)
(step t178.t15 (cl (= (p1 (f6 c_0) c_0) true) (not (p1 (f6 c_0) c_0))) :rule equiv2 :premises (t178.t14))
(step t178.t16 (cl (= (p1 (f6 c_0) c_0) true)) :rule resolution :premises (t178.t15 t178.a0))
(step t178.t17 (cl (= false true)) :rule trans :premises (t178.t7 t178.t10 t178.t13 t178.t16))
(step t178.t18 (cl false) :rule resolution :premises (t178.t0 t178.t1 t178.t17))
(step t178 (cl (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))) false) :rule subproof :discharge (t178.a0 t178.a1 t178.a2 t178.a3))
(step t179 (cl (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (p1 (f6 c_0) c_0)) :rule and_pos :args (0))
(step t180 (cl (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_0 (f6 c_0))) :rule and_pos :args (1))
(step t181 (cl (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_0 (f7 c_0))) :rule and_pos :args (2))
(step t182 (cl (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (p1 (f7 c_0) c_0))) :rule and_pos :args (3))
(step t183 (cl false (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t178 t179 t180 t181 t182))
(step t184 (cl (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule reordering :premises (t183))
(step t185 (cl (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule contraction :premises (t184))
(step t186 (cl (=> (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) false) :rule resolution :premises (t177 t185))
(step t187 (cl (=> (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not false)) :rule implies_neg2)
(step t188 (cl (=> (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (=> (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule resolution :premises (t186 t187))
(step t189 (cl (=> (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule contraction :premises (t188))
(step t190 (cl (= (=> (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))))) :rule implies_simplify)
(step t191 (cl (not (=> (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule equiv1 :premises (t190))
(step t192 (cl (not (and (p1 (f6 c_0) c_0) (= c_0 (f6 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t189 t191))
(step t193 (cl (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) :rule not_and :premises (t192))
(step t194 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (p1 (f6 c_0) c_0)))) :rule or_neg :args (0))
(step t195 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_0 (f6 c_0))))) :rule or_neg :args (1))
(step t196 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_0 (f7 c_0))))) :rule or_neg :args (2))
(step t197 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (not (p1 (f7 c_0) c_0))))) :rule or_neg :args (3))
(step t198 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t193 t194 t195 t196 t197))
(step t199 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule contraction :premises (t198))
(step t200 (cl (or (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule resolution :premises (t172 t176 t199))
(step t201 (cl (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0)) :rule or :premises (t200))
(step t202 (cl (p1 (f7 c_0) c_0) (not (p1 (f6 c_0) c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f7 c_0)))) :rule reordering :premises (t201))
(step t203 (cl (not (= (or (= (f6 c_0) c_0) (= (f6 c_0) c_1)) (or (= c_0 (f6 c_0)) (= c_1 (f6 c_0))))) (not (or (= (f6 c_0) c_0) (= (f6 c_0) c_1))) (or (= c_0 (f6 c_0)) (= c_1 (f6 c_0)))) :rule equiv_pos2)
(step t204 (cl (= (= (f6 c_0) c_0) (= c_0 (f6 c_0)))) :rule rare_rewrite :args ("eq-symm" (f6 c_0) c_0))
(step t205 (cl (= (= (f6 c_0) c_1) (= c_1 (f6 c_0)))) :rule rare_rewrite :args ("eq-symm" (f6 c_0) c_1))
(step t206 (cl (= (or (= (f6 c_0) c_0) (= (f6 c_0) c_1)) (or (= c_0 (f6 c_0)) (= c_1 (f6 c_0))))) :rule cong :premises (t204 t205))
(step t207 (cl (or (= (f6 c_0) c_0) (= (f6 c_0) c_1))) :rule and :premises (a0) :args (267))
(step t208 (cl (or (= c_0 (f6 c_0)) (= c_1 (f6 c_0)))) :rule resolution :premises (t203 t206 t207))
(step t209 (cl (= c_0 (f6 c_0)) (= c_1 (f6 c_0))) :rule or :premises (t208))
(step t210 (cl (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (not (= c_1 (f5 c_0))) (not (= c_1 (f6 c_0)))) :rule and_neg)
(step t211 (cl (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) :rule implies_neg1)
(anchor :step t212)
(assume t212.a0 (= c_1 (f5 c_0)))
(assume t212.a1 (= c_1 (f6 c_0)))
(step t212.t0 (cl (= (f6 c_0) c_1)) :rule symm :premises (t212.a1))
(step t212.t1 (cl (= (f5 c_0) c_1)) :rule symm :premises (t212.a0))
(step t212.t2 (cl (= c_1 (f5 c_0))) :rule symm :premises (t212.t1))
(step t212.t3 (cl (= (f6 c_0) (f5 c_0))) :rule trans :premises (t212.t0 t212.t2))
(step t212 (cl (not (= c_1 (f5 c_0))) (not (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) :rule subproof :discharge (t212.a0 t212.a1))
(step t213 (cl (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (= c_1 (f5 c_0))) :rule and_pos :args (0))
(step t214 (cl (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (= c_1 (f6 c_0))) :rule and_pos :args (1))
(step t215 (cl (= (f6 c_0) (f5 c_0)) (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))))) :rule resolution :premises (t212 t213 t214))
(step t216 (cl (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule reordering :premises (t215))
(step t217 (cl (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule contraction :premises (t216))
(step t218 (cl (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (= (f6 c_0) (f5 c_0))) :rule resolution :premises (t211 t217))
(step t219 (cl (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (not (= (f6 c_0) (f5 c_0)))) :rule implies_neg2)
(step t220 (cl (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0)))) :rule resolution :premises (t218 t219))
(step t221 (cl (=> (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0)))) :rule contraction :premises (t220))
(step t222 (cl (not (and (= c_1 (f5 c_0)) (= c_1 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule implies :premises (t221))
(step t223 (cl (not (= c_1 (f5 c_0))) (not (= c_1 (f6 c_0))) (= (f6 c_0) (f5 c_0))) :rule resolution :premises (t210 t222))
(step t224 (cl (= (f6 c_0) (f5 c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f5 c_0)))) :rule reordering :premises (t223))
(step t225 (cl (not (= (or (= (f5 c_0) c_0) (= (f5 c_0) c_1)) (or (= c_0 (f5 c_0)) (= c_1 (f5 c_0))))) (not (or (= (f5 c_0) c_0) (= (f5 c_0) c_1))) (or (= c_0 (f5 c_0)) (= c_1 (f5 c_0)))) :rule equiv_pos2)
(step t226 (cl (= (= (f5 c_0) c_0) (= c_0 (f5 c_0)))) :rule rare_rewrite :args ("eq-symm" (f5 c_0) c_0))
(step t227 (cl (= (= (f5 c_0) c_1) (= c_1 (f5 c_0)))) :rule rare_rewrite :args ("eq-symm" (f5 c_0) c_1))
(step t228 (cl (= (or (= (f5 c_0) c_0) (= (f5 c_0) c_1)) (or (= c_0 (f5 c_0)) (= c_1 (f5 c_0))))) :rule cong :premises (t226 t227))
(step t229 (cl (or (= (f5 c_0) c_0) (= (f5 c_0) c_1))) :rule and :premises (a0) :args (273))
(step t230 (cl (or (= c_0 (f5 c_0)) (= c_1 (f5 c_0)))) :rule resolution :premises (t225 t228 t229))
(step t231 (cl (= c_0 (f5 c_0)) (= c_1 (f5 c_0))) :rule or :premises (t230))
(step t232 (cl (not (= (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (or (p1 (f7 c_0) c_0) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))))) (not (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0)))) (or (p1 (f7 c_0) c_0) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0)))) :rule equiv_pos2)
(step t233 (cl (= (not (= c_1 (f6 c_0))) (not (= c_1 (f6 c_0))))) :rule refl)
(step t234 (cl (= (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (or (p1 (f7 c_0) c_0) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))))) :rule cong :premises (t137 t127 t233 t173))
(step t235 (cl (=> (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0)) false) (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) :rule implies_neg1)
(anchor :step t236)
(assume t236.a0 (not (p1 (f7 c_0) c_0)))
(assume t236.a1 (= c_1 (f7 c_0)))
(assume t236.a2 (= c_1 (f6 c_0)))
(assume t236.a3 (p1 (f6 c_0) c_0))
(step t236.t0 (cl (not (= (= true false) false)) (not (= true false)) false) :rule equiv_pos2)
(step t236.t1 (cl (= (= true false) false)) :rule rare_rewrite :args ("evaluate"))
(step t236.t2 (cl (= (= (p1 (f6 c_0) c_0) true) (p1 (f6 c_0) c_0))) :rule equiv_simplify)
(step t236.t3 (cl (= (p1 (f6 c_0) c_0) true) (not (p1 (f6 c_0) c_0))) :rule equiv2 :premises (t236.t2))
(step t236.t4 (cl (= (p1 (f6 c_0) c_0) true)) :rule resolution :premises (t236.t3 t236.a3))
(step t236.t5 (cl (= true (p1 (f6 c_0) c_0))) :rule symm :premises (t236.t4))
(step t236.t6 (cl (= (f6 c_0) c_1)) :rule symm :premises (t236.a2))
(step t236.t7 (cl (= c_0 c_0)) :rule refl)
(step t236.t8 (cl (= (p1 (f6 c_0) c_0) (p1 c_1 c_0))) :rule cong :premises (t236.t6 t236.t7))
(step t236.t9 (cl (= (f7 c_0) c_1)) :rule symm :premises (t236.a1))
(step t236.t10 (cl (= c_1 (f7 c_0))) :rule symm :premises (t236.t9))
(step t236.t11 (cl (= (p1 c_1 c_0) (p1 (f7 c_0) c_0))) :rule cong :premises (t236.t10 t236.t7))
(step t236.t12 (cl (= (= (p1 (f7 c_0) c_0) false) (not (p1 (f7 c_0) c_0)))) :rule equiv_simplify)
(step t236.t13 (cl (= (p1 (f7 c_0) c_0) false) (not (not (p1 (f7 c_0) c_0)))) :rule equiv2 :premises (t236.t12))
(step t236.t14 (cl (not (not (not (p1 (f7 c_0) c_0)))) (p1 (f7 c_0) c_0)) :rule not_not)
(step t236.t15 (cl (= (p1 (f7 c_0) c_0) false) (p1 (f7 c_0) c_0)) :rule resolution :premises (t236.t13 t236.t14))
(step t236.t16 (cl (= (p1 (f7 c_0) c_0) false)) :rule resolution :premises (t236.t15 t236.a0))
(step t236.t17 (cl (= true false)) :rule trans :premises (t236.t5 t236.t8 t236.t11 t236.t16))
(step t236.t18 (cl false) :rule resolution :premises (t236.t0 t236.t1 t236.t17))
(step t236 (cl (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0)) false) :rule subproof :discharge (t236.a0 t236.a1 t236.a2 t236.a3))
(step t237 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (p1 (f7 c_0) c_0))) :rule and_pos :args (0))
(step t238 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) (= c_1 (f7 c_0))) :rule and_pos :args (1))
(step t239 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) (= c_1 (f6 c_0))) :rule and_pos :args (2))
(step t240 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) (p1 (f6 c_0) c_0)) :rule and_pos :args (3))
(step t241 (cl false (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0)))) :rule resolution :premises (t236 t237 t238 t239 t240))
(step t242 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) false) :rule reordering :premises (t241))
(step t243 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))) false) :rule contraction :premises (t242))
(step t244 (cl (=> (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0)) false) false) :rule resolution :premises (t235 t243))
(step t245 (cl (=> (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0)) false) (not false)) :rule implies_neg2)
(step t246 (cl (=> (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0)) false) (=> (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0)) false)) :rule resolution :premises (t244 t245))
(step t247 (cl (=> (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0)) false)) :rule contraction :premises (t246))
(step t248 (cl (= (=> (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0)) false) (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0))))) :rule implies_simplify)
(step t249 (cl (not (=> (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0)) false)) (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0)))) :rule equiv1 :premises (t248))
(step t250 (cl (not (and (not (p1 (f7 c_0) c_0)) (= c_1 (f7 c_0)) (= c_1 (f6 c_0)) (p1 (f6 c_0) c_0)))) :rule resolution :premises (t247 t249))
(step t251 (cl (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))) :rule not_and :premises (t250))
(step t252 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (not (not (not (p1 (f7 c_0) c_0))))) :rule or_neg :args (0))
(step t253 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (not (not (= c_1 (f7 c_0))))) :rule or_neg :args (1))
(step t254 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (not (not (= c_1 (f6 c_0))))) :rule or_neg :args (2))
(step t255 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (not (not (p1 (f6 c_0) c_0)))) :rule or_neg :args (3))
(step t256 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))) (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0)))) :rule resolution :premises (t251 t252 t253 t254 t255))
(step t257 (cl (or (not (not (p1 (f7 c_0) c_0))) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0)))) :rule contraction :premises (t256))
(step t258 (cl (or (p1 (f7 c_0) c_0) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0)))) :rule resolution :premises (t232 t234 t257))
(step t259 (cl (p1 (f7 c_0) c_0) (not (= c_1 (f7 c_0))) (not (= c_1 (f6 c_0))) (not (p1 (f6 c_0) c_0))) :rule or :premises (t258))
(step t260 (cl (p1 (f7 c_0) c_0) (not (p1 (f6 c_0) c_0)) (not (= c_1 (f6 c_0))) (not (= c_1 (f7 c_0)))) :rule reordering :premises (t259))
(step t261 (cl (= c_0 (f6 c_0)) (= c_1 (f6 c_0))) :rule or :premises (t208))
(step t262 (cl (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (not (= c_0 (f5 c_0))) (not (= c_0 (f6 c_0)))) :rule and_neg)
(step t263 (cl (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) :rule implies_neg1)
(anchor :step t264)
(assume t264.a0 (= c_0 (f5 c_0)))
(assume t264.a1 (= c_0 (f6 c_0)))
(step t264.t0 (cl (= (f6 c_0) c_0)) :rule symm :premises (t264.a1))
(step t264.t1 (cl (= (f5 c_0) c_0)) :rule symm :premises (t264.a0))
(step t264.t2 (cl (= c_0 (f5 c_0))) :rule symm :premises (t264.t1))
(step t264.t3 (cl (= (f6 c_0) (f5 c_0))) :rule trans :premises (t264.t0 t264.t2))
(step t264 (cl (not (= c_0 (f5 c_0))) (not (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) :rule subproof :discharge (t264.a0 t264.a1))
(step t265 (cl (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (= c_0 (f5 c_0))) :rule and_pos :args (0))
(step t266 (cl (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (= c_0 (f6 c_0))) :rule and_pos :args (1))
(step t267 (cl (= (f6 c_0) (f5 c_0)) (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))))) :rule resolution :premises (t264 t265 t266))
(step t268 (cl (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule reordering :premises (t267))
(step t269 (cl (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule contraction :premises (t268))
(step t270 (cl (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (= (f6 c_0) (f5 c_0))) :rule resolution :premises (t263 t269))
(step t271 (cl (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (not (= (f6 c_0) (f5 c_0)))) :rule implies_neg2)
(step t272 (cl (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0)))) :rule resolution :premises (t270 t271))
(step t273 (cl (=> (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0)))) :rule contraction :premises (t272))
(step t274 (cl (not (and (= c_0 (f5 c_0)) (= c_0 (f6 c_0)))) (= (f6 c_0) (f5 c_0))) :rule implies :premises (t273))
(step t275 (cl (not (= c_0 (f5 c_0))) (not (= c_0 (f6 c_0))) (= (f6 c_0) (f5 c_0))) :rule resolution :premises (t262 t274))
(step t276 (cl (= (f6 c_0) (f5 c_0)) (not (= c_0 (f6 c_0))) (not (= c_0 (f5 c_0)))) :rule reordering :premises (t275))
(step t277 (cl (= c_0 (f7 c_0)) (= c_1 (f7 c_0))) :rule or :premises (t170))
(step t278 (cl (not (= (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0)))) (not (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule equiv_pos2)
(step t279 (cl (= (not (= c_0 (f5 c_0))) (not (= c_0 (f5 c_0))))) :rule refl)
(step t280 (cl (= (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0)))) :rule cong :premises (t125 t279 t175 t137))
(step t281 (cl (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) :rule implies_neg1)
(anchor :step t282)
(assume t282.a0 (p1 (f5 c_0) c_0))
(assume t282.a1 (= c_0 (f5 c_0)))
(assume t282.a2 (= c_0 (f7 c_0)))
(assume t282.a3 (not (p1 (f7 c_0) c_0)))
(step t282.t0 (cl (not (= (= false true) false)) (not (= false true)) false) :rule equiv_pos2)
(step t282.t1 (cl (= (= false true) false)) :rule rare_rewrite :args ("evaluate"))
(step t282.t2 (cl (= (= (p1 (f7 c_0) c_0) false) (not (p1 (f7 c_0) c_0)))) :rule equiv_simplify)
(step t282.t3 (cl (= (p1 (f7 c_0) c_0) false) (not (not (p1 (f7 c_0) c_0)))) :rule equiv2 :premises (t282.t2))
(step t282.t4 (cl (not (not (not (p1 (f7 c_0) c_0)))) (p1 (f7 c_0) c_0)) :rule not_not)
(step t282.t5 (cl (= (p1 (f7 c_0) c_0) false) (p1 (f7 c_0) c_0)) :rule resolution :premises (t282.t3 t282.t4))
(step t282.t6 (cl (= (p1 (f7 c_0) c_0) false)) :rule resolution :premises (t282.t5 t282.a3))
(step t282.t7 (cl (= false (p1 (f7 c_0) c_0))) :rule symm :premises (t282.t6))
(step t282.t8 (cl (= (f7 c_0) c_0)) :rule symm :premises (t282.a2))
(step t282.t9 (cl (= c_0 c_0)) :rule refl)
(step t282.t10 (cl (= (p1 (f7 c_0) c_0) (p1 c_0 c_0))) :rule cong :premises (t282.t8 t282.t9))
(step t282.t11 (cl (= (f5 c_0) c_0)) :rule symm :premises (t282.a1))
(step t282.t12 (cl (= c_0 (f5 c_0))) :rule symm :premises (t282.t11))
(step t282.t13 (cl (= (p1 c_0 c_0) (p1 (f5 c_0) c_0))) :rule cong :premises (t282.t12 t282.t9))
(step t282.t14 (cl (= (= (p1 (f5 c_0) c_0) true) (p1 (f5 c_0) c_0))) :rule equiv_simplify)
(step t282.t15 (cl (= (p1 (f5 c_0) c_0) true) (not (p1 (f5 c_0) c_0))) :rule equiv2 :premises (t282.t14))
(step t282.t16 (cl (= (p1 (f5 c_0) c_0) true)) :rule resolution :premises (t282.t15 t282.a0))
(step t282.t17 (cl (= false true)) :rule trans :premises (t282.t7 t282.t10 t282.t13 t282.t16))
(step t282.t18 (cl false) :rule resolution :premises (t282.t0 t282.t1 t282.t17))
(step t282 (cl (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))) false) :rule subproof :discharge (t282.a0 t282.a1 t282.a2 t282.a3))
(step t283 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (p1 (f5 c_0) c_0)) :rule and_pos :args (0))
(step t284 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_0 (f5 c_0))) :rule and_pos :args (1))
(step t285 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (= c_0 (f7 c_0))) :rule and_pos :args (2))
(step t286 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (p1 (f7 c_0) c_0))) :rule and_pos :args (3))
(step t287 (cl false (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t282 t283 t284 t285 t286))
(step t288 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule reordering :premises (t287))
(step t289 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))) false) :rule contraction :premises (t288))
(step t290 (cl (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) false) :rule resolution :premises (t281 t289))
(step t291 (cl (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not false)) :rule implies_neg2)
(step t292 (cl (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule resolution :premises (t290 t291))
(step t293 (cl (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) :rule contraction :premises (t292))
(step t294 (cl (= (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0)))))) :rule implies_simplify)
(step t295 (cl (not (=> (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))) false)) (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule equiv1 :premises (t294))
(step t296 (cl (not (and (p1 (f5 c_0) c_0) (= c_0 (f5 c_0)) (= c_0 (f7 c_0)) (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t293 t295))
(step t297 (cl (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) :rule not_and :premises (t296))
(step t298 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (p1 (f5 c_0) c_0)))) :rule or_neg :args (0))
(step t299 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_0 (f5 c_0))))) :rule or_neg :args (1))
(step t300 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (= c_0 (f7 c_0))))) :rule or_neg :args (2))
(step t301 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (not (not (not (p1 (f7 c_0) c_0))))) :rule or_neg :args (3))
(step t302 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0)))) (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule resolution :premises (t297 t298 t299 t300 t301))
(step t303 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (not (not (p1 (f7 c_0) c_0))))) :rule contraction :premises (t302))
(step t304 (cl (or (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0))) :rule resolution :premises (t278 t280 t303))
(step t305 (cl (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0))) (not (= c_0 (f7 c_0))) (p1 (f7 c_0) c_0)) :rule or :premises (t304))
(step t306 (cl (p1 (f7 c_0) c_0) (not (p1 (f5 c_0) c_0)) (not (= c_0 (f7 c_0))) (not (= c_0 (f5 c_0)))) :rule reordering :premises (t305))
(step t307 (cl (p1 (f7 c_0) c_0) (= (f6 c_0) (f5 c_0)) (not (p1 (f6 c_0) c_0)) (not (p1 (f5 c_0) c_0)) (not (= c_0 (f5 c_0)))) :rule resolution :premises (t260 t261 t276 t277 t306))
(step t308 (cl (not (= (or (not (p4 c_0)) (not (= (f5 c_0) (f6 c_0)))) (or (not (p4 c_0)) (not (= (f6 c_0) (f5 c_0)))))) (not (or (not (p4 c_0)) (not (= (f5 c_0) (f6 c_0))))) (or (not (p4 c_0)) (not (= (f6 c_0) (f5 c_0))))) :rule equiv_pos2)
(step t309 (cl (= (not (p4 c_0)) (not (p4 c_0)))) :rule refl)
(step t310 (cl (= (= (f5 c_0) (f6 c_0)) (= (f6 c_0) (f5 c_0)))) :rule rare_rewrite :args ("eq-symm" (f5 c_0) (f6 c_0)))
(step t311 (cl (= (not (= (f5 c_0) (f6 c_0))) (not (= (f6 c_0) (f5 c_0))))) :rule cong :premises (t310))
(step t312 (cl (= (or (not (p4 c_0)) (not (= (f5 c_0) (f6 c_0)))) (or (not (p4 c_0)) (not (= (f6 c_0) (f5 c_0)))))) :rule cong :premises (t309 t311))
(step t313 (cl (or (not (p4 c_0)) (not (= (f5 c_0) (f6 c_0))))) :rule and :premises (a0) :args (116))
(step t314 (cl (or (not (p4 c_0)) (not (= (f6 c_0) (f5 c_0))))) :rule resolution :premises (t308 t312 t313))
(step t315 (cl (not (p4 c_0)) (not (= (f6 c_0) (f5 c_0)))) :rule or :premises (t314))
(step t316 (cl (or (not (p4 c_0)) (p1 (f5 c_0) c_0))) :rule and :premises (a0) :args (106))
(step t317 (cl (not (p4 c_0)) (p1 (f5 c_0) c_0)) :rule or :premises (t316))
(step t318 (cl (or (not (p4 c_0)) (not (p1 (f7 c_0) c_0)))) :rule and :premises (a0) :args (77))
(step t319 (cl (not (p4 c_0)) (not (p1 (f7 c_0) c_0))) :rule or :premises (t318))
(step t320 (cl (or (not (p4 c_0)) (p1 (f6 c_0) c_0))) :rule and :premises (a0) :args (19))
(step t321 (cl (not (p4 c_0)) (p1 (f6 c_0) c_0)) :rule or :premises (t320))
(step t322 (cl (not (p4 c_0))) :rule resolution :premises (t164 t171 t202 t209 t224 t231 t307 t315 t317 t319 t321))
(step t323 (cl (not (= c8 c_0))) :rule resolution :premises (t123 t322 t106))
(step t324 (cl (= c8 c_1)) :rule resolution :premises (t108 t323))
(step t325 (cl (p4 c_1)) :rule resolution :premises (t105 t106 t324))
(step t326 (cl (not (= (f6 c_1) (f5 c_1)))) :rule resolution :premises (t90 t325))
(step t327 (cl (not (= (or (= (f6 c_1) c_0) (= (f6 c_1) c_1)) (or (= c_0 (f6 c_1)) (= c_1 (f6 c_1))))) (not (or (= (f6 c_1) c_0) (= (f6 c_1) c_1))) (or (= c_0 (f6 c_1)) (= c_1 (f6 c_1)))) :rule equiv_pos2)
(step t328 (cl (= (= (f6 c_1) c_0) (= c_0 (f6 c_1)))) :rule rare_rewrite :args ("eq-symm" (f6 c_1) c_0))
(step t329 (cl (= (= (f6 c_1) c_1) (= c_1 (f6 c_1)))) :rule rare_rewrite :args ("eq-symm" (f6 c_1) c_1))
(step t330 (cl (= (or (= (f6 c_1) c_0) (= (f6 c_1) c_1)) (or (= c_0 (f6 c_1)) (= c_1 (f6 c_1))))) :rule cong :premises (t328 t329))
(step t331 (cl (or (= (f6 c_1) c_0) (= (f6 c_1) c_1))) :rule and :premises (a0) :args (268))
(step t332 (cl (or (= c_0 (f6 c_1)) (= c_1 (f6 c_1)))) :rule resolution :premises (t327 t330 t331))
(step t333 (cl (= c_0 (f6 c_1)) (= c_1 (f6 c_1))) :rule or :premises (t332))
(step t334 (cl (not (= (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (or (p1 (f7 c_1) c_1) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))))) (not (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1)))) (or (p1 (f7 c_1) c_1) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1)))) :rule equiv_pos2)
(step t335 (cl (= (not (= c_1 (f6 c_1))) (not (= c_1 (f6 c_1))))) :rule refl)
(step t336 (cl (= (not (p1 (f6 c_1) c_1)) (not (p1 (f6 c_1) c_1)))) :rule refl)
(step t337 (cl (= (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (or (p1 (f7 c_1) c_1) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))))) :rule cong :premises (t10 t11 t335 t336))
(step t338 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1)) false) (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) :rule implies_neg1)
(anchor :step t339)
(assume t339.a0 (not (p1 (f7 c_1) c_1)))
(assume t339.a1 (= c_1 (f7 c_1)))
(assume t339.a2 (= c_1 (f6 c_1)))
(assume t339.a3 (p1 (f6 c_1) c_1))
(step t339.t0 (cl (not (= (= true false) false)) (not (= true false)) false) :rule equiv_pos2)
(step t339.t1 (cl (= (= true false) false)) :rule rare_rewrite :args ("evaluate"))
(step t339.t2 (cl (= (= (p1 (f6 c_1) c_1) true) (p1 (f6 c_1) c_1))) :rule equiv_simplify)
(step t339.t3 (cl (= (p1 (f6 c_1) c_1) true) (not (p1 (f6 c_1) c_1))) :rule equiv2 :premises (t339.t2))
(step t339.t4 (cl (= (p1 (f6 c_1) c_1) true)) :rule resolution :premises (t339.t3 t339.a3))
(step t339.t5 (cl (= true (p1 (f6 c_1) c_1))) :rule symm :premises (t339.t4))
(step t339.t6 (cl (= (f6 c_1) c_1)) :rule symm :premises (t339.a2))
(step t339.t7 (cl (= c_1 c_1)) :rule refl)
(step t339.t8 (cl (= (p1 (f6 c_1) c_1) (p1 c_1 c_1))) :rule cong :premises (t339.t6 t339.t7))
(step t339.t9 (cl (= (f7 c_1) c_1)) :rule symm :premises (t339.a1))
(step t339.t10 (cl (= c_1 (f7 c_1))) :rule symm :premises (t339.t9))
(step t339.t11 (cl (= (p1 c_1 c_1) (p1 (f7 c_1) c_1))) :rule cong :premises (t339.t10 t339.t7))
(step t339.t12 (cl (= (= (p1 (f7 c_1) c_1) false) (not (p1 (f7 c_1) c_1)))) :rule equiv_simplify)
(step t339.t13 (cl (= (p1 (f7 c_1) c_1) false) (not (not (p1 (f7 c_1) c_1)))) :rule equiv2 :premises (t339.t12))
(step t339.t14 (cl (not (not (not (p1 (f7 c_1) c_1)))) (p1 (f7 c_1) c_1)) :rule not_not)
(step t339.t15 (cl (= (p1 (f7 c_1) c_1) false) (p1 (f7 c_1) c_1)) :rule resolution :premises (t339.t13 t339.t14))
(step t339.t16 (cl (= (p1 (f7 c_1) c_1) false)) :rule resolution :premises (t339.t15 t339.a0))
(step t339.t17 (cl (= true false)) :rule trans :premises (t339.t5 t339.t8 t339.t11 t339.t16))
(step t339.t18 (cl false) :rule resolution :premises (t339.t0 t339.t1 t339.t17))
(step t339 (cl (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1)) false) :rule subproof :discharge (t339.a0 t339.a1 t339.a2 t339.a3))
(step t340 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (p1 (f7 c_1) c_1))) :rule and_pos :args (0))
(step t341 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) (= c_1 (f7 c_1))) :rule and_pos :args (1))
(step t342 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) (= c_1 (f6 c_1))) :rule and_pos :args (2))
(step t343 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) (p1 (f6 c_1) c_1)) :rule and_pos :args (3))
(step t344 (cl false (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1)))) :rule resolution :premises (t339 t340 t341 t342 t343))
(step t345 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) false) :rule reordering :premises (t344))
(step t346 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))) false) :rule contraction :premises (t345))
(step t347 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1)) false) false) :rule resolution :premises (t338 t346))
(step t348 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1)) false) (not false)) :rule implies_neg2)
(step t349 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1)) false) (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1)) false)) :rule resolution :premises (t347 t348))
(step t350 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1)) false)) :rule contraction :premises (t349))
(step t351 (cl (= (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1)) false) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1))))) :rule implies_simplify)
(step t352 (cl (not (=> (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1)) false)) (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1)))) :rule equiv1 :premises (t351))
(step t353 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_1 (f7 c_1)) (= c_1 (f6 c_1)) (p1 (f6 c_1) c_1)))) :rule resolution :premises (t350 t352))
(step t354 (cl (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))) :rule not_and :premises (t353))
(step t355 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (not (not (not (p1 (f7 c_1) c_1))))) :rule or_neg :args (0))
(step t356 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (not (not (= c_1 (f7 c_1))))) :rule or_neg :args (1))
(step t357 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (not (not (= c_1 (f6 c_1))))) :rule or_neg :args (2))
(step t358 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (not (not (p1 (f6 c_1) c_1)))) :rule or_neg :args (3))
(step t359 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1)))) :rule resolution :premises (t354 t355 t356 t357 t358))
(step t360 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1)))) :rule contraction :premises (t359))
(step t361 (cl (or (p1 (f7 c_1) c_1) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1)))) :rule resolution :premises (t334 t337 t360))
(step t362 (cl (p1 (f7 c_1) c_1) (not (= c_1 (f7 c_1))) (not (= c_1 (f6 c_1))) (not (p1 (f6 c_1) c_1))) :rule or :premises (t361))
(step t363 (cl (p1 (f7 c_1) c_1) (not (p1 (f6 c_1) c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f7 c_1)))) :rule reordering :premises (t362))
(step t364 (cl (or (not (p4 c_1)) (not (p1 (f7 c_1) c_1)))) :rule and :premises (a0) :args (78))
(step t365 (cl (not (p4 c_1)) (not (p1 (f7 c_1) c_1))) :rule or :premises (t364))
(step t366 (cl (not (p1 (f7 c_1) c_1))) :rule resolution :premises (t365 t325))
(step t367 (cl (or (not (p4 c_1)) (p1 (f6 c_1) c_1))) :rule and :premises (a0) :args (20))
(step t368 (cl (not (p4 c_1)) (p1 (f6 c_1) c_1)) :rule or :premises (t367))
(step t369 (cl (p1 (f6 c_1) c_1)) :rule resolution :premises (t368 t325))
(step t370 (cl (not (= (or (= (f7 c_1) c_0) (= (f7 c_1) c_1)) (or (= c_0 (f7 c_1)) (= c_1 (f7 c_1))))) (not (or (= (f7 c_1) c_0) (= (f7 c_1) c_1))) (or (= c_0 (f7 c_1)) (= c_1 (f7 c_1)))) :rule equiv_pos2)
(step t371 (cl (= (= (f7 c_1) c_0) (= c_0 (f7 c_1)))) :rule rare_rewrite :args ("eq-symm" (f7 c_1) c_0))
(step t372 (cl (= (= (f7 c_1) c_1) (= c_1 (f7 c_1)))) :rule rare_rewrite :args ("eq-symm" (f7 c_1) c_1))
(step t373 (cl (= (or (= (f7 c_1) c_0) (= (f7 c_1) c_1)) (or (= c_0 (f7 c_1)) (= c_1 (f7 c_1))))) :rule cong :premises (t371 t372))
(step t374 (cl (or (= (f7 c_1) c_0) (= (f7 c_1) c_1))) :rule and :premises (a0) :args (270))
(step t375 (cl (or (= c_0 (f7 c_1)) (= c_1 (f7 c_1)))) :rule resolution :premises (t370 t373 t374))
(step t376 (cl (= c_0 (f7 c_1)) (= c_1 (f7 c_1))) :rule or :premises (t375))
(step t377 (cl (not (= (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (or (p1 (f7 c_1) c_1) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))))) (not (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1)))) (or (p1 (f7 c_1) c_1) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1)))) :rule equiv_pos2)
(step t378 (cl (= (not (= c_0 (f7 c_1))) (not (= c_0 (f7 c_1))))) :rule refl)
(step t379 (cl (= (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (or (p1 (f7 c_1) c_1) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))))) :rule cong :premises (t10 t378 t60 t13))
(step t380 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1)) false) (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) :rule implies_neg1)
(anchor :step t381)
(assume t381.a0 (not (p1 (f7 c_1) c_1)))
(assume t381.a1 (= c_0 (f7 c_1)))
(assume t381.a2 (= c_0 (f5 c_1)))
(assume t381.a3 (p1 (f5 c_1) c_1))
(step t381.t0 (cl (not (= (= true false) false)) (not (= true false)) false) :rule equiv_pos2)
(step t381.t1 (cl (= (= true false) false)) :rule rare_rewrite :args ("evaluate"))
(step t381.t2 (cl (= (= (p1 (f5 c_1) c_1) true) (p1 (f5 c_1) c_1))) :rule equiv_simplify)
(step t381.t3 (cl (= (p1 (f5 c_1) c_1) true) (not (p1 (f5 c_1) c_1))) :rule equiv2 :premises (t381.t2))
(step t381.t4 (cl (= (p1 (f5 c_1) c_1) true)) :rule resolution :premises (t381.t3 t381.a3))
(step t381.t5 (cl (= true (p1 (f5 c_1) c_1))) :rule symm :premises (t381.t4))
(step t381.t6 (cl (= (f5 c_1) c_0)) :rule symm :premises (t381.a2))
(step t381.t7 (cl (= c_1 c_1)) :rule refl)
(step t381.t8 (cl (= (p1 (f5 c_1) c_1) (p1 c_0 c_1))) :rule cong :premises (t381.t6 t381.t7))
(step t381.t9 (cl (= (f7 c_1) c_0)) :rule symm :premises (t381.a1))
(step t381.t10 (cl (= c_0 (f7 c_1))) :rule symm :premises (t381.t9))
(step t381.t11 (cl (= (p1 c_0 c_1) (p1 (f7 c_1) c_1))) :rule cong :premises (t381.t10 t381.t7))
(step t381.t12 (cl (= (= (p1 (f7 c_1) c_1) false) (not (p1 (f7 c_1) c_1)))) :rule equiv_simplify)
(step t381.t13 (cl (= (p1 (f7 c_1) c_1) false) (not (not (p1 (f7 c_1) c_1)))) :rule equiv2 :premises (t381.t12))
(step t381.t14 (cl (not (not (not (p1 (f7 c_1) c_1)))) (p1 (f7 c_1) c_1)) :rule not_not)
(step t381.t15 (cl (= (p1 (f7 c_1) c_1) false) (p1 (f7 c_1) c_1)) :rule resolution :premises (t381.t13 t381.t14))
(step t381.t16 (cl (= (p1 (f7 c_1) c_1) false)) :rule resolution :premises (t381.t15 t381.a0))
(step t381.t17 (cl (= true false)) :rule trans :premises (t381.t5 t381.t8 t381.t11 t381.t16))
(step t381.t18 (cl false) :rule resolution :premises (t381.t0 t381.t1 t381.t17))
(step t381 (cl (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1)) false) :rule subproof :discharge (t381.a0 t381.a1 t381.a2 t381.a3))
(step t382 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (p1 (f7 c_1) c_1))) :rule and_pos :args (0))
(step t383 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) (= c_0 (f7 c_1))) :rule and_pos :args (1))
(step t384 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) (= c_0 (f5 c_1))) :rule and_pos :args (2))
(step t385 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) (p1 (f5 c_1) c_1)) :rule and_pos :args (3))
(step t386 (cl false (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1)))) :rule resolution :premises (t381 t382 t383 t384 t385))
(step t387 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) false) :rule reordering :premises (t386))
(step t388 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))) false) :rule contraction :premises (t387))
(step t389 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1)) false) false) :rule resolution :premises (t380 t388))
(step t390 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1)) false) (not false)) :rule implies_neg2)
(step t391 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1)) false) (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1)) false)) :rule resolution :premises (t389 t390))
(step t392 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1)) false)) :rule contraction :premises (t391))
(step t393 (cl (= (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1)) false) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1))))) :rule implies_simplify)
(step t394 (cl (not (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1)) false)) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1)))) :rule equiv1 :premises (t393))
(step t395 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f5 c_1)) (p1 (f5 c_1) c_1)))) :rule resolution :premises (t392 t394))
(step t396 (cl (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))) :rule not_and :premises (t395))
(step t397 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (not (not (not (p1 (f7 c_1) c_1))))) :rule or_neg :args (0))
(step t398 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (not (not (= c_0 (f7 c_1))))) :rule or_neg :args (1))
(step t399 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (not (not (= c_0 (f5 c_1))))) :rule or_neg :args (2))
(step t400 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (not (not (p1 (f5 c_1) c_1)))) :rule or_neg :args (3))
(step t401 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1)))) :rule resolution :premises (t396 t397 t398 t399 t400))
(step t402 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1)))) :rule contraction :premises (t401))
(step t403 (cl (or (p1 (f7 c_1) c_1) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1)))) :rule resolution :premises (t377 t379 t402))
(step t404 (cl (p1 (f7 c_1) c_1) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1))) (not (p1 (f5 c_1) c_1))) :rule or :premises (t403))
(step t405 (cl (p1 (f7 c_1) c_1) (not (p1 (f5 c_1) c_1)) (not (= c_0 (f7 c_1))) (not (= c_0 (f5 c_1)))) :rule reordering :premises (t404))
(step t406 (cl (or (not (p4 c_1)) (p1 (f5 c_1) c_1))) :rule and :premises (a0) :args (107))
(step t407 (cl (not (p4 c_1)) (p1 (f5 c_1) c_1)) :rule or :premises (t406))
(step t408 (cl (p1 (f5 c_1) c_1)) :rule resolution :premises (t407 t325))
(step t409 (cl (= c_0 (f5 c_1)) (= c_1 (f5 c_1))) :rule or :premises (t46))
(step t410 (cl (not (= (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) (or (= (f6 c_1) (f5 c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))))) (not (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1))))) (or (= (f6 c_1) (f5 c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1))))) :rule equiv_pos2)
(step t411 (cl (= (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) (or (= (f6 c_1) (f5 c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))))) :rule cong :premises (t58 t335 t12))
(step t412 (cl (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1))) (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1)))) :rule and_neg)
(step t413 (cl (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1)))) :rule implies_neg1)
(anchor :step t414)
(assume t414.a0 (not (= (f6 c_1) (f5 c_1))))
(assume t414.a1 (= c_1 (f6 c_1)))
(step t414.t0 (cl (= (= (= c_1 (f5 c_1)) false) (not (= c_1 (f5 c_1))))) :rule equiv_simplify)
(step t414.t1 (cl (not (= (= c_1 (f5 c_1)) false)) (not (= c_1 (f5 c_1)))) :rule equiv1 :premises (t414.t0))
(step t414.t2 (cl (= (f6 c_1) c_1)) :rule symm :premises (t414.a1))
(step t414.t3 (cl (= c_1 (f6 c_1))) :rule symm :premises (t414.t2))
(step t414.t4 (cl (= (f5 c_1) (f5 c_1))) :rule refl)
(step t414.t5 (cl (= (= c_1 (f5 c_1)) (= (f6 c_1) (f5 c_1)))) :rule cong :premises (t414.t3 t414.t4))
(step t414.t6 (cl (= (= (= (f6 c_1) (f5 c_1)) false) (not (= (f6 c_1) (f5 c_1))))) :rule equiv_simplify)
(step t414.t7 (cl (= (= (f6 c_1) (f5 c_1)) false) (not (not (= (f6 c_1) (f5 c_1))))) :rule equiv2 :premises (t414.t6))
(step t414.t8 (cl (not (not (not (= (f6 c_1) (f5 c_1))))) (= (f6 c_1) (f5 c_1))) :rule not_not)
(step t414.t9 (cl (= (= (f6 c_1) (f5 c_1)) false) (= (f6 c_1) (f5 c_1))) :rule resolution :premises (t414.t7 t414.t8))
(step t414.t10 (cl (= (= (f6 c_1) (f5 c_1)) false)) :rule resolution :premises (t414.t9 t414.a0))
(step t414.t11 (cl (= (= c_1 (f5 c_1)) false)) :rule trans :premises (t414.t5 t414.t10))
(step t414.t12 (cl (not (= c_1 (f5 c_1)))) :rule resolution :premises (t414.t1 t414.t11))
(step t414 (cl (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) :rule subproof :discharge (t414.a0 t414.a1))
(step t415 (cl (not (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1)))) (not (= (f6 c_1) (f5 c_1)))) :rule and_pos :args (0))
(step t416 (cl (not (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1)))) (= c_1 (f6 c_1))) :rule and_pos :args (1))
(step t417 (cl (not (= c_1 (f5 c_1))) (not (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1)))) (not (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1))))) :rule resolution :premises (t414 t415 t416))
(step t418 (cl (not (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1)))) (not (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1)))) (not (= c_1 (f5 c_1)))) :rule reordering :premises (t417))
(step t419 (cl (not (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1)))) (not (= c_1 (f5 c_1)))) :rule contraction :premises (t418))
(step t420 (cl (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) (not (= c_1 (f5 c_1)))) :rule resolution :premises (t413 t419))
(step t421 (cl (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) (not (not (= c_1 (f5 c_1))))) :rule implies_neg2)
(step t422 (cl (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1))))) :rule resolution :premises (t420 t421))
(step t423 (cl (=> (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1))))) :rule contraction :premises (t422))
(step t424 (cl (not (and (not (= (f6 c_1) (f5 c_1))) (= c_1 (f6 c_1)))) (not (= c_1 (f5 c_1)))) :rule implies :premises (t423))
(step t425 (cl (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) :rule resolution :premises (t412 t424))
(step t426 (cl (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) (not (not (not (= (f6 c_1) (f5 c_1)))))) :rule or_neg :args (0))
(step t427 (cl (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) (not (not (= c_1 (f6 c_1))))) :rule or_neg :args (1))
(step t428 (cl (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) (not (not (= c_1 (f5 c_1))))) :rule or_neg :args (2))
(step t429 (cl (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1))))) :rule resolution :premises (t425 t426 t427 t428))
(step t430 (cl (or (not (not (= (f6 c_1) (f5 c_1)))) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1))))) :rule contraction :premises (t429))
(step t431 (cl (or (= (f6 c_1) (f5 c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1))))) :rule resolution :premises (t410 t411 t430))
(step t432 (cl (= (f6 c_1) (f5 c_1)) (not (= c_1 (f6 c_1))) (not (= c_1 (f5 c_1)))) :rule or :premises (t431))
(step t433 (cl (= c_0 (f6 c_1)) (= c_1 (f6 c_1))) :rule or :premises (t332))
(step t434 (cl (not (= (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (or (p1 (f7 c_1) c_1) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))))) (not (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1)))) (or (p1 (f7 c_1) c_1) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1)))) :rule equiv_pos2)
(step t435 (cl (= (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (or (p1 (f7 c_1) c_1) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))))) :rule cong :premises (t10 t378 t59 t336))
(step t436 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1)) false) (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) :rule implies_neg1)
(anchor :step t437)
(assume t437.a0 (not (p1 (f7 c_1) c_1)))
(assume t437.a1 (= c_0 (f7 c_1)))
(assume t437.a2 (= c_0 (f6 c_1)))
(assume t437.a3 (p1 (f6 c_1) c_1))
(step t437.t0 (cl (not (= (= true false) false)) (not (= true false)) false) :rule equiv_pos2)
(step t437.t1 (cl (= (= true false) false)) :rule rare_rewrite :args ("evaluate"))
(step t437.t2 (cl (= (= (p1 (f6 c_1) c_1) true) (p1 (f6 c_1) c_1))) :rule equiv_simplify)
(step t437.t3 (cl (= (p1 (f6 c_1) c_1) true) (not (p1 (f6 c_1) c_1))) :rule equiv2 :premises (t437.t2))
(step t437.t4 (cl (= (p1 (f6 c_1) c_1) true)) :rule resolution :premises (t437.t3 t437.a3))
(step t437.t5 (cl (= true (p1 (f6 c_1) c_1))) :rule symm :premises (t437.t4))
(step t437.t6 (cl (= (f6 c_1) c_0)) :rule symm :premises (t437.a2))
(step t437.t7 (cl (= c_1 c_1)) :rule refl)
(step t437.t8 (cl (= (p1 (f6 c_1) c_1) (p1 c_0 c_1))) :rule cong :premises (t437.t6 t437.t7))
(step t437.t9 (cl (= (f7 c_1) c_0)) :rule symm :premises (t437.a1))
(step t437.t10 (cl (= c_0 (f7 c_1))) :rule symm :premises (t437.t9))
(step t437.t11 (cl (= (p1 c_0 c_1) (p1 (f7 c_1) c_1))) :rule cong :premises (t437.t10 t437.t7))
(step t437.t12 (cl (= (= (p1 (f7 c_1) c_1) false) (not (p1 (f7 c_1) c_1)))) :rule equiv_simplify)
(step t437.t13 (cl (= (p1 (f7 c_1) c_1) false) (not (not (p1 (f7 c_1) c_1)))) :rule equiv2 :premises (t437.t12))
(step t437.t14 (cl (not (not (not (p1 (f7 c_1) c_1)))) (p1 (f7 c_1) c_1)) :rule not_not)
(step t437.t15 (cl (= (p1 (f7 c_1) c_1) false) (p1 (f7 c_1) c_1)) :rule resolution :premises (t437.t13 t437.t14))
(step t437.t16 (cl (= (p1 (f7 c_1) c_1) false)) :rule resolution :premises (t437.t15 t437.a0))
(step t437.t17 (cl (= true false)) :rule trans :premises (t437.t5 t437.t8 t437.t11 t437.t16))
(step t437.t18 (cl false) :rule resolution :premises (t437.t0 t437.t1 t437.t17))
(step t437 (cl (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1)) false) :rule subproof :discharge (t437.a0 t437.a1 t437.a2 t437.a3))
(step t438 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (p1 (f7 c_1) c_1))) :rule and_pos :args (0))
(step t439 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) (= c_0 (f7 c_1))) :rule and_pos :args (1))
(step t440 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) (= c_0 (f6 c_1))) :rule and_pos :args (2))
(step t441 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) (p1 (f6 c_1) c_1)) :rule and_pos :args (3))
(step t442 (cl false (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1)))) :rule resolution :premises (t437 t438 t439 t440 t441))
(step t443 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) false) :rule reordering :premises (t442))
(step t444 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))) false) :rule contraction :premises (t443))
(step t445 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1)) false) false) :rule resolution :premises (t436 t444))
(step t446 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1)) false) (not false)) :rule implies_neg2)
(step t447 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1)) false) (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1)) false)) :rule resolution :premises (t445 t446))
(step t448 (cl (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1)) false)) :rule contraction :premises (t447))
(step t449 (cl (= (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1)) false) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1))))) :rule implies_simplify)
(step t450 (cl (not (=> (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1)) false)) (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1)))) :rule equiv1 :premises (t449))
(step t451 (cl (not (and (not (p1 (f7 c_1) c_1)) (= c_0 (f7 c_1)) (= c_0 (f6 c_1)) (p1 (f6 c_1) c_1)))) :rule resolution :premises (t448 t450))
(step t452 (cl (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))) :rule not_and :premises (t451))
(step t453 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (not (not (not (p1 (f7 c_1) c_1))))) :rule or_neg :args (0))
(step t454 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (not (not (= c_0 (f7 c_1))))) :rule or_neg :args (1))
(step t455 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (not (not (= c_0 (f6 c_1))))) :rule or_neg :args (2))
(step t456 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (not (not (p1 (f6 c_1) c_1)))) :rule or_neg :args (3))
(step t457 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))) (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1)))) :rule resolution :premises (t452 t453 t454 t455 t456))
(step t458 (cl (or (not (not (p1 (f7 c_1) c_1))) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1)))) :rule contraction :premises (t457))
(step t459 (cl (or (p1 (f7 c_1) c_1) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1)))) :rule resolution :premises (t434 t435 t458))
(step t460 (cl (p1 (f7 c_1) c_1) (not (= c_0 (f7 c_1))) (not (= c_0 (f6 c_1))) (not (p1 (f6 c_1) c_1))) :rule or :premises (t459))
(step t461 (cl (p1 (f7 c_1) c_1) (not (p1 (f6 c_1) c_1)) (not (= c_0 (f6 c_1))) (not (= c_0 (f7 c_1)))) :rule reordering :premises (t460))
(step t462 (cl (not (= c_0 (f7 c_1)))) :rule resolution :premises (t405 t408 t366 t409 t432 t326 t433 t461 t366 t369))
(step t463 (cl (= c_1 (f7 c_1))) :rule resolution :premises (t376 t462))
(step t464 (cl (not (= c_1 (f6 c_1)))) :rule resolution :premises (t363 t366 t369 t463))
(step t465 (cl (= c_0 (f6 c_1))) :rule resolution :premises (t333 t464))
(step t466 (cl (not (= c_0 (f5 c_1)))) :rule resolution :premises (t82 t326 t465))
(step t467 (cl (= c_1 (f5 c_1))) :rule resolution :premises (t47 t466))
(step t468 (cl) :rule resolution :premises (t40 t467 t463 t408 t366))
