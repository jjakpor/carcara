unsat
(assume a0 (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e0) e1)) (= (op e4 e0) e2)) (= (op e4 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e4 e1) e0) (= (op e4 e1) e1)) (= (op e4 e1) e2)) (= (op e4 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e4 e2) e0) (= (op e4 e2) e1)) (= (op e4 e2) e2)) (= (op e4 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4))) (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)))))
(assume a1 (and (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4))))) (and (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) (and (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))))))
(assume a2 (or (or (or (or (and (and (and (and (not (= (op e0 e0) e0)) (not (= (op e1 e1) e0))) (not (= (op e2 e2) e0))) (not (= (op e3 e3) e0))) (not (= (op e4 e4) e0))) (and (and (and (and (not (= (op e0 e0) e1)) (not (= (op e1 e1) e1))) (not (= (op e2 e2) e1))) (not (= (op e3 e3) e1))) (not (= (op e4 e4) e1)))) (and (and (and (and (not (= (op e0 e0) e2)) (not (= (op e1 e1) e2))) (not (= (op e2 e2) e2))) (not (= (op e3 e3) e2))) (not (= (op e4 e4) e2)))) (and (and (and (and (not (= (op e0 e0) e3)) (not (= (op e1 e1) e3))) (not (= (op e2 e2) e3))) (not (= (op e3 e3) e3))) (not (= (op e4 e4) e3)))) (and (and (and (and (not (= (op e0 e0) e4)) (not (= (op e1 e1) e4))) (not (= (op e2 e2) e4))) (not (= (op e3 e3) e4))) (not (= (op e4 e4) e4)))))
(assume a3 (and (and (and (and (or (or (or (or (or (or (or (or (and (= (op e0 e0) e0) (= (op e0 e0) e0)) (and (= (op e0 e1) e0) (= (op e1 e0) e0))) (and (= (op e0 e2) e0) (= (op e2 e0) e0))) (and (= (op e0 e3) e0) (= (op e3 e0) e0))) (and (= (op e0 e4) e0) (= (op e4 e0) e0))) (or (or (or (or (and (= (op e1 e0) e0) (= (op e0 e1) e0)) (and (= (op e1 e1) e0) (= (op e1 e1) e0))) (and (= (op e1 e2) e0) (= (op e2 e1) e0))) (and (= (op e1 e3) e0) (= (op e3 e1) e0))) (and (= (op e1 e4) e0) (= (op e4 e1) e0)))) (or (or (or (or (and (= (op e2 e0) e0) (= (op e0 e2) e0)) (and (= (op e2 e1) e0) (= (op e1 e2) e0))) (and (= (op e2 e2) e0) (= (op e2 e2) e0))) (and (= (op e2 e3) e0) (= (op e3 e2) e0))) (and (= (op e2 e4) e0) (= (op e4 e2) e0)))) (or (or (or (or (and (= (op e3 e0) e0) (= (op e0 e3) e0)) (and (= (op e3 e1) e0) (= (op e1 e3) e0))) (and (= (op e3 e2) e0) (= (op e2 e3) e0))) (and (= (op e3 e3) e0) (= (op e3 e3) e0))) (and (= (op e3 e4) e0) (= (op e4 e3) e0)))) (or (or (or (or (and (= (op e4 e0) e0) (= (op e0 e4) e0)) (and (= (op e4 e1) e0) (= (op e1 e4) e0))) (and (= (op e4 e2) e0) (= (op e2 e4) e0))) (and (= (op e4 e3) e0) (= (op e3 e4) e0))) (and (= (op e4 e4) e0) (= (op e4 e4) e0)))) (or (or (or (or (or (or (or (or (and (= (op e0 e0) e1) (= (op e0 e0) e1)) (and (= (op e0 e1) e1) (= (op e1 e0) e1))) (and (= (op e0 e2) e1) (= (op e2 e0) e1))) (and (= (op e0 e3) e1) (= (op e3 e0) e1))) (and (= (op e0 e4) e1) (= (op e4 e0) e1))) (or (or (or (or (and (= (op e1 e0) e1) (= (op e0 e1) e1)) (and (= (op e1 e1) e1) (= (op e1 e1) e1))) (and (= (op e1 e2) e1) (= (op e2 e1) e1))) (and (= (op e1 e3) e1) (= (op e3 e1) e1))) (and (= (op e1 e4) e1) (= (op e4 e1) e1)))) (or (or (or (or (and (= (op e2 e0) e1) (= (op e0 e2) e1)) (and (= (op e2 e1) e1) (= (op e1 e2) e1))) (and (= (op e2 e2) e1) (= (op e2 e2) e1))) (and (= (op e2 e3) e1) (= (op e3 e2) e1))) (and (= (op e2 e4) e1) (= (op e4 e2) e1)))) (or (or (or (or (and (= (op e3 e0) e1) (= (op e0 e3) e1)) (and (= (op e3 e1) e1) (= (op e1 e3) e1))) (and (= (op e3 e2) e1) (= (op e2 e3) e1))) (and (= (op e3 e3) e1) (= (op e3 e3) e1))) (and (= (op e3 e4) e1) (= (op e4 e3) e1)))) (or (or (or (or (and (= (op e4 e0) e1) (= (op e0 e4) e1)) (and (= (op e4 e1) e1) (= (op e1 e4) e1))) (and (= (op e4 e2) e1) (= (op e2 e4) e1))) (and (= (op e4 e3) e1) (= (op e3 e4) e1))) (and (= (op e4 e4) e1) (= (op e4 e4) e1))))) (or (or (or (or (or (or (or (or (and (= (op e0 e0) e2) (= (op e0 e0) e2)) (and (= (op e0 e1) e2) (= (op e1 e0) e2))) (and (= (op e0 e2) e2) (= (op e2 e0) e2))) (and (= (op e0 e3) e2) (= (op e3 e0) e2))) (and (= (op e0 e4) e2) (= (op e4 e0) e2))) (or (or (or (or (and (= (op e1 e0) e2) (= (op e0 e1) e2)) (and (= (op e1 e1) e2) (= (op e1 e1) e2))) (and (= (op e1 e2) e2) (= (op e2 e1) e2))) (and (= (op e1 e3) e2) (= (op e3 e1) e2))) (and (= (op e1 e4) e2) (= (op e4 e1) e2)))) (or (or (or (or (and (= (op e2 e0) e2) (= (op e0 e2) e2)) (and (= (op e2 e1) e2) (= (op e1 e2) e2))) (and (= (op e2 e2) e2) (= (op e2 e2) e2))) (and (= (op e2 e3) e2) (= (op e3 e2) e2))) (and (= (op e2 e4) e2) (= (op e4 e2) e2)))) (or (or (or (or (and (= (op e3 e0) e2) (= (op e0 e3) e2)) (and (= (op e3 e1) e2) (= (op e1 e3) e2))) (and (= (op e3 e2) e2) (= (op e2 e3) e2))) (and (= (op e3 e3) e2) (= (op e3 e3) e2))) (and (= (op e3 e4) e2) (= (op e4 e3) e2)))) (or (or (or (or (and (= (op e4 e0) e2) (= (op e0 e4) e2)) (and (= (op e4 e1) e2) (= (op e1 e4) e2))) (and (= (op e4 e2) e2) (= (op e2 e4) e2))) (and (= (op e4 e3) e2) (= (op e3 e4) e2))) (and (= (op e4 e4) e2) (= (op e4 e4) e2))))) (or (or (or (or (or (or (or (or (and (= (op e0 e0) e3) (= (op e0 e0) e3)) (and (= (op e0 e1) e3) (= (op e1 e0) e3))) (and (= (op e0 e2) e3) (= (op e2 e0) e3))) (and (= (op e0 e3) e3) (= (op e3 e0) e3))) (and (= (op e0 e4) e3) (= (op e4 e0) e3))) (or (or (or (or (and (= (op e1 e0) e3) (= (op e0 e1) e3)) (and (= (op e1 e1) e3) (= (op e1 e1) e3))) (and (= (op e1 e2) e3) (= (op e2 e1) e3))) (and (= (op e1 e3) e3) (= (op e3 e1) e3))) (and (= (op e1 e4) e3) (= (op e4 e1) e3)))) (or (or (or (or (and (= (op e2 e0) e3) (= (op e0 e2) e3)) (and (= (op e2 e1) e3) (= (op e1 e2) e3))) (and (= (op e2 e2) e3) (= (op e2 e2) e3))) (and (= (op e2 e3) e3) (= (op e3 e2) e3))) (and (= (op e2 e4) e3) (= (op e4 e2) e3)))) (or (or (or (or (and (= (op e3 e0) e3) (= (op e0 e3) e3)) (and (= (op e3 e1) e3) (= (op e1 e3) e3))) (and (= (op e3 e2) e3) (= (op e2 e3) e3))) (and (= (op e3 e3) e3) (= (op e3 e3) e3))) (and (= (op e3 e4) e3) (= (op e4 e3) e3)))) (or (or (or (or (and (= (op e4 e0) e3) (= (op e0 e4) e3)) (and (= (op e4 e1) e3) (= (op e1 e4) e3))) (and (= (op e4 e2) e3) (= (op e2 e4) e3))) (and (= (op e4 e3) e3) (= (op e3 e4) e3))) (and (= (op e4 e4) e3) (= (op e4 e4) e3))))) (or (or (or (or (or (or (or (or (and (= (op e0 e0) e4) (= (op e0 e0) e4)) (and (= (op e0 e1) e4) (= (op e1 e0) e4))) (and (= (op e0 e2) e4) (= (op e2 e0) e4))) (and (= (op e0 e3) e4) (= (op e3 e0) e4))) (and (= (op e0 e4) e4) (= (op e4 e0) e4))) (or (or (or (or (and (= (op e1 e0) e4) (= (op e0 e1) e4)) (and (= (op e1 e1) e4) (= (op e1 e1) e4))) (and (= (op e1 e2) e4) (= (op e2 e1) e4))) (and (= (op e1 e3) e4) (= (op e3 e1) e4))) (and (= (op e1 e4) e4) (= (op e4 e1) e4)))) (or (or (or (or (and (= (op e2 e0) e4) (= (op e0 e2) e4)) (and (= (op e2 e1) e4) (= (op e1 e2) e4))) (and (= (op e2 e2) e4) (= (op e2 e2) e4))) (and (= (op e2 e3) e4) (= (op e3 e2) e4))) (and (= (op e2 e4) e4) (= (op e4 e2) e4)))) (or (or (or (or (and (= (op e3 e0) e4) (= (op e0 e3) e4)) (and (= (op e3 e1) e4) (= (op e1 e3) e4))) (and (= (op e3 e2) e4) (= (op e2 e3) e4))) (and (= (op e3 e3) e4) (= (op e3 e3) e4))) (and (= (op e3 e4) e4) (= (op e4 e3) e4)))) (or (or (or (or (and (= (op e4 e0) e4) (= (op e0 e4) e4)) (and (= (op e4 e1) e4) (= (op e1 e4) e4))) (and (= (op e4 e2) e4) (= (op e2 e4) e4))) (and (= (op e4 e3) e4) (= (op e3 e4) e4))) (and (= (op e4 e4) e4) (= (op e4 e4) e4))))))
(assume a4 (or (or (or (or (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1)))) (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2)))) (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3)))) (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4)))))
(assume a5 (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e1)) (= (op e2 e2) e2)) (= (op e3 e3) e3)) (= (op e4 e4) e4)))
(assume a6 (and (and (and (and (or (or (or (or (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4)) (or (or (or (or (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4))) (or (or (or (or (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3)) (= (op (op e2 e4) e2) e4))) (or (or (or (or (= (op (op e3 e0) e3) e0) (= (op (op e3 e1) e3) e1)) (= (op (op e3 e2) e3) e2)) (= (op (op e3 e3) e3) e3)) (= (op (op e3 e4) e3) e4))) (or (or (or (or (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1)) (= (op (op e4 e2) e4) e2)) (= (op (op e4 e3) e4) e3)) (= (op (op e4 e4) e4) e4))))
(assume a7 (and (and (and (and (or (or (or (or (= (op e0 (op e0 e0)) e0) (= (op e0 (op e0 e1)) e1)) (= (op e0 (op e0 e2)) e2)) (= (op e0 (op e0 e3)) e3)) (= (op e0 (op e0 e4)) e4)) (or (or (or (or (= (op e1 (op e1 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e1 (op e1 e2)) e2)) (= (op e1 (op e1 e3)) e3)) (= (op e1 (op e1 e4)) e4))) (or (or (or (or (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e2 (op e2 e3)) e3)) (= (op e2 (op e2 e4)) e4))) (or (or (or (or (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2)) (= (op e3 (op e3 e3)) e3)) (= (op e3 (op e3 e4)) e4))) (or (or (or (or (= (op e4 (op e4 e0)) e0) (= (op e4 (op e4 e1)) e1)) (= (op e4 (op e4 e2)) e2)) (= (op e4 (op e4 e3)) e3)) (= (op e4 (op e4 e4)) e4))))
(assume a8 (and (and (and (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0))) (or (not (= (op e0 e3) e0)) (= (op e3 e0) e0))) (or (not (= (op e0 e4) e0)) (= (op e4 e0) e0))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1))) (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)))) (and (and (and (and (or (not (= (op e2 e0) e2)) (= (op e0 e2) e2)) (or (not (= (op e2 e1) e2)) (= (op e1 e2) e2))) (or (not (= (op e2 e2) e2)) (= (op e2 e2) e2))) (or (not (= (op e2 e3) e2)) (= (op e3 e2) e2))) (or (not (= (op e2 e4) e2)) (= (op e4 e2) e2)))) (and (and (and (and (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= (op e3 e1) e3)) (= (op e1 e3) e3))) (or (not (= (op e3 e2) e3)) (= (op e2 e3) e3))) (or (not (= (op e3 e3) e3)) (= (op e3 e3) e3))) (or (not (= (op e3 e4) e3)) (= (op e4 e3) e3)))) (and (and (and (and (or (not (= (op e4 e0) e4)) (= (op e0 e4) e4)) (or (not (= (op e4 e1) e4)) (= (op e1 e4) e4))) (or (not (= (op e4 e2) e4)) (= (op e2 e4) e4))) (or (not (= (op e4 e3) e4)) (= (op e3 e4) e4))) (or (not (= (op e4 e4) e4)) (= (op e4 e4) e4)))))
(assume a9 (and (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e3 (op e3 e3)) e3)) (= (op e4 (op e4 e4)) e4)))
(assume a10 (and (and (and (and (and (and (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4)) (and (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4))) (and (and (and (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3)) (= (op (op e2 e4) e2) e4))) (and (and (and (and (= (op (op e3 e0) e3) e0) (= (op (op e3 e1) e3) e1)) (= (op (op e3 e2) e3) e2)) (= (op (op e3 e3) e3) e3)) (= (op (op e3 e4) e3) e4))) (and (and (and (and (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1)) (= (op (op e4 e2) e4) e2)) (= (op (op e4 e3) e4) e3)) (= (op (op e4 e4) e4) e4))))
(assume a11 (and (and (and (and (= (op (op e0 e0) (op e0 e0)) (op e0 e0)) (= (op (op e1 e1) (op e1 e1)) (op e1 e1))) (= (op (op e2 e2) (op e2 e2)) (op e2 e2))) (= (op (op e3 e3) (op e3 e3)) (op e3 e3))) (= (op (op e4 e4) (op e4 e4)) (op e4 e4))))
(assume a12 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4)))))))
(assume a13 (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3))) (not (= e2 e4))) (not (= e3 e4))))
(assume a14 (and (and (= e0 (op e1 e1)) (= e1 (op e4 e3))) (= e2 (op e3 e4))))
(assume a15 (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e1)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e1)) (= (op e1 e1) e0)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0))))
(step t0 (cl (not (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e1)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e1)) (= (op e1 e1) e0)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0))) (not (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))))) (not (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e1)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e1)) (= (op e1 e1) e0)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0)))) (not (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule equiv_pos2)
(step t1 (cl (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e1)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e1)) (= (op e1 e1) e0)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0)) (and (= (op e4 e4) e0) (= (op e4 e3) e1) (= (op e4 e2) e3) (= (op e4 e1) e2) (= (op e4 e0) e4) (= (op e3 e4) e2) (= (op e3 e3) e0) (= (op e3 e2) e1) (= (op e3 e1) e4) (= (op e3 e0) e3) (= (op e2 e4) e1) (= (op e2 e3) e4) (= (op e2 e2) e0) (= (op e2 e1) e3) (= (op e2 e0) e2) (= (op e1 e4) e3) (= (op e1 e3) e2) (= (op e1 e2) e4) (= (op e1 e1) e0) (= (op e1 e0) e1) (= (op e0 e4) e4) (= (op e0 e3) e3) (= (op e0 e2) e2) (= (op e0 e0) e0) (= (op e0 e1) e1)))) :rule hole :args ("ACI_NORM" (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e1)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e1)) (= (op e1 e1) e0)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0)) (and (= (op e4 e4) e0) (= (op e4 e3) e1) (= (op e4 e2) e3) (= (op e4 e1) e2) (= (op e4 e0) e4) (= (op e3 e4) e2) (= (op e3 e3) e0) (= (op e3 e2) e1) (= (op e3 e1) e4) (= (op e3 e0) e3) (= (op e2 e4) e1) (= (op e2 e3) e4) (= (op e2 e2) e0) (= (op e2 e1) e3) (= (op e2 e0) e2) (= (op e1 e4) e3) (= (op e1 e3) e2) (= (op e1 e2) e4) (= (op e1 e1) e0) (= (op e1 e0) e1) (= (op e0 e4) e4) (= (op e0 e3) e3) (= (op e0 e2) e2) (= (op e0 e0) e0) (= (op e0 e1) e1)))))
(step t2 (cl (= (= (op e4 e4) e0) (= e0 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e0))
(step t3 (cl (= (= (op e4 e3) e1) (= e1 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e1))
(step t4 (cl (= (= (op e4 e2) e3) (= e3 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e3))
(step t5 (cl (= (= (op e4 e1) e2) (= e2 (op e4 e1)))) :rule rare_rewrite :args ("eq-symm" (op e4 e1) e2))
(step t6 (cl (= (= (op e4 e0) e4) (= e4 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e4))
(step t7 (cl (= (= (op e3 e4) e2) (= e2 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e2))
(step t8 (cl (= (= (op e3 e3) e0) (= e0 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e0))
(step t9 (cl (= (= (op e3 e2) e1) (= e1 (op e3 e2)))) :rule rare_rewrite :args ("eq-symm" (op e3 e2) e1))
(step t10 (cl (= (= (op e3 e1) e4) (= e4 (op e3 e1)))) :rule rare_rewrite :args ("eq-symm" (op e3 e1) e4))
(step t11 (cl (= (= (op e3 e0) e3) (= e3 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e3))
(step t12 (cl (= (= (op e2 e4) e1) (= e1 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e1))
(step t13 (cl (= (= (op e2 e3) e4) (= e4 (op e2 e3)))) :rule rare_rewrite :args ("eq-symm" (op e2 e3) e4))
(step t14 (cl (= (= (op e2 e2) e0) (= e0 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e0))
(step t15 (cl (= (= (op e2 e1) e3) (= e3 (op e2 e1)))) :rule rare_rewrite :args ("eq-symm" (op e2 e1) e3))
(step t16 (cl (= (= (op e2 e0) e2) (= e2 (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) e2))
(step t17 (cl (= (= (op e1 e4) e3) (= e3 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e3))
(step t18 (cl (= (= (op e1 e3) e2) (= e2 (op e1 e3)))) :rule rare_rewrite :args ("eq-symm" (op e1 e3) e2))
(step t19 (cl (= (= (op e1 e2) e4) (= e4 (op e1 e2)))) :rule rare_rewrite :args ("eq-symm" (op e1 e2) e4))
(step t20 (cl (= (= (op e1 e1) e0) (= e0 (op e1 e1)))) :rule rare_rewrite :args ("eq-symm" (op e1 e1) e0))
(step t21 (cl (= (= (op e1 e0) e1) (= e1 (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) e1))
(step t22 (cl (= (= (op e0 e4) e4) (= e4 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e4))
(step t23 (cl (= (= (op e0 e3) e3) (= e3 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e3))
(step t24 (cl (= (= (op e0 e2) e2) (= e2 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e2))
(step t25 (cl (= (= (op e0 e0) e0) (= e0 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e0))
(step t26 (cl (= (= (op e0 e1) e1) (= e1 (op e0 e1)))) :rule rare_rewrite :args ("eq-symm" (op e0 e1) e1))
(step t27 (cl (= (and (= (op e4 e4) e0) (= (op e4 e3) e1) (= (op e4 e2) e3) (= (op e4 e1) e2) (= (op e4 e0) e4) (= (op e3 e4) e2) (= (op e3 e3) e0) (= (op e3 e2) e1) (= (op e3 e1) e4) (= (op e3 e0) e3) (= (op e2 e4) e1) (= (op e2 e3) e4) (= (op e2 e2) e0) (= (op e2 e1) e3) (= (op e2 e0) e2) (= (op e1 e4) e3) (= (op e1 e3) e2) (= (op e1 e2) e4) (= (op e1 e1) e0) (= (op e1 e0) e1) (= (op e0 e4) e4) (= (op e0 e3) e3) (= (op e0 e2) e2) (= (op e0 e0) e0) (= (op e0 e1) e1)) (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e0 (op e1 e1)) (= e1 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e0 (op e0 e0)) (= e1 (op e0 e1))))) :rule cong :premises (t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26))
(step t28 (cl (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e1)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e1)) (= (op e1 e1) e0)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0)) (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e0 (op e1 e1)) (= e1 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e0 (op e0 e0)) (= e1 (op e0 e1))))) :rule trans :premises (t1 t27))
(step t29 (cl (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e1)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e1)) (= (op e1 e1) e0)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0))) (not (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e0 (op e1 e1)) (= e1 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e0 (op e0 e0)) (= e1 (op e0 e1)))))) :rule cong :premises (t28))
(step t30 (cl (and (= e0 (op e1 e1)) (= e1 (op e4 e3)))) :rule and :premises (a14) :args (0))
(step t31 (cl (= e0 (op e1 e1))) :rule and :premises (t30) :args (0))
(step t32 (cl (= e1 (op e4 e3))) :rule and :premises (t30) :args (1))
(step t33 (cl (= (op e1 e1) (op (op e4 e3) (op e4 e3)))) :rule cong :premises (t32 t32))
(step t34 (cl (= e0 (op (op e4 e3) (op e4 e3)))) :rule trans :premises (t31 t33))
(step t35 (cl (= (op e4 e4) (op e4 e4))) :rule refl)
(step t36 (cl (= (= e0 (op e4 e4)) (= (op (op e4 e3) (op e4 e3)) (op e4 e4)))) :rule cong :premises (t34 t35))
(step t37 (cl (= (op e4 e3) (op e4 e3))) :rule refl)
(step t38 (cl (= (= e1 (op e4 e3)) (= (op e4 e3) (op e4 e3)))) :rule cong :premises (t32 t37))
(step t39 (cl (= e3 e3)) :rule refl)
(step t40 (cl (= e4 e4)) :rule refl)
(step t41 (cl (= e2 (op e3 e4))) :rule and :premises (a14) :args (1))
(step t42 (cl (= (op e4 e2) (op e4 (op e3 e4)))) :rule cong :premises (t40 t41))
(step t43 (cl (= (= e3 (op e4 e2)) (= e3 (op e4 (op e3 e4))))) :rule cong :premises (t39 t42))
(step t44 (cl (= (op e4 e1) (op e4 (op e4 e3)))) :rule cong :premises (t40 t32))
(step t45 (cl (= (= e2 (op e4 e1)) (= (op e3 e4) (op e4 (op e4 e3))))) :rule cong :premises (t41 t44))
(step t46 (cl (= (op e4 e0) (op e4 (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t40 t34))
(step t47 (cl (= (= e4 (op e4 e0)) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t40 t46))
(step t48 (cl (= (op e3 e4) (op e3 e4))) :rule refl)
(step t49 (cl (= (= e2 (op e3 e4)) (= (op e3 e4) (op e3 e4)))) :rule cong :premises (t41 t48))
(step t50 (cl (= (op e3 e3) (op e3 e3))) :rule refl)
(step t51 (cl (= (= e0 (op e3 e3)) (= (op (op e4 e3) (op e4 e3)) (op e3 e3)))) :rule cong :premises (t34 t50))
(step t52 (cl (= (op e3 e2) (op e3 (op e3 e4)))) :rule cong :premises (t39 t41))
(step t53 (cl (= (= e1 (op e3 e2)) (= (op e4 e3) (op e3 (op e3 e4))))) :rule cong :premises (t32 t52))
(step t54 (cl (= (op e3 e1) (op e3 (op e4 e3)))) :rule cong :premises (t39 t32))
(step t55 (cl (= (= e4 (op e3 e1)) (= e4 (op e3 (op e4 e3))))) :rule cong :premises (t40 t54))
(step t56 (cl (= (op e3 e0) (op e3 (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t39 t34))
(step t57 (cl (= (= e3 (op e3 e0)) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t39 t56))
(step t58 (cl (= (op e2 e4) (op (op e3 e4) e4))) :rule cong :premises (t41 t40))
(step t59 (cl (= (= e1 (op e2 e4)) (= (op e4 e3) (op (op e3 e4) e4)))) :rule cong :premises (t32 t58))
(step t60 (cl (= (op e2 e3) (op (op e3 e4) e3))) :rule cong :premises (t41 t39))
(step t61 (cl (= (= e4 (op e2 e3)) (= e4 (op (op e3 e4) e3)))) :rule cong :premises (t40 t60))
(step t62 (cl (= (op e2 e2) (op (op e3 e4) (op e3 e4)))) :rule cong :premises (t41 t41))
(step t63 (cl (= (= e0 (op e2 e2)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))))) :rule cong :premises (t34 t62))
(step t64 (cl (= (op e2 e1) (op (op e3 e4) (op e4 e3)))) :rule cong :premises (t41 t32))
(step t65 (cl (= (= e3 (op e2 e1)) (= e3 (op (op e3 e4) (op e4 e3))))) :rule cong :premises (t39 t64))
(step t66 (cl (= (op e2 e0) (op (op e3 e4) (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t41 t34))
(step t67 (cl (= (= e2 (op e2 e0)) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t41 t66))
(step t68 (cl (= (op e1 e4) (op (op e4 e3) e4))) :rule cong :premises (t32 t40))
(step t69 (cl (= (= e3 (op e1 e4)) (= e3 (op (op e4 e3) e4)))) :rule cong :premises (t39 t68))
(step t70 (cl (= (op e1 e3) (op (op e4 e3) e3))) :rule cong :premises (t32 t39))
(step t71 (cl (= (= e2 (op e1 e3)) (= (op e3 e4) (op (op e4 e3) e3)))) :rule cong :premises (t41 t70))
(step t72 (cl (= (op e1 e2) (op (op e4 e3) (op e3 e4)))) :rule cong :premises (t32 t41))
(step t73 (cl (= (= e4 (op e1 e2)) (= e4 (op (op e4 e3) (op e3 e4))))) :rule cong :premises (t40 t72))
(step t74 (cl (= (= e0 (op e1 e1)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t34 t33))
(step t75 (cl (= (op e1 e0) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t32 t34))
(step t76 (cl (= (= e1 (op e1 e0)) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t32 t75))
(step t77 (cl (= (op e0 e4) (op (op (op e4 e3) (op e4 e3)) e4))) :rule cong :premises (t34 t40))
(step t78 (cl (= (= e4 (op e0 e4)) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)))) :rule cong :premises (t40 t77))
(step t79 (cl (= (op e0 e3) (op (op (op e4 e3) (op e4 e3)) e3))) :rule cong :premises (t34 t39))
(step t80 (cl (= (= e3 (op e0 e3)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)))) :rule cong :premises (t39 t79))
(step t81 (cl (= (op e0 e2) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))) :rule cong :premises (t34 t41))
(step t82 (cl (= (= e2 (op e0 e2)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))))) :rule cong :premises (t41 t81))
(step t83 (cl (= (op e0 e0) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t34 t34))
(step t84 (cl (= (= e0 (op e0 e0)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t34 t83))
(step t85 (cl (= (op e0 e1) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) :rule cong :premises (t34 t32))
(step t86 (cl (= (= e1 (op e0 e1)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule cong :premises (t32 t85))
(step t87 (cl (= (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e0 (op e1 e1)) (= e1 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e0 (op e0 e0)) (= e1 (op e0 e1))) (and (= (op (op e4 e3) (op e4 e3)) (op e4 e4)) (= (op e4 e3) (op e4 e3)) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 e4)) (= (op (op e4 e3) (op e4 e3)) (op e3 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule cong :premises (t36 t38 t43 t45 t47 t49 t51 t53 t55 t57 t59 t61 t63 t65 t67 t69 t71 t73 t74 t76 t78 t80 t82 t84 t86))
(step t88 (cl (= (not (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e0 (op e1 e1)) (= e1 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e0 (op e0 e0)) (= e1 (op e0 e1)))) (not (and (= (op (op e4 e3) (op e4 e3)) (op e4 e4)) (= (op e4 e3) (op e4 e3)) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 e4)) (= (op (op e4 e3) (op e4 e3)) (op e3 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))))) :rule cong :premises (t87))
(step t89 (cl (= (= (op (op e4 e3) (op e4 e3)) (op e4 e4)) (= (op e4 e4) (op (op e4 e3) (op e4 e3))))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e3) (op e4 e3)) (op e4 e4)))
(step t90 (cl (= (= (op e4 e3) (op e4 e3)) true)) :rule rare_rewrite :args ("eq-refl" (op e4 e3)))
(step t91 (cl (= (= e3 (op e4 (op e3 e4))) (= e3 (op e4 (op e3 e4))))) :rule refl)
(step t92 (cl (= (= (op e3 e4) (op e4 (op e4 e3))) (= (op e3 e4) (op e4 (op e4 e3))))) :rule refl)
(step t93 (cl (= (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))))) :rule refl)
(step t94 (cl (= (= (op e3 e4) (op e3 e4)) true)) :rule rare_rewrite :args ("eq-refl" (op e3 e4)))
(step t95 (cl (= (= (op (op e4 e3) (op e4 e3)) (op e3 e3)) (= (op e3 e3) (op (op e4 e3) (op e4 e3))))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e3) (op e4 e3)) (op e3 e3)))
(step t96 (cl (= (= (op e4 e3) (op e3 (op e3 e4))) (= (op e4 e3) (op e3 (op e3 e4))))) :rule refl)
(step t97 (cl (= (= e4 (op e3 (op e4 e3))) (= e4 (op e3 (op e4 e3))))) :rule refl)
(step t98 (cl (= (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))))) :rule refl)
(step t99 (cl (= (= (op e4 e3) (op (op e3 e4) e4)) (= (op e4 e3) (op (op e3 e4) e4)))) :rule refl)
(step t100 (cl (= (= e4 (op (op e3 e4) e3)) (= e4 (op (op e3 e4) e3)))) :rule refl)
(step t101 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))))) :rule refl)
(step t102 (cl (= (= e3 (op (op e3 e4) (op e4 e3))) (= e3 (op (op e3 e4) (op e4 e3))))) :rule refl)
(step t103 (cl (= (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))))) :rule refl)
(step t104 (cl (= (= e3 (op (op e4 e3) e4)) (= e3 (op (op e4 e3) e4)))) :rule refl)
(step t105 (cl (= (= (op e3 e4) (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)))) :rule refl)
(step t106 (cl (= (= e4 (op (op e4 e3) (op e3 e4))) (= e4 (op (op e4 e3) (op e3 e4))))) :rule refl)
(step t107 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) true)) :rule rare_rewrite :args ("eq-refl" (op (op e4 e3) (op e4 e3))))
(step t108 (cl (= (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule refl)
(step t109 (cl (= (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)))) :rule refl)
(step t110 (cl (= (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)))) :rule refl)
(step t111 (cl (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))))) :rule refl)
(step t112 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) :rule refl)
(step t113 (cl (= (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule refl)
(step t114 (cl (= (and (= (op (op e4 e3) (op e4 e3)) (op e4 e4)) (= (op e4 e3) (op e4 e3)) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 e4)) (= (op (op e4 e3) (op e4 e3)) (op e3 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) true (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) true (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) true (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule cong :premises (t89 t90 t91 t92 t93 t94 t95 t96 t97 t98 t99 t100 t101 t102 t103 t104 t105 t106 t107 t108 t109 t110 t111 t112 t113))
(step t115 (cl (= (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) true (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) true (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) true (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule hole :args ("ACI_NORM" (= (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) true (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) true (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) true (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))))
(step t116 (cl (= (and (= (op (op e4 e3) (op e4 e3)) (op e4 e4)) (= (op e4 e3) (op e4 e3)) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 e4)) (= (op (op e4 e3) (op e4 e3)) (op e3 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule trans :premises (t114 t115))
(step t117 (cl (= (not (and (= (op (op e4 e3) (op e4 e3)) (op e4 e4)) (= (op e4 e3) (op e4 e3)) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 e4)) (= (op (op e4 e3) (op e4 e3)) (op e3 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) (not (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))))) :rule cong :premises (t116))
(step t118 (cl (= (not (and (= e0 (op e4 e4)) (= e1 (op e4 e3)) (= e3 (op e4 e2)) (= e2 (op e4 e1)) (= e4 (op e4 e0)) (= e2 (op e3 e4)) (= e0 (op e3 e3)) (= e1 (op e3 e2)) (= e4 (op e3 e1)) (= e3 (op e3 e0)) (= e1 (op e2 e4)) (= e4 (op e2 e3)) (= e0 (op e2 e2)) (= e3 (op e2 e1)) (= e2 (op e2 e0)) (= e3 (op e1 e4)) (= e2 (op e1 e3)) (= e4 (op e1 e2)) (= e0 (op e1 e1)) (= e1 (op e1 e0)) (= e4 (op e0 e4)) (= e3 (op e0 e3)) (= e2 (op e0 e2)) (= e0 (op e0 e0)) (= e1 (op e0 e1)))) (not (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))))) :rule trans :premises (t88 t117))
(step t119 (cl (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e1)) (= (op e0 e2) e2)) (= (op e0 e3) e3)) (= (op e0 e4) e4)) (= (op e1 e0) e1)) (= (op e1 e1) e0)) (= (op e1 e2) e4)) (= (op e1 e3) e2)) (= (op e1 e4) e3)) (= (op e2 e0) e2)) (= (op e2 e1) e3)) (= (op e2 e2) e0)) (= (op e2 e3) e4)) (= (op e2 e4) e1)) (= (op e3 e0) e3)) (= (op e3 e1) e4)) (= (op e3 e2) e1)) (= (op e3 e3) e0)) (= (op e3 e4) e2)) (= (op e4 e0) e4)) (= (op e4 e1) e2)) (= (op e4 e2) e3)) (= (op e4 e3) e1)) (= (op e4 e4) e0))) (not (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))))) :rule trans :premises (t29 t118))
(step t120 (cl (not (and (= (op e4 e4) (op (op e4 e3) (op e4 e3))) (= e3 (op e4 (op e3 e4))) (= (op e3 e4) (op e4 (op e4 e3))) (= e4 (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4))) (= e4 (op e3 (op e4 e3))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op e3 e4) e4)) (= e4 (op (op e3 e4) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= e3 (op (op e3 e4) (op e4 e3))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= e3 (op (op e4 e3) e4)) (= (op e3 e4) (op (op e4 e3) e3)) (= e4 (op (op e4 e3) (op e3 e4))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule resolution :premises (t0 t119 a15))
(step t121 (cl (not (= (op e4 e4) (op (op e4 e3) (op e4 e3)))) (not (= e3 (op e4 (op e3 e4)))) (not (= (op e3 e4) (op e4 (op e4 e3)))) (not (= e4 (op e4 (op (op e4 e3) (op e4 e3))))) (not (= (op e3 e3) (op (op e4 e3) (op e4 e3)))) (not (= (op e4 e3) (op e3 (op e3 e4)))) (not (= e4 (op e3 (op e4 e3)))) (not (= e3 (op e3 (op (op e4 e3) (op e4 e3))))) (not (= (op e4 e3) (op (op e3 e4) e4))) (not (= e4 (op (op e3 e4) e3))) (not (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4)))) (not (= e3 (op (op e3 e4) (op e4 e3)))) (not (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3))))) (not (= e3 (op (op e4 e3) e4))) (not (= (op e3 e4) (op (op e4 e3) e3))) (not (= e4 (op (op e4 e3) (op e3 e4)))) (not (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (not (= e4 (op (op (op e4 e3) (op e4 e3)) e4))) (not (= e3 (op (op (op e4 e3) (op e4 e3)) e3))) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))) (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))) (not (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule not_and :premises (t120))
(step t122 (cl (not (= e4 (op (op e3 e4) e3))) (not (= e3 (op (op e4 e3) e4))) (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))) (not (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4)))) (not (= (op e4 e4) (op (op e4 e3) (op e4 e3)))) (not (= (op e3 e3) (op (op e4 e3) (op e4 e3)))) (not (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (not (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3))))) (not (= e3 (op e3 (op (op e4 e3) (op e4 e3))))) (not (= e4 (op e4 (op (op e4 e3) (op e4 e3))))) (not (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))) (not (= e3 (op (op (op e4 e3) (op e4 e3)) e3))) (not (= e4 (op (op (op e4 e3) (op e4 e3)) e4))) (not (= e4 (op (op e4 e3) (op e3 e4)))) (not (= (op e3 e4) (op (op e4 e3) e3))) (not (= e3 (op (op e3 e4) (op e4 e3)))) (not (= (op e4 e3) (op (op e3 e4) e4))) (not (= e4 (op e3 (op e4 e3)))) (not (= (op e4 e3) (op e3 (op e3 e4)))) (not (= (op e3 e4) (op e4 (op e4 e3)))) (not (= e3 (op e4 (op e3 e4))))) :rule reordering :premises (t121))
(step t123 (cl (not (= (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) (not (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2))) (or (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule equiv_pos2)
(step t124 (cl (= (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (= (op e0 e4) e2) (= (op e0 e3) e2) (= (op e0 e2) e2) (= (op e0 e0) e2) (= (op e0 e1) e2)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (= (op e0 e4) e2) (= (op e0 e3) e2) (= (op e0 e2) e2) (= (op e0 e0) e2) (= (op e0 e1) e2)))))
(step t125 (cl (= (= (op e0 e4) e2) (= e2 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e2))
(step t126 (cl (= (= (op e0 e3) e2) (= e2 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e2))
(step t127 (cl (= (= (op e0 e0) e2) (= e2 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e2))
(step t128 (cl (= (= (op e0 e1) e2) (= e2 (op e0 e1)))) :rule rare_rewrite :args ("eq-symm" (op e0 e1) e2))
(step t129 (cl (= (or (= (op e0 e4) e2) (= (op e0 e3) e2) (= (op e0 e2) e2) (= (op e0 e0) e2) (= (op e0 e1) e2)) (or (= e2 (op e0 e4)) (= e2 (op e0 e3)) (= e2 (op e0 e2)) (= e2 (op e0 e0)) (= e2 (op e0 e1))))) :rule cong :premises (t125 t126 t24 t127 t128))
(step t130 (cl (= (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (= e2 (op e0 e4)) (= e2 (op e0 e3)) (= e2 (op e0 e2)) (= e2 (op e0 e0)) (= e2 (op e0 e1))))) :rule trans :premises (t124 t129))
(step t131 (cl (= (= e2 (op e0 e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule cong :premises (t41 t77))
(step t132 (cl (= (= e2 (op e0 e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule cong :premises (t41 t79))
(step t133 (cl (= (= e2 (op e0 e0)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t41 t83))
(step t134 (cl (= (= e2 (op e0 e1)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule cong :premises (t41 t85))
(step t135 (cl (= (or (= e2 (op e0 e4)) (= e2 (op e0 e3)) (= e2 (op e0 e2)) (= e2 (op e0 e0)) (= e2 (op e0 e1))) (or (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule cong :premises (t131 t132 t82 t133 t134))
(step t136 (cl (= (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule trans :premises (t130 t135))
(step t137 (cl (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4)))))) :rule and :premises (a1) :args (0))
(step t138 (cl (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4)))))) :rule and :premises (t137) :args (0))
(step t139 (cl (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)))))) :rule and :premises (t138) :args (0))
(step t140 (cl (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4))))) :rule and :premises (t139) :args (0))
(step t141 (cl (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3))))) :rule and :premises (t140) :args (0))
(step t142 (cl (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2))))) :rule and :premises (t141) :args (0))
(step t143 (cl (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) :rule and :premises (t142) :args (1))
(step t144 (cl (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2))) :rule and :premises (t143) :args (0))
(step t145 (cl (or (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule resolution :premises (t123 t136 t144))
(step t146 (cl (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) :rule or :premises (t145))
(step t147 (cl (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3))) :rule reordering :premises (t146))
(step t148 (cl (not (= (not (= (op e0 e4) (op e3 e4))) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4))))) (not (not (= (op e0 e4) (op e3 e4)))) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule equiv_pos2)
(step t149 (cl (= (= (op e0 e4) (op e3 e4)) (= (op (op (op e4 e3) (op e4 e3)) e4) (op e3 e4)))) :rule cong :premises (t77 t48))
(step t150 (cl (= (not (= (op e0 e4) (op e3 e4))) (not (= (op (op (op e4 e3) (op e4 e3)) e4) (op e3 e4))))) :rule cong :premises (t149))
(step t151 (cl (= (= (op (op (op e4 e3) (op e4 e3)) e4) (op e3 e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e4 e3) (op e4 e3)) e4) (op e3 e4)))
(step t152 (cl (= (not (= (op (op (op e4 e3) (op e4 e3)) e4) (op e3 e4))) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule cong :premises (t151))
(step t153 (cl (= (not (= (op e0 e4) (op e3 e4))) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule trans :premises (t150 t152))
(step t154 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4)))))) :rule and :premises (a12) :args (0))
(step t155 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4))))) :rule and :premises (t154) :args (1))
(step t156 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4))))) :rule and :premises (t155) :args (0))
(step t157 (cl (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4))))) :rule and :premises (t156) :args (0))
(step t158 (cl (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4))))) :rule and :premises (t157) :args (0))
(step t159 (cl (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4))))) :rule and :premises (t158) :args (0))
(step t160 (cl (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4))))) :rule and :premises (t159) :args (0))
(step t161 (cl (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4))))) :rule and :premises (t160) :args (0))
(step t162 (cl (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4))))) :rule and :premises (t161) :args (0))
(step t163 (cl (not (= (op e0 e4) (op e3 e4)))) :rule and :premises (t162) :args (1))
(step t164 (cl (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule resolution :premises (t148 t153 t163))
(step t165 (cl (= (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) false) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))))) :rule equiv_simplify)
(step t166 (cl (not (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) false)) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) :rule equiv1 :premises (t165))
(step t167 (cl (not (= (= (op (op e1 e1) (op e1 e1)) (op e1 e1)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) (not (= (op (op e1 e1) (op e1 e1)) (op e1 e1))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))) :rule equiv_pos2)
(step t168 (cl (= (= (op (op e1 e1) (op e1 e1)) (op e1 e1)) (= (op e1 e1) (op (op e1 e1) (op e1 e1))))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e1) (op e1 e1)) (op e1 e1)))
(step t169 (cl (= (op (op e1 e1) (op e1 e1)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t33 t33))
(step t170 (cl (= (= (op e1 e1) (op (op e1 e1) (op e1 e1))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t33 t169))
(step t171 (cl (= (= (op (op e1 e1) (op e1 e1)) (op e1 e1)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) :rule trans :premises (t168 t170))
(step t172 (cl (and (and (and (= (op (op e0 e0) (op e0 e0)) (op e0 e0)) (= (op (op e1 e1) (op e1 e1)) (op e1 e1))) (= (op (op e2 e2) (op e2 e2)) (op e2 e2))) (= (op (op e3 e3) (op e3 e3)) (op e3 e3)))) :rule and :premises (a11) :args (0))
(step t173 (cl (and (and (= (op (op e0 e0) (op e0 e0)) (op e0 e0)) (= (op (op e1 e1) (op e1 e1)) (op e1 e1))) (= (op (op e2 e2) (op e2 e2)) (op e2 e2)))) :rule and :premises (t172) :args (0))
(step t174 (cl (and (= (op (op e0 e0) (op e0 e0)) (op e0 e0)) (= (op (op e1 e1) (op e1 e1)) (op e1 e1)))) :rule and :premises (t173) :args (0))
(step t175 (cl (= (op (op e1 e1) (op e1 e1)) (op e1 e1))) :rule and :premises (t174) :args (1))
(step t176 (cl (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))) :rule resolution :premises (t167 t171 t175))
(step t177 (cl (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op e4 e3) (op e4 e3)))) :rule symm :premises (t176))
(step t178 (cl (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t48 t177))
(step t179 (cl (= (= (= (op e3 e4) (op (op e4 e3) (op e4 e3))) false) (not (= (op e3 e4) (op (op e4 e3) (op e4 e3)))))) :rule equiv_simplify)
(step t180 (cl (= (= (op e3 e4) (op (op e4 e3) (op e4 e3))) false) (not (not (= (op e3 e4) (op (op e4 e3) (op e4 e3)))))) :rule equiv2 :premises (t179))
(step t181 (cl (not (not (not (= (op e3 e4) (op (op e4 e3) (op e4 e3)))))) (= (op e3 e4) (op (op e4 e3) (op e4 e3)))) :rule not_not)
(step t182 (cl (= (= (op e3 e4) (op (op e4 e3) (op e4 e3))) false) (= (op e3 e4) (op (op e4 e3) (op e4 e3)))) :rule resolution :premises (t180 t181))
(step t183 (cl (not (= (not (= e0 e2)) (not (= (op e3 e4) (op (op e4 e3) (op e4 e3)))))) (not (not (= e0 e2))) (not (= (op e3 e4) (op (op e4 e3) (op e4 e3))))) :rule equiv_pos2)
(step t184 (cl (= (= e0 e2) (= e2 e0))) :rule rare_rewrite :args ("eq-symm" e0 e2))
(step t185 (cl (= (not (= e0 e2)) (not (= e2 e0)))) :rule cong :premises (t184))
(step t186 (cl (= (= e2 e0) (= (op e3 e4) (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t41 t34))
(step t187 (cl (= (not (= e2 e0)) (not (= (op e3 e4) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t186))
(step t188 (cl (= (not (= e0 e2)) (not (= (op e3 e4) (op (op e4 e3) (op e4 e3)))))) :rule trans :premises (t185 t187))
(step t189 (cl (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3))) (not (= e2 e4)))) :rule and :premises (a13) :args (0))
(step t190 (cl (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3)))) :rule and :premises (t189) :args (0))
(step t191 (cl (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4)))) :rule and :premises (t190) :args (0))
(step t192 (cl (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3)))) :rule and :premises (t191) :args (0))
(step t193 (cl (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2)))) :rule and :premises (t192) :args (0))
(step t194 (cl (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4)))) :rule and :premises (t193) :args (0))
(step t195 (cl (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3)))) :rule and :premises (t194) :args (0))
(step t196 (cl (and (not (= e0 e1)) (not (= e0 e2)))) :rule and :premises (t195) :args (0))
(step t197 (cl (not (= e0 e2))) :rule and :premises (t196) :args (1))
(step t198 (cl (not (= (op e3 e4) (op (op e4 e3) (op e4 e3))))) :rule resolution :premises (t183 t188 t197))
(step t199 (cl (= (= (op e3 e4) (op (op e4 e3) (op e4 e3))) false)) :rule resolution :premises (t182 t198))
(step t200 (cl (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) false)) :rule trans :premises (t178 t199))
(step t201 (cl (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t166 t200))
(step t202 (cl (= (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))) false) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule equiv_simplify)
(step t203 (cl (not (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))) false)) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule equiv1 :premises (t202))
(step t204 (cl (not (= (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) (not (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1))) (or (not (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule equiv_pos2)
(step t205 (cl (= (not (= (op e1 e0) e1)) (not (= e1 (op e1 e0))))) :rule cong :premises (t21))
(step t206 (cl (= (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= e1 (op e1 e0))) (= e1 (op e0 e1))))) :rule cong :premises (t205 t26))
(step t207 (cl (= (not (= e1 (op e1 e0))) (not (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))))) :rule cong :premises (t76))
(step t208 (cl (= (or (not (= e1 (op e1 e0))) (= e1 (op e0 e1))) (or (not (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule cong :premises (t207 t86))
(step t209 (cl (= (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule trans :premises (t206 t208))
(step t210 (cl (and (and (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0))) (or (not (= (op e0 e3) e0)) (= (op e3 e0) e0))) (or (not (= (op e0 e4) e0)) (= (op e4 e0) e0))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1))) (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)))) (and (and (and (and (or (not (= (op e2 e0) e2)) (= (op e0 e2) e2)) (or (not (= (op e2 e1) e2)) (= (op e1 e2) e2))) (or (not (= (op e2 e2) e2)) (= (op e2 e2) e2))) (or (not (= (op e2 e3) e2)) (= (op e3 e2) e2))) (or (not (= (op e2 e4) e2)) (= (op e4 e2) e2)))) (and (and (and (and (or (not (= (op e3 e0) e3)) (= (op e0 e3) e3)) (or (not (= (op e3 e1) e3)) (= (op e1 e3) e3))) (or (not (= (op e3 e2) e3)) (= (op e2 e3) e3))) (or (not (= (op e3 e3) e3)) (= (op e3 e3) e3))) (or (not (= (op e3 e4) e3)) (= (op e4 e3) e3))))) :rule and :premises (a8) :args (0))
(step t211 (cl (and (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0))) (or (not (= (op e0 e3) e0)) (= (op e3 e0) e0))) (or (not (= (op e0 e4) e0)) (= (op e4 e0) e0))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1))) (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)))) (and (and (and (and (or (not (= (op e2 e0) e2)) (= (op e0 e2) e2)) (or (not (= (op e2 e1) e2)) (= (op e1 e2) e2))) (or (not (= (op e2 e2) e2)) (= (op e2 e2) e2))) (or (not (= (op e2 e3) e2)) (= (op e3 e2) e2))) (or (not (= (op e2 e4) e2)) (= (op e4 e2) e2))))) :rule and :premises (t210) :args (0))
(step t212 (cl (and (and (and (and (and (or (not (= (op e0 e0) e0)) (= (op e0 e0) e0)) (or (not (= (op e0 e1) e0)) (= (op e1 e0) e0))) (or (not (= (op e0 e2) e0)) (= (op e2 e0) e0))) (or (not (= (op e0 e3) e0)) (= (op e3 e0) e0))) (or (not (= (op e0 e4) e0)) (= (op e4 e0) e0))) (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1))) (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1))))) :rule and :premises (t211) :args (0))
(step t213 (cl (and (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1))) (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)))) :rule and :premises (t212) :args (1))
(step t214 (cl (and (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1))) (or (not (= (op e1 e3) e1)) (= (op e3 e1) e1)))) :rule and :premises (t213) :args (0))
(step t215 (cl (and (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1))) (or (not (= (op e1 e2) e1)) (= (op e2 e1) e1)))) :rule and :premises (t214) :args (0))
(step t216 (cl (and (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1)) (or (not (= (op e1 e1) e1)) (= (op e1 e1) e1)))) :rule and :premises (t215) :args (0))
(step t217 (cl (or (not (= (op e1 e0) e1)) (= (op e0 e1) e1))) :rule and :premises (t216) :args (0))
(step t218 (cl (or (not (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule resolution :premises (t204 t209 t217))
(step t219 (cl (not (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) :rule or :premises (t218))
(step t220 (cl (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))) (not (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule reordering :premises (t219))
(step t221 (cl (not (= (= (op e1 (op e1 e1)) e1) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) (not (= (op e1 (op e1 e1)) e1)) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) :rule equiv_pos2)
(step t222 (cl (= (= (op e1 (op e1 e1)) e1) (= e1 (op e1 (op e1 e1))))) :rule rare_rewrite :args ("eq-symm" (op e1 (op e1 e1)) e1))
(step t223 (cl (= (op e1 (op e1 e1)) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t32 t33))
(step t224 (cl (= (= e1 (op e1 (op e1 e1))) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t32 t223))
(step t225 (cl (= (= (op e1 (op e1 e1)) e1) (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule trans :premises (t222 t224))
(step t226 (cl (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e3 (op e3 e3)) e3))) :rule and :premises (a9) :args (0))
(step t227 (cl (and (and (= (op e0 (op e0 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e2 (op e2 e2)) e2))) :rule and :premises (t226) :args (0))
(step t228 (cl (and (= (op e0 (op e0 e0)) e0) (= (op e1 (op e1 e1)) e1))) :rule and :premises (t227) :args (0))
(step t229 (cl (= (op e1 (op e1 e1)) e1)) :rule and :premises (t228) :args (1))
(step t230 (cl (= (op e4 e3) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) :rule resolution :premises (t221 t225 t229))
(step t231 (cl (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) :rule resolution :premises (t220 t230))
(step t232 (cl (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e4 e3))) :rule symm :premises (t231))
(step t233 (cl (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))) (= (op e3 e4) (op e4 e3)))) :rule cong :premises (t48 t232))
(step t234 (cl (= (= (= (op e3 e4) (op e4 e3)) false) (not (= (op e3 e4) (op e4 e3))))) :rule equiv_simplify)
(step t235 (cl (= (= (op e3 e4) (op e4 e3)) false) (not (not (= (op e3 e4) (op e4 e3))))) :rule equiv2 :premises (t234))
(step t236 (cl (not (not (not (= (op e3 e4) (op e4 e3))))) (= (op e3 e4) (op e4 e3))) :rule not_not)
(step t237 (cl (= (= (op e3 e4) (op e4 e3)) false) (= (op e3 e4) (op e4 e3))) :rule resolution :premises (t235 t236))
(step t238 (cl (not (= (not (= e1 e2)) (not (= (op e3 e4) (op e4 e3))))) (not (not (= e1 e2))) (not (= (op e3 e4) (op e4 e3)))) :rule equiv_pos2)
(step t239 (cl (= (= e1 e2) (= e2 e1))) :rule rare_rewrite :args ("eq-symm" e1 e2))
(step t240 (cl (= (not (= e1 e2)) (not (= e2 e1)))) :rule cong :premises (t239))
(step t241 (cl (= (= e2 e1) (= (op e3 e4) (op e4 e3)))) :rule cong :premises (t41 t32))
(step t242 (cl (= (not (= e2 e1)) (not (= (op e3 e4) (op e4 e3))))) :rule cong :premises (t241))
(step t243 (cl (= (not (= e1 e2)) (not (= (op e3 e4) (op e4 e3))))) :rule trans :premises (t240 t242))
(step t244 (cl (not (= e1 e2))) :rule and :premises (t193) :args (1))
(step t245 (cl (not (= (op e3 e4) (op e4 e3)))) :rule resolution :premises (t238 t243 t244))
(step t246 (cl (= (= (op e3 e4) (op e4 e3)) false)) :rule resolution :premises (t237 t245))
(step t247 (cl (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))) false)) :rule trans :premises (t233 t246))
(step t248 (cl (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule resolution :premises (t203 t247))
(step t249 (cl (= (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) false) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule equiv_simplify)
(step t250 (cl (not (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) false)) (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule equiv1 :premises (t249))
(step t251 (cl (not (= (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4)) (or (= e4 (op (op e4 e3) e3)) (= e3 (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)) (= (op e4 e3) (op (op e4 e3) e3))))) (not (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (= e4 (op (op e4 e3) e3)) (= e3 (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)) (= (op e4 e3) (op (op e4 e3) e3)))) :rule equiv_pos2)
(step t252 (cl (= (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4)) (or (= (op e1 e3) e4) (= (op e1 e3) e3) (= (op e1 e3) e2) (= (op e1 e3) e0) (= (op e1 e3) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4)) (or (= (op e1 e3) e4) (= (op e1 e3) e3) (= (op e1 e3) e2) (= (op e1 e3) e0) (= (op e1 e3) e1)))))
(step t253 (cl (= (= (op e1 e3) e4) (= e4 (op e1 e3)))) :rule rare_rewrite :args ("eq-symm" (op e1 e3) e4))
(step t254 (cl (= (= (op e1 e3) e3) (= e3 (op e1 e3)))) :rule rare_rewrite :args ("eq-symm" (op e1 e3) e3))
(step t255 (cl (= (= (op e1 e3) e0) (= e0 (op e1 e3)))) :rule rare_rewrite :args ("eq-symm" (op e1 e3) e0))
(step t256 (cl (= (= (op e1 e3) e1) (= e1 (op e1 e3)))) :rule rare_rewrite :args ("eq-symm" (op e1 e3) e1))
(step t257 (cl (= (or (= (op e1 e3) e4) (= (op e1 e3) e3) (= (op e1 e3) e2) (= (op e1 e3) e0) (= (op e1 e3) e1)) (or (= e4 (op e1 e3)) (= e3 (op e1 e3)) (= e2 (op e1 e3)) (= e0 (op e1 e3)) (= e1 (op e1 e3))))) :rule cong :premises (t253 t254 t18 t255 t256))
(step t258 (cl (= (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4)) (or (= e4 (op e1 e3)) (= e3 (op e1 e3)) (= e2 (op e1 e3)) (= e0 (op e1 e3)) (= e1 (op e1 e3))))) :rule trans :premises (t252 t257))
(step t259 (cl (= (= e4 (op e1 e3)) (= e4 (op (op e4 e3) e3)))) :rule cong :premises (t40 t70))
(step t260 (cl (= (= e3 (op e1 e3)) (= e3 (op (op e4 e3) e3)))) :rule cong :premises (t39 t70))
(step t261 (cl (= (= e0 (op e1 e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)))) :rule cong :premises (t34 t70))
(step t262 (cl (= (= e1 (op e1 e3)) (= (op e4 e3) (op (op e4 e3) e3)))) :rule cong :premises (t32 t70))
(step t263 (cl (= (or (= e4 (op e1 e3)) (= e3 (op e1 e3)) (= e2 (op e1 e3)) (= e0 (op e1 e3)) (= e1 (op e1 e3))) (or (= e4 (op (op e4 e3) e3)) (= e3 (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)) (= (op e4 e3) (op (op e4 e3) e3))))) :rule cong :premises (t259 t260 t71 t261 t262))
(step t264 (cl (= (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4)) (or (= e4 (op (op e4 e3) e3)) (= e3 (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)) (= (op e4 e3) (op (op e4 e3) e3))))) :rule trans :premises (t258 t263))
(step t265 (cl (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4))))) :rule and :premises (a0) :args (0))
(step t266 (cl (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4))))) :rule and :premises (t265) :args (0))
(step t267 (cl (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4))))) :rule and :premises (t266) :args (0))
(step t268 (cl (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) :rule and :premises (t267) :args (1))
(step t269 (cl (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4)))) :rule and :premises (t268) :args (0))
(step t270 (cl (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) :rule and :premises (t269) :args (1))
(step t271 (cl (or (= e4 (op (op e4 e3) e3)) (= e3 (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)) (= (op e4 e3) (op (op e4 e3) e3)))) :rule resolution :premises (t251 t264 t270))
(step t272 (cl (= e4 (op (op e4 e3) e3)) (= e3 (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)) (= (op e4 e3) (op (op e4 e3) e3))) :rule or :premises (t271))
(step t273 (cl (= (op e4 e3) (op (op e4 e3) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)) (= (op e3 e4) (op (op e4 e3) e3)) (= e3 (op (op e4 e3) e3)) (= e4 (op (op e4 e3) e3))) :rule reordering :premises (t272))
(step t274 (cl (not (= (not (= (op e1 e3) (op e4 e3))) (not (= (op e4 e3) (op (op e4 e3) e3))))) (not (not (= (op e1 e3) (op e4 e3)))) (not (= (op e4 e3) (op (op e4 e3) e3)))) :rule equiv_pos2)
(step t275 (cl (= (= (op e1 e3) (op e4 e3)) (= (op (op e4 e3) e3) (op e4 e3)))) :rule cong :premises (t70 t37))
(step t276 (cl (= (not (= (op e1 e3) (op e4 e3))) (not (= (op (op e4 e3) e3) (op e4 e3))))) :rule cong :premises (t275))
(step t277 (cl (= (= (op (op e4 e3) e3) (op e4 e3)) (= (op e4 e3) (op (op e4 e3) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e3) e3) (op e4 e3)))
(step t278 (cl (= (not (= (op (op e4 e3) e3) (op e4 e3))) (not (= (op e4 e3) (op (op e4 e3) e3))))) :rule cong :premises (t277))
(step t279 (cl (= (not (= (op e1 e3) (op e4 e3))) (not (= (op e4 e3) (op (op e4 e3) e3))))) :rule trans :premises (t276 t278))
(step t280 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3)))))) :rule and :premises (t154) :args (0))
(step t281 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) :rule and :premises (t280) :args (1))
(step t282 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3))))) :rule and :premises (t281) :args (0))
(step t283 (cl (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3))))) :rule and :premises (t282) :args (0))
(step t284 (cl (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3))))) :rule and :premises (t283) :args (0))
(step t285 (cl (not (= (op e1 e3) (op e4 e3)))) :rule and :premises (t284) :args (1))
(step t286 (cl (not (= (op e4 e3) (op (op e4 e3) e3)))) :rule resolution :premises (t274 t279 t285))
(step t287 (cl (not (= (not (= (op e1 e1) (op e1 e3))) (not (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3))))) (not (not (= (op e1 e1) (op e1 e3)))) (not (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)))) :rule equiv_pos2)
(step t288 (cl (= (= (op e1 e1) (op e1 e3)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)))) :rule cong :premises (t33 t70))
(step t289 (cl (= (not (= (op e1 e1) (op e1 e3))) (not (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3))))) :rule cong :premises (t288))
(step t290 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4)))))) :rule and :premises (a12) :args (1))
(step t291 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4)))))) :rule and :premises (t290) :args (0))
(step t292 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4)))))) :rule and :premises (t291) :args (0))
(step t293 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4)))))) :rule and :premises (t292) :args (0))
(step t294 (cl (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) :rule and :premises (t293) :args (1))
(step t295 (cl (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4))))) :rule and :premises (t294) :args (0))
(step t296 (cl (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3))))) :rule and :premises (t295) :args (0))
(step t297 (cl (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4))))) :rule and :premises (t296) :args (0))
(step t298 (cl (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3))))) :rule and :premises (t297) :args (0))
(step t299 (cl (not (= (op e1 e1) (op e1 e3)))) :rule and :premises (t298) :args (1))
(step t300 (cl (not (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) e3)))) :rule resolution :premises (t287 t289 t299))
(step t301 (cl (= (= (= e3 (op (op e4 e3) e3)) false) (not (= e3 (op (op e4 e3) e3))))) :rule equiv_simplify)
(step t302 (cl (not (= (= e3 (op (op e4 e3) e3)) false)) (not (= e3 (op (op e4 e3) e3)))) :rule equiv1 :premises (t301))
(step t303 (cl (and (and (and (and (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1)) (= (op (op e4 e2) e4) e2)) (= (op (op e4 e3) e4) e3)) (= (op (op e4 e4) e4) e4))) :rule and :premises (a10) :args (1))
(step t304 (cl (and (and (and (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1)) (= (op (op e4 e2) e4) e2)) (= (op (op e4 e3) e4) e3))) :rule and :premises (t303) :args (0))
(step t305 (cl (= (op (op e4 e3) e4) e3)) :rule and :premises (t304) :args (1))
(step t306 (cl (= e3 (op (op e4 e3) e4))) :rule symm :premises (t305))
(step t307 (cl (= (op (op e4 e3) e3) (op (op e4 e3) e3))) :rule refl)
(step t308 (cl (= (= e3 (op (op e4 e3) e3)) (= (op (op e4 e3) e4) (op (op e4 e3) e3)))) :rule cong :premises (t306 t307))
(step t309 (cl (= (= (= (op (op e4 e3) e4) (op (op e4 e3) e3)) false) (not (= (op (op e4 e3) e4) (op (op e4 e3) e3))))) :rule equiv_simplify)
(step t310 (cl (= (= (op (op e4 e3) e4) (op (op e4 e3) e3)) false) (not (not (= (op (op e4 e3) e4) (op (op e4 e3) e3))))) :rule equiv2 :premises (t309))
(step t311 (cl (not (not (not (= (op (op e4 e3) e4) (op (op e4 e3) e3))))) (= (op (op e4 e3) e4) (op (op e4 e3) e3))) :rule not_not)
(step t312 (cl (= (= (op (op e4 e3) e4) (op (op e4 e3) e3)) false) (= (op (op e4 e3) e4) (op (op e4 e3) e3))) :rule resolution :premises (t310 t311))
(step t313 (cl (not (= (not (= (op e1 e3) (op e1 e4))) (not (= (op (op e4 e3) e4) (op (op e4 e3) e3))))) (not (not (= (op e1 e3) (op e1 e4)))) (not (= (op (op e4 e3) e4) (op (op e4 e3) e3)))) :rule equiv_pos2)
(step t314 (cl (= (= (op e1 e3) (op e1 e4)) (= (op (op e4 e3) e3) (op (op e4 e3) e4)))) :rule cong :premises (t70 t68))
(step t315 (cl (= (not (= (op e1 e3) (op e1 e4))) (not (= (op (op e4 e3) e3) (op (op e4 e3) e4))))) :rule cong :premises (t314))
(step t316 (cl (= (= (op (op e4 e3) e3) (op (op e4 e3) e4)) (= (op (op e4 e3) e4) (op (op e4 e3) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e3) e3) (op (op e4 e3) e4)))
(step t317 (cl (= (not (= (op (op e4 e3) e3) (op (op e4 e3) e4))) (not (= (op (op e4 e3) e4) (op (op e4 e3) e3))))) :rule cong :premises (t316))
(step t318 (cl (= (not (= (op e1 e3) (op e1 e4))) (not (= (op (op e4 e3) e4) (op (op e4 e3) e3))))) :rule trans :premises (t315 t317))
(step t319 (cl (not (= (op e1 e3) (op e1 e4)))) :rule and :premises (t294) :args (1))
(step t320 (cl (not (= (op (op e4 e3) e4) (op (op e4 e3) e3)))) :rule resolution :premises (t313 t318 t319))
(step t321 (cl (= (= (op (op e4 e3) e4) (op (op e4 e3) e3)) false)) :rule resolution :premises (t312 t320))
(step t322 (cl (= (= e3 (op (op e4 e3) e3)) false)) :rule trans :premises (t308 t321))
(step t323 (cl (not (= e3 (op (op e4 e3) e3)))) :rule resolution :premises (t302 t322))
(step t324 (cl (= (= (= e4 (op (op e4 e3) e3)) false) (not (= e4 (op (op e4 e3) e3))))) :rule equiv_simplify)
(step t325 (cl (not (= (= e4 (op (op e4 e3) e3)) false)) (not (= e4 (op (op e4 e3) e3)))) :rule equiv1 :premises (t324))
(step t326 (cl (and (and (and (and (and (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4)) (and (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4))) (and (and (and (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3)) (= (op (op e2 e4) e2) e4))) (and (and (and (and (= (op (op e3 e0) e3) e0) (= (op (op e3 e1) e3) e1)) (= (op (op e3 e2) e3) e2)) (= (op (op e3 e3) e3) e3)) (= (op (op e3 e4) e3) e4)))) :rule and :premises (a10) :args (0))
(step t327 (cl (and (and (and (and (= (op (op e3 e0) e3) e0) (= (op (op e3 e1) e3) e1)) (= (op (op e3 e2) e3) e2)) (= (op (op e3 e3) e3) e3)) (= (op (op e3 e4) e3) e4))) :rule and :premises (t326) :args (1))
(step t328 (cl (= (op (op e3 e4) e3) e4)) :rule and :premises (t327) :args (1))
(step t329 (cl (= e4 (op (op e3 e4) e3))) :rule symm :premises (t328))
(step t330 (cl (= (= e4 (op (op e4 e3) e3)) (= (op (op e3 e4) e3) (op (op e4 e3) e3)))) :rule cong :premises (t329 t307))
(step t331 (cl (= (= (= (op (op e3 e4) e3) (op (op e4 e3) e3)) false) (not (= (op (op e3 e4) e3) (op (op e4 e3) e3))))) :rule equiv_simplify)
(step t332 (cl (= (= (op (op e3 e4) e3) (op (op e4 e3) e3)) false) (not (not (= (op (op e3 e4) e3) (op (op e4 e3) e3))))) :rule equiv2 :premises (t331))
(step t333 (cl (not (not (not (= (op (op e3 e4) e3) (op (op e4 e3) e3))))) (= (op (op e3 e4) e3) (op (op e4 e3) e3))) :rule not_not)
(step t334 (cl (= (= (op (op e3 e4) e3) (op (op e4 e3) e3)) false) (= (op (op e3 e4) e3) (op (op e4 e3) e3))) :rule resolution :premises (t332 t333))
(step t335 (cl (not (= (not (= (op e1 e3) (op e2 e3))) (not (= (op (op e3 e4) e3) (op (op e4 e3) e3))))) (not (not (= (op e1 e3) (op e2 e3)))) (not (= (op (op e3 e4) e3) (op (op e4 e3) e3)))) :rule equiv_pos2)
(step t336 (cl (= (= (op e1 e3) (op e2 e3)) (= (op (op e4 e3) e3) (op (op e3 e4) e3)))) :rule cong :premises (t70 t60))
(step t337 (cl (= (not (= (op e1 e3) (op e2 e3))) (not (= (op (op e4 e3) e3) (op (op e3 e4) e3))))) :rule cong :premises (t336))
(step t338 (cl (= (= (op (op e4 e3) e3) (op (op e3 e4) e3)) (= (op (op e3 e4) e3) (op (op e4 e3) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e3) e3) (op (op e3 e4) e3)))
(step t339 (cl (= (not (= (op (op e4 e3) e3) (op (op e3 e4) e3))) (not (= (op (op e3 e4) e3) (op (op e4 e3) e3))))) :rule cong :premises (t338))
(step t340 (cl (= (not (= (op e1 e3) (op e2 e3))) (not (= (op (op e3 e4) e3) (op (op e4 e3) e3))))) :rule trans :premises (t337 t339))
(step t341 (cl (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3))))) :rule and :premises (t284) :args (0))
(step t342 (cl (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3))))) :rule and :premises (t341) :args (0))
(step t343 (cl (not (= (op e1 e3) (op e2 e3)))) :rule and :premises (t342) :args (1))
(step t344 (cl (not (= (op (op e3 e4) e3) (op (op e4 e3) e3)))) :rule resolution :premises (t335 t340 t343))
(step t345 (cl (= (= (op (op e3 e4) e3) (op (op e4 e3) e3)) false)) :rule resolution :premises (t334 t344))
(step t346 (cl (= (= e4 (op (op e4 e3) e3)) false)) :rule trans :premises (t330 t345))
(step t347 (cl (not (= e4 (op (op e4 e3) e3)))) :rule resolution :premises (t325 t346))
(step t348 (cl (= (op e3 e4) (op (op e4 e3) e3))) :rule resolution :premises (t273 t286 t300 t323 t347))
(step t349 (cl (= (op (op (op e4 e3) (op e4 e3)) e3) (op (op (op e4 e3) (op e4 e3)) e3))) :rule refl)
(step t350 (cl (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule cong :premises (t348 t349))
(step t351 (cl (= (= (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3)) false) (not (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule equiv_simplify)
(step t352 (cl (= (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3)) false) (not (not (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule equiv2 :premises (t351))
(step t353 (cl (not (not (not (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3))) :rule not_not)
(step t354 (cl (= (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3)) false) (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3))) :rule resolution :premises (t352 t353))
(step t355 (cl (not (= (not (= (op e0 e3) (op e1 e3))) (not (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) (not (not (= (op e0 e3) (op e1 e3)))) (not (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule equiv_pos2)
(step t356 (cl (= (= (op e0 e3) (op e1 e3)) (= (op (op (op e4 e3) (op e4 e3)) e3) (op (op e4 e3) e3)))) :rule cong :premises (t79 t70))
(step t357 (cl (= (not (= (op e0 e3) (op e1 e3))) (not (= (op (op (op e4 e3) (op e4 e3)) e3) (op (op e4 e3) e3))))) :rule cong :premises (t356))
(step t358 (cl (= (= (op (op (op e4 e3) (op e4 e3)) e3) (op (op e4 e3) e3)) (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e4 e3) (op e4 e3)) e3) (op (op e4 e3) e3)))
(step t359 (cl (= (not (= (op (op (op e4 e3) (op e4 e3)) e3) (op (op e4 e3) e3))) (not (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule cong :premises (t358))
(step t360 (cl (= (not (= (op e0 e3) (op e1 e3))) (not (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule trans :premises (t357 t359))
(step t361 (cl (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3))))) :rule and :premises (t342) :args (0))
(step t362 (cl (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3))))) :rule and :premises (t361) :args (0))
(step t363 (cl (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3))))) :rule and :premises (t362) :args (0))
(step t364 (cl (not (= (op e0 e3) (op e1 e3)))) :rule and :premises (t363) :args (0))
(step t365 (cl (not (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule resolution :premises (t355 t360 t364))
(step t366 (cl (= (= (op (op e4 e3) e3) (op (op (op e4 e3) (op e4 e3)) e3)) false)) :rule resolution :premises (t354 t365))
(step t367 (cl (= (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) false)) :rule trans :premises (t350 t366))
(step t368 (cl (not (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule resolution :premises (t250 t367))
(step t369 (cl (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))) :rule resolution :premises (t147 t164 t201 t248 t368))
(step t370 (cl (not (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= e4 (op (op (op e4 e3) (op e4 e3)) e3)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3))))) (not (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (= e4 (op (op (op e4 e3) (op e4 e3)) e3)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule equiv_pos2)
(step t371 (cl (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op e0 e3) e4) (= (op e0 e3) e3) (= (op e0 e3) e2) (= (op e0 e3) e0) (= (op e0 e3) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op e0 e3) e4) (= (op e0 e3) e3) (= (op e0 e3) e2) (= (op e0 e3) e0) (= (op e0 e3) e1)))))
(step t372 (cl (= (= (op e0 e3) e4) (= e4 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e4))
(step t373 (cl (= (= (op e0 e3) e0) (= e0 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e0))
(step t374 (cl (= (= (op e0 e3) e1) (= e1 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e1))
(step t375 (cl (= (or (= (op e0 e3) e4) (= (op e0 e3) e3) (= (op e0 e3) e2) (= (op e0 e3) e0) (= (op e0 e3) e1)) (or (= e4 (op e0 e3)) (= e3 (op e0 e3)) (= e2 (op e0 e3)) (= e0 (op e0 e3)) (= e1 (op e0 e3))))) :rule cong :premises (t372 t23 t126 t373 t374))
(step t376 (cl (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= e4 (op e0 e3)) (= e3 (op e0 e3)) (= e2 (op e0 e3)) (= e0 (op e0 e3)) (= e1 (op e0 e3))))) :rule trans :premises (t371 t375))
(step t377 (cl (= (= e4 (op e0 e3)) (= e4 (op (op (op e4 e3) (op e4 e3)) e3)))) :rule cong :premises (t40 t79))
(step t378 (cl (= (= e0 (op e0 e3)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule cong :premises (t34 t79))
(step t379 (cl (= (= e1 (op e0 e3)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule cong :premises (t32 t79))
(step t380 (cl (= (or (= e4 (op e0 e3)) (= e3 (op e0 e3)) (= e2 (op e0 e3)) (= e0 (op e0 e3)) (= e1 (op e0 e3))) (or (= e4 (op (op (op e4 e3) (op e4 e3)) e3)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule cong :premises (t377 t80 t132 t378 t379))
(step t381 (cl (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= e4 (op (op (op e4 e3) (op e4 e3)) e3)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule trans :premises (t376 t380))
(step t382 (cl (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)))) :rule and :premises (t267) :args (0))
(step t383 (cl (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)))) :rule and :premises (t382) :args (0))
(step t384 (cl (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) :rule and :premises (t383) :args (1))
(step t385 (cl (or (= e4 (op (op (op e4 e3) (op e4 e3)) e3)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule resolution :premises (t370 t381 t384))
(step t386 (cl (= e4 (op (op (op e4 e3) (op e4 e3)) e3)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3))) :rule or :premises (t385))
(step t387 (cl (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e3)) (= e3 (op (op (op e4 e3) (op e4 e3)) e3)) (= e4 (op (op (op e4 e3) (op e4 e3)) e3))) :rule reordering :premises (t386))
(step t388 (cl (not (= (not (= (op e0 e3) (op e4 e3))) (not (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3))))) (not (not (= (op e0 e3) (op e4 e3)))) (not (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule equiv_pos2)
(step t389 (cl (= (= (op e0 e3) (op e4 e3)) (= (op (op (op e4 e3) (op e4 e3)) e3) (op e4 e3)))) :rule cong :premises (t79 t37))
(step t390 (cl (= (not (= (op e0 e3) (op e4 e3))) (not (= (op (op (op e4 e3) (op e4 e3)) e3) (op e4 e3))))) :rule cong :premises (t389))
(step t391 (cl (= (= (op (op (op e4 e3) (op e4 e3)) e3) (op e4 e3)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e4 e3) (op e4 e3)) e3) (op e4 e3)))
(step t392 (cl (= (not (= (op (op (op e4 e3) (op e4 e3)) e3) (op e4 e3))) (not (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule cong :premises (t391))
(step t393 (cl (= (not (= (op e0 e3) (op e4 e3))) (not (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule trans :premises (t390 t392))
(step t394 (cl (not (= (op e0 e3) (op e4 e3)))) :rule and :premises (t361) :args (1))
(step t395 (cl (not (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule resolution :premises (t388 t393 t394))
(step t396 (cl (= (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)) false) (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule equiv_simplify)
(step t397 (cl (not (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)) false)) (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule equiv1 :premises (t396))
(step t398 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule cong :premises (t176 t349))
(step t399 (cl (= (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) false) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule equiv_simplify)
(step t400 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) false) (not (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule equiv2 :premises (t399))
(step t401 (cl (not (not (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3))))) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3))) :rule not_not)
(step t402 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) false) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3))) :rule resolution :premises (t400 t401))
(step t403 (cl (not (= (not (= (op e0 e0) (op e0 e3))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3))))) (not (not (= (op e0 e0) (op e0 e3)))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule equiv_pos2)
(step t404 (cl (= (= (op e0 e0) (op e0 e3)) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule cong :premises (t83 t79))
(step t405 (cl (= (not (= (op e0 e0) (op e0 e3))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule cong :premises (t404))
(step t406 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4))))) :rule and :premises (t293) :args (0))
(step t407 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4))))) :rule and :premises (t406) :args (0))
(step t408 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3))))) :rule and :premises (t407) :args (0))
(step t409 (cl (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4))))) :rule and :premises (t408) :args (0))
(step t410 (cl (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3))))) :rule and :premises (t409) :args (0))
(step t411 (cl (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2))))) :rule and :premises (t410) :args (0))
(step t412 (cl (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4))))) :rule and :premises (t411) :args (0))
(step t413 (cl (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3))))) :rule and :premises (t412) :args (0))
(step t414 (cl (not (= (op e0 e0) (op e0 e3)))) :rule and :premises (t413) :args (1))
(step t415 (cl (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule resolution :premises (t403 t405 t414))
(step t416 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) false)) :rule resolution :premises (t402 t415))
(step t417 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)) false)) :rule trans :premises (t398 t416))
(step t418 (cl (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule resolution :premises (t397 t417))
(step t419 (cl (= (= (= e4 (op (op (op e4 e3) (op e4 e3)) e3)) false) (not (= e4 (op (op (op e4 e3) (op e4 e3)) e3))))) :rule equiv_simplify)
(step t420 (cl (not (= (= e4 (op (op (op e4 e3) (op e4 e3)) e3)) false)) (not (= e4 (op (op (op e4 e3) (op e4 e3)) e3)))) :rule equiv1 :premises (t419))
(step t421 (cl (= (= e4 (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule cong :premises (t329 t349))
(step t422 (cl (= (= (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3)) false) (not (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule equiv_simplify)
(step t423 (cl (= (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3)) false) (not (not (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule equiv2 :premises (t422))
(step t424 (cl (not (not (not (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3))) :rule not_not)
(step t425 (cl (= (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3)) false) (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3))) :rule resolution :premises (t423 t424))
(step t426 (cl (not (= (not (= (op e0 e3) (op e2 e3))) (not (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) (not (not (= (op e0 e3) (op e2 e3)))) (not (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule equiv_pos2)
(step t427 (cl (= (= (op e0 e3) (op e2 e3)) (= (op (op (op e4 e3) (op e4 e3)) e3) (op (op e3 e4) e3)))) :rule cong :premises (t79 t60))
(step t428 (cl (= (not (= (op e0 e3) (op e2 e3))) (not (= (op (op (op e4 e3) (op e4 e3)) e3) (op (op e3 e4) e3))))) :rule cong :premises (t427))
(step t429 (cl (= (= (op (op (op e4 e3) (op e4 e3)) e3) (op (op e3 e4) e3)) (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e4 e3) (op e4 e3)) e3) (op (op e3 e4) e3)))
(step t430 (cl (= (not (= (op (op (op e4 e3) (op e4 e3)) e3) (op (op e3 e4) e3))) (not (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule cong :premises (t429))
(step t431 (cl (= (not (= (op e0 e3) (op e2 e3))) (not (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3))))) :rule trans :premises (t428 t430))
(step t432 (cl (not (= (op e0 e3) (op e2 e3)))) :rule and :premises (t363) :args (1))
(step t433 (cl (not (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule resolution :premises (t426 t431 t432))
(step t434 (cl (= (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3)) false)) :rule resolution :premises (t425 t433))
(step t435 (cl (= (= e4 (op (op (op e4 e3) (op e4 e3)) e3)) false)) :rule trans :premises (t421 t434))
(step t436 (cl (not (= e4 (op (op (op e4 e3) (op e4 e3)) e3)))) :rule resolution :premises (t420 t435))
(step t437 (cl (= e3 (op (op (op e4 e3) (op e4 e3)) e3))) :rule resolution :premises (t387 t395 t418 t368 t436))
(step t438 (cl (not (= (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)) (or (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4))))) (not (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (or (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule equiv_pos2)
(step t439 (cl (= (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)) (or (= (op e0 e4) e4) (= (op e0 e4) e3) (= (op e0 e4) e2) (= (op e0 e4) e0) (= (op e0 e4) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)) (or (= (op e0 e4) e4) (= (op e0 e4) e3) (= (op e0 e4) e2) (= (op e0 e4) e0) (= (op e0 e4) e1)))))
(step t440 (cl (= (= (op e0 e4) e3) (= e3 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e3))
(step t441 (cl (= (= (op e0 e4) e0) (= e0 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e0))
(step t442 (cl (= (= (op e0 e4) e1) (= e1 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e1))
(step t443 (cl (= (or (= (op e0 e4) e4) (= (op e0 e4) e3) (= (op e0 e4) e2) (= (op e0 e4) e0) (= (op e0 e4) e1)) (or (= e4 (op e0 e4)) (= e3 (op e0 e4)) (= e2 (op e0 e4)) (= e0 (op e0 e4)) (= e1 (op e0 e4))))) :rule cong :premises (t22 t440 t125 t441 t442))
(step t444 (cl (= (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)) (or (= e4 (op e0 e4)) (= e3 (op e0 e4)) (= e2 (op e0 e4)) (= e0 (op e0 e4)) (= e1 (op e0 e4))))) :rule trans :premises (t439 t443))
(step t445 (cl (= (= e3 (op e0 e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)))) :rule cong :premises (t39 t77))
(step t446 (cl (= (= e0 (op e0 e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule cong :premises (t34 t77))
(step t447 (cl (= (= e1 (op e0 e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule cong :premises (t32 t77))
(step t448 (cl (= (or (= e4 (op e0 e4)) (= e3 (op e0 e4)) (= e2 (op e0 e4)) (= e0 (op e0 e4)) (= e1 (op e0 e4))) (or (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule cong :premises (t78 t445 t131 t446 t447))
(step t449 (cl (= (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)) (or (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule trans :premises (t444 t448))
(step t450 (cl (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) :rule and :premises (t382) :args (1))
(step t451 (cl (or (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule resolution :premises (t438 t449 t450))
(step t452 (cl (= e4 (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4))) :rule or :premises (t451))
(step t453 (cl (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= e4 (op (op (op e4 e3) (op e4 e3)) e4))) :rule reordering :premises (t452))
(step t454 (cl (= (= (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) false) (not (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule equiv_simplify)
(step t455 (cl (not (= (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) false)) (not (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule equiv1 :premises (t454))
(step t456 (cl (= (op (op (op e4 e3) (op e4 e3)) e4) (op (op (op e4 e3) (op e4 e3)) e4))) :rule refl)
(step t457 (cl (= (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule cong :premises (t231 t456))
(step t458 (cl (= (= (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) false) (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule equiv_simplify)
(step t459 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) false) (not (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule equiv2 :premises (t458))
(step t460 (cl (not (not (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4))))) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4))) :rule not_not)
(step t461 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) false) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4))) :rule resolution :premises (t459 t460))
(step t462 (cl (not (= (not (= (op e0 e1) (op e0 e4))) (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4))))) (not (not (= (op e0 e1) (op e0 e4)))) (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule equiv_pos2)
(step t463 (cl (= (= (op e0 e1) (op e0 e4)) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule cong :premises (t85 t77))
(step t464 (cl (= (not (= (op e0 e1) (op e0 e4))) (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule cong :premises (t463))
(step t465 (cl (not (= (op e0 e1) (op e0 e4)))) :rule and :premises (t409) :args (1))
(step t466 (cl (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule resolution :premises (t462 t464 t465))
(step t467 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) false)) :rule resolution :premises (t461 t466))
(step t468 (cl (= (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) false)) :rule trans :premises (t457 t467))
(step t469 (cl (not (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule resolution :premises (t455 t468))
(step t470 (cl (= (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) false) (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule equiv_simplify)
(step t471 (cl (not (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) false)) (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule equiv1 :premises (t470))
(step t472 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule cong :premises (t176 t456))
(step t473 (cl (= (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) false) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule equiv_simplify)
(step t474 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) false) (not (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule equiv2 :premises (t473))
(step t475 (cl (not (not (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4))))) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4))) :rule not_not)
(step t476 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) false) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4))) :rule resolution :premises (t474 t475))
(step t477 (cl (not (= (not (= (op e0 e0) (op e0 e4))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4))))) (not (not (= (op e0 e0) (op e0 e4)))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule equiv_pos2)
(step t478 (cl (= (= (op e0 e0) (op e0 e4)) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule cong :premises (t83 t77))
(step t479 (cl (= (not (= (op e0 e0) (op e0 e4))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule cong :premises (t478))
(step t480 (cl (not (= (op e0 e0) (op e0 e4)))) :rule and :premises (t412) :args (1))
(step t481 (cl (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule resolution :premises (t477 t479 t480))
(step t482 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) false)) :rule resolution :premises (t476 t481))
(step t483 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)) false)) :rule trans :premises (t472 t482))
(step t484 (cl (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule resolution :premises (t471 t483))
(step t485 (cl (= (= (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) false) (not (= e3 (op (op (op e4 e3) (op e4 e3)) e4))))) :rule equiv_simplify)
(step t486 (cl (not (= (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) false)) (not (= e3 (op (op (op e4 e3) (op e4 e3)) e4)))) :rule equiv1 :premises (t485))
(step t487 (cl (= (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule cong :premises (t306 t456))
(step t488 (cl (= (= (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4)) false) (not (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule equiv_simplify)
(step t489 (cl (= (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4)) false) (not (not (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule equiv2 :premises (t488))
(step t490 (cl (not (not (not (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4))))) (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4))) :rule not_not)
(step t491 (cl (= (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4)) false) (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4))) :rule resolution :premises (t489 t490))
(step t492 (cl (not (= (not (= (op e0 e4) (op e1 e4))) (not (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4))))) (not (not (= (op e0 e4) (op e1 e4)))) (not (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule equiv_pos2)
(step t493 (cl (= (= (op e0 e4) (op e1 e4)) (= (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) e4)))) :rule cong :premises (t77 t68))
(step t494 (cl (= (not (= (op e0 e4) (op e1 e4))) (not (= (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) e4))))) :rule cong :premises (t493))
(step t495 (cl (= (= (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) e4)) (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) e4)))
(step t496 (cl (= (not (= (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) e4))) (not (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule cong :premises (t495))
(step t497 (cl (= (not (= (op e0 e4) (op e1 e4))) (not (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4))))) :rule trans :premises (t494 t496))
(step t498 (cl (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4))))) :rule and :premises (t162) :args (0))
(step t499 (cl (not (= (op e0 e4) (op e1 e4)))) :rule and :premises (t498) :args (0))
(step t500 (cl (not (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule resolution :premises (t492 t497 t499))
(step t501 (cl (= (= (op (op e4 e3) e4) (op (op (op e4 e3) (op e4 e3)) e4)) false)) :rule resolution :premises (t491 t500))
(step t502 (cl (= (= e3 (op (op (op e4 e3) (op e4 e3)) e4)) false)) :rule trans :premises (t487 t501))
(step t503 (cl (not (= e3 (op (op (op e4 e3) (op e4 e3)) e4)))) :rule resolution :premises (t486 t502))
(step t504 (cl (= e4 (op (op (op e4 e3) (op e4 e3)) e4))) :rule resolution :premises (t453 t164 t469 t484 t503))
(step t505 (cl (not (= (= (op (op e2 e4) e2) e4) (= e4 (op (op (op e3 e4) e4) (op e3 e4))))) (not (= (op (op e2 e4) e2) e4)) (= e4 (op (op (op e3 e4) e4) (op e3 e4)))) :rule equiv_pos2)
(step t506 (cl (= (= (op (op e2 e4) e2) e4) (= e4 (op (op e2 e4) e2)))) :rule rare_rewrite :args ("eq-symm" (op (op e2 e4) e2) e4))
(step t507 (cl (= (op (op e2 e4) e2) (op (op (op e3 e4) e4) (op e3 e4)))) :rule cong :premises (t58 t41))
(step t508 (cl (= (= e4 (op (op e2 e4) e2)) (= e4 (op (op (op e3 e4) e4) (op e3 e4))))) :rule cong :premises (t40 t507))
(step t509 (cl (= (= (op (op e2 e4) e2) e4) (= e4 (op (op (op e3 e4) e4) (op e3 e4))))) :rule trans :premises (t506 t508))
(step t510 (cl (and (and (and (and (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4)) (and (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4))) (and (and (and (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3)) (= (op (op e2 e4) e2) e4)))) :rule and :premises (t326) :args (0))
(step t511 (cl (and (and (and (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3)) (= (op (op e2 e4) e2) e4))) :rule and :premises (t510) :args (1))
(step t512 (cl (= (op (op e2 e4) e2) e4)) :rule and :premises (t511) :args (1))
(step t513 (cl (= e4 (op (op (op e3 e4) e4) (op e3 e4)))) :rule resolution :premises (t505 t509 t512))
(step t514 (cl (not (= (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (or (= (op e4 e3) (op e4 e4)) (= (op e3 e4) (op e4 e3)) (= (op e4 e3) (op (op e3 e4) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op e4 e3) e4))))) (not (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1))) (or (= (op e4 e3) (op e4 e4)) (= (op e3 e4) (op e4 e3)) (= (op e4 e3) (op (op e3 e4) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op e4 e3) e4)))) :rule equiv_pos2)
(step t515 (cl (= (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e3 e4) e1) (= (op e2 e4) e1) (= (op e0 e4) e1) (= (op e1 e4) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e3 e4) e1) (= (op e2 e4) e1) (= (op e0 e4) e1) (= (op e1 e4) e1)))))
(step t516 (cl (= (= (op e4 e4) e1) (= e1 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e1))
(step t517 (cl (= (= (op e3 e4) e1) (= e1 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e1))
(step t518 (cl (= (= (op e1 e4) e1) (= e1 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e1))
(step t519 (cl (= (or (= (op e4 e4) e1) (= (op e3 e4) e1) (= (op e2 e4) e1) (= (op e0 e4) e1) (= (op e1 e4) e1)) (or (= e1 (op e4 e4)) (= e1 (op e3 e4)) (= e1 (op e2 e4)) (= e1 (op e0 e4)) (= e1 (op e1 e4))))) :rule cong :premises (t516 t517 t12 t442 t518))
(step t520 (cl (= (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (or (= e1 (op e4 e4)) (= e1 (op e3 e4)) (= e1 (op e2 e4)) (= e1 (op e0 e4)) (= e1 (op e1 e4))))) :rule trans :premises (t515 t519))
(step t521 (cl (= (= e1 (op e4 e4)) (= (op e4 e3) (op e4 e4)))) :rule cong :premises (t32 t35))
(step t522 (cl (= (= e1 (op e3 e4)) (= (op e4 e3) (op e3 e4)))) :rule cong :premises (t32 t48))
(step t523 (cl (= (= e1 (op e1 e4)) (= (op e4 e3) (op (op e4 e3) e4)))) :rule cong :premises (t32 t68))
(step t524 (cl (= (or (= e1 (op e4 e4)) (= e1 (op e3 e4)) (= e1 (op e2 e4)) (= e1 (op e0 e4)) (= e1 (op e1 e4))) (or (= (op e4 e3) (op e4 e4)) (= (op e4 e3) (op e3 e4)) (= (op e4 e3) (op (op e3 e4) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op e4 e3) e4))))) :rule cong :premises (t521 t522 t59 t447 t523))
(step t525 (cl (= (= (op e4 e3) (op e4 e4)) (= (op e4 e3) (op e4 e4)))) :rule refl)
(step t526 (cl (= (= (op e4 e3) (op e3 e4)) (= (op e3 e4) (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) (op e3 e4)))
(step t527 (cl (= (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule refl)
(step t528 (cl (= (= (op e4 e3) (op (op e4 e3) e4)) (= (op e4 e3) (op (op e4 e3) e4)))) :rule refl)
(step t529 (cl (= (or (= (op e4 e3) (op e4 e4)) (= (op e4 e3) (op e3 e4)) (= (op e4 e3) (op (op e3 e4) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op e4 e3) e4))) (or (= (op e4 e3) (op e4 e4)) (= (op e3 e4) (op e4 e3)) (= (op e4 e3) (op (op e3 e4) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op e4 e3) e4))))) :rule cong :premises (t525 t526 t99 t527 t528))
(step t530 (cl (= (or (= e1 (op e4 e4)) (= e1 (op e3 e4)) (= e1 (op e2 e4)) (= e1 (op e0 e4)) (= e1 (op e1 e4))) (or (= (op e4 e3) (op e4 e4)) (= (op e3 e4) (op e4 e3)) (= (op e4 e3) (op (op e3 e4) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op e4 e3) e4))))) :rule trans :premises (t524 t529))
(step t531 (cl (= (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (or (= (op e4 e3) (op e4 e4)) (= (op e3 e4) (op e4 e3)) (= (op e4 e3) (op (op e3 e4) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op e4 e3) e4))))) :rule trans :premises (t520 t530))
(step t532 (cl (and (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) (and (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))))) :rule and :premises (a1) :args (1))
(step t533 (cl (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3))))) :rule and :premises (t532) :args (0))
(step t534 (cl (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2))))) :rule and :premises (t533) :args (0))
(step t535 (cl (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1))))) :rule and :premises (t534) :args (0))
(step t536 (cl (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) :rule and :premises (t535) :args (1))
(step t537 (cl (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1))) :rule and :premises (t536) :args (1))
(step t538 (cl (or (= (op e4 e3) (op e4 e4)) (= (op e3 e4) (op e4 e3)) (= (op e4 e3) (op (op e3 e4) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op e4 e3) e4)))) :rule resolution :premises (t514 t531 t537))
(step t539 (cl (= (op e4 e3) (op e4 e4)) (= (op e3 e4) (op e4 e3)) (= (op e4 e3) (op (op e3 e4) e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op e4 e3) e4))) :rule or :premises (t538))
(step t540 (cl (= (op e3 e4) (op e4 e3)) (= (op e4 e3) (op e4 e4)) (= (op e4 e3) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e4 e3) (op (op e4 e3) e4)) (= (op e4 e3) (op (op e3 e4) e4))) :rule reordering :premises (t539))
(step t541 (cl (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4))))) :rule and :premises (t290) :args (1))
(step t542 (cl (not (= (op e4 e3) (op e4 e4)))) :rule and :premises (t541) :args (1))
(step t543 (cl (not (= (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)) (or (not (= (op e4 e3) (op (op e4 e3) e4))) (= (op e4 e3) (op e4 (op e4 e3)))))) (not (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1))) (or (not (= (op e4 e3) (op (op e4 e3) e4))) (= (op e4 e3) (op e4 (op e4 e3))))) :rule equiv_pos2)
(step t544 (cl (= (not (= (op e1 e4) e1)) (not (= e1 (op e1 e4))))) :rule cong :premises (t518))
(step t545 (cl (= (= (op e4 e1) e1) (= e1 (op e4 e1)))) :rule rare_rewrite :args ("eq-symm" (op e4 e1) e1))
(step t546 (cl (= (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)) (or (not (= e1 (op e1 e4))) (= e1 (op e4 e1))))) :rule cong :premises (t544 t545))
(step t547 (cl (= (not (= e1 (op e1 e4))) (not (= (op e4 e3) (op (op e4 e3) e4))))) :rule cong :premises (t523))
(step t548 (cl (= (= e1 (op e4 e1)) (= (op e4 e3) (op e4 (op e4 e3))))) :rule cong :premises (t32 t44))
(step t549 (cl (= (or (not (= e1 (op e1 e4))) (= e1 (op e4 e1))) (or (not (= (op e4 e3) (op (op e4 e3) e4))) (= (op e4 e3) (op e4 (op e4 e3)))))) :rule cong :premises (t547 t548))
(step t550 (cl (= (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1)) (or (not (= (op e4 e3) (op (op e4 e3) e4))) (= (op e4 e3) (op e4 (op e4 e3)))))) :rule trans :premises (t546 t549))
(step t551 (cl (or (not (= (op e1 e4) e1)) (= (op e4 e1) e1))) :rule and :premises (t213) :args (1))
(step t552 (cl (or (not (= (op e4 e3) (op (op e4 e3) e4))) (= (op e4 e3) (op e4 (op e4 e3))))) :rule resolution :premises (t543 t550 t551))
(step t553 (cl (not (= (op e4 e3) (op (op e4 e3) e4))) (= (op e4 e3) (op e4 (op e4 e3)))) :rule or :premises (t552))
(step t554 (cl (= (op e4 e3) (op e4 (op e4 e3))) (not (= (op e4 e3) (op (op e4 e3) e4)))) :rule reordering :premises (t553))
(step t555 (cl (not (= (not (= (op e4 e1) (op e4 e3))) (not (= (op e4 e3) (op e4 (op e4 e3)))))) (not (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e3) (op e4 (op e4 e3))))) :rule equiv_pos2)
(step t556 (cl (= (= (op e4 e1) (op e4 e3)) (= (op e4 (op e4 e3)) (op e4 e3)))) :rule cong :premises (t44 t37))
(step t557 (cl (= (not (= (op e4 e1) (op e4 e3))) (not (= (op e4 (op e4 e3)) (op e4 e3))))) :rule cong :premises (t556))
(step t558 (cl (= (= (op e4 (op e4 e3)) (op e4 e3)) (= (op e4 e3) (op e4 (op e4 e3))))) :rule rare_rewrite :args ("eq-symm" (op e4 (op e4 e3)) (op e4 e3)))
(step t559 (cl (= (not (= (op e4 (op e4 e3)) (op e4 e3))) (not (= (op e4 e3) (op e4 (op e4 e3)))))) :rule cong :premises (t558))
(step t560 (cl (= (not (= (op e4 e1) (op e4 e3))) (not (= (op e4 e3) (op e4 (op e4 e3)))))) :rule trans :premises (t557 t559))
(step t561 (cl (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4))))) :rule and :premises (t541) :args (0))
(step t562 (cl (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3))))) :rule and :premises (t561) :args (0))
(step t563 (cl (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4))))) :rule and :premises (t562) :args (0))
(step t564 (cl (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3))))) :rule and :premises (t563) :args (0))
(step t565 (cl (not (= (op e4 e1) (op e4 e3)))) :rule and :premises (t564) :args (1))
(step t566 (cl (not (= (op e4 e3) (op e4 (op e4 e3))))) :rule resolution :premises (t555 t560 t565))
(step t567 (cl (not (= (op e4 e3) (op (op e4 e3) e4)))) :rule resolution :premises (t554 t566))
(step t568 (cl (= (op e4 e3) (op (op e3 e4) e4))) :rule resolution :premises (t540 t245 t542 t469 t567))
(step t569 (cl (= (op (op e3 e4) e4) (op e4 e3))) :rule symm :premises (t568))
(step t570 (cl (= (op (op (op e3 e4) e4) (op e3 e4)) (op (op e4 e3) (op e3 e4)))) :rule cong :premises (t569 t48))
(step t571 (cl (= e4 (op (op e4 e3) (op e3 e4)))) :rule trans :premises (t513 t570))
(step t572 (cl (not (= (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)) (or (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))))) (not (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2))) (or (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule equiv_pos2)
(step t573 (cl (= (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)) (or (= (op e4 e0) e2) (= (op e3 e0) e2) (= (op e2 e0) e2) (= (op e0 e0) e2) (= (op e1 e0) e2)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)) (or (= (op e4 e0) e2) (= (op e3 e0) e2) (= (op e2 e0) e2) (= (op e0 e0) e2) (= (op e1 e0) e2)))))
(step t574 (cl (= (= (op e4 e0) e2) (= e2 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e2))
(step t575 (cl (= (= (op e3 e0) e2) (= e2 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e2))
(step t576 (cl (= (= (op e1 e0) e2) (= e2 (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) e2))
(step t577 (cl (= (or (= (op e4 e0) e2) (= (op e3 e0) e2) (= (op e2 e0) e2) (= (op e0 e0) e2) (= (op e1 e0) e2)) (or (= e2 (op e4 e0)) (= e2 (op e3 e0)) (= e2 (op e2 e0)) (= e2 (op e0 e0)) (= e2 (op e1 e0))))) :rule cong :premises (t574 t575 t16 t127 t576))
(step t578 (cl (= (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)) (or (= e2 (op e4 e0)) (= e2 (op e3 e0)) (= e2 (op e2 e0)) (= e2 (op e0 e0)) (= e2 (op e1 e0))))) :rule trans :premises (t573 t577))
(step t579 (cl (= (= e2 (op e4 e0)) (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t41 t46))
(step t580 (cl (= (= e2 (op e3 e0)) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t41 t56))
(step t581 (cl (= (= e2 (op e1 e0)) (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t41 t75))
(step t582 (cl (= (or (= e2 (op e4 e0)) (= e2 (op e3 e0)) (= e2 (op e2 e0)) (= e2 (op e0 e0)) (= e2 (op e1 e0))) (or (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))))) :rule cong :premises (t579 t580 t67 t133 t581))
(step t583 (cl (= (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)) (or (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))))) :rule trans :premises (t578 t582))
(step t584 (cl (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2))) :rule and :premises (t143) :args (1))
(step t585 (cl (or (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t572 t583 t584))
(step t586 (cl (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) :rule or :premises (t585))
(step t587 (cl (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3))))) :rule reordering :premises (t586))
(step t588 (cl (not (= (not (= (op e3 e0) (op e3 e4))) (not (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3))))))) (not (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule equiv_pos2)
(step t589 (cl (= (= (op e3 e0) (op e3 e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op e3 e4)))) :rule cong :premises (t56 t48))
(step t590 (cl (= (not (= (op e3 e0) (op e3 e4))) (not (= (op e3 (op (op e4 e3) (op e4 e3))) (op e3 e4))))) :rule cong :premises (t589))
(step t591 (cl (= (= (op e3 (op (op e4 e3) (op e4 e3))) (op e3 e4)) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op (op e4 e3) (op e4 e3))) (op e3 e4)))
(step t592 (cl (= (not (= (op e3 (op (op e4 e3) (op e4 e3))) (op e3 e4))) (not (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule cong :premises (t591))
(step t593 (cl (= (not (= (op e3 e0) (op e3 e4))) (not (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule trans :premises (t590 t592))
(step t594 (cl (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) :rule and :premises (t291) :args (1))
(step t595 (cl (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4))))) :rule and :premises (t594) :args (0))
(step t596 (cl (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3))))) :rule and :premises (t595) :args (0))
(step t597 (cl (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4))))) :rule and :premises (t596) :args (0))
(step t598 (cl (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3))))) :rule and :premises (t597) :args (0))
(step t599 (cl (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2))))) :rule and :premises (t598) :args (0))
(step t600 (cl (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4))))) :rule and :premises (t599) :args (0))
(step t601 (cl (not (= (op e3 e0) (op e3 e4)))) :rule and :premises (t600) :args (1))
(step t602 (cl (not (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t588 t593 t601))
(step t603 (cl (= (= (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) false) (not (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))))) :rule equiv_simplify)
(step t604 (cl (not (= (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) false)) (not (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule equiv1 :premises (t603))
(step t605 (cl (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e4 e3))) :rule symm :premises (t230))
(step t606 (cl (= (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e4 e3)))) :rule cong :premises (t48 t605))
(step t607 (cl (= (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) false)) :rule trans :premises (t606 t246))
(step t608 (cl (not (= (op e3 e4) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t604 t607))
(step t609 (cl (= (= (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))) false) (not (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3))))))) :rule equiv_simplify)
(step t610 (cl (not (= (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))) false)) (not (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))))) :rule equiv1 :premises (t609))
(step t611 (cl (not (= (= (op (op e1 e4) e1) e4) (= e4 (op (op (op e4 e3) e4) (op e4 e3))))) (not (= (op (op e1 e4) e1) e4)) (= e4 (op (op (op e4 e3) e4) (op e4 e3)))) :rule equiv_pos2)
(step t612 (cl (= (= (op (op e1 e4) e1) e4) (= e4 (op (op e1 e4) e1)))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e4) e1) e4))
(step t613 (cl (= (op (op e1 e4) e1) (op (op (op e4 e3) e4) (op e4 e3)))) :rule cong :premises (t68 t32))
(step t614 (cl (= (= e4 (op (op e1 e4) e1)) (= e4 (op (op (op e4 e3) e4) (op e4 e3))))) :rule cong :premises (t40 t613))
(step t615 (cl (= (= (op (op e1 e4) e1) e4) (= e4 (op (op (op e4 e3) e4) (op e4 e3))))) :rule trans :premises (t612 t614))
(step t616 (cl (and (and (and (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4)) (and (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4)))) :rule and :premises (t510) :args (0))
(step t617 (cl (and (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3)) (= (op (op e1 e4) e1) e4))) :rule and :premises (t616) :args (1))
(step t618 (cl (= (op (op e1 e4) e1) e4)) :rule and :premises (t617) :args (1))
(step t619 (cl (= e4 (op (op (op e4 e3) e4) (op e4 e3)))) :rule resolution :premises (t611 t615 t618))
(step t620 (cl (= (op (op (op e4 e3) e4) (op e4 e3)) (op e3 (op e4 e3)))) :rule cong :premises (t305 t37))
(step t621 (cl (= e4 (op e3 (op e4 e3)))) :rule trans :premises (t619 t620))
(step t622 (cl (= (op (op e3 e4) e3) (op e3 (op e4 e3)))) :rule trans :premises (t328 t621))
(step t623 (cl (= (op e3 (op e4 e3)) (op (op e3 e4) e3))) :rule symm :premises (t622))
(step t624 (cl (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) :rule refl)
(step t625 (cl (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t504 t624))
(step t626 (cl (not (= (= (op (op e0 e4) e0) e4) (= e4 (op (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) (op e4 e3)))))) (not (= (op (op e0 e4) e0) e4)) (= e4 (op (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) (op e4 e3))))) :rule equiv_pos2)
(step t627 (cl (= (= (op (op e0 e4) e0) e4) (= e4 (op (op e0 e4) e0)))) :rule rare_rewrite :args ("eq-symm" (op (op e0 e4) e0) e4))
(step t628 (cl (= (op (op e0 e4) e0) (op (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t77 t34))
(step t629 (cl (= (= e4 (op (op e0 e4) e0)) (= e4 (op (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t40 t628))
(step t630 (cl (= (= (op (op e0 e4) e0) e4) (= e4 (op (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) (op e4 e3)))))) :rule trans :premises (t627 t629))
(step t631 (cl (and (and (and (and (= (op (op e0 e0) e0) e0) (= (op (op e0 e1) e0) e1)) (= (op (op e0 e2) e0) e2)) (= (op (op e0 e3) e0) e3)) (= (op (op e0 e4) e0) e4))) :rule and :premises (t616) :args (0))
(step t632 (cl (= (op (op e0 e4) e0) e4)) :rule and :premises (t631) :args (1))
(step t633 (cl (= e4 (op (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) (op e4 e3))))) :rule resolution :premises (t626 t630 t632))
(step t634 (cl (= (op (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) (op e4 e3))) e4)) :rule symm :premises (t633))
(step t635 (cl (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op e3 e4) e3))) :rule trans :premises (t625 t634 t329))
(step t636 (cl (= (op (op e3 e4) e3) (op e4 (op (op e4 e3) (op e4 e3))))) :rule symm :premises (t635))
(step t637 (cl (= (op e3 (op e4 e3)) (op e4 (op (op e4 e3) (op e4 e3))))) :rule trans :premises (t623 t636))
(step t638 (cl (= (op e4 (op (op e4 e3) (op e4 e3))) (op e3 (op e4 e3)))) :rule symm :premises (t637))
(step t639 (cl (= (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op e4 e3))))) :rule cong :premises (t48 t638))
(step t640 (cl (= (= (= (op e3 e4) (op e3 (op e4 e3))) false) (not (= (op e3 e4) (op e3 (op e4 e3)))))) :rule equiv_simplify)
(step t641 (cl (= (= (op e3 e4) (op e3 (op e4 e3))) false) (not (not (= (op e3 e4) (op e3 (op e4 e3)))))) :rule equiv2 :premises (t640))
(step t642 (cl (not (not (not (= (op e3 e4) (op e3 (op e4 e3)))))) (= (op e3 e4) (op e3 (op e4 e3)))) :rule not_not)
(step t643 (cl (= (= (op e3 e4) (op e3 (op e4 e3))) false) (= (op e3 e4) (op e3 (op e4 e3)))) :rule resolution :premises (t641 t642))
(step t644 (cl (not (= (not (= (op e3 e1) (op e3 e4))) (not (= (op e3 e4) (op e3 (op e4 e3)))))) (not (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e4) (op e3 (op e4 e3))))) :rule equiv_pos2)
(step t645 (cl (= (= (op e3 e1) (op e3 e4)) (= (op e3 (op e4 e3)) (op e3 e4)))) :rule cong :premises (t54 t48))
(step t646 (cl (= (not (= (op e3 e1) (op e3 e4))) (not (= (op e3 (op e4 e3)) (op e3 e4))))) :rule cong :premises (t645))
(step t647 (cl (= (= (op e3 (op e4 e3)) (op e3 e4)) (= (op e3 e4) (op e3 (op e4 e3))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op e4 e3)) (op e3 e4)))
(step t648 (cl (= (not (= (op e3 (op e4 e3)) (op e3 e4))) (not (= (op e3 e4) (op e3 (op e4 e3)))))) :rule cong :premises (t647))
(step t649 (cl (= (not (= (op e3 e1) (op e3 e4))) (not (= (op e3 e4) (op e3 (op e4 e3)))))) :rule trans :premises (t646 t648))
(step t650 (cl (not (= (op e3 e1) (op e3 e4)))) :rule and :premises (t597) :args (1))
(step t651 (cl (not (= (op e3 e4) (op e3 (op e4 e3))))) :rule resolution :premises (t644 t649 t650))
(step t652 (cl (= (= (op e3 e4) (op e3 (op e4 e3))) false)) :rule resolution :premises (t643 t651))
(step t653 (cl (= (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))) false)) :rule trans :premises (t639 t652))
(step t654 (cl (not (= (op e3 e4) (op e4 (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t610 t653))
(step t655 (cl (= (op e3 e4) (op (op e3 e4) (op (op e4 e3) (op e4 e3))))) :rule resolution :premises (t587 t602 t201 t608 t654))
(step t656 (cl (not (= (= (op (op e1 e3) e1) e3) (= e3 (op (op (op e4 e3) e3) (op e4 e3))))) (not (= (op (op e1 e3) e1) e3)) (= e3 (op (op (op e4 e3) e3) (op e4 e3)))) :rule equiv_pos2)
(step t657 (cl (= (= (op (op e1 e3) e1) e3) (= e3 (op (op e1 e3) e1)))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e3) e1) e3))
(step t658 (cl (= (op (op e1 e3) e1) (op (op (op e4 e3) e3) (op e4 e3)))) :rule cong :premises (t70 t32))
(step t659 (cl (= (= e3 (op (op e1 e3) e1)) (= e3 (op (op (op e4 e3) e3) (op e4 e3))))) :rule cong :premises (t39 t658))
(step t660 (cl (= (= (op (op e1 e3) e1) e3) (= e3 (op (op (op e4 e3) e3) (op e4 e3))))) :rule trans :premises (t657 t659))
(step t661 (cl (and (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2)) (= (op (op e1 e3) e1) e3))) :rule and :premises (t617) :args (0))
(step t662 (cl (= (op (op e1 e3) e1) e3)) :rule and :premises (t661) :args (1))
(step t663 (cl (= e3 (op (op (op e4 e3) e3) (op e4 e3)))) :rule resolution :premises (t656 t660 t662))
(step t664 (cl (not (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e4 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op e4 e3)))))) (not (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1))) (or (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e4 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op e4 e3))))) :rule equiv_pos2)
(step t665 (cl (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= (op e3 e4) e1) (= (op e3 e3) e1) (= (op e3 e2) e1) (= (op e3 e0) e1) (= (op e3 e1) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= (op e3 e4) e1) (= (op e3 e3) e1) (= (op e3 e2) e1) (= (op e3 e0) e1) (= (op e3 e1) e1)))))
(step t666 (cl (= (= (op e3 e3) e1) (= e1 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e1))
(step t667 (cl (= (= (op e3 e0) e1) (= e1 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e1))
(step t668 (cl (= (= (op e3 e1) e1) (= e1 (op e3 e1)))) :rule rare_rewrite :args ("eq-symm" (op e3 e1) e1))
(step t669 (cl (= (or (= (op e3 e4) e1) (= (op e3 e3) e1) (= (op e3 e2) e1) (= (op e3 e0) e1) (= (op e3 e1) e1)) (or (= e1 (op e3 e4)) (= e1 (op e3 e3)) (= e1 (op e3 e2)) (= e1 (op e3 e0)) (= e1 (op e3 e1))))) :rule cong :premises (t517 t666 t9 t667 t668))
(step t670 (cl (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= e1 (op e3 e4)) (= e1 (op e3 e3)) (= e1 (op e3 e2)) (= e1 (op e3 e0)) (= e1 (op e3 e1))))) :rule trans :premises (t665 t669))
(step t671 (cl (= (= e1 (op e3 e3)) (= (op e4 e3) (op e3 e3)))) :rule cong :premises (t32 t50))
(step t672 (cl (= (= e1 (op e3 e0)) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t32 t56))
(step t673 (cl (= (= e1 (op e3 e1)) (= (op e4 e3) (op e3 (op e4 e3))))) :rule cong :premises (t32 t54))
(step t674 (cl (= (or (= e1 (op e3 e4)) (= e1 (op e3 e3)) (= e1 (op e3 e2)) (= e1 (op e3 e0)) (= e1 (op e3 e1))) (or (= (op e4 e3) (op e3 e4)) (= (op e4 e3) (op e3 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op e4 e3)))))) :rule cong :premises (t522 t671 t53 t672 t673))
(step t675 (cl (= (= (op e4 e3) (op e3 e3)) (= (op e3 e3) (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) (op e3 e3)))
(step t676 (cl (= (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule refl)
(step t677 (cl (= (= (op e4 e3) (op e3 (op e4 e3))) (= (op e4 e3) (op e3 (op e4 e3))))) :rule refl)
(step t678 (cl (= (or (= (op e4 e3) (op e3 e4)) (= (op e4 e3) (op e3 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op e4 e3)))) (or (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e4 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op e4 e3)))))) :rule cong :premises (t526 t675 t96 t676 t677))
(step t679 (cl (= (or (= e1 (op e3 e4)) (= e1 (op e3 e3)) (= e1 (op e3 e2)) (= e1 (op e3 e0)) (= e1 (op e3 e1))) (or (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e4 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op e4 e3)))))) :rule trans :premises (t674 t678))
(step t680 (cl (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e4 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op e4 e3)))))) :rule trans :premises (t670 t679))
(step t681 (cl (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4))))) :rule and :premises (t137) :args (1))
(step t682 (cl (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3))))) :rule and :premises (t681) :args (0))
(step t683 (cl (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2))))) :rule and :premises (t682) :args (0))
(step t684 (cl (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1))))) :rule and :premises (t683) :args (0))
(step t685 (cl (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) :rule and :premises (t684) :args (1))
(step t686 (cl (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1))) :rule and :premises (t685) :args (0))
(step t687 (cl (or (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e4 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op e4 e3))))) :rule resolution :premises (t664 t680 t686))
(step t688 (cl (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e4 e3)) (= (op e4 e3) (op e3 (op e3 e4))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op e4 e3)))) :rule or :premises (t687))
(step t689 (cl (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e4 e3)) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op e4 e3))) (= (op e4 e3) (op e3 (op e3 e4)))) :rule reordering :premises (t688))
(step t690 (cl (not (= (op e3 e3) (op e4 e3)))) :rule and :premises (t281) :args (1))
(step t691 (cl (= (= (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) false) (not (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule equiv_simplify)
(step t692 (cl (not (= (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) false)) (not (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule equiv1 :premises (t691))
(step t693 (cl (= (op e3 (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))) :rule refl)
(step t694 (cl (= (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t230 t693))
(step t695 (cl (= (= (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))) false) (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule equiv_simplify)
(step t696 (cl (= (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))) false) (not (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule equiv2 :premises (t695))
(step t697 (cl (not (not (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))) :rule not_not)
(step t698 (cl (= (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))) false) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))) :rule resolution :premises (t696 t697))
(step t699 (cl (not (= (not (= (op e1 e0) (op e3 e0))) (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))))) (not (not (= (op e1 e0) (op e3 e0)))) (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule equiv_pos2)
(step t700 (cl (= (= (op e1 e0) (op e3 e0)) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t75 t56))
(step t701 (cl (= (not (= (op e1 e0) (op e3 e0))) (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule cong :premises (t700))
(step t702 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2)))))) :rule and :premises (t280) :args (0))
(step t703 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1)))))) :rule and :premises (t702) :args (0))
(step t704 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0))))) :rule and :premises (t703) :args (0))
(step t705 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0))))) :rule and :premises (t704) :args (0))
(step t706 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0))))) :rule and :premises (t705) :args (0))
(step t707 (cl (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0))))) :rule and :premises (t706) :args (0))
(step t708 (cl (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0))))) :rule and :premises (t707) :args (0))
(step t709 (cl (not (= (op e1 e0) (op e3 e0)))) :rule and :premises (t708) :args (1))
(step t710 (cl (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t699 t701 t709))
(step t711 (cl (= (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))) false)) :rule resolution :premises (t698 t710))
(step t712 (cl (= (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) false)) :rule trans :premises (t694 t711))
(step t713 (cl (not (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t692 t712))
(step t714 (cl (= (= (= (op e4 e3) (op e3 (op e4 e3))) false) (not (= (op e4 e3) (op e3 (op e4 e3)))))) :rule equiv_simplify)
(step t715 (cl (not (= (= (op e4 e3) (op e3 (op e4 e3))) false)) (not (= (op e4 e3) (op e3 (op e4 e3))))) :rule equiv1 :premises (t714))
(step t716 (cl (= (op e3 (op e4 e3)) (op e3 (op e4 e3)))) :rule refl)
(step t717 (cl (= (= (op e4 e3) (op e3 (op e4 e3))) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3))))) :rule cong :premises (t231 t716))
(step t718 (cl (= (= (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3))) false) (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3)))))) :rule equiv_simplify)
(step t719 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3))) false) (not (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3)))))) :rule equiv2 :premises (t718))
(step t720 (cl (not (not (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3)))))) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3)))) :rule not_not)
(step t721 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3))) false) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3)))) :rule resolution :premises (t719 t720))
(step t722 (cl (not (= (not (= (op e0 e1) (op e3 e1))) (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3)))))) (not (not (= (op e0 e1) (op e3 e1)))) (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3))))) :rule equiv_pos2)
(step t723 (cl (= (= (op e0 e1) (op e3 e1)) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3))))) :rule cong :premises (t85 t54))
(step t724 (cl (= (not (= (op e0 e1) (op e3 e1))) (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3)))))) :rule cong :premises (t723))
(step t725 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) :rule and :premises (t703) :args (1))
(step t726 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1))))) :rule and :premises (t725) :args (0))
(step t727 (cl (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1))))) :rule and :premises (t726) :args (0))
(step t728 (cl (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1))))) :rule and :premises (t727) :args (0))
(step t729 (cl (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1))))) :rule and :premises (t728) :args (0))
(step t730 (cl (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1))))) :rule and :premises (t729) :args (0))
(step t731 (cl (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1))))) :rule and :premises (t730) :args (0))
(step t732 (cl (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1))))) :rule and :premises (t731) :args (0))
(step t733 (cl (not (= (op e0 e1) (op e3 e1)))) :rule and :premises (t732) :args (1))
(step t734 (cl (not (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3))))) :rule resolution :premises (t722 t724 t733))
(step t735 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op e3 (op e4 e3))) false)) :rule resolution :premises (t721 t734))
(step t736 (cl (= (= (op e4 e3) (op e3 (op e4 e3))) false)) :rule trans :premises (t717 t735))
(step t737 (cl (not (= (op e4 e3) (op e3 (op e4 e3))))) :rule resolution :premises (t715 t736))
(step t738 (cl (= (op e4 e3) (op e3 (op e3 e4)))) :rule resolution :premises (t689 t245 t690 t713 t737))
(step t739 (cl (= (op (op e4 e3) e3) (op (op e3 (op e3 e4)) e3))) :rule cong :premises (t738 t39))
(step t740 (cl (not (= (= (op (op e3 e2) e3) e2) (= (op e3 e4) (op (op e3 (op e3 e4)) e3)))) (not (= (op (op e3 e2) e3) e2)) (= (op e3 e4) (op (op e3 (op e3 e4)) e3))) :rule equiv_pos2)
(step t741 (cl (= (= (op (op e3 e2) e3) e2) (= e2 (op (op e3 e2) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op e3 e2) e3) e2))
(step t742 (cl (= (op (op e3 e2) e3) (op (op e3 (op e3 e4)) e3))) :rule cong :premises (t52 t39))
(step t743 (cl (= (= e2 (op (op e3 e2) e3)) (= (op e3 e4) (op (op e3 (op e3 e4)) e3)))) :rule cong :premises (t41 t742))
(step t744 (cl (= (= (op (op e3 e2) e3) e2) (= (op e3 e4) (op (op e3 (op e3 e4)) e3)))) :rule trans :premises (t741 t743))
(step t745 (cl (and (and (and (= (op (op e3 e0) e3) e0) (= (op (op e3 e1) e3) e1)) (= (op (op e3 e2) e3) e2)) (= (op (op e3 e3) e3) e3))) :rule and :premises (t327) :args (0))
(step t746 (cl (and (and (= (op (op e3 e0) e3) e0) (= (op (op e3 e1) e3) e1)) (= (op (op e3 e2) e3) e2))) :rule and :premises (t745) :args (0))
(step t747 (cl (= (op (op e3 e2) e3) e2)) :rule and :premises (t746) :args (1))
(step t748 (cl (= (op e3 e4) (op (op e3 (op e3 e4)) e3))) :rule resolution :premises (t740 t744 t747))
(step t749 (cl (= (op (op e3 (op e3 e4)) e3) (op e3 e4))) :rule symm :premises (t748))
(step t750 (cl (= (op (op e4 e3) e3) (op e3 e4))) :rule trans :premises (t739 t749))
(step t751 (cl (= (op (op (op e4 e3) e3) (op e4 e3)) (op (op e3 e4) (op e4 e3)))) :rule cong :premises (t750 t37))
(step t752 (cl (= e3 (op (op e3 e4) (op e4 e3)))) :rule trans :premises (t663 t751))
(step t753 (cl (not (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))) (not (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (or (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4))))) :rule equiv_pos2)
(step t754 (cl (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= (op e4 e2) e0) (= (op e3 e2) e0) (= (op e2 e2) e0) (= (op e0 e2) e0) (= (op e1 e2) e0)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= (op e4 e2) e0) (= (op e3 e2) e0) (= (op e2 e2) e0) (= (op e0 e2) e0) (= (op e1 e2) e0)))))
(step t755 (cl (= (= (op e4 e2) e0) (= e0 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e0))
(step t756 (cl (= (= (op e3 e2) e0) (= e0 (op e3 e2)))) :rule rare_rewrite :args ("eq-symm" (op e3 e2) e0))
(step t757 (cl (= (= (op e0 e2) e0) (= e0 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e0))
(step t758 (cl (= (= (op e1 e2) e0) (= e0 (op e1 e2)))) :rule rare_rewrite :args ("eq-symm" (op e1 e2) e0))
(step t759 (cl (= (or (= (op e4 e2) e0) (= (op e3 e2) e0) (= (op e2 e2) e0) (= (op e0 e2) e0) (= (op e1 e2) e0)) (or (= e0 (op e4 e2)) (= e0 (op e3 e2)) (= e0 (op e2 e2)) (= e0 (op e0 e2)) (= e0 (op e1 e2))))) :rule cong :premises (t755 t756 t14 t757 t758))
(step t760 (cl (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= e0 (op e4 e2)) (= e0 (op e3 e2)) (= e0 (op e2 e2)) (= e0 (op e0 e2)) (= e0 (op e1 e2))))) :rule trans :premises (t754 t759))
(step t761 (cl (= (= e0 (op e4 e2)) (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))))) :rule cong :premises (t34 t42))
(step t762 (cl (= (= e0 (op e3 e2)) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e3 e4))))) :rule cong :premises (t34 t52))
(step t763 (cl (= (= e0 (op e0 e2)) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))))) :rule cong :premises (t34 t81))
(step t764 (cl (= (= e0 (op e1 e2)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4))))) :rule cong :premises (t34 t72))
(step t765 (cl (= (or (= e0 (op e4 e2)) (= e0 (op e3 e2)) (= e0 (op e2 e2)) (= e0 (op e0 e2)) (= e0 (op e1 e2))) (or (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))) :rule cong :premises (t761 t762 t63 t763 t764))
(step t766 (cl (= (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))))) :rule refl)
(step t767 (cl (= (= (op (op e4 e3) (op e4 e3)) (op e3 (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e3) (op e4 e3)) (op e3 (op e3 e4))))
(step t768 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))))) :rule refl)
(step t769 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4))))) :rule refl)
(step t770 (cl (= (or (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))) (or (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))) :rule cong :premises (t766 t767 t101 t768 t769))
(step t771 (cl (= (or (= e0 (op e4 e2)) (= e0 (op e3 e2)) (= e0 (op e2 e2)) (= e0 (op e0 e2)) (= e0 (op e1 e2))) (or (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))) :rule trans :premises (t765 t770))
(step t772 (cl (= (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)) (or (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))) :rule trans :premises (t760 t771))
(step t773 (cl (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) :rule and :premises (t138) :args (1))
(step t774 (cl (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3))))) :rule and :premises (t773) :args (0))
(step t775 (cl (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2))))) :rule and :premises (t774) :args (0))
(step t776 (cl (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1))))) :rule and :premises (t775) :args (0))
(step t777 (cl (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0)))) :rule and :premises (t776) :args (0))
(step t778 (cl (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) :rule and :premises (t777) :args (1))
(step t779 (cl (or (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4))))) :rule resolution :premises (t753 t772 t778))
(step t780 (cl (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))) :rule or :premises (t779))
(step t781 (cl (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4)))) :rule reordering :premises (t780))
(step t782 (cl (not (= (not (= (op e1 e1) (op e1 e2))) (not (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))) (not (not (= (op e1 e1) (op e1 e2)))) (not (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4))))) :rule equiv_pos2)
(step t783 (cl (= (= (op e1 e1) (op e1 e2)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4))))) :rule cong :premises (t33 t72))
(step t784 (cl (= (not (= (op e1 e1) (op e1 e2))) (not (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))) :rule cong :premises (t783))
(step t785 (cl (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2))))) :rule and :premises (t298) :args (0))
(step t786 (cl (not (= (op e1 e1) (op e1 e2)))) :rule and :premises (t785) :args (1))
(step t787 (cl (not (= (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e3 e4))))) :rule resolution :premises (t782 t784 t786))
(step t788 (cl (= (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) false) (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))))) :rule equiv_simplify)
(step t789 (cl (not (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) false)) (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))))) :rule equiv1 :premises (t788))
(step t790 (cl (= (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))) :rule refl)
(step t791 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))))) :rule cong :premises (t176 t790))
(step t792 (cl (= (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) false) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))))) :rule equiv_simplify)
(step t793 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) false) (not (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))))) :rule equiv2 :premises (t792))
(step t794 (cl (not (not (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))))) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))) :rule not_not)
(step t795 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) false) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))) :rule resolution :premises (t793 t794))
(step t796 (cl (not (= (not (= (op e0 e0) (op e0 e2))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))))) (not (not (= (op e0 e0) (op e0 e2)))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))))) :rule equiv_pos2)
(step t797 (cl (= (= (op e0 e0) (op e0 e2)) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))))) :rule cong :premises (t83 t81))
(step t798 (cl (= (not (= (op e0 e0) (op e0 e2))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4)))))) :rule cong :premises (t797))
(step t799 (cl (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2))))) :rule and :premises (t413) :args (0))
(step t800 (cl (not (= (op e0 e0) (op e0 e2)))) :rule and :premises (t799) :args (1))
(step t801 (cl (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))))) :rule resolution :premises (t796 t798 t800))
(step t802 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) false)) :rule resolution :premises (t795 t801))
(step t803 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) false)) :rule trans :premises (t791 t802))
(step t804 (cl (not (= (op (op e4 e3) (op e4 e3)) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))))) :rule resolution :premises (t789 t803))
(step t805 (cl (= (= (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) false) (not (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3)))))) :rule equiv_simplify)
(step t806 (cl (not (= (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) false)) (not (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))))) :rule equiv1 :premises (t805))
(step t807 (cl (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op e3 (op e3 e4)))) :rule trans :premises (t605 t738))
(step t808 (cl (= (op e3 (op e3 e4)) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) :rule symm :premises (t807))
(step t809 (cl (= (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t808 t176))
(step t810 (cl (= (= (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) false) (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))))) :rule equiv_simplify)
(step t811 (cl (= (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) false) (not (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))))) :rule equiv2 :premises (t810))
(step t812 (cl (not (not (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))) :rule not_not)
(step t813 (cl (= (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) false) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))) :rule resolution :premises (t811 t812))
(step t814 (cl (not (= (not (= (op e0 e0) (op e1 e0))) (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))))) (not (not (= (op e0 e0) (op e1 e0)))) (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) :rule equiv_pos2)
(step t815 (cl (= (= (op e0 e0) (op e1 e0)) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t83 t75))
(step t816 (cl (= (not (= (op e0 e0) (op e1 e0))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))))) :rule cong :premises (t815))
(step t817 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) :rule rare_rewrite :args ("eq-symm" (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))
(step t818 (cl (= (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))))) :rule cong :premises (t817))
(step t819 (cl (= (not (= (op e0 e0) (op e1 e0))) (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))))))) :rule trans :premises (t816 t818))
(step t820 (cl (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0))))) :rule and :premises (t708) :args (0))
(step t821 (cl (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0))))) :rule and :premises (t820) :args (0))
(step t822 (cl (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0))))) :rule and :premises (t821) :args (0))
(step t823 (cl (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0))))) :rule and :premises (t822) :args (0))
(step t824 (cl (not (= (op e0 e0) (op e1 e0)))) :rule and :premises (t823) :args (0))
(step t825 (cl (not (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t814 t819 t824))
(step t826 (cl (= (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3)))) false)) :rule resolution :premises (t813 t825))
(step t827 (cl (= (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) false)) :rule trans :premises (t809 t826))
(step t828 (cl (not (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))))) :rule resolution :premises (t806 t827))
(step t829 (cl (= (= (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) false) (not (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4)))))) :rule equiv_simplify)
(step t830 (cl (not (= (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) false)) (not (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))))) :rule equiv1 :premises (t829))
(step t831 (cl (= (op e4 (op e3 e4)) (op (op (op e3 e4) e3) (op e3 e4)))) :rule cong :premises (t329 t48))
(step t832 (cl (not (= (= (op (op e2 e3) e2) e3) (= e3 (op (op (op e3 e4) e3) (op e3 e4))))) (not (= (op (op e2 e3) e2) e3)) (= e3 (op (op (op e3 e4) e3) (op e3 e4)))) :rule equiv_pos2)
(step t833 (cl (= (= (op (op e2 e3) e2) e3) (= e3 (op (op e2 e3) e2)))) :rule rare_rewrite :args ("eq-symm" (op (op e2 e3) e2) e3))
(step t834 (cl (= (op (op e2 e3) e2) (op (op (op e3 e4) e3) (op e3 e4)))) :rule cong :premises (t60 t41))
(step t835 (cl (= (= e3 (op (op e2 e3) e2)) (= e3 (op (op (op e3 e4) e3) (op e3 e4))))) :rule cong :premises (t39 t834))
(step t836 (cl (= (= (op (op e2 e3) e2) e3) (= e3 (op (op (op e3 e4) e3) (op e3 e4))))) :rule trans :premises (t833 t835))
(step t837 (cl (and (and (and (= (op (op e2 e0) e2) e0) (= (op (op e2 e1) e2) e1)) (= (op (op e2 e2) e2) e2)) (= (op (op e2 e3) e2) e3))) :rule and :premises (t511) :args (0))
(step t838 (cl (= (op (op e2 e3) e2) e3)) :rule and :premises (t837) :args (1))
(step t839 (cl (= e3 (op (op (op e3 e4) e3) (op e3 e4)))) :rule resolution :premises (t832 t836 t838))
(step t840 (cl (= (op (op (op e3 e4) e3) (op e3 e4)) e3)) :rule symm :premises (t839))
(step t841 (cl (= (op e4 (op e3 e4)) (op (op e3 e4) (op e4 e3)))) :rule trans :premises (t831 t840 t663 t751))
(step t842 (cl (= (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3))))) :rule cong :premises (t624 t841))
(step t843 (cl (= (= (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3))) false) (not (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3)))))) :rule equiv_simplify)
(step t844 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3))) false) (not (not (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3)))))) :rule equiv2 :premises (t843))
(step t845 (cl (not (not (not (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3)))))) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3)))) :rule not_not)
(step t846 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3))) false) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3)))) :rule resolution :premises (t844 t845))
(step t847 (cl (not (= (not (= (op e1 e1) (op e2 e1))) (not (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3)))))) (not (not (= (op e1 e1) (op e2 e1)))) (not (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3))))) :rule equiv_pos2)
(step t848 (cl (= (= (op e1 e1) (op e2 e1)) (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3))))) :rule cong :premises (t33 t64))
(step t849 (cl (= (not (= (op e1 e1) (op e2 e1))) (not (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3)))))) :rule cong :premises (t848))
(step t850 (cl (not (= (op e1 e1) (op e2 e1)))) :rule and :premises (t730) :args (1))
(step t851 (cl (not (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3))))) :rule resolution :premises (t847 t849 t850))
(step t852 (cl (= (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e4 e3))) false)) :rule resolution :premises (t846 t851))
(step t853 (cl (= (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))) false)) :rule trans :premises (t842 t852))
(step t854 (cl (not (= (op (op e4 e3) (op e4 e3)) (op e4 (op e3 e4))))) :rule resolution :premises (t830 t853))
(step t855 (cl (= (op (op e4 e3) (op e4 e3)) (op (op e3 e4) (op e3 e4)))) :rule resolution :premises (t781 t787 t804 t828 t854))
(step t856 (cl (not (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= e4 (op e3 (op (op e4 e3) (op e4 e3)))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3))))))) (not (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4))) (or (= e4 (op e3 (op (op e4 e3) (op e4 e3)))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule equiv_pos2)
(step t857 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= (op e3 e0) e4) (= (op e3 e0) e3) (= (op e3 e0) e2) (= (op e3 e0) e0) (= (op e3 e0) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= (op e3 e0) e4) (= (op e3 e0) e3) (= (op e3 e0) e2) (= (op e3 e0) e0) (= (op e3 e0) e1)))))
(step t858 (cl (= (= (op e3 e0) e4) (= e4 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e4))
(step t859 (cl (= (= (op e3 e0) e0) (= e0 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e0))
(step t860 (cl (= (or (= (op e3 e0) e4) (= (op e3 e0) e3) (= (op e3 e0) e2) (= (op e3 e0) e0) (= (op e3 e0) e1)) (or (= e4 (op e3 e0)) (= e3 (op e3 e0)) (= e2 (op e3 e0)) (= e0 (op e3 e0)) (= e1 (op e3 e0))))) :rule cong :premises (t858 t11 t575 t859 t667))
(step t861 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= e4 (op e3 e0)) (= e3 (op e3 e0)) (= e2 (op e3 e0)) (= e0 (op e3 e0)) (= e1 (op e3 e0))))) :rule trans :premises (t857 t860))
(step t862 (cl (= (= e4 (op e3 e0)) (= e4 (op e3 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t40 t56))
(step t863 (cl (= (= e0 (op e3 e0)) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t34 t56))
(step t864 (cl (= (or (= e4 (op e3 e0)) (= e3 (op e3 e0)) (= e2 (op e3 e0)) (= e0 (op e3 e0)) (= e1 (op e3 e0))) (or (= e4 (op e3 (op (op e4 e3) (op e4 e3)))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule cong :premises (t862 t57 t580 t863 t672))
(step t865 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (= e4 (op e3 (op (op e4 e3) (op e4 e3)))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule trans :premises (t861 t864))
(step t866 (cl (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4)))) :rule and :premises (t265) :args (1))
(step t867 (cl (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4)))) :rule and :premises (t866) :args (0))
(step t868 (cl (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4)))) :rule and :premises (t867) :args (0))
(step t869 (cl (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4)))) :rule and :premises (t868) :args (0))
(step t870 (cl (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4))) :rule and :premises (t869) :args (0))
(step t871 (cl (or (= e4 (op e3 (op (op e4 e3) (op e4 e3)))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t856 t865 t870))
(step t872 (cl (= e4 (op e3 (op (op e4 e3) (op e4 e3)))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3))))) :rule or :premises (t871))
(step t873 (cl (= (op e3 e4) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e4 e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= e3 (op e3 (op (op e4 e3) (op e4 e3)))) (= e4 (op e3 (op (op e4 e3) (op e4 e3))))) :rule reordering :premises (t872))
(step t874 (cl (= (= (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) false) (not (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule equiv_simplify)
(step t875 (cl (not (= (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) false)) (not (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule equiv1 :premises (t874))
(step t876 (cl (= (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t176 t693))
(step t877 (cl (= (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))) false) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule equiv_simplify)
(step t878 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))) false) (not (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule equiv2 :premises (t877))
(step t879 (cl (not (not (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))))) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))) :rule not_not)
(step t880 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))) false) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))) :rule resolution :premises (t878 t879))
(step t881 (cl (not (= (not (= (op e0 e0) (op e3 e0))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))))) (not (not (= (op e0 e0) (op e3 e0)))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule equiv_pos2)
(step t882 (cl (= (= (op e0 e0) (op e3 e0)) (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t83 t56))
(step t883 (cl (= (not (= (op e0 e0) (op e3 e0))) (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3))))))) :rule cong :premises (t882))
(step t884 (cl (not (= (op e0 e0) (op e3 e0)))) :rule and :premises (t822) :args (1))
(step t885 (cl (not (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t881 t883 t884))
(step t886 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op (op e4 e3) (op e4 e3))) (op e3 (op (op e4 e3) (op e4 e3)))) false)) :rule resolution :premises (t880 t885))
(step t887 (cl (= (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) false)) :rule trans :premises (t876 t886))
(step t888 (cl (not (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t875 t887))
(step t889 (cl (= (= (= e4 (op e3 (op (op e4 e3) (op e4 e3)))) false) (not (= e4 (op e3 (op (op e4 e3) (op e4 e3))))))) :rule equiv_simplify)
(step t890 (cl (not (= (= e4 (op e3 (op (op e4 e3) (op e4 e3)))) false)) (not (= e4 (op e3 (op (op e4 e3) (op e4 e3)))))) :rule equiv1 :premises (t889))
(step t891 (cl (not (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3))) :rule and_pos :args (1))
(step t892 (cl (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (not (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule reordering :premises (t891))
(step t893 (cl (not (= (or (or (or (or (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1)))) (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2)))) (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3)))) (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4)))) (or (and (= (op e3 e4) (op e4 e3)) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))) (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))) (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))))) (not (or (or (or (or (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1)))) (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2)))) (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3)))) (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4))))) (or (and (= (op e3 e4) (op e4 e3)) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))) (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))) (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule equiv_pos2)
(step t894 (cl (= (or (or (or (or (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1)))) (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2)))) (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3)))) (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4)))) (or (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4))) (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3))) (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2))) (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1)))))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1)))) (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2)))) (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3)))) (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4)))) (or (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4))) (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3))) (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2))) (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1)))))))
(step t895 (cl (= (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4))) (and (= (op e4 e4) (op e4 e4)) (= (op e4 e3) (op e3 e4)) (= (op e4 e2) (op e2 e4)) (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))))) :rule hole :args ("ACI_NORM" (= (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4))) (and (= (op e4 e4) (op e4 e4)) (= (op e4 e3) (op e3 e4)) (= (op e4 e2) (op e2 e4)) (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))))))
(step t896 (cl (= (= (op e4 e4) (op e4 e4)) true)) :rule rare_rewrite :args ("eq-refl" (op e4 e4)))
(step t897 (cl (= (= (op e4 e2) (op e2 e4)) (= (op e2 e4) (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) (op e2 e4)))
(step t898 (cl (= (= (op e4 e0) (op e0 e4)) (= (op e0 e4) (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) (op e0 e4)))
(step t899 (cl (= (= (op e4 e1) (op e1 e4)) (= (op e1 e4) (op e4 e1)))) :rule rare_rewrite :args ("eq-symm" (op e4 e1) (op e1 e4)))
(step t900 (cl (= (and (= (op e4 e4) (op e4 e4)) (= (op e4 e3) (op e3 e4)) (= (op e4 e2) (op e2 e4)) (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (and true (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))))) :rule cong :premises (t896 t526 t897 t898 t899))
(step t901 (cl (= (and true (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))))) :rule hole :args ("ACI_NORM" (= (and true (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))))))
(step t902 (cl (= (and (= (op e4 e4) (op e4 e4)) (= (op e4 e3) (op e3 e4)) (= (op e4 e2) (op e2 e4)) (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))))) :rule trans :premises (t900 t901))
(step t903 (cl (= (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))))) :rule trans :premises (t895 t902))
(step t904 (cl (= (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3))) (and (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e3 e3)) (= (op e3 e2) (op e2 e3)) (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))))) :rule hole :args ("ACI_NORM" (= (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3))) (and (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e3 e3)) (= (op e3 e2) (op e2 e3)) (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))))))
(step t905 (cl (= (= (op e3 e4) (op e4 e3)) (= (op e3 e4) (op e4 e3)))) :rule refl)
(step t906 (cl (= (= (op e3 e3) (op e3 e3)) true)) :rule rare_rewrite :args ("eq-refl" (op e3 e3)))
(step t907 (cl (= (= (op e3 e2) (op e2 e3)) (= (op e2 e3) (op e3 e2)))) :rule rare_rewrite :args ("eq-symm" (op e3 e2) (op e2 e3)))
(step t908 (cl (= (= (op e3 e0) (op e0 e3)) (= (op e0 e3) (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) (op e0 e3)))
(step t909 (cl (= (= (op e3 e1) (op e1 e3)) (= (op e1 e3) (op e3 e1)))) :rule rare_rewrite :args ("eq-symm" (op e3 e1) (op e1 e3)))
(step t910 (cl (= (and (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e3 e3)) (= (op e3 e2) (op e2 e3)) (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (and (= (op e3 e4) (op e4 e3)) true (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))))) :rule cong :premises (t905 t906 t907 t908 t909))
(step t911 (cl (= (and (= (op e3 e4) (op e4 e3)) true (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))))) :rule hole :args ("ACI_NORM" (= (and (= (op e3 e4) (op e4 e3)) true (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))))))
(step t912 (cl (= (and (= (op e3 e4) (op e4 e3)) (= (op e3 e3) (op e3 e3)) (= (op e3 e2) (op e2 e3)) (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))))) :rule trans :premises (t910 t911))
(step t913 (cl (= (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))))) :rule trans :premises (t904 t912))
(step t914 (cl (= (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e2 e2) (op e2 e2)) (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))))) :rule hole :args ("ACI_NORM" (= (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e2 e2) (op e2 e2)) (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))))))
(step t915 (cl (= (= (op e2 e4) (op e4 e2)) (= (op e2 e4) (op e4 e2)))) :rule refl)
(step t916 (cl (= (= (op e2 e3) (op e3 e2)) (= (op e2 e3) (op e3 e2)))) :rule refl)
(step t917 (cl (= (= (op e2 e2) (op e2 e2)) true)) :rule rare_rewrite :args ("eq-refl" (op e2 e2)))
(step t918 (cl (= (= (op e2 e0) (op e0 e2)) (= (op e0 e2) (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) (op e0 e2)))
(step t919 (cl (= (= (op e2 e1) (op e1 e2)) (= (op e1 e2) (op e2 e1)))) :rule rare_rewrite :args ("eq-symm" (op e2 e1) (op e1 e2)))
(step t920 (cl (= (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e2 e2) (op e2 e2)) (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) true (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))))) :rule cong :premises (t915 t916 t917 t918 t919))
(step t921 (cl (= (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) true (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))))) :rule hole :args ("ACI_NORM" (= (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) true (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))))))
(step t922 (cl (= (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e2 e2) (op e2 e2)) (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))))) :rule trans :premises (t920 t921))
(step t923 (cl (= (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))))) :rule trans :premises (t914 t922))
(step t924 (cl (= (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))))) :rule hole :args ("ACI_NORM" (= (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))))))
(step t925 (cl (= (= (op e0 e4) (op e4 e0)) (= (op e0 e4) (op e4 e0)))) :rule refl)
(step t926 (cl (= (= (op e0 e3) (op e3 e0)) (= (op e0 e3) (op e3 e0)))) :rule refl)
(step t927 (cl (= (= (op e0 e2) (op e2 e0)) (= (op e0 e2) (op e2 e0)))) :rule refl)
(step t928 (cl (= (= (op e0 e0) (op e0 e0)) true)) :rule rare_rewrite :args ("eq-refl" (op e0 e0)))
(step t929 (cl (= (= (op e0 e1) (op e1 e0)) (= (op e0 e1) (op e1 e0)))) :rule refl)
(step t930 (cl (= (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) true (= (op e0 e1) (op e1 e0))))) :rule cong :premises (t925 t926 t927 t928 t929))
(step t931 (cl (= (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) true (= (op e0 e1) (op e1 e0))) (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e1) (op e1 e0))))) :rule hole :args ("ACI_NORM" (= (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) true (= (op e0 e1) (op e1 e0))) (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e1) (op e1 e0))))))
(step t932 (cl (= (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e1) (op e1 e0))))) :rule trans :premises (t930 t931))
(step t933 (cl (= (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e1) (op e1 e0))))) :rule trans :premises (t924 t932))
(step t934 (cl (= (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1))) (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))))) :rule hole :args ("ACI_NORM" (= (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1))) (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))))))
(step t935 (cl (= (= (op e1 e4) (op e4 e1)) (= (op e1 e4) (op e4 e1)))) :rule refl)
(step t936 (cl (= (= (op e1 e3) (op e3 e1)) (= (op e1 e3) (op e3 e1)))) :rule refl)
(step t937 (cl (= (= (op e1 e2) (op e2 e1)) (= (op e1 e2) (op e2 e1)))) :rule refl)
(step t938 (cl (= (= (op e1 e0) (op e0 e1)) (= (op e0 e1) (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) (op e0 e1)))
(step t939 (cl (= (= (op e1 e1) (op e1 e1)) true)) :rule rare_rewrite :args ("eq-refl" (op e1 e1)))
(step t940 (cl (= (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0)) true))) :rule cong :premises (t935 t936 t937 t938 t939))
(step t941 (cl (= (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0)) true) (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0))))) :rule hole :args ("ACI_NORM" (= (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0)) true) (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0))))))
(step t942 (cl (= (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0))))) :rule trans :premises (t940 t941))
(step t943 (cl (= (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1))) (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0))))) :rule trans :premises (t934 t942))
(step t944 (cl (= (or (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4))) (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3))) (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2))) (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1)))) (or (and (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e1) (op e1 e0))) (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0)))))) :rule cong :premises (t903 t913 t923 t933 t943))
(step t945 (cl (= (or (or (or (or (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1)))) (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2)))) (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3)))) (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4)))) (or (and (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e1) (op e1 e0))) (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0)))))) :rule trans :premises (t894 t944))
(step t946 (cl (= (= (op e2 e4) (op e4 e2)) (= (op (op e3 e4) e4) (op e4 (op e3 e4))))) :rule cong :premises (t58 t42))
(step t947 (cl (= (= (op e0 e4) (op e4 e0)) (= (op (op (op e4 e3) (op e4 e3)) e4) (op e4 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t77 t46))
(step t948 (cl (= (= (op e1 e4) (op e4 e1)) (= (op (op e4 e3) e4) (op e4 (op e4 e3))))) :rule cong :premises (t68 t44))
(step t949 (cl (= (and (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e4) (op e4 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))))) :rule cong :premises (t905 t946 t947 t948))
(step t950 (cl (= (= (op e2 e3) (op e3 e2)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))))) :rule cong :premises (t60 t52))
(step t951 (cl (= (= (op e0 e3) (op e3 e0)) (= (op (op (op e4 e3) (op e4 e3)) e3) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t79 t56))
(step t952 (cl (= (= (op e1 e3) (op e3 e1)) (= (op (op e4 e3) e3) (op e3 (op e4 e3))))) :rule cong :premises (t70 t54))
(step t953 (cl (= (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) e3) (op e3 (op e4 e3)))))) :rule cong :premises (t905 t950 t951 t952))
(step t954 (cl (= (= (op e0 e2) (op e2 e0)) (= (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t81 t66))
(step t955 (cl (= (= (op e1 e2) (op e2 e1)) (= (op (op e4 e3) (op e3 e4)) (op (op e3 e4) (op e4 e3))))) :rule cong :premises (t72 t64))
(step t956 (cl (= (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (and (= (op (op e3 e4) e4) (op e4 (op e3 e4))) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e3 e4)) (op (op e3 e4) (op e4 e3)))))) :rule cong :premises (t946 t950 t954 t955))
(step t957 (cl (= (= (op e0 e1) (op e1 e0)) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) :rule cong :premises (t85 t75))
(step t958 (cl (= (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e1) (op e1 e0))) (and (= (op (op (op e4 e3) (op e4 e3)) e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))))) :rule cong :premises (t947 t951 t954 t957))
(step t959 (cl (= (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0))) (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op (op e4 e3) e3) (op e3 (op e4 e3))) (= (op (op e4 e3) (op e3 e4)) (op (op e3 e4) (op e4 e3))) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))))) :rule cong :premises (t948 t952 t955 t957))
(step t960 (cl (= (or (and (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e1) (op e1 e0))) (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0)))) (or (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e4) (op e4 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) e3) (op e3 (op e4 e3)))) (and (= (op (op e3 e4) e4) (op e4 (op e3 e4))) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e3 e4)) (op (op e3 e4) (op e4 e3)))) (and (= (op (op (op e4 e3) (op e4 e3)) e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op (op e4 e3) e3) (op e3 (op e4 e3))) (= (op (op e4 e3) (op e3 e4)) (op (op e3 e4) (op e4 e3))) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))))) :rule cong :premises (t949 t953 t956 t958 t959))
(step t961 (cl (= (= (op (op e3 e4) e4) (op e4 (op e3 e4))) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)))) :rule rare_rewrite :args ("eq-symm" (op (op e3 e4) e4) (op e4 (op e3 e4))))
(step t962 (cl (= (= (op (op (op e4 e3) (op e4 e3)) e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e4 e3) (op e4 e3)) e4) (op e4 (op (op e4 e3) (op e4 e3)))))
(step t963 (cl (= (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op (op e4 e3) e4) (op e4 (op e4 e3))))) :rule refl)
(step t964 (cl (= (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e4) (op e4 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))) (and (= (op e3 e4) (op e4 e3)) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))))) :rule cong :premises (t905 t961 t962 t963))
(step t965 (cl (= (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) e3) (op e3 (op e3 e4))))) :rule refl)
(step t966 (cl (= (= (op (op (op e4 e3) (op e4 e3)) e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e4 e3) (op e4 e3)) e3) (op e3 (op (op e4 e3) (op e4 e3)))))
(step t967 (cl (= (= (op (op e4 e3) e3) (op e3 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e3) e3) (op e3 (op e4 e3))))
(step t968 (cl (= (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) e3) (op e3 (op e4 e3)))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))))) :rule cong :premises (t905 t965 t966 t967))
(step t969 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))))) :rule rare_rewrite :args ("eq-symm" (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))))
(step t970 (cl (= (= (op (op e4 e3) (op e3 e4)) (op (op e3 e4) (op e4 e3))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e3) (op e3 e4)) (op (op e3 e4) (op e4 e3))))
(step t971 (cl (= (and (= (op (op e3 e4) e4) (op e4 (op e3 e4))) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e3 e4)) (op (op e3 e4) (op e4 e3)))) (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))) :rule cong :premises (t961 t965 t969 t970))
(step t972 (cl (= (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule rare_rewrite :args ("eq-symm" (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))
(step t973 (cl (= (and (= (op (op (op e4 e3) (op e4 e3)) e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule cong :premises (t962 t966 t969 t972))
(step t974 (cl (= (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op (op e4 e3) e3) (op e3 (op e4 e3))) (= (op (op e4 e3) (op e3 e4)) (op (op e3 e4) (op e4 e3))) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule cong :premises (t963 t967 t970 t972))
(step t975 (cl (= (or (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e4) (op e4 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) e3) (op e3 (op e4 e3)))) (and (= (op (op e3 e4) e4) (op e4 (op e3 e4))) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e3 e4)) (op (op e3 e4) (op e4 e3)))) (and (= (op (op (op e4 e3) (op e4 e3)) e4) (op e4 (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) e3) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) (op e3 e4)) (op (op e3 e4) (op (op e4 e3) (op e4 e3)))) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op e4 e3) (op (op e4 e3) (op e4 e3))))) (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op (op e4 e3) e3) (op e3 (op e4 e3))) (= (op (op e4 e3) (op e3 e4)) (op (op e3 e4) (op e4 e3))) (= (op (op (op e4 e3) (op e4 e3)) (op e4 e3)) (op (op e4 e3) (op (op e4 e3) (op e4 e3)))))) (or (and (= (op e3 e4) (op e4 e3)) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))) (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))) (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))))) :rule cong :premises (t964 t968 t971 t973 t974))
(step t976 (cl (= (or (and (= (op e3 e4) (op e4 e3)) (= (op e2 e4) (op e4 e2)) (= (op e0 e4) (op e4 e0)) (= (op e1 e4) (op e4 e1))) (and (= (op e3 e4) (op e4 e3)) (= (op e2 e3) (op e3 e2)) (= (op e0 e3) (op e3 e0)) (= (op e1 e3) (op e3 e1))) (and (= (op e2 e4) (op e4 e2)) (= (op e2 e3) (op e3 e2)) (= (op e0 e2) (op e2 e0)) (= (op e1 e2) (op e2 e1))) (and (= (op e0 e4) (op e4 e0)) (= (op e0 e3) (op e3 e0)) (= (op e0 e2) (op e2 e0)) (= (op e0 e1) (op e1 e0))) (and (= (op e1 e4) (op e4 e1)) (= (op e1 e3) (op e3 e1)) (= (op e1 e2) (op e2 e1)) (= (op e0 e1) (op e1 e0)))) (or (and (= (op e3 e4) (op e4 e3)) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))) (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))) (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))))) :rule trans :premises (t960 t975))
(step t977 (cl (= (or (or (or (or (and (and (and (and (= (op e0 e0) (op e0 e0)) (= (op e0 e1) (op e1 e0))) (= (op e0 e2) (op e2 e0))) (= (op e0 e3) (op e3 e0))) (= (op e0 e4) (op e4 e0))) (and (and (and (and (= (op e1 e0) (op e0 e1)) (= (op e1 e1) (op e1 e1))) (= (op e1 e2) (op e2 e1))) (= (op e1 e3) (op e3 e1))) (= (op e1 e4) (op e4 e1)))) (and (and (and (and (= (op e2 e0) (op e0 e2)) (= (op e2 e1) (op e1 e2))) (= (op e2 e2) (op e2 e2))) (= (op e2 e3) (op e3 e2))) (= (op e2 e4) (op e4 e2)))) (and (and (and (and (= (op e3 e0) (op e0 e3)) (= (op e3 e1) (op e1 e3))) (= (op e3 e2) (op e2 e3))) (= (op e3 e3) (op e3 e3))) (= (op e3 e4) (op e4 e3)))) (and (and (and (and (= (op e4 e0) (op e0 e4)) (= (op e4 e1) (op e1 e4))) (= (op e4 e2) (op e2 e4))) (= (op e4 e3) (op e3 e4))) (= (op e4 e4) (op e4 e4)))) (or (and (= (op e3 e4) (op e4 e3)) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))) (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))) (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))))) :rule trans :premises (t945 t976))
(step t978 (cl (or (and (= (op e3 e4) (op e4 e3)) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))) (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))) (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule resolution :premises (t893 t977 a4))
(step t979 (cl (and (= (op e3 e4) (op e4 e3)) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))) (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))) (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))) (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))) (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule or :premises (t978))
(step t980 (cl (not (and (= (op e3 e4) (op e4 e3)) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op e4 (op e4 e3))))) (= (op e3 e4) (op e4 e3))) :rule and_pos :args (0))
(step t981 (cl (= (op e3 e4) (op e4 e3)) (not (and (= (op e3 e4) (op e4 e3)) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))))) :rule reordering :premises (t980))
(step t982 (cl (not (and (= (op e3 e4) (op e4 e3)) (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op (op e4 e3) e4) (op e4 (op e4 e3)))))) :rule resolution :premises (t981 t245))
(step t983 (cl (not (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)))) (= (op e3 e4) (op e4 e3))) :rule and_pos :args (0))
(step t984 (cl (= (op e3 e4) (op e4 e3)) (not (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))))) :rule reordering :premises (t983))
(step t985 (cl (not (and (= (op e3 e4) (op e4 e3)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))))) :rule resolution :premises (t984 t245))
(step t986 (cl (not (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))))) (= (op e4 (op e3 e4)) (op (op e3 e4) e4))) :rule and_pos :args (0))
(step t987 (cl (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (not (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))) :rule reordering :premises (t986))
(step t988 (cl (= (= (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) false) (not (= (op e4 (op e3 e4)) (op (op e3 e4) e4))))) :rule equiv_simplify)
(step t989 (cl (not (= (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) false)) (not (= (op e4 (op e3 e4)) (op (op e3 e4) e4)))) :rule equiv1 :premises (t988))
(step t990 (cl (= (op (op (op e3 e4) e3) (op e3 e4)) (op e4 (op e3 e4)))) :rule cong :premises (t328 t48))
(step t991 (cl (= e3 (op e4 (op e3 e4)))) :rule trans :premises (t839 t990))
(step t992 (cl (= (op (op e4 e3) e4) (op e4 (op e3 e4)))) :rule trans :premises (t305 t991))
(step t993 (cl (= (op e4 (op e3 e4)) (op (op e4 e3) e4))) :rule symm :premises (t992))
(step t994 (cl (= (op (op e3 e4) e4) (op (op e3 e4) e4))) :rule refl)
(step t995 (cl (= (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e4 e3) e4) (op (op e3 e4) e4)))) :rule cong :premises (t993 t994))
(step t996 (cl (= (= (= (op (op e4 e3) e4) (op (op e3 e4) e4)) false) (not (= (op (op e4 e3) e4) (op (op e3 e4) e4))))) :rule equiv_simplify)
(step t997 (cl (= (= (op (op e4 e3) e4) (op (op e3 e4) e4)) false) (not (not (= (op (op e4 e3) e4) (op (op e3 e4) e4))))) :rule equiv2 :premises (t996))
(step t998 (cl (not (not (not (= (op (op e4 e3) e4) (op (op e3 e4) e4))))) (= (op (op e4 e3) e4) (op (op e3 e4) e4))) :rule not_not)
(step t999 (cl (= (= (op (op e4 e3) e4) (op (op e3 e4) e4)) false) (= (op (op e4 e3) e4) (op (op e3 e4) e4))) :rule resolution :premises (t997 t998))
(step t1000 (cl (not (= (not (= (op e1 e4) (op e2 e4))) (not (= (op (op e4 e3) e4) (op (op e3 e4) e4))))) (not (not (= (op e1 e4) (op e2 e4)))) (not (= (op (op e4 e3) e4) (op (op e3 e4) e4)))) :rule equiv_pos2)
(step t1001 (cl (= (= (op e1 e4) (op e2 e4)) (= (op (op e4 e3) e4) (op (op e3 e4) e4)))) :rule cong :premises (t68 t58))
(step t1002 (cl (= (not (= (op e1 e4) (op e2 e4))) (not (= (op (op e4 e3) e4) (op (op e3 e4) e4))))) :rule cong :premises (t1001))
(step t1003 (cl (not (= (op e1 e4) (op e2 e4)))) :rule and :premises (t160) :args (1))
(step t1004 (cl (not (= (op (op e4 e3) e4) (op (op e3 e4) e4)))) :rule resolution :premises (t1000 t1002 t1003))
(step t1005 (cl (= (= (op (op e4 e3) e4) (op (op e3 e4) e4)) false)) :rule resolution :premises (t999 t1004))
(step t1006 (cl (= (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) false)) :rule trans :premises (t995 t1005))
(step t1007 (cl (not (= (op e4 (op e3 e4)) (op (op e3 e4) e4)))) :rule resolution :premises (t989 t1006))
(step t1008 (cl (not (and (= (op e4 (op e3 e4)) (op (op e3 e4) e4)) (= (op (op e3 e4) e3) (op e3 (op e3 e4))) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4)))))) :rule resolution :premises (t987 t1007))
(step t1009 (cl (not (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3))) :rule and_pos :args (1))
(step t1010 (cl (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (not (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule reordering :premises (t1009))
(step t1011 (cl (= (= (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) false) (not (= (op e3 (op e4 e3)) (op (op e4 e3) e3))))) :rule equiv_simplify)
(step t1012 (cl (not (= (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) false)) (not (= (op e3 (op e4 e3)) (op (op e4 e3) e3)))) :rule equiv1 :premises (t1011))
(step t1013 (cl (= (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) e3) (op (op e4 e3) e3)))) :rule cong :premises (t623 t307))
(step t1014 (cl (= (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) false)) :rule trans :premises (t1013 t345))
(step t1015 (cl (not (= (op e3 (op e4 e3)) (op (op e4 e3) e3)))) :rule resolution :premises (t1012 t1014))
(step t1016 (cl (not (and (= (op (op e4 e3) e4) (op e4 (op e4 e3))) (= (op e3 (op e4 e3)) (op (op e4 e3) e3)) (= (op (op e3 e4) (op e4 e3)) (op (op e4 e3) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3)))))) :rule resolution :premises (t1010 t1015))
(step t1017 (cl (and (= (op e4 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e4)) (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3)) (= (op (op e3 e4) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e3 e4))) (= (op (op e4 e3) (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) (op e4 e3))))) :rule resolution :premises (t979 t982 t985 t1008 t1016))
(step t1018 (cl (= (op e3 (op (op e4 e3) (op e4 e3))) (op (op (op e4 e3) (op e4 e3)) e3))) :rule resolution :premises (t892 t1017))
(step t1019 (cl (= (= e4 (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e3 e4) e3) (op (op (op e4 e3) (op e4 e3)) e3)))) :rule cong :premises (t329 t1018))
(step t1020 (cl (= (= e4 (op e3 (op (op e4 e3) (op e4 e3)))) false)) :rule trans :premises (t1019 t434))
(step t1021 (cl (not (= e4 (op e3 (op (op e4 e3) (op e4 e3)))))) :rule resolution :premises (t890 t1020))
(step t1022 (cl (= e3 (op e3 (op (op e4 e3) (op e4 e3))))) :rule resolution :premises (t873 t602 t713 t888 t1021))
(step t1023 (cl (not (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (= (op e3 e4) (op (op e4 e3) (op e4 e3))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3)))))) (not (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0))) (or (= (op e3 e4) (op (op e4 e3) (op e4 e3))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3))))) :rule equiv_pos2)
(step t1024 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (= (op e3 e4) e0) (= (op e3 e3) e0) (= (op e3 e2) e0) (= (op e3 e0) e0) (= (op e3 e1) e0)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (= (op e3 e4) e0) (= (op e3 e3) e0) (= (op e3 e2) e0) (= (op e3 e0) e0) (= (op e3 e1) e0)))))
(step t1025 (cl (= (= (op e3 e4) e0) (= e0 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e0))
(step t1026 (cl (= (= (op e3 e1) e0) (= e0 (op e3 e1)))) :rule rare_rewrite :args ("eq-symm" (op e3 e1) e0))
(step t1027 (cl (= (or (= (op e3 e4) e0) (= (op e3 e3) e0) (= (op e3 e2) e0) (= (op e3 e0) e0) (= (op e3 e1) e0)) (or (= e0 (op e3 e4)) (= e0 (op e3 e3)) (= e0 (op e3 e2)) (= e0 (op e3 e0)) (= e0 (op e3 e1))))) :rule cong :premises (t1025 t8 t756 t859 t1026))
(step t1028 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (= e0 (op e3 e4)) (= e0 (op e3 e3)) (= e0 (op e3 e2)) (= e0 (op e3 e0)) (= e0 (op e3 e1))))) :rule trans :premises (t1024 t1027))
(step t1029 (cl (= (= e0 (op e3 e4)) (= (op (op e4 e3) (op e4 e3)) (op e3 e4)))) :rule cong :premises (t34 t48))
(step t1030 (cl (= (= e0 (op e3 e1)) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3))))) :rule cong :premises (t34 t54))
(step t1031 (cl (= (or (= e0 (op e3 e4)) (= e0 (op e3 e3)) (= e0 (op e3 e2)) (= e0 (op e3 e0)) (= e0 (op e3 e1))) (or (= (op (op e4 e3) (op e4 e3)) (op e3 e4)) (= (op (op e4 e3) (op e4 e3)) (op e3 e3)) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3)))))) :rule cong :premises (t1029 t51 t762 t863 t1030))
(step t1032 (cl (= (= (op (op e4 e3) (op e4 e3)) (op e3 e4)) (= (op e3 e4) (op (op e4 e3) (op e4 e3))))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e3) (op e4 e3)) (op e3 e4)))
(step t1033 (cl (= (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))))) :rule refl)
(step t1034 (cl (= (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3))))) :rule refl)
(step t1035 (cl (= (or (= (op (op e4 e3) (op e4 e3)) (op e3 e4)) (= (op (op e4 e3) (op e4 e3)) (op e3 e3)) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e3 e4))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3)))) (or (= (op e3 e4) (op (op e4 e3) (op e4 e3))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3)))))) :rule cong :premises (t1032 t95 t767 t1033 t1034))
(step t1036 (cl (= (or (= e0 (op e3 e4)) (= e0 (op e3 e3)) (= e0 (op e3 e2)) (= e0 (op e3 e0)) (= e0 (op e3 e1))) (or (= (op e3 e4) (op (op e4 e3) (op e4 e3))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3)))))) :rule trans :premises (t1031 t1035))
(step t1037 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (= (op e3 e4) (op (op e4 e3) (op e4 e3))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3)))))) :rule trans :premises (t1028 t1036))
(step t1038 (cl (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0)))) :rule and :premises (t684) :args (0))
(step t1039 (cl (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0))) :rule and :premises (t1038) :args (0))
(step t1040 (cl (or (= (op e3 e4) (op (op e4 e3) (op e4 e3))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3))))) :rule resolution :premises (t1023 t1037 t1039))
(step t1041 (cl (= (op e3 e4) (op (op e4 e3) (op e4 e3))) (= (op e3 e3) (op (op e4 e3) (op e4 e3))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3)))) :rule or :premises (t1040))
(step t1042 (cl (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3))) (= (op e3 e4) (op (op e4 e3) (op e4 e3))) (= (op (op e4 e3) (op e4 e3)) (op e3 (op (op e4 e3) (op e4 e3)))) (= (op e3 (op e3 e4)) (op (op e4 e3) (op e4 e3))) (= (op e3 e3) (op (op e4 e3) (op e4 e3)))) :rule reordering :premises (t1041))
(step t1043 (cl (not (= (not (= (op e1 e1) (op e3 e1))) (not (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3)))))) (not (not (= (op e1 e1) (op e3 e1)))) (not (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3))))) :rule equiv_pos2)
(step t1044 (cl (= (= (op e1 e1) (op e3 e1)) (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3))))) :rule cong :premises (t33 t54))
(step t1045 (cl (= (not (= (op e1 e1) (op e3 e1))) (not (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3)))))) :rule cong :premises (t1044))
(step t1046 (cl (not (= (op e1 e1) (op e3 e1)))) :rule and :premises (t729) :args (1))
(step t1047 (cl (not (= (op (op e4 e3) (op e4 e3)) (op e3 (op e4 e3))))) :rule resolution :premises (t1043 t1045 t1046))
(step t1048 (cl (= (op e3 e3) (op (op e4 e3) (op e4 e3)))) :rule resolution :premises (t1042 t1047 t198 t888 t828))
(step t1049 (cl (= (op (op (op e4 e3) (op e4 e3)) e4) e4)) :rule symm :premises (t504))
(step t1050 (cl (= (op (op (op (op e4 e3) (op e4 e3)) e4) (op (op e4 e3) (op e4 e3))) (op e4 (op (op e4 e3) (op e4 e3))))) :rule cong :premises (t1049 t624))
(step t1051 (cl (= e4 (op e4 (op (op e4 e3) (op e4 e3))))) :rule trans :premises (t633 t1050))
(step t1052 (cl (not (= (= (op (op e1 e2) e1) e2) (= (op e3 e4) (op (op (op e4 e3) (op e3 e4)) (op e4 e3))))) (not (= (op (op e1 e2) e1) e2)) (= (op e3 e4) (op (op (op e4 e3) (op e3 e4)) (op e4 e3)))) :rule equiv_pos2)
(step t1053 (cl (= (= (op (op e1 e2) e1) e2) (= e2 (op (op e1 e2) e1)))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e2) e1) e2))
(step t1054 (cl (= (op (op e1 e2) e1) (op (op (op e4 e3) (op e3 e4)) (op e4 e3)))) :rule cong :premises (t72 t32))
(step t1055 (cl (= (= e2 (op (op e1 e2) e1)) (= (op e3 e4) (op (op (op e4 e3) (op e3 e4)) (op e4 e3))))) :rule cong :premises (t41 t1054))
(step t1056 (cl (= (= (op (op e1 e2) e1) e2) (= (op e3 e4) (op (op (op e4 e3) (op e3 e4)) (op e4 e3))))) :rule trans :premises (t1053 t1055))
(step t1057 (cl (and (and (= (op (op e1 e0) e1) e0) (= (op (op e1 e1) e1) e1)) (= (op (op e1 e2) e1) e2))) :rule and :premises (t661) :args (0))
(step t1058 (cl (= (op (op e1 e2) e1) e2)) :rule and :premises (t1057) :args (1))
(step t1059 (cl (= (op e3 e4) (op (op (op e4 e3) (op e3 e4)) (op e4 e3)))) :rule resolution :premises (t1052 t1056 t1058))
(step t1060 (cl (= (op (op e4 e3) (op e3 e4)) (op (op (op e3 e4) e4) (op e3 e4)))) :rule cong :premises (t568 t48))
(step t1061 (cl (= (op (op (op e3 e4) e4) (op e3 e4)) e4)) :rule symm :premises (t513))
(step t1062 (cl (= (op (op e4 e3) (op e3 e4)) e4)) :rule trans :premises (t1060 t1061))
(step t1063 (cl (= (op (op (op e4 e3) (op e3 e4)) (op e4 e3)) (op e4 (op e4 e3)))) :rule cong :premises (t1062 t37))
(step t1064 (cl (= (op e3 e4) (op e4 (op e4 e3)))) :rule trans :premises (t1059 t1063))
(step t1065 (cl (= (op e4 e4) (op (op e4 (op (op e4 e3) (op e4 e3))) e4))) :rule cong :premises (t1051 t40))
(step t1066 (cl (not (= (= (op (op e4 e0) e4) e0) (= (op (op e4 e3) (op e4 e3)) (op (op e4 (op (op e4 e3) (op e4 e3))) e4)))) (not (= (op (op e4 e0) e4) e0)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 (op (op e4 e3) (op e4 e3))) e4))) :rule equiv_pos2)
(step t1067 (cl (= (= (op (op e4 e0) e4) e0) (= e0 (op (op e4 e0) e4)))) :rule rare_rewrite :args ("eq-symm" (op (op e4 e0) e4) e0))
(step t1068 (cl (= (op (op e4 e0) e4) (op (op e4 (op (op e4 e3) (op e4 e3))) e4))) :rule cong :premises (t46 t40))
(step t1069 (cl (= (= e0 (op (op e4 e0) e4)) (= (op (op e4 e3) (op e4 e3)) (op (op e4 (op (op e4 e3) (op e4 e3))) e4)))) :rule cong :premises (t34 t1068))
(step t1070 (cl (= (= (op (op e4 e0) e4) e0) (= (op (op e4 e3) (op e4 e3)) (op (op e4 (op (op e4 e3) (op e4 e3))) e4)))) :rule trans :premises (t1067 t1069))
(step t1071 (cl (and (and (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1)) (= (op (op e4 e2) e4) e2))) :rule and :premises (t304) :args (0))
(step t1072 (cl (and (= (op (op e4 e0) e4) e0) (= (op (op e4 e1) e4) e1))) :rule and :premises (t1071) :args (0))
(step t1073 (cl (= (op (op e4 e0) e4) e0)) :rule and :premises (t1072) :args (0))
(step t1074 (cl (= (op (op e4 e3) (op e4 e3)) (op (op e4 (op (op e4 e3) (op e4 e3))) e4))) :rule resolution :premises (t1066 t1070 t1073))
(step t1075 (cl (= (op (op e4 (op (op e4 e3) (op e4 e3))) e4) (op (op e4 e3) (op e4 e3)))) :rule symm :premises (t1074))
(step t1076 (cl (= (op e4 e4) (op (op e4 e3) (op e4 e3)))) :rule trans :premises (t1065 t1075))
(step t1077 (cl) :rule resolution :premises (t122 t369 t437 t504 t571 t348 t655 t752 t855 t568 t1022 t621 t738 t1048 t1051 t1064 t991 t1076 t176 t306 t329 t231 t230))
