unsat
(assume a0 (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e0) e1)) (= (op e4 e0) e2)) (= (op e4 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e4 e1) e0) (= (op e4 e1) e1)) (= (op e4 e1) e2)) (= (op e4 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e4 e2) e0) (= (op e4 e2) e1)) (= (op e4 e2) e2)) (= (op e4 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4))) (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)))))
(assume a1 (and (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4))))) (and (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) (and (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))))))
(assume a2 (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e0)) (= (op e2 e2) e0)) (= (op e3 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e1) e1)) (= (op e2 e2) e1)) (= (op e3 e3) e1)) (= (op e4 e4) e1))) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e1) e2)) (= (op e2 e2) e2)) (= (op e3 e3) e2)) (= (op e4 e4) e2))) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e1) e3)) (= (op e2 e2) e3)) (= (op e3 e3) e3)) (= (op e4 e4) e3))) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e1) e4)) (= (op e2 e2) e4)) (= (op e3 e3) e4)) (= (op e4 e4) e4))))
(assume a3 (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e1)) (= (op e2 e0) e2)) (= (op e3 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e1)) (= (op e2 e1) e2)) (= (op e3 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e1)) (= (op e2 e2) e2)) (= (op e3 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e1)) (= (op e2 e3) e2)) (= (op e3 e3) e3)) (= (op e4 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e1)) (= (op e2 e4) e2)) (= (op e3 e4) e3)) (= (op e4 e4) e4))))
(assume a4 (or (or (or (or (or (or (or (or (not (= (op e0 e0) (op e0 e0))) (not (= (op e1 e0) (op e0 e1)))) (not (= (op e2 e0) (op e0 e2)))) (not (= (op e3 e0) (op e0 e3)))) (not (= (op e4 e0) (op e0 e4)))) (or (or (or (or (not (= (op e0 e1) (op e1 e0))) (not (= (op e1 e1) (op e1 e1)))) (not (= (op e2 e1) (op e1 e2)))) (not (= (op e3 e1) (op e1 e3)))) (not (= (op e4 e1) (op e1 e4))))) (or (or (or (or (not (= (op e0 e2) (op e2 e0))) (not (= (op e1 e2) (op e2 e1)))) (not (= (op e2 e2) (op e2 e2)))) (not (= (op e3 e2) (op e2 e3)))) (not (= (op e4 e2) (op e2 e4))))) (or (or (or (or (not (= (op e0 e3) (op e3 e0))) (not (= (op e1 e3) (op e3 e1)))) (not (= (op e2 e3) (op e3 e2)))) (not (= (op e3 e3) (op e3 e3)))) (not (= (op e4 e3) (op e3 e4))))) (or (or (or (or (not (= (op e0 e4) (op e4 e0))) (not (= (op e1 e4) (op e4 e1)))) (not (= (op e2 e4) (op e4 e2)))) (not (= (op e3 e4) (op e4 e3)))) (not (= (op e4 e4) (op e4 e4))))))
(assume a5 (or (or (or (or (= (op e0 e0) e0) (= (op e1 e1) e1)) (= (op e2 e2) e2)) (= (op e3 e3) e3)) (= (op e4 e4) e4)))
(assume a6 (and (and (and (and (and (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e0 (op e0 e1)) e1)) (= (op e0 (op e0 e2)) e2)) (= (op e0 (op e0 e3)) e3)) (= (op e0 (op e0 e4)) e4)) (and (and (and (and (= (op e1 (op e1 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e1 (op e1 e2)) e2)) (= (op e1 (op e1 e3)) e3)) (= (op e1 (op e1 e4)) e4))) (and (and (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e2 (op e2 e3)) e3)) (= (op e2 (op e2 e4)) e4))) (and (and (and (and (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2)) (= (op e3 (op e3 e3)) e3)) (= (op e3 (op e3 e4)) e4))) (and (and (and (and (= (op e4 (op e4 e0)) e0) (= (op e4 (op e4 e1)) e1)) (= (op e4 (op e4 e2)) e2)) (= (op e4 (op e4 e3)) e3)) (= (op e4 (op e4 e4)) e4))))
(assume a7 (and (and (and (and (= (op e0 e0) e0) (= (op e1 e1) e1)) (= (op e2 e2) e2)) (= (op e3 e3) e3)) (= (op e4 e4) e4)))
(assume a8 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4)))))))
(assume a9 (and (and (and (and (and (and (and (and (and (not (= e0 e1)) (not (= e0 e2))) (not (= e0 e3))) (not (= e0 e4))) (not (= e1 e2))) (not (= e1 e3))) (not (= e1 e4))) (not (= e2 e3))) (not (= e2 e4))) (not (= e3 e4))))
(assume a10 (and (and (= e0 (op e2 e1)) (= e2 (op e1 e3))) (= e4 (op e2 e3))))
(assume a11 (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e3)) (= (op e0 e2) e4)) (= (op e0 e3) e1)) (= (op e0 e4) e2)) (= (op e1 e0) e4)) (= (op e1 e1) e1)) (= (op e1 e2) e3)) (= (op e1 e3) e2)) (= (op e1 e4) e0)) (= (op e2 e0) e1)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e4)) (= (op e2 e4) e3)) (= (op e3 e0) e2)) (= (op e3 e1) e4)) (= (op e3 e2) e0)) (= (op e3 e3) e3)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e2)) (= (op e4 e2) e1)) (= (op e4 e3) e0)) (= (op e4 e4) e4))))
(step t0 (cl (not (= (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (or (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op e1 (op (op e1 e3) e3)))))) (not (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1))) (or (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op e1 (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t1 (cl (= (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e3 e4) e1) (= (op e2 e4) e1) (= (op e0 e4) e1) (= (op e1 e4) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (or (= (op e4 e4) e1) (= (op e3 e4) e1) (= (op e2 e4) e1) (= (op e0 e4) e1) (= (op e1 e4) e1)))))
(step t2 (cl (= (= (op e4 e4) e1) (= e1 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e1))
(step t3 (cl (= (= (op e3 e4) e1) (= e1 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e1))
(step t4 (cl (= (= (op e2 e4) e1) (= e1 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e1))
(step t5 (cl (= (= (op e0 e4) e1) (= e1 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e1))
(step t6 (cl (= (= (op e1 e4) e1) (= e1 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e1))
(step t7 (cl (= (or (= (op e4 e4) e1) (= (op e3 e4) e1) (= (op e2 e4) e1) (= (op e0 e4) e1) (= (op e1 e4) e1)) (or (= e1 (op e4 e4)) (= e1 (op e3 e4)) (= e1 (op e2 e4)) (= e1 (op e0 e4)) (= e1 (op e1 e4))))) :rule cong :premises (t2 t3 t4 t5 t6))
(step t8 (cl (= (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (or (= e1 (op e4 e4)) (= e1 (op e3 e4)) (= e1 (op e2 e4)) (= e1 (op e0 e4)) (= e1 (op e1 e4))))) :rule trans :premises (t1 t7))
(step t9 (cl (= e1 e1)) :rule refl)
(step t10 (cl (not (= (= e4 (op e2 e3)) (= e4 (op (op e1 e3) e3)))) (not (= e4 (op e2 e3))) (= e4 (op (op e1 e3) e3))) :rule equiv_pos2)
(step t11 (cl (= e4 e4)) :rule refl)
(step t12 (cl (and (= e0 (op e2 e1)) (= e2 (op e1 e3)))) :rule and :premises (a10) :args (0))
(step t13 (cl (= e2 (op e1 e3))) :rule and :premises (t12) :args (1))
(step t14 (cl (= e3 e3)) :rule refl)
(step t15 (cl (= (op e2 e3) (op (op e1 e3) e3))) :rule cong :premises (t13 t14))
(step t16 (cl (= (= e4 (op e2 e3)) (= e4 (op (op e1 e3) e3)))) :rule cong :premises (t11 t15))
(step t17 (cl (= e4 (op e2 e3))) :rule and :premises (a10) :args (1))
(step t18 (cl (= e4 (op (op e1 e3) e3))) :rule resolution :premises (t10 t16 t17))
(step t19 (cl (= (op e4 e4) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule cong :premises (t18 t18))
(step t20 (cl (= (= e1 (op e4 e4)) (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule cong :premises (t9 t19))
(step t21 (cl (= (op e3 e4) (op e3 (op (op e1 e3) e3)))) :rule cong :premises (t14 t18))
(step t22 (cl (= (= e1 (op e3 e4)) (= e1 (op e3 (op (op e1 e3) e3))))) :rule cong :premises (t9 t21))
(step t23 (cl (= (op e2 e4) (op (op e1 e3) (op (op e1 e3) e3)))) :rule cong :premises (t13 t18))
(step t24 (cl (= (= e1 (op e2 e4)) (= e1 (op (op e1 e3) (op (op e1 e3) e3))))) :rule cong :premises (t9 t23))
(step t25 (cl (= e0 (op e2 e1))) :rule and :premises (t12) :args (0))
(step t26 (cl (= (op e2 e1) (op (op e1 e3) e1))) :rule cong :premises (t13 t9))
(step t27 (cl (= e0 (op (op e1 e3) e1))) :rule trans :premises (t25 t26))
(step t28 (cl (= (op e0 e4) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) :rule cong :premises (t27 t18))
(step t29 (cl (= (= e1 (op e0 e4)) (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule cong :premises (t9 t28))
(step t30 (cl (= (op e1 e4) (op e1 (op (op e1 e3) e3)))) :rule cong :premises (t9 t18))
(step t31 (cl (= (= e1 (op e1 e4)) (= e1 (op e1 (op (op e1 e3) e3))))) :rule cong :premises (t9 t30))
(step t32 (cl (= (or (= e1 (op e4 e4)) (= e1 (op e3 e4)) (= e1 (op e2 e4)) (= e1 (op e0 e4)) (= e1 (op e1 e4))) (or (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op e1 (op (op e1 e3) e3)))))) :rule cong :premises (t20 t22 t24 t29 t31))
(step t33 (cl (= (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)) (or (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op e1 (op (op e1 e3) e3)))))) :rule trans :premises (t8 t32))
(step t34 (cl (and (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) (and (or (or (or (or (= (op e4 e0) e4) (= (op e4 e1) e4)) (= (op e4 e2) e4)) (= (op e4 e3) e4)) (= (op e4 e4) e4)) (or (or (or (or (= (op e0 e4) e4) (= (op e1 e4) e4)) (= (op e2 e4) e4)) (= (op e3 e4) e4)) (= (op e4 e4) e4))))) :rule and :premises (a1) :args (1))
(step t35 (cl (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3))))) :rule and :premises (t34) :args (0))
(step t36 (cl (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2))))) :rule and :premises (t35) :args (0))
(step t37 (cl (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1))))) :rule and :premises (t36) :args (0))
(step t38 (cl (and (or (or (or (or (= (op e4 e0) e1) (= (op e4 e1) e1)) (= (op e4 e2) e1)) (= (op e4 e3) e1)) (= (op e4 e4) e1)) (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1)))) :rule and :premises (t37) :args (1))
(step t39 (cl (or (or (or (or (= (op e0 e4) e1) (= (op e1 e4) e1)) (= (op e2 e4) e1)) (= (op e3 e4) e1)) (= (op e4 e4) e1))) :rule and :premises (t38) :args (1))
(step t40 (cl (or (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op e1 (op (op e1 e3) e3))))) :rule resolution :premises (t0 t33 t39))
(step t41 (cl (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op e1 (op (op e1 e3) e3)))) :rule or :premises (t40))
(step t42 (cl (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op e1 (op (op e1 e3) e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule reordering :premises (t41))
(step t43 (cl (not (= (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))) (not (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) (or (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule equiv_pos2)
(step t44 (cl (= (= (= (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) true) (= (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t45 (cl (not (= (= (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) true)) (= (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule equiv1 :premises (t44))
(step t46 (cl (= (= (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))))) :rule rare_rewrite :args ("eq-symm" (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))
(step t47 (cl (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule refl)
(step t48 (cl (= (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule rare_rewrite :args ("bool-double-not-elim" (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))
(step t49 (cl (= (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) :rule cong :premises (t47 t48))
(step t50 (cl (= (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) true)) :rule rare_rewrite :args ("eq-refl" (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))
(step t51 (cl (= (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) true)) :rule trans :premises (t49 t50))
(step t52 (cl (= (= (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) true)) :rule trans :premises (t46 t51))
(step t53 (cl (= (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t45 t52))
(step t54 (cl (= (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))))) :rule refl)
(step t55 (cl (= (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))))) :rule refl)
(step t56 (cl (= (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))))) :rule refl)
(step t57 (cl (= (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule refl)
(step t58 (cl (= (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule refl)
(step t59 (cl (= (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))) :rule cong :premises (t53 t54 t55 t56 t57 t58))
(step t60 (cl (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule and_neg)
(step t61 (cl (=> (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule implies_neg1)
(anchor :step t62)
(assume t62.a0 (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))
(assume t62.a1 (= e1 (op (op e1 e3) (op (op e1 e3) e1))))
(assume t62.a2 (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))
(assume t62.a3 (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))
(assume t62.a4 (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))
(step t62.t0 (cl (= (= (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t62.t1 (cl (not (= (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false)) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule equiv1 :premises (t62.t0))
(step t62.t2 (cl (not (= (= (op e2 (op e2 e1)) e1) (= e1 (op (op e1 e3) (op (op e1 e3) e1))))) (not (= (op e2 (op e2 e1)) e1)) (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) :rule equiv_pos2)
(step t62.t3 (cl (= (= (op e2 (op e2 e1)) e1) (= e1 (op e2 (op e2 e1))))) :rule rare_rewrite :args ("eq-symm" (op e2 (op e2 e1)) e1))
(step t62.t4 (cl (= (op e2 (op e2 e1)) (op (op e1 e3) (op (op e1 e3) e1)))) :rule cong :premises (t13 t26))
(step t62.t5 (cl (= (= e1 (op e2 (op e2 e1))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))))) :rule cong :premises (t9 t62.t4))
(step t62.t6 (cl (= (= (op e2 (op e2 e1)) e1) (= e1 (op (op e1 e3) (op (op e1 e3) e1))))) :rule trans :premises (t62.t3 t62.t5))
(step t62.t7 (cl (and (and (and (and (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e0 (op e0 e1)) e1)) (= (op e0 (op e0 e2)) e2)) (= (op e0 (op e0 e3)) e3)) (= (op e0 (op e0 e4)) e4)) (and (and (and (and (= (op e1 (op e1 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e1 (op e1 e2)) e2)) (= (op e1 (op e1 e3)) e3)) (= (op e1 (op e1 e4)) e4))) (and (and (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e2 (op e2 e3)) e3)) (= (op e2 (op e2 e4)) e4))) (and (and (and (and (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2)) (= (op e3 (op e3 e3)) e3)) (= (op e3 (op e3 e4)) e4)))) :rule and :premises (a6) :args (0))
(step t62.t8 (cl (and (and (and (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e0 (op e0 e1)) e1)) (= (op e0 (op e0 e2)) e2)) (= (op e0 (op e0 e3)) e3)) (= (op e0 (op e0 e4)) e4)) (and (and (and (and (= (op e1 (op e1 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e1 (op e1 e2)) e2)) (= (op e1 (op e1 e3)) e3)) (= (op e1 (op e1 e4)) e4))) (and (and (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e2 (op e2 e3)) e3)) (= (op e2 (op e2 e4)) e4)))) :rule and :premises (t62.t7) :args (0))
(step t62.t9 (cl (and (and (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e2 (op e2 e3)) e3)) (= (op e2 (op e2 e4)) e4))) :rule and :premises (t62.t8) :args (1))
(step t62.t10 (cl (and (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e2 (op e2 e3)) e3))) :rule and :premises (t62.t9) :args (0))
(step t62.t11 (cl (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2))) :rule and :premises (t62.t10) :args (0))
(step t62.t12 (cl (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1))) :rule and :premises (t62.t11) :args (0))
(step t62.t13 (cl (= (op e2 (op e2 e1)) e1)) :rule and :premises (t62.t12) :args (1))
(step t62.t14 (cl (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) :rule resolution :premises (t62.t2 t62.t6 t62.t13))
(step t62.t15 (cl (not (= (= (op e3 (op e3 e4)) e4) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) (not (= (op e3 (op e3 e4)) e4)) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t62.t16 (cl (= (= (op e3 (op e3 e4)) e4) (= e4 (op e3 (op e3 e4))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op e3 e4)) e4))
(step t62.t17 (cl (= (op e3 (op e3 e4)) (op e3 (op e3 (op (op e1 e3) e3))))) :rule cong :premises (t14 t21))
(step t62.t18 (cl (= (= e4 (op e3 (op e3 e4))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) :rule cong :premises (t18 t62.t17))
(step t62.t19 (cl (= (= (op e3 (op e3 e4)) e4) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) :rule trans :premises (t62.t16 t62.t18))
(step t62.t20 (cl (and (and (and (and (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2)) (= (op e3 (op e3 e3)) e3)) (= (op e3 (op e3 e4)) e4))) :rule and :premises (t62.t7) :args (1))
(step t62.t21 (cl (= (op e3 (op e3 e4)) e4)) :rule and :premises (t62.t20) :args (1))
(step t62.t22 (cl (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t62.t15 t62.t19 t62.t21))
(step t62.t23 (cl (= (op e3 (op (op e1 e3) e3)) (op (op e1 e3) e1))) :rule symm :premises (t62.a2))
(step t62.t24 (cl (= (op e3 (op e3 (op (op e1 e3) e3))) (op e3 (op (op e1 e3) e1)))) :rule cong :premises (t14 t62.t23))
(step t62.t25 (cl (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))) :rule trans :premises (t62.t22 t62.t24))
(step t62.t26 (cl (= (op e3 (op (op e1 e3) e1)) (op (op e1 e3) e3))) :rule symm :premises (t62.t25))
(step t62.t27 (cl (not (= (= (op e4 e4) e4) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= (op e4 e4) e4)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule equiv_pos2)
(step t62.t28 (cl (= (= (op e4 e4) e4) (= e4 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e4))
(step t62.t29 (cl (= (= e4 (op e4 e4)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule cong :premises (t18 t19))
(step t62.t30 (cl (= (= (op e4 e4) e4) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule trans :premises (t62.t28 t62.t29))
(step t62.t31 (cl (= (op e4 e4) e4)) :rule and :premises (a7) :args (1))
(step t62.t32 (cl (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule resolution :premises (t62.t27 t62.t30 t62.t31))
(step t62.t33 (cl (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule trans :premises (t62.t26 t62.t32))
(step t62.t34 (cl (= (op (op (op e1 e3) e3) (op (op e1 e3) e3)) (op e3 (op (op e1 e3) e1)))) :rule symm :premises (t62.t33))
(step t62.t35 (cl (= (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule cong :premises (t62.t14 t62.t34))
(step t62.t36 (cl (= (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false) (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t62.t37 (cl (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false) (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) :rule equiv2 :premises (t62.t36))
(step t62.t38 (cl (not (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) :rule not_not)
(step t62.t39 (cl (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) :rule resolution :premises (t62.t37 t62.t38))
(step t62.t40 (cl (not (= (not (= (op e2 e0) (op e3 e0))) (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) (not (not (= (op e2 e0) (op e3 e0)))) (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule equiv_pos2)
(step t62.t41 (cl (= (op e2 e0) (op (op e1 e3) (op (op e1 e3) e1)))) :rule cong :premises (t13 t27))
(step t62.t42 (cl (= (op e3 e0) (op e3 (op (op e1 e3) e1)))) :rule cong :premises (t14 t27))
(step t62.t43 (cl (= (= (op e2 e0) (op e3 e0)) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule cong :premises (t62.t41 t62.t42))
(step t62.t44 (cl (= (not (= (op e2 e0) (op e3 e0))) (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) :rule cong :premises (t62.t43))
(step t62.t45 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4)))))) :rule and :premises (a8) :args (0))
(step t62.t46 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3)))))) :rule and :premises (t62.t45) :args (0))
(step t62.t47 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2)))))) :rule and :premises (t62.t46) :args (0))
(step t62.t48 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1)))))) :rule and :premises (t62.t47) :args (0))
(step t62.t49 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0))))) :rule and :premises (t62.t48) :args (0))
(step t62.t50 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0))))) :rule and :premises (t62.t49) :args (0))
(step t62.t51 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0))))) :rule and :premises (t62.t50) :args (0))
(step t62.t52 (cl (not (= (op e2 e0) (op e3 e0)))) :rule and :premises (t62.t51) :args (1))
(step t62.t53 (cl (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t62.t40 t62.t44 t62.t52))
(step t62.t54 (cl (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false)) :rule resolution :premises (t62.t39 t62.t53))
(step t62.t55 (cl (= (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false)) :rule trans :premises (t62.t35 t62.t54))
(step t62.t56 (cl (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule resolution :premises (t62.t1 t62.t55))
(step t62 (cl (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule subproof :discharge (t62.a0 t62.a1 t62.a2 t62.a3 t62.a4))
(step t63 (cl (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule and_pos :args (0))
(step t64 (cl (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) :rule and_pos :args (1))
(step t65 (cl (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) :rule and_pos :args (2))
(step t66 (cl (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) :rule and_pos :args (3))
(step t67 (cl (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule and_pos :args (4))
(step t68 (cl (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t62 t63 t64 t65 t66 t67))
(step t69 (cl (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule reordering :premises (t68))
(step t70 (cl (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule contraction :premises (t69))
(step t71 (cl (=> (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule resolution :premises (t61 t70))
(step t72 (cl (=> (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule implies_neg2)
(step t73 (cl (=> (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (=> (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t71 t72))
(step t74 (cl (=> (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule contraction :premises (t73))
(step t75 (cl (not (and (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule implies :premises (t74))
(step t76 (cl (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule resolution :premises (t60 t75))
(step t77 (cl (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))))) :rule or_neg :args (0))
(step t78 (cl (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))))) :rule or_neg :args (1))
(step t79 (cl (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))))) :rule or_neg :args (2))
(step t80 (cl (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))))) :rule or_neg :args (3))
(step t81 (cl (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule or_neg :args (4))
(step t82 (cl (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule or_neg :args (5))
(step t83 (cl (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t76 t77 t78 t79 t80 t81 t82))
(step t84 (cl (or (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule contraction :premises (t83))
(step t85 (cl (or (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t43 t59 t84))
(step t86 (cl (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule or :premises (t85))
(step t87 (cl (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) :rule reordering :premises (t86))
(step t88 (cl (not (= (not (= (op e2 e0) (op e3 e0))) (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) (not (not (= (op e2 e0) (op e3 e0)))) (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule equiv_pos2)
(step t89 (cl (= (op e2 e0) (op (op e1 e3) (op (op e1 e3) e1)))) :rule cong :premises (t13 t27))
(step t90 (cl (= (op e3 e0) (op e3 (op (op e1 e3) e1)))) :rule cong :premises (t14 t27))
(step t91 (cl (= (= (op e2 e0) (op e3 e0)) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule cong :premises (t89 t90))
(step t92 (cl (= (not (= (op e2 e0) (op e3 e0))) (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) :rule cong :premises (t91))
(step t93 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e4) (op e1 e4))) (not (= (op e0 e4) (op e2 e4)))) (not (= (op e0 e4) (op e3 e4)))) (not (= (op e0 e4) (op e4 e4)))) (not (= (op e1 e4) (op e2 e4)))) (not (= (op e1 e4) (op e3 e4)))) (not (= (op e1 e4) (op e4 e4)))) (not (= (op e2 e4) (op e3 e4)))) (not (= (op e2 e4) (op e4 e4)))) (not (= (op e3 e4) (op e4 e4)))))) :rule and :premises (a8) :args (0))
(step t94 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3)))))) :rule and :premises (t93) :args (0))
(step t95 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2)))))) :rule and :premises (t94) :args (0))
(step t96 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0)))) (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1)))))) :rule and :premises (t95) :args (0))
(step t97 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0)))) (not (= (op e3 e0) (op e4 e0))))) :rule and :premises (t96) :args (0))
(step t98 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0)))) (not (= (op e2 e0) (op e4 e0))))) :rule and :premises (t97) :args (0))
(step t99 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0)))) (not (= (op e2 e0) (op e3 e0))))) :rule and :premises (t98) :args (0))
(step t100 (cl (not (= (op e2 e0) (op e3 e0)))) :rule and :premises (t99) :args (1))
(step t101 (cl (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t88 t92 t100))
(step t102 (cl (not (= (= (op e2 (op e2 e1)) e1) (= e1 (op (op e1 e3) (op (op e1 e3) e1))))) (not (= (op e2 (op e2 e1)) e1)) (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) :rule equiv_pos2)
(step t103 (cl (= (= (op e2 (op e2 e1)) e1) (= e1 (op e2 (op e2 e1))))) :rule rare_rewrite :args ("eq-symm" (op e2 (op e2 e1)) e1))
(step t104 (cl (= (op e2 (op e2 e1)) (op (op e1 e3) (op (op e1 e3) e1)))) :rule cong :premises (t13 t26))
(step t105 (cl (= (= e1 (op e2 (op e2 e1))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))))) :rule cong :premises (t9 t104))
(step t106 (cl (= (= (op e2 (op e2 e1)) e1) (= e1 (op (op e1 e3) (op (op e1 e3) e1))))) :rule trans :premises (t103 t105))
(step t107 (cl (and (and (and (and (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e0 (op e0 e1)) e1)) (= (op e0 (op e0 e2)) e2)) (= (op e0 (op e0 e3)) e3)) (= (op e0 (op e0 e4)) e4)) (and (and (and (and (= (op e1 (op e1 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e1 (op e1 e2)) e2)) (= (op e1 (op e1 e3)) e3)) (= (op e1 (op e1 e4)) e4))) (and (and (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e2 (op e2 e3)) e3)) (= (op e2 (op e2 e4)) e4))) (and (and (and (and (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2)) (= (op e3 (op e3 e3)) e3)) (= (op e3 (op e3 e4)) e4)))) :rule and :premises (a6) :args (0))
(step t108 (cl (and (and (and (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e0 (op e0 e1)) e1)) (= (op e0 (op e0 e2)) e2)) (= (op e0 (op e0 e3)) e3)) (= (op e0 (op e0 e4)) e4)) (and (and (and (and (= (op e1 (op e1 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e1 (op e1 e2)) e2)) (= (op e1 (op e1 e3)) e3)) (= (op e1 (op e1 e4)) e4))) (and (and (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e2 (op e2 e3)) e3)) (= (op e2 (op e2 e4)) e4)))) :rule and :premises (t107) :args (0))
(step t109 (cl (and (and (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e2 (op e2 e3)) e3)) (= (op e2 (op e2 e4)) e4))) :rule and :premises (t108) :args (1))
(step t110 (cl (and (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2)) (= (op e2 (op e2 e3)) e3))) :rule and :premises (t109) :args (0))
(step t111 (cl (and (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1)) (= (op e2 (op e2 e2)) e2))) :rule and :premises (t110) :args (0))
(step t112 (cl (and (= (op e2 (op e2 e0)) e0) (= (op e2 (op e2 e1)) e1))) :rule and :premises (t111) :args (0))
(step t113 (cl (= (op e2 (op e2 e1)) e1)) :rule and :premises (t112) :args (1))
(step t114 (cl (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) :rule resolution :premises (t102 t106 t113))
(step t115 (cl (not (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e3)) (= (op e0 e2) e4)) (= (op e0 e3) e1)) (= (op e0 e4) e2)) (= (op e1 e0) e4)) (= (op e1 e1) e1)) (= (op e1 e2) e3)) (= (op e1 e3) e2)) (= (op e1 e4) e0)) (= (op e2 e0) e1)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e4)) (= (op e2 e4) e3)) (= (op e3 e0) e2)) (= (op e3 e1) e4)) (= (op e3 e2) e0)) (= (op e3 e3) e3)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e2)) (= (op e4 e2) e1)) (= (op e4 e3) e0)) (= (op e4 e4) e4))) (not (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1)))))) (not (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e3)) (= (op e0 e2) e4)) (= (op e0 e3) e1)) (= (op e0 e4) e2)) (= (op e1 e0) e4)) (= (op e1 e1) e1)) (= (op e1 e2) e3)) (= (op e1 e3) e2)) (= (op e1 e4) e0)) (= (op e2 e0) e1)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e4)) (= (op e2 e4) e3)) (= (op e3 e0) e2)) (= (op e3 e1) e4)) (= (op e3 e2) e0)) (= (op e3 e3) e3)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e2)) (= (op e4 e2) e1)) (= (op e4 e3) e0)) (= (op e4 e4) e4)))) (not (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1))))) :rule equiv_pos2)
(step t116 (cl (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e3)) (= (op e0 e2) e4)) (= (op e0 e3) e1)) (= (op e0 e4) e2)) (= (op e1 e0) e4)) (= (op e1 e1) e1)) (= (op e1 e2) e3)) (= (op e1 e3) e2)) (= (op e1 e4) e0)) (= (op e2 e0) e1)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e4)) (= (op e2 e4) e3)) (= (op e3 e0) e2)) (= (op e3 e1) e4)) (= (op e3 e2) e0)) (= (op e3 e3) e3)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e2)) (= (op e4 e2) e1)) (= (op e4 e3) e0)) (= (op e4 e4) e4)) (and (= (op e4 e4) e4) (= (op e4 e3) e0) (= (op e4 e2) e1) (= (op e4 e1) e2) (= (op e4 e0) e3) (= (op e3 e4) e1) (= (op e3 e3) e3) (= (op e3 e2) e0) (= (op e3 e1) e4) (= (op e3 e0) e2) (= (op e2 e4) e3) (= (op e2 e3) e4) (= (op e2 e2) e2) (= (op e2 e1) e0) (= (op e2 e0) e1) (= (op e1 e4) e0) (= (op e1 e3) e2) (= (op e1 e2) e3) (= (op e1 e1) e1) (= (op e1 e0) e4) (= (op e0 e4) e2) (= (op e0 e3) e1) (= (op e0 e2) e4) (= (op e0 e0) e0) (= (op e0 e1) e3)))) :rule hole :args ("ACI_NORM" (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e3)) (= (op e0 e2) e4)) (= (op e0 e3) e1)) (= (op e0 e4) e2)) (= (op e1 e0) e4)) (= (op e1 e1) e1)) (= (op e1 e2) e3)) (= (op e1 e3) e2)) (= (op e1 e4) e0)) (= (op e2 e0) e1)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e4)) (= (op e2 e4) e3)) (= (op e3 e0) e2)) (= (op e3 e1) e4)) (= (op e3 e2) e0)) (= (op e3 e3) e3)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e2)) (= (op e4 e2) e1)) (= (op e4 e3) e0)) (= (op e4 e4) e4)) (and (= (op e4 e4) e4) (= (op e4 e3) e0) (= (op e4 e2) e1) (= (op e4 e1) e2) (= (op e4 e0) e3) (= (op e3 e4) e1) (= (op e3 e3) e3) (= (op e3 e2) e0) (= (op e3 e1) e4) (= (op e3 e0) e2) (= (op e2 e4) e3) (= (op e2 e3) e4) (= (op e2 e2) e2) (= (op e2 e1) e0) (= (op e2 e0) e1) (= (op e1 e4) e0) (= (op e1 e3) e2) (= (op e1 e2) e3) (= (op e1 e1) e1) (= (op e1 e0) e4) (= (op e0 e4) e2) (= (op e0 e3) e1) (= (op e0 e2) e4) (= (op e0 e0) e0) (= (op e0 e1) e3)))))
(step t117 (cl (= (= (op e4 e4) e4) (= e4 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e4))
(step t118 (cl (= (= (op e4 e3) e0) (= e0 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e0))
(step t119 (cl (= (= (op e4 e2) e1) (= e1 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e1))
(step t120 (cl (= (= (op e4 e1) e2) (= e2 (op e4 e1)))) :rule rare_rewrite :args ("eq-symm" (op e4 e1) e2))
(step t121 (cl (= (= (op e4 e0) e3) (= e3 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e3))
(step t122 (cl (= (= (op e3 e3) e3) (= e3 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e3))
(step t123 (cl (= (= (op e3 e2) e0) (= e0 (op e3 e2)))) :rule rare_rewrite :args ("eq-symm" (op e3 e2) e0))
(step t124 (cl (= (= (op e3 e1) e4) (= e4 (op e3 e1)))) :rule rare_rewrite :args ("eq-symm" (op e3 e1) e4))
(step t125 (cl (= (= (op e3 e0) e2) (= e2 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e2))
(step t126 (cl (= (= (op e2 e4) e3) (= e3 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e3))
(step t127 (cl (= (= (op e2 e3) e4) (= e4 (op e2 e3)))) :rule rare_rewrite :args ("eq-symm" (op e2 e3) e4))
(step t128 (cl (= (= (op e2 e2) e2) (= e2 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e2))
(step t129 (cl (= (= (op e2 e1) e0) (= e0 (op e2 e1)))) :rule rare_rewrite :args ("eq-symm" (op e2 e1) e0))
(step t130 (cl (= (= (op e2 e0) e1) (= e1 (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) e1))
(step t131 (cl (= (= (op e1 e4) e0) (= e0 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e0))
(step t132 (cl (= (= (op e1 e3) e2) (= e2 (op e1 e3)))) :rule rare_rewrite :args ("eq-symm" (op e1 e3) e2))
(step t133 (cl (= (= (op e1 e2) e3) (= e3 (op e1 e2)))) :rule rare_rewrite :args ("eq-symm" (op e1 e2) e3))
(step t134 (cl (= (= (op e1 e1) e1) (= e1 (op e1 e1)))) :rule rare_rewrite :args ("eq-symm" (op e1 e1) e1))
(step t135 (cl (= (= (op e1 e0) e4) (= e4 (op e1 e0)))) :rule rare_rewrite :args ("eq-symm" (op e1 e0) e4))
(step t136 (cl (= (= (op e0 e4) e2) (= e2 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e2))
(step t137 (cl (= (= (op e0 e3) e1) (= e1 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e1))
(step t138 (cl (= (= (op e0 e2) e4) (= e4 (op e0 e2)))) :rule rare_rewrite :args ("eq-symm" (op e0 e2) e4))
(step t139 (cl (= (= (op e0 e0) e0) (= e0 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e0))
(step t140 (cl (= (= (op e0 e1) e3) (= e3 (op e0 e1)))) :rule rare_rewrite :args ("eq-symm" (op e0 e1) e3))
(step t141 (cl (= (and (= (op e4 e4) e4) (= (op e4 e3) e0) (= (op e4 e2) e1) (= (op e4 e1) e2) (= (op e4 e0) e3) (= (op e3 e4) e1) (= (op e3 e3) e3) (= (op e3 e2) e0) (= (op e3 e1) e4) (= (op e3 e0) e2) (= (op e2 e4) e3) (= (op e2 e3) e4) (= (op e2 e2) e2) (= (op e2 e1) e0) (= (op e2 e0) e1) (= (op e1 e4) e0) (= (op e1 e3) e2) (= (op e1 e2) e3) (= (op e1 e1) e1) (= (op e1 e0) e4) (= (op e0 e4) e2) (= (op e0 e3) e1) (= (op e0 e2) e4) (= (op e0 e0) e0) (= (op e0 e1) e3)) (and (= e4 (op e4 e4)) (= e0 (op e4 e3)) (= e1 (op e4 e2)) (= e2 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e3 (op e3 e3)) (= e0 (op e3 e2)) (= e4 (op e3 e1)) (= e2 (op e3 e0)) (= e3 (op e2 e4)) (= e4 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e1 (op e2 e0)) (= e0 (op e1 e4)) (= e2 (op e1 e3)) (= e3 (op e1 e2)) (= e1 (op e1 e1)) (= e4 (op e1 e0)) (= e2 (op e0 e4)) (= e1 (op e0 e3)) (= e4 (op e0 e2)) (= e0 (op e0 e0)) (= e3 (op e0 e1))))) :rule cong :premises (t117 t118 t119 t120 t121 t3 t122 t123 t124 t125 t126 t127 t128 t129 t130 t131 t132 t133 t134 t135 t136 t137 t138 t139 t140))
(step t142 (cl (= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e3)) (= (op e0 e2) e4)) (= (op e0 e3) e1)) (= (op e0 e4) e2)) (= (op e1 e0) e4)) (= (op e1 e1) e1)) (= (op e1 e2) e3)) (= (op e1 e3) e2)) (= (op e1 e4) e0)) (= (op e2 e0) e1)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e4)) (= (op e2 e4) e3)) (= (op e3 e0) e2)) (= (op e3 e1) e4)) (= (op e3 e2) e0)) (= (op e3 e3) e3)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e2)) (= (op e4 e2) e1)) (= (op e4 e3) e0)) (= (op e4 e4) e4)) (and (= e4 (op e4 e4)) (= e0 (op e4 e3)) (= e1 (op e4 e2)) (= e2 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e3 (op e3 e3)) (= e0 (op e3 e2)) (= e4 (op e3 e1)) (= e2 (op e3 e0)) (= e3 (op e2 e4)) (= e4 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e1 (op e2 e0)) (= e0 (op e1 e4)) (= e2 (op e1 e3)) (= e3 (op e1 e2)) (= e1 (op e1 e1)) (= e4 (op e1 e0)) (= e2 (op e0 e4)) (= e1 (op e0 e3)) (= e4 (op e0 e2)) (= e0 (op e0 e0)) (= e3 (op e0 e1))))) :rule trans :premises (t116 t141))
(step t143 (cl (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e3)) (= (op e0 e2) e4)) (= (op e0 e3) e1)) (= (op e0 e4) e2)) (= (op e1 e0) e4)) (= (op e1 e1) e1)) (= (op e1 e2) e3)) (= (op e1 e3) e2)) (= (op e1 e4) e0)) (= (op e2 e0) e1)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e4)) (= (op e2 e4) e3)) (= (op e3 e0) e2)) (= (op e3 e1) e4)) (= (op e3 e2) e0)) (= (op e3 e3) e3)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e2)) (= (op e4 e2) e1)) (= (op e4 e3) e0)) (= (op e4 e4) e4))) (not (and (= e4 (op e4 e4)) (= e0 (op e4 e3)) (= e1 (op e4 e2)) (= e2 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e3 (op e3 e3)) (= e0 (op e3 e2)) (= e4 (op e3 e1)) (= e2 (op e3 e0)) (= e3 (op e2 e4)) (= e4 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e1 (op e2 e0)) (= e0 (op e1 e4)) (= e2 (op e1 e3)) (= e3 (op e1 e2)) (= e1 (op e1 e1)) (= e4 (op e1 e0)) (= e2 (op e0 e4)) (= e1 (op e0 e3)) (= e4 (op e0 e2)) (= e0 (op e0 e0)) (= e3 (op e0 e1)))))) :rule cong :premises (t142))
(step t144 (cl (= (= e4 (op e4 e4)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule cong :premises (t18 t19))
(step t145 (cl (= (op e4 e3) (op (op (op e1 e3) e3) e3))) :rule cong :premises (t18 t14))
(step t146 (cl (= (= e0 (op e4 e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t27 t145))
(step t147 (cl (= (op e4 e2) (op (op (op e1 e3) e3) (op e1 e3)))) :rule cong :premises (t18 t13))
(step t148 (cl (= (= e1 (op e4 e2)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))))) :rule cong :premises (t9 t147))
(step t149 (cl (= (op e4 e1) (op (op (op e1 e3) e3) e1))) :rule cong :premises (t18 t9))
(step t150 (cl (= (= e2 (op e4 e1)) (= (op e1 e3) (op (op (op e1 e3) e3) e1)))) :rule cong :premises (t13 t149))
(step t151 (cl (= (op e4 e0) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule cong :premises (t18 t27))
(step t152 (cl (= (= e3 (op e4 e0)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule cong :premises (t14 t151))
(step t153 (cl (= (= e3 (op e3 e3)) (= e3 (op e3 e3)))) :rule refl)
(step t154 (cl (= (op e3 e2) (op e3 (op e1 e3)))) :rule cong :premises (t14 t13))
(step t155 (cl (= (= e0 (op e3 e2)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) :rule cong :premises (t27 t154))
(step t156 (cl (= (op e3 e1) (op e3 e1))) :rule refl)
(step t157 (cl (= (= e4 (op e3 e1)) (= (op (op e1 e3) e3) (op e3 e1)))) :rule cong :premises (t18 t156))
(step t158 (cl (= (= e2 (op e3 e0)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))))) :rule cong :premises (t13 t90))
(step t159 (cl (= (= e3 (op e2 e4)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) :rule cong :premises (t14 t23))
(step t160 (cl (= (= e4 (op e2 e3)) (= (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule cong :premises (t18 t15))
(step t161 (cl (= (op e2 e2) (op (op e1 e3) (op e1 e3)))) :rule cong :premises (t13 t13))
(step t162 (cl (= (= e2 (op e2 e2)) (= (op e1 e3) (op (op e1 e3) (op e1 e3))))) :rule cong :premises (t13 t161))
(step t163 (cl (= (= e0 (op e2 e1)) (= (op (op e1 e3) e1) (op (op e1 e3) e1)))) :rule cong :premises (t27 t26))
(step t164 (cl (= (= e1 (op e2 e0)) (= e1 (op (op e1 e3) (op (op e1 e3) e1))))) :rule cong :premises (t9 t89))
(step t165 (cl (= (= e0 (op e1 e4)) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))))) :rule cong :premises (t27 t30))
(step t166 (cl (= (op e1 e3) (op e1 e3))) :rule refl)
(step t167 (cl (= (= e2 (op e1 e3)) (= (op e1 e3) (op e1 e3)))) :rule cong :premises (t13 t166))
(step t168 (cl (= (op e1 e2) (op e1 (op e1 e3)))) :rule cong :premises (t9 t13))
(step t169 (cl (= (= e3 (op e1 e2)) (= e3 (op e1 (op e1 e3))))) :rule cong :premises (t14 t168))
(step t170 (cl (= (= e1 (op e1 e1)) (= e1 (op e1 e1)))) :rule refl)
(step t171 (cl (= (op e1 e0) (op e1 (op (op e1 e3) e1)))) :rule cong :premises (t9 t27))
(step t172 (cl (= (= e4 (op e1 e0)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))))) :rule cong :premises (t18 t171))
(step t173 (cl (= (= e2 (op e0 e4)) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule cong :premises (t13 t28))
(step t174 (cl (= (op e0 e3) (op (op (op e1 e3) e1) e3))) :rule cong :premises (t27 t14))
(step t175 (cl (= (= e1 (op e0 e3)) (= e1 (op (op (op e1 e3) e1) e3)))) :rule cong :premises (t9 t174))
(step t176 (cl (= (op e0 e2) (op (op (op e1 e3) e1) (op e1 e3)))) :rule cong :premises (t27 t13))
(step t177 (cl (= (= e4 (op e0 e2)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))))) :rule cong :premises (t18 t176))
(step t178 (cl (= (op e0 e0) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) :rule cong :premises (t27 t27))
(step t179 (cl (= (= e0 (op e0 e0)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))))) :rule cong :premises (t27 t178))
(step t180 (cl (= (op e0 e1) (op (op (op e1 e3) e1) e1))) :rule cong :premises (t27 t9))
(step t181 (cl (= (= e3 (op e0 e1)) (= e3 (op (op (op e1 e3) e1) e1)))) :rule cong :premises (t14 t180))
(step t182 (cl (= (and (= e4 (op e4 e4)) (= e0 (op e4 e3)) (= e1 (op e4 e2)) (= e2 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e3 (op e3 e3)) (= e0 (op e3 e2)) (= e4 (op e3 e1)) (= e2 (op e3 e0)) (= e3 (op e2 e4)) (= e4 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e1 (op e2 e0)) (= e0 (op e1 e4)) (= e2 (op e1 e3)) (= e3 (op e1 e2)) (= e1 (op e1 e1)) (= e4 (op e1 e0)) (= e2 (op e0 e4)) (= e1 (op e0 e3)) (= e4 (op e0 e2)) (= e0 (op e0 e0)) (= e3 (op e0 e1))) (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e3) (op e3 e1)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op e1 e3) e3)) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= (op (op e1 e3) e1) (op (op e1 e3) e1)) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= (op e1 e3) (op e1 e3)) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1))))) :rule cong :premises (t144 t146 t148 t150 t152 t22 t153 t155 t157 t158 t159 t160 t162 t163 t164 t165 t167 t169 t170 t172 t173 t175 t177 t179 t181))
(step t183 (cl (= (not (and (= e4 (op e4 e4)) (= e0 (op e4 e3)) (= e1 (op e4 e2)) (= e2 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e3 (op e3 e3)) (= e0 (op e3 e2)) (= e4 (op e3 e1)) (= e2 (op e3 e0)) (= e3 (op e2 e4)) (= e4 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e1 (op e2 e0)) (= e0 (op e1 e4)) (= e2 (op e1 e3)) (= e3 (op e1 e2)) (= e1 (op e1 e1)) (= e4 (op e1 e0)) (= e2 (op e0 e4)) (= e1 (op e0 e3)) (= e4 (op e0 e2)) (= e0 (op e0 e0)) (= e3 (op e0 e1)))) (not (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e3) (op e3 e1)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op e1 e3) e3)) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= (op (op e1 e3) e1) (op (op e1 e3) e1)) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= (op e1 e3) (op e1 e3)) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1)))))) :rule cong :premises (t182))
(step t184 (cl (= (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule refl)
(step t185 (cl (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) :rule refl)
(step t186 (cl (= (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= e1 (op (op (op e1 e3) e3) (op e1 e3))))) :rule refl)
(step t187 (cl (= (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= (op e1 e3) (op (op (op e1 e3) e3) e1)))) :rule refl)
(step t188 (cl (= (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule refl)
(step t189 (cl (= (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op e3 (op (op e1 e3) e3))))) :rule refl)
(step t190 (cl (= (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) :rule refl)
(step t191 (cl (= (= (op (op e1 e3) e3) (op e3 e1)) (= (op e3 e1) (op (op e1 e3) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e3) e3) (op e3 e1)))
(step t192 (cl (= (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= (op e1 e3) (op e3 (op (op e1 e3) e1))))) :rule refl)
(step t193 (cl (= (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) :rule refl)
(step t194 (cl (= (= (op (op e1 e3) e3) (op (op e1 e3) e3)) true)) :rule rare_rewrite :args ("eq-refl" (op (op e1 e3) e3)))
(step t195 (cl (= (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= (op e1 e3) (op (op e1 e3) (op e1 e3))))) :rule refl)
(step t196 (cl (= (= (op (op e1 e3) e1) (op (op e1 e3) e1)) true)) :rule rare_rewrite :args ("eq-refl" (op (op e1 e3) e1)))
(step t197 (cl (= (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))))) :rule refl)
(step t198 (cl (= (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))))) :rule refl)
(step t199 (cl (= (= (op e1 e3) (op e1 e3)) true)) :rule rare_rewrite :args ("eq-refl" (op e1 e3)))
(step t200 (cl (= (= e3 (op e1 (op e1 e3))) (= e3 (op e1 (op e1 e3))))) :rule refl)
(step t201 (cl (= (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))))) :rule refl)
(step t202 (cl (= (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule refl)
(step t203 (cl (= (= e1 (op (op (op e1 e3) e1) e3)) (= e1 (op (op (op e1 e3) e1) e3)))) :rule refl)
(step t204 (cl (= (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))))) :rule refl)
(step t205 (cl (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))))) :rule refl)
(step t206 (cl (= (= e3 (op (op (op e1 e3) e1) e1)) (= e3 (op (op (op e1 e3) e1) e1)))) :rule refl)
(step t207 (cl (= (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e3) (op e3 e1)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op e1 e3) e3)) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= (op (op e1 e3) e1) (op (op e1 e3) e1)) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= (op e1 e3) (op e1 e3)) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1))) (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) true (= (op e1 e3) (op (op e1 e3) (op e1 e3))) true (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) true (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1))))) :rule cong :premises (t184 t185 t186 t187 t188 t189 t153 t190 t191 t192 t193 t194 t195 t196 t197 t198 t199 t200 t170 t201 t202 t203 t204 t205 t206))
(step t208 (cl (= (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) true (= (op e1 e3) (op (op e1 e3) (op e1 e3))) true (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) true (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1))) (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1))))) :rule hole :args ("ACI_NORM" (= (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) true (= (op e1 e3) (op (op e1 e3) (op e1 e3))) true (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) true (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1))) (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1))))))
(step t209 (cl (= (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e3) (op e3 e1)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op e1 e3) e3)) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= (op (op e1 e3) e1) (op (op e1 e3) e1)) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= (op e1 e3) (op e1 e3)) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1))) (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1))))) :rule trans :premises (t207 t208))
(step t210 (cl (= (not (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e3) (op e3 e1)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op e1 e3) e3)) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= (op (op e1 e3) e1) (op (op e1 e3) e1)) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= (op e1 e3) (op e1 e3)) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1)))) (not (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1)))))) :rule cong :premises (t209))
(step t211 (cl (= (not (and (= e4 (op e4 e4)) (= e0 (op e4 e3)) (= e1 (op e4 e2)) (= e2 (op e4 e1)) (= e3 (op e4 e0)) (= e1 (op e3 e4)) (= e3 (op e3 e3)) (= e0 (op e3 e2)) (= e4 (op e3 e1)) (= e2 (op e3 e0)) (= e3 (op e2 e4)) (= e4 (op e2 e3)) (= e2 (op e2 e2)) (= e0 (op e2 e1)) (= e1 (op e2 e0)) (= e0 (op e1 e4)) (= e2 (op e1 e3)) (= e3 (op e1 e2)) (= e1 (op e1 e1)) (= e4 (op e1 e0)) (= e2 (op e0 e4)) (= e1 (op e0 e3)) (= e4 (op e0 e2)) (= e0 (op e0 e0)) (= e3 (op e0 e1)))) (not (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1)))))) :rule trans :premises (t183 t210))
(step t212 (cl (= (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (op e0 e0) e0) (= (op e0 e1) e3)) (= (op e0 e2) e4)) (= (op e0 e3) e1)) (= (op e0 e4) e2)) (= (op e1 e0) e4)) (= (op e1 e1) e1)) (= (op e1 e2) e3)) (= (op e1 e3) e2)) (= (op e1 e4) e0)) (= (op e2 e0) e1)) (= (op e2 e1) e0)) (= (op e2 e2) e2)) (= (op e2 e3) e4)) (= (op e2 e4) e3)) (= (op e3 e0) e2)) (= (op e3 e1) e4)) (= (op e3 e2) e0)) (= (op e3 e3) e3)) (= (op e3 e4) e1)) (= (op e4 e0) e3)) (= (op e4 e1) e2)) (= (op e4 e2) e1)) (= (op e4 e3) e0)) (= (op e4 e4) e4))) (not (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1)))))) :rule trans :premises (t143 t211))
(step t213 (cl (not (and (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e1 (op e3 (op (op e1 e3) e3))) (= e3 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e1) (op (op e1 e3) e3)) (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op e1 e3))) (= e1 (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= e3 (op e1 (op e1 e3))) (= e1 (op e1 e1)) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e1) e1))))) :rule resolution :premises (t115 t212 a11))
(step t214 (cl (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) (not (= (op e1 e3) (op (op (op e1 e3) e3) e1))) (not (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= e3 (op e3 e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e3 e1) (op (op e1 e3) e3))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op e1 e3)))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e1 (op e1 e1))) (not (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= e3 (op (op (op e1 e3) e1) e1)))) :rule not_and :premises (t213))
(step t215 (cl (not (= e1 (op e1 e1))) (not (= e3 (op e3 e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= e3 (op (op (op e1 e3) e1) e1))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1)))) (not (= e3 (op e1 (op e1 e3)))) (not (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3)))) (not (= e1 (op (op e1 e3) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op e1 e3) (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) (not (= (op e3 e1) (op (op e1 e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e3) e1))) (not (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule reordering :premises (t214))
(step t216 (cl (not (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3)) (= e3 (op (op (op e1 e3) e1) e3)) (= (op e1 e3) (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) (= e1 (op (op (op e1 e3) e1) e3))))) (not (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3)) (= e3 (op (op (op e1 e3) e1) e3)) (= (op e1 e3) (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) (= e1 (op (op (op e1 e3) e1) e3)))) :rule equiv_pos2)
(step t217 (cl (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op e0 e3) e4) (= (op e0 e3) e3) (= (op e0 e3) e2) (= (op e0 e3) e0) (= (op e0 e3) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op e0 e3) e4) (= (op e0 e3) e3) (= (op e0 e3) e2) (= (op e0 e3) e0) (= (op e0 e3) e1)))))
(step t218 (cl (= (= (op e0 e3) e4) (= e4 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e4))
(step t219 (cl (= (= (op e0 e3) e3) (= e3 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e3))
(step t220 (cl (= (= (op e0 e3) e2) (= e2 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e2))
(step t221 (cl (= (= (op e0 e3) e0) (= e0 (op e0 e3)))) :rule rare_rewrite :args ("eq-symm" (op e0 e3) e0))
(step t222 (cl (= (or (= (op e0 e3) e4) (= (op e0 e3) e3) (= (op e0 e3) e2) (= (op e0 e3) e0) (= (op e0 e3) e1)) (or (= e4 (op e0 e3)) (= e3 (op e0 e3)) (= e2 (op e0 e3)) (= e0 (op e0 e3)) (= e1 (op e0 e3))))) :rule cong :premises (t218 t219 t220 t221 t137))
(step t223 (cl (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= e4 (op e0 e3)) (= e3 (op e0 e3)) (= e2 (op e0 e3)) (= e0 (op e0 e3)) (= e1 (op e0 e3))))) :rule trans :premises (t217 t222))
(step t224 (cl (= (= e4 (op e0 e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3)))) :rule cong :premises (t18 t174))
(step t225 (cl (= (= e3 (op e0 e3)) (= e3 (op (op (op e1 e3) e1) e3)))) :rule cong :premises (t14 t174))
(step t226 (cl (= (= e2 (op e0 e3)) (= (op e1 e3) (op (op (op e1 e3) e1) e3)))) :rule cong :premises (t13 t174))
(step t227 (cl (= (= e0 (op e0 e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)))) :rule cong :premises (t27 t174))
(step t228 (cl (= (or (= e4 (op e0 e3)) (= e3 (op e0 e3)) (= e2 (op e0 e3)) (= e0 (op e0 e3)) (= e1 (op e0 e3))) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3)) (= e3 (op (op (op e1 e3) e1) e3)) (= (op e1 e3) (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) (= e1 (op (op (op e1 e3) e1) e3))))) :rule cong :premises (t224 t225 t226 t227 t175))
(step t229 (cl (= (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3)) (= e3 (op (op (op e1 e3) e1) e3)) (= (op e1 e3) (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) (= e1 (op (op (op e1 e3) e1) e3))))) :rule trans :premises (t223 t228))
(step t230 (cl (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e0) e1)) (= (op e3 e0) e2)) (= (op e3 e0) e3)) (= (op e3 e0) e4)) (or (or (or (or (= (op e3 e1) e0) (= (op e3 e1) e1)) (= (op e3 e1) e2)) (= (op e3 e1) e3)) (= (op e3 e1) e4))) (or (or (or (or (= (op e3 e2) e0) (= (op e3 e2) e1)) (= (op e3 e2) e2)) (= (op e3 e2) e3)) (= (op e3 e2) e4))) (or (or (or (or (= (op e3 e3) e0) (= (op e3 e3) e1)) (= (op e3 e3) e2)) (= (op e3 e3) e3)) (= (op e3 e3) e4))) (or (or (or (or (= (op e3 e4) e0) (= (op e3 e4) e1)) (= (op e3 e4) e2)) (= (op e3 e4) e3)) (= (op e3 e4) e4))))) :rule and :premises (a0) :args (0))
(step t231 (cl (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4)))) (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e0) e1)) (= (op e2 e0) e2)) (= (op e2 e0) e3)) (= (op e2 e0) e4)) (or (or (or (or (= (op e2 e1) e0) (= (op e2 e1) e1)) (= (op e2 e1) e2)) (= (op e2 e1) e3)) (= (op e2 e1) e4))) (or (or (or (or (= (op e2 e2) e0) (= (op e2 e2) e1)) (= (op e2 e2) e2)) (= (op e2 e2) e3)) (= (op e2 e2) e4))) (or (or (or (or (= (op e2 e3) e0) (= (op e2 e3) e1)) (= (op e2 e3) e2)) (= (op e2 e3) e3)) (= (op e2 e3) e4))) (or (or (or (or (= (op e2 e4) e0) (= (op e2 e4) e1)) (= (op e2 e4) e2)) (= (op e2 e4) e3)) (= (op e2 e4) e4))))) :rule and :premises (t230) :args (0))
(step t232 (cl (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4))) (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e0) e1)) (= (op e1 e0) e2)) (= (op e1 e0) e3)) (= (op e1 e0) e4)) (or (or (or (or (= (op e1 e1) e0) (= (op e1 e1) e1)) (= (op e1 e1) e2)) (= (op e1 e1) e3)) (= (op e1 e1) e4))) (or (or (or (or (= (op e1 e2) e0) (= (op e1 e2) e1)) (= (op e1 e2) e2)) (= (op e1 e2) e3)) (= (op e1 e2) e4))) (or (or (or (or (= (op e1 e3) e0) (= (op e1 e3) e1)) (= (op e1 e3) e2)) (= (op e1 e3) e3)) (= (op e1 e3) e4))) (or (or (or (or (= (op e1 e4) e0) (= (op e1 e4) e1)) (= (op e1 e4) e2)) (= (op e1 e4) e3)) (= (op e1 e4) e4))))) :rule and :premises (t231) :args (0))
(step t233 (cl (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) (or (or (or (or (= (op e0 e4) e0) (= (op e0 e4) e1)) (= (op e0 e4) e2)) (= (op e0 e4) e3)) (= (op e0 e4) e4)))) :rule and :premises (t232) :args (0))
(step t234 (cl (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e0) e1)) (= (op e0 e0) e2)) (= (op e0 e0) e3)) (= (op e0 e0) e4)) (or (or (or (or (= (op e0 e1) e0) (= (op e0 e1) e1)) (= (op e0 e1) e2)) (= (op e0 e1) e3)) (= (op e0 e1) e4))) (or (or (or (or (= (op e0 e2) e0) (= (op e0 e2) e1)) (= (op e0 e2) e2)) (= (op e0 e2) e3)) (= (op e0 e2) e4))) (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4)))) :rule and :premises (t233) :args (0))
(step t235 (cl (or (or (or (or (= (op e0 e3) e0) (= (op e0 e3) e1)) (= (op e0 e3) e2)) (= (op e0 e3) e3)) (= (op e0 e3) e4))) :rule and :premises (t234) :args (1))
(step t236 (cl (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3)) (= e3 (op (op (op e1 e3) e1) e3)) (= (op e1 e3) (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) (= e1 (op (op (op e1 e3) e1) e3)))) :rule resolution :premises (t216 t229 t235))
(step t237 (cl (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3)) (= e3 (op (op (op e1 e3) e1) e3)) (= (op e1 e3) (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) (= e1 (op (op (op e1 e3) e1) e3))) :rule or :premises (t236))
(step t238 (cl (= (op e1 e3) (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3)) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) (= e3 (op (op (op e1 e3) e1) e3))) :rule reordering :premises (t237))
(step t239 (cl (not (= (not (= (op e0 e3) (op e1 e3))) (not (= (op e1 e3) (op (op (op e1 e3) e1) e3))))) (not (not (= (op e0 e3) (op e1 e3)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) e3)))) :rule equiv_pos2)
(step t240 (cl (= (= (op e0 e3) (op e1 e3)) (= (op (op (op e1 e3) e1) e3) (op e1 e3)))) :rule cong :premises (t174 t166))
(step t241 (cl (= (not (= (op e0 e3) (op e1 e3))) (not (= (op (op (op e1 e3) e1) e3) (op e1 e3))))) :rule cong :premises (t240))
(step t242 (cl (= (= (op (op (op e1 e3) e1) e3) (op e1 e3)) (= (op e1 e3) (op (op (op e1 e3) e1) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e1 e3) e1) e3) (op e1 e3)))
(step t243 (cl (= (not (= (op (op (op e1 e3) e1) e3) (op e1 e3))) (not (= (op e1 e3) (op (op (op e1 e3) e1) e3))))) :rule cong :premises (t242))
(step t244 (cl (= (not (= (op e0 e3) (op e1 e3))) (not (= (op e1 e3) (op (op (op e1 e3) e1) e3))))) :rule trans :premises (t241 t243))
(step t245 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3)))) (not (= (op e3 e3) (op e4 e3))))) :rule and :premises (t94) :args (1))
(step t246 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3)))) (not (= (op e2 e3) (op e4 e3))))) :rule and :premises (t245) :args (0))
(step t247 (cl (and (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3)))) (not (= (op e2 e3) (op e3 e3))))) :rule and :premises (t246) :args (0))
(step t248 (cl (and (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3)))) (not (= (op e1 e3) (op e4 e3))))) :rule and :premises (t247) :args (0))
(step t249 (cl (and (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op e3 e3))))) :rule and :premises (t248) :args (0))
(step t250 (cl (and (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3)))) (not (= (op e1 e3) (op e2 e3))))) :rule and :premises (t249) :args (0))
(step t251 (cl (and (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3)))) (not (= (op e0 e3) (op e4 e3))))) :rule and :premises (t250) :args (0))
(step t252 (cl (and (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3)))) (not (= (op e0 e3) (op e3 e3))))) :rule and :premises (t251) :args (0))
(step t253 (cl (and (not (= (op e0 e3) (op e1 e3))) (not (= (op e0 e3) (op e2 e3))))) :rule and :premises (t252) :args (0))
(step t254 (cl (not (= (op e0 e3) (op e1 e3)))) :rule and :premises (t253) :args (0))
(step t255 (cl (not (= (op e1 e3) (op (op (op e1 e3) e1) e3)))) :rule resolution :premises (t239 t244 t254))
(step t256 (cl (not (= (not (= (op e0 e3) (op e2 e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3))))) (not (not (= (op e0 e3) (op e2 e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3)))) :rule equiv_pos2)
(step t257 (cl (= (= (op e0 e3) (op e2 e3)) (= (op (op (op e1 e3) e1) e3) (op (op e1 e3) e3)))) :rule cong :premises (t174 t15))
(step t258 (cl (= (not (= (op e0 e3) (op e2 e3))) (not (= (op (op (op e1 e3) e1) e3) (op (op e1 e3) e3))))) :rule cong :premises (t257))
(step t259 (cl (= (= (op (op (op e1 e3) e1) e3) (op (op e1 e3) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e1 e3) e1) e3) (op (op e1 e3) e3)))
(step t260 (cl (= (not (= (op (op (op e1 e3) e1) e3) (op (op e1 e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3))))) :rule cong :premises (t259))
(step t261 (cl (= (not (= (op e0 e3) (op e2 e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3))))) :rule trans :premises (t258 t260))
(step t262 (cl (not (= (op e0 e3) (op e2 e3)))) :rule and :premises (t253) :args (1))
(step t263 (cl (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) e3)))) :rule resolution :premises (t256 t261 t262))
(step t264 (cl (= (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) false) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3))))) :rule equiv_simplify)
(step t265 (cl (not (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) false)) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)))) :rule equiv1 :premises (t264))
(step t266 (cl (not (= (= (op e0 e0) e0) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))))) (not (= (op e0 e0) e0)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) :rule equiv_pos2)
(step t267 (cl (= (= (op e0 e0) e0) (= e0 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e0))
(step t268 (cl (= (= (op e0 e0) e0) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))))) :rule trans :premises (t267 t179))
(step t269 (cl (and (and (and (= (op e0 e0) e0) (= (op e1 e1) e1)) (= (op e2 e2) e2)) (= (op e3 e3) e3))) :rule and :premises (a7) :args (0))
(step t270 (cl (and (and (= (op e0 e0) e0) (= (op e1 e1) e1)) (= (op e2 e2) e2))) :rule and :premises (t269) :args (0))
(step t271 (cl (and (= (op e0 e0) e0) (= (op e1 e1) e1))) :rule and :premises (t270) :args (0))
(step t272 (cl (= (op e0 e0) e0)) :rule and :premises (t271) :args (0))
(step t273 (cl (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) :rule resolution :premises (t266 t268 t272))
(step t274 (cl (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) e3))) :rule refl)
(step t275 (cl (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3)))) :rule cong :premises (t273 t274))
(step t276 (cl (= (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3)) false) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3))))) :rule equiv_simplify)
(step t277 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3)) false) (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3))))) :rule equiv2 :premises (t276))
(step t278 (cl (not (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3))) :rule not_not)
(step t279 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3)) false) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3))) :rule resolution :premises (t277 t278))
(step t280 (cl (not (= (not (= (op e0 e0) (op e0 e3))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3))))) (not (not (= (op e0 e0) (op e0 e3)))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3)))) :rule equiv_pos2)
(step t281 (cl (= (= (op e0 e0) (op e0 e3)) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3)))) :rule cong :premises (t178 t174))
(step t282 (cl (= (not (= (op e0 e0) (op e0 e3))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3))))) :rule cong :premises (t281))
(step t283 (cl (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e4 e0) (op e4 e1))) (not (= (op e4 e0) (op e4 e2)))) (not (= (op e4 e0) (op e4 e3)))) (not (= (op e4 e0) (op e4 e4)))) (not (= (op e4 e1) (op e4 e2)))) (not (= (op e4 e1) (op e4 e3)))) (not (= (op e4 e1) (op e4 e4)))) (not (= (op e4 e2) (op e4 e3)))) (not (= (op e4 e2) (op e4 e4)))) (not (= (op e4 e3) (op e4 e4)))))) :rule and :premises (a8) :args (1))
(step t284 (cl (and (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4)))))) :rule and :premises (t283) :args (0))
(step t285 (cl (and (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4)))))) :rule and :premises (t284) :args (0))
(step t286 (cl (and (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4)))) (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4)))))) :rule and :premises (t285) :args (0))
(step t287 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4)))) (not (= (op e0 e3) (op e0 e4))))) :rule and :premises (t286) :args (0))
(step t288 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3)))) (not (= (op e0 e2) (op e0 e4))))) :rule and :premises (t287) :args (0))
(step t289 (cl (and (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4)))) (not (= (op e0 e2) (op e0 e3))))) :rule and :premises (t288) :args (0))
(step t290 (cl (and (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3)))) (not (= (op e0 e1) (op e0 e4))))) :rule and :premises (t289) :args (0))
(step t291 (cl (and (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2)))) (not (= (op e0 e1) (op e0 e3))))) :rule and :premises (t290) :args (0))
(step t292 (cl (and (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4)))) (not (= (op e0 e1) (op e0 e2))))) :rule and :premises (t291) :args (0))
(step t293 (cl (and (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3)))) (not (= (op e0 e0) (op e0 e4))))) :rule and :premises (t292) :args (0))
(step t294 (cl (and (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2)))) (not (= (op e0 e0) (op e0 e3))))) :rule and :premises (t293) :args (0))
(step t295 (cl (not (= (op e0 e0) (op e0 e3)))) :rule and :premises (t294) :args (1))
(step t296 (cl (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3)))) :rule resolution :premises (t280 t282 t295))
(step t297 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) e3)) false)) :rule resolution :premises (t279 t296))
(step t298 (cl (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) false)) :rule trans :premises (t275 t297))
(step t299 (cl (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)))) :rule resolution :premises (t265 t298))
(step t300 (cl (= (= (= e3 (op (op (op e1 e3) e1) e3)) false) (not (= e3 (op (op (op e1 e3) e1) e3))))) :rule equiv_simplify)
(step t301 (cl (not (= (= e3 (op (op (op e1 e3) e1) e3)) false)) (not (= e3 (op (op (op e1 e3) e1) e3)))) :rule equiv1 :premises (t300))
(step t302 (cl (= (op e3 e3) e3)) :rule and :premises (t269) :args (1))
(step t303 (cl (= e3 (op e3 e3))) :rule symm :premises (t302))
(step t304 (cl (= (= e3 (op (op (op e1 e3) e1) e3)) (= (op e3 e3) (op (op (op e1 e3) e1) e3)))) :rule cong :premises (t303 t274))
(step t305 (cl (= (= (= (op e3 e3) (op (op (op e1 e3) e1) e3)) false) (not (= (op e3 e3) (op (op (op e1 e3) e1) e3))))) :rule equiv_simplify)
(step t306 (cl (= (= (op e3 e3) (op (op (op e1 e3) e1) e3)) false) (not (not (= (op e3 e3) (op (op (op e1 e3) e1) e3))))) :rule equiv2 :premises (t305))
(step t307 (cl (not (not (not (= (op e3 e3) (op (op (op e1 e3) e1) e3))))) (= (op e3 e3) (op (op (op e1 e3) e1) e3))) :rule not_not)
(step t308 (cl (= (= (op e3 e3) (op (op (op e1 e3) e1) e3)) false) (= (op e3 e3) (op (op (op e1 e3) e1) e3))) :rule resolution :premises (t306 t307))
(step t309 (cl (not (= (not (= (op e0 e3) (op e3 e3))) (not (= (op e3 e3) (op (op (op e1 e3) e1) e3))))) (not (not (= (op e0 e3) (op e3 e3)))) (not (= (op e3 e3) (op (op (op e1 e3) e1) e3)))) :rule equiv_pos2)
(step t310 (cl (= (op e3 e3) (op e3 e3))) :rule refl)
(step t311 (cl (= (= (op e0 e3) (op e3 e3)) (= (op (op (op e1 e3) e1) e3) (op e3 e3)))) :rule cong :premises (t174 t310))
(step t312 (cl (= (not (= (op e0 e3) (op e3 e3))) (not (= (op (op (op e1 e3) e1) e3) (op e3 e3))))) :rule cong :premises (t311))
(step t313 (cl (= (= (op (op (op e1 e3) e1) e3) (op e3 e3)) (= (op e3 e3) (op (op (op e1 e3) e1) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op (op e1 e3) e1) e3) (op e3 e3)))
(step t314 (cl (= (not (= (op (op (op e1 e3) e1) e3) (op e3 e3))) (not (= (op e3 e3) (op (op (op e1 e3) e1) e3))))) :rule cong :premises (t313))
(step t315 (cl (= (not (= (op e0 e3) (op e3 e3))) (not (= (op e3 e3) (op (op (op e1 e3) e1) e3))))) :rule trans :premises (t312 t314))
(step t316 (cl (not (= (op e0 e3) (op e3 e3)))) :rule and :premises (t252) :args (1))
(step t317 (cl (not (= (op e3 e3) (op (op (op e1 e3) e1) e3)))) :rule resolution :premises (t309 t315 t316))
(step t318 (cl (= (= (op e3 e3) (op (op (op e1 e3) e1) e3)) false)) :rule resolution :premises (t308 t317))
(step t319 (cl (= (= e3 (op (op (op e1 e3) e1) e3)) false)) :rule trans :premises (t304 t318))
(step t320 (cl (not (= e3 (op (op (op e1 e3) e1) e3)))) :rule resolution :premises (t301 t319))
(step t321 (cl (= e1 (op (op (op e1 e3) e1) e3))) :rule resolution :premises (t238 t255 t263 t299 t320))
(step t322 (cl (not (= (= (op e0 (op e0 e3)) e3) (= e3 (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3))))) (not (= (op e0 (op e0 e3)) e3)) (= e3 (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)))) :rule equiv_pos2)
(step t323 (cl (= (= (op e0 (op e0 e3)) e3) (= e3 (op e0 (op e0 e3))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op e0 e3)) e3))
(step t324 (cl (= (op e0 (op e0 e3)) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)))) :rule cong :premises (t27 t174))
(step t325 (cl (= (= e3 (op e0 (op e0 e3))) (= e3 (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3))))) :rule cong :premises (t14 t324))
(step t326 (cl (= (= (op e0 (op e0 e3)) e3) (= e3 (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3))))) :rule trans :premises (t323 t325))
(step t327 (cl (and (and (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e0 (op e0 e1)) e1)) (= (op e0 (op e0 e2)) e2)) (= (op e0 (op e0 e3)) e3)) (= (op e0 (op e0 e4)) e4)) (and (and (and (and (= (op e1 (op e1 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e1 (op e1 e2)) e2)) (= (op e1 (op e1 e3)) e3)) (= (op e1 (op e1 e4)) e4)))) :rule and :premises (t108) :args (0))
(step t328 (cl (and (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e0 (op e0 e1)) e1)) (= (op e0 (op e0 e2)) e2)) (= (op e0 (op e0 e3)) e3)) (= (op e0 (op e0 e4)) e4))) :rule and :premises (t327) :args (0))
(step t329 (cl (and (and (and (= (op e0 (op e0 e0)) e0) (= (op e0 (op e0 e1)) e1)) (= (op e0 (op e0 e2)) e2)) (= (op e0 (op e0 e3)) e3))) :rule and :premises (t328) :args (0))
(step t330 (cl (= (op e0 (op e0 e3)) e3)) :rule and :premises (t329) :args (1))
(step t331 (cl (= e3 (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)))) :rule resolution :premises (t322 t326 t330))
(step t332 (cl (= (op (op e1 e3) e1) (op (op e1 e3) e1))) :rule refl)
(step t333 (cl (= (op (op (op e1 e3) e1) e3) e1)) :rule symm :premises (t321))
(step t334 (cl (= (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) e3)) (op (op (op e1 e3) e1) e1))) :rule cong :premises (t332 t333))
(step t335 (cl (= e3 (op (op (op e1 e3) e1) e1))) :rule trans :premises (t331 t334))
(step t336 (cl (not (= (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op e1 e3))) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e3) e1))))) (not (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3))) (or (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op e1 e3))) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e3) e1)))) :rule equiv_pos2)
(step t337 (cl (= (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (= (op e4 e4) e3) (= (op e4 e3) e3) (= (op e4 e2) e3) (= (op e4 e0) e3) (= (op e4 e1) e3)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (= (op e4 e4) e3) (= (op e4 e3) e3) (= (op e4 e2) e3) (= (op e4 e0) e3) (= (op e4 e1) e3)))))
(step t338 (cl (= (= (op e4 e4) e3) (= e3 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e3))
(step t339 (cl (= (= (op e4 e3) e3) (= e3 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e3))
(step t340 (cl (= (= (op e4 e2) e3) (= e3 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e3))
(step t341 (cl (= (= (op e4 e1) e3) (= e3 (op e4 e1)))) :rule rare_rewrite :args ("eq-symm" (op e4 e1) e3))
(step t342 (cl (= (or (= (op e4 e4) e3) (= (op e4 e3) e3) (= (op e4 e2) e3) (= (op e4 e0) e3) (= (op e4 e1) e3)) (or (= e3 (op e4 e4)) (= e3 (op e4 e3)) (= e3 (op e4 e2)) (= e3 (op e4 e0)) (= e3 (op e4 e1))))) :rule cong :premises (t338 t339 t340 t121 t341))
(step t343 (cl (= (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (= e3 (op e4 e4)) (= e3 (op e4 e3)) (= e3 (op e4 e2)) (= e3 (op e4 e0)) (= e3 (op e4 e1))))) :rule trans :premises (t337 t342))
(step t344 (cl (= (= e3 (op e4 e4)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule cong :premises (t14 t19))
(step t345 (cl (= (= e3 (op e4 e3)) (= e3 (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t14 t145))
(step t346 (cl (= (= e3 (op e4 e2)) (= e3 (op (op (op e1 e3) e3) (op e1 e3))))) :rule cong :premises (t14 t147))
(step t347 (cl (= (= e3 (op e4 e1)) (= e3 (op (op (op e1 e3) e3) e1)))) :rule cong :premises (t14 t149))
(step t348 (cl (= (or (= e3 (op e4 e4)) (= e3 (op e4 e3)) (= e3 (op e4 e2)) (= e3 (op e4 e0)) (= e3 (op e4 e1))) (or (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op e1 e3))) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e3) e1))))) :rule cong :premises (t344 t345 t346 t152 t347))
(step t349 (cl (= (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op e1 e3))) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e3) e1))))) :rule trans :premises (t343 t348))
(step t350 (cl (and (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3)) (or (or (or (or (= (op e0 e4) e3) (= (op e1 e4) e3)) (= (op e2 e4) e3)) (= (op e3 e4) e3)) (= (op e4 e4) e3)))) :rule and :premises (t35) :args (1))
(step t351 (cl (or (or (or (or (= (op e4 e0) e3) (= (op e4 e1) e3)) (= (op e4 e2) e3)) (= (op e4 e3) e3)) (= (op e4 e4) e3))) :rule and :premises (t350) :args (0))
(step t352 (cl (or (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op e1 e3))) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e3) e1)))) :rule resolution :premises (t336 t349 t351))
(step t353 (cl (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op e1 e3))) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e3) e1))) :rule or :premises (t352))
(step t354 (cl (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= e3 (op (op (op e1 e3) e3) e1)) (= e3 (op (op (op e1 e3) e3) (op e1 e3))) (= e3 (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule reordering :premises (t353))
(step t355 (cl (= (= (= e3 (op (op (op e1 e3) e3) e1)) false) (not (= e3 (op (op (op e1 e3) e3) e1))))) :rule equiv_simplify)
(step t356 (cl (not (= (= e3 (op (op (op e1 e3) e3) e1)) false)) (not (= e3 (op (op (op e1 e3) e3) e1)))) :rule equiv1 :premises (t355))
(step t357 (cl (= (op (op (op e1 e3) e3) e1) (op (op (op e1 e3) e3) e1))) :rule refl)
(step t358 (cl (= (= e3 (op (op (op e1 e3) e3) e1)) (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)))) :rule cong :premises (t335 t357))
(step t359 (cl (= (= (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)) false) (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))))) :rule equiv_simplify)
(step t360 (cl (= (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)) false) (not (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))))) :rule equiv2 :premises (t359))
(step t361 (cl (not (not (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))))) (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))) :rule not_not)
(step t362 (cl (= (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)) false) (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))) :rule resolution :premises (t360 t361))
(step t363 (cl (not (= (not (= (op e0 e1) (op e4 e1))) (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))))) (not (not (= (op e0 e1) (op e4 e1)))) (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)))) :rule equiv_pos2)
(step t364 (cl (= (= (op e0 e1) (op e4 e1)) (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)))) :rule cong :premises (t180 t149))
(step t365 (cl (= (not (= (op e0 e1) (op e4 e1))) (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1))))) :rule cong :premises (t364))
(step t366 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1)))) (not (= (op e3 e1) (op e4 e1))))) :rule and :premises (t96) :args (1))
(step t367 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1)))) (not (= (op e2 e1) (op e4 e1))))) :rule and :premises (t366) :args (0))
(step t368 (cl (and (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1)))) (not (= (op e2 e1) (op e3 e1))))) :rule and :premises (t367) :args (0))
(step t369 (cl (and (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1)))) (not (= (op e1 e1) (op e4 e1))))) :rule and :premises (t368) :args (0))
(step t370 (cl (and (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1)))) (not (= (op e1 e1) (op e3 e1))))) :rule and :premises (t369) :args (0))
(step t371 (cl (and (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1)))) (not (= (op e1 e1) (op e2 e1))))) :rule and :premises (t370) :args (0))
(step t372 (cl (and (and (and (not (= (op e0 e1) (op e1 e1))) (not (= (op e0 e1) (op e2 e1)))) (not (= (op e0 e1) (op e3 e1)))) (not (= (op e0 e1) (op e4 e1))))) :rule and :premises (t371) :args (0))
(step t373 (cl (not (= (op e0 e1) (op e4 e1)))) :rule and :premises (t372) :args (1))
(step t374 (cl (not (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)))) :rule resolution :premises (t363 t365 t373))
(step t375 (cl (= (= (op (op (op e1 e3) e1) e1) (op (op (op e1 e3) e3) e1)) false)) :rule resolution :premises (t362 t374))
(step t376 (cl (= (= e3 (op (op (op e1 e3) e3) e1)) false)) :rule trans :premises (t358 t375))
(step t377 (cl (not (= e3 (op (op (op e1 e3) e3) e1)))) :rule resolution :premises (t356 t376))
(step t378 (cl (= (= (= e3 (op (op (op e1 e3) e3) (op e1 e3))) false) (not (= e3 (op (op (op e1 e3) e3) (op e1 e3)))))) :rule equiv_simplify)
(step t379 (cl (not (= (= e3 (op (op (op e1 e3) e3) (op e1 e3))) false)) (not (= e3 (op (op (op e1 e3) e3) (op e1 e3))))) :rule equiv1 :premises (t378))
(step t380 (cl (and (and (and (and (= (op e1 (op e1 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e1 (op e1 e2)) e2)) (= (op e1 (op e1 e3)) e3)) (= (op e1 (op e1 e4)) e4))) :rule and :premises (t327) :args (1))
(step t381 (cl (and (and (and (= (op e1 (op e1 e0)) e0) (= (op e1 (op e1 e1)) e1)) (= (op e1 (op e1 e2)) e2)) (= (op e1 (op e1 e3)) e3))) :rule and :premises (t380) :args (0))
(step t382 (cl (= (op e1 (op e1 e3)) e3)) :rule and :premises (t381) :args (1))
(step t383 (cl (= e3 (op e1 (op e1 e3)))) :rule symm :premises (t382))
(step t384 (cl (= (op (op (op e1 e3) e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))) :rule refl)
(step t385 (cl (= (= e3 (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))))) :rule cong :premises (t383 t384))
(step t386 (cl (= (= (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false) (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) :rule equiv_simplify)
(step t387 (cl (= (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false) (not (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) :rule equiv2 :premises (t386))
(step t388 (cl (not (not (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))) :rule not_not)
(step t389 (cl (= (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false) (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))) :rule resolution :premises (t387 t388))
(step t390 (cl (not (= (not (= (op e1 e2) (op e4 e2))) (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) (not (not (= (op e1 e2) (op e4 e2)))) (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))))) :rule equiv_pos2)
(step t391 (cl (= (= (op e1 e2) (op e4 e2)) (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))))) :rule cong :premises (t168 t147))
(step t392 (cl (= (not (= (op e1 e2) (op e4 e2))) (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) :rule cong :premises (t391))
(step t393 (cl (and (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2)))) (not (= (op e3 e2) (op e4 e2))))) :rule and :premises (t95) :args (1))
(step t394 (cl (and (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2)))) (not (= (op e2 e2) (op e4 e2))))) :rule and :premises (t393) :args (0))
(step t395 (cl (and (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2)))) (not (= (op e2 e2) (op e3 e2))))) :rule and :premises (t394) :args (0))
(step t396 (cl (and (and (and (and (and (and (not (= (op e0 e2) (op e1 e2))) (not (= (op e0 e2) (op e2 e2)))) (not (= (op e0 e2) (op e3 e2)))) (not (= (op e0 e2) (op e4 e2)))) (not (= (op e1 e2) (op e2 e2)))) (not (= (op e1 e2) (op e3 e2)))) (not (= (op e1 e2) (op e4 e2))))) :rule and :premises (t395) :args (0))
(step t397 (cl (not (= (op e1 e2) (op e4 e2)))) :rule and :premises (t396) :args (1))
(step t398 (cl (not (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))))) :rule resolution :premises (t390 t392 t397))
(step t399 (cl (= (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false)) :rule resolution :premises (t389 t398))
(step t400 (cl (= (= e3 (op (op (op e1 e3) e3) (op e1 e3))) false)) :rule trans :premises (t385 t399))
(step t401 (cl (not (= e3 (op (op (op e1 e3) e3) (op e1 e3))))) :rule resolution :premises (t379 t400))
(step t402 (cl (= (= (= e3 (op (op (op e1 e3) e3) e3)) false) (not (= e3 (op (op (op e1 e3) e3) e3))))) :rule equiv_simplify)
(step t403 (cl (not (= (= e3 (op (op (op e1 e3) e3) e3)) false)) (not (= e3 (op (op (op e1 e3) e3) e3)))) :rule equiv1 :premises (t402))
(step t404 (cl (= (op (op (op e1 e3) e3) e3) (op (op (op e1 e3) e3) e3))) :rule refl)
(step t405 (cl (= (= e3 (op (op (op e1 e3) e3) e3)) (= (op e3 e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t303 t404))
(step t406 (cl (= (= (= (op e3 e3) (op (op (op e1 e3) e3) e3)) false) (not (= (op e3 e3) (op (op (op e1 e3) e3) e3))))) :rule equiv_simplify)
(step t407 (cl (= (= (op e3 e3) (op (op (op e1 e3) e3) e3)) false) (not (not (= (op e3 e3) (op (op (op e1 e3) e3) e3))))) :rule equiv2 :premises (t406))
(step t408 (cl (not (not (not (= (op e3 e3) (op (op (op e1 e3) e3) e3))))) (= (op e3 e3) (op (op (op e1 e3) e3) e3))) :rule not_not)
(step t409 (cl (= (= (op e3 e3) (op (op (op e1 e3) e3) e3)) false) (= (op e3 e3) (op (op (op e1 e3) e3) e3))) :rule resolution :premises (t407 t408))
(step t410 (cl (not (= (not (= (op e3 e3) (op e4 e3))) (not (= (op e3 e3) (op (op (op e1 e3) e3) e3))))) (not (not (= (op e3 e3) (op e4 e3)))) (not (= (op e3 e3) (op (op (op e1 e3) e3) e3)))) :rule equiv_pos2)
(step t411 (cl (= (= (op e3 e3) (op e4 e3)) (= (op e3 e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t310 t145))
(step t412 (cl (= (not (= (op e3 e3) (op e4 e3))) (not (= (op e3 e3) (op (op (op e1 e3) e3) e3))))) :rule cong :premises (t411))
(step t413 (cl (not (= (op e3 e3) (op e4 e3)))) :rule and :premises (t245) :args (1))
(step t414 (cl (not (= (op e3 e3) (op (op (op e1 e3) e3) e3)))) :rule resolution :premises (t410 t412 t413))
(step t415 (cl (= (= (op e3 e3) (op (op (op e1 e3) e3) e3)) false)) :rule resolution :premises (t409 t414))
(step t416 (cl (= (= e3 (op (op (op e1 e3) e3) e3)) false)) :rule trans :premises (t405 t415))
(step t417 (cl (not (= e3 (op (op (op e1 e3) e3) e3)))) :rule resolution :premises (t403 t416))
(step t418 (cl (= (= (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false) (not (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t419 (cl (not (= (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false)) (not (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule equiv1 :premises (t418))
(step t420 (cl (not (= (= (op e4 e4) e4) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= (op e4 e4) e4)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule equiv_pos2)
(step t421 (cl (= (= (op e4 e4) e4) (= e4 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e4))
(step t422 (cl (= (= (op e4 e4) e4) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule trans :premises (t421 t144))
(step t423 (cl (= (op e4 e4) e4)) :rule and :premises (a7) :args (1))
(step t424 (cl (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule resolution :premises (t420 t422 t423))
(step t425 (cl (= (op (op (op e1 e3) e3) (op (op e1 e3) e3)) (op (op e1 e3) e3))) :rule symm :premises (t424))
(step t426 (cl (= (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e3 e3) (op (op e1 e3) e3)))) :rule cong :premises (t303 t425))
(step t427 (cl (= (= (= (op e3 e3) (op (op e1 e3) e3)) false) (not (= (op e3 e3) (op (op e1 e3) e3))))) :rule equiv_simplify)
(step t428 (cl (= (= (op e3 e3) (op (op e1 e3) e3)) false) (not (not (= (op e3 e3) (op (op e1 e3) e3))))) :rule equiv2 :premises (t427))
(step t429 (cl (not (not (not (= (op e3 e3) (op (op e1 e3) e3))))) (= (op e3 e3) (op (op e1 e3) e3))) :rule not_not)
(step t430 (cl (= (= (op e3 e3) (op (op e1 e3) e3)) false) (= (op e3 e3) (op (op e1 e3) e3))) :rule resolution :premises (t428 t429))
(step t431 (cl (not (= (not (= (op e2 e3) (op e3 e3))) (not (= (op e3 e3) (op (op e1 e3) e3))))) (not (not (= (op e2 e3) (op e3 e3)))) (not (= (op e3 e3) (op (op e1 e3) e3)))) :rule equiv_pos2)
(step t432 (cl (= (= (op e2 e3) (op e3 e3)) (= (op (op e1 e3) e3) (op e3 e3)))) :rule cong :premises (t15 t310))
(step t433 (cl (= (not (= (op e2 e3) (op e3 e3))) (not (= (op (op e1 e3) e3) (op e3 e3))))) :rule cong :premises (t432))
(step t434 (cl (= (= (op (op e1 e3) e3) (op e3 e3)) (= (op e3 e3) (op (op e1 e3) e3)))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e3) e3) (op e3 e3)))
(step t435 (cl (= (not (= (op (op e1 e3) e3) (op e3 e3))) (not (= (op e3 e3) (op (op e1 e3) e3))))) :rule cong :premises (t434))
(step t436 (cl (= (not (= (op e2 e3) (op e3 e3))) (not (= (op e3 e3) (op (op e1 e3) e3))))) :rule trans :premises (t433 t435))
(step t437 (cl (not (= (op e2 e3) (op e3 e3)))) :rule and :premises (t247) :args (1))
(step t438 (cl (not (= (op e3 e3) (op (op e1 e3) e3)))) :rule resolution :premises (t431 t436 t437))
(step t439 (cl (= (= (op e3 e3) (op (op e1 e3) e3)) false)) :rule resolution :premises (t430 t438))
(step t440 (cl (= (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false)) :rule trans :premises (t426 t439))
(step t441 (cl (not (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule resolution :premises (t419 t440))
(step t442 (cl (= e3 (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule resolution :premises (t354 t377 t401 t417 t441))
(step t443 (cl (not (= (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4)) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) e3))))) (not (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4))) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) e3)))) :rule equiv_pos2)
(step t444 (cl (= (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4)) (or (= (op e4 e3) e4) (= (op e4 e3) e3) (= (op e4 e3) e2) (= (op e4 e3) e0) (= (op e4 e3) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4)) (or (= (op e4 e3) e4) (= (op e4 e3) e3) (= (op e4 e3) e2) (= (op e4 e3) e0) (= (op e4 e3) e1)))))
(step t445 (cl (= (= (op e4 e3) e4) (= e4 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e4))
(step t446 (cl (= (= (op e4 e3) e2) (= e2 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e2))
(step t447 (cl (= (= (op e4 e3) e1) (= e1 (op e4 e3)))) :rule rare_rewrite :args ("eq-symm" (op e4 e3) e1))
(step t448 (cl (= (or (= (op e4 e3) e4) (= (op e4 e3) e3) (= (op e4 e3) e2) (= (op e4 e3) e0) (= (op e4 e3) e1)) (or (= e4 (op e4 e3)) (= e3 (op e4 e3)) (= e2 (op e4 e3)) (= e0 (op e4 e3)) (= e1 (op e4 e3))))) :rule cong :premises (t445 t339 t446 t118 t447))
(step t449 (cl (= (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4)) (or (= e4 (op e4 e3)) (= e3 (op e4 e3)) (= e2 (op e4 e3)) (= e0 (op e4 e3)) (= e1 (op e4 e3))))) :rule trans :premises (t444 t448))
(step t450 (cl (= (= e4 (op e4 e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t18 t145))
(step t451 (cl (= (= e2 (op e4 e3)) (= (op e1 e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t13 t145))
(step t452 (cl (= (= e1 (op e4 e3)) (= e1 (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t9 t145))
(step t453 (cl (= (or (= e4 (op e4 e3)) (= e3 (op e4 e3)) (= e2 (op e4 e3)) (= e0 (op e4 e3)) (= e1 (op e4 e3))) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) e3))))) :rule cong :premises (t450 t345 t451 t146 t452))
(step t454 (cl (= (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4)) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) e3))))) :rule trans :premises (t449 t453))
(step t455 (cl (and (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e0) e1)) (= (op e4 e0) e2)) (= (op e4 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e4 e1) e0) (= (op e4 e1) e1)) (= (op e4 e1) e2)) (= (op e4 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e4 e2) e0) (= (op e4 e2) e1)) (= (op e4 e2) e2)) (= (op e4 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4))) (or (or (or (or (= (op e4 e4) e0) (= (op e4 e4) e1)) (= (op e4 e4) e2)) (= (op e4 e4) e3)) (= (op e4 e4) e4)))) :rule and :premises (a0) :args (1))
(step t456 (cl (and (and (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e0) e1)) (= (op e4 e0) e2)) (= (op e4 e0) e3)) (= (op e4 e0) e4)) (or (or (or (or (= (op e4 e1) e0) (= (op e4 e1) e1)) (= (op e4 e1) e2)) (= (op e4 e1) e3)) (= (op e4 e1) e4))) (or (or (or (or (= (op e4 e2) e0) (= (op e4 e2) e1)) (= (op e4 e2) e2)) (= (op e4 e2) e3)) (= (op e4 e2) e4))) (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4)))) :rule and :premises (t455) :args (0))
(step t457 (cl (or (or (or (or (= (op e4 e3) e0) (= (op e4 e3) e1)) (= (op e4 e3) e2)) (= (op e4 e3) e3)) (= (op e4 e3) e4))) :rule and :premises (t456) :args (1))
(step t458 (cl (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) e3)))) :rule resolution :premises (t443 t454 t457))
(step t459 (cl (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) e3))) :rule or :premises (t458))
(step t460 (cl (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)) (= e1 (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) e3))) :rule reordering :premises (t459))
(step t461 (cl (not (= (not (= (op e1 e3) (op e4 e3))) (not (= (op e1 e3) (op (op (op e1 e3) e3) e3))))) (not (not (= (op e1 e3) (op e4 e3)))) (not (= (op e1 e3) (op (op (op e1 e3) e3) e3)))) :rule equiv_pos2)
(step t462 (cl (= (= (op e1 e3) (op e4 e3)) (= (op e1 e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t166 t145))
(step t463 (cl (= (not (= (op e1 e3) (op e4 e3))) (not (= (op e1 e3) (op (op (op e1 e3) e3) e3))))) :rule cong :premises (t462))
(step t464 (cl (not (= (op e1 e3) (op e4 e3)))) :rule and :premises (t248) :args (1))
(step t465 (cl (not (= (op e1 e3) (op (op (op e1 e3) e3) e3)))) :rule resolution :premises (t461 t463 t464))
(step t466 (cl (not (= (not (= (op e2 e3) (op e4 e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))) (not (not (= (op e2 e3) (op e4 e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule equiv_pos2)
(step t467 (cl (= (= (op e2 e3) (op e4 e3)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t15 t145))
(step t468 (cl (= (not (= (op e2 e3) (op e4 e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))) :rule cong :premises (t467))
(step t469 (cl (not (= (op e2 e3) (op e4 e3)))) :rule and :premises (t246) :args (1))
(step t470 (cl (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule resolution :premises (t466 t468 t469))
(step t471 (cl (= (= (= e1 (op (op (op e1 e3) e3) e3)) false) (not (= e1 (op (op (op e1 e3) e3) e3))))) :rule equiv_simplify)
(step t472 (cl (not (= (= e1 (op (op (op e1 e3) e3) e3)) false)) (not (= e1 (op (op (op e1 e3) e3) e3)))) :rule equiv1 :premises (t471))
(step t473 (cl (= (= e1 (op (op (op e1 e3) e3) e3)) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t321 t404))
(step t474 (cl (= (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) false) (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))) :rule equiv_simplify)
(step t475 (cl (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) false) (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))) :rule equiv2 :premises (t474))
(step t476 (cl (not (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) :rule not_not)
(step t477 (cl (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) false) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) :rule resolution :premises (t475 t476))
(step t478 (cl (not (= (not (= (op e0 e3) (op e4 e3))) (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))) (not (not (= (op e0 e3) (op e4 e3)))) (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule equiv_pos2)
(step t479 (cl (= (= (op e0 e3) (op e4 e3)) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t174 t145))
(step t480 (cl (= (not (= (op e0 e3) (op e4 e3))) (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))) :rule cong :premises (t479))
(step t481 (cl (not (= (op e0 e3) (op e4 e3)))) :rule and :premises (t251) :args (1))
(step t482 (cl (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule resolution :premises (t478 t480 t481))
(step t483 (cl (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) false)) :rule resolution :premises (t477 t482))
(step t484 (cl (= (= e1 (op (op (op e1 e3) e3) e3)) false)) :rule trans :premises (t473 t483))
(step t485 (cl (not (= e1 (op (op (op e1 e3) e3) e3)))) :rule resolution :premises (t472 t484))
(step t486 (cl (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) :rule resolution :premises (t460 t465 t470 t485 t417))
(step t487 (cl (not (= (= (op e2 e2) e2) (= (op e1 e3) (op (op e1 e3) (op e1 e3))))) (not (= (op e2 e2) e2)) (= (op e1 e3) (op (op e1 e3) (op e1 e3)))) :rule equiv_pos2)
(step t488 (cl (= (= (op e2 e2) e2) (= e2 (op e2 e2)))) :rule rare_rewrite :args ("eq-symm" (op e2 e2) e2))
(step t489 (cl (= (= (op e2 e2) e2) (= (op e1 e3) (op (op e1 e3) (op e1 e3))))) :rule trans :premises (t488 t162))
(step t490 (cl (= (op e2 e2) e2)) :rule and :premises (t270) :args (1))
(step t491 (cl (= (op e1 e3) (op (op e1 e3) (op e1 e3)))) :rule resolution :premises (t487 t489 t490))
(step t492 (cl (= (op e1 e1) e1)) :rule and :premises (t271) :args (1))
(step t493 (cl (= e1 (op e1 e1))) :rule symm :premises (t492))
(step t494 (cl (not (= (= (op e2 (op e2 e3)) e3) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (= (op e2 (op e2 e3)) e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) :rule equiv_pos2)
(step t495 (cl (= (= (op e2 (op e2 e3)) e3) (= e3 (op e2 (op e2 e3))))) :rule rare_rewrite :args ("eq-symm" (op e2 (op e2 e3)) e3))
(step t496 (cl (= (op e2 (op e2 e3)) (op (op e1 e3) (op (op e1 e3) e3)))) :rule cong :premises (t13 t15))
(step t497 (cl (= (= e3 (op e2 (op e2 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) :rule cong :premises (t14 t496))
(step t498 (cl (= (= (op e2 (op e2 e3)) e3) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) :rule trans :premises (t495 t497))
(step t499 (cl (= (op e2 (op e2 e3)) e3)) :rule and :premises (t110) :args (1))
(step t500 (cl (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) :rule resolution :premises (t494 t498 t499))
(step t501 (cl (not (= (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0)) (or (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3)))))) (not (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) (or (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t502 (cl (= (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0)) (or (= (op e4 e4) e0) (= (op e3 e4) e0) (= (op e2 e4) e0) (= (op e0 e4) e0) (= (op e1 e4) e0)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0)) (or (= (op e4 e4) e0) (= (op e3 e4) e0) (= (op e2 e4) e0) (= (op e0 e4) e0) (= (op e1 e4) e0)))))
(step t503 (cl (= (= (op e4 e4) e0) (= e0 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e0))
(step t504 (cl (= (= (op e3 e4) e0) (= e0 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e0))
(step t505 (cl (= (= (op e2 e4) e0) (= e0 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e0))
(step t506 (cl (= (= (op e0 e4) e0) (= e0 (op e0 e4)))) :rule rare_rewrite :args ("eq-symm" (op e0 e4) e0))
(step t507 (cl (= (or (= (op e4 e4) e0) (= (op e3 e4) e0) (= (op e2 e4) e0) (= (op e0 e4) e0) (= (op e1 e4) e0)) (or (= e0 (op e4 e4)) (= e0 (op e3 e4)) (= e0 (op e2 e4)) (= e0 (op e0 e4)) (= e0 (op e1 e4))))) :rule cong :premises (t503 t504 t505 t506 t131))
(step t508 (cl (= (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0)) (or (= e0 (op e4 e4)) (= e0 (op e3 e4)) (= e0 (op e2 e4)) (= e0 (op e0 e4)) (= e0 (op e1 e4))))) :rule trans :premises (t502 t507))
(step t509 (cl (= (= e0 (op e4 e4)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule cong :premises (t27 t19))
(step t510 (cl (= (= e0 (op e3 e4)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) :rule cong :premises (t27 t21))
(step t511 (cl (= (= e0 (op e2 e4)) (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))))) :rule cong :premises (t27 t23))
(step t512 (cl (= (= e0 (op e0 e4)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule cong :premises (t27 t28))
(step t513 (cl (= (or (= e0 (op e4 e4)) (= e0 (op e3 e4)) (= e0 (op e2 e4)) (= e0 (op e0 e4)) (= e0 (op e1 e4))) (or (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3)))))) :rule cong :premises (t509 t510 t511 t512 t165))
(step t514 (cl (= (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0)) (or (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3)))))) :rule trans :premises (t508 t513))
(step t515 (cl (and (or (or (or (or (= (op e4 e0) e0) (= (op e4 e1) e0)) (= (op e4 e2) e0)) (= (op e4 e3) e0)) (= (op e4 e4) e0)) (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0)))) :rule and :premises (t37) :args (0))
(step t516 (cl (or (or (or (or (= (op e0 e4) e0) (= (op e1 e4) e0)) (= (op e2 e4) e0)) (= (op e3 e4) e0)) (= (op e4 e4) e0))) :rule and :premises (t515) :args (1))
(step t517 (cl (or (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))))) :rule resolution :premises (t501 t514 t516))
(step t518 (cl (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3)))) :rule or :premises (t517))
(step t519 (cl (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e1 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule reordering :premises (t518))
(step t520 (cl (not (= (not (= (op e2 e1) (op e2 e4))) (not (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3)))))) (not (not (= (op e2 e1) (op e2 e4)))) (not (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t521 (cl (= (= (op e2 e1) (op e2 e4)) (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))))) :rule cong :premises (t26 t23))
(step t522 (cl (= (not (= (op e2 e1) (op e2 e4))) (not (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3)))))) :rule cong :premises (t521))
(step t523 (cl (and (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4)))) (not (= (op e2 e3) (op e2 e4))))) :rule and :premises (t285) :args (1))
(step t524 (cl (and (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3)))) (not (= (op e2 e2) (op e2 e4))))) :rule and :premises (t523) :args (0))
(step t525 (cl (and (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4)))) (not (= (op e2 e2) (op e2 e3))))) :rule and :premises (t524) :args (0))
(step t526 (cl (and (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3)))) (not (= (op e2 e1) (op e2 e4))))) :rule and :premises (t525) :args (0))
(step t527 (cl (not (= (op e2 e1) (op e2 e4)))) :rule and :premises (t526) :args (1))
(step t528 (cl (not (= (op (op e1 e3) e1) (op (op e1 e3) (op (op e1 e3) e3))))) :rule resolution :premises (t520 t522 t527))
(step t529 (cl (= (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t530 (cl (not (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false)) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule equiv1 :premises (t529))
(step t531 (cl (= (op (op (op e1 e3) e1) (op (op e1 e3) e3)) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) :rule refl)
(step t532 (cl (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule cong :premises (t273 t531))
(step t533 (cl (= (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t534 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false) (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule equiv2 :premises (t533))
(step t535 (cl (not (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) :rule not_not)
(step t536 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) :rule resolution :premises (t534 t535))
(step t537 (cl (not (= (not (= (op e0 e0) (op e0 e4))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (not (not (= (op e0 e0) (op e0 e4)))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t538 (cl (= (= (op e0 e0) (op e0 e4)) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule cong :premises (t178 t28))
(step t539 (cl (= (not (= (op e0 e0) (op e0 e4))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule cong :premises (t538))
(step t540 (cl (not (= (op e0 e0) (op e0 e4)))) :rule and :premises (t293) :args (1))
(step t541 (cl (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule resolution :premises (t537 t539 t540))
(step t542 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false)) :rule resolution :premises (t536 t541))
(step t543 (cl (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false)) :rule trans :premises (t532 t542))
(step t544 (cl (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule resolution :premises (t530 t543))
(step t545 (cl (not (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1)))))) (not (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4))) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))))) :rule equiv_pos2)
(step t546 (cl (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)) (or (= (op e4 e0) e4) (= (op e3 e0) e4) (= (op e2 e0) e4) (= (op e0 e0) e4) (= (op e1 e0) e4)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)) (or (= (op e4 e0) e4) (= (op e3 e0) e4) (= (op e2 e0) e4) (= (op e0 e0) e4) (= (op e1 e0) e4)))))
(step t547 (cl (= (= (op e4 e0) e4) (= e4 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e4))
(step t548 (cl (= (= (op e3 e0) e4) (= e4 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e4))
(step t549 (cl (= (= (op e2 e0) e4) (= e4 (op e2 e0)))) :rule rare_rewrite :args ("eq-symm" (op e2 e0) e4))
(step t550 (cl (= (= (op e0 e0) e4) (= e4 (op e0 e0)))) :rule rare_rewrite :args ("eq-symm" (op e0 e0) e4))
(step t551 (cl (= (or (= (op e4 e0) e4) (= (op e3 e0) e4) (= (op e2 e0) e4) (= (op e0 e0) e4) (= (op e1 e0) e4)) (or (= e4 (op e4 e0)) (= e4 (op e3 e0)) (= e4 (op e2 e0)) (= e4 (op e0 e0)) (= e4 (op e1 e0))))) :rule cong :premises (t547 t548 t549 t550 t135))
(step t552 (cl (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)) (or (= e4 (op e4 e0)) (= e4 (op e3 e0)) (= e4 (op e2 e0)) (= e4 (op e0 e0)) (= e4 (op e1 e0))))) :rule trans :premises (t546 t551))
(step t553 (cl (= (= e4 (op e4 e0)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule cong :premises (t18 t151))
(step t554 (cl (= (= e4 (op e3 e0)) (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) :rule cong :premises (t18 t90))
(step t555 (cl (= (= e4 (op e2 e0)) (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))))) :rule cong :premises (t18 t89))
(step t556 (cl (= (= e4 (op e0 e0)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))))) :rule cong :premises (t18 t178))
(step t557 (cl (= (or (= e4 (op e4 e0)) (= e4 (op e3 e0)) (= e4 (op e2 e0)) (= e4 (op e0 e0)) (= e4 (op e1 e0))) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1)))))) :rule cong :premises (t553 t554 t555 t556 t172))
(step t558 (cl (= (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)) (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1)))))) :rule trans :premises (t552 t557))
(step t559 (cl (and (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4))))) (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4)))))) :rule and :premises (a1) :args (0))
(step t560 (cl (and (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4))))) (and (and (and (and (and (or (or (or (or (= (op e2 e0) e0) (= (op e2 e1) e0)) (= (op e2 e2) e0)) (= (op e2 e3) e0)) (= (op e2 e4) e0)) (or (or (or (or (= (op e0 e2) e0) (= (op e1 e2) e0)) (= (op e2 e2) e0)) (= (op e3 e2) e0)) (= (op e4 e2) e0))) (and (or (or (or (or (= (op e2 e0) e1) (= (op e2 e1) e1)) (= (op e2 e2) e1)) (= (op e2 e3) e1)) (= (op e2 e4) e1)) (or (or (or (or (= (op e0 e2) e1) (= (op e1 e2) e1)) (= (op e2 e2) e1)) (= (op e3 e2) e1)) (= (op e4 e2) e1)))) (and (or (or (or (or (= (op e2 e0) e2) (= (op e2 e1) e2)) (= (op e2 e2) e2)) (= (op e2 e3) e2)) (= (op e2 e4) e2)) (or (or (or (or (= (op e0 e2) e2) (= (op e1 e2) e2)) (= (op e2 e2) e2)) (= (op e3 e2) e2)) (= (op e4 e2) e2)))) (and (or (or (or (or (= (op e2 e0) e3) (= (op e2 e1) e3)) (= (op e2 e2) e3)) (= (op e2 e3) e3)) (= (op e2 e4) e3)) (or (or (or (or (= (op e0 e2) e3) (= (op e1 e2) e3)) (= (op e2 e2) e3)) (= (op e3 e2) e3)) (= (op e4 e2) e3)))) (and (or (or (or (or (= (op e2 e0) e4) (= (op e2 e1) e4)) (= (op e2 e2) e4)) (= (op e2 e3) e4)) (= (op e2 e4) e4)) (or (or (or (or (= (op e0 e2) e4) (= (op e1 e2) e4)) (= (op e2 e2) e4)) (= (op e3 e2) e4)) (= (op e4 e2) e4)))))) :rule and :premises (t559) :args (0))
(step t561 (cl (and (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) (and (and (and (and (and (or (or (or (or (= (op e1 e0) e0) (= (op e1 e1) e0)) (= (op e1 e2) e0)) (= (op e1 e3) e0)) (= (op e1 e4) e0)) (or (or (or (or (= (op e0 e1) e0) (= (op e1 e1) e0)) (= (op e2 e1) e0)) (= (op e3 e1) e0)) (= (op e4 e1) e0))) (and (or (or (or (or (= (op e1 e0) e1) (= (op e1 e1) e1)) (= (op e1 e2) e1)) (= (op e1 e3) e1)) (= (op e1 e4) e1)) (or (or (or (or (= (op e0 e1) e1) (= (op e1 e1) e1)) (= (op e2 e1) e1)) (= (op e3 e1) e1)) (= (op e4 e1) e1)))) (and (or (or (or (or (= (op e1 e0) e2) (= (op e1 e1) e2)) (= (op e1 e2) e2)) (= (op e1 e3) e2)) (= (op e1 e4) e2)) (or (or (or (or (= (op e0 e1) e2) (= (op e1 e1) e2)) (= (op e2 e1) e2)) (= (op e3 e1) e2)) (= (op e4 e1) e2)))) (and (or (or (or (or (= (op e1 e0) e3) (= (op e1 e1) e3)) (= (op e1 e2) e3)) (= (op e1 e3) e3)) (= (op e1 e4) e3)) (or (or (or (or (= (op e0 e1) e3) (= (op e1 e1) e3)) (= (op e2 e1) e3)) (= (op e3 e1) e3)) (= (op e4 e1) e3)))) (and (or (or (or (or (= (op e1 e0) e4) (= (op e1 e1) e4)) (= (op e1 e2) e4)) (= (op e1 e3) e4)) (= (op e1 e4) e4)) (or (or (or (or (= (op e0 e1) e4) (= (op e1 e1) e4)) (= (op e2 e1) e4)) (= (op e3 e1) e4)) (= (op e4 e1) e4)))))) :rule and :premises (t560) :args (0))
(step t562 (cl (and (and (and (and (and (or (or (or (or (= (op e0 e0) e0) (= (op e0 e1) e0)) (= (op e0 e2) e0)) (= (op e0 e3) e0)) (= (op e0 e4) e0)) (or (or (or (or (= (op e0 e0) e0) (= (op e1 e0) e0)) (= (op e2 e0) e0)) (= (op e3 e0) e0)) (= (op e4 e0) e0))) (and (or (or (or (or (= (op e0 e0) e1) (= (op e0 e1) e1)) (= (op e0 e2) e1)) (= (op e0 e3) e1)) (= (op e0 e4) e1)) (or (or (or (or (= (op e0 e0) e1) (= (op e1 e0) e1)) (= (op e2 e0) e1)) (= (op e3 e0) e1)) (= (op e4 e0) e1)))) (and (or (or (or (or (= (op e0 e0) e2) (= (op e0 e1) e2)) (= (op e0 e2) e2)) (= (op e0 e3) e2)) (= (op e0 e4) e2)) (or (or (or (or (= (op e0 e0) e2) (= (op e1 e0) e2)) (= (op e2 e0) e2)) (= (op e3 e0) e2)) (= (op e4 e0) e2)))) (and (or (or (or (or (= (op e0 e0) e3) (= (op e0 e1) e3)) (= (op e0 e2) e3)) (= (op e0 e3) e3)) (= (op e0 e4) e3)) (or (or (or (or (= (op e0 e0) e3) (= (op e1 e0) e3)) (= (op e2 e0) e3)) (= (op e3 e0) e3)) (= (op e4 e0) e3)))) (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4))))) :rule and :premises (t561) :args (0))
(step t563 (cl (and (or (or (or (or (= (op e0 e0) e4) (= (op e0 e1) e4)) (= (op e0 e2) e4)) (= (op e0 e3) e4)) (= (op e0 e4) e4)) (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4)))) :rule and :premises (t562) :args (1))
(step t564 (cl (or (or (or (or (= (op e0 e0) e4) (= (op e1 e0) e4)) (= (op e2 e0) e4)) (= (op e3 e0) e4)) (= (op e4 e0) e4))) :rule and :premises (t563) :args (1))
(step t565 (cl (or (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))))) :rule resolution :premises (t545 t558 t564))
(step t566 (cl (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1)))) :rule or :premises (t565))
(step t567 (cl (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e1 (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule reordering :premises (t566))
(step t568 (cl (not (= (not (= (op e2 e0) (op e2 e3))) (not (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1)))))) (not (not (= (op e2 e0) (op e2 e3)))) (not (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))))) :rule equiv_pos2)
(step t569 (cl (= (= (op e2 e0) (op e2 e3)) (= (op (op e1 e3) (op (op e1 e3) e1)) (op (op e1 e3) e3)))) :rule cong :premises (t89 t15))
(step t570 (cl (= (not (= (op e2 e0) (op e2 e3))) (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op (op e1 e3) e3))))) :rule cong :premises (t569))
(step t571 (cl (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op (op e1 e3) e3)) (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e3) (op (op e1 e3) e1)) (op (op e1 e3) e3)))
(step t572 (cl (= (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op (op e1 e3) e3))) (not (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1)))))) :rule cong :premises (t571))
(step t573 (cl (= (not (= (op e2 e0) (op e2 e3))) (not (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1)))))) :rule trans :premises (t570 t572))
(step t574 (cl (and (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2)))) (not (= (op e2 e1) (op e2 e3))))) :rule and :premises (t526) :args (0))
(step t575 (cl (and (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4)))) (not (= (op e2 e1) (op e2 e2))))) :rule and :premises (t574) :args (0))
(step t576 (cl (and (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3)))) (not (= (op e2 e0) (op e2 e4))))) :rule and :premises (t575) :args (0))
(step t577 (cl (and (and (not (= (op e2 e0) (op e2 e1))) (not (= (op e2 e0) (op e2 e2)))) (not (= (op e2 e0) (op e2 e3))))) :rule and :premises (t576) :args (0))
(step t578 (cl (not (= (op e2 e0) (op e2 e3)))) :rule and :premises (t577) :args (1))
(step t579 (cl (not (= (op (op e1 e3) e3) (op (op e1 e3) (op (op e1 e3) e1))))) :rule resolution :premises (t568 t573 t578))
(step t580 (cl (= (= (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) false) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t581 (cl (not (= (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) false)) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))))) :rule equiv1 :premises (t580))
(step t582 (cl (= (op (op e1 e3) e3) (op (op e1 e3) e3))) :rule refl)
(step t583 (cl (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op e1 e3) e1))) :rule symm :premises (t273))
(step t584 (cl (= (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule cong :premises (t582 t583))
(step t585 (cl (= (= (= (op (op e1 e3) e3) (op (op e1 e3) e1)) false) (not (= (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule equiv_simplify)
(step t586 (cl (= (= (op (op e1 e3) e3) (op (op e1 e3) e1)) false) (not (not (= (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule equiv2 :premises (t585))
(step t587 (cl (not (not (not (= (op (op e1 e3) e3) (op (op e1 e3) e1))))) (= (op (op e1 e3) e3) (op (op e1 e3) e1))) :rule not_not)
(step t588 (cl (= (= (op (op e1 e3) e3) (op (op e1 e3) e1)) false) (= (op (op e1 e3) e3) (op (op e1 e3) e1))) :rule resolution :premises (t586 t587))
(step t589 (cl (not (= (not (= (op e2 e1) (op e2 e3))) (not (= (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= (op e2 e1) (op e2 e3)))) (not (= (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule equiv_pos2)
(step t590 (cl (= (= (op e2 e1) (op e2 e3)) (= (op (op e1 e3) e1) (op (op e1 e3) e3)))) :rule cong :premises (t26 t15))
(step t591 (cl (= (not (= (op e2 e1) (op e2 e3))) (not (= (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule cong :premises (t590))
(step t592 (cl (= (= (op (op e1 e3) e1) (op (op e1 e3) e3)) (= (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e3) e1) (op (op e1 e3) e3)))
(step t593 (cl (= (not (= (op (op e1 e3) e1) (op (op e1 e3) e3))) (not (= (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule cong :premises (t592))
(step t594 (cl (= (not (= (op e2 e1) (op e2 e3))) (not (= (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule trans :premises (t591 t593))
(step t595 (cl (not (= (op e2 e1) (op e2 e3)))) :rule and :premises (t574) :args (1))
(step t596 (cl (not (= (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule resolution :premises (t589 t594 t595))
(step t597 (cl (= (= (op (op e1 e3) e3) (op (op e1 e3) e1)) false)) :rule resolution :premises (t588 t596))
(step t598 (cl (= (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) false)) :rule trans :premises (t584 t597))
(step t599 (cl (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e1))))) :rule resolution :premises (t581 t598))
(step t600 (cl (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e3) e1))) (not (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) :rule and_neg)
(step t601 (cl (=> (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) :rule implies_neg1)
(anchor :step t602)
(assume t602.a0 (= (op e1 e3) (op (op (op e1 e3) e3) e1)))
(assume t602.a1 (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))
(step t602.t0 (cl (not (= (= (op e4 (op e4 e1)) e1) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) (not (= (op e4 (op e4 e1)) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) :rule equiv_pos2)
(step t602.t1 (cl (= (= (op e4 (op e4 e1)) e1) (= e1 (op e4 (op e4 e1))))) :rule rare_rewrite :args ("eq-symm" (op e4 (op e4 e1)) e1))
(step t602.t2 (cl (= (op e4 (op e4 e1)) (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) :rule cong :premises (t18 t149))
(step t602.t3 (cl (= (= e1 (op e4 (op e4 e1))) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) :rule cong :premises (t9 t602.t2))
(step t602.t4 (cl (= (= (op e4 (op e4 e1)) e1) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) :rule trans :premises (t602.t1 t602.t3))
(step t602.t5 (cl (and (and (and (and (= (op e4 (op e4 e0)) e0) (= (op e4 (op e4 e1)) e1)) (= (op e4 (op e4 e2)) e2)) (= (op e4 (op e4 e3)) e3)) (= (op e4 (op e4 e4)) e4))) :rule and :premises (a6) :args (1))
(step t602.t6 (cl (and (and (and (= (op e4 (op e4 e0)) e0) (= (op e4 (op e4 e1)) e1)) (= (op e4 (op e4 e2)) e2)) (= (op e4 (op e4 e3)) e3))) :rule and :premises (t602.t5) :args (0))
(step t602.t7 (cl (and (and (= (op e4 (op e4 e0)) e0) (= (op e4 (op e4 e1)) e1)) (= (op e4 (op e4 e2)) e2))) :rule and :premises (t602.t6) :args (0))
(step t602.t8 (cl (and (= (op e4 (op e4 e0)) e0) (= (op e4 (op e4 e1)) e1))) :rule and :premises (t602.t7) :args (0))
(step t602.t9 (cl (= (op e4 (op e4 e1)) e1)) :rule and :premises (t602.t8) :args (1))
(step t602.t10 (cl (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) :rule resolution :premises (t602.t0 t602.t4 t602.t9))
(step t602.t11 (cl (= (op (op (op e1 e3) e3) e1) (op e1 e3))) :rule symm :premises (t602.a0))
(step t602.t12 (cl (= (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)) (op (op (op e1 e3) e3) (op e1 e3)))) :rule cong :premises (t582 t602.t11))
(step t602.t13 (cl (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) :rule trans :premises (t602.t10 t602.t12))
(step t602 (cl (not (= (op e1 e3) (op (op (op e1 e3) e3) e1))) (not (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) :rule subproof :discharge (t602.a0 t602.a1))
(step t603 (cl (not (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) (= (op e1 e3) (op (op (op e1 e3) e3) e1))) :rule and_pos :args (0))
(step t604 (cl (not (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) :rule and_pos :args (1))
(step t605 (cl (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (not (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) (not (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))))) :rule resolution :premises (t602 t603 t604))
(step t606 (cl (not (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) (not (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) :rule reordering :premises (t605))
(step t607 (cl (not (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) :rule contraction :premises (t606))
(step t608 (cl (=> (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) :rule resolution :premises (t601 t607))
(step t609 (cl (=> (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) (not (= e1 (op (op (op e1 e3) e3) (op e1 e3))))) :rule implies_neg2)
(step t610 (cl (=> (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) (=> (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (= e1 (op (op (op e1 e3) e3) (op e1 e3))))) :rule resolution :premises (t608 t609))
(step t611 (cl (=> (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (= e1 (op (op (op e1 e3) e3) (op e1 e3))))) :rule contraction :premises (t610))
(step t612 (cl (not (and (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) :rule implies :premises (t611))
(step t613 (cl (not (= (op e1 e3) (op (op (op e1 e3) e3) e1))) (not (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) (= e1 (op (op (op e1 e3) e3) (op e1 e3)))) :rule resolution :premises (t600 t612))
(step t614 (cl (= e1 (op (op (op e1 e3) e3) (op e1 e3))) (not (= (op e1 e3) (op (op (op e1 e3) e3) e1))) (not (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) :rule reordering :premises (t613))
(step t615 (cl (not (= (= (op e4 (op e4 e1)) e1) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) (not (= (op e4 (op e4 e1)) e1)) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) :rule equiv_pos2)
(step t616 (cl (= (= (op e4 (op e4 e1)) e1) (= e1 (op e4 (op e4 e1))))) :rule rare_rewrite :args ("eq-symm" (op e4 (op e4 e1)) e1))
(step t617 (cl (= (op e4 (op e4 e1)) (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) :rule cong :premises (t18 t149))
(step t618 (cl (= (= e1 (op e4 (op e4 e1))) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) :rule cong :premises (t9 t617))
(step t619 (cl (= (= (op e4 (op e4 e1)) e1) (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1))))) :rule trans :premises (t616 t618))
(step t620 (cl (and (and (and (and (= (op e4 (op e4 e0)) e0) (= (op e4 (op e4 e1)) e1)) (= (op e4 (op e4 e2)) e2)) (= (op e4 (op e4 e3)) e3)) (= (op e4 (op e4 e4)) e4))) :rule and :premises (a6) :args (1))
(step t621 (cl (and (and (and (= (op e4 (op e4 e0)) e0) (= (op e4 (op e4 e1)) e1)) (= (op e4 (op e4 e2)) e2)) (= (op e4 (op e4 e3)) e3))) :rule and :premises (t620) :args (0))
(step t622 (cl (and (and (= (op e4 (op e4 e0)) e0) (= (op e4 (op e4 e1)) e1)) (= (op e4 (op e4 e2)) e2))) :rule and :premises (t621) :args (0))
(step t623 (cl (and (= (op e4 (op e4 e0)) e0) (= (op e4 (op e4 e1)) e1))) :rule and :premises (t622) :args (0))
(step t624 (cl (= (op e4 (op e4 e1)) e1)) :rule and :premises (t623) :args (1))
(step t625 (cl (= e1 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e1)))) :rule resolution :premises (t615 t619 t624))
(step t626 (cl (not (= (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))) (not (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) (or (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule equiv_pos2)
(step t627 (cl (= (= (= (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) true) (= (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))) :rule equiv_simplify)
(step t628 (cl (not (= (= (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) true)) (= (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule equiv1 :premises (t627))
(step t629 (cl (= (= (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))))) :rule rare_rewrite :args ("eq-symm" (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))
(step t630 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule refl)
(step t631 (cl (= (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule rare_rewrite :args ("bool-double-not-elim" (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))
(step t632 (cl (= (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))) (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))) :rule cong :premises (t630 t631))
(step t633 (cl (= (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) true)) :rule rare_rewrite :args ("eq-refl" (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))
(step t634 (cl (= (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))) true)) :rule trans :premises (t632 t633))
(step t635 (cl (= (= (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) true)) :rule trans :premises (t629 t634))
(step t636 (cl (= (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule resolution :premises (t628 t635))
(step t637 (cl (= (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))))) :rule refl)
(step t638 (cl (= (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule refl)
(step t639 (cl (= (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))))) :rule refl)
(step t640 (cl (= (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule refl)
(step t641 (cl (= (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))))) :rule cong :premises (t636 t637 t638 t639 t57 t640))
(step t642 (cl (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule and_neg)
(step t643 (cl (=> (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule implies_neg1)
(anchor :step t644)
(assume t644.a0 (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))
(assume t644.a1 (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))))
(assume t644.a2 (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))
(assume t644.a3 (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))
(assume t644.a4 (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))
(step t644.t0 (cl (= (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t644.t1 (cl (not (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false)) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule equiv1 :premises (t644.t0))
(step t644.t2 (cl (not (= (= (op e0 (op e0 e4)) e4) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (not (= (op e0 (op e0 e4)) e4)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t644.t3 (cl (= (= (op e0 (op e0 e4)) e4) (= e4 (op e0 (op e0 e4))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op e0 e4)) e4))
(step t644.t4 (cl (= (op e0 (op e0 e4)) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule cong :premises (t27 t28))
(step t644.t5 (cl (= (= e4 (op e0 (op e0 e4))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule cong :premises (t18 t644.t4))
(step t644.t6 (cl (= (= (op e0 (op e0 e4)) e4) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule trans :premises (t644.t3 t644.t5))
(step t644.t7 (cl (= (op e0 (op e0 e4)) e4)) :rule and :premises (t328) :args (1))
(step t644.t8 (cl (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule resolution :premises (t644.t2 t644.t6 t644.t7))
(step t644.t9 (cl (= (op (op (op e1 e3) e1) (op (op e1 e3) e3)) (op e1 e3))) :rule symm :premises (t644.a2))
(step t644.t10 (cl (= (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (op (op (op e1 e3) e1) (op e1 e3)))) :rule cong :premises (t332 t644.t9))
(step t644.t11 (cl (= (op (op (op e1 e3) e3) (op (op e1 e3) e3)) (op (op (op e1 e3) e1) (op e1 e3)))) :rule trans :premises (t425 t644.t8 t644.t10))
(step t644.t12 (cl (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule cong :premises (t273 t644.t11))
(step t644.t13 (cl (= (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) false) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))) :rule equiv_simplify)
(step t644.t14 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) false) (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))) :rule equiv2 :premises (t644.t13))
(step t644.t15 (cl (not (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) :rule not_not)
(step t644.t16 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) false) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) :rule resolution :premises (t644.t14 t644.t15))
(step t644.t17 (cl (not (= (not (= (op e0 e0) (op e0 e2))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))) (not (not (= (op e0 e0) (op e0 e2)))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule equiv_pos2)
(step t644.t18 (cl (= (= (op e0 e0) (op e0 e2)) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule cong :premises (t178 t176))
(step t644.t19 (cl (= (not (= (op e0 e0) (op e0 e2))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))) :rule cong :premises (t644.t18))
(step t644.t20 (cl (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2))))) :rule and :premises (t294) :args (0))
(step t644.t21 (cl (not (= (op e0 e0) (op e0 e2)))) :rule and :premises (t644.t20) :args (1))
(step t644.t22 (cl (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule resolution :premises (t644.t17 t644.t19 t644.t21))
(step t644.t23 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) false)) :rule resolution :premises (t644.t16 t644.t22))
(step t644.t24 (cl (= (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false)) :rule trans :premises (t644.t12 t644.t23))
(step t644.t25 (cl (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule resolution :premises (t644.t1 t644.t24))
(step t644 (cl (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule subproof :discharge (t644.a0 t644.a1 t644.a2 t644.a3 t644.a4))
(step t645 (cl (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule and_pos :args (0))
(step t646 (cl (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) :rule and_pos :args (1))
(step t647 (cl (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) :rule and_pos :args (2))
(step t648 (cl (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule and_pos :args (3))
(step t649 (cl (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule and_pos :args (4))
(step t650 (cl (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t644 t645 t646 t647 t648 t649))
(step t651 (cl (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule reordering :premises (t650))
(step t652 (cl (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule contraction :premises (t651))
(step t653 (cl (=> (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule resolution :premises (t643 t652))
(step t654 (cl (=> (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule implies_neg2)
(step t655 (cl (=> (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (=> (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t653 t654))
(step t656 (cl (=> (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule contraction :premises (t655))
(step t657 (cl (not (and (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule implies :premises (t656))
(step t658 (cl (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule resolution :premises (t642 t657))
(step t659 (cl (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))))) :rule or_neg :args (0))
(step t660 (cl (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))))) :rule or_neg :args (1))
(step t661 (cl (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule or_neg :args (2))
(step t662 (cl (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))))) :rule or_neg :args (3))
(step t663 (cl (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule or_neg :args (4))
(step t664 (cl (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule or_neg :args (5))
(step t665 (cl (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t658 t659 t660 t661 t662 t663 t664))
(step t666 (cl (or (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule contraction :premises (t665))
(step t667 (cl (or (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t626 t641 t666))
(step t668 (cl (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule or :premises (t667))
(step t669 (cl (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule reordering :premises (t668))
(step t670 (cl (not (= (not (= (op e0 e0) (op e0 e2))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))) (not (not (= (op e0 e0) (op e0 e2)))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule equiv_pos2)
(step t671 (cl (= (= (op e0 e0) (op e0 e2)) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule cong :premises (t178 t176))
(step t672 (cl (= (not (= (op e0 e0) (op e0 e2))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3)))))) :rule cong :premises (t671))
(step t673 (cl (and (not (= (op e0 e0) (op e0 e1))) (not (= (op e0 e0) (op e0 e2))))) :rule and :premises (t294) :args (0))
(step t674 (cl (not (= (op e0 e0) (op e0 e2)))) :rule and :premises (t673) :args (1))
(step t675 (cl (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op (op (op e1 e3) e1) (op e1 e3))))) :rule resolution :premises (t670 t672 t674))
(step t676 (cl (not (= (= (op e0 (op e0 e4)) e4) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (not (= (op e0 (op e0 e4)) e4)) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t677 (cl (= (= (op e0 (op e0 e4)) e4) (= e4 (op e0 (op e0 e4))))) :rule rare_rewrite :args ("eq-symm" (op e0 (op e0 e4)) e4))
(step t678 (cl (= (op e0 (op e0 e4)) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule cong :premises (t27 t28))
(step t679 (cl (= (= e4 (op e0 (op e0 e4))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule cong :premises (t18 t678))
(step t680 (cl (= (= (op e0 (op e0 e4)) e4) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule trans :premises (t677 t679))
(step t681 (cl (= (op e0 (op e0 e4)) e4)) :rule and :premises (t328) :args (1))
(step t682 (cl (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule resolution :premises (t676 t680 t681))
(step t683 (cl (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule and_neg)
(step t684 (cl (=> (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule implies_neg1)
(anchor :step t685)
(assume t685.a0 (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))
(assume t685.a1 (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))
(step t685.t0 (cl (= (op (op (op e1 e3) e1) (op (op e1 e3) e3)) (op e1 e3))) :rule symm :premises (t685.a0))
(step t685.t1 (cl (= (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (op (op (op e1 e3) e1) (op e1 e3)))) :rule cong :premises (t332 t685.t0))
(step t685.t2 (cl (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) :rule trans :premises (t682 t685.t1))
(step t685 (cl (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) :rule subproof :discharge (t685.a0 t685.a1))
(step t686 (cl (not (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) :rule and_pos :args (0))
(step t687 (cl (not (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule and_pos :args (1))
(step t688 (cl (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (not (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (not (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))))) :rule resolution :premises (t685 t686 t687))
(step t689 (cl (not (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (not (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) :rule reordering :premises (t688))
(step t690 (cl (not (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) :rule contraction :premises (t689))
(step t691 (cl (=> (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) :rule resolution :premises (t684 t690))
(step t692 (cl (=> (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))))) :rule implies_neg2)
(step t693 (cl (=> (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) (=> (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))))) :rule resolution :premises (t691 t692))
(step t694 (cl (=> (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))))) :rule contraction :premises (t693))
(step t695 (cl (not (and (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) :rule implies :premises (t694))
(step t696 (cl (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3)))) :rule resolution :premises (t683 t695))
(step t697 (cl (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op e1 e3))) (not (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e1) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule reordering :premises (t696))
(step t698 (cl (not (= (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))))) (not (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))))) (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))))) :rule equiv_pos2)
(step t699 (cl (= (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule refl)
(step t700 (cl (= (= (= (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (= (op e3 e1) (op e3 (op (op e1 e3) e1)))) true) (= (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t701 (cl (not (= (= (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (= (op e3 e1) (op e3 (op (op e1 e3) e1)))) true)) (= (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule equiv1 :premises (t700))
(step t702 (cl (= (= (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (= (op e3 e1) (op e3 (op (op e1 e3) e1)))) (= (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))))) :rule rare_rewrite :args ("eq-symm" (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))
(step t703 (cl (= (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule refl)
(step t704 (cl (= (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule rare_rewrite :args ("bool-double-not-elim" (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))
(step t705 (cl (= (= (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (= (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) :rule cong :premises (t703 t704))
(step t706 (cl (= (= (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (= (op e3 e1) (op e3 (op (op e1 e3) e1)))) true)) :rule rare_rewrite :args ("eq-refl" (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))
(step t707 (cl (= (= (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) true)) :rule trans :premises (t705 t706))
(step t708 (cl (= (= (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (= (op e3 e1) (op e3 (op (op e1 e3) e1)))) true)) :rule trans :premises (t702 t707))
(step t709 (cl (= (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t701 t708))
(step t710 (cl (= (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))))) :rule refl)
(step t711 (cl (= (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))))) :rule cong :premises (t56 t699 t709 t710))
(step t712 (cl (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) :rule and_neg)
(step t713 (cl (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) :rule implies_neg1)
(anchor :step t714)
(assume t714.a0 (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))
(assume t714.a1 (= e1 (op e3 (op (op e1 e3) e3))))
(assume t714.a2 (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))
(step t714.t0 (cl (= (= (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) false) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t714.t1 (cl (not (= (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) false)) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) :rule equiv1 :premises (t714.t0))
(step t714.t2 (cl (not (= (= (op e3 (op e3 e4)) e4) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) (not (= (op e3 (op e3 e4)) e4)) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t714.t3 (cl (= (= (op e3 (op e3 e4)) e4) (= e4 (op e3 (op e3 e4))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op e3 e4)) e4))
(step t714.t4 (cl (= (op e3 (op e3 e4)) (op e3 (op e3 (op (op e1 e3) e3))))) :rule cong :premises (t14 t21))
(step t714.t5 (cl (= (= e4 (op e3 (op e3 e4))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) :rule cong :premises (t18 t714.t4))
(step t714.t6 (cl (= (= (op e3 (op e3 e4)) e4) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) :rule trans :premises (t714.t3 t714.t5))
(step t714.t7 (cl (and (and (and (and (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2)) (= (op e3 (op e3 e3)) e3)) (= (op e3 (op e3 e4)) e4))) :rule and :premises (t107) :args (1))
(step t714.t8 (cl (= (op e3 (op e3 e4)) e4)) :rule and :premises (t714.t7) :args (1))
(step t714.t9 (cl (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t714.t2 t714.t6 t714.t8))
(step t714.t10 (cl (= (op e3 (op (op e1 e3) e3)) e1)) :rule symm :premises (t714.a1))
(step t714.t11 (cl (= (op e3 (op e3 (op (op e1 e3) e3))) (op e3 e1))) :rule cong :premises (t14 t714.t10))
(step t714.t12 (cl (= (op (op e1 e3) e3) (op e3 e1))) :rule trans :premises (t714.t9 t714.t11))
(step t714.t13 (cl (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) :rule refl)
(step t714.t14 (cl (= (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule cong :premises (t714.t12 t714.t13))
(step t714.t15 (cl (= (= (= (op e3 e1) (op e3 (op (op e1 e3) e1))) false) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t714.t16 (cl (= (= (op e3 e1) (op e3 (op (op e1 e3) e1))) false) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) :rule equiv2 :premises (t714.t15))
(step t714.t17 (cl (not (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (= (op e3 e1) (op e3 (op (op e1 e3) e1)))) :rule not_not)
(step t714.t18 (cl (= (= (op e3 e1) (op e3 (op (op e1 e3) e1))) false) (= (op e3 e1) (op e3 (op (op e1 e3) e1)))) :rule resolution :premises (t714.t16 t714.t17))
(step t714.t19 (cl (not (= (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (not (not (= (op e3 e0) (op e3 e1)))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule equiv_pos2)
(step t714.t20 (cl (= (= (op e3 e0) (op e3 e1)) (= (op e3 (op (op e1 e3) e1)) (op e3 e1)))) :rule cong :premises (t90 t156))
(step t714.t21 (cl (= (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 (op (op e1 e3) e1)) (op e3 e1))))) :rule cong :premises (t714.t20))
(step t714.t22 (cl (= (= (op e3 (op (op e1 e3) e1)) (op e3 e1)) (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op (op e1 e3) e1)) (op e3 e1)))
(step t714.t23 (cl (= (not (= (op e3 (op (op e1 e3) e1)) (op e3 e1))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) :rule cong :premises (t714.t22))
(step t714.t24 (cl (= (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) :rule trans :premises (t714.t21 t714.t23))
(step t714.t25 (cl (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) :rule and :premises (t284) :args (1))
(step t714.t26 (cl (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4))))) :rule and :premises (t714.t25) :args (0))
(step t714.t27 (cl (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3))))) :rule and :premises (t714.t26) :args (0))
(step t714.t28 (cl (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4))))) :rule and :premises (t714.t27) :args (0))
(step t714.t29 (cl (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3))))) :rule and :premises (t714.t28) :args (0))
(step t714.t30 (cl (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2))))) :rule and :premises (t714.t29) :args (0))
(step t714.t31 (cl (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4))))) :rule and :premises (t714.t30) :args (0))
(step t714.t32 (cl (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3))))) :rule and :premises (t714.t31) :args (0))
(step t714.t33 (cl (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2))))) :rule and :premises (t714.t32) :args (0))
(step t714.t34 (cl (not (= (op e3 e0) (op e3 e1)))) :rule and :premises (t714.t33) :args (0))
(step t714.t35 (cl (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t714.t19 t714.t24 t714.t34))
(step t714.t36 (cl (= (= (op e3 e1) (op e3 (op (op e1 e3) e1))) false)) :rule resolution :premises (t714.t18 t714.t35))
(step t714.t37 (cl (= (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))) false)) :rule trans :premises (t714.t14 t714.t36))
(step t714.t38 (cl (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t714.t1 t714.t37))
(step t714 (cl (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) :rule subproof :discharge (t714.a0 t714.a1 t714.a2))
(step t715 (cl (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) :rule and_pos :args (0))
(step t716 (cl (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (= e1 (op e3 (op (op e1 e3) e3)))) :rule and_pos :args (1))
(step t717 (cl (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule and_pos :args (2))
(step t718 (cl (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))) (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))))) :rule resolution :premises (t714 t715 t716 t717))
(step t719 (cl (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) :rule reordering :premises (t718))
(step t720 (cl (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) :rule contraction :premises (t719))
(step t721 (cl (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t713 t720))
(step t722 (cl (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (not (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))))) :rule implies_neg2)
(step t723 (cl (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))))) :rule resolution :premises (t721 t722))
(step t724 (cl (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))))) :rule contraction :premises (t723))
(step t725 (cl (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) :rule implies :premises (t724))
(step t726 (cl (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t712 t725))
(step t727 (cl (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (not (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))))) :rule or_neg :args (0))
(step t728 (cl (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (not (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule or_neg :args (1))
(step t729 (cl (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (not (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))))) :rule or_neg :args (2))
(step t730 (cl (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (not (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))))) :rule or_neg :args (3))
(step t731 (cl (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))))) :rule resolution :premises (t726 t727 t728 t729 t730))
(step t732 (cl (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))))) :rule contraction :premises (t731))
(step t733 (cl (or (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))))) :rule resolution :premises (t698 t711 t732))
(step t734 (cl (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1))))) :rule or :premises (t733))
(step t735 (cl (= (op e3 e1) (op e3 (op (op e1 e3) e1))) (not (= (op (op e1 e3) e3) (op e3 (op (op e1 e3) e1)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) :rule reordering :premises (t734))
(step t736 (cl (not (= (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) (not (not (= (op e3 e0) (op e3 e1)))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule equiv_pos2)
(step t737 (cl (= (= (op e3 e0) (op e3 e1)) (= (op e3 (op (op e1 e3) e1)) (op e3 e1)))) :rule cong :premises (t90 t156))
(step t738 (cl (= (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 (op (op e1 e3) e1)) (op e3 e1))))) :rule cong :premises (t737))
(step t739 (cl (= (= (op e3 (op (op e1 e3) e1)) (op e3 e1)) (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op (op e1 e3) e1)) (op e3 e1)))
(step t740 (cl (= (not (= (op e3 (op (op e1 e3) e1)) (op e3 e1))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) :rule cong :premises (t739))
(step t741 (cl (= (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e1) (op e3 (op (op e1 e3) e1)))))) :rule trans :premises (t738 t740))
(step t742 (cl (and (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4)))) (not (= (op e3 e3) (op e3 e4))))) :rule and :premises (t284) :args (1))
(step t743 (cl (and (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3)))) (not (= (op e3 e2) (op e3 e4))))) :rule and :premises (t742) :args (0))
(step t744 (cl (and (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4)))) (not (= (op e3 e2) (op e3 e3))))) :rule and :premises (t743) :args (0))
(step t745 (cl (and (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3)))) (not (= (op e3 e1) (op e3 e4))))) :rule and :premises (t744) :args (0))
(step t746 (cl (and (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2)))) (not (= (op e3 e1) (op e3 e3))))) :rule and :premises (t745) :args (0))
(step t747 (cl (and (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 e1) (op e3 e2))))) :rule and :premises (t746) :args (0))
(step t748 (cl (and (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3)))) (not (= (op e3 e0) (op e3 e4))))) :rule and :premises (t747) :args (0))
(step t749 (cl (and (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2)))) (not (= (op e3 e0) (op e3 e3))))) :rule and :premises (t748) :args (0))
(step t750 (cl (and (not (= (op e3 e0) (op e3 e1))) (not (= (op e3 e0) (op e3 e2))))) :rule and :premises (t749) :args (0))
(step t751 (cl (not (= (op e3 e0) (op e3 e1)))) :rule and :premises (t750) :args (0))
(step t752 (cl (not (= (op e3 e1) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t736 t741 t751))
(step t753 (cl (not (= (= (op e3 (op e3 e4)) e4) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) (not (= (op e3 (op e3 e4)) e4)) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t754 (cl (= (= (op e3 (op e3 e4)) e4) (= e4 (op e3 (op e3 e4))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op e3 e4)) e4))
(step t755 (cl (= (op e3 (op e3 e4)) (op e3 (op e3 (op (op e1 e3) e3))))) :rule cong :premises (t14 t21))
(step t756 (cl (= (= e4 (op e3 (op e3 e4))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) :rule cong :premises (t18 t755))
(step t757 (cl (= (= (op e3 (op e3 e4)) e4) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) :rule trans :premises (t754 t756))
(step t758 (cl (and (and (and (and (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2)) (= (op e3 (op e3 e3)) e3)) (= (op e3 (op e3 e4)) e4))) :rule and :premises (t107) :args (1))
(step t759 (cl (= (op e3 (op e3 e4)) e4)) :rule and :premises (t758) :args (1))
(step t760 (cl (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t753 t757 t759))
(step t761 (cl (not (= (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (= (op e3 e1) (op e3 e3)) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))))) (not (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (or (= (op e3 e1) (op e3 e3)) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule equiv_pos2)
(step t762 (cl (= (= (= (not (not (= (op e3 e1) (op e3 e3)))) (= (op e3 e1) (op e3 e3))) true) (= (not (not (= (op e3 e1) (op e3 e3)))) (= (op e3 e1) (op e3 e3))))) :rule equiv_simplify)
(step t763 (cl (not (= (= (not (not (= (op e3 e1) (op e3 e3)))) (= (op e3 e1) (op e3 e3))) true)) (= (not (not (= (op e3 e1) (op e3 e3)))) (= (op e3 e1) (op e3 e3)))) :rule equiv1 :premises (t762))
(step t764 (cl (= (= (not (not (= (op e3 e1) (op e3 e3)))) (= (op e3 e1) (op e3 e3))) (= (= (op e3 e1) (op e3 e3)) (not (not (= (op e3 e1) (op e3 e3))))))) :rule rare_rewrite :args ("eq-symm" (not (not (= (op e3 e1) (op e3 e3)))) (= (op e3 e1) (op e3 e3))))
(step t765 (cl (= (= (op e3 e1) (op e3 e3)) (= (op e3 e1) (op e3 e3)))) :rule refl)
(step t766 (cl (= (not (not (= (op e3 e1) (op e3 e3)))) (= (op e3 e1) (op e3 e3)))) :rule rare_rewrite :args ("bool-double-not-elim" (= (op e3 e1) (op e3 e3))))
(step t767 (cl (= (= (= (op e3 e1) (op e3 e3)) (not (not (= (op e3 e1) (op e3 e3))))) (= (= (op e3 e1) (op e3 e3)) (= (op e3 e1) (op e3 e3))))) :rule cong :premises (t765 t766))
(step t768 (cl (= (= (= (op e3 e1) (op e3 e3)) (= (op e3 e1) (op e3 e3))) true)) :rule rare_rewrite :args ("eq-refl" (= (op e3 e1) (op e3 e3))))
(step t769 (cl (= (= (= (op e3 e1) (op e3 e3)) (not (not (= (op e3 e1) (op e3 e3))))) true)) :rule trans :premises (t767 t768))
(step t770 (cl (= (= (not (not (= (op e3 e1) (op e3 e3)))) (= (op e3 e1) (op e3 e3))) true)) :rule trans :premises (t764 t769))
(step t771 (cl (= (not (not (= (op e3 e1) (op e3 e3)))) (= (op e3 e1) (op e3 e3)))) :rule resolution :premises (t763 t770))
(step t772 (cl (= (not (= e3 (op e3 e3))) (not (= e3 (op e3 e3))))) :rule refl)
(step t773 (cl (= (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))))) :rule refl)
(step t774 (cl (= (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))))) :rule refl)
(step t775 (cl (= (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))))) :rule refl)
(step t776 (cl (= (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule refl)
(step t777 (cl (= (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (= (op e3 e1) (op e3 e3)) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))))) :rule cong :premises (t771 t699 t56 t772 t773 t774 t775 t776))
(step t778 (cl (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) :rule and_neg)
(step t779 (cl (=> (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) :rule implies_neg1)
(anchor :step t780)
(assume t780.a0 (not (= (op e3 e1) (op e3 e3))))
(assume t780.a1 (= e1 (op e3 (op (op e1 e3) e3))))
(assume t780.a2 (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))
(assume t780.a3 (= e3 (op e3 e3)))
(assume t780.a4 (= e3 (op (op e1 e3) (op (op e1 e3) e3))))
(assume t780.a5 (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))
(assume t780.a6 (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))
(step t780.t0 (cl (= (= (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t780.t1 (cl (not (= (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false)) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule equiv1 :premises (t780.t0))
(step t780.t2 (cl (= (op e3 (op (op e1 e3) e3)) e1)) :rule symm :premises (t780.a1))
(step t780.t3 (cl (= (op e3 (op e3 (op (op e1 e3) e3))) (op e3 e1))) :rule cong :premises (t14 t780.t2))
(step t780.t4 (cl (= (op (op e1 e3) e3) (op e3 e1))) :rule trans :premises (t760 t780.t3))
(step t780.t5 (cl (= (op (op e1 e3) (op (op e1 e3) e3)) e3)) :rule symm :premises (t500))
(step t780.t6 (cl (= (op (op e1 e3) (op (op e1 e3) e3)) (op e3 e3))) :rule trans :premises (t780.t5 t303))
(step t780.t7 (cl (= (op e3 e3) (op (op e1 e3) (op (op e1 e3) e3)))) :rule symm :premises (t780.t6))
(step t780.t8 (cl (not (= (= (op e4 (op e4 e3)) e3) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))) (not (= (op e4 (op e4 e3)) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule equiv_pos2)
(step t780.t9 (cl (= (= (op e4 (op e4 e3)) e3) (= e3 (op e4 (op e4 e3))))) :rule rare_rewrite :args ("eq-symm" (op e4 (op e4 e3)) e3))
(step t780.t10 (cl (= (op e4 (op e4 e3)) (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t18 t145))
(step t780.t11 (cl (= (= e3 (op e4 (op e4 e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))) :rule cong :premises (t14 t780.t10))
(step t780.t12 (cl (= (= (op e4 (op e4 e3)) e3) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))) :rule trans :premises (t780.t9 t780.t11))
(step t780.t13 (cl (= (op e4 (op e4 e3)) e3)) :rule and :premises (t621) :args (1))
(step t780.t14 (cl (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule resolution :premises (t780.t8 t780.t12 t780.t13))
(step t780.t15 (cl (= (op (op (op e1 e3) e3) e3) (op (op e1 e3) e1))) :rule symm :premises (t486))
(step t780.t16 (cl (= (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule cong :premises (t582 t780.t15))
(step t780.t17 (cl (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule trans :premises (t382 t780.t14 t780.t16))
(step t780.t18 (cl (= (op (op (op e1 e3) e3) (op (op e1 e3) e1)) (op e1 (op e1 e3)))) :rule symm :premises (t780.t17))
(step t780.t19 (cl (= (op (op e1 e3) (op (op e1 e3) e3)) (op e1 (op e1 e3)))) :rule trans :premises (t780.t5 t383))
(step t780.t20 (cl (= (op e1 (op e1 e3)) (op (op e1 e3) (op (op e1 e3) e3)))) :rule symm :premises (t780.t19))
(step t780.t21 (cl (= (op (op (op e1 e3) e3) (op (op e1 e3) e1)) (op (op e1 e3) (op (op e1 e3) e3)))) :rule trans :premises (t780.t18 t780.t20))
(step t780.t22 (cl (= (op (op e1 e3) (op (op e1 e3) e3)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule symm :premises (t780.t21))
(step t780.t23 (cl (= (op e3 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule trans :premises (t780.t7 t780.t22))
(step t780.t24 (cl (= (op (op (op e1 e3) e3) (op (op e1 e3) e1)) (op e3 e3))) :rule symm :premises (t780.t23))
(step t780.t25 (cl (= (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e3 e1) (op e3 e3)))) :rule cong :premises (t780.t4 t780.t24))
(step t780.t26 (cl (= (= (= (op e3 e1) (op e3 e3)) false) (not (= (op e3 e1) (op e3 e3))))) :rule equiv_simplify)
(step t780.t27 (cl (= (= (op e3 e1) (op e3 e3)) false) (not (not (= (op e3 e1) (op e3 e3))))) :rule equiv2 :premises (t780.t26))
(step t780.t28 (cl (not (not (not (= (op e3 e1) (op e3 e3))))) (= (op e3 e1) (op e3 e3))) :rule not_not)
(step t780.t29 (cl (= (= (op e3 e1) (op e3 e3)) false) (= (op e3 e1) (op e3 e3))) :rule resolution :premises (t780.t27 t780.t28))
(step t780.t30 (cl (not (= (op e3 e1) (op e3 e3)))) :rule and :premises (t746) :args (1))
(step t780.t31 (cl (= (= (op e3 e1) (op e3 e3)) false)) :rule resolution :premises (t780.t29 t780.t30))
(step t780.t32 (cl (= (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false)) :rule trans :premises (t780.t25 t780.t31))
(step t780.t33 (cl (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule resolution :premises (t780.t1 t780.t32))
(step t780 (cl (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule subproof :discharge (t780.a0 t780.a1 t780.a2 t780.a3 t780.a4 t780.a5 t780.a6))
(step t781 (cl (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (= (op e3 e1) (op e3 e3)))) :rule and_pos :args (0))
(step t782 (cl (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3)))) :rule and_pos :args (1))
(step t783 (cl (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) :rule and_pos :args (2))
(step t784 (cl (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (= e3 (op e3 e3))) :rule and_pos :args (3))
(step t785 (cl (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) :rule and_pos :args (4))
(step t786 (cl (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule and_pos :args (5))
(step t787 (cl (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) :rule and_pos :args (6))
(step t788 (cl (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))))) :rule resolution :premises (t780 t781 t782 t783 t784 t785 t786 t787))
(step t789 (cl (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule reordering :premises (t788))
(step t790 (cl (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule contraction :premises (t789))
(step t791 (cl (=> (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule resolution :premises (t779 t790))
(step t792 (cl (=> (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule implies_neg2)
(step t793 (cl (=> (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (=> (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule resolution :premises (t791 t792))
(step t794 (cl (=> (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule contraction :premises (t793))
(step t795 (cl (not (and (not (= (op e3 e1) (op e3 e3))) (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e3 (op e3 e3)) (= e3 (op (op e1 e3) (op (op e1 e3) e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule implies :premises (t794))
(step t796 (cl (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule resolution :premises (t778 t795))
(step t797 (cl (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (not (= (op e3 e1) (op e3 e3)))))) :rule or_neg :args (0))
(step t798 (cl (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule or_neg :args (1))
(step t799 (cl (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))))) :rule or_neg :args (2))
(step t800 (cl (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= e3 (op e3 e3))))) :rule or_neg :args (3))
(step t801 (cl (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))))) :rule or_neg :args (4))
(step t802 (cl (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))))) :rule or_neg :args (5))
(step t803 (cl (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))))) :rule or_neg :args (6))
(step t804 (cl (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule or_neg :args (7))
(step t805 (cl (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule resolution :premises (t796 t797 t798 t799 t800 t801 t802 t803 t804))
(step t806 (cl (or (not (not (= (op e3 e1) (op e3 e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule contraction :premises (t805))
(step t807 (cl (or (= (op e3 e1) (op e3 e3)) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule resolution :premises (t761 t777 t806))
(step t808 (cl (= (op e3 e1) (op e3 e3)) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule or :premises (t807))
(step t809 (cl (= (op e3 e1) (op e3 e3)) (not (= e3 (op e3 e3))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))) :rule reordering :premises (t808))
(step t810 (cl (not (= (op e3 e1) (op e3 e3)))) :rule and :premises (t746) :args (1))
(step t811 (cl (not (= (= (op e4 (op e4 e3)) e3) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))) (not (= (op e4 (op e4 e3)) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule equiv_pos2)
(step t812 (cl (= (= (op e4 (op e4 e3)) e3) (= e3 (op e4 (op e4 e3))))) :rule rare_rewrite :args ("eq-symm" (op e4 (op e4 e3)) e3))
(step t813 (cl (= (op e4 (op e4 e3)) (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t18 t145))
(step t814 (cl (= (= e3 (op e4 (op e4 e3))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))) :rule cong :premises (t14 t813))
(step t815 (cl (= (= (op e4 (op e4 e3)) e3) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))) :rule trans :premises (t812 t814))
(step t816 (cl (= (op e4 (op e4 e3)) e3)) :rule and :premises (t621) :args (1))
(step t817 (cl (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule resolution :premises (t811 t815 t816))
(step t818 (cl (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3))))) :rule and_neg)
(step t819 (cl (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op (op e1 e3) e3))) (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))))) :rule implies_neg1)
(anchor :step t820)
(assume t820.a0 (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))
(assume t820.a1 (= e1 (op e3 (op (op e1 e3) e3))))
(step t820.t0 (cl (= (op e3 (op (op e1 e3) e3)) e1)) :rule symm :premises (t820.a1))
(step t820.t1 (cl (= e1 (op e3 (op (op e1 e3) e3)))) :rule symm :premises (t820.t0))
(step t820.t2 (cl (= (op e3 e1) (op e3 (op e3 (op (op e1 e3) e3))))) :rule cong :premises (t14 t820.t1))
(step t820.t3 (cl (= (op e3 (op e3 (op (op e1 e3) e3))) (op (op e1 e3) e3))) :rule symm :premises (t760))
(step t820.t4 (cl (= (op e3 e1) (op (op e1 e3) e3))) :rule trans :premises (t820.t2 t820.t3))
(step t820 (cl (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op (op e1 e3) e3))) :rule subproof :discharge (t820.a0 t820.a1))
(step t821 (cl (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))))) (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) :rule and_pos :args (0))
(step t822 (cl (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))))) (= e1 (op e3 (op (op e1 e3) e3)))) :rule and_pos :args (1))
(step t823 (cl (= (op e3 e1) (op (op e1 e3) e3)) (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))))) (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3)))))) :rule resolution :premises (t820 t821 t822))
(step t824 (cl (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))))) (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))))) (= (op e3 e1) (op (op e1 e3) e3))) :rule reordering :premises (t823))
(step t825 (cl (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))))) (= (op e3 e1) (op (op e1 e3) e3))) :rule contraction :premises (t824))
(step t826 (cl (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op (op e1 e3) e3))) (= (op e3 e1) (op (op e1 e3) e3))) :rule resolution :premises (t819 t825))
(step t827 (cl (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op (op e1 e3) e3))) (not (= (op e3 e1) (op (op e1 e3) e3)))) :rule implies_neg2)
(step t828 (cl (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op (op e1 e3) e3))) (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op (op e1 e3) e3)))) :rule resolution :premises (t826 t827))
(step t829 (cl (=> (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op (op e1 e3) e3)))) :rule contraction :premises (t828))
(step t830 (cl (not (and (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))) (= e1 (op e3 (op (op e1 e3) e3))))) (= (op e3 e1) (op (op e1 e3) e3))) :rule implies :premises (t829))
(step t831 (cl (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (= (op e3 e1) (op (op e1 e3) e3))) :rule resolution :premises (t818 t830))
(step t832 (cl (= (op e3 e1) (op (op e1 e3) e3)) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e3) (op e3 (op e3 (op (op e1 e3) e3)))))) :rule reordering :premises (t831))
(step t833 (cl (not (= (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e3) e1))))) (not (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2))) (or (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)))) :rule equiv_pos2)
(step t834 (cl (= (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (= (op e4 e4) e2) (= (op e4 e3) e2) (= (op e4 e2) e2) (= (op e4 e0) e2) (= (op e4 e1) e2)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (= (op e4 e4) e2) (= (op e4 e3) e2) (= (op e4 e2) e2) (= (op e4 e0) e2) (= (op e4 e1) e2)))))
(step t835 (cl (= (= (op e4 e4) e2) (= e2 (op e4 e4)))) :rule rare_rewrite :args ("eq-symm" (op e4 e4) e2))
(step t836 (cl (= (= (op e4 e2) e2) (= e2 (op e4 e2)))) :rule rare_rewrite :args ("eq-symm" (op e4 e2) e2))
(step t837 (cl (= (= (op e4 e0) e2) (= e2 (op e4 e0)))) :rule rare_rewrite :args ("eq-symm" (op e4 e0) e2))
(step t838 (cl (= (or (= (op e4 e4) e2) (= (op e4 e3) e2) (= (op e4 e2) e2) (= (op e4 e0) e2) (= (op e4 e1) e2)) (or (= e2 (op e4 e4)) (= e2 (op e4 e3)) (= e2 (op e4 e2)) (= e2 (op e4 e0)) (= e2 (op e4 e1))))) :rule cong :premises (t835 t446 t836 t837 t120))
(step t839 (cl (= (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (= e2 (op e4 e4)) (= e2 (op e4 e3)) (= e2 (op e4 e2)) (= e2 (op e4 e0)) (= e2 (op e4 e1))))) :rule trans :premises (t834 t838))
(step t840 (cl (= (= e2 (op e4 e4)) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule cong :premises (t13 t19))
(step t841 (cl (= (= e2 (op e4 e2)) (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))))) :rule cong :premises (t13 t147))
(step t842 (cl (= (= e2 (op e4 e0)) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule cong :premises (t13 t151))
(step t843 (cl (= (or (= e2 (op e4 e4)) (= e2 (op e4 e3)) (= e2 (op e4 e2)) (= e2 (op e4 e0)) (= e2 (op e4 e1))) (or (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e3) e1))))) :rule cong :premises (t840 t451 t841 t842 t150))
(step t844 (cl (= (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e3) e1))))) :rule trans :premises (t839 t843))
(step t845 (cl (and (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2)) (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)))) :rule and :premises (t36) :args (1))
(step t846 (cl (or (or (or (or (= (op e4 e0) e2) (= (op e4 e1) e2)) (= (op e4 e2) e2)) (= (op e4 e3) e2)) (= (op e4 e4) e2))) :rule and :premises (t845) :args (0))
(step t847 (cl (or (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)))) :rule resolution :premises (t833 t844 t846))
(step t848 (cl (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e3) e1))) :rule or :premises (t847))
(step t849 (cl (= (op e1 e3) (op (op (op e1 e3) e3) e3)) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e1 e3) (op (op (op e1 e3) e3) e1)) (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule reordering :premises (t848))
(step t850 (cl (= (= (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) false) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3)))))) :rule equiv_simplify)
(step t851 (cl (not (= (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) false)) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))))) :rule equiv1 :premises (t850))
(step t852 (cl (= (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))))) :rule cong :premises (t491 t384))
(step t853 (cl (= (= (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false) (not (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) :rule equiv_simplify)
(step t854 (cl (= (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false) (not (not (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) :rule equiv2 :premises (t853))
(step t855 (cl (not (not (not (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))) :rule not_not)
(step t856 (cl (= (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false) (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))) :rule resolution :premises (t854 t855))
(step t857 (cl (not (= (not (= (op e2 e2) (op e4 e2))) (not (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) (not (not (= (op e2 e2) (op e4 e2)))) (not (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))))) :rule equiv_pos2)
(step t858 (cl (= (= (op e2 e2) (op e4 e2)) (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))))) :rule cong :premises (t161 t147))
(step t859 (cl (= (not (= (op e2 e2) (op e4 e2))) (not (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3)))))) :rule cong :premises (t858))
(step t860 (cl (not (= (op e2 e2) (op e4 e2)))) :rule and :premises (t394) :args (1))
(step t861 (cl (not (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))))) :rule resolution :premises (t857 t859 t860))
(step t862 (cl (= (= (op (op e1 e3) (op e1 e3)) (op (op (op e1 e3) e3) (op e1 e3))) false)) :rule resolution :premises (t856 t861))
(step t863 (cl (= (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))) false)) :rule trans :premises (t852 t862))
(step t864 (cl (not (= (op e1 e3) (op (op (op e1 e3) e3) (op e1 e3))))) :rule resolution :premises (t851 t863))
(step t865 (cl (= (= (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t866 (cl (not (= (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false)) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule equiv1 :premises (t865))
(step t867 (cl (= (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) e3)))) :rule cong :premises (t166 t425))
(step t868 (cl (= (= (= (op e1 e3) (op (op e1 e3) e3)) false) (not (= (op e1 e3) (op (op e1 e3) e3))))) :rule equiv_simplify)
(step t869 (cl (= (= (op e1 e3) (op (op e1 e3) e3)) false) (not (not (= (op e1 e3) (op (op e1 e3) e3))))) :rule equiv2 :premises (t868))
(step t870 (cl (not (not (not (= (op e1 e3) (op (op e1 e3) e3))))) (= (op e1 e3) (op (op e1 e3) e3))) :rule not_not)
(step t871 (cl (= (= (op e1 e3) (op (op e1 e3) e3)) false) (= (op e1 e3) (op (op e1 e3) e3))) :rule resolution :premises (t869 t870))
(step t872 (cl (not (= (not (= (op e1 e3) (op e2 e3))) (not (= (op e1 e3) (op (op e1 e3) e3))))) (not (not (= (op e1 e3) (op e2 e3)))) (not (= (op e1 e3) (op (op e1 e3) e3)))) :rule equiv_pos2)
(step t873 (cl (= (= (op e1 e3) (op e2 e3)) (= (op e1 e3) (op (op e1 e3) e3)))) :rule cong :premises (t166 t15))
(step t874 (cl (= (not (= (op e1 e3) (op e2 e3))) (not (= (op e1 e3) (op (op e1 e3) e3))))) :rule cong :premises (t873))
(step t875 (cl (not (= (op e1 e3) (op e2 e3)))) :rule and :premises (t250) :args (1))
(step t876 (cl (not (= (op e1 e3) (op (op e1 e3) e3)))) :rule resolution :premises (t872 t874 t875))
(step t877 (cl (= (= (op e1 e3) (op (op e1 e3) e3)) false)) :rule resolution :premises (t871 t876))
(step t878 (cl (= (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) false)) :rule trans :premises (t867 t877))
(step t879 (cl (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule resolution :premises (t866 t878))
(step t880 (cl (not (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op e3 (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op e1 e3) (op e1 (op (op e1 e3) e3)))))) (not (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2))) (or (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op e3 (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op e1 e3) (op e1 (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t881 (cl (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= (op e4 e4) e2) (= (op e3 e4) e2) (= (op e2 e4) e2) (= (op e0 e4) e2) (= (op e1 e4) e2)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= (op e4 e4) e2) (= (op e3 e4) e2) (= (op e2 e4) e2) (= (op e0 e4) e2) (= (op e1 e4) e2)))))
(step t882 (cl (= (= (op e3 e4) e2) (= e2 (op e3 e4)))) :rule rare_rewrite :args ("eq-symm" (op e3 e4) e2))
(step t883 (cl (= (= (op e2 e4) e2) (= e2 (op e2 e4)))) :rule rare_rewrite :args ("eq-symm" (op e2 e4) e2))
(step t884 (cl (= (= (op e1 e4) e2) (= e2 (op e1 e4)))) :rule rare_rewrite :args ("eq-symm" (op e1 e4) e2))
(step t885 (cl (= (or (= (op e4 e4) e2) (= (op e3 e4) e2) (= (op e2 e4) e2) (= (op e0 e4) e2) (= (op e1 e4) e2)) (or (= e2 (op e4 e4)) (= e2 (op e3 e4)) (= e2 (op e2 e4)) (= e2 (op e0 e4)) (= e2 (op e1 e4))))) :rule cong :premises (t835 t882 t883 t136 t884))
(step t886 (cl (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= e2 (op e4 e4)) (= e2 (op e3 e4)) (= e2 (op e2 e4)) (= e2 (op e0 e4)) (= e2 (op e1 e4))))) :rule trans :premises (t881 t885))
(step t887 (cl (= (= e2 (op e3 e4)) (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) :rule cong :premises (t13 t21))
(step t888 (cl (= (= e2 (op e2 e4)) (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) :rule cong :premises (t13 t23))
(step t889 (cl (= (= e2 (op e1 e4)) (= (op e1 e3) (op e1 (op (op e1 e3) e3))))) :rule cong :premises (t13 t30))
(step t890 (cl (= (or (= e2 (op e4 e4)) (= e2 (op e3 e4)) (= e2 (op e2 e4)) (= e2 (op e0 e4)) (= e2 (op e1 e4))) (or (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op e3 (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op e1 e3) (op e1 (op (op e1 e3) e3)))))) :rule cong :premises (t840 t887 t888 t173 t889))
(step t891 (cl (= (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2)) (or (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op e3 (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op e1 e3) (op e1 (op (op e1 e3) e3)))))) :rule trans :premises (t886 t890))
(step t892 (cl (or (or (or (or (= (op e0 e4) e2) (= (op e1 e4) e2)) (= (op e2 e4) e2)) (= (op e3 e4) e2)) (= (op e4 e4) e2))) :rule and :premises (t845) :args (1))
(step t893 (cl (or (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op e3 (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op e1 e3) (op e1 (op (op e1 e3) e3))))) :rule resolution :premises (t880 t891 t892))
(step t894 (cl (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3))) (= (op e1 e3) (op e3 (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op e1 e3) (op e1 (op (op e1 e3) e3)))) :rule or :premises (t893))
(step t895 (cl (= (op e1 e3) (op e1 (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e3) (op e3 (op (op e1 e3) e3))) (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e3)))) :rule reordering :premises (t894))
(step t896 (cl (not (= (not (= (op e1 e3) (op e1 e4))) (not (= (op e1 e3) (op e1 (op (op e1 e3) e3)))))) (not (not (= (op e1 e3) (op e1 e4)))) (not (= (op e1 e3) (op e1 (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t897 (cl (= (= (op e1 e3) (op e1 e4)) (= (op e1 e3) (op e1 (op (op e1 e3) e3))))) :rule cong :premises (t166 t30))
(step t898 (cl (= (not (= (op e1 e3) (op e1 e4))) (not (= (op e1 e3) (op e1 (op (op e1 e3) e3)))))) :rule cong :premises (t897))
(step t899 (cl (and (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4)))) (not (= (op e1 e3) (op e1 e4))))) :rule and :premises (t286) :args (1))
(step t900 (cl (not (= (op e1 e3) (op e1 e4)))) :rule and :premises (t899) :args (1))
(step t901 (cl (not (= (op e1 e3) (op e1 (op (op e1 e3) e3))))) :rule resolution :premises (t896 t898 t900))
(step t902 (cl (not (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op e3 e3)) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 e1))))) (not (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1))) (or (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op e3 e3)) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 e1)))) :rule equiv_pos2)
(step t903 (cl (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= (op e3 e4) e1) (= (op e3 e3) e1) (= (op e3 e2) e1) (= (op e3 e0) e1) (= (op e3 e1) e1)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= (op e3 e4) e1) (= (op e3 e3) e1) (= (op e3 e2) e1) (= (op e3 e0) e1) (= (op e3 e1) e1)))))
(step t904 (cl (= (= (op e3 e3) e1) (= e1 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e1))
(step t905 (cl (= (= (op e3 e2) e1) (= e1 (op e3 e2)))) :rule rare_rewrite :args ("eq-symm" (op e3 e2) e1))
(step t906 (cl (= (= (op e3 e0) e1) (= e1 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e1))
(step t907 (cl (= (= (op e3 e1) e1) (= e1 (op e3 e1)))) :rule rare_rewrite :args ("eq-symm" (op e3 e1) e1))
(step t908 (cl (= (or (= (op e3 e4) e1) (= (op e3 e3) e1) (= (op e3 e2) e1) (= (op e3 e0) e1) (= (op e3 e1) e1)) (or (= e1 (op e3 e4)) (= e1 (op e3 e3)) (= e1 (op e3 e2)) (= e1 (op e3 e0)) (= e1 (op e3 e1))))) :rule cong :premises (t3 t904 t905 t906 t907))
(step t909 (cl (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= e1 (op e3 e4)) (= e1 (op e3 e3)) (= e1 (op e3 e2)) (= e1 (op e3 e0)) (= e1 (op e3 e1))))) :rule trans :premises (t903 t908))
(step t910 (cl (= (= e1 (op e3 e3)) (= e1 (op e3 e3)))) :rule refl)
(step t911 (cl (= (= e1 (op e3 e2)) (= e1 (op e3 (op e1 e3))))) :rule cong :premises (t9 t154))
(step t912 (cl (= (= e1 (op e3 e0)) (= e1 (op e3 (op (op e1 e3) e1))))) :rule cong :premises (t9 t90))
(step t913 (cl (= (= e1 (op e3 e1)) (= e1 (op e3 e1)))) :rule refl)
(step t914 (cl (= (or (= e1 (op e3 e4)) (= e1 (op e3 e3)) (= e1 (op e3 e2)) (= e1 (op e3 e0)) (= e1 (op e3 e1))) (or (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op e3 e3)) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 e1))))) :rule cong :premises (t22 t910 t911 t912 t913))
(step t915 (cl (= (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op e3 e3)) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 e1))))) :rule trans :premises (t909 t914))
(step t916 (cl (and (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3)))) (and (or (or (or (or (= (op e3 e0) e4) (= (op e3 e1) e4)) (= (op e3 e2) e4)) (= (op e3 e3) e4)) (= (op e3 e4) e4)) (or (or (or (or (= (op e0 e3) e4) (= (op e1 e3) e4)) (= (op e2 e3) e4)) (= (op e3 e3) e4)) (= (op e4 e3) e4))))) :rule and :premises (t559) :args (1))
(step t917 (cl (and (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2)))) (and (or (or (or (or (= (op e3 e0) e3) (= (op e3 e1) e3)) (= (op e3 e2) e3)) (= (op e3 e3) e3)) (= (op e3 e4) e3)) (or (or (or (or (= (op e0 e3) e3) (= (op e1 e3) e3)) (= (op e2 e3) e3)) (= (op e3 e3) e3)) (= (op e4 e3) e3))))) :rule and :premises (t916) :args (0))
(step t918 (cl (and (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) (and (or (or (or (or (= (op e3 e0) e2) (= (op e3 e1) e2)) (= (op e3 e2) e2)) (= (op e3 e3) e2)) (= (op e3 e4) e2)) (or (or (or (or (= (op e0 e3) e2) (= (op e1 e3) e2)) (= (op e2 e3) e2)) (= (op e3 e3) e2)) (= (op e4 e3) e2))))) :rule and :premises (t917) :args (0))
(step t919 (cl (and (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0))) (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1))))) :rule and :premises (t918) :args (0))
(step t920 (cl (and (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1)) (or (or (or (or (= (op e0 e3) e1) (= (op e1 e3) e1)) (= (op e2 e3) e1)) (= (op e3 e3) e1)) (= (op e4 e3) e1)))) :rule and :premises (t919) :args (1))
(step t921 (cl (or (or (or (or (= (op e3 e0) e1) (= (op e3 e1) e1)) (= (op e3 e2) e1)) (= (op e3 e3) e1)) (= (op e3 e4) e1))) :rule and :premises (t920) :args (0))
(step t922 (cl (or (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op e3 e3)) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 e1)))) :rule resolution :premises (t902 t915 t921))
(step t923 (cl (= e1 (op e3 (op (op e1 e3) e3))) (= e1 (op e3 e3)) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 e1))) :rule or :premises (t922))
(step t924 (cl (= e1 (op e3 e1)) (= e1 (op e3 e3)) (= e1 (op e3 (op (op e1 e3) e1))) (= e1 (op e3 (op e1 e3))) (= e1 (op e3 (op (op e1 e3) e3)))) :rule reordering :premises (t923))
(step t925 (cl (= (= (= e1 (op e3 (op (op e1 e3) e1))) false) (not (= e1 (op e3 (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t926 (cl (not (= (= e1 (op e3 (op (op e1 e3) e1))) false)) (not (= e1 (op e3 (op (op e1 e3) e1))))) :rule equiv1 :premises (t925))
(step t927 (cl (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) :rule refl)
(step t928 (cl (= (= e1 (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule cong :premises (t114 t927))
(step t929 (cl (= (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false) (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t930 (cl (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false) (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) :rule equiv2 :premises (t929))
(step t931 (cl (not (not (not (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) :rule not_not)
(step t932 (cl (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false) (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) :rule resolution :premises (t930 t931))
(step t933 (cl (= (= (op (op e1 e3) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false)) :rule resolution :premises (t932 t101))
(step t934 (cl (= (= e1 (op e3 (op (op e1 e3) e1))) false)) :rule trans :premises (t928 t933))
(step t935 (cl (not (= e1 (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t926 t934))
(step t936 (cl (= (= (= e1 (op e3 e3)) false) (not (= e1 (op e3 e3))))) :rule equiv_simplify)
(step t937 (cl (not (= (= e1 (op e3 e3)) false)) (not (= e1 (op e3 e3)))) :rule equiv1 :premises (t936))
(step t938 (cl (= (op e3 e3) (op e1 (op e1 e3)))) :rule trans :premises (t302 t383))
(step t939 (cl (= (= e1 (op e3 e3)) (= (op e1 e1) (op e1 (op e1 e3))))) :rule cong :premises (t493 t938))
(step t940 (cl (= (= (= (op e1 e1) (op e1 (op e1 e3))) false) (not (= (op e1 e1) (op e1 (op e1 e3)))))) :rule equiv_simplify)
(step t941 (cl (= (= (op e1 e1) (op e1 (op e1 e3))) false) (not (not (= (op e1 e1) (op e1 (op e1 e3)))))) :rule equiv2 :premises (t940))
(step t942 (cl (not (not (not (= (op e1 e1) (op e1 (op e1 e3)))))) (= (op e1 e1) (op e1 (op e1 e3)))) :rule not_not)
(step t943 (cl (= (= (op e1 e1) (op e1 (op e1 e3))) false) (= (op e1 e1) (op e1 (op e1 e3)))) :rule resolution :premises (t941 t942))
(step t944 (cl (not (= (not (= (op e1 e1) (op e1 e2))) (not (= (op e1 e1) (op e1 (op e1 e3)))))) (not (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 (op e1 e3))))) :rule equiv_pos2)
(step t945 (cl (= (op e1 e1) (op e1 e1))) :rule refl)
(step t946 (cl (= (= (op e1 e1) (op e1 e2)) (= (op e1 e1) (op e1 (op e1 e3))))) :rule cong :premises (t945 t168))
(step t947 (cl (= (not (= (op e1 e1) (op e1 e2))) (not (= (op e1 e1) (op e1 (op e1 e3)))))) :rule cong :premises (t946))
(step t948 (cl (and (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3)))) (not (= (op e1 e2) (op e1 e4))))) :rule and :premises (t899) :args (0))
(step t949 (cl (and (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e2) (op e1 e3))))) :rule and :premises (t948) :args (0))
(step t950 (cl (and (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3)))) (not (= (op e1 e1) (op e1 e4))))) :rule and :premises (t949) :args (0))
(step t951 (cl (and (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2)))) (not (= (op e1 e1) (op e1 e3))))) :rule and :premises (t950) :args (0))
(step t952 (cl (and (and (and (and (not (= (op e1 e0) (op e1 e1))) (not (= (op e1 e0) (op e1 e2)))) (not (= (op e1 e0) (op e1 e3)))) (not (= (op e1 e0) (op e1 e4)))) (not (= (op e1 e1) (op e1 e2))))) :rule and :premises (t951) :args (0))
(step t953 (cl (not (= (op e1 e1) (op e1 e2)))) :rule and :premises (t952) :args (1))
(step t954 (cl (not (= (op e1 e1) (op e1 (op e1 e3))))) :rule resolution :premises (t944 t947 t953))
(step t955 (cl (= (= (op e1 e1) (op e1 (op e1 e3))) false)) :rule resolution :premises (t943 t954))
(step t956 (cl (= (= e1 (op e3 e3)) false)) :rule trans :premises (t939 t955))
(step t957 (cl (not (= e1 (op e3 e3)))) :rule resolution :premises (t937 t956))
(step t958 (cl (= (= (= e1 (op e3 e1)) false) (not (= e1 (op e3 e1))))) :rule equiv_simplify)
(step t959 (cl (not (= (= e1 (op e3 e1)) false)) (not (= e1 (op e3 e1)))) :rule equiv1 :premises (t958))
(step t960 (cl (= (= e1 (op e3 e1)) (= (op e1 e1) (op e3 e1)))) :rule cong :premises (t493 t156))
(step t961 (cl (= (= (= (op e1 e1) (op e3 e1)) false) (not (= (op e1 e1) (op e3 e1))))) :rule equiv_simplify)
(step t962 (cl (= (= (op e1 e1) (op e3 e1)) false) (not (not (= (op e1 e1) (op e3 e1))))) :rule equiv2 :premises (t961))
(step t963 (cl (not (not (not (= (op e1 e1) (op e3 e1))))) (= (op e1 e1) (op e3 e1))) :rule not_not)
(step t964 (cl (= (= (op e1 e1) (op e3 e1)) false) (= (op e1 e1) (op e3 e1))) :rule resolution :premises (t962 t963))
(step t965 (cl (not (= (op e1 e1) (op e3 e1)))) :rule and :premises (t370) :args (1))
(step t966 (cl (= (= (op e1 e1) (op e3 e1)) false)) :rule resolution :premises (t964 t965))
(step t967 (cl (= (= e1 (op e3 e1)) false)) :rule trans :premises (t960 t966))
(step t968 (cl (not (= e1 (op e3 e1)))) :rule resolution :premises (t959 t967))
(step t969 (cl (not (= (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))))) (not (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule equiv_pos2)
(step t970 (cl (= (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))))) :rule refl)
(step t971 (cl (= (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))))) :rule refl)
(step t972 (cl (= (= (= (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) true) (= (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t973 (cl (not (= (= (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) true)) (= (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule equiv1 :premises (t972))
(step t974 (cl (= (= (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))))) :rule rare_rewrite :args ("eq-symm" (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))
(step t975 (cl (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule refl)
(step t976 (cl (= (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule rare_rewrite :args ("bool-double-not-elim" (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))
(step t977 (cl (= (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule cong :premises (t975 t976))
(step t978 (cl (= (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) true)) :rule rare_rewrite :args ("eq-refl" (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))
(step t979 (cl (= (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) true)) :rule trans :premises (t977 t978))
(step t980 (cl (= (= (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) true)) :rule trans :premises (t974 t979))
(step t981 (cl (= (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule resolution :premises (t973 t980))
(step t982 (cl (= (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule refl)
(step t983 (cl (= (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))))) :rule cong :premises (t970 t971 t981 t982))
(step t984 (cl (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule and_neg)
(step t985 (cl (=> (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule implies_neg1)
(anchor :step t986)
(assume t986.a0 (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))
(assume t986.a1 (= (op (op e1 e3) e1) (op e3 (op e1 e3))))
(assume t986.a2 (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))
(step t986.t0 (cl (= (= (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t986.t1 (cl (not (= (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false)) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule equiv1 :premises (t986.t0))
(step t986.t2 (cl (not (= (= (op e3 (op e3 e2)) e2) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (= (op e3 (op e3 e2)) e2)) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) :rule equiv_pos2)
(step t986.t3 (cl (= (= (op e3 (op e3 e2)) e2) (= e2 (op e3 (op e3 e2))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op e3 e2)) e2))
(step t986.t4 (cl (= (op e3 (op e3 e2)) (op e3 (op e3 (op e1 e3))))) :rule cong :premises (t14 t154))
(step t986.t5 (cl (= (= e2 (op e3 (op e3 e2))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) :rule cong :premises (t13 t986.t4))
(step t986.t6 (cl (= (= (op e3 (op e3 e2)) e2) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) :rule trans :premises (t986.t3 t986.t5))
(step t986.t7 (cl (and (and (and (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2)) (= (op e3 (op e3 e3)) e3))) :rule and :premises (t758) :args (0))
(step t986.t8 (cl (and (and (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2))) :rule and :premises (t986.t7) :args (0))
(step t986.t9 (cl (= (op e3 (op e3 e2)) e2)) :rule and :premises (t986.t8) :args (1))
(step t986.t10 (cl (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) :rule resolution :premises (t986.t2 t986.t6 t986.t9))
(step t986.t11 (cl (= (op e3 (op e1 e3)) (op (op e1 e3) e1))) :rule symm :premises (t986.a1))
(step t986.t12 (cl (= (op e3 (op e3 (op e1 e3))) (op e3 (op (op e1 e3) e1)))) :rule cong :premises (t14 t986.t11))
(step t986.t13 (cl (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) :rule trans :premises (t986.t10 t986.t12))
(step t986.t14 (cl (= (op (op (op e1 e3) e3) (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule refl)
(step t986.t15 (cl (= (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule cong :premises (t986.t13 t986.t14))
(step t986.t16 (cl (= (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t986.t17 (cl (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule equiv2 :premises (t986.t16))
(step t986.t18 (cl (not (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule not_not)
(step t986.t19 (cl (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule resolution :premises (t986.t17 t986.t18))
(step t986.t20 (cl (not (= (not (= (op e3 e0) (op e4 e0))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (not (not (= (op e3 e0) (op e4 e0)))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule equiv_pos2)
(step t986.t21 (cl (= (= (op e3 e0) (op e4 e0)) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule cong :premises (t90 t151))
(step t986.t22 (cl (= (not (= (op e3 e0) (op e4 e0))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule cong :premises (t986.t21))
(step t986.t23 (cl (not (= (op e3 e0) (op e4 e0)))) :rule and :premises (t97) :args (1))
(step t986.t24 (cl (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule resolution :premises (t986.t20 t986.t22 t986.t23))
(step t986.t25 (cl (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false)) :rule resolution :premises (t986.t19 t986.t24))
(step t986.t26 (cl (= (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false)) :rule trans :premises (t986.t15 t986.t25))
(step t986.t27 (cl (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule resolution :premises (t986.t1 t986.t26))
(step t986 (cl (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule subproof :discharge (t986.a0 t986.a1 t986.a2))
(step t987 (cl (not (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) :rule and_pos :args (0))
(step t988 (cl (not (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) :rule and_pos :args (1))
(step t989 (cl (not (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule and_pos :args (2))
(step t990 (cl (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (not (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (not (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))))) :rule resolution :premises (t986 t987 t988 t989))
(step t991 (cl (not (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (not (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (not (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule reordering :premises (t990))
(step t992 (cl (not (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule contraction :premises (t991))
(step t993 (cl (=> (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule resolution :premises (t985 t992))
(step t994 (cl (=> (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule implies_neg2)
(step t995 (cl (=> (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (=> (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule resolution :premises (t993 t994))
(step t996 (cl (=> (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule contraction :premises (t995))
(step t997 (cl (not (and (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule implies :premises (t996))
(step t998 (cl (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule resolution :premises (t984 t997))
(step t999 (cl (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))))) :rule or_neg :args (0))
(step t1000 (cl (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))))) :rule or_neg :args (1))
(step t1001 (cl (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))))) :rule or_neg :args (2))
(step t1002 (cl (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule or_neg :args (3))
(step t1003 (cl (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule resolution :premises (t998 t999 t1000 t1001 t1002))
(step t1004 (cl (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule contraction :premises (t1003))
(step t1005 (cl (or (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule resolution :premises (t969 t983 t1004))
(step t1006 (cl (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule or :premises (t1005))
(step t1007 (cl (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) :rule reordering :premises (t1006))
(step t1008 (cl (not (= (not (= (op e3 e0) (op e4 e0))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (not (not (= (op e3 e0) (op e4 e0)))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule equiv_pos2)
(step t1009 (cl (= (= (op e3 e0) (op e4 e0)) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule cong :premises (t90 t151))
(step t1010 (cl (= (not (= (op e3 e0) (op e4 e0))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule cong :premises (t1009))
(step t1011 (cl (not (= (op e3 e0) (op e4 e0)))) :rule and :premises (t97) :args (1))
(step t1012 (cl (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule resolution :premises (t1008 t1010 t1011))
(step t1013 (cl (not (= (= (op e3 (op e3 e2)) e2) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (= (op e3 (op e3 e2)) e2)) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) :rule equiv_pos2)
(step t1014 (cl (= (= (op e3 (op e3 e2)) e2) (= e2 (op e3 (op e3 e2))))) :rule rare_rewrite :args ("eq-symm" (op e3 (op e3 e2)) e2))
(step t1015 (cl (= (op e3 (op e3 e2)) (op e3 (op e3 (op e1 e3))))) :rule cong :premises (t14 t154))
(step t1016 (cl (= (= e2 (op e3 (op e3 e2))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) :rule cong :premises (t13 t1015))
(step t1017 (cl (= (= (op e3 (op e3 e2)) e2) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) :rule trans :premises (t1014 t1016))
(step t1018 (cl (and (and (and (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2)) (= (op e3 (op e3 e3)) e3))) :rule and :premises (t758) :args (0))
(step t1019 (cl (and (and (= (op e3 (op e3 e0)) e0) (= (op e3 (op e3 e1)) e1)) (= (op e3 (op e3 e2)) e2))) :rule and :premises (t1018) :args (0))
(step t1020 (cl (= (op e3 (op e3 e2)) e2)) :rule and :premises (t1019) :args (1))
(step t1021 (cl (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) :rule resolution :premises (t1013 t1017 t1020))
(step t1022 (cl (not (= (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (or (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))))) (not (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))))) (or (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))))) :rule equiv_pos2)
(step t1023 (cl (= (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op e1 (op e1 e3)))))) :rule refl)
(step t1024 (cl (= (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))))) :rule refl)
(step t1025 (cl (= (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (or (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))))) :rule cong :premises (t981 t971 t970 t775 t774 t1023 t773 t1024))
(step t1026 (cl (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) :rule and_neg)
(step t1027 (cl (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) :rule implies_neg1)
(anchor :step t1028)
(assume t1028.a0 (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))
(assume t1028.a1 (= (op (op e1 e3) e1) (op e3 (op e1 e3))))
(assume t1028.a2 (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))
(assume t1028.a3 (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))
(assume t1028.a4 (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))
(assume t1028.a5 (= e3 (op e1 (op e1 e3))))
(assume t1028.a6 (= e3 (op (op e1 e3) (op (op e1 e3) e3))))
(step t1028.t0 (cl (= (= (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) false) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t1028.t1 (cl (not (= (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) false)) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) :rule equiv1 :premises (t1028.t0))
(step t1028.t2 (cl (= (op e3 (op e1 e3)) (op (op e1 e3) e1))) :rule symm :premises (t1028.a1))
(step t1028.t3 (cl (= (op e3 (op e3 (op e1 e3))) (op e3 (op (op e1 e3) e1)))) :rule cong :premises (t14 t1028.t2))
(step t1028.t4 (cl (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) :rule trans :premises (t1021 t1028.t3))
(step t1028.t5 (cl (= (op (op (op e1 e3) e3) e3) (op (op e1 e3) e1))) :rule symm :premises (t486))
(step t1028.t6 (cl (= (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule cong :premises (t582 t1028.t5))
(step t1028.t7 (cl (= (op e1 (op e1 e3)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule trans :premises (t382 t817 t1028.t6))
(step t1028.t8 (cl (= (op (op (op e1 e3) e3) (op (op e1 e3) e1)) (op e1 (op e1 e3)))) :rule symm :premises (t1028.t7))
(step t1028.t9 (cl (= (op (op e1 e3) (op (op e1 e3) e3)) e3)) :rule symm :premises (t500))
(step t1028.t10 (cl (= (op (op e1 e3) (op (op e1 e3) e3)) (op e1 (op e1 e3)))) :rule trans :premises (t1028.t9 t383))
(step t1028.t11 (cl (= (op e1 (op e1 e3)) (op (op e1 e3) (op (op e1 e3) e3)))) :rule symm :premises (t1028.t10))
(step t1028.t12 (cl (= (op (op (op e1 e3) e3) (op (op e1 e3) e1)) (op (op e1 e3) (op (op e1 e3) e3)))) :rule trans :premises (t1028.t8 t1028.t11))
(step t1028.t13 (cl (= (op (op e1 e3) (op (op e1 e3) e3)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule symm :premises (t1028.t12))
(step t1028.t14 (cl (= (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule cong :premises (t1028.t4 t1028.t13))
(step t1028.t15 (cl (= (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t1028.t16 (cl (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false) (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) :rule equiv2 :premises (t1028.t15))
(step t1028.t17 (cl (not (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))))) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule not_not)
(step t1028.t18 (cl (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false) (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) :rule resolution :premises (t1028.t16 t1028.t17))
(step t1028.t19 (cl (= (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) false)) :rule resolution :premises (t1028.t18 t1012))
(step t1028.t20 (cl (= (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))) false)) :rule trans :premises (t1028.t14 t1028.t19))
(step t1028.t21 (cl (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) :rule resolution :premises (t1028.t1 t1028.t20))
(step t1028 (cl (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) :rule subproof :discharge (t1028.a0 t1028.a1 t1028.a2 t1028.a3 t1028.a4 t1028.a5 t1028.a6))
(step t1029 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) :rule and_pos :args (0))
(step t1030 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) :rule and_pos :args (1))
(step t1031 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) :rule and_pos :args (2))
(step t1032 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) :rule and_pos :args (3))
(step t1033 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) :rule and_pos :args (4))
(step t1034 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (= e3 (op e1 (op e1 e3)))) :rule and_pos :args (5))
(step t1035 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) :rule and_pos :args (6))
(step t1036 (cl (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t1028 t1029 t1030 t1031 t1032 t1033 t1034 t1035))
(step t1037 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) :rule reordering :premises (t1036))
(step t1038 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) :rule contraction :premises (t1037))
(step t1039 (cl (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) :rule resolution :premises (t1027 t1038))
(step t1040 (cl (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (not (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))))) :rule implies_neg2)
(step t1041 (cl (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t1039 t1040))
(step t1042 (cl (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))))) :rule contraction :premises (t1041))
(step t1043 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))) (= e3 (op e1 (op e1 e3))) (= e3 (op (op e1 e3) (op (op e1 e3) e3))))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) :rule implies :premises (t1042))
(step t1044 (cl (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) :rule resolution :premises (t1026 t1043))
(step t1045 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (not (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))))) :rule or_neg :args (0))
(step t1046 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))))) :rule or_neg :args (1))
(step t1047 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (not (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))))) :rule or_neg :args (2))
(step t1048 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))))) :rule or_neg :args (3))
(step t1049 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (not (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))))) :rule or_neg :args (4))
(step t1050 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (not (not (= e3 (op e1 (op e1 e3)))))) :rule or_neg :args (5))
(step t1051 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (not (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))))) :rule or_neg :args (6))
(step t1052 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (not (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))))) :rule or_neg :args (7))
(step t1053 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t1044 t1045 t1046 t1047 t1048 t1049 t1050 t1051 t1052))
(step t1054 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))))) :rule contraction :premises (t1053))
(step t1055 (cl (or (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))))) :rule resolution :premises (t1022 t1025 t1054))
(step t1056 (cl (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3)))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3))))) :rule or :premises (t1055))
(step t1057 (cl (= (op e3 (op (op e1 e3) e1)) (op (op (op e1 e3) e3) (op (op e1 e3) e1))) (not (= e3 (op e1 (op e1 e3)))) (not (= e3 (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op e1 e3) (op (op e1 e3) (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= e3 (op (op (op e1 e3) e3) (op (op (op e1 e3) e3) e3))))) :rule reordering :premises (t1056))
(step t1058 (cl (not (= (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (or (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))))) (not (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))))) (or (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))))) :rule equiv_pos2)
(step t1059 (cl (= (= (= (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) true) (= (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t1060 (cl (not (= (= (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) true)) (= (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule equiv1 :premises (t1059))
(step t1061 (cl (= (= (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))))) :rule rare_rewrite :args ("eq-symm" (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))
(step t1062 (cl (= (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule refl)
(step t1063 (cl (= (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule rare_rewrite :args ("bool-double-not-elim" (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))
(step t1064 (cl (= (= (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))) (= (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))) :rule cong :premises (t1062 t1063))
(step t1065 (cl (= (= (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) true)) :rule rare_rewrite :args ("eq-refl" (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))
(step t1066 (cl (= (= (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))) true)) :rule trans :premises (t1064 t1065))
(step t1067 (cl (= (= (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) true)) :rule trans :premises (t1061 t1066))
(step t1068 (cl (= (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t1060 t1067))
(step t1069 (cl (= (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))))) :rule refl)
(step t1070 (cl (= (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (or (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))))) :rule cong :premises (t1068 t971 t970 t1069))
(step t1071 (cl (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) :rule and_neg)
(step t1072 (cl (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) :rule implies_neg1)
(anchor :step t1073)
(assume t1073.a0 (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))
(assume t1073.a1 (= (op (op e1 e3) e1) (op e3 (op e1 e3))))
(assume t1073.a2 (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))
(step t1073.t0 (cl (= (= (= (op e1 e3) (op e3 (op (op e1 e3) e3))) false) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t1073.t1 (cl (not (= (= (op e1 e3) (op e3 (op (op e1 e3) e3))) false)) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) :rule equiv1 :premises (t1073.t0))
(step t1073.t2 (cl (= (op e3 (op e1 e3)) (op (op e1 e3) e1))) :rule symm :premises (t1073.a1))
(step t1073.t3 (cl (= (op e3 (op e3 (op e1 e3))) (op e3 (op (op e1 e3) e1)))) :rule cong :premises (t14 t1073.t2))
(step t1073.t4 (cl (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) :rule trans :premises (t1021 t1073.t3))
(step t1073.t5 (cl (= (op e3 (op (op e1 e3) e3)) (op e3 (op (op e1 e3) e3)))) :rule refl)
(step t1073.t6 (cl (= (= (op e1 e3) (op e3 (op (op e1 e3) e3))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule cong :premises (t1073.t4 t1073.t5))
(step t1073.t7 (cl (= (= (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) false) (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t1073.t8 (cl (= (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) false) (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))) :rule equiv2 :premises (t1073.t7))
(step t1073.t9 (cl (not (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) :rule not_not)
(step t1073.t10 (cl (= (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) false) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) :rule resolution :premises (t1073.t8 t1073.t9))
(step t1073.t11 (cl (not (= (not (= (op e3 e0) (op e3 e4))) (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))) (not (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t1073.t12 (cl (= (= (op e3 e0) (op e3 e4)) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule cong :premises (t90 t21))
(step t1073.t13 (cl (= (not (= (op e3 e0) (op e3 e4))) (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))) :rule cong :premises (t1073.t12))
(step t1073.t14 (cl (not (= (op e3 e0) (op e3 e4)))) :rule and :premises (t748) :args (1))
(step t1073.t15 (cl (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t1073.t11 t1073.t13 t1073.t14))
(step t1073.t16 (cl (= (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) false)) :rule resolution :premises (t1073.t10 t1073.t15))
(step t1073.t17 (cl (= (= (op e1 e3) (op e3 (op (op e1 e3) e3))) false)) :rule trans :premises (t1073.t6 t1073.t16))
(step t1073.t18 (cl (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t1073.t1 t1073.t17))
(step t1073 (cl (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) :rule subproof :discharge (t1073.a0 t1073.a1 t1073.a2))
(step t1074 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule and_pos :args (0))
(step t1075 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) :rule and_pos :args (1))
(step t1076 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) :rule and_pos :args (2))
(step t1077 (cl (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))))) :rule resolution :premises (t1073 t1074 t1075 t1076))
(step t1078 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) :rule reordering :premises (t1077))
(step t1079 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) :rule contraction :premises (t1078))
(step t1080 (cl (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t1072 t1079))
(step t1081 (cl (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (not (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))))) :rule implies_neg2)
(step t1082 (cl (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))))) :rule resolution :premises (t1080 t1081))
(step t1083 (cl (=> (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))))) :rule contraction :premises (t1082))
(step t1084 (cl (not (and (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) :rule implies :premises (t1083))
(step t1085 (cl (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t1071 t1084))
(step t1086 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (not (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))))) :rule or_neg :args (0))
(step t1087 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))))) :rule or_neg :args (1))
(step t1088 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (not (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))))) :rule or_neg :args (2))
(step t1089 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (not (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))))) :rule or_neg :args (3))
(step t1090 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))))) :rule resolution :premises (t1085 t1086 t1087 t1088 t1089))
(step t1091 (cl (or (not (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))))) :rule contraction :premises (t1090))
(step t1092 (cl (or (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))))) :rule resolution :premises (t1058 t1070 t1091))
(step t1093 (cl (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3))))) :rule or :premises (t1092))
(step t1094 (cl (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) :rule reordering :premises (t1093))
(step t1095 (cl (not (= (not (= (op e3 e0) (op e3 e4))) (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))) (not (not (= (op e3 e0) (op e3 e4)))) (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t1096 (cl (= (= (op e3 e0) (op e3 e4)) (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule cong :premises (t90 t21))
(step t1097 (cl (= (not (= (op e3 e0) (op e3 e4))) (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3)))))) :rule cong :premises (t1096))
(step t1098 (cl (not (= (op e3 e0) (op e3 e4)))) :rule and :premises (t748) :args (1))
(step t1099 (cl (not (= (op e3 (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t1095 t1097 t1098))
(step t1100 (cl (not (= (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (or (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))))) (not (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3)))))) (or (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3)))))) :rule equiv_pos2)
(step t1101 (cl (= (= (= (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) true) (= (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))) :rule equiv_simplify)
(step t1102 (cl (not (= (= (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) true)) (= (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule equiv1 :premises (t1101))
(step t1103 (cl (= (= (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))))) :rule rare_rewrite :args ("eq-symm" (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))
(step t1104 (cl (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule refl)
(step t1105 (cl (= (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule rare_rewrite :args ("bool-double-not-elim" (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))
(step t1106 (cl (= (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))) (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))) :rule cong :premises (t1104 t1105))
(step t1107 (cl (= (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) true)) :rule rare_rewrite :args ("eq-refl" (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))
(step t1108 (cl (= (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))) true)) :rule trans :premises (t1106 t1107))
(step t1109 (cl (= (= (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) true)) :rule trans :premises (t1103 t1108))
(step t1110 (cl (= (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule resolution :premises (t1102 t1109))
(step t1111 (cl (= (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= e1 (op (op (op e1 e3) e1) e3))))) :rule refl)
(step t1112 (cl (= (not (= e1 (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3)))))) :rule refl)
(step t1113 (cl (= (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (or (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))))) :rule cong :premises (t1110 t1111 t775 t971 t1112))
(step t1114 (cl (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) :rule and_neg)
(step t1115 (cl (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) :rule implies_neg1)
(anchor :step t1116)
(assume t1116.a0 (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))
(assume t1116.a1 (= e1 (op (op (op e1 e3) e1) e3)))
(assume t1116.a2 (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))
(assume t1116.a3 (= (op (op e1 e3) e1) (op e3 (op e1 e3))))
(step t1116.t0 (cl (= (= (= e1 (op e3 (op e1 e3))) false) (not (= e1 (op e3 (op e1 e3)))))) :rule equiv_simplify)
(step t1116.t1 (cl (not (= (= e1 (op e3 (op e1 e3))) false)) (not (= e1 (op e3 (op e1 e3))))) :rule equiv1 :premises (t1116.t0))
(step t1116.t2 (cl (= (op (op (op e1 e3) e3) e3) (op (op e1 e3) e1))) :rule symm :premises (t486))
(step t1116.t3 (cl (= (op (op (op e1 e3) e3) e3) (op e3 (op e1 e3)))) :rule trans :premises (t1116.t2 t1116.a3))
(step t1116.t4 (cl (= (op e3 (op e1 e3)) (op (op (op e1 e3) e3) e3))) :rule symm :premises (t1116.t3))
(step t1116.t5 (cl (= (= e1 (op e3 (op e1 e3))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t321 t1116.t4))
(step t1116.t6 (cl (= (= e1 (op e3 (op e1 e3))) false)) :rule trans :premises (t1116.t5 t483))
(step t1116.t7 (cl (not (= e1 (op e3 (op e1 e3))))) :rule resolution :premises (t1116.t1 t1116.t6))
(step t1116 (cl (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) :rule subproof :discharge (t1116.a0 t1116.a1 t1116.a2 t1116.a3))
(step t1117 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule and_pos :args (0))
(step t1118 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (= e1 (op (op (op e1 e3) e1) e3))) :rule and_pos :args (1))
(step t1119 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) :rule and_pos :args (2))
(step t1120 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) :rule and_pos :args (3))
(step t1121 (cl (not (= e1 (op e3 (op e1 e3)))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))))) :rule resolution :premises (t1116 t1117 t1118 t1119 t1120))
(step t1122 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (not (= e1 (op e3 (op e1 e3))))) :rule reordering :premises (t1121))
(step t1123 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (not (= e1 (op e3 (op e1 e3))))) :rule contraction :premises (t1122))
(step t1124 (cl (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (not (= e1 (op e3 (op e1 e3))))) :rule resolution :premises (t1115 t1123))
(step t1125 (cl (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (not (not (= e1 (op e3 (op e1 e3)))))) :rule implies_neg2)
(step t1126 (cl (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3)))))) :rule resolution :premises (t1124 t1125))
(step t1127 (cl (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3)))))) :rule contraction :premises (t1126))
(step t1128 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))))) (not (= e1 (op e3 (op e1 e3))))) :rule implies :premises (t1127))
(step t1129 (cl (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) :rule resolution :premises (t1114 t1128))
(step t1130 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (not (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))))) :rule or_neg :args (0))
(step t1131 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (not (not (= e1 (op (op (op e1 e3) e1) e3))))) :rule or_neg :args (1))
(step t1132 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (not (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))))) :rule or_neg :args (2))
(step t1133 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (not (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))))) :rule or_neg :args (3))
(step t1134 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (not (not (= e1 (op e3 (op e1 e3)))))) :rule or_neg :args (4))
(step t1135 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3)))))) :rule resolution :premises (t1129 t1130 t1131 t1132 t1133 t1134))
(step t1136 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3)))))) :rule contraction :premises (t1135))
(step t1137 (cl (or (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3)))))) :rule resolution :premises (t1100 t1113 t1136))
(step t1138 (cl (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3))))) :rule or :premises (t1137))
(step t1139 (cl (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= e1 (op e3 (op e1 e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) :rule reordering :premises (t1138))
(step t1140 (cl (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) :rule and_neg)
(step t1141 (cl (=> (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) :rule implies_neg1)
(anchor :step t1142)
(assume t1142.a0 (= (op (op e1 e3) e1) (op e3 (op e1 e3))))
(assume t1142.a1 (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))
(step t1142.t0 (cl (= (op e3 (op e1 e3)) (op (op e1 e3) e1))) :rule symm :premises (t1142.a0))
(step t1142.t1 (cl (= (op e3 (op e3 (op e1 e3))) (op e3 (op (op e1 e3) e1)))) :rule cong :premises (t14 t1142.t0))
(step t1142.t2 (cl (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) :rule trans :premises (t1021 t1142.t1))
(step t1142 (cl (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) :rule subproof :discharge (t1142.a0 t1142.a1))
(step t1143 (cl (not (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) :rule and_pos :args (0))
(step t1144 (cl (not (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) :rule and_pos :args (1))
(step t1145 (cl (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (not (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))))) :rule resolution :premises (t1142 t1143 t1144))
(step t1146 (cl (not (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (not (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) :rule reordering :premises (t1145))
(step t1147 (cl (not (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) :rule contraction :premises (t1146))
(step t1148 (cl (=> (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) :rule resolution :premises (t1141 t1147))
(step t1149 (cl (=> (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) (not (= (op e1 e3) (op e3 (op (op e1 e3) e1))))) :rule implies_neg2)
(step t1150 (cl (=> (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) (=> (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (= (op e1 e3) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t1148 t1149))
(step t1151 (cl (=> (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (= (op e1 e3) (op e3 (op (op e1 e3) e1))))) :rule contraction :premises (t1150))
(step t1152 (cl (not (and (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) :rule implies :premises (t1151))
(step t1153 (cl (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3))))) (= (op e1 e3) (op e3 (op (op e1 e3) e1)))) :rule resolution :premises (t1140 t1152))
(step t1154 (cl (= (op e1 e3) (op e3 (op (op e1 e3) e1))) (not (= (op (op e1 e3) e1) (op e3 (op e1 e3)))) (not (= (op e1 e3) (op e3 (op e3 (op e1 e3)))))) :rule reordering :premises (t1153))
(step t1155 (cl (not (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op e3 e3) (op (op e1 e3) e1)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op e3 e1) (op (op e1 e3) e1))))) (not (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0))) (or (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op e3 e3) (op (op e1 e3) e1)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op e3 e1) (op (op e1 e3) e1)))) :rule equiv_pos2)
(step t1156 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (= (op e3 e4) e0) (= (op e3 e3) e0) (= (op e3 e2) e0) (= (op e3 e0) e0) (= (op e3 e1) e0)))) :rule hole :args ("ACI_NORM" (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (= (op e3 e4) e0) (= (op e3 e3) e0) (= (op e3 e2) e0) (= (op e3 e0) e0) (= (op e3 e1) e0)))))
(step t1157 (cl (= (= (op e3 e3) e0) (= e0 (op e3 e3)))) :rule rare_rewrite :args ("eq-symm" (op e3 e3) e0))
(step t1158 (cl (= (= (op e3 e0) e0) (= e0 (op e3 e0)))) :rule rare_rewrite :args ("eq-symm" (op e3 e0) e0))
(step t1159 (cl (= (= (op e3 e1) e0) (= e0 (op e3 e1)))) :rule rare_rewrite :args ("eq-symm" (op e3 e1) e0))
(step t1160 (cl (= (or (= (op e3 e4) e0) (= (op e3 e3) e0) (= (op e3 e2) e0) (= (op e3 e0) e0) (= (op e3 e1) e0)) (or (= e0 (op e3 e4)) (= e0 (op e3 e3)) (= e0 (op e3 e2)) (= e0 (op e3 e0)) (= e0 (op e3 e1))))) :rule cong :premises (t504 t1157 t123 t1158 t1159))
(step t1161 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (= e0 (op e3 e4)) (= e0 (op e3 e3)) (= e0 (op e3 e2)) (= e0 (op e3 e0)) (= e0 (op e3 e1))))) :rule trans :premises (t1156 t1160))
(step t1162 (cl (= (= e0 (op e3 e3)) (= (op (op e1 e3) e1) (op e3 e3)))) :rule cong :premises (t27 t310))
(step t1163 (cl (= (= e0 (op e3 e0)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))))) :rule cong :premises (t27 t90))
(step t1164 (cl (= (= e0 (op e3 e1)) (= (op (op e1 e3) e1) (op e3 e1)))) :rule cong :premises (t27 t156))
(step t1165 (cl (= (or (= e0 (op e3 e4)) (= e0 (op e3 e3)) (= e0 (op e3 e2)) (= e0 (op e3 e0)) (= e0 (op e3 e1))) (or (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 e1))))) :rule cong :premises (t510 t1162 t155 t1163 t1164))
(step t1166 (cl (= (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) :rule refl)
(step t1167 (cl (= (= (op (op e1 e3) e1) (op e3 e3)) (= (op e3 e3) (op (op e1 e3) e1)))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e3) e1) (op e3 e3)))
(step t1168 (cl (= (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))))) :rule refl)
(step t1169 (cl (= (= (op (op e1 e3) e1) (op e3 e1)) (= (op e3 e1) (op (op e1 e3) e1)))) :rule rare_rewrite :args ("eq-symm" (op (op e1 e3) e1) (op e3 e1)))
(step t1170 (cl (= (or (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op (op e1 e3) e1) (op e3 e3)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 e1))) (or (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op e3 e3) (op (op e1 e3) e1)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op e3 e1) (op (op e1 e3) e1))))) :rule cong :premises (t1166 t1167 t190 t1168 t1169))
(step t1171 (cl (= (or (= e0 (op e3 e4)) (= e0 (op e3 e3)) (= e0 (op e3 e2)) (= e0 (op e3 e0)) (= e0 (op e3 e1))) (or (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op e3 e3) (op (op e1 e3) e1)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op e3 e1) (op (op e1 e3) e1))))) :rule trans :premises (t1165 t1170))
(step t1172 (cl (= (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op e3 e3) (op (op e1 e3) e1)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op e3 e1) (op (op e1 e3) e1))))) :rule trans :premises (t1161 t1171))
(step t1173 (cl (and (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0)) (or (or (or (or (= (op e0 e3) e0) (= (op e1 e3) e0)) (= (op e2 e3) e0)) (= (op e3 e3) e0)) (= (op e4 e3) e0)))) :rule and :premises (t919) :args (0))
(step t1174 (cl (or (or (or (or (= (op e3 e0) e0) (= (op e3 e1) e0)) (= (op e3 e2) e0)) (= (op e3 e3) e0)) (= (op e3 e4) e0))) :rule and :premises (t1173) :args (0))
(step t1175 (cl (or (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op e3 e3) (op (op e1 e3) e1)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op e3 e1) (op (op e1 e3) e1)))) :rule resolution :premises (t1155 t1172 t1174))
(step t1176 (cl (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))) (= (op e3 e3) (op (op e1 e3) e1)) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op e3 e1) (op (op e1 e3) e1))) :rule or :premises (t1175))
(step t1177 (cl (= (op e3 e1) (op (op e1 e3) e1)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op (op e1 e3) e1) (op e3 (op e1 e3))) (= (op e3 e3) (op (op e1 e3) e1)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) :rule reordering :premises (t1176))
(step t1178 (cl (not (= (not (= (op e2 e1) (op e3 e1))) (not (= (op e3 e1) (op (op e1 e3) e1))))) (not (not (= (op e2 e1) (op e3 e1)))) (not (= (op e3 e1) (op (op e1 e3) e1)))) :rule equiv_pos2)
(step t1179 (cl (= (= (op e2 e1) (op e3 e1)) (= (op (op e1 e3) e1) (op e3 e1)))) :rule cong :premises (t26 t156))
(step t1180 (cl (= (not (= (op e2 e1) (op e3 e1))) (not (= (op (op e1 e3) e1) (op e3 e1))))) :rule cong :premises (t1179))
(step t1181 (cl (= (not (= (op (op e1 e3) e1) (op e3 e1))) (not (= (op e3 e1) (op (op e1 e3) e1))))) :rule cong :premises (t1169))
(step t1182 (cl (= (not (= (op e2 e1) (op e3 e1))) (not (= (op e3 e1) (op (op e1 e3) e1))))) :rule trans :premises (t1180 t1181))
(step t1183 (cl (not (= (op e2 e1) (op e3 e1)))) :rule and :premises (t368) :args (1))
(step t1184 (cl (not (= (op e3 e1) (op (op e1 e3) e1)))) :rule resolution :premises (t1178 t1182 t1183))
(step t1185 (cl (= (= (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) false) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t1186 (cl (not (= (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) false)) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))))) :rule equiv1 :premises (t1185))
(step t1187 (cl (= (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule cong :premises (t273 t927))
(step t1188 (cl (= (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) :rule equiv_simplify)
(step t1189 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false) (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) :rule equiv2 :premises (t1188))
(step t1190 (cl (not (not (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) :rule not_not)
(step t1191 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))) :rule resolution :premises (t1189 t1190))
(step t1192 (cl (not (= (not (= (op e0 e0) (op e3 e0))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) (not (not (= (op e0 e0) (op e3 e0)))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule equiv_pos2)
(step t1193 (cl (= (= (op e0 e0) (op e3 e0)) (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule cong :premises (t178 t90))
(step t1194 (cl (= (not (= (op e0 e0) (op e3 e0))) (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1)))))) :rule cong :premises (t1193))
(step t1195 (cl (and (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0)))) (not (= (op e1 e0) (op e4 e0))))) :rule and :premises (t99) :args (0))
(step t1196 (cl (and (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0)))) (not (= (op e1 e0) (op e3 e0))))) :rule and :premises (t1195) :args (0))
(step t1197 (cl (and (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0)))) (not (= (op e1 e0) (op e2 e0))))) :rule and :premises (t1196) :args (0))
(step t1198 (cl (and (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0)))) (not (= (op e0 e0) (op e4 e0))))) :rule and :premises (t1197) :args (0))
(step t1199 (cl (and (and (not (= (op e0 e0) (op e1 e0))) (not (= (op e0 e0) (op e2 e0)))) (not (= (op e0 e0) (op e3 e0))))) :rule and :premises (t1198) :args (0))
(step t1200 (cl (not (= (op e0 e0) (op e3 e0)))) :rule and :premises (t1199) :args (1))
(step t1201 (cl (not (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t1192 t1194 t1200))
(step t1202 (cl (= (= (op (op (op e1 e3) e1) (op (op e1 e3) e1)) (op e3 (op (op e1 e3) e1))) false)) :rule resolution :premises (t1191 t1201))
(step t1203 (cl (= (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))) false)) :rule trans :premises (t1187 t1202))
(step t1204 (cl (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e1))))) :rule resolution :premises (t1186 t1203))
(step t1205 (cl (= (= (= (op e3 e3) (op (op e1 e3) e1)) false) (not (= (op e3 e3) (op (op e1 e3) e1))))) :rule equiv_simplify)
(step t1206 (cl (not (= (= (op e3 e3) (op (op e1 e3) e1)) false)) (not (= (op e3 e3) (op (op e1 e3) e1)))) :rule equiv1 :premises (t1205))
(step t1207 (cl (= (= (op e3 e3) (op (op e1 e3) e1)) (= (op e3 e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t310 t486))
(step t1208 (cl (= (= (op e3 e3) (op (op e1 e3) e1)) false)) :rule trans :premises (t1207 t415))
(step t1209 (cl (not (= (op e3 e3) (op (op e1 e3) e1)))) :rule resolution :premises (t1206 t1208))
(step t1210 (cl (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) :rule resolution :premises (t215 t321 t335 t442 t486 t424 t303 t491 t493 t273 t500 t114 t383 t519 t528 t544 t567 t579 t599 t614 t625 t669 t675 t424 t273 t682 t697 t682 t735 t752 t760 t809 t486 t810 t303 t817 t760 t500 t832 t760 t849 t864 t465 t879 t895 t901 t879 t924 t935 t957 t968 t1007 t1012 t1021 t1057 t486 t1012 t817 t1021 t500 t383 t1094 t1099 t1021 t1139 t486 t321 t482 t1154 t1021 t1177 t1184 t1204 t1209))
(step t1211 (cl (not (= e1 (op (op (op e1 e3) e3) (op (op e1 e3) e3))))) :rule resolution :premises (t87 t101 t114 t1210 t424 t760))
(step t1212 (cl (not (= (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (or (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))))) (not (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))))) (or (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule equiv_pos2)
(step t1213 (cl (= (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (or (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))))) :rule cong :premises (t1110 t1111 t775 t55 t699))
(step t1214 (cl (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) :rule and_neg)
(step t1215 (cl (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) :rule implies_neg1)
(anchor :step t1216)
(assume t1216.a0 (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))))
(assume t1216.a1 (= e1 (op (op (op e1 e3) e1) e3)))
(assume t1216.a2 (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))
(assume t1216.a3 (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))
(step t1216.t0 (cl (= (= (= e1 (op e3 (op (op e1 e3) e3))) false) (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t1216.t1 (cl (not (= (= e1 (op e3 (op (op e1 e3) e3))) false)) (not (= e1 (op e3 (op (op e1 e3) e3))))) :rule equiv1 :premises (t1216.t0))
(step t1216.t2 (cl (= (op (op (op e1 e3) e3) e3) (op (op e1 e3) e1))) :rule symm :premises (t486))
(step t1216.t3 (cl (= (op (op (op e1 e3) e3) e3) (op e3 (op (op e1 e3) e3)))) :rule trans :premises (t1216.t2 t1216.a3))
(step t1216.t4 (cl (= (op e3 (op (op e1 e3) e3)) (op (op (op e1 e3) e3) e3))) :rule symm :premises (t1216.t3))
(step t1216.t5 (cl (= (= e1 (op e3 (op (op e1 e3) e3))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule cong :premises (t321 t1216.t4))
(step t1216.t6 (cl (= (= e1 (op e3 (op (op e1 e3) e3))) false)) :rule trans :premises (t1216.t5 t483))
(step t1216.t7 (cl (not (= e1 (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t1216.t1 t1216.t6))
(step t1216 (cl (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) :rule subproof :discharge (t1216.a0 t1216.a1 t1216.a2 t1216.a3))
(step t1217 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) :rule and_pos :args (0))
(step t1218 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (= e1 (op (op (op e1 e3) e1) e3))) :rule and_pos :args (1))
(step t1219 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) :rule and_pos :args (2))
(step t1220 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) :rule and_pos :args (3))
(step t1221 (cl (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))))) :rule resolution :premises (t1216 t1217 t1218 t1219 t1220))
(step t1222 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3))))) :rule reordering :premises (t1221))
(step t1223 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3))))) :rule contraction :premises (t1222))
(step t1224 (cl (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t1215 t1223))
(step t1225 (cl (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (not (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule implies_neg2)
(step t1226 (cl (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule resolution :premises (t1224 t1225))
(step t1227 (cl (=> (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule contraction :premises (t1226))
(step t1228 (cl (not (and (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3))) (= e1 (op (op (op e1 e3) e1) e3)) (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)) (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3))))) (not (= e1 (op e3 (op (op e1 e3) e3))))) :rule implies :premises (t1227))
(step t1229 (cl (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t1214 t1228))
(step t1230 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (not (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))))) :rule or_neg :args (0))
(step t1231 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (not (not (= e1 (op (op (op e1 e3) e1) e3))))) :rule or_neg :args (1))
(step t1232 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))))) :rule or_neg :args (2))
(step t1233 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (not (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))))) :rule or_neg :args (3))
(step t1234 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (not (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule or_neg :args (4))
(step t1235 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule resolution :premises (t1229 t1230 t1231 t1232 t1233 t1234))
(step t1236 (cl (or (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)))) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule contraction :premises (t1235))
(step t1237 (cl (or (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))))) :rule resolution :premises (t1212 t1213 t1236))
(step t1238 (cl (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3))))) :rule or :premises (t1237))
(step t1239 (cl (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e3) e3)) (not (= e1 (op (op (op e1 e3) e1) e3))) (not (= (op (op e1 e3) e1) (op e3 (op (op e1 e3) e3)))) (not (= e1 (op e3 (op (op e1 e3) e3)))) (not (= (op (op e1 e3) e1) (op (op (op e1 e3) e3) e3)))) :rule reordering :premises (t1238))
(step t1240 (cl (not (= e1 (op e3 (op (op e1 e3) e3))))) :rule resolution :premises (t1239 t482 t321 t1210 t486))
(step t1241 (cl (= (= (= e1 (op (op e1 e3) (op (op e1 e3) e3))) false) (not (= e1 (op (op e1 e3) (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t1242 (cl (not (= (= e1 (op (op e1 e3) (op (op e1 e3) e3))) false)) (not (= e1 (op (op e1 e3) (op (op e1 e3) e3))))) :rule equiv1 :premises (t1241))
(step t1243 (cl (= (op (op e1 e3) (op (op e1 e3) e3)) e3)) :rule symm :premises (t500))
(step t1244 (cl (= (op (op e1 e3) (op (op e1 e3) e3)) (op e1 (op e1 e3)))) :rule trans :premises (t1243 t383))
(step t1245 (cl (= (= e1 (op (op e1 e3) (op (op e1 e3) e3))) (= (op e1 e1) (op e1 (op e1 e3))))) :rule cong :premises (t493 t1244))
(step t1246 (cl (= (= e1 (op (op e1 e3) (op (op e1 e3) e3))) false)) :rule trans :premises (t1245 t955))
(step t1247 (cl (not (= e1 (op (op e1 e3) (op (op e1 e3) e3))))) :rule resolution :premises (t1242 t1246))
(step t1248 (cl (= (= (= e1 (op e1 (op (op e1 e3) e3))) false) (not (= e1 (op e1 (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t1249 (cl (not (= (= e1 (op e1 (op (op e1 e3) e3))) false)) (not (= e1 (op e1 (op (op e1 e3) e3))))) :rule equiv1 :premises (t1248))
(step t1250 (cl (= (op e1 (op (op e1 e3) e3)) (op e1 (op (op e1 e3) e3)))) :rule refl)
(step t1251 (cl (= (= e1 (op e1 (op (op e1 e3) e3))) (= (op e1 e1) (op e1 (op (op e1 e3) e3))))) :rule cong :premises (t493 t1250))
(step t1252 (cl (= (= (= (op e1 e1) (op e1 (op (op e1 e3) e3))) false) (not (= (op e1 e1) (op e1 (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t1253 (cl (= (= (op e1 e1) (op e1 (op (op e1 e3) e3))) false) (not (not (= (op e1 e1) (op e1 (op (op e1 e3) e3)))))) :rule equiv2 :premises (t1252))
(step t1254 (cl (not (not (not (= (op e1 e1) (op e1 (op (op e1 e3) e3)))))) (= (op e1 e1) (op e1 (op (op e1 e3) e3)))) :rule not_not)
(step t1255 (cl (= (= (op e1 e1) (op e1 (op (op e1 e3) e3))) false) (= (op e1 e1) (op e1 (op (op e1 e3) e3)))) :rule resolution :premises (t1253 t1254))
(step t1256 (cl (not (= (not (= (op e1 e1) (op e1 e4))) (not (= (op e1 e1) (op e1 (op (op e1 e3) e3)))))) (not (not (= (op e1 e1) (op e1 e4)))) (not (= (op e1 e1) (op e1 (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t1257 (cl (= (= (op e1 e1) (op e1 e4)) (= (op e1 e1) (op e1 (op (op e1 e3) e3))))) :rule cong :premises (t945 t30))
(step t1258 (cl (= (not (= (op e1 e1) (op e1 e4))) (not (= (op e1 e1) (op e1 (op (op e1 e3) e3)))))) :rule cong :premises (t1257))
(step t1259 (cl (not (= (op e1 e1) (op e1 e4)))) :rule and :premises (t950) :args (1))
(step t1260 (cl (not (= (op e1 e1) (op e1 (op (op e1 e3) e3))))) :rule resolution :premises (t1256 t1258 t1259))
(step t1261 (cl (= (= (op e1 e1) (op e1 (op (op e1 e3) e3))) false)) :rule resolution :premises (t1255 t1260))
(step t1262 (cl (= (= e1 (op e1 (op (op e1 e3) e3))) false)) :rule trans :premises (t1251 t1261))
(step t1263 (cl (not (= e1 (op e1 (op (op e1 e3) e3))))) :rule resolution :premises (t1249 t1262))
(step t1264 (cl (= (= (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false) (not (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t1265 (cl (not (= (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false)) (not (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule equiv1 :premises (t1264))
(step t1266 (cl (= (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule cong :premises (t321 t531))
(step t1267 (cl (= (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false) (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule equiv_simplify)
(step t1268 (cl (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false) (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule equiv2 :premises (t1267))
(step t1269 (cl (not (not (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) :rule not_not)
(step t1270 (cl (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))) :rule resolution :premises (t1268 t1269))
(step t1271 (cl (not (= (not (= (op e0 e3) (op e0 e4))) (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) (not (not (= (op e0 e3) (op e0 e4)))) (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule equiv_pos2)
(step t1272 (cl (= (= (op e0 e3) (op e0 e4)) (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule cong :premises (t174 t28))
(step t1273 (cl (= (not (= (op e0 e3) (op e0 e4))) (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3)))))) :rule cong :premises (t1272))
(step t1274 (cl (not (= (op e0 e3) (op e0 e4)))) :rule and :premises (t287) :args (1))
(step t1275 (cl (not (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule resolution :premises (t1271 t1273 t1274))
(step t1276 (cl (= (= (op (op (op e1 e3) e1) e3) (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false)) :rule resolution :premises (t1270 t1275))
(step t1277 (cl (= (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))) false)) :rule trans :premises (t1266 t1276))
(step t1278 (cl (not (= e1 (op (op (op e1 e3) e1) (op (op e1 e3) e3))))) :rule resolution :premises (t1265 t1277))
(step t1279 (cl) :rule resolution :premises (t42 t1211 t1240 t1247 t1263 t1278))
